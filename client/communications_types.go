// DO NOT MODIFY: This file is generated by tools/generate.js. Any changes will be overwritten during the next build.

package client

import (
    "fmt"
	"reflect"
	
	"github.com/google/jsonapi"
	rootlygo "github.com/rootlyhq/terraform-provider-rootly/v2/schema"
)

type CommunicationsType struct {
	ID string `jsonapi:"primary,communications_types"`
	Name string `jsonapi:"attr,name,omitempty"`
  Slug string `jsonapi:"attr,slug,omitempty"`
  Description string `jsonapi:"attr,description,omitempty"`
  Color string `jsonapi:"attr,color,omitempty"`
  Position int `jsonapi:"attr,position,omitempty"`
}

func (c *Client) ListCommunicationsTypes(params *rootlygo.ListCommunicationsTypesParams) ([]interface{}, error) {
	req, err := rootlygo.NewListCommunicationsTypesRequest(c.Rootly.Server, params)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}

	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request: %w", err)
	}

	communications_types, err := jsonapi.UnmarshalManyPayload(resp.Body, reflect.TypeOf(new(CommunicationsType)))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling: %w", err)
	}

	return communications_types, nil
}

func (c *Client) CreateCommunicationsType(d *CommunicationsType) (*CommunicationsType, error) {
	buffer, err := MarshalData(d)
	if err != nil {
		return nil, fmt.Errorf("Error marshaling communications_type: %w", err)
	}

	req, err := rootlygo.NewCreateCommunicationsTypeRequestWithBody(c.Rootly.Server, c.ContentType, buffer)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}
	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to perform request to create communications_type: %s", err)
	}

	data, err := UnmarshalData(resp.Body, new(CommunicationsType))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling communications_type: %w", err)
	}

	return data.(*CommunicationsType), nil
}

func (c *Client) GetCommunicationsType(id string) (*CommunicationsType, error) {
	req, err := rootlygo.NewGetCommunicationsTypeRequest(c.Rootly.Server, id)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}

	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request to get communications_type: %w", err)
	}

	data, err := UnmarshalData(resp.Body, new(CommunicationsType))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling communications_type: %w", err)
	}

	return data.(*CommunicationsType), nil
}

func (c *Client) UpdateCommunicationsType(id string, communications_type *CommunicationsType) (*CommunicationsType, error) {
	buffer, err := MarshalData(communications_type)
	if err != nil {
		return nil, fmt.Errorf("Error marshaling communications_type: %w", err)
	}

	req, err := rootlygo.NewUpdateCommunicationsTypeRequestWithBody(c.Rootly.Server, id, c.ContentType, buffer)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}
	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request to update communications_type: %w", err)
	}

	data, err := UnmarshalData(resp.Body, new(CommunicationsType))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling communications_type: %w", err)
	}

	return data.(*CommunicationsType), nil
}

func (c *Client) DeleteCommunicationsType(id string) error {
	req, err := rootlygo.NewDeleteCommunicationsTypeRequest(c.Rootly.Server, id)
	if err != nil {
		return fmt.Errorf("Error building request: %w", err)
	}

	_, err = c.Do(req)
	if err != nil {
		return fmt.Errorf("Failed to make request to delete communications_type: %w", err)
	}

	return nil
}
