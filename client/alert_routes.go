// DO NOT MODIFY: This file is generated by tools/generate.js. Any changes will be overwritten during the next build.

package client

import (
	"fmt"
	"reflect"

	"github.com/google/jsonapi"
	rootlygo "github.com/rootlyhq/terraform-provider-rootly/v2/schema"
)

type AlertRoute struct {
	ID              string        `jsonapi:"primary,alert_routes"`
	Name            string        `jsonapi:"attr,name,omitempty"`
	Enabled         *bool         `jsonapi:"attr,enabled,omitempty"`
	AlertsSourceIds []interface{} `jsonapi:"attr,alerts_source_ids,omitempty"`
	OwningTeamIds   []interface{} `jsonapi:"attr,owning_team_ids,omitempty"`
	Rules           []interface{} `jsonapi:"attr,rules,omitempty"`
}

func (c *Client) ListAlertRoutes(params *rootlygo.ListAlertRoutesParams) ([]interface{}, error) {
	req, err := rootlygo.NewListAlertRoutesRequest(c.Rootly.Server, params)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}

	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request: %w", err)
	}

	alert_routes, err := jsonapi.UnmarshalManyPayload(resp.Body, reflect.TypeOf(new(AlertRoute)))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling: %w", err)
	}

	return alert_routes, nil
}

func (c *Client) CreateAlertRoute(d *AlertRoute) (*AlertRoute, error) {
	buffer, err := MarshalData(d)
	if err != nil {
		return nil, fmt.Errorf("Error marshaling alert_route: %w", err)
	}

	req, err := rootlygo.NewCreateAlertRouteRequestWithBody(c.Rootly.Server, c.ContentType, buffer)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}
	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to perform request to create alert_route: %s", err)
	}

	data, err := UnmarshalData(resp.Body, new(AlertRoute))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling alert_route: %w", err)
	}

	return data.(*AlertRoute), nil
}

func (c *Client) GetAlertRoute(id string) (*AlertRoute, error) {
	req, err := rootlygo.NewGetAlertRouteRequest(c.Rootly.Server, id)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}

	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request to get alert_route: %w", err)
	}

	data, err := UnmarshalData(resp.Body, new(AlertRoute))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling alert_route: %w", err)
	}

	return data.(*AlertRoute), nil
}

func (c *Client) UpdateAlertRoute(id string, alert_route *AlertRoute) (*AlertRoute, error) {
	buffer, err := MarshalData(alert_route)
	if err != nil {
		return nil, fmt.Errorf("Error marshaling alert_route: %w", err)
	}

	req, err := rootlygo.NewUpdateAlertRouteRequestWithBody(c.Rootly.Server, id, c.ContentType, buffer)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}
	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request to update alert_route: %w", err)
	}

	data, err := UnmarshalData(resp.Body, new(AlertRoute))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling alert_route: %w", err)
	}

	return data.(*AlertRoute), nil
}

func (c *Client) DeleteAlertRoute(id string) error {
	req, err := rootlygo.NewDeleteAlertRouteRequest(c.Rootly.Server, id)
	if err != nil {
		return fmt.Errorf("Error building request: %w", err)
	}

	_, err = c.Do(req)
	if err != nil {
		return fmt.Errorf("Failed to make request to delete alert_route: %w", err)
	}

	return nil
}
