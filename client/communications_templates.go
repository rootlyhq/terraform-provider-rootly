// DO NOT MODIFY: This file is generated by tools/generate.js. Any changes will be overwritten during the next build.

package client

import (
    "fmt"
	"reflect"
	
	"github.com/google/jsonapi"
	rootlygo "github.com/rootlyhq/terraform-provider-rootly/v2/schema"
)

type CommunicationsTemplate struct {
	ID string `jsonapi:"primary,communications_templates"`
	Name string `jsonapi:"attr,name,omitempty"`
  Slug string `jsonapi:"attr,slug,omitempty"`
  Description string `jsonapi:"attr,description,omitempty"`
  Position int `jsonapi:"attr,position,omitempty"`
  CommunicationTypeId string `jsonapi:"attr,communication_type_id,omitempty"`
  CommunicationTemplateStages []interface{} `jsonapi:"attr,communication_template_stages,omitempty"`
  CommunicationType map[string]interface{} `jsonapi:"attr,communication_type,omitempty"`
}

func (c *Client) ListCommunicationsTemplates(params *rootlygo.ListCommunicationsTemplatesParams) ([]interface{}, error) {
	req, err := rootlygo.NewListCommunicationsTemplatesRequest(c.Rootly.Server, params)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}

	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request: %w", err)
	}

	communications_templates, err := jsonapi.UnmarshalManyPayload(resp.Body, reflect.TypeOf(new(CommunicationsTemplate)))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling: %w", err)
	}

	return communications_templates, nil
}

func (c *Client) CreateCommunicationsTemplate(d *CommunicationsTemplate) (*CommunicationsTemplate, error) {
	buffer, err := MarshalData(d)
	if err != nil {
		return nil, fmt.Errorf("Error marshaling communications_template: %w", err)
	}

	req, err := rootlygo.NewCreateCommunicationsTemplateRequestWithBody(c.Rootly.Server, c.ContentType, buffer)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}
	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to perform request to create communications_template: %s", err)
	}

	data, err := UnmarshalData(resp.Body, new(CommunicationsTemplate))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling communications_template: %w", err)
	}

	return data.(*CommunicationsTemplate), nil
}

func (c *Client) GetCommunicationsTemplate(id string) (*CommunicationsTemplate, error) {
	req, err := rootlygo.NewGetCommunicationsTemplateRequest(c.Rootly.Server, id)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}

	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request to get communications_template: %w", err)
	}

	data, err := UnmarshalData(resp.Body, new(CommunicationsTemplate))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling communications_template: %w", err)
	}

	return data.(*CommunicationsTemplate), nil
}

func (c *Client) UpdateCommunicationsTemplate(id string, communications_template *CommunicationsTemplate) (*CommunicationsTemplate, error) {
	buffer, err := MarshalData(communications_template)
	if err != nil {
		return nil, fmt.Errorf("Error marshaling communications_template: %w", err)
	}

	req, err := rootlygo.NewUpdateCommunicationsTemplateRequestWithBody(c.Rootly.Server, id, c.ContentType, buffer)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}
	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request to update communications_template: %w", err)
	}

	data, err := UnmarshalData(resp.Body, new(CommunicationsTemplate))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling communications_template: %w", err)
	}

	return data.(*CommunicationsTemplate), nil
}

func (c *Client) DeleteCommunicationsTemplate(id string) error {
	req, err := rootlygo.NewDeleteCommunicationsTemplateRequest(c.Rootly.Server, id)
	if err != nil {
		return fmt.Errorf("Error building request: %w", err)
	}

	_, err = c.Do(req)
	if err != nil {
		return fmt.Errorf("Failed to make request to delete communications_template: %w", err)
	}

	return nil
}
