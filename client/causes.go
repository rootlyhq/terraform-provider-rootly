// DO NOT MODIFY: This file is generated by tools/generate.js. Any changes will be overwritten during the next build.

package client

import (
    "fmt"
	"reflect"
	
	"github.com/google/jsonapi"
	rootlygo "github.com/rootlyhq/terraform-provider-rootly/v2/schema"
)

type Cause struct {
	ID string `jsonapi:"primary,causes"`
	Name string `jsonapi:"attr,name,omitempty"`
  Slug string `jsonapi:"attr,slug,omitempty"`
  Description string `jsonapi:"attr,description,omitempty"`
  Position int `jsonapi:"attr,position,omitempty"`
}

func (c *Client) ListCauses(params *rootlygo.ListCausesParams) ([]interface{}, error) {
	req, err := rootlygo.NewListCausesRequest(c.Rootly.Server, params)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}

	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request: %w", err)
	}

	causes, err := jsonapi.UnmarshalManyPayload(resp.Body, reflect.TypeOf(new(Cause)))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling: %w", err)
	}

	return causes, nil
}

func (c *Client) CreateCause(d *Cause) (*Cause, error) {
	buffer, err := MarshalData(d)
	if err != nil {
		return nil, fmt.Errorf("Error marshaling cause: %w", err)
	}

	req, err := rootlygo.NewCreateCauseRequestWithBody(c.Rootly.Server, c.ContentType, buffer)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}
	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to perform request to create cause: %s", err)
	}

	data, err := UnmarshalData(resp.Body, new(Cause))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling cause: %w", err)
	}

	return data.(*Cause), nil
}

func (c *Client) GetCause(id string) (*Cause, error) {
	req, err := rootlygo.NewGetCauseRequest(c.Rootly.Server, id)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}

	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request to get cause: %w", err)
	}

	data, err := UnmarshalData(resp.Body, new(Cause))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling cause: %w", err)
	}

	return data.(*Cause), nil
}

func (c *Client) UpdateCause(id string, cause *Cause) (*Cause, error) {
	buffer, err := MarshalData(cause)
	if err != nil {
		return nil, fmt.Errorf("Error marshaling cause: %w", err)
	}

	req, err := rootlygo.NewUpdateCauseRequestWithBody(c.Rootly.Server, id, c.ContentType, buffer)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}
	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request to update cause: %w", err)
	}

	data, err := UnmarshalData(resp.Body, new(Cause))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling cause: %w", err)
	}

	return data.(*Cause), nil
}

func (c *Client) DeleteCause(id string) error {
	req, err := rootlygo.NewDeleteCauseRequest(c.Rootly.Server, id)
	if err != nil {
		return fmt.Errorf("Error building request: %w", err)
	}

	_, err = c.Do(req)
	if err != nil {
		return fmt.Errorf("Failed to make request to delete cause: %w", err)
	}

	return nil
}
