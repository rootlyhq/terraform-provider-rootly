// DO NOT MODIFY: This file is generated by tools/generate.js. Any changes will be overwritten during the next build.

package client

import (
    "fmt"
	"reflect"
	
	"github.com/google/jsonapi"
	rootlygo "github.com/rootlyhq/terraform-provider-rootly/v2/schema"
)

type CommunicationsStage struct {
	ID string `jsonapi:"primary,communications_stages"`
	Name string `jsonapi:"attr,name,omitempty"`
  Slug string `jsonapi:"attr,slug,omitempty"`
  Description string `jsonapi:"attr,description,omitempty"`
  Position int `jsonapi:"attr,position,omitempty"`
}

func (c *Client) ListCommunicationsStages(params *rootlygo.ListCommunicationsStagesParams) ([]interface{}, error) {
	req, err := rootlygo.NewListCommunicationsStagesRequest(c.Rootly.Server, params)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}

	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request: %w", err)
	}

	communications_stages, err := jsonapi.UnmarshalManyPayload(resp.Body, reflect.TypeOf(new(CommunicationsStage)))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling: %w", err)
	}

	return communications_stages, nil
}

func (c *Client) CreateCommunicationsStage(d *CommunicationsStage) (*CommunicationsStage, error) {
	buffer, err := MarshalData(d)
	if err != nil {
		return nil, fmt.Errorf("Error marshaling communications_stage: %w", err)
	}

	req, err := rootlygo.NewCreateCommunicationsStageRequestWithBody(c.Rootly.Server, c.ContentType, buffer)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}
	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to perform request to create communications_stage: %s", err)
	}

	data, err := UnmarshalData(resp.Body, new(CommunicationsStage))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling communications_stage: %w", err)
	}

	return data.(*CommunicationsStage), nil
}

func (c *Client) GetCommunicationsStage(id string) (*CommunicationsStage, error) {
	req, err := rootlygo.NewGetCommunicationsStageRequest(c.Rootly.Server, id)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}

	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request to get communications_stage: %w", err)
	}

	data, err := UnmarshalData(resp.Body, new(CommunicationsStage))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling communications_stage: %w", err)
	}

	return data.(*CommunicationsStage), nil
}

func (c *Client) UpdateCommunicationsStage(id string, communications_stage *CommunicationsStage) (*CommunicationsStage, error) {
	buffer, err := MarshalData(communications_stage)
	if err != nil {
		return nil, fmt.Errorf("Error marshaling communications_stage: %w", err)
	}

	req, err := rootlygo.NewUpdateCommunicationsStageRequestWithBody(c.Rootly.Server, id, c.ContentType, buffer)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}
	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request to update communications_stage: %w", err)
	}

	data, err := UnmarshalData(resp.Body, new(CommunicationsStage))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling communications_stage: %w", err)
	}

	return data.(*CommunicationsStage), nil
}

func (c *Client) DeleteCommunicationsStage(id string) error {
	req, err := rootlygo.NewDeleteCommunicationsStageRequest(c.Rootly.Server, id)
	if err != nil {
		return fmt.Errorf("Error building request: %w", err)
	}

	_, err = c.Do(req)
	if err != nil {
		return fmt.Errorf("Failed to make request to delete communications_stage: %w", err)
	}

	return nil
}
