// DO NOT MODIFY: This file is generated by tools/generate.js. Any changes will be overwritten during the next build.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"reflect"

	"github.com/google/jsonapi"
	rootlygo "github.com/rootlyhq/terraform-provider-rootly/v2/schema"
)

type ScheduleRotation struct {
	ID                             string                 `jsonapi:"primary,schedule_rotations"`
	ScheduleId                     string                 `jsonapi:"attr,schedule_id,omitempty"`
	Name                           string                 `jsonapi:"attr,name,omitempty"`
	Position                       int                    `jsonapi:"attr,position,omitempty"`
	ScheduleRotationableType       string                 `jsonapi:"attr,schedule_rotationable_type,omitempty"`
	ActiveAllWeek                  *bool                  `jsonapi:"attr,active_all_week,omitempty"`
	ActiveDays                     []interface{}          `jsonapi:"attr,active_days,omitempty"`
	ActiveTimeType                 string                 `jsonapi:"attr,active_time_type,omitempty"`
	ActiveTimeAttributes           []interface{}          `jsonapi:"attr,active_time_attributes,omitempty"`
	TimeZone                       string                 `jsonapi:"attr,time_zone,omitempty"`
	StartTime                      string                 `jsonapi:"attr,start_time,omitempty"`
	EndTime                        string                 `jsonapi:"attr,end_time,omitempty"`
	ScheduleRotationMembers        []interface{}          `jsonapi:"attr,schedule_rotation_members,omitempty"`
	ScheduleRotationableAttributes map[string]interface{} `jsonapi:"attr,schedule_rotationable_attributes,omitempty"`
}

func (c *Client) ListScheduleRotations(id string, params *rootlygo.ListScheduleRotationsParams) ([]interface{}, error) {
	req, err := rootlygo.NewListScheduleRotationsRequest(c.Rootly.Server, id, params)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}

	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request: %w", err)
	}

	schedule_rotations, err := jsonapi.UnmarshalManyPayload(resp.Body, reflect.TypeOf(new(ScheduleRotation)))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling: %w", err)
	}

	return schedule_rotations, nil
}

func (c *Client) CreateScheduleRotation(d *ScheduleRotation) (*ScheduleRotation, error) {
	buffer, err := MarshalData(d)
	if err != nil {
		return nil, fmt.Errorf("Error marshaling schedule_rotation: %w", err)
	}

	req, err := rootlygo.NewCreateScheduleRotationRequestWithBody(c.Rootly.Server, d.ScheduleId, c.ContentType, buffer)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}
	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to perform request to create schedule_rotation: %s", err)
	}

	data, err := UnmarshalData(resp.Body, new(ScheduleRotation))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling schedule_rotation: %w", err)
	}

	return data.(*ScheduleRotation), nil
}

func (c *Client) GetScheduleRotation(id string) (*ScheduleRotation, error) {
	req, err := rootlygo.NewGetScheduleRotationRequest(c.Rootly.Server, id)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}

	// Add include parameter to get schedule_rotation_members data
	q := req.URL.Query()
	q.Add("include", "schedule_rotation_members")
	req.URL.RawQuery = q.Encode()

	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request to get schedule_rotation: %w", err)
	}
	defer resp.Body.Close()

	// Read the response body into a buffer so we can use it twice
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("Error reading response body: %w", err)
	}

	// First unmarshal the standard attributes using jsonapi
	data, err := UnmarshalData(io.NopCloser(bytes.NewReader(body)), new(ScheduleRotation))
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling schedule_rotation: %w", err)
	}

	scheduleRotation := data.(*ScheduleRotation)

	// Parse raw JSON to extract relationships
	var jsonResponse map[string]interface{}
	if err := json.Unmarshal(body, &jsonResponse); err != nil {
		return nil, fmt.Errorf("Error decoding JSON response: %w", err)
	}

	// Extract schedule_rotation_members from included data
	if included, ok := jsonResponse["included"].([]interface{}); ok {
		var membersList []interface{}
		for _, item := range included {
			if includedItem, ok := item.(map[string]interface{}); ok {
				if itemType, ok := includedItem["type"].(string); ok && itemType == "schedule_rotation_members" {
					if attributes, ok := includedItem["attributes"].(map[string]interface{}); ok {
						membersList = append(membersList, attributes)
					}
				}
			}
		}
		if len(membersList) > 0 {
			scheduleRotation.ScheduleRotationMembers = membersList
		}
	}

	return scheduleRotation, nil
}

func (c *Client) UpdateScheduleRotation(id string, schedule_rotation *ScheduleRotation) (*ScheduleRotation, error) {
	buffer, err := MarshalData(schedule_rotation)
	if err != nil {
		return nil, fmt.Errorf("Error marshaling schedule_rotation: %w", err)
	}

	req, err := rootlygo.NewUpdateScheduleRotationRequestWithBody(c.Rootly.Server, id, c.ContentType, buffer)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}
	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request to update schedule_rotation: %w", err)
	}

	data, err := UnmarshalData(resp.Body, new(ScheduleRotation))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling schedule_rotation: %w", err)
	}

	return data.(*ScheduleRotation), nil
}

func (c *Client) DeleteScheduleRotation(id string) error {
	req, err := rootlygo.NewDeleteScheduleRotationRequest(c.Rootly.Server, id)
	if err != nil {
		return fmt.Errorf("Error building request: %w", err)
	}

	_, err = c.Do(req)
	if err != nil {
		return fmt.Errorf("Failed to make request to delete schedule_rotation: %w", err)
	}

	return nil
}
