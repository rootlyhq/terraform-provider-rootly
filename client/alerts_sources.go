// DO NOT MODIFY: This file is generated by tools/generate.js. Any changes will be overwritten during the next build.

package client

import (
    "fmt"
	"reflect"
	
	"github.com/google/jsonapi"
	rootlygo "github.com/rootlyhq/terraform-provider-rootly/v2/schema"
)

type AlertsSource struct {
	ID string `jsonapi:"primary,alert_sources"`
	Name string `jsonapi:"attr,name,omitempty"`
  SourceType string `jsonapi:"attr,source_type,omitempty"`
  AlertUrgencyId string `jsonapi:"attr,alert_urgency_id,omitempty"`
  OwnerGroupIds []interface{} `jsonapi:"attr,owner_group_ids,omitempty"`
  AlertTemplateAttributes map[string]interface{} `jsonapi:"attr,alert_template_attributes,omitempty"`
  AlertSourceUrgencyRulesAttributes []interface{} `jsonapi:"attr,alert_source_urgency_rules_attributes,omitempty"`
  SourceableAttributes map[string]interface{} `jsonapi:"attr,sourceable_attributes,omitempty"`
  ResolutionRuleAttributes map[string]interface{} `jsonapi:"attr,resolution_rule_attributes,omitempty"`
  AlertSourceFieldsAttributes []interface{} `jsonapi:"attr,alert_source_fields_attributes,omitempty"`
  Status string `jsonapi:"attr,status,omitempty"`
  Secret string `jsonapi:"attr,secret,omitempty"`
  Email string `jsonapi:"attr,email,omitempty"`
  WebhookEndpoint string `jsonapi:"attr,webhook_endpoint,omitempty"`
}

func (c *Client) ListAlertsSources(params *rootlygo.ListAlertsSourcesParams) ([]interface{}, error) {
	req, err := rootlygo.NewListAlertsSourcesRequest(c.Rootly.Server, params)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}

	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request: %w", err)
	}

	alerts_sources, err := jsonapi.UnmarshalManyPayload(resp.Body, reflect.TypeOf(new(AlertsSource)))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling: %w", err)
	}

	return alerts_sources, nil
}

func (c *Client) CreateAlertsSource(d *AlertsSource) (*AlertsSource, error) {
	buffer, err := MarshalData(d)
	if err != nil {
		return nil, fmt.Errorf("Error marshaling alerts_source: %w", err)
	}

	req, err := rootlygo.NewCreateAlertsSourceRequestWithBody(c.Rootly.Server, c.ContentType, buffer)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}
	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to perform request to create alerts_source: %s", err)
	}

	data, err := UnmarshalData(resp.Body, new(AlertsSource))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling alerts_source: %w", err)
	}

	return data.(*AlertsSource), nil
}

func (c *Client) GetAlertsSource(id string) (*AlertsSource, error) {
	req, err := rootlygo.NewGetAlertsSourceRequest(c.Rootly.Server, id)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}

	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request to get alerts_source: %w", err)
	}

	data, err := UnmarshalData(resp.Body, new(AlertsSource))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling alerts_source: %w", err)
	}

	return data.(*AlertsSource), nil
}

func (c *Client) UpdateAlertsSource(id string, alerts_source *AlertsSource) (*AlertsSource, error) {
	buffer, err := MarshalData(alerts_source)
	if err != nil {
		return nil, fmt.Errorf("Error marshaling alerts_source: %w", err)
	}

	req, err := rootlygo.NewUpdateAlertsSourceRequestWithBody(c.Rootly.Server, id, c.ContentType, buffer)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}
	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request to update alerts_source: %w", err)
	}

	data, err := UnmarshalData(resp.Body, new(AlertsSource))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling alerts_source: %w", err)
	}

	return data.(*AlertsSource), nil
}

func (c *Client) DeleteAlertsSource(id string) error {
	req, err := rootlygo.NewDeleteAlertsSourceRequest(c.Rootly.Server, id)
	if err != nil {
		return fmt.Errorf("Error building request: %w", err)
	}

	_, err = c.Do(req)
	if err != nil {
		return fmt.Errorf("Failed to make request to delete alerts_source: %w", err)
	}

	return nil
}
