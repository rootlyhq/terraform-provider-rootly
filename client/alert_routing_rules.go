// DO NOT MODIFY: This file is generated by tools/generate.js. Any changes will be overwritten during the next build.

package client

import (
    "fmt"
	"reflect"
	
	"github.com/google/jsonapi"
	rootlygo "github.com/rootlyhq/terraform-provider-rootly/v2/schema"
)

type AlertRoutingRule struct {
	ID string `jsonapi:"primary,alert_routing_rules"`
	Name string `jsonapi:"attr,name,omitempty"`
  Enabled *bool `jsonapi:"attr,enabled,omitempty"`
  AlertsSourceId string `jsonapi:"attr,alerts_source_id,omitempty"`
  Position int `jsonapi:"attr,position,omitempty"`
  ConditionType string `jsonapi:"attr,condition_type,omitempty"`
  Conditions []interface{} `jsonapi:"attr,conditions,omitempty"`
  Destination map[string]interface{} `jsonapi:"attr,destination,omitempty"`
}

func (c *Client) ListAlertRoutingRules(params *rootlygo.ListAlertRoutingRulesParams) ([]interface{}, error) {
	req, err := rootlygo.NewListAlertRoutingRulesRequest(c.Rootly.Server, params)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}

	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request: %w", err)
	}

	alert_routing_rules, err := jsonapi.UnmarshalManyPayload(resp.Body, reflect.TypeOf(new(AlertRoutingRule)))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling: %w", err)
	}

	return alert_routing_rules, nil
}

func (c *Client) CreateAlertRoutingRule(d *AlertRoutingRule) (*AlertRoutingRule, error) {
	buffer, err := MarshalData(d)
	if err != nil {
		return nil, fmt.Errorf("Error marshaling alert_routing_rule: %w", err)
	}

	req, err := rootlygo.NewCreateAlertRoutingRuleRequestWithBody(c.Rootly.Server, c.ContentType, buffer)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}
	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to perform request to create alert_routing_rule: %s", err)
	}

	data, err := UnmarshalData(resp.Body, new(AlertRoutingRule))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling alert_routing_rule: %w", err)
	}

	return data.(*AlertRoutingRule), nil
}

func (c *Client) GetAlertRoutingRule(id string) (*AlertRoutingRule, error) {
	req, err := rootlygo.NewGetAlertRoutingRuleRequest(c.Rootly.Server, id)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}

	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request to get alert_routing_rule: %w", err)
	}

	data, err := UnmarshalData(resp.Body, new(AlertRoutingRule))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling alert_routing_rule: %w", err)
	}

	return data.(*AlertRoutingRule), nil
}

func (c *Client) UpdateAlertRoutingRule(id string, alert_routing_rule *AlertRoutingRule) (*AlertRoutingRule, error) {
	buffer, err := MarshalData(alert_routing_rule)
	if err != nil {
		return nil, fmt.Errorf("Error marshaling alert_routing_rule: %w", err)
	}

	req, err := rootlygo.NewUpdateAlertRoutingRuleRequestWithBody(c.Rootly.Server, id, c.ContentType, buffer)
	if err != nil {
		return nil, fmt.Errorf("Error building request: %w", err)
	}
	resp, err := c.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Failed to make request to update alert_routing_rule: %w", err)
	}

	data, err := UnmarshalData(resp.Body, new(AlertRoutingRule))
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("Error unmarshaling alert_routing_rule: %w", err)
	}

	return data.(*AlertRoutingRule), nil
}

func (c *Client) DeleteAlertRoutingRule(id string) error {
	req, err := rootlygo.NewDeleteAlertRoutingRuleRequest(c.Rootly.Server, id)
	if err != nil {
		return fmt.Errorf("Error building request: %w", err)
	}

	_, err = c.Do(req)
	if err != nil {
		return fmt.Errorf("Failed to make request to delete alert_routing_rule: %w", err)
	}

	return nil
}
