// DO NOT MODIFY: This file is generated by tools/generate.js. Any changes will be overwritten during the next build.

package client

import (
	"reflect"
	
	"github.com/pkg/errors"
	"github.com/google/jsonapi"
	rootlygo "github.com/rootlyhq/terraform-provider-rootly/v2/schema"
)

type Severity struct {
	ID string `jsonapi:"primary,severities"`
	Name string `jsonapi:"attr,name,omitempty"`
  Slug string `jsonapi:"attr,slug,omitempty"`
  Description string `jsonapi:"attr,description,omitempty"`
  Severity string `jsonapi:"attr,severity,omitempty"`
  Color string `jsonapi:"attr,color,omitempty"`
  Position int `jsonapi:"attr,position,omitempty"`
  NotifyEmails []interface{} `jsonapi:"attr,notify_emails,omitempty"`
  SlackChannels []interface{} `jsonapi:"attr,slack_channels,omitempty"`
  SlackAliases []interface{} `jsonapi:"attr,slack_aliases,omitempty"`
}

func (c *Client) ListSeverities(params *rootlygo.ListSeveritiesParams) ([]interface{}, error) {
	req, err := rootlygo.NewListSeveritiesRequest(c.Rootly.Server, params)
	if err != nil {
		return nil, errors.Errorf("Error building request: %s", err.Error())
	}

	resp, err := c.Do(req)
	if err != nil {
		return nil, errors.Errorf("Failed to make request: %s", err.Error())
	}

	severities, err := jsonapi.UnmarshalManyPayload(resp.Body, reflect.TypeOf(new(Severity)))
	resp.Body.Close()
	if err != nil {
		return nil, errors.Errorf("Error unmarshaling: %s", err.Error())
	}

	return severities, nil
}

func (c *Client) CreateSeverity(d *Severity) (*Severity, error) {
	buffer, err := MarshalData(d)
	if err != nil {
		return nil, errors.Errorf("Error marshaling severity: %s", err.Error())
	}

	req, err := rootlygo.NewCreateSeverityRequestWithBody(c.Rootly.Server, c.ContentType, buffer)
	if err != nil {
		return nil, errors.Errorf("Error building request: %s", err.Error())
	}
	resp, err := c.Do(req)
	if err != nil {
		return nil, errors.Errorf("Failed to perform request to create severity: %s", err.Error())
	}

	data, err := UnmarshalData(resp.Body, new(Severity))
	resp.Body.Close()
	if err != nil {
		return nil, errors.Errorf("Error unmarshaling severity: %s", err.Error())
	}

	return data.(*Severity), nil
}

func (c *Client) GetSeverity(id string) (*Severity, error) {
	req, err := rootlygo.NewGetSeverityRequest(c.Rootly.Server, id)
	if err != nil {
		return nil, errors.Errorf("Error building request: %s", err.Error())
	}

	resp, err := c.Do(req)
	if err != nil {
		return nil, errors.Errorf("Failed to make request to get severity: %s", err.Error())
	}

	data, err := UnmarshalData(resp.Body, new(Severity))
	resp.Body.Close()
	if err != nil {
		return nil, errors.Errorf("Error unmarshaling severity: %s", err.Error())
	}

	return data.(*Severity), nil
}

func (c *Client) UpdateSeverity(id string, severity *Severity) (*Severity, error) {
	buffer, err := MarshalData(severity)
	if err != nil {
		return nil, errors.Errorf("Error marshaling severity: %s", err.Error())
	}

	req, err := rootlygo.NewUpdateSeverityRequestWithBody(c.Rootly.Server, id, c.ContentType, buffer)
	if err != nil {
		return nil, errors.Errorf("Error building request: %s", err.Error())
	}
	resp, err := c.Do(req)
	if err != nil {
		return nil, errors.Errorf("Failed to make request to update severity: %s", err.Error())
	}

	data, err := UnmarshalData(resp.Body, new(Severity))
	resp.Body.Close()
	if err != nil {
		return nil, errors.Errorf("Error unmarshaling severity: %s", err.Error())
	}

	return data.(*Severity), nil
}

func (c *Client) DeleteSeverity(id string) error {
	req, err := rootlygo.NewDeleteSeverityRequest(c.Rootly.Server, id)
	if err != nil {
		return errors.Errorf("Error building request: %s", err.Error())
	}

	_, err = c.Do(req)
	if err != nil {
		return errors.Errorf("Failed to make request to delete severity: %s", err.Error())
	}

	return nil
}
