// DO NOT MODIFY: This file is generated by tools/generate.js. Any changes will be overwritten during the next build.

package provider

import (
	"context"
	"errors"
	"fmt"

	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/rootlyhq/terraform-provider-rootly/v2/client"
	"github.com/rootlyhq/terraform-provider-rootly/v2/tools"
)

func resourceAlertRoutingRule() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceAlertRoutingRuleCreate,
		ReadContext:   resourceAlertRoutingRuleRead,
		UpdateContext: resourceAlertRoutingRuleUpdate,
		DeleteContext: resourceAlertRoutingRuleDelete,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
		Schema: map[string]*schema.Schema{

			"name": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
				ForceNew:    false,
				WriteOnly:   false,
				Description: "The name of the alert routing rule",
			},

			"enabled": &schema.Schema{
				Type:      schema.TypeBool,
				Default:   true,
				Optional:  true,
				Sensitive: false,
				ForceNew:  false,
				WriteOnly: false,
			},

			"alerts_source_id": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
				ForceNew:    false,
				WriteOnly:   false,
				Description: "The ID of the alerts source",
			},

			"position": &schema.Schema{
				Type:        schema.TypeInt,
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				WriteOnly:   false,
				Description: "The position of the alert routing rule for ordering evaluation",
			},

			"condition_type": &schema.Schema{
				Type:         schema.TypeString,
				Default:      "all",
				Required:     false,
				Optional:     true,
				Sensitive:    false,
				ForceNew:     false,
				WriteOnly:    false,
				Description:  "The type of condition for the alert routing rule. Value must be one of `all`, `any`.",
				ValidateFunc: validation.StringInSlice([]string{"all", "any"}, false),
			},

			"conditions": &schema.Schema{
				Type:             schema.TypeList,
				Computed:         false,
				Required:         false,
				Optional:         true,
				Sensitive:        false,
				ForceNew:         false,
				WriteOnly:        false,
				Description:      "The conditions for the alert routing rule",
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"property_field_type": &schema.Schema{
							Type:         schema.TypeString,
							Default:      "attribute",
							Required:     false,
							Optional:     true,
							Sensitive:    false,
							ForceNew:     false,
							WriteOnly:    false,
							Description:  "The type of the property field. Value must be one of `attribute`, `payload`.",
							ValidateFunc: validation.StringInSlice([]string{"attribute", "payload"}, false),
						},

						"property_field_name": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Required:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							WriteOnly:   false,
							Description: "The name of the property field. If the property field type is selected as 'attribute', then the allowed property field names are 'summary' (for Title), 'description', 'alert_urgency' and 'external_url' (for Alert Source URL). If the property field type is selected as 'payload', then the property field name should be supplied in JSON Path syntax.",
						},

						"property_field_condition_type": &schema.Schema{
							Type:         schema.TypeString,
							Default:      "is_one_of",
							Required:     false,
							Optional:     true,
							Sensitive:    false,
							ForceNew:     false,
							WriteOnly:    false,
							Description:  "The condition type of the property field. Value must be one of `is_one_of`, `is_not_one_of`, `contains`, `does_not_contain`, `starts_with`, `ends_with`, `matches_regex`, `is_empty`.",
							ValidateFunc: validation.StringInSlice([]string{"is_one_of", "is_not_one_of", "contains", "does_not_contain", "starts_with", "ends_with", "matches_regex", "is_empty"}, false),
						},

						"property_field_value": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Required:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							WriteOnly:   false,
							Description: "The value of the property field. Can be null if the property field condition type is 'is_one_of' or 'is_not_one_of'",
						},

						"property_field_values": &schema.Schema{
							Type: schema.TypeList,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
							DiffSuppressFunc: tools.EqualIgnoringOrder,
							Computed:         false,
							Required:         false,
							Optional:         true,
							Sensitive:        false,
							ForceNew:         false,
							WriteOnly:        false,
							Description:      "The values of the property field. Used if the property field condition type is 'is_one_of' or 'is_not_one_of' except for when property field name is 'alert_urgency'",
						},
					},
				},
			},

			"destination": &schema.Schema{
				Type:        schema.TypeList,
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
				ForceNew:    false,
				WriteOnly:   false,
				Description: "The destinations for the alert routing rule",
				MinItems:    0,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"target_type": &schema.Schema{
							Type:         schema.TypeString,
							Default:      "Service",
							Required:     false,
							Optional:     true,
							Sensitive:    false,
							ForceNew:     false,
							WriteOnly:    false,
							Description:  "The type of the target. Value must be one of `Service`, `Group`, `EscalationPolicy`.",
							ValidateFunc: validation.StringInSlice([]string{"Service", "Group", "EscalationPolicy"}, false),
						},

						"target_id": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Required:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							WriteOnly:   false,
							Description: "The ID of the target",
						},
					},
				},
			},

			"condition_groups": &schema.Schema{
				Type:             schema.TypeList,
				Computed:         false,
				Required:         false,
				Optional:         true,
				Sensitive:        false,
				ForceNew:         false,
				WriteOnly:        false,
				Description:      "The condition groups for the alert routing rule",
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"id": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Required:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							WriteOnly:   false,
							Description: "Unique ID of the condition group",
						},

						"position": &schema.Schema{
							Type:        schema.TypeInt,
							Computed:    true,
							Required:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							WriteOnly:   false,
							Description: "The position of the condition group for ordering",
						},

						"conditions": &schema.Schema{
							Type:             schema.TypeList,
							Computed:         false,
							Required:         false,
							Optional:         true,
							Sensitive:        false,
							ForceNew:         false,
							WriteOnly:        false,
							Description:      "The conditions within this group",
							DiffSuppressFunc: tools.EqualIgnoringOrder,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"id": &schema.Schema{
										Type:        schema.TypeString,
										Computed:    true,
										Required:    false,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    false,
										WriteOnly:   false,
										Description: "Unique ID of the condition",
									},

									"property_field_type": &schema.Schema{
										Type:         schema.TypeString,
										Default:      "attribute",
										Required:     false,
										Optional:     true,
										Sensitive:    false,
										ForceNew:     false,
										WriteOnly:    false,
										Description:  "The type of the property field. Value must be one of `attribute`, `payload`.",
										ValidateFunc: validation.StringInSlice([]string{"attribute", "payload"}, false),
									},

									"property_field_name": &schema.Schema{
										Type:        schema.TypeString,
										Computed:    true,
										Required:    false,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    false,
										WriteOnly:   false,
										Description: "The name of the property field",
									},

									"property_field_condition_type": &schema.Schema{
										Type:         schema.TypeString,
										Default:      "is_one_of",
										Required:     false,
										Optional:     true,
										Sensitive:    false,
										ForceNew:     false,
										WriteOnly:    false,
										Description:  "The condition type of the property field. Value must be one of `is_one_of`, `is_not_one_of`, `contains`, `does_not_contain`, `starts_with`, `ends_with`, `matches_regex`, `is_empty`.",
										ValidateFunc: validation.StringInSlice([]string{"is_one_of", "is_not_one_of", "contains", "does_not_contain", "starts_with", "ends_with", "matches_regex", "is_empty"}, false),
									},

									"property_field_value": &schema.Schema{
										Type:        schema.TypeString,
										Computed:    true,
										Required:    false,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    false,
										WriteOnly:   false,
										Description: "The value of the property field",
									},

									"property_field_values": &schema.Schema{
										Type: schema.TypeList,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
										DiffSuppressFunc: tools.EqualIgnoringOrder,
										Computed:         false,
										Required:         false,
										Optional:         true,
										Sensitive:        false,
										ForceNew:         false,
										WriteOnly:        false,
										Description:      "The values of the property field",
									},

									"conditionable_id": &schema.Schema{
										Type:        schema.TypeString,
										Computed:    true,
										Required:    false,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    false,
										WriteOnly:   false,
										Description: "The ID of the conditionable object",
									},

									"conditionable_type": &schema.Schema{
										Type:        schema.TypeString,
										Computed:    true,
										Required:    false,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    false,
										WriteOnly:   false,
										Description: "The type of the conditionable object",
									},

									"created_at": &schema.Schema{
										Type:        schema.TypeString,
										Computed:    true,
										Required:    false,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    false,
										WriteOnly:   false,
										Description: "Date of creation",
									},

									"updated_at": &schema.Schema{
										Type:        schema.TypeString,
										Computed:    true,
										Required:    false,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    false,
										WriteOnly:   false,
										Description: "Date of last update",
									},
								},
							},
						},

						"created_at": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Required:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							WriteOnly:   false,
							Description: "Date of creation",
						},

						"updated_at": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Required:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							WriteOnly:   false,
							Description: "Date of last update",
						},
					},
				},
			},
		},
	}
}

func resourceAlertRoutingRuleCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)

	tflog.Trace(ctx, fmt.Sprintf("Creating AlertRoutingRule"))

	s := &client.AlertRoutingRule{}

	if value, ok := d.GetOkExists("name"); ok {
		s.Name = value.(string)
	}
	if value, ok := d.GetOkExists("enabled"); ok {
		s.Enabled = tools.Bool(value.(bool))
	}
	if value, ok := d.GetOkExists("alerts_source_id"); ok {
		s.AlertsSourceId = value.(string)
	}
	if value, ok := d.GetOkExists("position"); ok {
		s.Position = value.(int)
	}
	if value, ok := d.GetOkExists("condition_type"); ok {
		s.ConditionType = value.(string)
	}
	if value, ok := d.GetOkExists("conditions"); ok {
		s.Conditions = value.([]interface{})
	}
	if value, ok := d.GetOkExists("destination"); ok {
		if valueList, ok := value.([]interface{}); ok && len(valueList) > 0 && valueList[0] != nil {
			if mapValue, ok := valueList[0].(map[string]interface{}); ok {
				s.Destination = mapValue
			}
		}
	}
	if value, ok := d.GetOkExists("condition_groups"); ok {
		s.ConditionGroups = value.([]interface{})
	}

	res, err := c.CreateAlertRoutingRule(s)
	if err != nil {
		return diag.Errorf("Error creating alert_routing_rule: %s", err.Error())
	}

	d.SetId(res.ID)
	tflog.Trace(ctx, fmt.Sprintf("created a alert_routing_rule resource: %s", d.Id()))

	return resourceAlertRoutingRuleRead(ctx, d, meta)
}

func resourceAlertRoutingRuleRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Reading AlertRoutingRule: %s", d.Id()))

	item, err := c.GetAlertRoutingRule(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("AlertRoutingRule (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}

		return diag.Errorf("Error reading alert_routing_rule: %s", d.Id())
	}

	d.Set("name", item.Name)
	d.Set("enabled", item.Enabled)
	d.Set("alerts_source_id", item.AlertsSourceId)
	d.Set("position", item.Position)
	d.Set("condition_type", item.ConditionType)

	if item.Conditions != nil {
		processed_items_conditions := make([]map[string]interface{}, 0)

		for _, c := range item.Conditions {
			if rawItem, ok := c.(map[string]interface{}); ok {
				// Create a new map with only the fields defined in the schema
				processed_item_conditions := map[string]interface{}{
					"property_field_type":           rawItem["property_field_type"],
					"property_field_name":           rawItem["property_field_name"],
					"property_field_condition_type": rawItem["property_field_condition_type"],
					"property_field_value":          rawItem["property_field_value"],
					"property_field_values":         rawItem["property_field_values"],
				}
				processed_items_conditions = append(processed_items_conditions, processed_item_conditions)
			}
		}

		d.Set("conditions", processed_items_conditions)
	} else {
		d.Set("conditions", nil)
	}

	singleton_list_destination := make([]interface{}, 1, 1)
	processed_item_destination := map[string]interface{}{
		"target_type": item.Destination["target_type"],
		"target_id":   item.Destination["target_id"],
	}
	singleton_list_destination[0] = processed_item_destination
	d.Set("destination", singleton_list_destination)

	if item.ConditionGroups != nil {
		processed_items_condition_groups := make([]map[string]interface{}, 0)

		for _, c := range item.ConditionGroups {
			if rawItem, ok := c.(map[string]interface{}); ok {
				// Create a new map with only the fields defined in the schema
				processed_item_condition_groups := map[string]interface{}{
					"id":         rawItem["id"],
					"position":   rawItem["position"],
					"conditions": rawItem["conditions"],
					"created_at": rawItem["created_at"],
					"updated_at": rawItem["updated_at"],
				}
				processed_items_condition_groups = append(processed_items_condition_groups, processed_item_condition_groups)
			}
		}

		d.Set("condition_groups", processed_items_condition_groups)
	} else {
		d.Set("condition_groups", nil)
	}

	return nil
}

func resourceAlertRoutingRuleUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Updating AlertRoutingRule: %s", d.Id()))

	s := &client.AlertRoutingRule{}

	if d.HasChange("name") {
		s.Name = d.Get("name").(string)
	}
	if d.HasChange("enabled") {
		s.Enabled = tools.Bool(d.Get("enabled").(bool))
	}
	if d.HasChange("alerts_source_id") {
		s.AlertsSourceId = d.Get("alerts_source_id").(string)
	}
	if d.HasChange("position") {
		s.Position = d.Get("position").(int)
	}
	if d.HasChange("condition_type") {
		s.ConditionType = d.Get("condition_type").(string)
	}

	if d.HasChange("conditions") {
		if value, ok := d.GetOk("conditions"); value != nil && ok {
			s.Conditions = value.([]interface{})
		} else {
			s.Conditions = []interface{}{}
		}
	}

	if d.HasChange("destination") {
		tps := d.Get("destination").([]interface{})
		for _, tpsi := range tps {
			s.Destination = tpsi.(map[string]interface{})
		}
	}

	if d.HasChange("condition_groups") {
		if value, ok := d.GetOk("condition_groups"); value != nil && ok {
			s.ConditionGroups = value.([]interface{})
		} else {
			s.ConditionGroups = []interface{}{}
		}
	}

	_, err := c.UpdateAlertRoutingRule(d.Id(), s)
	if err != nil {
		return diag.Errorf("Error updating alert_routing_rule: %s", err.Error())
	}

	return resourceAlertRoutingRuleRead(ctx, d, meta)
}

func resourceAlertRoutingRuleDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Deleting AlertRoutingRule: %s", d.Id()))

	err := c.DeleteAlertRoutingRule(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream.
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("AlertRoutingRule (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}
		return diag.Errorf("Error deleting alert_routing_rule: %s", err.Error())
	}

	d.SetId("")

	return nil
}
