// DO NOT MODIFY: This file is generated by tools/generate.js. Any changes will be overwritten during the next build.

package provider

import (
	"context"
	"errors"
	"fmt"

	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/rootlyhq/terraform-provider-rootly/v2/client"
	"github.com/rootlyhq/terraform-provider-rootly/v2/tools"
)

func resourceScheduleRotationActiveDay() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceScheduleRotationActiveDayCreate,
		ReadContext:   resourceScheduleRotationActiveDayRead,
		UpdateContext: resourceScheduleRotationActiveDayUpdate,
		DeleteContext: resourceScheduleRotationActiveDayDelete,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
		Schema: map[string]*schema.Schema{

			"schedule_rotation_id": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				WriteOnly:   false,
				Description: "",
			},

			"day_name": &schema.Schema{
				Type:         schema.TypeString,
				Default:      "S",
				Required:     false,
				Optional:     true,
				Sensitive:    false,
				ForceNew:     false,
				WriteOnly:    false,
				Description:  "Schedule rotation day name for which active times to be created. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.",
				ValidateFunc: validation.StringInSlice([]string{"S", "M", "T", "W", "R", "F", "U"}, false),
			},

			"active_time_attributes": &schema.Schema{
				Type:             schema.TypeList,
				Computed:         false,
				Required:         true,
				Optional:         false,
				Sensitive:        false,
				ForceNew:         false,
				WriteOnly:        false,
				Description:      "Schedule rotation active times per day",
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"start_time": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Required:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							WriteOnly:   false,
							Description: "Start time for schedule rotation active time",
						},

						"end_time": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Required:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							WriteOnly:   false,
							Description: "End time for schedule rotation active time",
						},
					},
				},
			},
		},
	}
}

func resourceScheduleRotationActiveDayCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)

	tflog.Trace(ctx, fmt.Sprintf("Creating ScheduleRotationActiveDay"))

	s := &client.ScheduleRotationActiveDay{}

	if value, ok := d.GetOkExists("schedule_rotation_id"); ok {
		s.ScheduleRotationId = value.(string)
	}
	if value, ok := d.GetOkExists("day_name"); ok {
		s.DayName = value.(string)
	}
	if value, ok := d.GetOkExists("active_time_attributes"); ok {
		s.ActiveTimeAttributes = value.([]interface{})
	}

	res, err := c.CreateScheduleRotationActiveDay(s)
	if err != nil {
		return diag.Errorf("Error creating schedule_rotation_active_day: %s", err.Error())
	}

	d.SetId(res.ID)
	tflog.Trace(ctx, fmt.Sprintf("created a schedule_rotation_active_day resource: %s", d.Id()))

	return resourceScheduleRotationActiveDayRead(ctx, d, meta)
}

func resourceScheduleRotationActiveDayRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Reading ScheduleRotationActiveDay: %s", d.Id()))

	item, err := c.GetScheduleRotationActiveDay(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("ScheduleRotationActiveDay (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}

		return diag.Errorf("Error reading schedule_rotation_active_day: %s", d.Id())
	}

	d.Set("schedule_rotation_id", item.ScheduleRotationId)
	d.Set("day_name", item.DayName)

	if item.ActiveTimeAttributes != nil {
		processed_items_active_time_attributes := make([]map[string]interface{}, 0)

		for _, c := range item.ActiveTimeAttributes {
			if rawItem, ok := c.(map[string]interface{}); ok {
				// Create a new map with only the fields defined in the schema
				processed_item_active_time_attributes := map[string]interface{}{
					"start_time": rawItem["start_time"],
					"end_time":   rawItem["end_time"],
				}
				processed_items_active_time_attributes = append(processed_items_active_time_attributes, processed_item_active_time_attributes)
			}
		}

		d.Set("active_time_attributes", processed_items_active_time_attributes)
	} else {
		d.Set("active_time_attributes", nil)
	}

	return nil
}

func resourceScheduleRotationActiveDayUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Updating ScheduleRotationActiveDay: %s", d.Id()))

	s := &client.ScheduleRotationActiveDay{}

	if d.HasChange("schedule_rotation_id") {
		s.ScheduleRotationId = d.Get("schedule_rotation_id").(string)
	}
	if d.HasChange("day_name") {
		s.DayName = d.Get("day_name").(string)
	}

	if d.HasChange("active_time_attributes") {
		if value, ok := d.GetOk("active_time_attributes"); value != nil && ok {
			s.ActiveTimeAttributes = value.([]interface{})
		} else {
			s.ActiveTimeAttributes = []interface{}{}
		}
	}

	_, err := c.UpdateScheduleRotationActiveDay(d.Id(), s)
	if err != nil {
		return diag.Errorf("Error updating schedule_rotation_active_day: %s", err.Error())
	}

	return resourceScheduleRotationActiveDayRead(ctx, d, meta)
}

func resourceScheduleRotationActiveDayDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Deleting ScheduleRotationActiveDay: %s", d.Id()))

	err := c.DeleteScheduleRotationActiveDay(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream.
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("ScheduleRotationActiveDay (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}
		return diag.Errorf("Error deleting schedule_rotation_active_day: %s", err.Error())
	}

	d.SetId("")

	return nil
}
