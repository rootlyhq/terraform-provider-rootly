// DO NOT MODIFY: This file is generated by tools/generate.js. Any changes will be overwritten during the next build.

package provider

import (
	"context"
	"errors"
	"fmt"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/rootlyhq/terraform-provider-rootly/v2/client"
	"github.com/rootlyhq/terraform-provider-rootly/v2/tools"
)

func resourceWorkflowFormFieldCondition() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceWorkflowFormFieldConditionCreate,
		ReadContext:   resourceWorkflowFormFieldConditionRead,
		UpdateContext: resourceWorkflowFormFieldConditionUpdate,
		DeleteContext: resourceWorkflowFormFieldConditionDelete,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
		Schema: map[string]*schema.Schema{

			"workflow_id": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    true,
				Required:    false,
				Optional:    true,
				ForceNew:    true,
				Description: "The workflow for this condition",
			},

			"form_field_id": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    false,
				Required:    true,
				Optional:    false,
				ForceNew:    false,
				Description: "The custom field for this condition",
			},

			"incident_condition": &schema.Schema{
				Type:         schema.TypeString,
				Default:      "ANY",
				Required:     false,
				Optional:     true,
				ForceNew:     false,
				Description:  "The trigger condition. Value must be one of `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.",
				ValidateFunc: validation.StringInSlice([]string{"IS", "ANY", "CONTAINS", "CONTAINS_ALL", "CONTAINS_NONE", "NONE", "SET", "UNSET"}, false),
			},

			"values": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "",
			},

			"selected_catalog_entity_ids": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "",
			},

			"selected_functionality_ids": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "",
			},

			"selected_group_ids": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "",
			},

			"selected_option_ids": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "",
			},

			"selected_service_ids": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "",
			},

			"selected_user_ids": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type: schema.TypeInt,
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "",
			},
		},
	}
}

func resourceWorkflowFormFieldConditionCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)

	tflog.Trace(ctx, fmt.Sprintf("Creating WorkflowFormFieldCondition"))

	s := &client.WorkflowFormFieldCondition{}

	if value, ok := d.GetOkExists("workflow_id"); ok {
		s.WorkflowId = value.(string)
	}
	if value, ok := d.GetOkExists("form_field_id"); ok {
		s.FormFieldId = value.(string)
	}
	if value, ok := d.GetOkExists("incident_condition"); ok {
		s.IncidentCondition = value.(string)
	}
	if value, ok := d.GetOkExists("values"); ok {
		s.Values = value.([]interface{})
	}
	if value, ok := d.GetOkExists("selected_catalog_entity_ids"); ok {
		s.SelectedCatalogEntityIds = value.([]interface{})
	}
	if value, ok := d.GetOkExists("selected_functionality_ids"); ok {
		s.SelectedFunctionalityIds = value.([]interface{})
	}
	if value, ok := d.GetOkExists("selected_group_ids"); ok {
		s.SelectedGroupIds = value.([]interface{})
	}
	if value, ok := d.GetOkExists("selected_option_ids"); ok {
		s.SelectedOptionIds = value.([]interface{})
	}
	if value, ok := d.GetOkExists("selected_service_ids"); ok {
		s.SelectedServiceIds = value.([]interface{})
	}
	if value, ok := d.GetOkExists("selected_user_ids"); ok {
		s.SelectedUserIds = value.([]interface{})
	}

	res, err := c.CreateWorkflowFormFieldCondition(s)
	if err != nil {
		return diag.Errorf("Error creating workflow_form_field_condition: %s", err.Error())
	}

	d.SetId(res.ID)
	tflog.Trace(ctx, fmt.Sprintf("created a workflow_form_field_condition resource: %s", d.Id()))

	return resourceWorkflowFormFieldConditionRead(ctx, d, meta)
}

func resourceWorkflowFormFieldConditionRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Reading WorkflowFormFieldCondition: %s", d.Id()))

	item, err := c.GetWorkflowFormFieldCondition(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("WorkflowFormFieldCondition (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}

		return diag.Errorf("Error reading workflow_form_field_condition: %s", d.Id())
	}

	d.Set("workflow_id", item.WorkflowId)
	d.Set("form_field_id", item.FormFieldId)
	d.Set("incident_condition", item.IncidentCondition)
	d.Set("values", item.Values)
	d.Set("selected_catalog_entity_ids", item.SelectedCatalogEntityIds)
	d.Set("selected_functionality_ids", item.SelectedFunctionalityIds)
	d.Set("selected_group_ids", item.SelectedGroupIds)
	d.Set("selected_option_ids", item.SelectedOptionIds)
	d.Set("selected_service_ids", item.SelectedServiceIds)
	d.Set("selected_user_ids", item.SelectedUserIds)

	return nil
}

func resourceWorkflowFormFieldConditionUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Updating WorkflowFormFieldCondition: %s", d.Id()))

	s := &client.WorkflowFormFieldCondition{}

	if d.HasChange("workflow_id") {
		s.WorkflowId = d.Get("workflow_id").(string)
	}
	if d.HasChange("form_field_id") {
		s.FormFieldId = d.Get("form_field_id").(string)
	}
	if d.HasChange("incident_condition") {
		s.IncidentCondition = d.Get("incident_condition").(string)
	}

	s.Values = []interface{}{}
	if value, ok := d.GetOk("values"); value != nil && ok {
		if d.HasChange("values") {
			s.Values = value.([]interface{})
		}
	}

	s.SelectedCatalogEntityIds = []interface{}{}
	if value, ok := d.GetOk("selected_catalog_entity_ids"); value != nil && ok {
		if d.HasChange("selected_catalog_entity_ids") {
			s.SelectedCatalogEntityIds = value.([]interface{})
		}
	}

	s.SelectedFunctionalityIds = []interface{}{}
	if value, ok := d.GetOk("selected_functionality_ids"); value != nil && ok {
		if d.HasChange("selected_functionality_ids") {
			s.SelectedFunctionalityIds = value.([]interface{})
		}
	}

	s.SelectedGroupIds = []interface{}{}
	if value, ok := d.GetOk("selected_group_ids"); value != nil && ok {
		if d.HasChange("selected_group_ids") {
			s.SelectedGroupIds = value.([]interface{})
		}
	}

	s.SelectedOptionIds = []interface{}{}
	if value, ok := d.GetOk("selected_option_ids"); value != nil && ok {
		if d.HasChange("selected_option_ids") {
			s.SelectedOptionIds = value.([]interface{})
		}
	}

	s.SelectedServiceIds = []interface{}{}
	if value, ok := d.GetOk("selected_service_ids"); value != nil && ok {
		if d.HasChange("selected_service_ids") {
			s.SelectedServiceIds = value.([]interface{})
		}
	}

	s.SelectedUserIds = []interface{}{}
	if value, ok := d.GetOk("selected_user_ids"); value != nil && ok {
		if d.HasChange("selected_user_ids") {
			s.SelectedUserIds = value.([]interface{})
		}
	}

	_, err := c.UpdateWorkflowFormFieldCondition(d.Id(), s)
	if err != nil {
		return diag.Errorf("Error updating workflow_form_field_condition: %s", err.Error())
	}

	return resourceWorkflowFormFieldConditionRead(ctx, d, meta)
}

func resourceWorkflowFormFieldConditionDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Deleting WorkflowFormFieldCondition: %s", d.Id()))

	err := c.DeleteWorkflowFormFieldCondition(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream.
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("WorkflowFormFieldCondition (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}
		return diag.Errorf("Error deleting workflow_form_field_condition: %s", err.Error())
	}

	d.SetId("")

	return nil
}
