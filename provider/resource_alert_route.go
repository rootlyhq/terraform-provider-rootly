// DO NOT MODIFY: This file is generated by tools/generate.js. Any changes will be overwritten during the next build.

package provider

import (
	"context"
	"errors"
	"fmt"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/rootlyhq/terraform-provider-rootly/v2/client"
	"github.com/rootlyhq/terraform-provider-rootly/v2/tools"
)

func resourceAlertRoute() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceAlertRouteCreate,
		ReadContext:   resourceAlertRouteRead,
		UpdateContext: resourceAlertRouteUpdate,
		DeleteContext: resourceAlertRouteDelete,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
		Schema: map[string]*schema.Schema{

			"name": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
				ForceNew:    false,
				WriteOnly:   false,
				Description: "The name of the alert route",
			},

			"enabled": &schema.Schema{
				Type:      schema.TypeBool,
				Default:   true,
				Optional:  true,
				Sensitive: false,
				ForceNew:  false,
				WriteOnly: false,
			},

			"alerts_source_ids": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         false,
				Required:         true,
				Optional:         false,
				Sensitive:        false,
				ForceNew:         false,
				WriteOnly:        false,
				Description:      "",
			},

			"owning_team_ids": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         false,
				Required:         false,
				Optional:         true,
				Sensitive:        false,
				ForceNew:         false,
				WriteOnly:        false,
				Description:      "",
			},

			"rules": &schema.Schema{
				Type:             schema.TypeList,
				Computed:         false,
				Required:         false,
				Optional:         true,
				Sensitive:        false,
				ForceNew:         false,
				WriteOnly:        false,
				Description:      "",
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"name": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Required:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							WriteOnly:   false,
							Description: "The name of the alert routing rule",
						},

						"position": &schema.Schema{
							Type:        schema.TypeInt,
							Computed:    true,
							Required:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							WriteOnly:   false,
							Description: "The position of the alert routing rule for ordering evaluation",
						},

						"fallback_rule": &schema.Schema{
							Type:        schema.TypeBool,
							Computed:    true,
							Required:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							WriteOnly:   false,
							Description: "Whether this is a fallback rule. Value must be one of true or false",
						},

						"destinations": &schema.Schema{
							Type:             schema.TypeList,
							Computed:         false,
							Required:         false,
							Optional:         true,
							Sensitive:        false,
							ForceNew:         false,
							WriteOnly:        false,
							Description:      "",
							DiffSuppressFunc: tools.EqualIgnoringOrder,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"target_type": &schema.Schema{
										Type:         schema.TypeString,
										Default:      "Service",
										Required:     false,
										Optional:     true,
										Sensitive:    false,
										ForceNew:     false,
										WriteOnly:    false,
										Description:  "The type of the target. Value must be one of `Service`, `Group`, `EscalationPolicy`.",
										ValidateFunc: validation.StringInSlice([]string{"Service", "Group", "EscalationPolicy"}, false),
									},

									"target_id": &schema.Schema{
										Type:        schema.TypeString,
										Computed:    true,
										Required:    false,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    false,
										WriteOnly:   false,
										Description: "The ID of the target",
									},
								},
							},
						},

						"condition_groups": &schema.Schema{
							Type:             schema.TypeList,
							Computed:         false,
							Required:         false,
							Optional:         true,
							Sensitive:        false,
							ForceNew:         false,
							WriteOnly:        false,
							Description:      "",
							DiffSuppressFunc: tools.EqualIgnoringOrder,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"position": &schema.Schema{
										Type:        schema.TypeInt,
										Computed:    true,
										Required:    false,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    false,
										WriteOnly:   false,
										Description: "The position of the condition group",
									},

									"conditions": &schema.Schema{
										Type:             schema.TypeList,
										Computed:         false,
										Required:         false,
										Optional:         true,
										Sensitive:        false,
										ForceNew:         false,
										WriteOnly:        false,
										Description:      "",
										DiffSuppressFunc: tools.EqualIgnoringOrder,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"property_field_condition_type": &schema.Schema{
													Type:         schema.TypeString,
													Default:      "is_one_of",
													Required:     false,
													Optional:     true,
													Sensitive:    false,
													ForceNew:     false,
													WriteOnly:    false,
													Description:  "Value must be one of `is_one_of`, `is_not_one_of`, `contains`, `does_not_contain`, `starts_with`, `ends_with`, `matches_regex`, `is_empty`.",
													ValidateFunc: validation.StringInSlice([]string{"is_one_of", "is_not_one_of", "contains", "does_not_contain", "starts_with", "ends_with", "matches_regex", "is_empty"}, false),
												},

												"property_field_name": &schema.Schema{
													Type:        schema.TypeString,
													Computed:    true,
													Required:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													WriteOnly:   false,
													Description: "The name of the property field",
												},

												"property_field_type": &schema.Schema{
													Type:         schema.TypeString,
													Default:      "attribute",
													Required:     false,
													Optional:     true,
													Sensitive:    false,
													ForceNew:     false,
													WriteOnly:    false,
													Description:  "Value must be one of `attribute`, `payload`, `alert_field`.",
													ValidateFunc: validation.StringInSlice([]string{"attribute", "payload", "alert_field"}, false),
												},

												"property_field_value": &schema.Schema{
													Type:        schema.TypeString,
													Computed:    true,
													Required:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													WriteOnly:   false,
													Description: "The value of the property field",
												},

												"property_field_values": &schema.Schema{
													Type: schema.TypeList,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
													DiffSuppressFunc: tools.EqualIgnoringOrder,
													Computed:         false,
													Required:         false,
													Optional:         true,
													Sensitive:        false,
													ForceNew:         false,
													WriteOnly:        false,
													Description:      "",
												},

												"alert_urgency_ids": &schema.Schema{
													Type: schema.TypeList,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
													DiffSuppressFunc: tools.EqualIgnoringOrder,
													Computed:         false,
													Required:         false,
													Optional:         true,
													Sensitive:        false,
													ForceNew:         false,
													WriteOnly:        false,
													Description:      "The Alert Urgency IDs to check in the condition",
												},

												"conditionable_type": &schema.Schema{
													Type:         schema.TypeString,
													Default:      "AlertField",
													Required:     false,
													Optional:     true,
													Sensitive:    false,
													ForceNew:     false,
													WriteOnly:    false,
													Description:  "The type of the conditionable. Value must be one of `AlertField`.",
													ValidateFunc: validation.StringInSlice([]string{"AlertField"}, false),
												},

												"conditionable_id": &schema.Schema{
													Type:        schema.TypeString,
													Computed:    true,
													Required:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													WriteOnly:   false,
													Description: "The ID of the conditionable",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func resourceAlertRouteCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)

	tflog.Trace(ctx, fmt.Sprintf("Creating AlertRoute"))

	s := &client.AlertRoute{}

	if value, ok := d.GetOkExists("name"); ok {
		s.Name = value.(string)
	}
	if value, ok := d.GetOkExists("enabled"); ok {
		s.Enabled = tools.Bool(value.(bool))
	}
	if value, ok := d.GetOkExists("alerts_source_ids"); ok {
		s.AlertsSourceIds = value.([]interface{})
	}
	if value, ok := d.GetOkExists("owning_team_ids"); ok {
		s.OwningTeamIds = value.([]interface{})
	}
	if value, ok := d.GetOkExists("rules"); ok {
		s.Rules = value.([]interface{})
	}

	res, err := c.CreateAlertRoute(s)
	if err != nil {
		return diag.Errorf("Error creating alert_route: %s", err.Error())
	}

	d.SetId(res.ID)
	tflog.Trace(ctx, fmt.Sprintf("created a alert_route resource: %s", d.Id()))

	return resourceAlertRouteRead(ctx, d, meta)
}

func resourceAlertRouteRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Reading AlertRoute: %s", d.Id()))

	item, err := c.GetAlertRoute(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("AlertRoute (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}

		return diag.Errorf("Error reading alert_route: %s", d.Id())
	}

	d.Set("name", item.Name)
	d.Set("enabled", item.Enabled)
	d.Set("alerts_source_ids", item.AlertsSourceIds)
	d.Set("owning_team_ids", item.OwningTeamIds)

	if item.Rules != nil {
		processed_items_rules := make([]map[string]interface{}, 0)

		for _, c := range item.Rules {
			if rawItem, ok := c.(map[string]interface{}); ok {
				// Create a new map with only the fields defined in the schema
				processed_item_rules := map[string]interface{}{
					"name":             rawItem["name"],
					"position":         rawItem["position"],
					"fallback_rule":    rawItem["fallback_rule"],
					"destinations":     rawItem["destinations"],
					"condition_groups": rawItem["condition_groups"],
				}
				processed_items_rules = append(processed_items_rules, processed_item_rules)
			}
		}

		d.Set("rules", processed_items_rules)
	} else {
		d.Set("rules", nil)
	}

	return nil
}

func resourceAlertRouteUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Updating AlertRoute: %s", d.Id()))

	s := &client.AlertRoute{}

	if d.HasChange("name") {
		s.Name = d.Get("name").(string)
	}
	if d.HasChange("enabled") {
		s.Enabled = tools.Bool(d.Get("enabled").(bool))
	}

	if d.HasChange("alerts_source_ids") {
		if value, ok := d.GetOk("alerts_source_ids"); value != nil && ok {
			s.AlertsSourceIds = value.([]interface{})
		} else {
			s.AlertsSourceIds = []interface{}{}
		}
	}

	if d.HasChange("owning_team_ids") {
		if value, ok := d.GetOk("owning_team_ids"); value != nil && ok {
			s.OwningTeamIds = value.([]interface{})
		} else {
			s.OwningTeamIds = []interface{}{}
		}
	}

	if d.HasChange("rules") {
		if value, ok := d.GetOk("rules"); value != nil && ok {
			s.Rules = value.([]interface{})
		} else {
			s.Rules = []interface{}{}
		}
	}

	_, err := c.UpdateAlertRoute(d.Id(), s)
	if err != nil {
		return diag.Errorf("Error updating alert_route: %s", err.Error())
	}

	return resourceAlertRouteRead(ctx, d, meta)
}

func resourceAlertRouteDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Deleting AlertRoute: %s", d.Id()))

	err := c.DeleteAlertRoute(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream.
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("AlertRoute (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}
		return diag.Errorf("Error deleting alert_route: %s", err.Error())
	}

	d.SetId("")

	return nil
}
