// DO NOT MODIFY: This file is generated by tools/generate.js. Any changes will be overwritten during the next build.

package provider

import (
	"context"
	"errors"
	"fmt"

	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/rootlyhq/terraform-provider-rootly/v2/client"
	"github.com/rootlyhq/terraform-provider-rootly/v2/tools"
)

func resourceAlertRoute() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceAlertRouteCreate,
		ReadContext:   resourceAlertRouteRead,
		UpdateContext: resourceAlertRouteUpdate,
		DeleteContext: resourceAlertRouteDelete,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
		Schema: map[string]*schema.Schema{

			"name": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
				ForceNew:    false,
				WriteOnly:   false,
				Description: "The name of the alert route",
			},

			"enabled": &schema.Schema{
				Type:      schema.TypeBool,
				Default:   true,
				Optional:  true,
				Sensitive: false,
				ForceNew:  false,
				WriteOnly: false,
			},

			"alerts_source_ids": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         false,
				Required:         true,
				Optional:         false,
				Sensitive:        false,
				ForceNew:         false,
				WriteOnly:        false,
				Description:      "",
			},

			"owning_team_ids": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         false,
				Required:         false,
				Optional:         true,
				Sensitive:        false,
				ForceNew:         false,
				WriteOnly:        false,
				Description:      "",
			},
		},
	}
}

func resourceAlertRouteCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)

	tflog.Trace(ctx, fmt.Sprintf("Creating AlertRoute"))

	s := &client.AlertRoute{}

	if value, ok := d.GetOkExists("name"); ok {
		s.Name = value.(string)
	}
	if value, ok := d.GetOkExists("enabled"); ok {
		s.Enabled = tools.Bool(value.(bool))
	}
	if value, ok := d.GetOkExists("alerts_source_ids"); ok {
		s.AlertsSourceIds = value.([]interface{})
	}
	if value, ok := d.GetOkExists("owning_team_ids"); ok {
		s.OwningTeamIds = value.([]interface{})
	}

	res, err := c.CreateAlertRoute(s)
	if err != nil {
		return diag.Errorf("Error creating alert_route: %s", err.Error())
	}

	d.SetId(res.ID)
	tflog.Trace(ctx, fmt.Sprintf("created a alert_route resource: %s", d.Id()))

	return resourceAlertRouteRead(ctx, d, meta)
}

func resourceAlertRouteRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Reading AlertRoute: %s", d.Id()))

	item, err := c.GetAlertRoute(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("AlertRoute (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}

		return diag.Errorf("Error reading alert_route: %s", d.Id())
	}

	d.Set("name", item.Name)
	d.Set("enabled", item.Enabled)
	d.Set("alerts_source_ids", item.AlertsSourceIds)
	d.Set("owning_team_ids", item.OwningTeamIds)

	return nil
}

func resourceAlertRouteUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Updating AlertRoute: %s", d.Id()))

	s := &client.AlertRoute{}

	if d.HasChange("name") {
		s.Name = d.Get("name").(string)
	}
	if d.HasChange("enabled") {
		s.Enabled = tools.Bool(d.Get("enabled").(bool))
	}

	if d.HasChange("alerts_source_ids") {
		if value, ok := d.GetOk("alerts_source_ids"); value != nil && ok {
			s.AlertsSourceIds = value.([]interface{})
		} else {
			s.AlertsSourceIds = []interface{}{}
		}
	}

	if d.HasChange("owning_team_ids") {
		if value, ok := d.GetOk("owning_team_ids"); value != nil && ok {
			s.OwningTeamIds = value.([]interface{})
		} else {
			s.OwningTeamIds = []interface{}{}
		}
	}

	_, err := c.UpdateAlertRoute(d.Id(), s)
	if err != nil {
		return diag.Errorf("Error updating alert_route: %s", err.Error())
	}

	return resourceAlertRouteRead(ctx, d, meta)
}

func resourceAlertRouteDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Deleting AlertRoute: %s", d.Id()))

	err := c.DeleteAlertRoute(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream.
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("AlertRoute (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}
		return diag.Errorf("Error deleting alert_route: %s", err.Error())
	}

	d.SetId("")

	return nil
}
