// DO NOT MODIFY: This file is generated by tools/generate.js. Any changes will be overwritten during the next build.

package provider

import (
	"context"
	"errors"
	"fmt"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/rootlyhq/terraform-provider-rootly/v2/client"
	"github.com/rootlyhq/terraform-provider-rootly/v2/tools"
)

func resourceOnCallRole() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceOnCallRoleCreate,
		ReadContext:   resourceOnCallRoleRead,
		UpdateContext: resourceOnCallRoleUpdate,
		DeleteContext: resourceOnCallRoleDelete,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
		Schema: map[string]*schema.Schema{

			"name": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    false,
				Required:    true,
				Optional:    false,
				ForceNew:    false,
				Description: "The role name.",
			},

			"slug": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    true,
				Required:    false,
				Optional:    true,
				ForceNew:    false,
				Description: "The role slug.",
			},

			"system_role": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    false,
				Required:    true,
				Optional:    false,
				ForceNew:    false,
				Description: "The kind of role",
			},

			"alert_sources_permissions": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"create", "update", "delete"}, false),
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "Value must be one of `create`, `update`, `delete`.",
			},

			"alert_urgency_permissions": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"create", "read", "update", "delete"}, false),
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "Value must be one of `create`, `read`, `update`, `delete`.",
			},

			"alerts_permissions": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"create", "update", "read"}, false),
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "Value must be one of `create`, `update`, `read`.",
			},

			"api_keys_permissions": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"create", "read", "update", "delete"}, false),
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "Value must be one of `create`, `read`, `update`, `delete`.",
			},

			"audits_permissions": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"create", "read", "update", "delete"}, false),
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "Value must be one of `create`, `read`, `update`, `delete`.",
			},

			"contacts_permissions": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"read"}, false),
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "Value must be one of `read`.",
			},

			"escalation_policies_permissions": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"create", "read", "update", "delete"}, false),
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "Value must be one of `create`, `read`, `update`, `delete`.",
			},

			"groups_permissions": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"create", "read", "update", "delete"}, false),
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "Value must be one of `create`, `read`, `update`, `delete`.",
			},

			"heartbeats_permissions": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"create", "read", "update", "delete"}, false),
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "Value must be one of `create`, `read`, `update`, `delete`.",
			},

			"integrations_permissions": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"create", "read", "update", "delete"}, false),
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "Value must be one of `create`, `read`, `update`, `delete`.",
			},

			"invitations_permissions": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"create", "read", "update", "delete"}, false),
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "Value must be one of `create`, `read`, `update`, `delete`.",
			},

			"live_call_routing_permissions": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"create", "read", "update", "delete"}, false),
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "Value must be one of `create`, `read`, `update`, `delete`.",
			},

			"schedule_override_permissions": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"create", "update"}, false),
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "Value must be one of `create`, `update`.",
			},

			"schedules_permissions": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"create", "read", "update", "delete"}, false),
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "Value must be one of `create`, `read`, `update`, `delete`.",
			},

			"services_permissions": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"create", "read", "update", "delete"}, false),
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "Value must be one of `create`, `read`, `update`, `delete`.",
			},

			"webhooks_permissions": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"create", "read", "update", "delete"}, false),
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "Value must be one of `create`, `read`, `update`, `delete`.",
			},

			"workflows_permissions": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"create", "read", "update", "delete"}, false),
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "Value must be one of `create`, `read`, `update`, `delete`.",
			},
		},
	}
}

func resourceOnCallRoleCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)

	tflog.Trace(ctx, fmt.Sprintf("Creating OnCallRole"))

	s := &client.OnCallRole{}

	if value, ok := d.GetOkExists("name"); ok {
		s.Name = value.(string)
	}
	if value, ok := d.GetOkExists("slug"); ok {
		s.Slug = value.(string)
	}
	if value, ok := d.GetOkExists("system_role"); ok {
		s.SystemRole = value.(string)
	}
	if value, ok := d.GetOkExists("alert_sources_permissions"); ok {
		s.AlertSourcesPermissions = value.([]interface{})
	}
	if value, ok := d.GetOkExists("alert_urgency_permissions"); ok {
		s.AlertUrgencyPermissions = value.([]interface{})
	}
	if value, ok := d.GetOkExists("alerts_permissions"); ok {
		s.AlertsPermissions = value.([]interface{})
	}
	if value, ok := d.GetOkExists("api_keys_permissions"); ok {
		s.ApiKeysPermissions = value.([]interface{})
	}
	if value, ok := d.GetOkExists("audits_permissions"); ok {
		s.AuditsPermissions = value.([]interface{})
	}
	if value, ok := d.GetOkExists("contacts_permissions"); ok {
		s.ContactsPermissions = value.([]interface{})
	}
	if value, ok := d.GetOkExists("escalation_policies_permissions"); ok {
		s.EscalationPoliciesPermissions = value.([]interface{})
	}
	if value, ok := d.GetOkExists("groups_permissions"); ok {
		s.GroupsPermissions = value.([]interface{})
	}
	if value, ok := d.GetOkExists("heartbeats_permissions"); ok {
		s.HeartbeatsPermissions = value.([]interface{})
	}
	if value, ok := d.GetOkExists("integrations_permissions"); ok {
		s.IntegrationsPermissions = value.([]interface{})
	}
	if value, ok := d.GetOkExists("invitations_permissions"); ok {
		s.InvitationsPermissions = value.([]interface{})
	}
	if value, ok := d.GetOkExists("live_call_routing_permissions"); ok {
		s.LiveCallRoutingPermissions = value.([]interface{})
	}
	if value, ok := d.GetOkExists("schedule_override_permissions"); ok {
		s.ScheduleOverridePermissions = value.([]interface{})
	}
	if value, ok := d.GetOkExists("schedules_permissions"); ok {
		s.SchedulesPermissions = value.([]interface{})
	}
	if value, ok := d.GetOkExists("services_permissions"); ok {
		s.ServicesPermissions = value.([]interface{})
	}
	if value, ok := d.GetOkExists("webhooks_permissions"); ok {
		s.WebhooksPermissions = value.([]interface{})
	}
	if value, ok := d.GetOkExists("workflows_permissions"); ok {
		s.WorkflowsPermissions = value.([]interface{})
	}

	res, err := c.CreateOnCallRole(s)
	if err != nil {
		return diag.Errorf("Error creating on_call_role: %s", err.Error())
	}

	d.SetId(res.ID)
	tflog.Trace(ctx, fmt.Sprintf("created a on_call_role resource: %s", d.Id()))

	return resourceOnCallRoleRead(ctx, d, meta)
}

func resourceOnCallRoleRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Reading OnCallRole: %s", d.Id()))

	item, err := c.GetOnCallRole(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("OnCallRole (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}

		return diag.Errorf("Error reading on_call_role: %s", d.Id())
	}

	d.Set("name", item.Name)
	d.Set("slug", item.Slug)
	d.Set("system_role", item.SystemRole)
	d.Set("alert_sources_permissions", item.AlertSourcesPermissions)
	d.Set("alert_urgency_permissions", item.AlertUrgencyPermissions)
	d.Set("alerts_permissions", item.AlertsPermissions)
	d.Set("api_keys_permissions", item.ApiKeysPermissions)
	d.Set("audits_permissions", item.AuditsPermissions)
	d.Set("contacts_permissions", item.ContactsPermissions)
	d.Set("escalation_policies_permissions", item.EscalationPoliciesPermissions)
	d.Set("groups_permissions", item.GroupsPermissions)
	d.Set("heartbeats_permissions", item.HeartbeatsPermissions)
	d.Set("integrations_permissions", item.IntegrationsPermissions)
	d.Set("invitations_permissions", item.InvitationsPermissions)
	d.Set("live_call_routing_permissions", item.LiveCallRoutingPermissions)
	d.Set("schedule_override_permissions", item.ScheduleOverridePermissions)
	d.Set("schedules_permissions", item.SchedulesPermissions)
	d.Set("services_permissions", item.ServicesPermissions)
	d.Set("webhooks_permissions", item.WebhooksPermissions)
	d.Set("workflows_permissions", item.WorkflowsPermissions)

	return nil
}

func resourceOnCallRoleUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Updating OnCallRole: %s", d.Id()))

	s := &client.OnCallRole{}

	if d.HasChange("name") {
		s.Name = d.Get("name").(string)
	}
	if d.HasChange("slug") {
		s.Slug = d.Get("slug").(string)
	}
	if d.HasChange("system_role") {
		s.SystemRole = d.Get("system_role").(string)
	}

	s.AlertSourcesPermissions = []interface{}{}
	if value, ok := d.GetOk("alert_sources_permissions"); value != nil && ok {
		if d.HasChange("alert_sources_permissions") {
			s.AlertSourcesPermissions = value.([]interface{})
		}
	}

	s.AlertUrgencyPermissions = []interface{}{}
	if value, ok := d.GetOk("alert_urgency_permissions"); value != nil && ok {
		if d.HasChange("alert_urgency_permissions") {
			s.AlertUrgencyPermissions = value.([]interface{})
		}
	}

	s.AlertsPermissions = []interface{}{}
	if value, ok := d.GetOk("alerts_permissions"); value != nil && ok {
		if d.HasChange("alerts_permissions") {
			s.AlertsPermissions = value.([]interface{})
		}
	}

	s.ApiKeysPermissions = []interface{}{}
	if value, ok := d.GetOk("api_keys_permissions"); value != nil && ok {
		if d.HasChange("api_keys_permissions") {
			s.ApiKeysPermissions = value.([]interface{})
		}
	}

	s.AuditsPermissions = []interface{}{}
	if value, ok := d.GetOk("audits_permissions"); value != nil && ok {
		if d.HasChange("audits_permissions") {
			s.AuditsPermissions = value.([]interface{})
		}
	}

	s.ContactsPermissions = []interface{}{}
	if value, ok := d.GetOk("contacts_permissions"); value != nil && ok {
		if d.HasChange("contacts_permissions") {
			s.ContactsPermissions = value.([]interface{})
		}
	}

	s.EscalationPoliciesPermissions = []interface{}{}
	if value, ok := d.GetOk("escalation_policies_permissions"); value != nil && ok {
		if d.HasChange("escalation_policies_permissions") {
			s.EscalationPoliciesPermissions = value.([]interface{})
		}
	}

	s.GroupsPermissions = []interface{}{}
	if value, ok := d.GetOk("groups_permissions"); value != nil && ok {
		if d.HasChange("groups_permissions") {
			s.GroupsPermissions = value.([]interface{})
		}
	}

	s.HeartbeatsPermissions = []interface{}{}
	if value, ok := d.GetOk("heartbeats_permissions"); value != nil && ok {
		if d.HasChange("heartbeats_permissions") {
			s.HeartbeatsPermissions = value.([]interface{})
		}
	}

	s.IntegrationsPermissions = []interface{}{}
	if value, ok := d.GetOk("integrations_permissions"); value != nil && ok {
		if d.HasChange("integrations_permissions") {
			s.IntegrationsPermissions = value.([]interface{})
		}
	}

	s.InvitationsPermissions = []interface{}{}
	if value, ok := d.GetOk("invitations_permissions"); value != nil && ok {
		if d.HasChange("invitations_permissions") {
			s.InvitationsPermissions = value.([]interface{})
		}
	}

	s.LiveCallRoutingPermissions = []interface{}{}
	if value, ok := d.GetOk("live_call_routing_permissions"); value != nil && ok {
		if d.HasChange("live_call_routing_permissions") {
			s.LiveCallRoutingPermissions = value.([]interface{})
		}
	}

	s.ScheduleOverridePermissions = []interface{}{}
	if value, ok := d.GetOk("schedule_override_permissions"); value != nil && ok {
		if d.HasChange("schedule_override_permissions") {
			s.ScheduleOverridePermissions = value.([]interface{})
		}
	}

	s.SchedulesPermissions = []interface{}{}
	if value, ok := d.GetOk("schedules_permissions"); value != nil && ok {
		if d.HasChange("schedules_permissions") {
			s.SchedulesPermissions = value.([]interface{})
		}
	}

	s.ServicesPermissions = []interface{}{}
	if value, ok := d.GetOk("services_permissions"); value != nil && ok {
		if d.HasChange("services_permissions") {
			s.ServicesPermissions = value.([]interface{})
		}
	}

	s.WebhooksPermissions = []interface{}{}
	if value, ok := d.GetOk("webhooks_permissions"); value != nil && ok {
		if d.HasChange("webhooks_permissions") {
			s.WebhooksPermissions = value.([]interface{})
		}
	}

	s.WorkflowsPermissions = []interface{}{}
	if value, ok := d.GetOk("workflows_permissions"); value != nil && ok {
		if d.HasChange("workflows_permissions") {
			s.WorkflowsPermissions = value.([]interface{})
		}
	}

	_, err := c.UpdateOnCallRole(d.Id(), s)
	if err != nil {
		return diag.Errorf("Error updating on_call_role: %s", err.Error())
	}

	return resourceOnCallRoleRead(ctx, d, meta)
}

func resourceOnCallRoleDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Deleting OnCallRole: %s", d.Id()))

	err := c.DeleteOnCallRole(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream.
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("OnCallRole (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}
		return diag.Errorf("Error deleting on_call_role: %s", err.Error())
	}

	d.SetId("")

	return nil
}
