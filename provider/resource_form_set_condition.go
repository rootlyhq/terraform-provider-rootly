// DO NOT MODIFY: This file is generated by tools/generate.js. Any changes will be overwritten during the next build.

package provider

import (
	"context"
	"errors"
	"fmt"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/rootlyhq/terraform-provider-rootly/v2/client"
	"github.com/rootlyhq/terraform-provider-rootly/v2/tools"
)

func resourceFormSetCondition() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceFormSetConditionCreate,
		ReadContext:   resourceFormSetConditionRead,
		UpdateContext: resourceFormSetConditionUpdate,
		DeleteContext: resourceFormSetConditionDelete,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
		Schema: map[string]*schema.Schema{

			"form_set_id": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    true,
				Required:    false,
				Optional:    true,
				ForceNew:    true,
				Description: "The form set this condition applies.",
			},

			"form_field_id": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    false,
				Required:    true,
				Optional:    false,
				ForceNew:    false,
				Description: "The form field this condition applies.",
			},

			"comparison": &schema.Schema{
				Type:         schema.TypeString,
				Default:      "equal",
				Required:     false,
				Optional:     true,
				ForceNew:     false,
				Description:  "The condition comparison.. Value must be one of `equal`.",
				ValidateFunc: validation.StringInSlice([]string{"equal"}, false),
			},

			"values": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         false,
				Required:         true,
				Optional:         false,
				Description:      "The values for comparison.",
			},
		},
	}
}

func resourceFormSetConditionCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)

	tflog.Trace(ctx, fmt.Sprintf("Creating FormSetCondition"))

	s := &client.FormSetCondition{}

	if value, ok := d.GetOkExists("form_set_id"); ok {
		s.FormSetId = value.(string)
	}
	if value, ok := d.GetOkExists("form_field_id"); ok {
		s.FormFieldId = value.(string)
	}
	if value, ok := d.GetOkExists("comparison"); ok {
		s.Comparison = value.(string)
	}
	if value, ok := d.GetOkExists("values"); ok {
		s.Values = value.([]interface{})
	}

	res, err := c.CreateFormSetCondition(s)
	if err != nil {
		return diag.Errorf("Error creating form_set_condition: %s", err.Error())
	}

	d.SetId(res.ID)
	tflog.Trace(ctx, fmt.Sprintf("created a form_set_condition resource: %s", d.Id()))

	return resourceFormSetConditionRead(ctx, d, meta)
}

func resourceFormSetConditionRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Reading FormSetCondition: %s", d.Id()))

	item, err := c.GetFormSetCondition(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("FormSetCondition (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}

		return diag.Errorf("Error reading form_set_condition: %s", d.Id())
	}

	d.Set("form_set_id", item.FormSetId)
	d.Set("form_field_id", item.FormFieldId)
	d.Set("comparison", item.Comparison)
	d.Set("values", item.Values)

	return nil
}

func resourceFormSetConditionUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Updating FormSetCondition: %s", d.Id()))

	s := &client.FormSetCondition{}

	if d.HasChange("form_set_id") {
		s.FormSetId = d.Get("form_set_id").(string)
	}
	if d.HasChange("form_field_id") {
		s.FormFieldId = d.Get("form_field_id").(string)
	}
	if d.HasChange("comparison") {
		s.Comparison = d.Get("comparison").(string)
	}
	if d.HasChange("values") {
		s.Values = d.Get("values").([]interface{})
	}

	_, err := c.UpdateFormSetCondition(d.Id(), s)
	if err != nil {
		return diag.Errorf("Error updating form_set_condition: %s", err.Error())
	}

	return resourceFormSetConditionRead(ctx, d, meta)
}

func resourceFormSetConditionDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Deleting FormSetCondition: %s", d.Id()))

	err := c.DeleteFormSetCondition(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream.
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("FormSetCondition (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}
		return diag.Errorf("Error deleting form_set_condition: %s", err.Error())
	}

	d.SetId("")

	return nil
}
