// DO NOT MODIFY: This file is generated by tools/generate.js. Any changes will be overwritten during the next build.

package provider

import (
	"context"
	"errors"
	"fmt"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/rootlyhq/terraform-provider-rootly/v2/client"
	"github.com/rootlyhq/terraform-provider-rootly/v2/tools"
)

func resourceCommunicationsTemplate() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceCommunicationsTemplateCreate,
		ReadContext:   resourceCommunicationsTemplateRead,
		UpdateContext: resourceCommunicationsTemplateUpdate,
		DeleteContext: resourceCommunicationsTemplateDelete,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
		Schema: map[string]*schema.Schema{

			"name": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    false,
				Required:    true,
				Optional:    false,
				ForceNew:    false,
				Description: "The name of the communications template",
			},

			"slug": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    true,
				Required:    false,
				Optional:    true,
				ForceNew:    false,
				Description: "The slug of the communications template",
			},

			"description": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    true,
				Required:    false,
				Optional:    true,
				ForceNew:    false,
				Description: "The description of the communications template",
			},

			"position": &schema.Schema{
				Type:        schema.TypeInt,
				Computed:    true,
				Required:    false,
				Optional:    true,
				ForceNew:    false,
				Description: "Position of the communications template",
			},

			"communication_template_stages": &schema.Schema{
				Type:             schema.TypeList,
				Computed:         true,
				Required:         false,
				Optional:         true,
				Description:      "Communication template stages",
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"id": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Required:    false,
							Optional:    true,
							ForceNew:    false,
							Description: "ID of the communication template stage",
						},

						"communication_stage_id": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Required:    false,
							Optional:    true,
							ForceNew:    false,
							Description: "The communication stage ID",
						},

						"sms_content": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Required:    false,
							Optional:    true,
							ForceNew:    false,
							Description: "SMS content for the stage",
						},

						"email_subject": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Required:    false,
							Optional:    true,
							ForceNew:    false,
							Description: "Email subject for the stage",
						},

						"email_body": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Required:    false,
							Optional:    true,
							ForceNew:    false,
							Description: "Email body for the stage",
						},

						"slack_content": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Required:    false,
							Optional:    true,
							ForceNew:    false,
							Description: "Slack content for the stage",
						},
					},
				},
			},

			"communication_type": &schema.Schema{
				Type:        schema.TypeList,
				Computed:    true,
				Required:    false,
				Optional:    true,
				Description: "Map must contain two fields, `id` and `name`. ",
				MinItems:    0,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"id": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Required:    false,
							Optional:    true,
							ForceNew:    false,
							Description: "ID of the communication type",
						},

						"name": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Required:    false,
							Optional:    true,
							ForceNew:    false,
							Description: "Name of the communication type",
						},
					},
				},
			},
		},
	}
}

func resourceCommunicationsTemplateCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)

	tflog.Trace(ctx, fmt.Sprintf("Creating CommunicationsTemplate"))

	s := &client.CommunicationsTemplate{}

	if value, ok := d.GetOkExists("name"); ok {
		s.Name = value.(string)
	}
	if value, ok := d.GetOkExists("slug"); ok {
		s.Slug = value.(string)
	}
	if value, ok := d.GetOkExists("description"); ok {
		s.Description = value.(string)
	}
	if value, ok := d.GetOkExists("position"); ok {
		s.Position = value.(int)
	}
	if value, ok := d.GetOkExists("communication_template_stages"); ok {
		s.CommunicationTemplateStages = value.([]interface{})
	}
	if value, ok := d.GetOkExists("communication_type"); ok {
		if valueList, ok := value.([]interface{}); ok && len(valueList) > 0 && valueList[0] != nil {
			if mapValue, ok := valueList[0].(map[string]interface{}); ok {
				s.CommunicationType = mapValue
			}
		}
	}

	res, err := c.CreateCommunicationsTemplate(s)
	if err != nil {
		return diag.Errorf("Error creating communications_template: %s", err.Error())
	}

	d.SetId(res.ID)
	tflog.Trace(ctx, fmt.Sprintf("created a communications_template resource: %s", d.Id()))

	return resourceCommunicationsTemplateRead(ctx, d, meta)
}

func resourceCommunicationsTemplateRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Reading CommunicationsTemplate: %s", d.Id()))

	item, err := c.GetCommunicationsTemplate(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("CommunicationsTemplate (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}

		return diag.Errorf("Error reading communications_template: %s", d.Id())
	}

	d.Set("name", item.Name)
	d.Set("slug", item.Slug)
	d.Set("description", item.Description)
	d.Set("position", item.Position)

	if item.CommunicationTemplateStages != nil {
		processedItems := make([]map[string]interface{}, 0)

		for _, c := range item.CommunicationTemplateStages {
			if rawItem, ok := c.(map[string]interface{}); ok {
				// Create a new map with only the fields defined in the schema
				processedItem := map[string]interface{}{
					"id":                     rawItem["id"],
					"communication_stage_id": rawItem["communication_stage_id"],
					"sms_content":            rawItem["sms_content"],
					"email_subject":          rawItem["email_subject"],
					"email_body":             rawItem["email_body"],
					"slack_content":          rawItem["slack_content"],
				}
				processedItems = append(processedItems, processedItem)
			}
		}

		d.Set("communication_template_stages", processedItems)
	} else {
		d.Set("communication_template_stages", nil)
	}

	singleton_list := make([]interface{}, 1, 1)
	processedItem := map[string]interface{}{
		"id":   item.CommunicationType["id"],
		"name": item.CommunicationType["name"],
	}
	singleton_list[0] = processedItem
	d.Set("communication_type", singleton_list)

	return nil
}

func resourceCommunicationsTemplateUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Updating CommunicationsTemplate: %s", d.Id()))

	s := &client.CommunicationsTemplate{}

	if d.HasChange("name") {
		s.Name = d.Get("name").(string)
	}
	if d.HasChange("slug") {
		s.Slug = d.Get("slug").(string)
	}
	if d.HasChange("description") {
		s.Description = d.Get("description").(string)
	}
	if d.HasChange("position") {
		s.Position = d.Get("position").(int)
	}
	if d.HasChange("communication_template_stages") {
		s.CommunicationTemplateStages = d.Get("communication_template_stages").([]interface{})
	}
	if d.HasChange("communication_type") {
		tps := d.Get("communication_type").([]interface{})
		for _, tpsi := range tps {
			s.CommunicationType = tpsi.(map[string]interface{})
		}
	}

	_, err := c.UpdateCommunicationsTemplate(d.Id(), s)
	if err != nil {
		return diag.Errorf("Error updating communications_template: %s", err.Error())
	}

	return resourceCommunicationsTemplateRead(ctx, d, meta)
}

func resourceCommunicationsTemplateDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Deleting CommunicationsTemplate: %s", d.Id()))

	err := c.DeleteCommunicationsTemplate(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream.
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("CommunicationsTemplate (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}
		return diag.Errorf("Error deleting communications_template: %s", err.Error())
	}

	d.SetId("")

	return nil
}
