// DO NOT MODIFY: This file is generated by tools/generate.js. Any changes will be overwritten during the next build.

package provider

import (
	"context"
	"errors"
	"fmt"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/rootlyhq/terraform-provider-rootly/v2/client"
	"github.com/rootlyhq/terraform-provider-rootly/v2/tools"
)

func resourceFunctionality() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceFunctionalityCreate,
		ReadContext: resourceFunctionalityRead,
		UpdateContext: resourceFunctionalityUpdate,
		DeleteContext: resourceFunctionalityDelete,
		Importer: &schema.ResourceImporter {
			StateContext: schema.ImportStatePassthroughContext,
		},
		Schema: map[string]*schema.Schema {
			
			"name": &schema.Schema {
				Type: schema.TypeString,
				Computed: false,
				Required: true,
				Optional: false,
				ForceNew: false,
				Description: "The name of the functionality",
				
			},
			

			"slug": &schema.Schema {
				Type: schema.TypeString,
				Computed: true,
				Required: false,
				Optional: true,
				ForceNew: false,
				Description: "The slug of the functionality",
				
			},
			

			"description": &schema.Schema {
				Type: schema.TypeString,
				Computed: true,
				Required: false,
				Optional: true,
				ForceNew: false,
				Description: "The description of the functionality",
				
			},
			

			"public_description": &schema.Schema {
				Type: schema.TypeString,
				Computed: true,
				Required: false,
				Optional: true,
				ForceNew: false,
				Description: "The public description of the functionality",
				
			},
			

				"notify_emails": &schema.Schema {
					Type: schema.TypeList,
					Elem: &schema.Schema {
						Type: schema.TypeString,
					},
					DiffSuppressFunc: tools.EqualIgnoringOrder,
					Computed: true,
					Required: false,
					Optional: true,
					Description: "Emails attached to the functionality",
					
				},
				

			"color": &schema.Schema {
				Type: schema.TypeString,
				Computed: true,
				Required: false,
				Optional: true,
				ForceNew: false,
				Description: "The hex color of the functionality",
				
			},
			

			"backstage_id": &schema.Schema {
				Type: schema.TypeString,
				Computed: true,
				Required: false,
				Optional: true,
				ForceNew: false,
				Description: "The Backstage entity id associated to this functionality. eg: :namespace/:kind/:entity_name",
				
			},
			

			"external_id": &schema.Schema {
				Type: schema.TypeString,
				Computed: true,
				Required: false,
				Optional: true,
				ForceNew: false,
				Description: "The external id associated to this functionality",
				
			},
			

			"pagerduty_id": &schema.Schema {
				Type: schema.TypeString,
				Computed: true,
				Required: false,
				Optional: true,
				ForceNew: false,
				Description: "The PagerDuty service id associated to this functionality",
				
			},
			

			"opsgenie_id": &schema.Schema {
				Type: schema.TypeString,
				Computed: true,
				Required: false,
				Optional: true,
				ForceNew: false,
				Description: "The Opsgenie service id associated to this functionality",
				
			},
			

			"opsgenie_team_id": &schema.Schema {
				Type: schema.TypeString,
				Computed: true,
				Required: false,
				Optional: true,
				ForceNew: false,
				Description: "The Opsgenie team id associated to this functionality",
				
			},
			

			"cortex_id": &schema.Schema {
				Type: schema.TypeString,
				Computed: true,
				Required: false,
				Optional: true,
				ForceNew: false,
				Description: "The Cortex group id associated to this functionality",
				
			},
			

			"service_now_ci_sys_id": &schema.Schema {
				Type: schema.TypeString,
				Computed: true,
				Required: false,
				Optional: true,
				ForceNew: false,
				Description: "The Service Now CI sys id associated to this functionality",
				
			},
			

		"position": &schema.Schema {
			Type: schema.TypeInt,
			Computed: true,
			Required: false,
			Optional: true,
			ForceNew: false,
			Description: "Position of the functionality",
			
		},
		

				"environment_ids": &schema.Schema {
					Type: schema.TypeList,
					Elem: &schema.Schema {
						Type: schema.TypeString,
					},
					DiffSuppressFunc: tools.EqualIgnoringOrder,
					Computed: true,
					Required: false,
					Optional: true,
					Description: "Environments associated with this functionality",
					
				},
				

				"service_ids": &schema.Schema {
					Type: schema.TypeList,
					Elem: &schema.Schema {
						Type: schema.TypeString,
					},
					DiffSuppressFunc: tools.EqualIgnoringOrder,
					Computed: true,
					Required: false,
					Optional: true,
					Description: "Services associated with this functionality",
					
				},
				

				"owners_group_ids": &schema.Schema {
					Type: schema.TypeList,
					Elem: &schema.Schema {
						Type: schema.TypeString,
					},
					DiffSuppressFunc: tools.EqualIgnoringOrder,
					Computed: true,
					Required: false,
					Optional: true,
					Description: "Owner Teams associated with this functionality",
					
				},
				

				"owners_user_ids": &schema.Schema {
					Type: schema.TypeList,
					Elem: &schema.Schema {
						Type: schema.TypeInt,
					},
					DiffSuppressFunc: tools.EqualIgnoringOrder,
					Computed: true,
					Required: false,
					Optional: true,
					Description: "Owner Users associated with this functionality",
					
				},
				

				"slack_channels": &schema.Schema {
					Type: schema.TypeList,
					Computed: true,
					Required: false,
					Optional: true,
					Description: "Slack Channels associated with this functionality",
					DiffSuppressFunc: tools.EqualIgnoringOrder,
					Elem: &schema.Resource {
						Schema: map[string]*schema.Schema {
              
			"id": &schema.Schema {
				Type: schema.TypeString,
				Computed: true,
				Required: false,
				Optional: true,
				ForceNew: false,
				Description: "Slack channel ID",
				
			},
			

			"name": &schema.Schema {
				Type: schema.TypeString,
				Computed: true,
				Required: false,
				Optional: true,
				ForceNew: false,
				Description: "Slack channel name",
				
			},
			
						},
					},
					
				},
				

				"slack_aliases": &schema.Schema {
					Type: schema.TypeList,
					Computed: true,
					Required: false,
					Optional: true,
					Description: "Slack Aliases associated with this functionality",
					DiffSuppressFunc: tools.EqualIgnoringOrder,
					Elem: &schema.Resource {
						Schema: map[string]*schema.Schema {
              
			"id": &schema.Schema {
				Type: schema.TypeString,
				Computed: true,
				Required: false,
				Optional: true,
				ForceNew: false,
				Description: "Slack alias ID",
				
			},
			

			"name": &schema.Schema {
				Type: schema.TypeString,
				Computed: true,
				Required: false,
				Optional: true,
				ForceNew: false,
				Description: "Slack alias name",
				
			},
			
						},
					},
					
				},
				
		},
	}
}

func resourceFunctionalityCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)

	tflog.Trace(ctx, fmt.Sprintf("Creating Functionality"))

	s := &client.Functionality{}

	  if value, ok := d.GetOkExists("name"); ok {
				s.Name = value.(string)
			}
    if value, ok := d.GetOkExists("slug"); ok {
				s.Slug = value.(string)
			}
    if value, ok := d.GetOkExists("description"); ok {
				s.Description = value.(string)
			}
    if value, ok := d.GetOkExists("public_description"); ok {
				s.PublicDescription = value.(string)
			}
    if value, ok := d.GetOkExists("notify_emails"); ok {
				s.NotifyEmails = value.([]interface{})
			}
    if value, ok := d.GetOkExists("color"); ok {
				s.Color = value.(string)
			}
    if value, ok := d.GetOkExists("backstage_id"); ok {
				s.BackstageId = value.(string)
			}
    if value, ok := d.GetOkExists("external_id"); ok {
				s.ExternalId = value.(string)
			}
    if value, ok := d.GetOkExists("pagerduty_id"); ok {
				s.PagerdutyId = value.(string)
			}
    if value, ok := d.GetOkExists("opsgenie_id"); ok {
				s.OpsgenieId = value.(string)
			}
    if value, ok := d.GetOkExists("opsgenie_team_id"); ok {
				s.OpsgenieTeamId = value.(string)
			}
    if value, ok := d.GetOkExists("cortex_id"); ok {
				s.CortexId = value.(string)
			}
    if value, ok := d.GetOkExists("service_now_ci_sys_id"); ok {
				s.ServiceNowCiSysId = value.(string)
			}
    if value, ok := d.GetOkExists("position"); ok {
				s.Position = value.(int)
			}
    if value, ok := d.GetOkExists("environment_ids"); ok {
				s.EnvironmentIds = value.([]interface{})
			}
    if value, ok := d.GetOkExists("service_ids"); ok {
				s.ServiceIds = value.([]interface{})
			}
    if value, ok := d.GetOkExists("owners_group_ids"); ok {
				s.OwnersGroupIds = value.([]interface{})
			}
    if value, ok := d.GetOkExists("owners_user_ids"); ok {
				s.OwnersUserIds = value.([]interface{})
			}
    if value, ok := d.GetOkExists("slack_channels"); ok {
				s.SlackChannels = value.([]interface{})
			}
    if value, ok := d.GetOkExists("slack_aliases"); ok {
				s.SlackAliases = value.([]interface{})
			}

	res, err := c.CreateFunctionality(s)
	if err != nil {
		return diag.Errorf("Error creating functionality: %s", err.Error())
	}

	d.SetId(res.ID)
	tflog.Trace(ctx, fmt.Sprintf("created a functionality resource: %s", d.Id()))

	return resourceFunctionalityRead(ctx, d, meta)
}

func resourceFunctionalityRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Reading Functionality: %s", d.Id()))

	item, err := c.GetFunctionality(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("Functionality (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}

		return diag.Errorf("Error reading functionality: %s", d.Id())
	}

	d.Set("name", item.Name)
  d.Set("slug", item.Slug)
  d.Set("description", item.Description)
  d.Set("public_description", item.PublicDescription)
  d.Set("notify_emails", item.NotifyEmails)
  d.Set("color", item.Color)
  d.Set("backstage_id", item.BackstageId)
  d.Set("external_id", item.ExternalId)
  d.Set("pagerduty_id", item.PagerdutyId)
  d.Set("opsgenie_id", item.OpsgenieId)
  d.Set("opsgenie_team_id", item.OpsgenieTeamId)
  d.Set("cortex_id", item.CortexId)
  d.Set("service_now_ci_sys_id", item.ServiceNowCiSysId)
  d.Set("position", item.Position)
  d.Set("environment_ids", item.EnvironmentIds)
  d.Set("service_ids", item.ServiceIds)
  d.Set("owners_group_ids", item.OwnersGroupIds)
  d.Set("owners_user_ids", item.OwnersUserIds)
  d.Set("slack_channels", item.SlackChannels)
  d.Set("slack_aliases", item.SlackAliases)

	return nil
}

func resourceFunctionalityUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Updating Functionality: %s", d.Id()))

	s := &client.Functionality{}

	  if d.HasChange("name") {
				s.Name = d.Get("name").(string)
			}
    if d.HasChange("slug") {
				s.Slug = d.Get("slug").(string)
			}
    if d.HasChange("description") {
				s.Description = d.Get("description").(string)
			}
    if d.HasChange("public_description") {
				s.PublicDescription = d.Get("public_description").(string)
			}
    if d.HasChange("notify_emails") {
				s.NotifyEmails = d.Get("notify_emails").([]interface{})
			}
    if d.HasChange("color") {
				s.Color = d.Get("color").(string)
			}
    if d.HasChange("backstage_id") {
				s.BackstageId = d.Get("backstage_id").(string)
			}
    if d.HasChange("external_id") {
				s.ExternalId = d.Get("external_id").(string)
			}
    if d.HasChange("pagerduty_id") {
				s.PagerdutyId = d.Get("pagerduty_id").(string)
			}
    if d.HasChange("opsgenie_id") {
				s.OpsgenieId = d.Get("opsgenie_id").(string)
			}
    if d.HasChange("opsgenie_team_id") {
				s.OpsgenieTeamId = d.Get("opsgenie_team_id").(string)
			}
    if d.HasChange("cortex_id") {
				s.CortexId = d.Get("cortex_id").(string)
			}
    if d.HasChange("service_now_ci_sys_id") {
				s.ServiceNowCiSysId = d.Get("service_now_ci_sys_id").(string)
			}
    if d.HasChange("position") {
				s.Position = d.Get("position").(int)
			}
    if d.HasChange("environment_ids") {
				s.EnvironmentIds = d.Get("environment_ids").([]interface{})
			}
    if d.HasChange("service_ids") {
				s.ServiceIds = d.Get("service_ids").([]interface{})
			}
    if d.HasChange("owners_group_ids") {
				s.OwnersGroupIds = d.Get("owners_group_ids").([]interface{})
			}
    if d.HasChange("owners_user_ids") {
				s.OwnersUserIds = d.Get("owners_user_ids").([]interface{})
			}
    if d.HasChange("slack_channels") {
				s.SlackChannels = d.Get("slack_channels").([]interface{})
			}
    if d.HasChange("slack_aliases") {
				s.SlackAliases = d.Get("slack_aliases").([]interface{})
			}

	_, err := c.UpdateFunctionality(d.Id(), s)
	if err != nil {
		return diag.Errorf("Error updating functionality: %s", err.Error())
	}

	return resourceFunctionalityRead(ctx, d, meta)
}

func resourceFunctionalityDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Deleting Functionality: %s", d.Id()))

	err := c.DeleteFunctionality(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream.
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("Functionality (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}
		return diag.Errorf("Error deleting functionality: %s", err.Error())
	}

	d.SetId("")

	return nil
}
