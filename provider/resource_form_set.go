// DO NOT MODIFY: This file is generated by tools/generate.js. Any changes will be overwritten during the next build.

package provider

import (
	"context"
	"errors"
	"fmt"

	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/rootlyhq/terraform-provider-rootly/v2/client"
	"github.com/rootlyhq/terraform-provider-rootly/v2/tools"
)

func resourceFormSet() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceFormSetCreate,
		ReadContext:   resourceFormSetRead,
		UpdateContext: resourceFormSetUpdate,
		DeleteContext: resourceFormSetDelete,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
		Schema: map[string]*schema.Schema{

			"name": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
				ForceNew:    false,
				WriteOnly:   false,
				Description: "The name of the form set",
			},

			"slug": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				WriteOnly:   false,
				Description: "The slug of the form set",
			},

			"is_default": &schema.Schema{
				Type:        schema.TypeBool,
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				WriteOnly:   false,
				Description: "Whether the form set is default. Value must be one of true or false",
			},

			"forms": &schema.Schema{
				Type: schema.TypeList,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				DiffSuppressFunc: tools.EqualIgnoringOrder,
				Computed:         false,
				Required:         true,
				Optional:         false,
				Sensitive:        false,
				ForceNew:         false,
				WriteOnly:        false,
				Description:      "The forms included in the form set. Add custom forms using the custom form's `slug` field. Or choose a built-in form: `web_new_incident_form`, `web_update_incident_form`, `web_incident_post_mortem_form`, `web_incident_mitigation_form`, `web_incident_resolution_form`, `web_incident_cancellation_form`, `web_scheduled_incident_form`, `web_update_scheduled_incident_form`, `slack_new_incident_form`, `slack_update_incident_form`, `slack_update_incident_status_form`, `slack_incident_mitigation_form`, `slack_incident_resolution_form`, `slack_incident_cancellation_form`, `slack_scheduled_incident_form`, `slack_update_scheduled_incident_form`",
			},
		},
	}
}

func resourceFormSetCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)

	tflog.Trace(ctx, fmt.Sprintf("Creating FormSet"))

	s := &client.FormSet{}

	if value, ok := d.GetOkExists("name"); ok {
		s.Name = value.(string)
	}
	if value, ok := d.GetOkExists("slug"); ok {
		s.Slug = value.(string)
	}
	if value, ok := d.GetOkExists("is_default"); ok {
		s.IsDefault = tools.Bool(value.(bool))
	}
	if value, ok := d.GetOkExists("forms"); ok {
		s.Forms = value.([]interface{})
	}

	res, err := c.CreateFormSet(s)
	if err != nil {
		return diag.Errorf("Error creating form_set: %s", err.Error())
	}

	d.SetId(res.ID)
	tflog.Trace(ctx, fmt.Sprintf("created a form_set resource: %s", d.Id()))

	return resourceFormSetRead(ctx, d, meta)
}

func resourceFormSetRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Reading FormSet: %s", d.Id()))

	item, err := c.GetFormSet(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("FormSet (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}

		return diag.Errorf("Error reading form_set: %s", d.Id())
	}

	d.Set("name", item.Name)
	d.Set("slug", item.Slug)
	d.Set("is_default", item.IsDefault)
	d.Set("forms", item.Forms)

	return nil
}

func resourceFormSetUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Updating FormSet: %s", d.Id()))

	s := &client.FormSet{}

	if d.HasChange("name") {
		s.Name = d.Get("name").(string)
	}
	if d.HasChange("slug") {
		s.Slug = d.Get("slug").(string)
	}
	if d.HasChange("is_default") {
		s.IsDefault = tools.Bool(d.Get("is_default").(bool))
	}

	if d.HasChange("forms") {
		if value, ok := d.GetOk("forms"); value != nil && ok {
			s.Forms = value.([]interface{})
		} else {
			s.Forms = []interface{}{}
		}
	}

	_, err := c.UpdateFormSet(d.Id(), s)
	if err != nil {
		return diag.Errorf("Error updating form_set: %s", err.Error())
	}

	return resourceFormSetRead(ctx, d, meta)
}

func resourceFormSetDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Deleting FormSet: %s", d.Id()))

	err := c.DeleteFormSet(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream.
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("FormSet (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}
		return diag.Errorf("Error deleting form_set: %s", err.Error())
	}

	d.SetId("")

	return nil
}
