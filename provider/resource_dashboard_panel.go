// DO NOT MODIFY: This file is generated by tools/generate.js. Any changes will be overwritten during the next build.

package provider

import (
	"context"
	"errors"
	"fmt"

	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/rootlyhq/terraform-provider-rootly/v2/client"
	"github.com/rootlyhq/terraform-provider-rootly/v2/internal/converter"
	"github.com/rootlyhq/terraform-provider-rootly/v2/tools"
)

func resourceDashboardPanel() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceDashboardPanelCreate,
		ReadContext:   resourceDashboardPanelRead,
		UpdateContext: resourceDashboardPanelUpdate,
		DeleteContext: resourceDashboardPanelDelete,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
		Schema: map[string]*schema.Schema{

			"dashboard_id": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				WriteOnly:   false,
				Description: "The panel dashboard",
			},

			"name": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				WriteOnly:   false,
				Description: "The name of the dashboard_panel",
			},

			"params": &schema.Schema{
				Type:        schema.TypeList,
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
				ForceNew:    false,
				WriteOnly:   false,
				Description: "",
				MinItems:    0,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"display": &schema.Schema{
							Type:         schema.TypeString,
							Default:      "line_chart",
							Required:     false,
							Optional:     true,
							Sensitive:    false,
							ForceNew:     false,
							WriteOnly:    false,
							Description:  "Value must be one of `line_chart`, `line_stepped_chart`, `column_chart`, `stacked_column_chart`, `monitoring_chart`, `pie_chart`, `table`, `aggregate_value`.",
							ValidateFunc: validation.StringInSlice([]string{"line_chart", "line_stepped_chart", "column_chart", "stacked_column_chart", "monitoring_chart", "pie_chart", "table", "aggregate_value"}, false),
						},

						"description": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Required:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							WriteOnly:   false,
							Description: "",
						},

						"table_fields": &schema.Schema{
							Type: schema.TypeList,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
							DiffSuppressFunc: tools.EqualIgnoringOrder,
							Computed:         false,
							Required:         false,
							Optional:         true,
							Sensitive:        false,
							ForceNew:         false,
							WriteOnly:        false,
							Description:      "",
						},

						"legend": &schema.Schema{
							Type:        schema.TypeList,
							Computed:    true,
							Required:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							WriteOnly:   false,
							Description: "",
							MinItems:    0,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"groups": &schema.Schema{
										Type:         schema.TypeString,
										Default:      "all",
										Required:     false,
										Optional:     true,
										Sensitive:    false,
										ForceNew:     false,
										WriteOnly:    false,
										Description:  "Value must be one of `all`, `charted`.",
										ValidateFunc: validation.StringInSlice([]string{"all", "charted"}, false),
									},
								},
							},
						},

						"datalabels": &schema.Schema{
							Type:        schema.TypeList,
							Computed:    true,
							Required:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							WriteOnly:   false,
							Description: "",
							MinItems:    0,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"enabled": &schema.Schema{
										Type:      schema.TypeBool,
										Default:   true,
										Optional:  true,
										Sensitive: false,
										ForceNew:  false,
										WriteOnly: false,
									},
								},
							},
						},

						"datasets": &schema.Schema{
							Type:             schema.TypeList,
							Computed:         false,
							Required:         false,
							Optional:         true,
							Sensitive:        false,
							ForceNew:         false,
							WriteOnly:        false,
							Description:      "",
							DiffSuppressFunc: tools.EqualIgnoringOrder,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": &schema.Schema{
										Type:        schema.TypeString,
										Computed:    true,
										Required:    false,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    false,
										WriteOnly:   false,
										Description: "",
									},

									"collection": &schema.Schema{
										Type:         schema.TypeString,
										Default:      "alerts",
										Required:     false,
										Optional:     true,
										Sensitive:    false,
										ForceNew:     false,
										WriteOnly:    false,
										Description:  "Value must be one of `alerts`, `incidents`, `incident_post_mortems`, `incident_action_items`, `users`.",
										ValidateFunc: validation.StringInSlice([]string{"alerts", "incidents", "incident_post_mortems", "incident_action_items", "users"}, false),
									},

									"filter": &schema.Schema{
										Type:             schema.TypeList,
										Computed:         false,
										Required:         false,
										Optional:         true,
										Sensitive:        false,
										ForceNew:         false,
										WriteOnly:        false,
										Description:      "",
										DiffSuppressFunc: tools.EqualIgnoringOrder,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"operation": &schema.Schema{
													Type:         schema.TypeString,
													Default:      "and",
													Required:     false,
													Optional:     true,
													Sensitive:    false,
													ForceNew:     false,
													WriteOnly:    false,
													Description:  "Value must be one of `and`, `or`.",
													ValidateFunc: validation.StringInSlice([]string{"and", "or"}, false),
												},

												"rules": &schema.Schema{
													Type:             schema.TypeList,
													Computed:         false,
													Required:         false,
													Optional:         true,
													Sensitive:        false,
													ForceNew:         false,
													WriteOnly:        false,
													Description:      "",
													DiffSuppressFunc: tools.EqualIgnoringOrder,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"operation": &schema.Schema{
																Type:         schema.TypeString,
																Default:      "and",
																Required:     false,
																Optional:     true,
																Sensitive:    false,
																ForceNew:     false,
																WriteOnly:    false,
																Description:  "Value must be one of `and`, `or`.",
																ValidateFunc: validation.StringInSlice([]string{"and", "or"}, false),
															},

															"condition": &schema.Schema{
																Type:         schema.TypeString,
																Default:      "=",
																Required:     false,
																Optional:     true,
																Sensitive:    false,
																ForceNew:     false,
																WriteOnly:    false,
																Description:  "Value must be one of `=`, `!=`, `>=`, `<=`, `exists`, `not_exists`, `contains`, `not_contains`, `assigned`, `unassigned`.",
																ValidateFunc: validation.StringInSlice([]string{"=", "!=", ">=", "<=", "exists", "not_exists", "contains", "not_contains", "assigned", "unassigned"}, false),
															},

															"key": &schema.Schema{
																Type:        schema.TypeString,
																Computed:    true,
																Required:    false,
																Optional:    true,
																Sensitive:   false,
																ForceNew:    false,
																WriteOnly:   false,
																Description: "",
															},

															"value": &schema.Schema{
																Type:        schema.TypeString,
																Computed:    true,
																Required:    false,
																Optional:    true,
																Sensitive:   false,
																ForceNew:    false,
																WriteOnly:   false,
																Description: "",
															},
														},
													},
												},
											},
										},
									},

									"group_by": &schema.Schema{
										Type:        schema.TypeString,
										Computed:    true,
										Required:    false,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    false,
										WriteOnly:   false,
										Description: "",
									},

									"aggregate": &schema.Schema{
										Type:        schema.TypeList,
										Computed:    true,
										Required:    false,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    false,
										WriteOnly:   false,
										Description: "",
										MinItems:    0,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"operation": &schema.Schema{
													Type:         schema.TypeString,
													Default:      "count",
													Required:     false,
													Optional:     true,
													Sensitive:    false,
													ForceNew:     false,
													WriteOnly:    false,
													Description:  "Value must be one of `count`, `sum`, `average`.",
													ValidateFunc: validation.StringInSlice([]string{"count", "sum", "average"}, false),
												},

												"key": &schema.Schema{
													Type:        schema.TypeString,
													Computed:    true,
													Required:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													WriteOnly:   false,
													Description: "",
												},

												"cumulative": &schema.Schema{
													Type:        schema.TypeBool,
													Computed:    true,
													Required:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													WriteOnly:   false,
													Description: "Value must be one of true or false",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"position": &schema.Schema{
				Type:        schema.TypeList,
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				WriteOnly:   false,
				Description: "",
				MinItems:    0,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"x": &schema.Schema{
							Type:        schema.TypeFloat,
							Computed:    true,
							Required:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							WriteOnly:   false,
							Description: "",
						},

						"y": &schema.Schema{
							Type:        schema.TypeFloat,
							Computed:    true,
							Required:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							WriteOnly:   false,
							Description: "",
						},

						"w": &schema.Schema{
							Type:        schema.TypeFloat,
							Computed:    true,
							Required:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							WriteOnly:   false,
							Description: "",
						},

						"h": &schema.Schema{
							Type:        schema.TypeFloat,
							Computed:    true,
							Required:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							WriteOnly:   false,
							Description: "",
						},
					},
				},
			},
		},
	}
}

func resourceDashboardPanelCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)

	tflog.Trace(ctx, fmt.Sprintf("Creating DashboardPanel"))

	s := &client.DashboardPanel{}

	if value, ok := d.GetOkExists("dashboard_id"); ok {
		s.DashboardId = value.(string)
	}

	if value, ok := d.GetOkExists("name"); ok {
		s.Name = value.(string)
	}

	if value, ok := d.GetOkExists("params"); ok {
		flattened, err := converter.Flatten(value, resourceDashboardPanel().Schema["params"])
		if err != nil {
			return diag.Errorf("Error flattening params: %s", err.Error())
		}

		if flattened, ok := flattened.(map[string]any); ok {
			s.Params = flattened
		}
	}

	if value, ok := d.GetOkExists("position"); ok {
		flattened, err := converter.Flatten(value, resourceDashboardPanel().Schema["position"])
		if err != nil {
			return diag.Errorf("Error flattening position: %s", err.Error())
		}

		if flattened, ok := flattened.(map[string]any); ok {
			s.Position = flattened
		}
	}

	res, err := c.CreateDashboardPanel(s)
	if err != nil {
		return diag.Errorf("Error creating dashboard_panel: %s", err.Error())
	}

	d.SetId(res.ID)
	tflog.Trace(ctx, fmt.Sprintf("created a dashboard_panel resource: %s", d.Id()))

	return resourceDashboardPanelRead(ctx, d, meta)
}

func resourceDashboardPanelRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Reading DashboardPanel: %s", d.Id()))

	item, err := c.GetDashboardPanel(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("DashboardPanel (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}

		return diag.Errorf("Error reading dashboard_panel: %s", d.Id())
	}

	d.Set("dashboard_id", item.DashboardId)

	d.Set("name", item.Name)

	if v, err := converter.Expand(item.Params, resourceDashboardPanel().Schema["params"]); err == nil {
		d.Set("params", v)
	} else {
		return diag.Errorf("Error expanding params: %s", err.Error())
	}

	if v, err := converter.Expand(item.Position, resourceDashboardPanel().Schema["position"]); err == nil {
		d.Set("position", v)
	} else {
		return diag.Errorf("Error expanding position: %s", err.Error())
	}

	return nil
}

func resourceDashboardPanelUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Updating DashboardPanel: %s", d.Id()))

	s := &client.DashboardPanel{}

	if d.HasChange("dashboard_id") {
		s.DashboardId = d.Get("dashboard_id").(string)
	}

	if d.HasChange("name") {
		s.Name = d.Get("name").(string)
	}

	if d.HasChange("params") {
		flattened, err := converter.Flatten(d.Get("params"), resourceDashboardPanel().Schema["params"])
		if err != nil {
			return diag.Errorf("Error flattening params: %s", err.Error())
		}

		if flattened, ok := flattened.(map[string]any); ok {
			s.Params = flattened
		}
	}

	if d.HasChange("position") {
		flattened, err := converter.Flatten(d.Get("position"), resourceDashboardPanel().Schema["position"])
		if err != nil {
			return diag.Errorf("Error flattening position: %s", err.Error())
		}

		if flattened, ok := flattened.(map[string]any); ok {
			s.Position = flattened
		}
	}

	_, err := c.UpdateDashboardPanel(d.Id(), s)
	if err != nil {
		return diag.Errorf("Error updating dashboard_panel: %s", err.Error())
	}

	return resourceDashboardPanelRead(ctx, d, meta)
}

func resourceDashboardPanelDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	tflog.Trace(ctx, fmt.Sprintf("Deleting DashboardPanel: %s", d.Id()))

	err := c.DeleteDashboardPanel(d.Id())
	if err != nil {
		// In the case of a NotFoundError, it means the resource may have been removed upstream.
		// We just remove it from the state.
		if errors.Is(err, client.NewNotFoundError("")) && !d.IsNewResource() {
			tflog.Warn(ctx, fmt.Sprintf("DashboardPanel (%s) not found, removing from state", d.Id()))
			d.SetId("")
			return nil
		}
		return diag.Errorf("Error deleting dashboard_panel: %s", err.Error())
	}

	d.SetId("")

	return nil
}
