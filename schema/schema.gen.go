// Package rootly provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package rootly

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Bearer_authScopes = "bearer_auth.Scopes"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemCondition.
const (
	ActionItemTriggerParamsIncidentActionItemConditionALL ActionItemTriggerParamsIncidentActionItemCondition = "ALL"

	ActionItemTriggerParamsIncidentActionItemConditionANY ActionItemTriggerParamsIncidentActionItemCondition = "ANY"

	ActionItemTriggerParamsIncidentActionItemConditionNONE ActionItemTriggerParamsIncidentActionItemCondition = "NONE"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemConditionGroup.
const (
	ActionItemTriggerParamsIncidentActionItemConditionGroupANY ActionItemTriggerParamsIncidentActionItemConditionGroup = "ANY"

	ActionItemTriggerParamsIncidentActionItemConditionGroupIS ActionItemTriggerParamsIncidentActionItemConditionGroup = "IS"

	ActionItemTriggerParamsIncidentActionItemConditionGroupNONE ActionItemTriggerParamsIncidentActionItemConditionGroup = "NONE"

	ActionItemTriggerParamsIncidentActionItemConditionGroupSET ActionItemTriggerParamsIncidentActionItemConditionGroup = "SET"

	ActionItemTriggerParamsIncidentActionItemConditionGroupUNSET ActionItemTriggerParamsIncidentActionItemConditionGroup = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemConditionKind.
const (
	ActionItemTriggerParamsIncidentActionItemConditionKindANY ActionItemTriggerParamsIncidentActionItemConditionKind = "ANY"

	ActionItemTriggerParamsIncidentActionItemConditionKindIS ActionItemTriggerParamsIncidentActionItemConditionKind = "IS"

	ActionItemTriggerParamsIncidentActionItemConditionKindNONE ActionItemTriggerParamsIncidentActionItemConditionKind = "NONE"

	ActionItemTriggerParamsIncidentActionItemConditionKindSET ActionItemTriggerParamsIncidentActionItemConditionKind = "SET"

	ActionItemTriggerParamsIncidentActionItemConditionKindUNSET ActionItemTriggerParamsIncidentActionItemConditionKind = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemConditionPriority.
const (
	ActionItemTriggerParamsIncidentActionItemConditionPriorityANY ActionItemTriggerParamsIncidentActionItemConditionPriority = "ANY"

	ActionItemTriggerParamsIncidentActionItemConditionPriorityIS ActionItemTriggerParamsIncidentActionItemConditionPriority = "IS"

	ActionItemTriggerParamsIncidentActionItemConditionPriorityNONE ActionItemTriggerParamsIncidentActionItemConditionPriority = "NONE"

	ActionItemTriggerParamsIncidentActionItemConditionPrioritySET ActionItemTriggerParamsIncidentActionItemConditionPriority = "SET"

	ActionItemTriggerParamsIncidentActionItemConditionPriorityUNSET ActionItemTriggerParamsIncidentActionItemConditionPriority = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemConditionStatus.
const (
	ActionItemTriggerParamsIncidentActionItemConditionStatusANY ActionItemTriggerParamsIncidentActionItemConditionStatus = "ANY"

	ActionItemTriggerParamsIncidentActionItemConditionStatusIS ActionItemTriggerParamsIncidentActionItemConditionStatus = "IS"

	ActionItemTriggerParamsIncidentActionItemConditionStatusNONE ActionItemTriggerParamsIncidentActionItemConditionStatus = "NONE"

	ActionItemTriggerParamsIncidentActionItemConditionStatusSET ActionItemTriggerParamsIncidentActionItemConditionStatus = "SET"

	ActionItemTriggerParamsIncidentActionItemConditionStatusUNSET ActionItemTriggerParamsIncidentActionItemConditionStatus = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemKinds.
const (
	ActionItemTriggerParamsIncidentActionItemKindsFollowUp ActionItemTriggerParamsIncidentActionItemKinds = "follow_up"

	ActionItemTriggerParamsIncidentActionItemKindsTask ActionItemTriggerParamsIncidentActionItemKinds = "task"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemPriorities.
const (
	ActionItemTriggerParamsIncidentActionItemPrioritiesHigh ActionItemTriggerParamsIncidentActionItemPriorities = "high"

	ActionItemTriggerParamsIncidentActionItemPrioritiesLow ActionItemTriggerParamsIncidentActionItemPriorities = "low"

	ActionItemTriggerParamsIncidentActionItemPrioritiesMedium ActionItemTriggerParamsIncidentActionItemPriorities = "medium"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemStatuses.
const (
	ActionItemTriggerParamsIncidentActionItemStatusesCancelled ActionItemTriggerParamsIncidentActionItemStatuses = "cancelled"

	ActionItemTriggerParamsIncidentActionItemStatusesDone ActionItemTriggerParamsIncidentActionItemStatuses = "done"

	ActionItemTriggerParamsIncidentActionItemStatusesInProgress ActionItemTriggerParamsIncidentActionItemStatuses = "in_progress"

	ActionItemTriggerParamsIncidentActionItemStatusesOpen ActionItemTriggerParamsIncidentActionItemStatuses = "open"
)

// Defines values for ActionItemTriggerParamsIncidentCondition.
const (
	ActionItemTriggerParamsIncidentConditionALL ActionItemTriggerParamsIncidentCondition = "ALL"

	ActionItemTriggerParamsIncidentConditionANY ActionItemTriggerParamsIncidentCondition = "ANY"

	ActionItemTriggerParamsIncidentConditionNONE ActionItemTriggerParamsIncidentCondition = "NONE"
)

// Defines values for ActionItemTriggerParamsIncidentConditionEnvironment.
const (
	ActionItemTriggerParamsIncidentConditionEnvironmentANY ActionItemTriggerParamsIncidentConditionEnvironment = "ANY"

	ActionItemTriggerParamsIncidentConditionEnvironmentIS ActionItemTriggerParamsIncidentConditionEnvironment = "IS"

	ActionItemTriggerParamsIncidentConditionEnvironmentNONE ActionItemTriggerParamsIncidentConditionEnvironment = "NONE"

	ActionItemTriggerParamsIncidentConditionEnvironmentSET ActionItemTriggerParamsIncidentConditionEnvironment = "SET"

	ActionItemTriggerParamsIncidentConditionEnvironmentUNSET ActionItemTriggerParamsIncidentConditionEnvironment = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionFunctionality.
const (
	ActionItemTriggerParamsIncidentConditionFunctionalityANY ActionItemTriggerParamsIncidentConditionFunctionality = "ANY"

	ActionItemTriggerParamsIncidentConditionFunctionalityIS ActionItemTriggerParamsIncidentConditionFunctionality = "IS"

	ActionItemTriggerParamsIncidentConditionFunctionalityNONE ActionItemTriggerParamsIncidentConditionFunctionality = "NONE"

	ActionItemTriggerParamsIncidentConditionFunctionalitySET ActionItemTriggerParamsIncidentConditionFunctionality = "SET"

	ActionItemTriggerParamsIncidentConditionFunctionalityUNSET ActionItemTriggerParamsIncidentConditionFunctionality = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionGroup.
const (
	ActionItemTriggerParamsIncidentConditionGroupANY ActionItemTriggerParamsIncidentConditionGroup = "ANY"

	ActionItemTriggerParamsIncidentConditionGroupIS ActionItemTriggerParamsIncidentConditionGroup = "IS"

	ActionItemTriggerParamsIncidentConditionGroupNONE ActionItemTriggerParamsIncidentConditionGroup = "NONE"

	ActionItemTriggerParamsIncidentConditionGroupSET ActionItemTriggerParamsIncidentConditionGroup = "SET"

	ActionItemTriggerParamsIncidentConditionGroupUNSET ActionItemTriggerParamsIncidentConditionGroup = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionIncidentType.
const (
	ActionItemTriggerParamsIncidentConditionIncidentTypeANY ActionItemTriggerParamsIncidentConditionIncidentType = "ANY"

	ActionItemTriggerParamsIncidentConditionIncidentTypeIS ActionItemTriggerParamsIncidentConditionIncidentType = "IS"

	ActionItemTriggerParamsIncidentConditionIncidentTypeNONE ActionItemTriggerParamsIncidentConditionIncidentType = "NONE"

	ActionItemTriggerParamsIncidentConditionIncidentTypeSET ActionItemTriggerParamsIncidentConditionIncidentType = "SET"

	ActionItemTriggerParamsIncidentConditionIncidentTypeUNSET ActionItemTriggerParamsIncidentConditionIncidentType = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionKind.
const (
	ActionItemTriggerParamsIncidentConditionKindANY ActionItemTriggerParamsIncidentConditionKind = "ANY"

	ActionItemTriggerParamsIncidentConditionKindIS ActionItemTriggerParamsIncidentConditionKind = "IS"

	ActionItemTriggerParamsIncidentConditionKindNONE ActionItemTriggerParamsIncidentConditionKind = "NONE"

	ActionItemTriggerParamsIncidentConditionKindSET ActionItemTriggerParamsIncidentConditionKind = "SET"

	ActionItemTriggerParamsIncidentConditionKindUNSET ActionItemTriggerParamsIncidentConditionKind = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionService.
const (
	ActionItemTriggerParamsIncidentConditionServiceANY ActionItemTriggerParamsIncidentConditionService = "ANY"

	ActionItemTriggerParamsIncidentConditionServiceIS ActionItemTriggerParamsIncidentConditionService = "IS"

	ActionItemTriggerParamsIncidentConditionServiceNONE ActionItemTriggerParamsIncidentConditionService = "NONE"

	ActionItemTriggerParamsIncidentConditionServiceSET ActionItemTriggerParamsIncidentConditionService = "SET"

	ActionItemTriggerParamsIncidentConditionServiceUNSET ActionItemTriggerParamsIncidentConditionService = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionSeverity.
const (
	ActionItemTriggerParamsIncidentConditionSeverityANY ActionItemTriggerParamsIncidentConditionSeverity = "ANY"

	ActionItemTriggerParamsIncidentConditionSeverityIS ActionItemTriggerParamsIncidentConditionSeverity = "IS"

	ActionItemTriggerParamsIncidentConditionSeverityNONE ActionItemTriggerParamsIncidentConditionSeverity = "NONE"

	ActionItemTriggerParamsIncidentConditionSeveritySET ActionItemTriggerParamsIncidentConditionSeverity = "SET"

	ActionItemTriggerParamsIncidentConditionSeverityUNSET ActionItemTriggerParamsIncidentConditionSeverity = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionStatus.
const (
	ActionItemTriggerParamsIncidentConditionStatusANY ActionItemTriggerParamsIncidentConditionStatus = "ANY"

	ActionItemTriggerParamsIncidentConditionStatusIS ActionItemTriggerParamsIncidentConditionStatus = "IS"

	ActionItemTriggerParamsIncidentConditionStatusNONE ActionItemTriggerParamsIncidentConditionStatus = "NONE"

	ActionItemTriggerParamsIncidentConditionStatusSET ActionItemTriggerParamsIncidentConditionStatus = "SET"

	ActionItemTriggerParamsIncidentConditionStatusUNSET ActionItemTriggerParamsIncidentConditionStatus = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionVisibility.
const (
	ActionItemTriggerParamsIncidentConditionVisibilityANY ActionItemTriggerParamsIncidentConditionVisibility = "ANY"

	ActionItemTriggerParamsIncidentConditionVisibilityIS ActionItemTriggerParamsIncidentConditionVisibility = "IS"

	ActionItemTriggerParamsIncidentConditionVisibilityNONE ActionItemTriggerParamsIncidentConditionVisibility = "NONE"

	ActionItemTriggerParamsIncidentConditionVisibilitySET ActionItemTriggerParamsIncidentConditionVisibility = "SET"

	ActionItemTriggerParamsIncidentConditionVisibilityUNSET ActionItemTriggerParamsIncidentConditionVisibility = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentKinds.
const (
	ActionItemTriggerParamsIncidentKindsExample ActionItemTriggerParamsIncidentKinds = "example"

	ActionItemTriggerParamsIncidentKindsNormal ActionItemTriggerParamsIncidentKinds = "normal"

	ActionItemTriggerParamsIncidentKindsScheduled ActionItemTriggerParamsIncidentKinds = "scheduled"

	ActionItemTriggerParamsIncidentKindsTest ActionItemTriggerParamsIncidentKinds = "test"
)

// Defines values for ActionItemTriggerParamsIncidentStatuses.
const (
	ActionItemTriggerParamsIncidentStatusesAcknowledged ActionItemTriggerParamsIncidentStatuses = "acknowledged"

	ActionItemTriggerParamsIncidentStatusesCancelled ActionItemTriggerParamsIncidentStatuses = "cancelled"

	ActionItemTriggerParamsIncidentStatusesCompleted ActionItemTriggerParamsIncidentStatuses = "completed"

	ActionItemTriggerParamsIncidentStatusesDetected ActionItemTriggerParamsIncidentStatuses = "detected"

	ActionItemTriggerParamsIncidentStatusesInProgress ActionItemTriggerParamsIncidentStatuses = "in_progress"

	ActionItemTriggerParamsIncidentStatusesMitigated ActionItemTriggerParamsIncidentStatuses = "mitigated"

	ActionItemTriggerParamsIncidentStatusesResolved ActionItemTriggerParamsIncidentStatuses = "resolved"

	ActionItemTriggerParamsIncidentStatusesScheduled ActionItemTriggerParamsIncidentStatuses = "scheduled"

	ActionItemTriggerParamsIncidentStatusesStarted ActionItemTriggerParamsIncidentStatuses = "started"
)

// Defines values for ActionItemTriggerParamsTriggerType.
const (
	ActionItemTriggerParamsTriggerTypeActionItem ActionItemTriggerParamsTriggerType = "action_item"
)

// Defines values for ActionItemTriggerParamsTriggers.
const (
	ActionItemTriggerParamsTriggersActionItemCreated ActionItemTriggerParamsTriggers = "action_item_created"

	ActionItemTriggerParamsTriggersActionItemUpdated ActionItemTriggerParamsTriggers = "action_item_updated"

	ActionItemTriggerParamsTriggersAssignedUserUpdated ActionItemTriggerParamsTriggers = "assigned_user_updated"

	ActionItemTriggerParamsTriggersDescriptionUpdated ActionItemTriggerParamsTriggers = "description_updated"

	ActionItemTriggerParamsTriggersPriorityUpdated ActionItemTriggerParamsTriggers = "priority_updated"

	ActionItemTriggerParamsTriggersSlackCommand ActionItemTriggerParamsTriggers = "slack_command"

	ActionItemTriggerParamsTriggersStatusUpdated ActionItemTriggerParamsTriggers = "status_updated"

	ActionItemTriggerParamsTriggersSummaryUpdated ActionItemTriggerParamsTriggers = "summary_updated"

	ActionItemTriggerParamsTriggersTeamsUpdated ActionItemTriggerParamsTriggers = "teams_updated"
)

// Defines values for AddActionItemTaskParamsPriority.
const (
	AddActionItemTaskParamsPriorityHigh AddActionItemTaskParamsPriority = "high"

	AddActionItemTaskParamsPriorityLow AddActionItemTaskParamsPriority = "low"

	AddActionItemTaskParamsPriorityMedium AddActionItemTaskParamsPriority = "medium"
)

// Defines values for AddActionItemTaskParamsStatus.
const (
	AddActionItemTaskParamsStatusCancelled AddActionItemTaskParamsStatus = "cancelled"

	AddActionItemTaskParamsStatusDone AddActionItemTaskParamsStatus = "done"

	AddActionItemTaskParamsStatusInProgress AddActionItemTaskParamsStatus = "in_progress"

	AddActionItemTaskParamsStatusOpen AddActionItemTaskParamsStatus = "open"
)

// Defines values for AddActionItemTaskParamsTaskType.
const (
	AddActionItemTaskParamsTaskTypeAddActionItem AddActionItemTaskParamsTaskType = "add_action_item"
)

// Defines values for AddRoleTaskParamsTaskType.
const (
	AddRoleTaskParamsTaskTypeAddRole AddRoleTaskParamsTaskType = "add_role"
)

// Defines values for AddTeamTaskParamsTaskType.
const (
	AddTeamTaskParamsTaskTypeAddTeam AddTeamTaskParamsTaskType = "add_team"
)

// Defines values for AddToTimelineTaskParamsTaskType.
const (
	AddToTimelineTaskParamsTaskTypeAddToTimeline AddToTimelineTaskParamsTaskType = "add_to_timeline"
)

// Defines values for AlertSource.
const (
	AlertSourceAsana AlertSource = "asana"

	AlertSourceDatadog AlertSource = "datadog"

	AlertSourceJira AlertSource = "jira"

	AlertSourceNobl9 AlertSource = "nobl9"

	AlertSourceOpsgenie AlertSource = "opsgenie"

	AlertSourcePagerduty AlertSource = "pagerduty"

	AlertSourceVictorops AlertSource = "victorops"

	AlertSourceZendesk AlertSource = "zendesk"
)

// Defines values for AlertListDataSource.
const (
	AlertListDataSourceAsana AlertListDataSource = "asana"

	AlertListDataSourceDatadog AlertListDataSource = "datadog"

	AlertListDataSourceJira AlertListDataSource = "jira"

	AlertListDataSourceNobl9 AlertListDataSource = "nobl9"

	AlertListDataSourceOpsgenie AlertListDataSource = "opsgenie"

	AlertListDataSourcePagerduty AlertListDataSource = "pagerduty"

	AlertListDataSourceVictorops AlertListDataSource = "victorops"

	AlertListDataSourceZendesk AlertListDataSource = "zendesk"
)

// Defines values for AlertListDataType.
const (
	AlertListDataTypeAlerts AlertListDataType = "alerts"
)

// Defines values for AlertResponseDataSource.
const (
	AlertResponseDataSourceAsana AlertResponseDataSource = "asana"

	AlertResponseDataSourceDatadog AlertResponseDataSource = "datadog"

	AlertResponseDataSourceJira AlertResponseDataSource = "jira"

	AlertResponseDataSourceNobl9 AlertResponseDataSource = "nobl9"

	AlertResponseDataSourceOpsgenie AlertResponseDataSource = "opsgenie"

	AlertResponseDataSourcePagerduty AlertResponseDataSource = "pagerduty"

	AlertResponseDataSourceVictorops AlertResponseDataSource = "victorops"

	AlertResponseDataSourceZendesk AlertResponseDataSource = "zendesk"
)

// Defines values for AlertResponseDataType.
const (
	AlertResponseDataTypeAlerts AlertResponseDataType = "alerts"
)

// Defines values for AlertTriggerParamsAlertCondition.
const (
	AlertTriggerParamsAlertConditionALL AlertTriggerParamsAlertCondition = "ALL"

	AlertTriggerParamsAlertConditionANY AlertTriggerParamsAlertCondition = "ANY"

	AlertTriggerParamsAlertConditionNONE AlertTriggerParamsAlertCondition = "NONE"
)

// Defines values for AlertTriggerParamsAlertConditionLabel.
const (
	AlertTriggerParamsAlertConditionLabelANY AlertTriggerParamsAlertConditionLabel = "ANY"

	AlertTriggerParamsAlertConditionLabelIS AlertTriggerParamsAlertConditionLabel = "IS"

	AlertTriggerParamsAlertConditionLabelNONE AlertTriggerParamsAlertConditionLabel = "NONE"

	AlertTriggerParamsAlertConditionLabelSET AlertTriggerParamsAlertConditionLabel = "SET"

	AlertTriggerParamsAlertConditionLabelUNSET AlertTriggerParamsAlertConditionLabel = "UNSET"
)

// Defines values for AlertTriggerParamsAlertConditionPayload.
const (
	AlertTriggerParamsAlertConditionPayloadANY AlertTriggerParamsAlertConditionPayload = "ANY"

	AlertTriggerParamsAlertConditionPayloadIS AlertTriggerParamsAlertConditionPayload = "IS"

	AlertTriggerParamsAlertConditionPayloadNONE AlertTriggerParamsAlertConditionPayload = "NONE"

	AlertTriggerParamsAlertConditionPayloadSET AlertTriggerParamsAlertConditionPayload = "SET"

	AlertTriggerParamsAlertConditionPayloadUNSET AlertTriggerParamsAlertConditionPayload = "UNSET"
)

// Defines values for AlertTriggerParamsAlertConditionSource.
const (
	AlertTriggerParamsAlertConditionSourceANY AlertTriggerParamsAlertConditionSource = "ANY"

	AlertTriggerParamsAlertConditionSourceIS AlertTriggerParamsAlertConditionSource = "IS"

	AlertTriggerParamsAlertConditionSourceNONE AlertTriggerParamsAlertConditionSource = "NONE"

	AlertTriggerParamsAlertConditionSourceSET AlertTriggerParamsAlertConditionSource = "SET"

	AlertTriggerParamsAlertConditionSourceUNSET AlertTriggerParamsAlertConditionSource = "UNSET"
)

// Defines values for AlertTriggerParamsTriggerType.
const (
	AlertTriggerParamsTriggerTypeAlert AlertTriggerParamsTriggerType = "alert"
)

// Defines values for AlertTriggerParamsTriggers.
const (
	AlertTriggerParamsTriggersAlertCreated AlertTriggerParamsTriggers = "alert_created"
)

// Defines values for ArchiveSlackChannelsTaskParamsTaskType.
const (
	ArchiveSlackChannelsTaskParamsTaskTypeArchiveSlackChannels ArchiveSlackChannelsTaskParamsTaskType = "archive_slack_channels"
)

// Defines values for AttachDatadogDashboardsTaskParamsTaskType.
const (
	AttachDatadogDashboardsTaskParamsTaskTypeAttachDatadogDashboards AttachDatadogDashboardsTaskParamsTaskType = "attach_datadog_dashboards"
)

// Defines values for AutoAssignRoleOpsgenieTaskParamsTaskType.
const (
	AutoAssignRoleOpsgenieTaskParamsTaskTypeAutoAssignRoleOpsgenie AutoAssignRoleOpsgenieTaskParamsTaskType = "auto_assign_role_opsgenie"
)

// Defines values for AutoAssignRoleVictorOpsTaskParamsTaskType.
const (
	AutoAssignRoleVictorOpsTaskParamsTaskTypeAutoAssignRoleVictorOps AutoAssignRoleVictorOpsTaskParamsTaskType = "auto_assign_role_victor_ops"
)

// Defines values for CallPeopleTaskParamsTaskType.
const (
	CallPeopleTaskParamsTaskTypeCallPeople CallPeopleTaskParamsTaskType = "call_people"
)

// Defines values for CancelIncidentDataType.
const (
	CancelIncidentDataTypeIncidents CancelIncidentDataType = "incidents"
)

// Defines values for CauseListDataType.
const (
	CauseListDataTypeCauses CauseListDataType = "causes"
)

// Defines values for CauseResponseDataType.
const (
	CauseResponseDataTypeCauses CauseResponseDataType = "causes"
)

// Defines values for CreateAirtableTableRecordTaskParamsTaskType.
const (
	CreateAirtableTableRecordTaskParamsTaskTypeCreateAirtableTableRecord CreateAirtableTableRecordTaskParamsTaskType = "create_airtable_table_record"
)

// Defines values for CreateAsanaSubtaskTaskParamsTaskType.
const (
	CreateAsanaSubtaskTaskParamsTaskTypeCreateAsanaSubtask CreateAsanaSubtaskTaskParamsTaskType = "create_asana_subtask"
)

// Defines values for CreateAsanaTaskTaskParamsTaskType.
const (
	CreateAsanaTaskTaskParamsTaskTypeCreateAsanaTask CreateAsanaTaskTaskParamsTaskType = "create_asana_task"
)

// Defines values for CreateConfluencePageTaskParamsTaskType.
const (
	CreateConfluencePageTaskParamsTaskTypeCreateConfluencePage CreateConfluencePageTaskParamsTaskType = "create_confluence_page"
)

// Defines values for CreateDatadogNotebookTaskParamsKind.
const (
	CreateDatadogNotebookTaskParamsKindDocumentation CreateDatadogNotebookTaskParamsKind = "documentation"

	CreateDatadogNotebookTaskParamsKindInvestigation CreateDatadogNotebookTaskParamsKind = "investigation"

	CreateDatadogNotebookTaskParamsKindPostmortem CreateDatadogNotebookTaskParamsKind = "postmortem"

	CreateDatadogNotebookTaskParamsKindReport CreateDatadogNotebookTaskParamsKind = "report"

	CreateDatadogNotebookTaskParamsKindRunbook CreateDatadogNotebookTaskParamsKind = "runbook"
)

// Defines values for CreateDatadogNotebookTaskParamsTaskType.
const (
	CreateDatadogNotebookTaskParamsTaskTypeCreateDatadogNotebook CreateDatadogNotebookTaskParamsTaskType = "create_datadog_notebook"
)

// Defines values for CreateDropboxPaperPageTaskParamsTaskType.
const (
	CreateDropboxPaperPageTaskParamsTaskTypeCreateDropboxPaperPage CreateDropboxPaperPageTaskParamsTaskType = "create_dropbox_paper_page"
)

// Defines values for CreateGithubIssueTaskParamsTaskType.
const (
	CreateGithubIssueTaskParamsTaskTypeCreateGithubIssue CreateGithubIssueTaskParamsTaskType = "create_github_issue"
)

// Defines values for CreateGoogleCalendarEventTaskParamsTaskType.
const (
	CreateGoogleCalendarEventTaskParamsTaskTypeCreateGoogleCalendarEvent CreateGoogleCalendarEventTaskParamsTaskType = "create_google_calendar_event"
)

// Defines values for CreateGoogleDocsPageTaskParamsTaskType.
const (
	CreateGoogleDocsPageTaskParamsTaskTypeCreateGoogleDocsPage CreateGoogleDocsPageTaskParamsTaskType = "create_google_docs_page"
)

// Defines values for CreateGoogleMeetingTaskParamsTaskType.
const (
	CreateGoogleMeetingTaskParamsTaskTypeCreateGoogleMeeting CreateGoogleMeetingTaskParamsTaskType = "create_google_meeting"
)

// Defines values for CreateIncidentTaskParamsTaskType.
const (
	CreateIncidentTaskParamsTaskTypeCreateIncident CreateIncidentTaskParamsTaskType = "create_incident"
)

// Defines values for CreateJiraIssueTaskParamsTaskType.
const (
	CreateJiraIssueTaskParamsTaskTypeCreateJiraIssue CreateJiraIssueTaskParamsTaskType = "create_jira_issue"
)

// Defines values for CreateJiraSubtaskTaskParamsTaskType.
const (
	CreateJiraSubtaskTaskParamsTaskTypeCreateJiraSubtask CreateJiraSubtaskTaskParamsTaskType = "create_jira_subtask"
)

// Defines values for CreateLinearIssueTaskParamsTaskType.
const (
	CreateLinearIssueTaskParamsTaskTypeCreateLinearIssue CreateLinearIssueTaskParamsTaskType = "create_linear_issue"
)

// Defines values for CreateLinearSubtaskIssueTaskParamsTaskType.
const (
	CreateLinearSubtaskIssueTaskParamsTaskTypeCreateLinearSubtaskIssue CreateLinearSubtaskIssueTaskParamsTaskType = "create_linear_subtask_issue"
)

// Defines values for CreateMicrosoftTeamsMeetingTaskParamsTaskType.
const (
	CreateMicrosoftTeamsMeetingTaskParamsTaskTypeCreateMicrosoftTeamsMeeting CreateMicrosoftTeamsMeetingTaskParamsTaskType = "create_microsoft_teams_meeting"
)

// Defines values for CreateNotionPageTaskParamsTaskType.
const (
	CreateNotionPageTaskParamsTaskTypeCreateNotionPage CreateNotionPageTaskParamsTaskType = "create_notion_page"
)

// Defines values for CreateServiceNowIncidentTaskParamsTaskType.
const (
	CreateServiceNowIncidentTaskParamsTaskTypeCreateServiceNowIncident CreateServiceNowIncidentTaskParamsTaskType = "create_service_now_incident"
)

// Defines values for CreateShortcutStoryTaskParamsKind.
const (
	CreateShortcutStoryTaskParamsKindBug CreateShortcutStoryTaskParamsKind = "bug"

	CreateShortcutStoryTaskParamsKindChore CreateShortcutStoryTaskParamsKind = "chore"

	CreateShortcutStoryTaskParamsKindFeature CreateShortcutStoryTaskParamsKind = "feature"
)

// Defines values for CreateShortcutStoryTaskParamsTaskType.
const (
	CreateShortcutStoryTaskParamsTaskTypeCreateShortcutStory CreateShortcutStoryTaskParamsTaskType = "create_shortcut_story"
)

// Defines values for CreateShortcutTaskTaskParamsTaskType.
const (
	CreateShortcutTaskTaskParamsTaskTypeCreateShortcutTask CreateShortcutTaskTaskParamsTaskType = "create_shortcut_task"
)

// Defines values for CreateTrelloCardTaskParamsTaskType.
const (
	CreateTrelloCardTaskParamsTaskTypeCreateTrelloCard CreateTrelloCardTaskParamsTaskType = "create_trello_card"
)

// Defines values for CreateWebexMeetingTaskParamsTaskType.
const (
	CreateWebexMeetingTaskParamsTaskTypeCreateWebexMeeting CreateWebexMeetingTaskParamsTaskType = "create_webex_meeting"
)

// Defines values for CreateZendeskTicketTaskParamsKind.
const (
	CreateZendeskTicketTaskParamsKindIncident CreateZendeskTicketTaskParamsKind = "incident"

	CreateZendeskTicketTaskParamsKindProblem CreateZendeskTicketTaskParamsKind = "problem"

	CreateZendeskTicketTaskParamsKindQuestion CreateZendeskTicketTaskParamsKind = "question"

	CreateZendeskTicketTaskParamsKindTask CreateZendeskTicketTaskParamsKind = "task"
)

// Defines values for CreateZendeskTicketTaskParamsTaskType.
const (
	CreateZendeskTicketTaskParamsTaskTypeCreateZendeskTicket CreateZendeskTicketTaskParamsTaskType = "create_zendesk_ticket"
)

// Defines values for CreateZoomMeetingTaskParamsAutoRecording.
const (
	CreateZoomMeetingTaskParamsAutoRecordingCloud CreateZoomMeetingTaskParamsAutoRecording = "cloud"

	CreateZoomMeetingTaskParamsAutoRecordingLocal CreateZoomMeetingTaskParamsAutoRecording = "local"

	CreateZoomMeetingTaskParamsAutoRecordingNone CreateZoomMeetingTaskParamsAutoRecording = "none"
)

// Defines values for CreateZoomMeetingTaskParamsTaskType.
const (
	CreateZoomMeetingTaskParamsTaskTypeCreateZoomMeeting CreateZoomMeetingTaskParamsTaskType = "create_zoom_meeting"
)

// Defines values for CustomFieldRequired.
const (
	CustomFieldRequiredIncidentForm CustomFieldRequired = "incident_form"

	CustomFieldRequiredIncidentMitigationForm CustomFieldRequired = "incident_mitigation_form"

	CustomFieldRequiredIncidentMitigationSlackForm CustomFieldRequired = "incident_mitigation_slack_form"

	CustomFieldRequiredIncidentPostMortemForm CustomFieldRequired = "incident_post_mortem_form"

	CustomFieldRequiredIncidentResolutionForm CustomFieldRequired = "incident_resolution_form"

	CustomFieldRequiredIncidentResolutionSlackForm CustomFieldRequired = "incident_resolution_slack_form"

	CustomFieldRequiredIncidentSlackForm CustomFieldRequired = "incident_slack_form"
)

// Defines values for CustomFieldShown.
const (
	CustomFieldShownIncidentForm CustomFieldShown = "incident_form"

	CustomFieldShownIncidentMitigationForm CustomFieldShown = "incident_mitigation_form"

	CustomFieldShownIncidentMitigationSlackForm CustomFieldShown = "incident_mitigation_slack_form"

	CustomFieldShownIncidentPostMortem CustomFieldShown = "incident_post_mortem"

	CustomFieldShownIncidentPostMortemForm CustomFieldShown = "incident_post_mortem_form"

	CustomFieldShownIncidentResolutionForm CustomFieldShown = "incident_resolution_form"

	CustomFieldShownIncidentResolutionSlackForm CustomFieldShown = "incident_resolution_slack_form"

	CustomFieldShownIncidentSlackForm CustomFieldShown = "incident_slack_form"
)

// Defines values for CustomFieldListDataType.
const (
	CustomFieldListDataTypeCustomFields CustomFieldListDataType = "custom_fields"
)

// Defines values for CustomFieldOptionListDataType.
const (
	CustomFieldOptionListDataTypeCustomFieldOptions CustomFieldOptionListDataType = "custom_field_options"
)

// Defines values for CustomFieldOptionResponseDataType.
const (
	CustomFieldOptionResponseDataTypeCustomFieldOptions CustomFieldOptionResponseDataType = "custom_field_options"
)

// Defines values for CustomFieldResponseDataType.
const (
	CustomFieldResponseDataTypeCustomFields CustomFieldResponseDataType = "custom_fields"
)

// Defines values for DashboardOwner.
const (
	DashboardOwnerTeam DashboardOwner = "team"

	DashboardOwnerUser DashboardOwner = "user"
)

// Defines values for DashboardListDataType.
const (
	DashboardListDataTypeDashboards DashboardListDataType = "dashboards"
)

// Defines values for DashboardPanelParamsDatasetsAggregateOperation.
const (
	DashboardPanelParamsDatasetsAggregateOperationAverage DashboardPanelParamsDatasetsAggregateOperation = "average"

	DashboardPanelParamsDatasetsAggregateOperationCount DashboardPanelParamsDatasetsAggregateOperation = "count"

	DashboardPanelParamsDatasetsAggregateOperationSum DashboardPanelParamsDatasetsAggregateOperation = "sum"
)

// Defines values for DashboardPanelParamsDatasetsCollection.
const (
	DashboardPanelParamsDatasetsCollectionIncidentActionItems DashboardPanelParamsDatasetsCollection = "incident_action_items"

	DashboardPanelParamsDatasetsCollectionIncidentPostMortems DashboardPanelParamsDatasetsCollection = "incident_post_mortems"

	DashboardPanelParamsDatasetsCollectionIncidents DashboardPanelParamsDatasetsCollection = "incidents"
)

// Defines values for DashboardPanelParamsDatasetsFilterOperation.
const (
	DashboardPanelParamsDatasetsFilterOperationAnd DashboardPanelParamsDatasetsFilterOperation = "and"

	DashboardPanelParamsDatasetsFilterOperationOr DashboardPanelParamsDatasetsFilterOperation = "or"
)

// Defines values for DashboardPanelParamsDatasetsFilterRulesCondition.
const (
	DashboardPanelParamsDatasetsFilterRulesCondition string = "="

	DashboardPanelParamsDatasetsFilterRulesCondition1 string = "!="

	DashboardPanelParamsDatasetsFilterRulesCondition2 string = ">="

	DashboardPanelParamsDatasetsFilterRulesCondition3 string = "<="

	DashboardPanelParamsDatasetsFilterRulesConditionContains string = "contains"

	DashboardPanelParamsDatasetsFilterRulesConditionExists string = "exists"

	DashboardPanelParamsDatasetsFilterRulesConditionNotContains string = "not_contains"

	DashboardPanelParamsDatasetsFilterRulesConditionNotExists string = "not_exists"
)

// Defines values for DashboardPanelParamsDatasetsFilterRulesOperation.
const (
	DashboardPanelParamsDatasetsFilterRulesOperationAnd DashboardPanelParamsDatasetsFilterRulesOperation = "and"

	DashboardPanelParamsDatasetsFilterRulesOperationOr DashboardPanelParamsDatasetsFilterRulesOperation = "or"
)

// Defines values for DashboardPanelParamsDisplay.
const (
	DashboardPanelParamsDisplayAggregateValue DashboardPanelParamsDisplay = "aggregate_value"

	DashboardPanelParamsDisplayColumnChart DashboardPanelParamsDisplay = "column_chart"

	DashboardPanelParamsDisplayLineChart DashboardPanelParamsDisplay = "line_chart"

	DashboardPanelParamsDisplayLineSteppedChart DashboardPanelParamsDisplay = "line_stepped_chart"

	DashboardPanelParamsDisplayPieChart DashboardPanelParamsDisplay = "pie_chart"

	DashboardPanelParamsDisplayStackedColumnChart DashboardPanelParamsDisplay = "stacked_column_chart"

	DashboardPanelParamsDisplayTable DashboardPanelParamsDisplay = "table"
)

// Defines values for DashboardPanelListDataType.
const (
	DashboardPanelListDataTypeDashboardPanels DashboardPanelListDataType = "dashboard_panels"
)

// Defines values for DashboardPanelResponseDataType.
const (
	DashboardPanelResponseDataTypeDashboardPanels DashboardPanelResponseDataType = "dashboard_panels"
)

// Defines values for DashboardResponseDataType.
const (
	DashboardResponseDataTypeDashboards DashboardResponseDataType = "dashboards"
)

// Defines values for EnvironmentListDataType.
const (
	EnvironmentListDataTypeEnvironments EnvironmentListDataType = "environments"
)

// Defines values for EnvironmentResponseDataType.
const (
	EnvironmentResponseDataTypeEnvironments EnvironmentResponseDataType = "environments"
)

// Defines values for FunctionalityListDataType.
const (
	FunctionalityListDataTypeFunctionalities FunctionalityListDataType = "functionalities"
)

// Defines values for FunctionalityResponseDataType.
const (
	FunctionalityResponseDataTypeFunctionalities FunctionalityResponseDataType = "functionalities"
)

// Defines values for GetPulsesTaskParamsTaskType.
const (
	GetPulsesTaskParamsTaskTypeGetPulses GetPulsesTaskParamsTaskType = "get_pulses"
)

// Defines values for HttpClientTaskParamsMethod.
const (
	HttpClientTaskParamsMethodDELETE HttpClientTaskParamsMethod = "DELETE"

	HttpClientTaskParamsMethodGET HttpClientTaskParamsMethod = "GET"

	HttpClientTaskParamsMethodOPTIONS HttpClientTaskParamsMethod = "OPTIONS"

	HttpClientTaskParamsMethodPOST HttpClientTaskParamsMethod = "POST"

	HttpClientTaskParamsMethodPUT HttpClientTaskParamsMethod = "PUT"
)

// Defines values for HttpClientTaskParamsTaskType.
const (
	HttpClientTaskParamsTaskTypeHttpClient HttpClientTaskParamsTaskType = "http_client"
)

// Defines values for IncidentActionItemKind.
const (
	IncidentActionItemKindFollowUp IncidentActionItemKind = "follow_up"

	IncidentActionItemKindTask IncidentActionItemKind = "task"
)

// Defines values for IncidentActionItemPriority.
const (
	IncidentActionItemPriorityHigh IncidentActionItemPriority = "high"

	IncidentActionItemPriorityLow IncidentActionItemPriority = "low"

	IncidentActionItemPriorityMedium IncidentActionItemPriority = "medium"
)

// Defines values for IncidentActionItemStatus.
const (
	IncidentActionItemStatusCancelled IncidentActionItemStatus = "cancelled"

	IncidentActionItemStatusDone IncidentActionItemStatus = "done"

	IncidentActionItemStatusInProgress IncidentActionItemStatus = "in_progress"

	IncidentActionItemStatusOpen IncidentActionItemStatus = "open"
)

// Defines values for IncidentActionItemListDataType.
const (
	IncidentActionItemListDataTypeIncidentActionItems IncidentActionItemListDataType = "incident_action_items"
)

// Defines values for IncidentActionItemResponseDataType.
const (
	IncidentActionItemResponseDataTypeIncidentActionItems IncidentActionItemResponseDataType = "incident_action_items"
)

// Defines values for IncidentCustomFieldSelectionListDataType.
const (
	IncidentCustomFieldSelectionListDataTypeIncidentCustomFieldSelections IncidentCustomFieldSelectionListDataType = "incident_custom_field_selections"
)

// Defines values for IncidentCustomFieldSelectionResponseDataType.
const (
	IncidentCustomFieldSelectionResponseDataTypeIncidentCustomFieldSelections IncidentCustomFieldSelectionResponseDataType = "incident_custom_field_selections"
)

// Defines values for IncidentEventVisibility.
const (
	IncidentEventVisibilityExternal IncidentEventVisibility = "external"

	IncidentEventVisibilityInternal IncidentEventVisibility = "internal"
)

// Defines values for IncidentEventListDataType.
const (
	IncidentEventListDataTypeIncidentEvents IncidentEventListDataType = "incident_events"
)

// Defines values for IncidentEventResponseDataType.
const (
	IncidentEventResponseDataTypeIncidentEvents IncidentEventResponseDataType = "incident_events"
)

// Defines values for IncidentFeedbackRating.
const (
	IncidentFeedbackRatingN0 IncidentFeedbackRating = 0

	IncidentFeedbackRatingN1 IncidentFeedbackRating = 1

	IncidentFeedbackRatingN2 IncidentFeedbackRating = 2

	IncidentFeedbackRatingN3 IncidentFeedbackRating = 3

	IncidentFeedbackRatingN4 IncidentFeedbackRating = 4
)

// Defines values for IncidentFeedbackListDataType.
const (
	IncidentFeedbackListDataTypeIncidentFeedbacks IncidentFeedbackListDataType = "incident_feedbacks"
)

// Defines values for IncidentFeedbackResponseDataType.
const (
	IncidentFeedbackResponseDataTypeIncidentFeedbacks IncidentFeedbackResponseDataType = "incident_feedbacks"
)

// Defines values for IncidentListDataType.
const (
	IncidentListDataTypeIncidents IncidentListDataType = "incidents"
)

// Defines values for IncidentPostMortemStatus.
const (
	IncidentPostMortemStatusDraft IncidentPostMortemStatus = "draft"

	IncidentPostMortemStatusPublished IncidentPostMortemStatus = "published"
)

// Defines values for IncidentPostMortemListDataType.
const (
	IncidentPostMortemListDataTypeIncidentPostMortems IncidentPostMortemListDataType = "incident_post_mortems"
)

// Defines values for IncidentPostMortemResponseDataType.
const (
	IncidentPostMortemResponseDataTypeIncidentPostMortems IncidentPostMortemResponseDataType = "incident_post_mortems"
)

// Defines values for IncidentResponseDataType.
const (
	IncidentResponseDataTypeIncidents IncidentResponseDataType = "incidents"
)

// Defines values for IncidentRoleListDataType.
const (
	IncidentRoleListDataTypeIncidentRoles IncidentRoleListDataType = "incident_roles"
)

// Defines values for IncidentRoleResponseDataType.
const (
	IncidentRoleResponseDataTypeIncidentRoles IncidentRoleResponseDataType = "incident_roles"
)

// Defines values for IncidentRoleTaskPriority.
const (
	IncidentRoleTaskPriorityHigh IncidentRoleTaskPriority = "high"

	IncidentRoleTaskPriorityLow IncidentRoleTaskPriority = "low"

	IncidentRoleTaskPriorityMedium IncidentRoleTaskPriority = "medium"
)

// Defines values for IncidentRoleTaskListDataType.
const (
	IncidentRoleTaskListDataTypeIncidentRoleTasks IncidentRoleTaskListDataType = "incident_role_tasks"
)

// Defines values for IncidentRoleTaskResponseDataType.
const (
	IncidentRoleTaskResponseDataTypeIncidentRoleTasks IncidentRoleTaskResponseDataType = "incident_role_tasks"
)

// Defines values for IncidentStatusPageEventStatus.
const (
	IncidentStatusPageEventStatusCompleted IncidentStatusPageEventStatus = "completed"

	IncidentStatusPageEventStatusIdentified IncidentStatusPageEventStatus = "identified"

	IncidentStatusPageEventStatusInProgress IncidentStatusPageEventStatus = "in_progress"

	IncidentStatusPageEventStatusInvestigating IncidentStatusPageEventStatus = "investigating"

	IncidentStatusPageEventStatusMonitoring IncidentStatusPageEventStatus = "monitoring"

	IncidentStatusPageEventStatusResolved IncidentStatusPageEventStatus = "resolved"

	IncidentStatusPageEventStatusScheduled IncidentStatusPageEventStatus = "scheduled"

	IncidentStatusPageEventStatusVerifying IncidentStatusPageEventStatus = "verifying"
)

// Defines values for IncidentStatusPageEventListDataType.
const (
	IncidentStatusPageEventListDataTypeIncidentStatusPageEvents IncidentStatusPageEventListDataType = "incident_status_page_events"
)

// Defines values for IncidentStatusPageEventResponseDataType.
const (
	IncidentStatusPageEventResponseDataTypeIncidentStatusPageEvents IncidentStatusPageEventResponseDataType = "incident_status_page_events"
)

// Defines values for IncidentTriggerParamsIncidentCondition.
const (
	IncidentTriggerParamsIncidentConditionALL IncidentTriggerParamsIncidentCondition = "ALL"

	IncidentTriggerParamsIncidentConditionANY IncidentTriggerParamsIncidentCondition = "ANY"

	IncidentTriggerParamsIncidentConditionNONE IncidentTriggerParamsIncidentCondition = "NONE"
)

// Defines values for IncidentTriggerParamsIncidentConditionEnvironment.
const (
	IncidentTriggerParamsIncidentConditionEnvironmentANY IncidentTriggerParamsIncidentConditionEnvironment = "ANY"

	IncidentTriggerParamsIncidentConditionEnvironmentIS IncidentTriggerParamsIncidentConditionEnvironment = "IS"

	IncidentTriggerParamsIncidentConditionEnvironmentNONE IncidentTriggerParamsIncidentConditionEnvironment = "NONE"

	IncidentTriggerParamsIncidentConditionEnvironmentSET IncidentTriggerParamsIncidentConditionEnvironment = "SET"

	IncidentTriggerParamsIncidentConditionEnvironmentUNSET IncidentTriggerParamsIncidentConditionEnvironment = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionFunctionality.
const (
	IncidentTriggerParamsIncidentConditionFunctionalityANY IncidentTriggerParamsIncidentConditionFunctionality = "ANY"

	IncidentTriggerParamsIncidentConditionFunctionalityIS IncidentTriggerParamsIncidentConditionFunctionality = "IS"

	IncidentTriggerParamsIncidentConditionFunctionalityNONE IncidentTriggerParamsIncidentConditionFunctionality = "NONE"

	IncidentTriggerParamsIncidentConditionFunctionalitySET IncidentTriggerParamsIncidentConditionFunctionality = "SET"

	IncidentTriggerParamsIncidentConditionFunctionalityUNSET IncidentTriggerParamsIncidentConditionFunctionality = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionGroup.
const (
	IncidentTriggerParamsIncidentConditionGroupANY IncidentTriggerParamsIncidentConditionGroup = "ANY"

	IncidentTriggerParamsIncidentConditionGroupIS IncidentTriggerParamsIncidentConditionGroup = "IS"

	IncidentTriggerParamsIncidentConditionGroupNONE IncidentTriggerParamsIncidentConditionGroup = "NONE"

	IncidentTriggerParamsIncidentConditionGroupSET IncidentTriggerParamsIncidentConditionGroup = "SET"

	IncidentTriggerParamsIncidentConditionGroupUNSET IncidentTriggerParamsIncidentConditionGroup = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionIncidentType.
const (
	IncidentTriggerParamsIncidentConditionIncidentTypeANY IncidentTriggerParamsIncidentConditionIncidentType = "ANY"

	IncidentTriggerParamsIncidentConditionIncidentTypeIS IncidentTriggerParamsIncidentConditionIncidentType = "IS"

	IncidentTriggerParamsIncidentConditionIncidentTypeNONE IncidentTriggerParamsIncidentConditionIncidentType = "NONE"

	IncidentTriggerParamsIncidentConditionIncidentTypeSET IncidentTriggerParamsIncidentConditionIncidentType = "SET"

	IncidentTriggerParamsIncidentConditionIncidentTypeUNSET IncidentTriggerParamsIncidentConditionIncidentType = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionKind.
const (
	IncidentTriggerParamsIncidentConditionKindANY IncidentTriggerParamsIncidentConditionKind = "ANY"

	IncidentTriggerParamsIncidentConditionKindIS IncidentTriggerParamsIncidentConditionKind = "IS"

	IncidentTriggerParamsIncidentConditionKindNONE IncidentTriggerParamsIncidentConditionKind = "NONE"

	IncidentTriggerParamsIncidentConditionKindSET IncidentTriggerParamsIncidentConditionKind = "SET"

	IncidentTriggerParamsIncidentConditionKindUNSET IncidentTriggerParamsIncidentConditionKind = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionService.
const (
	IncidentTriggerParamsIncidentConditionServiceANY IncidentTriggerParamsIncidentConditionService = "ANY"

	IncidentTriggerParamsIncidentConditionServiceIS IncidentTriggerParamsIncidentConditionService = "IS"

	IncidentTriggerParamsIncidentConditionServiceNONE IncidentTriggerParamsIncidentConditionService = "NONE"

	IncidentTriggerParamsIncidentConditionServiceSET IncidentTriggerParamsIncidentConditionService = "SET"

	IncidentTriggerParamsIncidentConditionServiceUNSET IncidentTriggerParamsIncidentConditionService = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionSeverity.
const (
	IncidentTriggerParamsIncidentConditionSeverityANY IncidentTriggerParamsIncidentConditionSeverity = "ANY"

	IncidentTriggerParamsIncidentConditionSeverityIS IncidentTriggerParamsIncidentConditionSeverity = "IS"

	IncidentTriggerParamsIncidentConditionSeverityNONE IncidentTriggerParamsIncidentConditionSeverity = "NONE"

	IncidentTriggerParamsIncidentConditionSeveritySET IncidentTriggerParamsIncidentConditionSeverity = "SET"

	IncidentTriggerParamsIncidentConditionSeverityUNSET IncidentTriggerParamsIncidentConditionSeverity = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionStatus.
const (
	IncidentTriggerParamsIncidentConditionStatusANY IncidentTriggerParamsIncidentConditionStatus = "ANY"

	IncidentTriggerParamsIncidentConditionStatusIS IncidentTriggerParamsIncidentConditionStatus = "IS"

	IncidentTriggerParamsIncidentConditionStatusNONE IncidentTriggerParamsIncidentConditionStatus = "NONE"

	IncidentTriggerParamsIncidentConditionStatusSET IncidentTriggerParamsIncidentConditionStatus = "SET"

	IncidentTriggerParamsIncidentConditionStatusUNSET IncidentTriggerParamsIncidentConditionStatus = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionVisibility.
const (
	IncidentTriggerParamsIncidentConditionVisibilityANY IncidentTriggerParamsIncidentConditionVisibility = "ANY"

	IncidentTriggerParamsIncidentConditionVisibilityIS IncidentTriggerParamsIncidentConditionVisibility = "IS"

	IncidentTriggerParamsIncidentConditionVisibilityNONE IncidentTriggerParamsIncidentConditionVisibility = "NONE"

	IncidentTriggerParamsIncidentConditionVisibilitySET IncidentTriggerParamsIncidentConditionVisibility = "SET"

	IncidentTriggerParamsIncidentConditionVisibilityUNSET IncidentTriggerParamsIncidentConditionVisibility = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentKinds.
const (
	IncidentTriggerParamsIncidentKindsExample IncidentTriggerParamsIncidentKinds = "example"

	IncidentTriggerParamsIncidentKindsNormal IncidentTriggerParamsIncidentKinds = "normal"

	IncidentTriggerParamsIncidentKindsScheduled IncidentTriggerParamsIncidentKinds = "scheduled"

	IncidentTriggerParamsIncidentKindsTest IncidentTriggerParamsIncidentKinds = "test"
)

// Defines values for IncidentTriggerParamsIncidentStatuses.
const (
	IncidentTriggerParamsIncidentStatusesAcknowledged IncidentTriggerParamsIncidentStatuses = "acknowledged"

	IncidentTriggerParamsIncidentStatusesCancelled IncidentTriggerParamsIncidentStatuses = "cancelled"

	IncidentTriggerParamsIncidentStatusesCompleted IncidentTriggerParamsIncidentStatuses = "completed"

	IncidentTriggerParamsIncidentStatusesDetected IncidentTriggerParamsIncidentStatuses = "detected"

	IncidentTriggerParamsIncidentStatusesInProgress IncidentTriggerParamsIncidentStatuses = "in_progress"

	IncidentTriggerParamsIncidentStatusesMitigated IncidentTriggerParamsIncidentStatuses = "mitigated"

	IncidentTriggerParamsIncidentStatusesResolved IncidentTriggerParamsIncidentStatuses = "resolved"

	IncidentTriggerParamsIncidentStatusesScheduled IncidentTriggerParamsIncidentStatuses = "scheduled"

	IncidentTriggerParamsIncidentStatusesStarted IncidentTriggerParamsIncidentStatuses = "started"
)

// Defines values for IncidentTriggerParamsTriggerType.
const (
	IncidentTriggerParamsTriggerTypeIncident IncidentTriggerParamsTriggerType = "incident"
)

// Defines values for IncidentTriggerParamsTriggers.
const (
	IncidentTriggerParamsTriggersEnvironmentsUpdated IncidentTriggerParamsTriggers = "environments_updated"

	IncidentTriggerParamsTriggersFunctionalitiesUpdated IncidentTriggerParamsTriggers = "functionalities_updated"

	IncidentTriggerParamsTriggersIncidentCreated IncidentTriggerParamsTriggers = "incident_created"

	IncidentTriggerParamsTriggersIncidentTypesUpdated IncidentTriggerParamsTriggers = "incident_types_updated"

	IncidentTriggerParamsTriggersIncidentUpdated IncidentTriggerParamsTriggers = "incident_updated"

	IncidentTriggerParamsTriggersRoleAssignmentsUpdated IncidentTriggerParamsTriggers = "role_assignments_updated"

	IncidentTriggerParamsTriggersServicesUpdated IncidentTriggerParamsTriggers = "services_updated"

	IncidentTriggerParamsTriggersSeverityUpdated IncidentTriggerParamsTriggers = "severity_updated"

	IncidentTriggerParamsTriggersSlackCommand IncidentTriggerParamsTriggers = "slack_command"

	IncidentTriggerParamsTriggersStatusUpdated IncidentTriggerParamsTriggers = "status_updated"

	IncidentTriggerParamsTriggersSummaryUpdated IncidentTriggerParamsTriggers = "summary_updated"

	IncidentTriggerParamsTriggersTeamsUpdated IncidentTriggerParamsTriggers = "teams_updated"

	IncidentTriggerParamsTriggersTimelineUpdated IncidentTriggerParamsTriggers = "timeline_updated"

	IncidentTriggerParamsTriggersTitleUpdated IncidentTriggerParamsTriggers = "title_updated"
)

// Defines values for IncidentTypeListDataType.
const (
	IncidentTypeListDataTypeIncidentTypes IncidentTypeListDataType = "incident_types"
)

// Defines values for IncidentTypeResponseDataType.
const (
	IncidentTypeResponseDataTypeIncidentTypes IncidentTypeResponseDataType = "incident_types"
)

// Defines values for InviteToSlackChannelOpsgenieTaskParamsTaskType.
const (
	InviteToSlackChannelOpsgenieTaskParamsTaskTypeInviteToSlackChannelOpsgenie InviteToSlackChannelOpsgenieTaskParamsTaskType = "invite_to_slack_channel_opsgenie"
)

// Defines values for InviteToSlackChannelVictorOpsTaskParamsTaskType.
const (
	InviteToSlackChannelVictorOpsTaskParamsTaskTypeInviteToSlackChannelVictorOps InviteToSlackChannelVictorOpsTaskParamsTaskType = "invite_to_slack_channel_victor_ops"
)

// Defines values for MitigateIncidentDataType.
const (
	MitigateIncidentDataTypeIncidents MitigateIncidentDataType = "incidents"
)

// Defines values for NewAlertDataAttributesSource.
const (
	NewAlertDataAttributesSourceAsana NewAlertDataAttributesSource = "asana"

	NewAlertDataAttributesSourceDatadog NewAlertDataAttributesSource = "datadog"

	NewAlertDataAttributesSourceJira NewAlertDataAttributesSource = "jira"

	NewAlertDataAttributesSourceNobl9 NewAlertDataAttributesSource = "nobl9"

	NewAlertDataAttributesSourceOpsgenie NewAlertDataAttributesSource = "opsgenie"

	NewAlertDataAttributesSourcePagerduty NewAlertDataAttributesSource = "pagerduty"

	NewAlertDataAttributesSourceVictorops NewAlertDataAttributesSource = "victorops"

	NewAlertDataAttributesSourceZendesk NewAlertDataAttributesSource = "zendesk"
)

// Defines values for NewAlertDataType.
const (
	NewAlertDataTypeAlerts NewAlertDataType = "alerts"
)

// Defines values for NewCauseDataType.
const (
	NewCauseDataTypeCauses NewCauseDataType = "causes"
)

// Defines values for NewCustomFieldDataAttributesRequired.
const (
	NewCustomFieldDataAttributesRequiredIncidentForm NewCustomFieldDataAttributesRequired = "incident_form"

	NewCustomFieldDataAttributesRequiredIncidentMitigationForm NewCustomFieldDataAttributesRequired = "incident_mitigation_form"

	NewCustomFieldDataAttributesRequiredIncidentMitigationSlackForm NewCustomFieldDataAttributesRequired = "incident_mitigation_slack_form"

	NewCustomFieldDataAttributesRequiredIncidentPostMortemForm NewCustomFieldDataAttributesRequired = "incident_post_mortem_form"

	NewCustomFieldDataAttributesRequiredIncidentResolutionForm NewCustomFieldDataAttributesRequired = "incident_resolution_form"

	NewCustomFieldDataAttributesRequiredIncidentResolutionSlackForm NewCustomFieldDataAttributesRequired = "incident_resolution_slack_form"

	NewCustomFieldDataAttributesRequiredIncidentSlackForm NewCustomFieldDataAttributesRequired = "incident_slack_form"
)

// Defines values for NewCustomFieldDataAttributesShown.
const (
	NewCustomFieldDataAttributesShownIncidentForm NewCustomFieldDataAttributesShown = "incident_form"

	NewCustomFieldDataAttributesShownIncidentMitigationForm NewCustomFieldDataAttributesShown = "incident_mitigation_form"

	NewCustomFieldDataAttributesShownIncidentMitigationSlackForm NewCustomFieldDataAttributesShown = "incident_mitigation_slack_form"

	NewCustomFieldDataAttributesShownIncidentPostMortem NewCustomFieldDataAttributesShown = "incident_post_mortem"

	NewCustomFieldDataAttributesShownIncidentPostMortemForm NewCustomFieldDataAttributesShown = "incident_post_mortem_form"

	NewCustomFieldDataAttributesShownIncidentResolutionForm NewCustomFieldDataAttributesShown = "incident_resolution_form"

	NewCustomFieldDataAttributesShownIncidentResolutionSlackForm NewCustomFieldDataAttributesShown = "incident_resolution_slack_form"

	NewCustomFieldDataAttributesShownIncidentSlackForm NewCustomFieldDataAttributesShown = "incident_slack_form"
)

// Defines values for NewCustomFieldDataType.
const (
	NewCustomFieldDataTypeCustomFields NewCustomFieldDataType = "custom_fields"
)

// Defines values for NewCustomFieldOptionDataType.
const (
	NewCustomFieldOptionDataTypeCustomFieldOptions NewCustomFieldOptionDataType = "custom_field_options"
)

// Defines values for NewDashboardDataAttributesOwner.
const (
	NewDashboardDataAttributesOwnerTeam NewDashboardDataAttributesOwner = "team"

	NewDashboardDataAttributesOwnerUser NewDashboardDataAttributesOwner = "user"
)

// Defines values for NewDashboardDataAttributesPeriod.
const (
	NewDashboardDataAttributesPeriodDay NewDashboardDataAttributesPeriod = "day"

	NewDashboardDataAttributesPeriodMonth NewDashboardDataAttributesPeriod = "month"

	NewDashboardDataAttributesPeriodWeek NewDashboardDataAttributesPeriod = "week"
)

// Defines values for NewDashboardDataType.
const (
	NewDashboardDataTypeDashboards NewDashboardDataType = "dashboards"
)

// Defines values for NewDashboardPanelDataAttributesParamsDatasetsAggregateOperation.
const (
	NewDashboardPanelDataAttributesParamsDatasetsAggregateOperationAverage NewDashboardPanelDataAttributesParamsDatasetsAggregateOperation = "average"

	NewDashboardPanelDataAttributesParamsDatasetsAggregateOperationCount NewDashboardPanelDataAttributesParamsDatasetsAggregateOperation = "count"

	NewDashboardPanelDataAttributesParamsDatasetsAggregateOperationSum NewDashboardPanelDataAttributesParamsDatasetsAggregateOperation = "sum"
)

// Defines values for NewDashboardPanelDataAttributesParamsDatasetsCollection.
const (
	NewDashboardPanelDataAttributesParamsDatasetsCollectionIncidentActionItems NewDashboardPanelDataAttributesParamsDatasetsCollection = "incident_action_items"

	NewDashboardPanelDataAttributesParamsDatasetsCollectionIncidentPostMortems NewDashboardPanelDataAttributesParamsDatasetsCollection = "incident_post_mortems"

	NewDashboardPanelDataAttributesParamsDatasetsCollectionIncidents NewDashboardPanelDataAttributesParamsDatasetsCollection = "incidents"
)

// Defines values for NewDashboardPanelDataAttributesParamsDatasetsFilterOperation.
const (
	NewDashboardPanelDataAttributesParamsDatasetsFilterOperationAnd NewDashboardPanelDataAttributesParamsDatasetsFilterOperation = "and"

	NewDashboardPanelDataAttributesParamsDatasetsFilterOperationOr NewDashboardPanelDataAttributesParamsDatasetsFilterOperation = "or"
)

// Defines values for NewDashboardPanelDataAttributesParamsDatasetsFilterRulesCondition.
const (
	NewDashboardPanelDataAttributesParamsDatasetsFilterRulesCondition string = "="

	NewDashboardPanelDataAttributesParamsDatasetsFilterRulesCondition1 string = "!="

	NewDashboardPanelDataAttributesParamsDatasetsFilterRulesCondition2 string = ">="

	NewDashboardPanelDataAttributesParamsDatasetsFilterRulesCondition3 string = "<="

	NewDashboardPanelDataAttributesParamsDatasetsFilterRulesConditionContains string = "contains"

	NewDashboardPanelDataAttributesParamsDatasetsFilterRulesConditionExists string = "exists"

	NewDashboardPanelDataAttributesParamsDatasetsFilterRulesConditionNotContains string = "not_contains"

	NewDashboardPanelDataAttributesParamsDatasetsFilterRulesConditionNotExists string = "not_exists"
)

// Defines values for NewDashboardPanelDataAttributesParamsDatasetsFilterRulesOperation.
const (
	NewDashboardPanelDataAttributesParamsDatasetsFilterRulesOperationAnd NewDashboardPanelDataAttributesParamsDatasetsFilterRulesOperation = "and"

	NewDashboardPanelDataAttributesParamsDatasetsFilterRulesOperationOr NewDashboardPanelDataAttributesParamsDatasetsFilterRulesOperation = "or"
)

// Defines values for NewDashboardPanelDataAttributesParamsDisplay.
const (
	NewDashboardPanelDataAttributesParamsDisplayAggregateValue NewDashboardPanelDataAttributesParamsDisplay = "aggregate_value"

	NewDashboardPanelDataAttributesParamsDisplayColumnChart NewDashboardPanelDataAttributesParamsDisplay = "column_chart"

	NewDashboardPanelDataAttributesParamsDisplayLineChart NewDashboardPanelDataAttributesParamsDisplay = "line_chart"

	NewDashboardPanelDataAttributesParamsDisplayLineSteppedChart NewDashboardPanelDataAttributesParamsDisplay = "line_stepped_chart"

	NewDashboardPanelDataAttributesParamsDisplayPieChart NewDashboardPanelDataAttributesParamsDisplay = "pie_chart"

	NewDashboardPanelDataAttributesParamsDisplayStackedColumnChart NewDashboardPanelDataAttributesParamsDisplay = "stacked_column_chart"

	NewDashboardPanelDataAttributesParamsDisplayTable NewDashboardPanelDataAttributesParamsDisplay = "table"
)

// Defines values for NewDashboardPanelDataType.
const (
	NewDashboardPanelDataTypeDashboardPanels NewDashboardPanelDataType = "dashboard_panels"
)

// Defines values for NewEnvironmentDataType.
const (
	NewEnvironmentDataTypeEnvironments NewEnvironmentDataType = "environments"
)

// Defines values for NewFunctionalityDataType.
const (
	NewFunctionalityDataTypeFunctionalities NewFunctionalityDataType = "functionalities"
)

// Defines values for NewIncidentDataAttributesKind.
const (
	NewIncidentDataAttributesKindExample NewIncidentDataAttributesKind = "example"

	NewIncidentDataAttributesKindNormal NewIncidentDataAttributesKind = "normal"

	NewIncidentDataAttributesKindScheduled NewIncidentDataAttributesKind = "scheduled"

	NewIncidentDataAttributesKindTest NewIncidentDataAttributesKind = "test"
)

// Defines values for NewIncidentDataAttributesStatus.
const (
	NewIncidentDataAttributesStatusAcknowledged NewIncidentDataAttributesStatus = "acknowledged"

	NewIncidentDataAttributesStatusCancelled NewIncidentDataAttributesStatus = "cancelled"

	NewIncidentDataAttributesStatusCompleted NewIncidentDataAttributesStatus = "completed"

	NewIncidentDataAttributesStatusDetected NewIncidentDataAttributesStatus = "detected"

	NewIncidentDataAttributesStatusInProgress NewIncidentDataAttributesStatus = "in_progress"

	NewIncidentDataAttributesStatusMitigated NewIncidentDataAttributesStatus = "mitigated"

	NewIncidentDataAttributesStatusResolved NewIncidentDataAttributesStatus = "resolved"

	NewIncidentDataAttributesStatusScheduled NewIncidentDataAttributesStatus = "scheduled"

	NewIncidentDataAttributesStatusStarted NewIncidentDataAttributesStatus = "started"
)

// Defines values for NewIncidentDataType.
const (
	NewIncidentDataTypeIncidents NewIncidentDataType = "incidents"
)

// Defines values for NewIncidentActionItemDataAttributesKind.
const (
	NewIncidentActionItemDataAttributesKindFollowUp NewIncidentActionItemDataAttributesKind = "follow_up"

	NewIncidentActionItemDataAttributesKindTask NewIncidentActionItemDataAttributesKind = "task"
)

// Defines values for NewIncidentActionItemDataAttributesPriority.
const (
	NewIncidentActionItemDataAttributesPriorityHigh NewIncidentActionItemDataAttributesPriority = "high"

	NewIncidentActionItemDataAttributesPriorityLow NewIncidentActionItemDataAttributesPriority = "low"

	NewIncidentActionItemDataAttributesPriorityMedium NewIncidentActionItemDataAttributesPriority = "medium"
)

// Defines values for NewIncidentActionItemDataAttributesStatus.
const (
	NewIncidentActionItemDataAttributesStatusCancelled NewIncidentActionItemDataAttributesStatus = "cancelled"

	NewIncidentActionItemDataAttributesStatusDone NewIncidentActionItemDataAttributesStatus = "done"

	NewIncidentActionItemDataAttributesStatusInProgress NewIncidentActionItemDataAttributesStatus = "in_progress"

	NewIncidentActionItemDataAttributesStatusOpen NewIncidentActionItemDataAttributesStatus = "open"
)

// Defines values for NewIncidentActionItemDataType.
const (
	NewIncidentActionItemDataTypeIncidentActionItems NewIncidentActionItemDataType = "incident_action_items"
)

// Defines values for NewIncidentCustomFieldSelectionDataType.
const (
	NewIncidentCustomFieldSelectionDataTypeIncidentCustomFieldSelections NewIncidentCustomFieldSelectionDataType = "incident_custom_field_selections"
)

// Defines values for NewIncidentEventDataAttributesVisibility.
const (
	NewIncidentEventDataAttributesVisibilityExternal NewIncidentEventDataAttributesVisibility = "external"

	NewIncidentEventDataAttributesVisibilityInternal NewIncidentEventDataAttributesVisibility = "internal"
)

// Defines values for NewIncidentEventDataType.
const (
	NewIncidentEventDataTypeIncidentEvents NewIncidentEventDataType = "incident_events"
)

// Defines values for NewIncidentFeedbackDataAttributesRating.
const (
	NewIncidentFeedbackDataAttributesRatingN0 NewIncidentFeedbackDataAttributesRating = 0

	NewIncidentFeedbackDataAttributesRatingN1 NewIncidentFeedbackDataAttributesRating = 1

	NewIncidentFeedbackDataAttributesRatingN2 NewIncidentFeedbackDataAttributesRating = 2

	NewIncidentFeedbackDataAttributesRatingN3 NewIncidentFeedbackDataAttributesRating = 3

	NewIncidentFeedbackDataAttributesRatingN4 NewIncidentFeedbackDataAttributesRating = 4
)

// Defines values for NewIncidentFeedbackDataType.
const (
	NewIncidentFeedbackDataTypeIncidentFeedbacks NewIncidentFeedbackDataType = "incident_feedbacks"
)

// Defines values for NewIncidentRoleDataType.
const (
	NewIncidentRoleDataTypeIncidentRoles NewIncidentRoleDataType = "incident_roles"
)

// Defines values for NewIncidentRoleTaskDataAttributesPriority.
const (
	NewIncidentRoleTaskDataAttributesPriorityHigh NewIncidentRoleTaskDataAttributesPriority = "high"

	NewIncidentRoleTaskDataAttributesPriorityLow NewIncidentRoleTaskDataAttributesPriority = "low"

	NewIncidentRoleTaskDataAttributesPriorityMedium NewIncidentRoleTaskDataAttributesPriority = "medium"
)

// Defines values for NewIncidentRoleTaskDataType.
const (
	NewIncidentRoleTaskDataTypeIncidentRoleTasks NewIncidentRoleTaskDataType = "incident_role_tasks"
)

// Defines values for NewIncidentStatusPageEventDataAttributesStatus.
const (
	NewIncidentStatusPageEventDataAttributesStatusCompleted NewIncidentStatusPageEventDataAttributesStatus = "completed"

	NewIncidentStatusPageEventDataAttributesStatusIdentified NewIncidentStatusPageEventDataAttributesStatus = "identified"

	NewIncidentStatusPageEventDataAttributesStatusInProgress NewIncidentStatusPageEventDataAttributesStatus = "in_progress"

	NewIncidentStatusPageEventDataAttributesStatusInvestigating NewIncidentStatusPageEventDataAttributesStatus = "investigating"

	NewIncidentStatusPageEventDataAttributesStatusMonitoring NewIncidentStatusPageEventDataAttributesStatus = "monitoring"

	NewIncidentStatusPageEventDataAttributesStatusResolved NewIncidentStatusPageEventDataAttributesStatus = "resolved"

	NewIncidentStatusPageEventDataAttributesStatusScheduled NewIncidentStatusPageEventDataAttributesStatus = "scheduled"

	NewIncidentStatusPageEventDataAttributesStatusVerifying NewIncidentStatusPageEventDataAttributesStatus = "verifying"
)

// Defines values for NewIncidentStatusPageEventDataType.
const (
	NewIncidentStatusPageEventDataTypeIncidentStatusPageEvents NewIncidentStatusPageEventDataType = "incident_status_page_events"
)

// Defines values for NewIncidentTypeDataType.
const (
	NewIncidentTypeDataTypeIncidentTypes NewIncidentTypeDataType = "incident_types"
)

// Defines values for NewPlaybookDataType.
const (
	NewPlaybookDataTypePlaybooks NewPlaybookDataType = "playbooks"
)

// Defines values for NewPlaybookTaskDataType.
const (
	NewPlaybookTaskDataTypePlaybookTasks NewPlaybookTaskDataType = "playbook_tasks"
)

// Defines values for NewPostMortemTemplateDataType.
const (
	NewPostMortemTemplateDataTypePostMortemTemplates NewPostMortemTemplateDataType = "post_mortem_templates"
)

// Defines values for NewPulseDataType.
const (
	NewPulseDataTypePulses NewPulseDataType = "pulses"
)

// Defines values for NewServiceDataType.
const (
	NewServiceDataTypeServices NewServiceDataType = "services"
)

// Defines values for NewSeverityDataAttributesSeverity.
const (
	NewSeverityDataAttributesSeverityCritical NewSeverityDataAttributesSeverity = "critical"

	NewSeverityDataAttributesSeverityHigh NewSeverityDataAttributesSeverity = "high"

	NewSeverityDataAttributesSeverityLow NewSeverityDataAttributesSeverity = "low"

	NewSeverityDataAttributesSeverityMedium NewSeverityDataAttributesSeverity = "medium"
)

// Defines values for NewSeverityDataType.
const (
	NewSeverityDataTypeSeverities NewSeverityDataType = "severities"
)

// Defines values for NewStatusPageDataAttributesShowUptimeLastDays.
const (
	NewStatusPageDataAttributesShowUptimeLastDaysN30 NewStatusPageDataAttributesShowUptimeLastDays = 30

	NewStatusPageDataAttributesShowUptimeLastDaysN60 NewStatusPageDataAttributesShowUptimeLastDays = 60

	NewStatusPageDataAttributesShowUptimeLastDaysN90 NewStatusPageDataAttributesShowUptimeLastDays = 90
)

// Defines values for NewStatusPageDataType.
const (
	NewStatusPageDataTypeStatusPages NewStatusPageDataType = "status_pages"
)

// Defines values for NewTeamDataType.
const (
	NewTeamDataTypeGroups NewTeamDataType = "groups"
)

// Defines values for NewWorkflowDataAttributesRepeatOn.
const (
	NewWorkflowDataAttributesRepeatOnF NewWorkflowDataAttributesRepeatOn = "F"

	NewWorkflowDataAttributesRepeatOnM NewWorkflowDataAttributesRepeatOn = "M"

	NewWorkflowDataAttributesRepeatOnR NewWorkflowDataAttributesRepeatOn = "R"

	NewWorkflowDataAttributesRepeatOnS NewWorkflowDataAttributesRepeatOn = "S"

	NewWorkflowDataAttributesRepeatOnT NewWorkflowDataAttributesRepeatOn = "T"

	NewWorkflowDataAttributesRepeatOnU NewWorkflowDataAttributesRepeatOn = "U"

	NewWorkflowDataAttributesRepeatOnW NewWorkflowDataAttributesRepeatOn = "W"
)

// Defines values for NewWorkflowDataType.
const (
	NewWorkflowDataTypeWorkflows NewWorkflowDataType = "workflows"
)

// Defines values for NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition.
const (
	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionANY NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "ANY"

	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionIS NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "IS"

	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionNONE NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "NONE"

	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionSET NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "SET"

	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionUNSET NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "UNSET"
)

// Defines values for NewWorkflowCustomFieldSelectionDataType.
const (
	NewWorkflowCustomFieldSelectionDataTypeWorkflowCustomFieldSelections NewWorkflowCustomFieldSelectionDataType = "workflow_custom_field_selections"
)

// Defines values for NewWorkflowTaskDataType.
const (
	NewWorkflowTaskDataTypeWorkflowTasks NewWorkflowTaskDataType = "workflow_tasks"
)

// Defines values for PageOpsgenieOnCallRespondersTaskParamsPriority.
const (
	PageOpsgenieOnCallRespondersTaskParamsPriorityAuto PageOpsgenieOnCallRespondersTaskParamsPriority = "auto"

	PageOpsgenieOnCallRespondersTaskParamsPriorityP1 PageOpsgenieOnCallRespondersTaskParamsPriority = "P1"

	PageOpsgenieOnCallRespondersTaskParamsPriorityP2 PageOpsgenieOnCallRespondersTaskParamsPriority = "P2"

	PageOpsgenieOnCallRespondersTaskParamsPriorityP3 PageOpsgenieOnCallRespondersTaskParamsPriority = "P3"

	PageOpsgenieOnCallRespondersTaskParamsPriorityP4 PageOpsgenieOnCallRespondersTaskParamsPriority = "P4"
)

// Defines values for PageOpsgenieOnCallRespondersTaskParamsTaskType.
const (
	PageOpsgenieOnCallRespondersTaskParamsTaskTypePageOpsgenieOnCallResponders PageOpsgenieOnCallRespondersTaskParamsTaskType = "page_opsgenie_on_call_responders"
)

// Defines values for PagePagerdutyOnCallRespondersTaskParamsTaskType.
const (
	PagePagerdutyOnCallRespondersTaskParamsTaskTypePagePagerdutyOnCallResponders PagePagerdutyOnCallRespondersTaskParamsTaskType = "page_pagerduty_on_call_responders"
)

// Defines values for PagePagerdutyOnCallRespondersTaskParamsUrgency.
const (
	PagePagerdutyOnCallRespondersTaskParamsUrgencyAuto PagePagerdutyOnCallRespondersTaskParamsUrgency = "auto"

	PagePagerdutyOnCallRespondersTaskParamsUrgencyHigh PagePagerdutyOnCallRespondersTaskParamsUrgency = "high"

	PagePagerdutyOnCallRespondersTaskParamsUrgencyLow PagePagerdutyOnCallRespondersTaskParamsUrgency = "low"
)

// Defines values for PlaybookListDataType.
const (
	PlaybookListDataTypePlaybooks PlaybookListDataType = "playbooks"
)

// Defines values for PlaybookResponseDataType.
const (
	PlaybookResponseDataTypePlaybooks PlaybookResponseDataType = "playbooks"
)

// Defines values for PlaybookTaskListDataType.
const (
	PlaybookTaskListDataTypePlaybookTasks PlaybookTaskListDataType = "playbook_tasks"
)

// Defines values for PlaybookTaskResponseDataType.
const (
	PlaybookTaskResponseDataTypePlaybookTasks PlaybookTaskResponseDataType = "playbook_tasks"
)

// Defines values for PostMortemTemplateListDataType.
const (
	PostMortemTemplateListDataTypePostMortemTemplates PostMortemTemplateListDataType = "post_mortem_templates"
)

// Defines values for PostMortemTemplateResponseDataType.
const (
	PostMortemTemplateResponseDataTypePostMortemTemplates PostMortemTemplateResponseDataType = "post_mortem_templates"
)

// Defines values for PrintTaskParamsTaskType.
const (
	PrintTaskParamsTaskTypePrint PrintTaskParamsTaskType = "print"
)

// Defines values for PublishIncidentTaskParamsStatus.
const (
	PublishIncidentTaskParamsStatusCompleted PublishIncidentTaskParamsStatus = "completed"

	PublishIncidentTaskParamsStatusIdentified PublishIncidentTaskParamsStatus = "identified"

	PublishIncidentTaskParamsStatusInProgress PublishIncidentTaskParamsStatus = "in_progress"

	PublishIncidentTaskParamsStatusInvestigating PublishIncidentTaskParamsStatus = "investigating"

	PublishIncidentTaskParamsStatusMonitoring PublishIncidentTaskParamsStatus = "monitoring"

	PublishIncidentTaskParamsStatusResolved PublishIncidentTaskParamsStatus = "resolved"

	PublishIncidentTaskParamsStatusScheduled PublishIncidentTaskParamsStatus = "scheduled"

	PublishIncidentTaskParamsStatusVerifying PublishIncidentTaskParamsStatus = "verifying"
)

// Defines values for PublishIncidentTaskParamsTaskType.
const (
	PublishIncidentTaskParamsTaskTypePublishIncident PublishIncidentTaskParamsTaskType = "publish_incident"
)

// Defines values for PulseListDataType.
const (
	PulseListDataTypePulses PulseListDataType = "pulses"
)

// Defines values for PulseResponseDataType.
const (
	PulseResponseDataTypePulses PulseResponseDataType = "pulses"
)

// Defines values for PulseTriggerParamsPulseCondition.
const (
	PulseTriggerParamsPulseConditionALL PulseTriggerParamsPulseCondition = "ALL"

	PulseTriggerParamsPulseConditionANY PulseTriggerParamsPulseCondition = "ANY"

	PulseTriggerParamsPulseConditionNONE PulseTriggerParamsPulseCondition = "NONE"
)

// Defines values for PulseTriggerParamsPulseConditionLabel.
const (
	PulseTriggerParamsPulseConditionLabelANY PulseTriggerParamsPulseConditionLabel = "ANY"

	PulseTriggerParamsPulseConditionLabelIS PulseTriggerParamsPulseConditionLabel = "IS"

	PulseTriggerParamsPulseConditionLabelNONE PulseTriggerParamsPulseConditionLabel = "NONE"

	PulseTriggerParamsPulseConditionLabelSET PulseTriggerParamsPulseConditionLabel = "SET"

	PulseTriggerParamsPulseConditionLabelUNSET PulseTriggerParamsPulseConditionLabel = "UNSET"
)

// Defines values for PulseTriggerParamsPulseConditionPayload.
const (
	PulseTriggerParamsPulseConditionPayloadANY PulseTriggerParamsPulseConditionPayload = "ANY"

	PulseTriggerParamsPulseConditionPayloadIS PulseTriggerParamsPulseConditionPayload = "IS"

	PulseTriggerParamsPulseConditionPayloadNONE PulseTriggerParamsPulseConditionPayload = "NONE"

	PulseTriggerParamsPulseConditionPayloadSET PulseTriggerParamsPulseConditionPayload = "SET"

	PulseTriggerParamsPulseConditionPayloadUNSET PulseTriggerParamsPulseConditionPayload = "UNSET"
)

// Defines values for PulseTriggerParamsPulseConditionSource.
const (
	PulseTriggerParamsPulseConditionSourceANY PulseTriggerParamsPulseConditionSource = "ANY"

	PulseTriggerParamsPulseConditionSourceIS PulseTriggerParamsPulseConditionSource = "IS"

	PulseTriggerParamsPulseConditionSourceNONE PulseTriggerParamsPulseConditionSource = "NONE"

	PulseTriggerParamsPulseConditionSourceSET PulseTriggerParamsPulseConditionSource = "SET"

	PulseTriggerParamsPulseConditionSourceUNSET PulseTriggerParamsPulseConditionSource = "UNSET"
)

// Defines values for PulseTriggerParamsTriggerType.
const (
	PulseTriggerParamsTriggerTypePulse PulseTriggerParamsTriggerType = "pulse"
)

// Defines values for PulseTriggerParamsTriggers.
const (
	PulseTriggerParamsTriggersPulseCreated PulseTriggerParamsTriggers = "pulse_created"
)

// Defines values for RedisClientTaskParamsTaskType.
const (
	RedisClientTaskParamsTaskTypeRedisClient RedisClientTaskParamsTaskType = "redis_client"
)

// Defines values for RenameSlackChannelTaskParamsTaskType.
const (
	RenameSlackChannelTaskParamsTaskTypeRenameSlackChannel RenameSlackChannelTaskParamsTaskType = "rename_slack_channel"
)

// Defines values for ResolveIncidentDataType.
const (
	ResolveIncidentDataTypeIncidents ResolveIncidentDataType = "incidents"
)

// Defines values for RunCommandHerokuTaskParamsSize.
const (
	RunCommandHerokuTaskParamsSizeStandard1X RunCommandHerokuTaskParamsSize = "standard-1X"

	RunCommandHerokuTaskParamsSizeStandard2X RunCommandHerokuTaskParamsSize = "standard-2X"
)

// Defines values for RunCommandHerokuTaskParamsTaskType.
const (
	RunCommandHerokuTaskParamsTaskTypeRunCommandHeroku RunCommandHerokuTaskParamsTaskType = "run_command_heroku"
)

// Defines values for SendEmailTaskParamsTaskType.
const (
	SendEmailTaskParamsTaskTypeSendEmail SendEmailTaskParamsTaskType = "send_email"
)

// Defines values for SendSmsTaskParamsTaskType.
const (
	SendSmsTaskParamsTaskTypeSendSms SendSmsTaskParamsTaskType = "send_sms"
)

// Defines values for ServiceListDataType.
const (
	ServiceListDataTypeServices ServiceListDataType = "services"
)

// Defines values for ServiceResponseDataType.
const (
	ServiceResponseDataTypeServices ServiceResponseDataType = "services"
)

// Defines values for SeveritySeverity.
const (
	SeveritySeverityCritical SeveritySeverity = "critical"

	SeveritySeverityHigh SeveritySeverity = "high"

	SeveritySeverityLow SeveritySeverity = "low"

	SeveritySeverityMedium SeveritySeverity = "medium"
)

// Defines values for SeverityListDataType.
const (
	SeverityListDataTypeSeverities SeverityListDataType = "severities"
)

// Defines values for SeverityResponseDataType.
const (
	SeverityResponseDataTypeSeverities SeverityResponseDataType = "severities"
)

// Defines values for SnapshotDatadogGraphTaskParamsTaskType.
const (
	SnapshotDatadogGraphTaskParamsTaskTypeSnapshotDatadogGraph SnapshotDatadogGraphTaskParamsTaskType = "snapshot_datadog_graph"
)

// Defines values for SnapshotGrafanaDashboardTaskParamsTaskType.
const (
	SnapshotGrafanaDashboardTaskParamsTaskTypeSnapshotGrafanaDashboard SnapshotGrafanaDashboardTaskParamsTaskType = "snapshot_grafana_dashboard"
)

// Defines values for SnapshotLookerLookTaskParamsTaskType.
const (
	SnapshotLookerLookTaskParamsTaskTypeSnapshotLookerLook SnapshotLookerLookTaskParamsTaskType = "snapshot_looker_look"
)

// Defines values for SnapshotNewRelicGraphTaskParamsMetricType.
const (
	SnapshotNewRelicGraphTaskParamsMetricTypeAPDEX SnapshotNewRelicGraphTaskParamsMetricType = "APDEX"

	SnapshotNewRelicGraphTaskParamsMetricTypeAREA SnapshotNewRelicGraphTaskParamsMetricType = "AREA"

	SnapshotNewRelicGraphTaskParamsMetricTypeBAR SnapshotNewRelicGraphTaskParamsMetricType = "BAR"

	SnapshotNewRelicGraphTaskParamsMetricTypeBASELINE SnapshotNewRelicGraphTaskParamsMetricType = "BASELINE"

	SnapshotNewRelicGraphTaskParamsMetricTypeBILLBOARD SnapshotNewRelicGraphTaskParamsMetricType = "BILLBOARD"

	SnapshotNewRelicGraphTaskParamsMetricTypeBULLET SnapshotNewRelicGraphTaskParamsMetricType = "BULLET"

	SnapshotNewRelicGraphTaskParamsMetricTypeEVENTFEED SnapshotNewRelicGraphTaskParamsMetricType = "EVENT_FEED"

	SnapshotNewRelicGraphTaskParamsMetricTypeFUNNEL SnapshotNewRelicGraphTaskParamsMetricType = "FUNNEL"

	SnapshotNewRelicGraphTaskParamsMetricTypeHEATMAP SnapshotNewRelicGraphTaskParamsMetricType = "HEATMAP"

	SnapshotNewRelicGraphTaskParamsMetricTypeHISTOGRAM SnapshotNewRelicGraphTaskParamsMetricType = "HISTOGRAM"

	SnapshotNewRelicGraphTaskParamsMetricTypeLINE SnapshotNewRelicGraphTaskParamsMetricType = "LINE"

	SnapshotNewRelicGraphTaskParamsMetricTypePIE SnapshotNewRelicGraphTaskParamsMetricType = "PIE"

	SnapshotNewRelicGraphTaskParamsMetricTypeSCATTER SnapshotNewRelicGraphTaskParamsMetricType = "SCATTER"

	SnapshotNewRelicGraphTaskParamsMetricTypeSTACKEDHORIZONTALBAR SnapshotNewRelicGraphTaskParamsMetricType = "STACKED_HORIZONTAL_BAR"

	SnapshotNewRelicGraphTaskParamsMetricTypeTABLE SnapshotNewRelicGraphTaskParamsMetricType = "TABLE"

	SnapshotNewRelicGraphTaskParamsMetricTypeVERTICALBAR SnapshotNewRelicGraphTaskParamsMetricType = "VERTICAL_BAR"
)

// Defines values for SnapshotNewRelicGraphTaskParamsTaskType.
const (
	SnapshotNewRelicGraphTaskParamsTaskTypeSnapshotLookerGraph SnapshotNewRelicGraphTaskParamsTaskType = "snapshot_looker_graph"
)

// Defines values for StandaloneTriggerParamsTriggerType.
const (
	StandaloneTriggerParamsTriggerTypeSimple StandaloneTriggerParamsTriggerType = "simple"
)

// Defines values for StandaloneTriggerParamsTriggers.
const (
	StandaloneTriggerParamsTriggersSlackCommand StandaloneTriggerParamsTriggers = "slack_command"
)

// Defines values for StatusPageShowUptimeLastDays.
const (
	StatusPageShowUptimeLastDaysN30 StatusPageShowUptimeLastDays = 30

	StatusPageShowUptimeLastDaysN60 StatusPageShowUptimeLastDays = 60

	StatusPageShowUptimeLastDaysN90 StatusPageShowUptimeLastDays = 90
)

// Defines values for StatusPageListDataType.
const (
	StatusPageListDataTypeStatusPages StatusPageListDataType = "status_pages"
)

// Defines values for StatusPageResponseDataType.
const (
	StatusPageResponseDataTypeStatusPages StatusPageResponseDataType = "status_pages"
)

// Defines values for TeamListDataType.
const (
	TeamListDataTypeGroups TeamListDataType = "groups"
)

// Defines values for TeamResponseDataType.
const (
	TeamResponseDataTypeGroups TeamResponseDataType = "groups"
)

// Defines values for TweetTwitterMessageTaskParamsTaskType.
const (
	TweetTwitterMessageTaskParamsTaskTypeTweetTwitterMessage TweetTwitterMessageTaskParamsTaskType = "tweet_twitter_message"
)

// Defines values for UpdateAirtableTableRecordTaskParamsTaskType.
const (
	UpdateAirtableTableRecordTaskParamsTaskTypeUpdateAirtableTableRecord UpdateAirtableTableRecordTaskParamsTaskType = "update_airtable_table_record"
)

// Defines values for UpdateAsanaTaskTaskParamsTaskType.
const (
	UpdateAsanaTaskTaskParamsTaskTypeUpdateAsanaTask UpdateAsanaTaskTaskParamsTaskType = "update_asana_task"
)

// Defines values for UpdateCauseDataType.
const (
	UpdateCauseDataTypeCauses UpdateCauseDataType = "causes"
)

// Defines values for UpdateCustomFieldDataAttributesRequired.
const (
	UpdateCustomFieldDataAttributesRequiredIncidentForm UpdateCustomFieldDataAttributesRequired = "incident_form"

	UpdateCustomFieldDataAttributesRequiredIncidentMitigationForm UpdateCustomFieldDataAttributesRequired = "incident_mitigation_form"

	UpdateCustomFieldDataAttributesRequiredIncidentMitigationSlackForm UpdateCustomFieldDataAttributesRequired = "incident_mitigation_slack_form"

	UpdateCustomFieldDataAttributesRequiredIncidentPostMortemForm UpdateCustomFieldDataAttributesRequired = "incident_post_mortem_form"

	UpdateCustomFieldDataAttributesRequiredIncidentResolutionForm UpdateCustomFieldDataAttributesRequired = "incident_resolution_form"

	UpdateCustomFieldDataAttributesRequiredIncidentResolutionSlackForm UpdateCustomFieldDataAttributesRequired = "incident_resolution_slack_form"

	UpdateCustomFieldDataAttributesRequiredIncidentSlackForm UpdateCustomFieldDataAttributesRequired = "incident_slack_form"
)

// Defines values for UpdateCustomFieldDataAttributesShown.
const (
	UpdateCustomFieldDataAttributesShownIncidentForm UpdateCustomFieldDataAttributesShown = "incident_form"

	UpdateCustomFieldDataAttributesShownIncidentMitigationForm UpdateCustomFieldDataAttributesShown = "incident_mitigation_form"

	UpdateCustomFieldDataAttributesShownIncidentMitigationSlackForm UpdateCustomFieldDataAttributesShown = "incident_mitigation_slack_form"

	UpdateCustomFieldDataAttributesShownIncidentPostMortem UpdateCustomFieldDataAttributesShown = "incident_post_mortem"

	UpdateCustomFieldDataAttributesShownIncidentPostMortemForm UpdateCustomFieldDataAttributesShown = "incident_post_mortem_form"

	UpdateCustomFieldDataAttributesShownIncidentResolutionForm UpdateCustomFieldDataAttributesShown = "incident_resolution_form"

	UpdateCustomFieldDataAttributesShownIncidentResolutionSlackForm UpdateCustomFieldDataAttributesShown = "incident_resolution_slack_form"

	UpdateCustomFieldDataAttributesShownIncidentSlackForm UpdateCustomFieldDataAttributesShown = "incident_slack_form"
)

// Defines values for UpdateCustomFieldDataType.
const (
	UpdateCustomFieldDataTypeCustomFields UpdateCustomFieldDataType = "custom_fields"
)

// Defines values for UpdateCustomFieldOptionDataType.
const (
	UpdateCustomFieldOptionDataTypeCustomFieldOptions UpdateCustomFieldOptionDataType = "custom_field_options"
)

// Defines values for UpdateDashboardDataAttributesOwner.
const (
	UpdateDashboardDataAttributesOwnerTeam UpdateDashboardDataAttributesOwner = "team"

	UpdateDashboardDataAttributesOwnerUser UpdateDashboardDataAttributesOwner = "user"
)

// Defines values for UpdateDashboardDataAttributesPeriod.
const (
	UpdateDashboardDataAttributesPeriodDay UpdateDashboardDataAttributesPeriod = "day"

	UpdateDashboardDataAttributesPeriodMonth UpdateDashboardDataAttributesPeriod = "month"

	UpdateDashboardDataAttributesPeriodWeek UpdateDashboardDataAttributesPeriod = "week"
)

// Defines values for UpdateDashboardDataType.
const (
	UpdateDashboardDataTypeDashboards UpdateDashboardDataType = "dashboards"
)

// Defines values for UpdateDashboardPanelDataAttributesParamsDatasetsAggregateOperation.
const (
	UpdateDashboardPanelDataAttributesParamsDatasetsAggregateOperationAverage UpdateDashboardPanelDataAttributesParamsDatasetsAggregateOperation = "average"

	UpdateDashboardPanelDataAttributesParamsDatasetsAggregateOperationCount UpdateDashboardPanelDataAttributesParamsDatasetsAggregateOperation = "count"

	UpdateDashboardPanelDataAttributesParamsDatasetsAggregateOperationSum UpdateDashboardPanelDataAttributesParamsDatasetsAggregateOperation = "sum"
)

// Defines values for UpdateDashboardPanelDataAttributesParamsDatasetsCollection.
const (
	UpdateDashboardPanelDataAttributesParamsDatasetsCollectionIncidentActionItems UpdateDashboardPanelDataAttributesParamsDatasetsCollection = "incident_action_items"

	UpdateDashboardPanelDataAttributesParamsDatasetsCollectionIncidentPostMortems UpdateDashboardPanelDataAttributesParamsDatasetsCollection = "incident_post_mortems"

	UpdateDashboardPanelDataAttributesParamsDatasetsCollectionIncidents UpdateDashboardPanelDataAttributesParamsDatasetsCollection = "incidents"
)

// Defines values for UpdateDashboardPanelDataAttributesParamsDatasetsFilterOperation.
const (
	UpdateDashboardPanelDataAttributesParamsDatasetsFilterOperationAnd UpdateDashboardPanelDataAttributesParamsDatasetsFilterOperation = "and"

	UpdateDashboardPanelDataAttributesParamsDatasetsFilterOperationOr UpdateDashboardPanelDataAttributesParamsDatasetsFilterOperation = "or"
)

// Defines values for UpdateDashboardPanelDataAttributesParamsDatasetsFilterRulesCondition.
const (
	UpdateDashboardPanelDataAttributesParamsDatasetsFilterRulesCondition string = "="

	UpdateDashboardPanelDataAttributesParamsDatasetsFilterRulesCondition1 string = "!="

	UpdateDashboardPanelDataAttributesParamsDatasetsFilterRulesCondition2 string = ">="

	UpdateDashboardPanelDataAttributesParamsDatasetsFilterRulesCondition3 string = "<="

	UpdateDashboardPanelDataAttributesParamsDatasetsFilterRulesConditionContains string = "contains"

	UpdateDashboardPanelDataAttributesParamsDatasetsFilterRulesConditionExists string = "exists"

	UpdateDashboardPanelDataAttributesParamsDatasetsFilterRulesConditionNotContains string = "not_contains"

	UpdateDashboardPanelDataAttributesParamsDatasetsFilterRulesConditionNotExists string = "not_exists"
)

// Defines values for UpdateDashboardPanelDataAttributesParamsDatasetsFilterRulesOperation.
const (
	UpdateDashboardPanelDataAttributesParamsDatasetsFilterRulesOperationAnd UpdateDashboardPanelDataAttributesParamsDatasetsFilterRulesOperation = "and"

	UpdateDashboardPanelDataAttributesParamsDatasetsFilterRulesOperationOr UpdateDashboardPanelDataAttributesParamsDatasetsFilterRulesOperation = "or"
)

// Defines values for UpdateDashboardPanelDataAttributesParamsDisplay.
const (
	UpdateDashboardPanelDataAttributesParamsDisplayAggregateValue UpdateDashboardPanelDataAttributesParamsDisplay = "aggregate_value"

	UpdateDashboardPanelDataAttributesParamsDisplayColumnChart UpdateDashboardPanelDataAttributesParamsDisplay = "column_chart"

	UpdateDashboardPanelDataAttributesParamsDisplayLineChart UpdateDashboardPanelDataAttributesParamsDisplay = "line_chart"

	UpdateDashboardPanelDataAttributesParamsDisplayLineSteppedChart UpdateDashboardPanelDataAttributesParamsDisplay = "line_stepped_chart"

	UpdateDashboardPanelDataAttributesParamsDisplayPieChart UpdateDashboardPanelDataAttributesParamsDisplay = "pie_chart"

	UpdateDashboardPanelDataAttributesParamsDisplayStackedColumnChart UpdateDashboardPanelDataAttributesParamsDisplay = "stacked_column_chart"

	UpdateDashboardPanelDataAttributesParamsDisplayTable UpdateDashboardPanelDataAttributesParamsDisplay = "table"
)

// Defines values for UpdateDashboardPanelDataType.
const (
	UpdateDashboardPanelDataTypeDashboardPanels UpdateDashboardPanelDataType = "dashboard_panels"
)

// Defines values for UpdateEnvironmentDataType.
const (
	UpdateEnvironmentDataTypeEnvironments UpdateEnvironmentDataType = "environments"
)

// Defines values for UpdateFunctionalityDataType.
const (
	UpdateFunctionalityDataTypeFunctionalities UpdateFunctionalityDataType = "functionalities"
)

// Defines values for UpdateGithubIssueTaskParamsTaskType.
const (
	UpdateGithubIssueTaskParamsTaskTypeUpdateGithubIssue UpdateGithubIssueTaskParamsTaskType = "update_github_issue"
)

// Defines values for UpdateGoogleCalendarEventTaskParamsTaskType.
const (
	UpdateGoogleCalendarEventTaskParamsTaskTypeCreateGoogleCalendarEvent UpdateGoogleCalendarEventTaskParamsTaskType = "create_google_calendar_event"
)

// Defines values for UpdateIncidentDataType.
const (
	UpdateIncidentDataTypeIncidents UpdateIncidentDataType = "incidents"
)

// Defines values for UpdateIncidentActionItemDataAttributesKind.
const (
	UpdateIncidentActionItemDataAttributesKindFollowUp UpdateIncidentActionItemDataAttributesKind = "follow_up"

	UpdateIncidentActionItemDataAttributesKindTask UpdateIncidentActionItemDataAttributesKind = "task"
)

// Defines values for UpdateIncidentActionItemDataAttributesPriority.
const (
	UpdateIncidentActionItemDataAttributesPriorityHigh UpdateIncidentActionItemDataAttributesPriority = "high"

	UpdateIncidentActionItemDataAttributesPriorityLow UpdateIncidentActionItemDataAttributesPriority = "low"

	UpdateIncidentActionItemDataAttributesPriorityMedium UpdateIncidentActionItemDataAttributesPriority = "medium"
)

// Defines values for UpdateIncidentActionItemDataAttributesStatus.
const (
	UpdateIncidentActionItemDataAttributesStatusCancelled UpdateIncidentActionItemDataAttributesStatus = "cancelled"

	UpdateIncidentActionItemDataAttributesStatusDone UpdateIncidentActionItemDataAttributesStatus = "done"

	UpdateIncidentActionItemDataAttributesStatusInProgress UpdateIncidentActionItemDataAttributesStatus = "in_progress"

	UpdateIncidentActionItemDataAttributesStatusOpen UpdateIncidentActionItemDataAttributesStatus = "open"
)

// Defines values for UpdateIncidentActionItemDataType.
const (
	UpdateIncidentActionItemDataTypeIncidentActionItems UpdateIncidentActionItemDataType = "incident_action_items"
)

// Defines values for UpdateIncidentCustomFieldSelectionDataType.
const (
	UpdateIncidentCustomFieldSelectionDataTypeIncidentCustomFieldSelections UpdateIncidentCustomFieldSelectionDataType = "incident_custom_field_selections"
)

// Defines values for UpdateIncidentEventDataAttributesVisibility.
const (
	UpdateIncidentEventDataAttributesVisibilityExternal UpdateIncidentEventDataAttributesVisibility = "external"

	UpdateIncidentEventDataAttributesVisibilityInternal UpdateIncidentEventDataAttributesVisibility = "internal"
)

// Defines values for UpdateIncidentEventDataType.
const (
	UpdateIncidentEventDataTypeIncidentEvents UpdateIncidentEventDataType = "incident_events"
)

// Defines values for UpdateIncidentFeedbackDataAttributesRating.
const (
	UpdateIncidentFeedbackDataAttributesRatingN0 UpdateIncidentFeedbackDataAttributesRating = 0

	UpdateIncidentFeedbackDataAttributesRatingN1 UpdateIncidentFeedbackDataAttributesRating = 1

	UpdateIncidentFeedbackDataAttributesRatingN2 UpdateIncidentFeedbackDataAttributesRating = 2

	UpdateIncidentFeedbackDataAttributesRatingN3 UpdateIncidentFeedbackDataAttributesRating = 3

	UpdateIncidentFeedbackDataAttributesRatingN4 UpdateIncidentFeedbackDataAttributesRating = 4
)

// Defines values for UpdateIncidentFeedbackDataType.
const (
	UpdateIncidentFeedbackDataTypeIncidentFeedbacks UpdateIncidentFeedbackDataType = "incident_feedbacks"
)

// Defines values for UpdateIncidentPostMortemDataAttributesStatus.
const (
	UpdateIncidentPostMortemDataAttributesStatusDraft UpdateIncidentPostMortemDataAttributesStatus = "draft"

	UpdateIncidentPostMortemDataAttributesStatusPublished UpdateIncidentPostMortemDataAttributesStatus = "published"
)

// Defines values for UpdateIncidentPostMortemDataType.
const (
	UpdateIncidentPostMortemDataTypeIncidentPostMortems UpdateIncidentPostMortemDataType = "incident_post_mortems"
)

// Defines values for UpdateIncidentPostmortemTaskParamsTaskType.
const (
	UpdateIncidentPostmortemTaskParamsTaskTypeUpdateIncidentPostmortem UpdateIncidentPostmortemTaskParamsTaskType = "update_incident_postmortem"
)

// Defines values for UpdateIncidentRoleDataType.
const (
	UpdateIncidentRoleDataTypeIncidentRoles UpdateIncidentRoleDataType = "incident_roles"
)

// Defines values for UpdateIncidentRoleTaskDataAttributesPriority.
const (
	UpdateIncidentRoleTaskDataAttributesPriorityHigh UpdateIncidentRoleTaskDataAttributesPriority = "high"

	UpdateIncidentRoleTaskDataAttributesPriorityLow UpdateIncidentRoleTaskDataAttributesPriority = "low"

	UpdateIncidentRoleTaskDataAttributesPriorityMedium UpdateIncidentRoleTaskDataAttributesPriority = "medium"
)

// Defines values for UpdateIncidentRoleTaskDataType.
const (
	UpdateIncidentRoleTaskDataTypeIncidentRoleTasks UpdateIncidentRoleTaskDataType = "incident_role_tasks"
)

// Defines values for UpdateIncidentStatusPageEventDataAttributesStatus.
const (
	UpdateIncidentStatusPageEventDataAttributesStatusCompleted UpdateIncidentStatusPageEventDataAttributesStatus = "completed"

	UpdateIncidentStatusPageEventDataAttributesStatusIdentified UpdateIncidentStatusPageEventDataAttributesStatus = "identified"

	UpdateIncidentStatusPageEventDataAttributesStatusInProgress UpdateIncidentStatusPageEventDataAttributesStatus = "in_progress"

	UpdateIncidentStatusPageEventDataAttributesStatusInvestigating UpdateIncidentStatusPageEventDataAttributesStatus = "investigating"

	UpdateIncidentStatusPageEventDataAttributesStatusMonitoring UpdateIncidentStatusPageEventDataAttributesStatus = "monitoring"

	UpdateIncidentStatusPageEventDataAttributesStatusResolved UpdateIncidentStatusPageEventDataAttributesStatus = "resolved"

	UpdateIncidentStatusPageEventDataAttributesStatusScheduled UpdateIncidentStatusPageEventDataAttributesStatus = "scheduled"

	UpdateIncidentStatusPageEventDataAttributesStatusVerifying UpdateIncidentStatusPageEventDataAttributesStatus = "verifying"
)

// Defines values for UpdateIncidentStatusPageEventDataType.
const (
	UpdateIncidentStatusPageEventDataTypeIncidentStatusPageEvents UpdateIncidentStatusPageEventDataType = "incident_status_page_events"
)

// Defines values for UpdateIncidentTaskParamsTaskType.
const (
	UpdateIncidentTaskParamsTaskTypeUpdateIncident UpdateIncidentTaskParamsTaskType = "update_incident"
)

// Defines values for UpdateIncidentTypeDataType.
const (
	UpdateIncidentTypeDataTypeIncidentTypes UpdateIncidentTypeDataType = "incident_types"
)

// Defines values for UpdateJiraIssueTaskParamsTaskType.
const (
	UpdateJiraIssueTaskParamsTaskTypeUpdateJiraIssue UpdateJiraIssueTaskParamsTaskType = "update_jira_issue"
)

// Defines values for UpdateLinearIssueTaskParamsTaskType.
const (
	UpdateLinearIssueTaskParamsTaskTypeUpdateLinearIssue UpdateLinearIssueTaskParamsTaskType = "update_linear_issue"
)

// Defines values for UpdatePlaybookDataType.
const (
	UpdatePlaybookDataTypePlaybooks UpdatePlaybookDataType = "playbooks"
)

// Defines values for UpdatePlaybookTaskDataType.
const (
	UpdatePlaybookTaskDataTypePlaybookTasks UpdatePlaybookTaskDataType = "playbook_tasks"
)

// Defines values for UpdatePostMortemTemplateDataType.
const (
	UpdatePostMortemTemplateDataTypePostMortemTemplates UpdatePostMortemTemplateDataType = "post_mortem_templates"
)

// Defines values for UpdatePulseDataType.
const (
	UpdatePulseDataTypePulses UpdatePulseDataType = "pulses"
)

// Defines values for UpdateServiceDataType.
const (
	UpdateServiceDataTypeServices UpdateServiceDataType = "services"
)

// Defines values for UpdateServiceNowIncidentTaskParamsTaskType.
const (
	UpdateServiceNowIncidentTaskParamsTaskTypeUpdateServiceNowIncident UpdateServiceNowIncidentTaskParamsTaskType = "update_service_now_incident"
)

// Defines values for UpdateSeverityDataAttributesSeverity.
const (
	UpdateSeverityDataAttributesSeverityCritical UpdateSeverityDataAttributesSeverity = "critical"

	UpdateSeverityDataAttributesSeverityHigh UpdateSeverityDataAttributesSeverity = "high"

	UpdateSeverityDataAttributesSeverityLow UpdateSeverityDataAttributesSeverity = "low"

	UpdateSeverityDataAttributesSeverityMedium UpdateSeverityDataAttributesSeverity = "medium"
)

// Defines values for UpdateSeverityDataType.
const (
	UpdateSeverityDataTypeSeverities UpdateSeverityDataType = "severities"
)

// Defines values for UpdateShortcutStoryTaskParamsTaskType.
const (
	UpdateShortcutStoryTaskParamsTaskTypeUpdateShortcutStory UpdateShortcutStoryTaskParamsTaskType = "update_shortcut_story"
)

// Defines values for UpdateShortcutTaskTaskParamsTaskType.
const (
	UpdateShortcutTaskTaskParamsTaskTypeUpdateShortcutTask UpdateShortcutTaskTaskParamsTaskType = "update_shortcut_task"
)

// Defines values for UpdateSlackChannelTopicTaskParamsTaskType.
const (
	UpdateSlackChannelTopicTaskParamsTaskTypeUpdateSlackChannelTopic UpdateSlackChannelTopicTaskParamsTaskType = "update_slack_channel_topic"
)

// Defines values for UpdateStatusPageDataAttributesShowUptimeLastDays.
const (
	UpdateStatusPageDataAttributesShowUptimeLastDaysN30 UpdateStatusPageDataAttributesShowUptimeLastDays = 30

	UpdateStatusPageDataAttributesShowUptimeLastDaysN60 UpdateStatusPageDataAttributesShowUptimeLastDays = 60

	UpdateStatusPageDataAttributesShowUptimeLastDaysN90 UpdateStatusPageDataAttributesShowUptimeLastDays = 90
)

// Defines values for UpdateStatusPageDataType.
const (
	UpdateStatusPageDataTypeStatusPages UpdateStatusPageDataType = "status_pages"
)

// Defines values for UpdateStatusTaskParamsStatus.
const (
	UpdateStatusTaskParamsStatusCancelled UpdateStatusTaskParamsStatus = "cancelled"

	UpdateStatusTaskParamsStatusMitigated UpdateStatusTaskParamsStatus = "mitigated"

	UpdateStatusTaskParamsStatusResolved UpdateStatusTaskParamsStatus = "resolved"

	UpdateStatusTaskParamsStatusStarted UpdateStatusTaskParamsStatus = "started"
)

// Defines values for UpdateStatusTaskParamsTaskType.
const (
	UpdateStatusTaskParamsTaskTypeUpdateStatus UpdateStatusTaskParamsTaskType = "update_status"
)

// Defines values for UpdateTeamDataType.
const (
	UpdateTeamDataTypeGroups UpdateTeamDataType = "groups"
)

// Defines values for UpdateTrelloCardTaskParamsTaskType.
const (
	UpdateTrelloCardTaskParamsTaskTypeUpdateTrelloCard UpdateTrelloCardTaskParamsTaskType = "update_trello_card"
)

// Defines values for UpdateWorkflowDataAttributesTriggers.
const (
	UpdateWorkflowDataAttributesTriggersEnvironmentsUpdated UpdateWorkflowDataAttributesTriggers = "environments_updated"

	UpdateWorkflowDataAttributesTriggersFunctionalitiesUpdated UpdateWorkflowDataAttributesTriggers = "functionalities_updated"

	UpdateWorkflowDataAttributesTriggersIncidentCreated UpdateWorkflowDataAttributesTriggers = "incident_created"

	UpdateWorkflowDataAttributesTriggersIncidentTypesUpdated UpdateWorkflowDataAttributesTriggers = "incident_types_updated"

	UpdateWorkflowDataAttributesTriggersIncidentUpdated UpdateWorkflowDataAttributesTriggers = "incident_updated"

	UpdateWorkflowDataAttributesTriggersRoleAssignmentsUpdated UpdateWorkflowDataAttributesTriggers = "role_assignments_updated"

	UpdateWorkflowDataAttributesTriggersServicesUpdated UpdateWorkflowDataAttributesTriggers = "services_updated"

	UpdateWorkflowDataAttributesTriggersSeverityUpdated UpdateWorkflowDataAttributesTriggers = "severity_updated"

	UpdateWorkflowDataAttributesTriggersSlackCommand UpdateWorkflowDataAttributesTriggers = "slack_command"

	UpdateWorkflowDataAttributesTriggersStatusUpdated UpdateWorkflowDataAttributesTriggers = "status_updated"

	UpdateWorkflowDataAttributesTriggersSummaryUpdated UpdateWorkflowDataAttributesTriggers = "summary_updated"

	UpdateWorkflowDataAttributesTriggersTeamsUpdated UpdateWorkflowDataAttributesTriggers = "teams_updated"

	UpdateWorkflowDataAttributesTriggersTimelineUpdated UpdateWorkflowDataAttributesTriggers = "timeline_updated"

	UpdateWorkflowDataAttributesTriggersTitleUpdated UpdateWorkflowDataAttributesTriggers = "title_updated"
)

// Defines values for UpdateWorkflowDataType.
const (
	UpdateWorkflowDataTypeWorkflows UpdateWorkflowDataType = "workflows"
)

// Defines values for UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition.
const (
	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionANY UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "ANY"

	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionIS UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "IS"

	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionNONE UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "NONE"

	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionSET UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "SET"

	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionUNSET UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "UNSET"
)

// Defines values for UpdateWorkflowCustomFieldSelectionDataType.
const (
	UpdateWorkflowCustomFieldSelectionDataTypeWorkflowCustomFieldSelections UpdateWorkflowCustomFieldSelectionDataType = "workflow_custom_field_selections"
)

// Defines values for UpdateWorkflowTaskDataType.
const (
	UpdateWorkflowTaskDataTypeWorkflowTasks UpdateWorkflowTaskDataType = "workflow_tasks"
)

// Defines values for UpdateZendeskTicketTaskParamsTaskType.
const (
	UpdateZendeskTicketTaskParamsTaskTypeUpdateZendeskTicket UpdateZendeskTicketTaskParamsTaskType = "update_zendesk_ticket"
)

// Defines values for WorkflowRepeatOn.
const (
	WorkflowRepeatOnF WorkflowRepeatOn = "F"

	WorkflowRepeatOnM WorkflowRepeatOn = "M"

	WorkflowRepeatOnR WorkflowRepeatOn = "R"

	WorkflowRepeatOnS WorkflowRepeatOn = "S"

	WorkflowRepeatOnT WorkflowRepeatOn = "T"

	WorkflowRepeatOnU WorkflowRepeatOn = "U"

	WorkflowRepeatOnW WorkflowRepeatOn = "W"
)

// Defines values for WorkflowTriggers.
const (
	WorkflowTriggersEnvironmentsUpdated WorkflowTriggers = "environments_updated"

	WorkflowTriggersFunctionalitiesUpdated WorkflowTriggers = "functionalities_updated"

	WorkflowTriggersIncidentCreated WorkflowTriggers = "incident_created"

	WorkflowTriggersIncidentTypesUpdated WorkflowTriggers = "incident_types_updated"

	WorkflowTriggersIncidentUpdated WorkflowTriggers = "incident_updated"

	WorkflowTriggersRoleAssignmentsUpdated WorkflowTriggers = "role_assignments_updated"

	WorkflowTriggersServicesUpdated WorkflowTriggers = "services_updated"

	WorkflowTriggersSeverityUpdated WorkflowTriggers = "severity_updated"

	WorkflowTriggersSlackCommand WorkflowTriggers = "slack_command"

	WorkflowTriggersStatusUpdated WorkflowTriggers = "status_updated"

	WorkflowTriggersSummaryUpdated WorkflowTriggers = "summary_updated"

	WorkflowTriggersTeamsUpdated WorkflowTriggers = "teams_updated"

	WorkflowTriggersTimelineUpdated WorkflowTriggers = "timeline_updated"

	WorkflowTriggersTitleUpdated WorkflowTriggers = "title_updated"
)

// Defines values for WorkflowCustomFieldSelectionIncidentCondition.
const (
	WorkflowCustomFieldSelectionIncidentConditionANY WorkflowCustomFieldSelectionIncidentCondition = "ANY"

	WorkflowCustomFieldSelectionIncidentConditionIS WorkflowCustomFieldSelectionIncidentCondition = "IS"

	WorkflowCustomFieldSelectionIncidentConditionNONE WorkflowCustomFieldSelectionIncidentCondition = "NONE"

	WorkflowCustomFieldSelectionIncidentConditionSET WorkflowCustomFieldSelectionIncidentCondition = "SET"

	WorkflowCustomFieldSelectionIncidentConditionUNSET WorkflowCustomFieldSelectionIncidentCondition = "UNSET"
)

// Defines values for WorkflowCustomFieldSelectionListDataType.
const (
	WorkflowCustomFieldSelectionListDataTypeWorkflowCustomFieldSelections WorkflowCustomFieldSelectionListDataType = "workflow_custom_field_selections"
)

// Defines values for WorkflowCustomFieldSelectionResponseDataType.
const (
	WorkflowCustomFieldSelectionResponseDataTypeWorkflowCustomFieldSelections WorkflowCustomFieldSelectionResponseDataType = "workflow_custom_field_selections"
)

// Defines values for WorkflowListDataType.
const (
	WorkflowListDataTypeWorkflows WorkflowListDataType = "workflows"
)

// Defines values for WorkflowResponseDataType.
const (
	WorkflowResponseDataTypeWorkflows WorkflowResponseDataType = "workflows"
)

// Defines values for WorkflowTaskListDataType.
const (
	WorkflowTaskListDataTypeWorkflowTasks WorkflowTaskListDataType = "workflow_tasks"
)

// Defines values for WorkflowTaskResponseDataType.
const (
	WorkflowTaskResponseDataTypeWorkflowTasks WorkflowTaskResponseDataType = "workflow_tasks"
)

// ActionItemTriggerParams defines model for action_item_trigger_params.
type ActionItemTriggerParams struct {
	IncidentActionItemCondition         *ActionItemTriggerParamsIncidentActionItemCondition         `json:"incident_action_item_condition,omitempty"`
	IncidentActionItemConditionGroup    *ActionItemTriggerParamsIncidentActionItemConditionGroup    `json:"incident_action_item_condition_group,omitempty"`
	IncidentActionItemConditionKind     *ActionItemTriggerParamsIncidentActionItemConditionKind     `json:"incident_action_item_condition_kind,omitempty"`
	IncidentActionItemConditionPriority *ActionItemTriggerParamsIncidentActionItemConditionPriority `json:"incident_action_item_condition_priority,omitempty"`
	IncidentActionItemConditionStatus   *ActionItemTriggerParamsIncidentActionItemConditionStatus   `json:"incident_action_item_condition_status,omitempty"`
	IncidentActionItemKinds             *[]ActionItemTriggerParamsIncidentActionItemKinds           `json:"incident_action_item_kinds,omitempty"`
	IncidentActionItemPriorities        *[]ActionItemTriggerParamsIncidentActionItemPriorities      `json:"incident_action_item_priorities,omitempty"`
	IncidentActionItemStatuses          *[]ActionItemTriggerParamsIncidentActionItemStatuses        `json:"incident_action_item_statuses,omitempty"`
	IncidentCondition                   *ActionItemTriggerParamsIncidentCondition                   `json:"incident_condition,omitempty"`
	IncidentConditionEnvironment        *ActionItemTriggerParamsIncidentConditionEnvironment        `json:"incident_condition_environment,omitempty"`
	IncidentConditionFunctionality      *ActionItemTriggerParamsIncidentConditionFunctionality      `json:"incident_condition_functionality,omitempty"`
	IncidentConditionGroup              *ActionItemTriggerParamsIncidentConditionGroup              `json:"incident_condition_group,omitempty"`
	IncidentConditionIncidentType       *ActionItemTriggerParamsIncidentConditionIncidentType       `json:"incident_condition_incident_type,omitempty"`
	IncidentConditionKind               *ActionItemTriggerParamsIncidentConditionKind               `json:"incident_condition_kind,omitempty"`
	IncidentConditionService            *ActionItemTriggerParamsIncidentConditionService            `json:"incident_condition_service,omitempty"`
	IncidentConditionSeverity           *ActionItemTriggerParamsIncidentConditionSeverity           `json:"incident_condition_severity,omitempty"`
	IncidentConditionStatus             *ActionItemTriggerParamsIncidentConditionStatus             `json:"incident_condition_status,omitempty"`
	IncidentConditionVisibility         *ActionItemTriggerParamsIncidentConditionVisibility         `json:"incident_condition_visibility,omitempty"`
	IncidentKinds                       *[]ActionItemTriggerParamsIncidentKinds                     `json:"incident_kinds,omitempty"`
	IncidentStatuses                    *[]ActionItemTriggerParamsIncidentStatuses                  `json:"incident_statuses,omitempty"`
	IncidentVisibilities                *[]bool                                                     `json:"incident_visibilities,omitempty"`
	TriggerType                         ActionItemTriggerParamsTriggerType                          `json:"trigger_type"`
	Triggers                            *[]ActionItemTriggerParamsTriggers                          `json:"triggers,omitempty"`
}

// ActionItemTriggerParamsIncidentActionItemCondition defines model for ActionItemTriggerParams.IncidentActionItemCondition.
type ActionItemTriggerParamsIncidentActionItemCondition string

// ActionItemTriggerParamsIncidentActionItemConditionGroup defines model for ActionItemTriggerParams.IncidentActionItemConditionGroup.
type ActionItemTriggerParamsIncidentActionItemConditionGroup string

// ActionItemTriggerParamsIncidentActionItemConditionKind defines model for ActionItemTriggerParams.IncidentActionItemConditionKind.
type ActionItemTriggerParamsIncidentActionItemConditionKind string

// ActionItemTriggerParamsIncidentActionItemConditionPriority defines model for ActionItemTriggerParams.IncidentActionItemConditionPriority.
type ActionItemTriggerParamsIncidentActionItemConditionPriority string

// ActionItemTriggerParamsIncidentActionItemConditionStatus defines model for ActionItemTriggerParams.IncidentActionItemConditionStatus.
type ActionItemTriggerParamsIncidentActionItemConditionStatus string

// ActionItemTriggerParamsIncidentActionItemKinds defines model for ActionItemTriggerParams.IncidentActionItemKinds.
type ActionItemTriggerParamsIncidentActionItemKinds string

// ActionItemTriggerParamsIncidentActionItemPriorities defines model for ActionItemTriggerParams.IncidentActionItemPriorities.
type ActionItemTriggerParamsIncidentActionItemPriorities string

// ActionItemTriggerParamsIncidentActionItemStatuses defines model for ActionItemTriggerParams.IncidentActionItemStatuses.
type ActionItemTriggerParamsIncidentActionItemStatuses string

// ActionItemTriggerParamsIncidentCondition defines model for ActionItemTriggerParams.IncidentCondition.
type ActionItemTriggerParamsIncidentCondition string

// ActionItemTriggerParamsIncidentConditionEnvironment defines model for ActionItemTriggerParams.IncidentConditionEnvironment.
type ActionItemTriggerParamsIncidentConditionEnvironment string

// ActionItemTriggerParamsIncidentConditionFunctionality defines model for ActionItemTriggerParams.IncidentConditionFunctionality.
type ActionItemTriggerParamsIncidentConditionFunctionality string

// ActionItemTriggerParamsIncidentConditionGroup defines model for ActionItemTriggerParams.IncidentConditionGroup.
type ActionItemTriggerParamsIncidentConditionGroup string

// ActionItemTriggerParamsIncidentConditionIncidentType defines model for ActionItemTriggerParams.IncidentConditionIncidentType.
type ActionItemTriggerParamsIncidentConditionIncidentType string

// ActionItemTriggerParamsIncidentConditionKind defines model for ActionItemTriggerParams.IncidentConditionKind.
type ActionItemTriggerParamsIncidentConditionKind string

// ActionItemTriggerParamsIncidentConditionService defines model for ActionItemTriggerParams.IncidentConditionService.
type ActionItemTriggerParamsIncidentConditionService string

// ActionItemTriggerParamsIncidentConditionSeverity defines model for ActionItemTriggerParams.IncidentConditionSeverity.
type ActionItemTriggerParamsIncidentConditionSeverity string

// ActionItemTriggerParamsIncidentConditionStatus defines model for ActionItemTriggerParams.IncidentConditionStatus.
type ActionItemTriggerParamsIncidentConditionStatus string

// ActionItemTriggerParamsIncidentConditionVisibility defines model for ActionItemTriggerParams.IncidentConditionVisibility.
type ActionItemTriggerParamsIncidentConditionVisibility string

// ActionItemTriggerParamsIncidentKinds defines model for ActionItemTriggerParams.IncidentKinds.
type ActionItemTriggerParamsIncidentKinds string

// ActionItemTriggerParamsIncidentStatuses defines model for ActionItemTriggerParams.IncidentStatuses.
type ActionItemTriggerParamsIncidentStatuses string

// ActionItemTriggerParamsTriggerType defines model for ActionItemTriggerParams.TriggerType.
type ActionItemTriggerParamsTriggerType string

// Actions that trigger the workflow.
type ActionItemTriggerParamsTriggers string

// AddActionItemTaskParams defines model for add_action_item_task_params.
type AddActionItemTaskParams struct {
	// The user id this action item is assigned to
	AssignedToUserId *string `json:"assigned_to_user_id,omitempty"`

	// The action item description.
	Description *string `json:"description,omitempty"`

	// The action item kind.
	Kind                   *string `json:"kind,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// The action item priority.
	Priority AddActionItemTaskParamsPriority `json:"priority"`

	// The action item status.
	Status AddActionItemTaskParamsStatus `json:"status"`

	// The action item summary.
	Summary  string                           `json:"summary"`
	TaskType *AddActionItemTaskParamsTaskType `json:"task_type,omitempty"`
}

// The action item priority.
type AddActionItemTaskParamsPriority string

// The action item status.
type AddActionItemTaskParamsStatus string

// AddActionItemTaskParamsTaskType defines model for AddActionItemTaskParams.TaskType.
type AddActionItemTaskParamsTaskType string

// AddRoleTaskParams defines model for add_role_task_params.
type AddRoleTaskParams struct {
	// The user id this role is assigned to
	AssignedToUserId *string `json:"assigned_to_user_id,omitempty"`

	// The role id to add to the incident
	IncidentRoleId string                     `json:"incident_role_id"`
	TaskType       *AddRoleTaskParamsTaskType `json:"task_type,omitempty"`
}

// AddRoleTaskParamsTaskType defines model for AddRoleTaskParams.TaskType.
type AddRoleTaskParamsTaskType string

// AddSlackBookmarkTaskParams defines model for add_slack_bookmark_task_params.
type AddSlackBookmarkTaskParams interface{}

// AddTeamTaskParams defines model for add_team_task_params.
type AddTeamTaskParams struct {
	// The team id.
	GroupId  string                     `json:"group_id"`
	TaskType *AddTeamTaskParamsTaskType `json:"task_type,omitempty"`
}

// AddTeamTaskParamsTaskType defines model for AddTeamTaskParams.TaskType.
type AddTeamTaskParamsTaskType string

// AddToTimelineTaskParams defines model for add_to_timeline_task_params.
type AddToTimelineTaskParams struct {
	// The timeline event description.
	Event               string `json:"event"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *AddToTimelineTaskParamsTaskType `json:"task_type,omitempty"`

	// A URL for the timeline event.
	Url *string `json:"url,omitempty"`
}

// AddToTimelineTaskParamsTaskType defines model for AddToTimelineTaskParams.TaskType.
type AddToTimelineTaskParamsTaskType string

// Alert defines model for alert.
type Alert struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// Additional data
	Data *map[string]interface{} `json:"data"`

	// Environments attached to the alert
	Environments *[]struct {
		// Embedded struct due to allOf(#/components/schemas/environment)
		Environment `yaml:",inline"`
	} `json:"environments,omitempty"`
	Labels *[]struct {
		// Key of the tag
		Key string `json:"key"`

		// Value of the tag
		Value string `json:"value"`
	} `json:"labels,omitempty"`

	// Services attached to the alert
	Services *[]struct {
		// Embedded struct due to allOf(#/components/schemas/service)
		Service `yaml:",inline"`
	} `json:"services,omitempty"`

	// The source of the alert (eg: zendesk)
	Source AlertSource `json:"source"`

	// The summary of the alert
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The source of the alert (eg: zendesk)
type AlertSource string

// AlertList defines model for alert_list.
type AlertList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/alert)
			Alert `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the alert
		Id string `json:"id"`

		// The source of the alert (eg: zendesk)
		Source *AlertListDataSource `json:"source,omitempty"`
		Type   AlertListDataType    `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// The source of the alert (eg: zendesk)
type AlertListDataSource string

// AlertListDataType defines model for AlertList.Data.Type.
type AlertListDataType string

// AlertResponse defines model for alert_response.
type AlertResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/alert)
			Alert `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the alert
		Id string `json:"id"`

		// The source of the alert (eg: zendesk)
		Source *AlertResponseDataSource `json:"source,omitempty"`
		Type   AlertResponseDataType    `json:"type"`
	} `json:"data"`
}

// The source of the alert (eg: zendesk)
type AlertResponseDataSource string

// AlertResponseDataType defines model for AlertResponse.Data.Type.
type AlertResponseDataType string

// AlertTriggerParams defines model for alert_trigger_params.
type AlertTriggerParams struct {
	AlertCondition        *AlertTriggerParamsAlertCondition        `json:"alert_condition,omitempty"`
	AlertConditionLabel   *AlertTriggerParamsAlertConditionLabel   `json:"alert_condition_label,omitempty"`
	AlertConditionPayload *AlertTriggerParamsAlertConditionPayload `json:"alert_condition_payload,omitempty"`
	AlertConditionSource  *AlertTriggerParamsAlertConditionSource  `json:"alert_condition_source,omitempty"`
	AlertLabels           *[]string                                `json:"alert_labels,omitempty"`
	AlertPayload          *[]string                                `json:"alert_payload,omitempty"`

	// You can use jsonpath syntax. eg: $.incident.teams[*]
	AlertQueryPayload *string                       `json:"alert_query_payload"`
	AlertSources      *[]string                     `json:"alert_sources,omitempty"`
	TriggerType       AlertTriggerParamsTriggerType `json:"trigger_type"`
	Triggers          *[]AlertTriggerParamsTriggers `json:"triggers,omitempty"`
}

// AlertTriggerParamsAlertCondition defines model for AlertTriggerParams.AlertCondition.
type AlertTriggerParamsAlertCondition string

// AlertTriggerParamsAlertConditionLabel defines model for AlertTriggerParams.AlertConditionLabel.
type AlertTriggerParamsAlertConditionLabel string

// AlertTriggerParamsAlertConditionPayload defines model for AlertTriggerParams.AlertConditionPayload.
type AlertTriggerParamsAlertConditionPayload string

// AlertTriggerParamsAlertConditionSource defines model for AlertTriggerParams.AlertConditionSource.
type AlertTriggerParamsAlertConditionSource string

// AlertTriggerParamsTriggerType defines model for AlertTriggerParams.TriggerType.
type AlertTriggerParamsTriggerType string

// Actions that trigger the workflow.
type AlertTriggerParamsTriggers string

// ArchiveSlackChannelsTaskParams defines model for archive_slack_channels_task_params.
type ArchiveSlackChannelsTaskParams struct {
	Channels []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channels"`
	TaskType *ArchiveSlackChannelsTaskParamsTaskType `json:"task_type,omitempty"`
}

// ArchiveSlackChannelsTaskParamsTaskType defines model for ArchiveSlackChannelsTaskParams.TaskType.
type ArchiveSlackChannelsTaskParamsTaskType string

// AttachDatadogDashboardsTaskParams defines model for attach_datadog_dashboards_task_params.
type AttachDatadogDashboardsTaskParams struct {
	Dashboards []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"dashboards"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *AttachDatadogDashboardsTaskParamsTaskType `json:"task_type,omitempty"`
}

// AttachDatadogDashboardsTaskParamsTaskType defines model for AttachDatadogDashboardsTaskParams.TaskType.
type AttachDatadogDashboardsTaskParamsTaskType string

// AutoAssignRoleOpsgenieTaskParams defines model for auto_assign_role_opsgenie_task_params.
type AutoAssignRoleOpsgenieTaskParams struct {
	// The role id.
	IncidentRoleId string `json:"incident_role_id"`
	Schedule       struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule"`
	TaskType *AutoAssignRoleOpsgenieTaskParamsTaskType `json:"task_type,omitempty"`
}

// AutoAssignRoleOpsgenieTaskParamsTaskType defines model for AutoAssignRoleOpsgenieTaskParams.TaskType.
type AutoAssignRoleOpsgenieTaskParamsTaskType string

// AutoAssignRolePagerdutyTaskParams defines model for auto_assign_role_pagerduty_task_params.
type AutoAssignRolePagerdutyTaskParams interface{}

// AutoAssignRoleVictorOpsTaskParams defines model for auto_assign_role_victor_ops_task_params.
type AutoAssignRoleVictorOpsTaskParams struct {
	// The role id.
	IncidentRoleId string `json:"incident_role_id"`
	Schedule       struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule"`
	TaskType *AutoAssignRoleVictorOpsTaskParamsTaskType `json:"task_type,omitempty"`
}

// AutoAssignRoleVictorOpsTaskParamsTaskType defines model for AutoAssignRoleVictorOpsTaskParams.TaskType.
type AutoAssignRoleVictorOpsTaskParamsTaskType string

// CallPeopleTaskParams defines model for call_people_task_params.
type CallPeopleTaskParams struct {
	// The message to be read by text-to-voice
	Content string `json:"content"`

	// The name
	Name         string                        `json:"name"`
	PhoneNumbers []string                      `json:"phone_numbers"`
	TaskType     *CallPeopleTaskParamsTaskType `json:"task_type,omitempty"`
}

// CallPeopleTaskParamsTaskType defines model for CallPeopleTaskParams.TaskType.
type CallPeopleTaskParamsTaskType string

// CancelIncident defines model for cancel_incident.
type CancelIncident struct {
	Data struct {
		Attributes struct {
			// Why was the incident cancelled?
			CancellationMessage *string `json:"cancellation_message"`
		} `json:"attributes"`
		Type CancelIncidentDataType `json:"type"`
	} `json:"data"`
}

// CancelIncidentDataType defines model for CancelIncident.Data.Type.
type CancelIncidentDataType string

// Cause defines model for cause.
type Cause struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the cause
	Description *string `json:"description"`

	// The name of the cause
	Name string `json:"name"`

	// The slug of the cause
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// CauseList defines model for cause_list.
type CauseList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/cause)
			Cause `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the cause
		Id   string            `json:"id"`
		Type CauseListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// CauseListDataType defines model for CauseList.Data.Type.
type CauseListDataType string

// CauseResponse defines model for cause_response.
type CauseResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/cause)
			Cause `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the cause
		Id   string                `json:"id"`
		Type CauseResponseDataType `json:"type"`
	} `json:"data"`
}

// CauseResponseDataType defines model for CauseResponse.Data.Type.
type CauseResponseDataType string

// CreateAirtableTableRecordTaskParams defines model for create_airtable_table_record_task_params.
type CreateAirtableTableRecordTaskParams struct {
	// The base key
	BaseKey string `json:"base_key"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON.
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The table name
	TableName string                                       `json:"table_name"`
	TaskType  *CreateAirtableTableRecordTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateAirtableTableRecordTaskParamsTaskType defines model for CreateAirtableTableRecordTaskParams.TaskType.
type CreateAirtableTableRecordTaskParamsTaskType string

// CreateAsanaSubtaskTaskParams defines model for create_asana_subtask_task_params.
type CreateAsanaSubtaskTaskParams struct {
	// The assigned user's email.
	AssignUserEmail *string `json:"assign_user_email,omitempty"`
	Completion      struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON.
	CustomFieldsMapping *string `json:"custom_fields_mapping"`
	Notes               *string `json:"notes,omitempty"`

	// The parent task id
	ParentTaskId string                                `json:"parent_task_id"`
	TaskType     *CreateAsanaSubtaskTaskParamsTaskType `json:"task_type,omitempty"`

	// The subtask title
	Title string `json:"title"`
}

// CreateAsanaSubtaskTaskParamsTaskType defines model for CreateAsanaSubtaskTaskParams.TaskType.
type CreateAsanaSubtaskTaskParamsTaskType string

// CreateAsanaTaskTaskParams defines model for create_asana_task_task_params.
type CreateAsanaTaskTaskParams struct {
	// The assigned user's email.
	AssignUserEmail *string `json:"assign_user_email,omitempty"`
	Completion      struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON.
	CustomFieldsMapping *string `json:"custom_fields_mapping"`
	Projects            []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"projects"`
	TaskType *CreateAsanaTaskTaskParamsTaskType `json:"task_type,omitempty"`

	// The task title
	Title     string `json:"title"`
	Workspace struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"workspace"`
}

// CreateAsanaTaskTaskParamsTaskType defines model for CreateAsanaTaskTaskParams.TaskType.
type CreateAsanaTaskTaskParamsTaskType string

// CreateConfluencePageTaskParams defines model for create_confluence_page_task_params.
type CreateConfluencePageTaskParams struct {
	Ancestor *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"ancestor,omitempty"`

	// The page content
	Content *string `json:"content,omitempty"`

	// The post mortem template to use
	PostMortemTemplateId *string `json:"post_mortem_template_id,omitempty"`
	Space                struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"space"`
	TaskType *CreateConfluencePageTaskParamsTaskType `json:"task_type,omitempty"`

	// The page title
	Title string `json:"title"`
}

// CreateConfluencePageTaskParamsTaskType defines model for CreateConfluencePageTaskParams.TaskType.
type CreateConfluencePageTaskParamsTaskType string

// CreateDatadogNotebookTaskParams defines model for create_datadog_notebook_task_params.
type CreateDatadogNotebookTaskParams struct {
	// The notebook content
	Content *string `json:"content,omitempty"`

	// The notebook kind
	Kind CreateDatadogNotebookTaskParamsKind `json:"kind"`

	// Post mortem template to use when creating notebook, if desired.
	PostMortemTemplateId *string                                  `json:"post_mortem_template_id,omitempty"`
	TaskType             *CreateDatadogNotebookTaskParamsTaskType `json:"task_type,omitempty"`

	// The notebook title
	Title string `json:"title"`
}

// The notebook kind
type CreateDatadogNotebookTaskParamsKind string

// CreateDatadogNotebookTaskParamsTaskType defines model for CreateDatadogNotebookTaskParams.TaskType.
type CreateDatadogNotebookTaskParamsTaskType string

// CreateDropboxPaperPageTaskParams defines model for create_dropbox_paper_page_task_params.
type CreateDropboxPaperPageTaskParams struct {
	// The page content
	Content   *string `json:"content,omitempty"`
	Namespace *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"namespace,omitempty"`
	ParentFolder *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_folder,omitempty"`

	// Post mortem template to use when creating page task, if desired.
	PostMortemTemplateId *string                                   `json:"post_mortem_template_id,omitempty"`
	TaskType             *CreateDropboxPaperPageTaskParamsTaskType `json:"task_type,omitempty"`

	// The page task title
	Title string `json:"title"`
}

// CreateDropboxPaperPageTaskParamsTaskType defines model for CreateDropboxPaperPageTaskParams.TaskType.
type CreateDropboxPaperPageTaskParamsTaskType string

// CreateGithubIssueTaskParams defines model for create_github_issue_task_params.
type CreateGithubIssueTaskParams struct {
	// The issue body
	Body       *string `json:"body,omitempty"`
	Repository struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"repository"`
	TaskType *CreateGithubIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title
	Title string `json:"title"`
}

// CreateGithubIssueTaskParamsTaskType defines model for CreateGithubIssueTaskParams.TaskType.
type CreateGithubIssueTaskParamsTaskType string

// CreateGoogleCalendarEventTaskParams defines model for create_google_calendar_event_task_params.
type CreateGoogleCalendarEventTaskParams struct {
	// Emails of attendees
	Attendees               []string `json:"attendees"`
	CanGuestsInviteOthers   *bool    `json:"can_guests_invite_others,omitempty"`
	CanGuestsModifyEvent    *bool    `json:"can_guests_modify_event,omitempty"`
	CanGuestsSeeOtherGuests *bool    `json:"can_guests_see_other_guests,omitempty"`

	// The days until meeting
	DaysUntilMeeting float32 `json:"days_until_meeting"`

	// The event description
	Description     string `json:"description"`
	ExcludeWeekends *bool  `json:"exclude_weekends,omitempty"`

	// Meeting duration in format like '1 hour', '30 minutes'
	MeetingDuration        string `json:"meeting_duration"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`

	// Send an email to the attendees notifying them of the event
	SendUpdates *bool `json:"send_updates,omitempty"`

	// The event summary
	Summary  string                                       `json:"summary"`
	TaskType *CreateGoogleCalendarEventTaskParamsTaskType `json:"task_type,omitempty"`

	// Time of meeting in format HH:MM
	TimeOfMeeting string  `json:"time_of_meeting"`
	TimeZone      *string `json:"time_zone"`
}

// CreateGoogleCalendarEventTaskParamsTaskType defines model for CreateGoogleCalendarEventTaskParams.TaskType.
type CreateGoogleCalendarEventTaskParamsTaskType string

// CreateGoogleDocsPageTaskParams defines model for create_google_docs_page_task_params.
type CreateGoogleDocsPageTaskParams struct {
	// The page content
	Content *string `json:"content,omitempty"`
	Drive   *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"drive,omitempty"`
	ParentFolder *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_folder,omitempty"`

	// Page permissions JSON.
	Permissions *string `json:"permissions,omitempty"`

	// Post mortem template to use when creating page, if desired.
	PostMortemTemplateId *string                                 `json:"post_mortem_template_id,omitempty"`
	TaskType             *CreateGoogleDocsPageTaskParamsTaskType `json:"task_type,omitempty"`

	// The page title
	Title string `json:"title"`
}

// CreateGoogleDocsPageTaskParamsTaskType defines model for CreateGoogleDocsPageTaskParams.TaskType.
type CreateGoogleDocsPageTaskParamsTaskType string

// CreateGoogleMeetingTaskParams defines model for create_google_meeting_task_params.
type CreateGoogleMeetingTaskParams struct {
	// The meeting description
	Description            string `json:"description"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// The meeting summary
	Summary  string                                 `json:"summary"`
	TaskType *CreateGoogleMeetingTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateGoogleMeetingTaskParamsTaskType defines model for CreateGoogleMeetingTaskParams.TaskType.
type CreateGoogleMeetingTaskParamsTaskType string

// CreateIncidentTaskParams defines model for create_incident_task_params.
type CreateIncidentTaskParams struct {
	EnvironmentIds   *[]string `json:"environment_ids,omitempty"`
	FunctionalityIds *[]string `json:"functionality_ids,omitempty"`
	GroupIds         *[]string `json:"group_ids,omitempty"`
	IncidentTypeIds  *[]string `json:"incident_type_ids,omitempty"`
	Private          *bool     `json:"private,omitempty"`
	ServiceIds       *[]string `json:"service_ids,omitempty"`
	SeverityId       *string   `json:"severity_id,omitempty"`

	// The incident summary
	Summary  *string                           `json:"summary,omitempty"`
	TaskType *CreateIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title string `json:"title"`
}

// CreateIncidentTaskParamsTaskType defines model for CreateIncidentTaskParams.TaskType.
type CreateIncidentTaskParamsTaskType string

// CreateJiraIssueTaskParams defines model for create_jira_issue_task_params.
type CreateJiraIssueTaskParams struct {
	// The assigned user's email.
	AssignUserEmail *string `json:"assign_user_email,omitempty"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON.
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The issue description.
	Description *string `json:"description,omitempty"`

	// The due date.
	DueDate *string `json:"due_date,omitempty"`

	// The issue type id and display name.
	IssueType struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"issue_type"`

	// The issue labels.
	Labels *string `json:"labels,omitempty"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The project key.
	ProjectKey string `json:"project_key"`

	// The reporter user's email.
	ReporterUserEmail *string `json:"reporter_user_email,omitempty"`

	// The status id and display name.
	Status *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"status,omitempty"`
	TaskType *CreateJiraIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title.
	Title string `json:"title"`
}

// CreateJiraIssueTaskParamsTaskType defines model for CreateJiraIssueTaskParams.TaskType.
type CreateJiraIssueTaskParamsTaskType string

// CreateJiraSubtaskTaskParams defines model for create_jira_subtask_task_params.
type CreateJiraSubtaskTaskParams struct {
	// The assigned user's email.
	AssignUserEmail *string `json:"assign_user_email,omitempty"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON.
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The issue description.
	Description *string `json:"description,omitempty"`

	// The due date.
	DueDate *string `json:"due_date,omitempty"`

	// The issue labels.
	Labels *string `json:"labels,omitempty"`

	// The parent issue.
	ParentIssueId string `json:"parent_issue_id"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The project key.
	ProjectKey string `json:"project_key"`

	// The reporter user's email.
	ReporterUserEmail *string `json:"reporter_user_email,omitempty"`

	// The status id and display name.
	Status *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"status,omitempty"`

	// The issue type id and display name.
	SubtaskIssueType struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"subtask_issue_type"`
	TaskType *CreateJiraSubtaskTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title.
	Title string `json:"title"`
}

// CreateJiraSubtaskTaskParamsTaskType defines model for CreateJiraSubtaskTaskParams.TaskType.
type CreateJiraSubtaskTaskParamsTaskType string

// CreateLinearIssueTaskParams defines model for create_linear_issue_task_params.
type CreateLinearIssueTaskParams struct {
	// The issue description.
	Description *string `json:"description,omitempty"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The state id and display name.
	State struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"state"`
	TaskType *CreateLinearIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The team id and display name.
	Team struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"team"`

	// The issue title.
	Title string `json:"title"`
}

// CreateLinearIssueTaskParamsTaskType defines model for CreateLinearIssueTaskParams.TaskType.
type CreateLinearIssueTaskParamsTaskType string

// CreateLinearSubtaskIssueTaskParams defines model for create_linear_subtask_issue_task_params.
type CreateLinearSubtaskIssueTaskParams struct {
	// The issue description.
	Description *string `json:"description,omitempty"`

	// The parent issue.
	ParentIssueId string `json:"parent_issue_id"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The state id and display name.
	State struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"state"`
	TaskType *CreateLinearSubtaskIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title.
	Title string `json:"title"`
}

// CreateLinearSubtaskIssueTaskParamsTaskType defines model for CreateLinearSubtaskIssueTaskParams.TaskType.
type CreateLinearSubtaskIssueTaskParamsTaskType string

// CreateMicrosoftTeamsMeetingTaskParams defines model for create_microsoft_teams_meeting_task_params.
type CreateMicrosoftTeamsMeetingTaskParams struct {
	// The meeting name
	Name                   string `json:"name"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// The meeting subject
	Subject  string                                         `json:"subject"`
	TaskType *CreateMicrosoftTeamsMeetingTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateMicrosoftTeamsMeetingTaskParamsTaskType defines model for CreateMicrosoftTeamsMeetingTaskParams.TaskType.
type CreateMicrosoftTeamsMeetingTaskParamsTaskType string

// CreateNotionPageTaskParams defines model for create_notion_page_task_params.
type CreateNotionPageTaskParams struct {
	// The parent page id and display name.
	ParentPage struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_page"`

	// Post mortem template to use when creating page task, if desired.
	PostMortemTemplateId *string                             `json:"post_mortem_template_id,omitempty"`
	TaskType             *CreateNotionPageTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateNotionPageTaskParamsTaskType defines model for CreateNotionPageTaskParams.TaskType.
type CreateNotionPageTaskParamsTaskType string

// CreateServiceNowIncidentTaskParams defines model for create_service_now_incident_task_params.
type CreateServiceNowIncidentTaskParams struct {
	// The completion id and display name.
	Completion *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion,omitempty"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON.
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The incident description
	Description *string `json:"description,omitempty"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`
	TaskType *CreateServiceNowIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title string `json:"title"`
}

// CreateServiceNowIncidentTaskParamsTaskType defines model for CreateServiceNowIncidentTaskParams.TaskType.
type CreateServiceNowIncidentTaskParamsTaskType string

// CreateShortcutStoryTaskParams defines model for create_shortcut_story_task_params.
type CreateShortcutStoryTaskParams struct {
	// The archivation id and display name.
	Archivation struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"archivation"`

	// The incident description
	Description *string `json:"description,omitempty"`

	// The story due date (ISO8601 format).
	DueDate *string                           `json:"due_date,omitempty"`
	Kind    CreateShortcutStoryTaskParamsKind `json:"kind"`

	// The story labels.
	Labels *string `json:"labels,omitempty"`

	// The project id and display name.
	Project struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"project"`
	TaskType *CreateShortcutStoryTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title string `json:"title"`
}

// CreateShortcutStoryTaskParamsKind defines model for CreateShortcutStoryTaskParams.Kind.
type CreateShortcutStoryTaskParamsKind string

// CreateShortcutStoryTaskParamsTaskType defines model for CreateShortcutStoryTaskParams.TaskType.
type CreateShortcutStoryTaskParamsTaskType string

// CreateShortcutTaskTaskParams defines model for create_shortcut_task_task_params.
type CreateShortcutTaskTaskParams struct {
	// The completion id and display name.
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// The task description
	Description string `json:"description"`

	// The parent story
	ParentStoryId string                                `json:"parent_story_id"`
	TaskType      *CreateShortcutTaskTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateShortcutTaskTaskParamsTaskType defines model for CreateShortcutTaskTaskParams.TaskType.
type CreateShortcutTaskTaskParamsTaskType string

// CreateTrelloCardTaskParams defines model for create_trello_card_task_params.
type CreateTrelloCardTaskParams struct {
	// The archivation id and display name.
	Archivation *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"archivation,omitempty"`

	// The board id and display name.
	Board struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"board"`

	// The card description
	Description *string `json:"description,omitempty"`

	// The due date (ISO8601 format)
	DueDate *string `json:"due_date,omitempty"`
	Labels  *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"labels,omitempty"`

	// The list id and display name.
	List struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"list"`
	TaskType *CreateTrelloCardTaskParamsTaskType `json:"task_type,omitempty"`

	// The card title
	Title string `json:"title"`
}

// CreateTrelloCardTaskParamsTaskType defines model for CreateTrelloCardTaskParams.TaskType.
type CreateTrelloCardTaskParamsTaskType string

// CreateWebexMeetingTaskParams defines model for create_webex_meeting_task_params.
type CreateWebexMeetingTaskParams struct {
	// The meeting password
	Password               *string `json:"password,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *CreateWebexMeetingTaskParamsTaskType `json:"task_type,omitempty"`

	// The meeting topic
	Topic string `json:"topic"`
}

// CreateWebexMeetingTaskParamsTaskType defines model for CreateWebexMeetingTaskParams.TaskType.
type CreateWebexMeetingTaskParamsTaskType string

// CreateZendeskTicketTaskParams defines model for create_zendesk_ticket_task_params.
type CreateZendeskTicketTaskParams struct {
	// The ticket comment.
	Comment *string `json:"comment,omitempty"`

	// The completion id and display name.
	Completion *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion,omitempty"`
	Kind CreateZendeskTicketTaskParamsKind `json:"kind"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The ticket subject.
	Subject string `json:"subject"`

	// The ticket tags.
	Tags     *string                                `json:"tags,omitempty"`
	TaskType *CreateZendeskTicketTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateZendeskTicketTaskParamsKind defines model for CreateZendeskTicketTaskParams.Kind.
type CreateZendeskTicketTaskParamsKind string

// CreateZendeskTicketTaskParamsTaskType defines model for CreateZendeskTicketTaskParams.TaskType.
type CreateZendeskTicketTaskParamsTaskType string

// CreateZoomMeetingTaskParams defines model for create_zoom_meeting_task_params.
type CreateZoomMeetingTaskParams struct {
	AutoRecording *CreateZoomMeetingTaskParamsAutoRecording `json:"auto_recording,omitempty"`

	// The email to use if creating as email.
	CreateAsEmail *string `json:"create_as_email,omitempty"`

	// The meeting password
	Password               *string `json:"password,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *CreateZoomMeetingTaskParamsTaskType `json:"task_type,omitempty"`

	// The meeting topic
	Topic string `json:"topic"`
}

// CreateZoomMeetingTaskParamsAutoRecording defines model for CreateZoomMeetingTaskParams.AutoRecording.
type CreateZoomMeetingTaskParamsAutoRecording string

// CreateZoomMeetingTaskParamsTaskType defines model for CreateZoomMeetingTaskParams.TaskType.
type CreateZoomMeetingTaskParamsTaskType string

// CustomField defines model for custom_field.
type CustomField struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the custom_field
	Description *string `json:"description"`

	// The name of the custom_field
	Label string `json:"label"`

	// The position of the custom_field
	Position float32                `json:"position"`
	Required *[]CustomFieldRequired `json:"required"`
	Shown    []CustomFieldShown     `json:"shown"`

	// The slug of the custom_field
	Slug string `json:"slug"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// Where the custom_field is required
type CustomFieldRequired string

// Where the custom_field is shown
type CustomFieldShown string

// CustomFieldList defines model for custom_field_list.
type CustomFieldList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/custom_field)
			CustomField `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the custom_field
		Id   string                  `json:"id"`
		Type CustomFieldListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// CustomFieldListDataType defines model for CustomFieldList.Data.Type.
type CustomFieldListDataType string

// CustomFieldOption defines model for custom_field_option.
type CustomFieldOption struct {
	// The hex color of the custom_field_option
	Color string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The ID of the parent custom field
	CustomFieldId *float32 `json:"custom_field_id,omitempty"`

	// The position of the custom_field_option
	Position float32 `json:"position"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The value of the custom_field_option
	Value string `json:"value"`
}

// CustomFieldOptionList defines model for custom_field_option_list.
type CustomFieldOptionList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/custom_field_option)
			CustomFieldOption `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the custom_field_option
		Id   string                        `json:"id"`
		Type CustomFieldOptionListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// CustomFieldOptionListDataType defines model for CustomFieldOptionList.Data.Type.
type CustomFieldOptionListDataType string

// CustomFieldOptionResponse defines model for custom_field_option_response.
type CustomFieldOptionResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/custom_field_option)
			CustomFieldOption `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the custom_field_option
		Id   string                            `json:"id"`
		Type CustomFieldOptionResponseDataType `json:"type"`
	} `json:"data"`
}

// CustomFieldOptionResponseDataType defines model for CustomFieldOptionResponse.Data.Type.
type CustomFieldOptionResponseDataType string

// CustomFieldResponse defines model for custom_field_response.
type CustomFieldResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/custom_field)
			CustomField `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the custom_field
		Id   string                      `json:"id"`
		Type CustomFieldResponseDataType `json:"type"`
	} `json:"data"`
}

// CustomFieldResponseDataType defines model for CustomFieldResponse.Data.Type.
type CustomFieldResponseDataType string

// Dashboard defines model for dashboard.
type Dashboard struct {
	// Date of creation
	CreatedAt *string `json:"created_at,omitempty"`

	// The name of the dashboard
	Name string `json:"name"`

	// The owner type of the dashboard
	Owner DashboardOwner `json:"owner"`

	// The grouping period for dashbaord panel data
	Period *string `json:"period"`

	// Whether the dashboard is public
	Public bool `json:"public"`

	// The date range for dashboard panel data
	Range *string `json:"range"`

	// The dashboard team
	TeamId *float32 `json:"team_id,omitempty"`

	// Date of last update
	UpdatedAt *string `json:"updated_at,omitempty"`

	// The dashboard user owner if owner is of type user
	UserId *string `json:"user_id"`
}

// The owner type of the dashboard
type DashboardOwner string

// DashboardList defines model for dashboard_list.
type DashboardList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/dashboard)
			Dashboard `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the dashboard
		Id   string                `json:"id"`
		Type DashboardListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// DashboardListDataType defines model for DashboardList.Data.Type.
type DashboardListDataType string

// DashboardPanel defines model for dashboard_panel.
type DashboardPanel struct {
	// The panel dashboard
	DashboardId *string        `json:"dashboard_id,omitempty"`
	Data        *[]interface{} `json:"data,omitempty"`

	// The name of the dashboard_panel
	Name   *string `json:"name"`
	Params struct {
		Datasets *[]struct {
			Aggregate *struct {
				Cumulative *bool                                           `json:"cumulative"`
				Key        *string                                         `json:"key"`
				Operation  *DashboardPanelParamsDatasetsAggregateOperation `json:"operation,omitempty"`
			} `json:"aggregate"`
			Collection *DashboardPanelParamsDatasetsCollection `json:"collection,omitempty"`
			Filter     *[]struct {
				Operation *DashboardPanelParamsDatasetsFilterOperation `json:"operation,omitempty"`
				Rules     *[]struct {
					Condition *string `json:"condition,omitempty"`
					Key       *string                                           `json:"key,omitempty"`
					Operation *string `json:"operation,omitempty"`
					Value     *string                                           `json:"value,omitempty"`
				} `json:"rules,omitempty"`
			} `json:"filter,omitempty"`
			GroupBy *string `json:"group_by"`
			Name    *string `json:"name"`
		} `json:"datasets,omitempty"`
		Display *DashboardPanelParamsDisplay `json:"display,omitempty"`
	} `json:"params"`
	Position *struct {
		H float32 `json:"h"`
		W float32 `json:"w"`
		X float32 `json:"x"`
		Y float32 `json:"y"`
	} `json:"position"`
}

// DashboardPanelParamsDatasetsAggregateOperation defines model for DashboardPanel.Params.Datasets.Aggregate.Operation.
type DashboardPanelParamsDatasetsAggregateOperation string

// DashboardPanelParamsDatasetsCollection defines model for DashboardPanel.Params.Datasets.Collection.
type DashboardPanelParamsDatasetsCollection string

// DashboardPanelParamsDatasetsFilterOperation defines model for DashboardPanel.Params.Datasets.Filter.Operation.
type DashboardPanelParamsDatasetsFilterOperation string

// DashboardPanelParamsDatasetsFilterRulesOperation defines model for DashboardPanel.Params.Datasets.Filter.Rules.Operation.
type DashboardPanelParamsDatasetsFilterRulesOperation string

// DashboardPanelParamsDisplay defines model for DashboardPanel.Params.Display.
type DashboardPanelParamsDisplay string

// DashboardPanelList defines model for dashboard_panel_list.
type DashboardPanelList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/dashboard_panel)
			DashboardPanel `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the dashboard_panel
		Id   string                     `json:"id"`
		Type DashboardPanelListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// DashboardPanelListDataType defines model for DashboardPanelList.Data.Type.
type DashboardPanelListDataType string

// DashboardPanelResponse defines model for dashboard_panel_response.
type DashboardPanelResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/dashboard_panel)
			DashboardPanel `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the dashboard_panel
		Id   string                         `json:"id"`
		Type DashboardPanelResponseDataType `json:"type"`
	} `json:"data"`
}

// DashboardPanelResponseDataType defines model for DashboardPanelResponse.Data.Type.
type DashboardPanelResponseDataType string

// DashboardResponse defines model for dashboard_response.
type DashboardResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/dashboard)
			Dashboard `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the dashboard
		Id   string                    `json:"id"`
		Type DashboardResponseDataType `json:"type"`
	} `json:"data"`
}

// DashboardResponseDataType defines model for DashboardResponse.Data.Type.
type DashboardResponseDataType string

// Environment defines model for environment.
type Environment struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the environment
	Description *string `json:"description"`

	// The name of the environment
	Name string `json:"name"`

	// The slug of the environment
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// EnvironmentList defines model for environment_list.
type EnvironmentList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/environment)
			Environment `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the environment
		Id   string                  `json:"id"`
		Type EnvironmentListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// EnvironmentListDataType defines model for EnvironmentList.Data.Type.
type EnvironmentListDataType string

// EnvironmentResponse defines model for environment_response.
type EnvironmentResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/environment)
			Environment `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the environment
		Id   string                      `json:"id"`
		Type EnvironmentResponseDataType `json:"type"`
	} `json:"data"`
}

// EnvironmentResponseDataType defines model for EnvironmentResponse.Data.Type.
type EnvironmentResponseDataType string

// ErrorsList defines model for errors_list.
type ErrorsList struct {
	Errors *[]struct {
		Code   *string `json:"code"`
		Detail *string `json:"detail"`
		Status string  `json:"status"`
		Title  string  `json:"title"`
	} `json:"errors,omitempty"`
}

// Functionality defines model for functionality.
type Functionality struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the functionality
	Description *string `json:"description"`

	// Environments associated with this functionality
	EnvironmentIds *[]interface{} `json:"environment_ids"`

	// The name of the functionality
	Name string `json:"name"`

	// Emails attached to the functionality
	NotifyEmails *[]string `json:"notify_emails"`

	// Owner Teams associated with this functionality
	OwnersGroupIds *[]interface{} `json:"owners_group_ids"`

	// The public description of the functionality
	PublicDescription *string `json:"public_description"`

	// Services associated with this functionality
	ServiceIds *[]interface{} `json:"service_ids"`

	// Slack Aliases associated with this service
	SlackAliases *[]struct {
		// Slack alias ID
		Id string `json:"id"`

		// Slack alias name
		Name string `json:"name"`
	} `json:"slack_aliases"`

	// Slack Channels associated with this service
	SlackChannels *[]struct {
		// Slack channel ID
		Id string `json:"id"`

		// Slack channel name
		Name string `json:"name"`
	} `json:"slack_channels"`

	// The slug of the functionality
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// FunctionalityList defines model for functionality_list.
type FunctionalityList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/functionality)
			Functionality `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the functionality
		Id   string                    `json:"id"`
		Type FunctionalityListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// FunctionalityListDataType defines model for FunctionalityList.Data.Type.
type FunctionalityListDataType string

// FunctionalityResponse defines model for functionality_response.
type FunctionalityResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/functionality)
			Functionality `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the functionality
		Id   string                        `json:"id"`
		Type FunctionalityResponseDataType `json:"type"`
	} `json:"data"`
}

// FunctionalityResponseDataType defines model for FunctionalityResponse.Data.Type.
type FunctionalityResponseDataType string

// GetGithubCommitsTaskParams defines model for get_github_commits_task_params.
type GetGithubCommitsTaskParams interface{}

// GetGitlabCommitsTaskParams defines model for get_gitlab_commits_task_params.
type GetGitlabCommitsTaskParams interface{}

// GetPulsesTaskParams defines model for get_pulses_task_params.
type GetPulsesTaskParams struct {
	EnvironmentIds *[]string `json:"environment_ids,omitempty"`
	Labels         *[]string `json:"labels,omitempty"`

	// How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)
	PastDuration        string `json:"past_duration"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	Refs       *[]string                    `json:"refs,omitempty"`
	ServiceIds *[]string                    `json:"service_ids,omitempty"`
	Sources    *[]string                    `json:"sources,omitempty"`
	TaskType   *GetPulsesTaskParamsTaskType `json:"task_type,omitempty"`
}

// GetPulsesTaskParamsTaskType defines model for GetPulsesTaskParams.TaskType.
type GetPulsesTaskParamsTaskType string

// HttpClientTaskParams defines model for http_client_task_params.
type HttpClientTaskParams struct {
	// HTTP body.
	Body     *string `json:"body,omitempty"`
	EventUrl *string `json:"event_url,omitempty"`

	// JSON map of HTTP headers.
	Headers *string `json:"headers,omitempty"`

	// HTTP method.
	Method *HttpClientTaskParamsMethod `json:"method,omitempty"`

	// JSON map of HTTP query parameters.
	Params              *string `json:"params,omitempty"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// HTTP status code.
	SucceedOnStatus string                        `json:"succeed_on_status"`
	TaskType        *HttpClientTaskParamsTaskType `json:"task_type,omitempty"`
	Url             *string                       `json:"url,omitempty"`
}

// HTTP method.
type HttpClientTaskParamsMethod string

// HttpClientTaskParamsTaskType defines model for HttpClientTaskParams.TaskType.
type HttpClientTaskParamsTaskType string

// Incident defines model for incident.
type Incident struct {
	// Date of acknowledgment
	AcknowledgedAt *string `json:"acknowledged_at"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Date of detection
	DetectedAt *string `json:"detected_at"`

	// The Environment ID's to attach to the incident
	EnvironmentIds *[]string `json:"environment_ids"`

	// The Functionality ID's to attach to the incident
	FunctionalityIds *[]string `json:"functionality_ids"`

	// The Team ID's to attach to the incident
	GroupIds *[]string `json:"group_ids"`

	// The Environment ID's to attach to the incident
	IncidentTypesIds *[]string `json:"incident_types_ids"`

	// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
	Labels *map[string]interface{} `json:"labels"`

	// Date of mitigation
	MitigatedAt *string `json:"mitigated_at"`

	// Date of resolution
	ResolvedAt *string `json:"resolved_at"`

	// The Service ID's to attach to the incident
	ServiceIds *[]string `json:"service_ids"`

	// The Severity ID to attach to the incident
	SeverityId *string `json:"severity_id"`

	// Date of start
	StartedAt *string `json:"started_at"`

	// The summary of the incident
	Summary *string `json:"summary"`

	// The title of the incident
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentActionItem defines model for incident_action_item.
type IncidentActionItem struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident action item
	Description *string `json:"description"`

	// The kind of the incident action item
	Kind *IncidentActionItemKind `json:"kind,omitempty"`

	// The priority of the incident action item
	Priority *IncidentActionItemPriority `json:"priority,omitempty"`

	// The status of incident the action item
	Status *IncidentActionItemStatus `json:"status,omitempty"`

	// The summary of the incident action item
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The kind of the incident action item
type IncidentActionItemKind string

// The priority of the incident action item
type IncidentActionItemPriority string

// The status of incident the action item
type IncidentActionItemStatus string

// IncidentActionItemList defines model for incident_action_item_list.
type IncidentActionItemList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_action_item)
			IncidentActionItem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident action item
		Id   string                         `json:"id"`
		Type IncidentActionItemListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentActionItemListDataType defines model for IncidentActionItemList.Data.Type.
type IncidentActionItemListDataType string

// IncidentActionItemResponse defines model for incident_action_item_response.
type IncidentActionItemResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_action_item)
			IncidentActionItem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident action item
		Id   string                             `json:"id"`
		Type IncidentActionItemResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentActionItemResponseDataType defines model for IncidentActionItemResponse.Data.Type.
type IncidentActionItemResponseDataType string

// IncidentCustomFieldSelection defines model for incident_custom_field_selection.
type IncidentCustomFieldSelection struct {
	SelectedOptionIds []float32 `json:"selected_option_ids"`

	// The value of the incident_custom_field_selection
	Value *string `json:"value"`
}

// IncidentCustomFieldSelectionList defines model for incident_custom_field_selection_list.
type IncidentCustomFieldSelectionList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_custom_field_selection)
			IncidentCustomFieldSelection `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident_custom_field_selection
		Id   string                                   `json:"id"`
		Type IncidentCustomFieldSelectionListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentCustomFieldSelectionListDataType defines model for IncidentCustomFieldSelectionList.Data.Type.
type IncidentCustomFieldSelectionListDataType string

// IncidentCustomFieldSelectionResponse defines model for incident_custom_field_selection_response.
type IncidentCustomFieldSelectionResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_custom_field_selection)
			IncidentCustomFieldSelection `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident_custom_field_selection
		Id   string                                       `json:"id"`
		Type IncidentCustomFieldSelectionResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentCustomFieldSelectionResponseDataType defines model for IncidentCustomFieldSelectionResponse.Data.Type.
type IncidentCustomFieldSelectionResponseDataType string

// IncidentEvent defines model for incident_event.
type IncidentEvent struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The summary of the incident event
	Event string `json:"event"`

	// Date of occurence
	OccurredAt string `json:"occurred_at"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The visibility of the incident action item
	Visibility *IncidentEventVisibility `json:"visibility,omitempty"`
}

// The visibility of the incident action item
type IncidentEventVisibility string

// IncidentEventList defines model for incident_event_list.
type IncidentEventList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_event)
			IncidentEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string                    `json:"id"`
		Type IncidentEventListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentEventListDataType defines model for IncidentEventList.Data.Type.
type IncidentEventListDataType string

// IncidentEventResponse defines model for incident_event_response.
type IncidentEventResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_event)
			IncidentEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string                        `json:"id"`
		Type IncidentEventResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentEventResponseDataType defines model for IncidentEventResponse.Data.Type.
type IncidentEventResponseDataType string

// IncidentFeedback defines model for incident_feedback.
type IncidentFeedback struct {
	// Is the feedback anonymous?
	Anonymous bool `json:"anonymous"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The feedback of the incident feedback
	Feedback string `json:"feedback"`

	// The rating of the incident feedback
	Rating IncidentFeedbackRating `json:"rating"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The rating of the incident feedback
type IncidentFeedbackRating int

// IncidentFeedbackList defines model for incident_feedback_list.
type IncidentFeedbackList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_feedback)
			IncidentFeedback `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident feedback
		Id   string                       `json:"id"`
		Type IncidentFeedbackListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentFeedbackListDataType defines model for IncidentFeedbackList.Data.Type.
type IncidentFeedbackListDataType string

// IncidentFeedbackResponse defines model for incident_feedback_response.
type IncidentFeedbackResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_feedback)
			IncidentFeedback `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident feedback
		Id   string                           `json:"id"`
		Type IncidentFeedbackResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentFeedbackResponseDataType defines model for IncidentFeedbackResponse.Data.Type.
type IncidentFeedbackResponseDataType string

// IncidentList defines model for incident_list.
type IncidentList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident)
			Incident `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident
		Id   string               `json:"id"`
		Type IncidentListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentListDataType defines model for IncidentList.Data.Type.
type IncidentListDataType string

// IncidentPostMortem defines model for incident_post_mortem.
type IncidentPostMortem struct {
	// The content of the incident postmortem (Only if internal)
	Content *string `json:"content"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Date of mitigation
	MitigatedAt *string `json:"mitigated_at"`

	// Date of resolution
	ResolvedAt *string `json:"resolved_at"`

	// Show alerts attached to the incident
	ShowAlertsAttached *bool `json:"show_alerts_attached,omitempty"`

	// Show services impacted of the incident postmortem
	ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

	// Show groups impacted of the incident postmortem
	ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

	// Show functionalities impacted of the incident postmortem
	ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

	// Show events timeline of the incident postmortem
	ShowTimeline *bool `json:"show_timeline,omitempty"`

	// Show action items in the timeline of the incident postmortem
	ShowTimelineActionItems *bool `json:"show_timeline_action_items,omitempty"`

	// Show workflow events in the timeline of the incident postmortem
	ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

	// Show tasks in the timeline of the incident postmortem
	ShowTimelineTasks *bool `json:"show_timeline_tasks,omitempty"`

	// Show trail events in the timeline of the incident postmortem
	ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

	// Date of started at
	StartedAt *string `json:"started_at"`

	// The status of the incident postmortem
	Status *IncidentPostMortemStatus `json:"status,omitempty"`

	// The title of the incident postmortem
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The url to the incident postmortem
	Url *string `json:"url,omitempty"`
}

// The status of the incident postmortem
type IncidentPostMortemStatus string

// IncidentPostMortemList defines model for incident_post_mortem_list.
type IncidentPostMortemList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_post_mortem)
			IncidentPostMortem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident postmortem
		Id   string                         `json:"id"`
		Type IncidentPostMortemListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentPostMortemListDataType defines model for IncidentPostMortemList.Data.Type.
type IncidentPostMortemListDataType string

// IncidentPostMortemResponse defines model for incident_post_mortem_response.
type IncidentPostMortemResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_post_mortem)
			IncidentPostMortem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident postmortem
		Id   string                             `json:"id"`
		Type IncidentPostMortemResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentPostMortemResponseDataType defines model for IncidentPostMortemResponse.Data.Type.
type IncidentPostMortemResponseDataType string

// IncidentResponse defines model for incident_response.
type IncidentResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident)
			Incident `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident
		Id   string                   `json:"id"`
		Type IncidentResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentResponseDataType defines model for IncidentResponse.Data.Type.
type IncidentResponseDataType string

// IncidentRole defines model for incident_role.
type IncidentRole struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident role
	Description *string `json:"description"`

	// The name of the incident role
	Name string `json:"name"`

	// The slug of the incident role
	Slug *string `json:"slug,omitempty"`

	// The summary of the incident role
	Summary *string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentRoleList defines model for incident_role_list.
type IncidentRoleList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role)
			IncidentRole `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident role
		Id   string                   `json:"id"`
		Type IncidentRoleListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentRoleListDataType defines model for IncidentRoleList.Data.Type.
type IncidentRoleListDataType string

// IncidentRoleResponse defines model for incident_role_response.
type IncidentRoleResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role)
			IncidentRole `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident role
		Id   string                       `json:"id"`
		Type IncidentRoleResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentRoleResponseDataType defines model for IncidentRoleResponse.Data.Type.
type IncidentRoleResponseDataType string

// IncidentRoleTask defines model for incident_role_task.
type IncidentRoleTask struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident task
	Description *string `json:"description"`

	// The priority of the incident task
	Priority *IncidentRoleTaskPriority `json:"priority,omitempty"`

	// The task of the incident task
	Task string `json:"task"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The priority of the incident task
type IncidentRoleTaskPriority string

// IncidentRoleTaskList defines model for incident_role_task_list.
type IncidentRoleTaskList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role_task)
			IncidentRoleTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string                       `json:"id"`
		Type IncidentRoleTaskListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentRoleTaskListDataType defines model for IncidentRoleTaskList.Data.Type.
type IncidentRoleTaskListDataType string

// IncidentRoleTaskResponse defines model for incident_role_task_response.
type IncidentRoleTaskResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role_task)
			IncidentRoleTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string                           `json:"id"`
		Type IncidentRoleTaskResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentRoleTaskResponseDataType defines model for IncidentRoleTaskResponse.Data.Type.
type IncidentRoleTaskResponseDataType string

// IncidentStatusPageEvent defines model for incident_status_page_event.
type IncidentStatusPageEvent struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The summary of the incident event
	Event string `json:"event"`

	// Notify all status pages subscribers
	NotifySubscribers *bool `json:"notify_subscribers,omitempty"`

	// Date of start
	StartedAt string `json:"started_at"`

	// The status of the incident event
	Status *IncidentStatusPageEventStatus `json:"status,omitempty"`

	// Unique ID of the status page you wish to post the event to
	StatusPageId *string `json:"status_page_id,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The status of the incident event
type IncidentStatusPageEventStatus string

// IncidentStatusPageEventList defines model for incident_status_page_event_list.
type IncidentStatusPageEventList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_status_page_event)
			IncidentStatusPageEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string                              `json:"id"`
		Type IncidentStatusPageEventListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentStatusPageEventListDataType defines model for IncidentStatusPageEventList.Data.Type.
type IncidentStatusPageEventListDataType string

// IncidentStatusPageEventResponse defines model for incident_status_page_event_response.
type IncidentStatusPageEventResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_status_page_event)
			IncidentStatusPageEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string                                  `json:"id"`
		Type IncidentStatusPageEventResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentStatusPageEventResponseDataType defines model for IncidentStatusPageEventResponse.Data.Type.
type IncidentStatusPageEventResponseDataType string

// IncidentTriggerParams defines model for incident_trigger_params.
type IncidentTriggerParams struct {
	IncidentCondition               *IncidentTriggerParamsIncidentCondition              `json:"incident_condition,omitempty"`
	IncidentConditionAcknowledgedAt *interface{}                                         `json:"incident_condition_acknowledged_at,omitempty"`
	IncidentConditionDetectedAt     *interface{}                                         `json:"incident_condition_detected_at,omitempty"`
	IncidentConditionEnvironment    *IncidentTriggerParamsIncidentConditionEnvironment   `json:"incident_condition_environment,omitempty"`
	IncidentConditionFunctionality  *IncidentTriggerParamsIncidentConditionFunctionality `json:"incident_condition_functionality,omitempty"`
	IncidentConditionGroup          *IncidentTriggerParamsIncidentConditionGroup         `json:"incident_condition_group,omitempty"`
	IncidentConditionIncidentRoles  *interface{}                                         `json:"incident_condition_incident_roles,omitempty"`
	IncidentConditionIncidentType   *IncidentTriggerParamsIncidentConditionIncidentType  `json:"incident_condition_incident_type,omitempty"`
	IncidentConditionKind           *IncidentTriggerParamsIncidentConditionKind          `json:"incident_condition_kind,omitempty"`
	IncidentConditionMitigatedAt    *interface{}                                         `json:"incident_condition_mitigated_at,omitempty"`
	IncidentConditionResolvedAt     *interface{}                                         `json:"incident_condition_resolved_at,omitempty"`
	IncidentConditionService        *IncidentTriggerParamsIncidentConditionService       `json:"incident_condition_service,omitempty"`
	IncidentConditionSeverity       *IncidentTriggerParamsIncidentConditionSeverity      `json:"incident_condition_severity,omitempty"`
	IncidentConditionStartedAt      *interface{}                                         `json:"incident_condition_started_at,omitempty"`
	IncidentConditionStatus         *IncidentTriggerParamsIncidentConditionStatus        `json:"incident_condition_status,omitempty"`
	IncidentConditionSummary        *interface{}                                         `json:"incident_condition_summary,omitempty"`
	IncidentConditionVisibility     *IncidentTriggerParamsIncidentConditionVisibility    `json:"incident_condition_visibility,omitempty"`
	IncidentConditionalInactivity   *interface{}                                         `json:"incident_conditional_inactivity,omitempty"`
	IncidentKinds                   *[]IncidentTriggerParamsIncidentKinds                `json:"incident_kinds,omitempty"`
	IncidentStatuses                *[]IncidentTriggerParamsIncidentStatuses             `json:"incident_statuses,omitempty"`
	IncidentVisibilities            *[]bool                                              `json:"incident_visibilities,omitempty"`
	TriggerType                     IncidentTriggerParamsTriggerType                     `json:"trigger_type"`
	Triggers                        *[]IncidentTriggerParamsTriggers                     `json:"triggers,omitempty"`
}

// IncidentTriggerParamsIncidentCondition defines model for IncidentTriggerParams.IncidentCondition.
type IncidentTriggerParamsIncidentCondition string

// IncidentTriggerParamsIncidentConditionEnvironment defines model for IncidentTriggerParams.IncidentConditionEnvironment.
type IncidentTriggerParamsIncidentConditionEnvironment string

// IncidentTriggerParamsIncidentConditionFunctionality defines model for IncidentTriggerParams.IncidentConditionFunctionality.
type IncidentTriggerParamsIncidentConditionFunctionality string

// IncidentTriggerParamsIncidentConditionGroup defines model for IncidentTriggerParams.IncidentConditionGroup.
type IncidentTriggerParamsIncidentConditionGroup string

// IncidentTriggerParamsIncidentConditionIncidentType defines model for IncidentTriggerParams.IncidentConditionIncidentType.
type IncidentTriggerParamsIncidentConditionIncidentType string

// IncidentTriggerParamsIncidentConditionKind defines model for IncidentTriggerParams.IncidentConditionKind.
type IncidentTriggerParamsIncidentConditionKind string

// IncidentTriggerParamsIncidentConditionService defines model for IncidentTriggerParams.IncidentConditionService.
type IncidentTriggerParamsIncidentConditionService string

// IncidentTriggerParamsIncidentConditionSeverity defines model for IncidentTriggerParams.IncidentConditionSeverity.
type IncidentTriggerParamsIncidentConditionSeverity string

// IncidentTriggerParamsIncidentConditionStatus defines model for IncidentTriggerParams.IncidentConditionStatus.
type IncidentTriggerParamsIncidentConditionStatus string

// IncidentTriggerParamsIncidentConditionVisibility defines model for IncidentTriggerParams.IncidentConditionVisibility.
type IncidentTriggerParamsIncidentConditionVisibility string

// IncidentTriggerParamsIncidentKinds defines model for IncidentTriggerParams.IncidentKinds.
type IncidentTriggerParamsIncidentKinds string

// IncidentTriggerParamsIncidentStatuses defines model for IncidentTriggerParams.IncidentStatuses.
type IncidentTriggerParamsIncidentStatuses string

// IncidentTriggerParamsTriggerType defines model for IncidentTriggerParams.TriggerType.
type IncidentTriggerParamsTriggerType string

// Actions that trigger the workflow.
type IncidentTriggerParamsTriggers string

// IncidentType defines model for incident_type.
type IncidentType struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident type
	Description *string `json:"description"`

	// The name of the incident type
	Name string `json:"name"`

	// The slug of the incident type
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentTypeList defines model for incident_type_list.
type IncidentTypeList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_type)
			IncidentType `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident type
		Id   string                   `json:"id"`
		Type IncidentTypeListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentTypeListDataType defines model for IncidentTypeList.Data.Type.
type IncidentTypeListDataType string

// IncidentTypeResponse defines model for incident_type_response.
type IncidentTypeResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_type)
			IncidentType `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident type
		Id   string                       `json:"id"`
		Type IncidentTypeResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentTypeResponseDataType defines model for IncidentTypeResponse.Data.Type.
type IncidentTypeResponseDataType string

// IncidentsChartResponse defines model for incidents_chart_response.
type IncidentsChartResponse map[string]interface{}

// InviteToSlackChannelOpsgenieTaskParams defines model for invite_to_slack_channel_opsgenie_task_params.
type InviteToSlackChannelOpsgenieTaskParams struct {
	Channels *[]string `json:"channels,omitempty"`
	Schedule struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule"`
	TaskType *InviteToSlackChannelOpsgenieTaskParamsTaskType `json:"task_type,omitempty"`
}

// InviteToSlackChannelOpsgenieTaskParamsTaskType defines model for InviteToSlackChannelOpsgenieTaskParams.TaskType.
type InviteToSlackChannelOpsgenieTaskParamsTaskType string

// InviteToSlackChannelPagerdutyTaskParams defines model for invite_to_slack_channel_pagerduty_task_params.
type InviteToSlackChannelPagerdutyTaskParams interface{}

// InviteToSlackChannelTaskParams defines model for invite_to_slack_channel_task_params.
type InviteToSlackChannelTaskParams interface{}

// InviteToSlackChannelVictorOpsTaskParams defines model for invite_to_slack_channel_victor_ops_task_params.
type InviteToSlackChannelVictorOpsTaskParams struct {
	Channels *[]string `json:"channels,omitempty"`
	Schedule struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule"`
	TaskType *InviteToSlackChannelVictorOpsTaskParamsTaskType `json:"task_type,omitempty"`
}

// InviteToSlackChannelVictorOpsTaskParamsTaskType defines model for InviteToSlackChannelVictorOpsTaskParams.TaskType.
type InviteToSlackChannelVictorOpsTaskParamsTaskType string

// Links defines model for links.
type Links struct {
	First string  `json:"first"`
	Last  string  `json:"last"`
	Next  *string `json:"next"`
	Prev  *string `json:"prev"`
	Self  string  `json:"self"`
}

// MitigateIncident defines model for mitigate_incident.
type MitigateIncident struct {
	Data struct {
		Attributes struct {
			// How was the incident mitigated?
			MitigationMessage *string `json:"mitigation_message"`
		} `json:"attributes"`
		Type MitigateIncidentDataType `json:"type"`
	} `json:"data"`
}

// MitigateIncidentDataType defines model for MitigateIncident.Data.Type.
type MitigateIncidentDataType string

// NewAlert defines model for new_alert.
type NewAlert struct {
	Data struct {
		Attributes struct {
			// Additional data
			Data *map[string]interface{} `json:"data"`

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {
				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// The source of the alert (eg: zendesk)
			Source *NewAlertDataAttributesSource `json:"source,omitempty"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type NewAlertDataType `json:"type"`
	} `json:"data"`
}

// The source of the alert (eg: zendesk)
type NewAlertDataAttributesSource string

// NewAlertDataType defines model for NewAlert.Data.Type.
type NewAlertDataType string

// NewCause defines model for new_cause.
type NewCause struct {
	Data struct {
		Attributes struct {
			// The description of the cause
			Description *string `json:"description"`

			// The name of the cause
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewCauseDataType `json:"type"`
	} `json:"data"`
}

// NewCauseDataType defines model for NewCause.Data.Type.
type NewCauseDataType string

// NewCustomField defines model for new_custom_field.
type NewCustomField struct {
	Data struct {
		Attributes struct {
			// The description of the custom_field
			Description *string `json:"description"`

			// The name of the custom_field
			Label string `json:"label"`

			// The position of the custom_field
			Position *float32                                `json:"position,omitempty"`
			Required *[]NewCustomFieldDataAttributesRequired `json:"required"`
			Shown    *[]NewCustomFieldDataAttributesShown    `json:"shown,omitempty"`
		} `json:"attributes"`
		Type NewCustomFieldDataType `json:"type"`
	} `json:"data"`
}

// Where the custom_field is required
type NewCustomFieldDataAttributesRequired string

// Where the custom_field is shown
type NewCustomFieldDataAttributesShown string

// NewCustomFieldDataType defines model for NewCustomField.Data.Type.
type NewCustomFieldDataType string

// NewCustomFieldOption defines model for new_custom_field_option.
type NewCustomFieldOption struct {
	Data struct {
		Attributes struct {
			// The hex color of the custom_field_option
			Color *string `json:"color,omitempty"`

			// The position of the custom_field_option
			Position *float32 `json:"position,omitempty"`

			// The value of the custom_field_option
			Value string `json:"value"`
		} `json:"attributes"`
		Type NewCustomFieldOptionDataType `json:"type"`
	} `json:"data"`
}

// NewCustomFieldOptionDataType defines model for NewCustomFieldOption.Data.Type.
type NewCustomFieldOptionDataType string

// NewDashboard defines model for new_dashboard.
type NewDashboard struct {
	Data struct {
		Attributes struct {
			// The name of the dashboard
			Name string `json:"name"`

			// The owner type of the dashboard
			Owner NewDashboardDataAttributesOwner `json:"owner"`

			// The grouping period for dashbaord panel data
			Period *NewDashboardDataAttributesPeriod `json:"period"`

			// Whether the dashboard is public
			Public *bool `json:"public,omitempty"`

			// The date range for dashboard panel data
			Range *string `json:"range"`
		} `json:"attributes"`
		Type NewDashboardDataType `json:"type"`
	} `json:"data"`
}

// The owner type of the dashboard
type NewDashboardDataAttributesOwner string

// The grouping period for dashbaord panel data
type NewDashboardDataAttributesPeriod string

// NewDashboardDataType defines model for NewDashboard.Data.Type.
type NewDashboardDataType string

// NewDashboardPanel defines model for new_dashboard_panel.
type NewDashboardPanel struct {
	Data struct {
		Attributes struct {
			// The name of the dashboard_panel
			Name   *string `json:"name"`
			Params struct {
				Datasets *[]struct {
					Aggregate *struct {
						Cumulative *bool                                                            `json:"cumulative"`
						Key        *string                                                          `json:"key"`
						Operation  *NewDashboardPanelDataAttributesParamsDatasetsAggregateOperation `json:"operation,omitempty"`
					} `json:"aggregate"`
					Collection *NewDashboardPanelDataAttributesParamsDatasetsCollection `json:"collection,omitempty"`
					Filter     *[]struct {
						Operation *NewDashboardPanelDataAttributesParamsDatasetsFilterOperation `json:"operation,omitempty"`
						Rules     *[]struct {
							Condition *string `json:"condition,omitempty"`
							Key       *string                                                            `json:"key,omitempty"`
							Operation *string `json:"operation,omitempty"`
							Value     *string                                                            `json:"value,omitempty"`
						} `json:"rules,omitempty"`
					} `json:"filter,omitempty"`
					GroupBy *string `json:"group_by"`
					Name    *string `json:"name"`
				} `json:"datasets,omitempty"`
				Display *NewDashboardPanelDataAttributesParamsDisplay `json:"display,omitempty"`
			} `json:"params"`
			Position *struct {
				H float32 `json:"h"`
				W float32 `json:"w"`
				X float32 `json:"x"`
				Y float32 `json:"y"`
			} `json:"position"`
		} `json:"attributes"`
		Type NewDashboardPanelDataType `json:"type"`
	} `json:"data"`
}

// NewDashboardPanelDataAttributesParamsDatasetsAggregateOperation defines model for NewDashboardPanel.Data.Attributes.Params.Datasets.Aggregate.Operation.
type NewDashboardPanelDataAttributesParamsDatasetsAggregateOperation string

// NewDashboardPanelDataAttributesParamsDatasetsCollection defines model for NewDashboardPanel.Data.Attributes.Params.Datasets.Collection.
type NewDashboardPanelDataAttributesParamsDatasetsCollection string

// NewDashboardPanelDataAttributesParamsDatasetsFilterOperation defines model for NewDashboardPanel.Data.Attributes.Params.Datasets.Filter.Operation.
type NewDashboardPanelDataAttributesParamsDatasetsFilterOperation string

// NewDashboardPanelDataAttributesParamsDatasetsFilterRulesOperation defines model for NewDashboardPanel.Data.Attributes.Params.Datasets.Filter.Rules.Operation.
type NewDashboardPanelDataAttributesParamsDatasetsFilterRulesOperation string

// NewDashboardPanelDataAttributesParamsDisplay defines model for NewDashboardPanel.Data.Attributes.Params.Display.
type NewDashboardPanelDataAttributesParamsDisplay string

// NewDashboardPanelDataType defines model for NewDashboardPanel.Data.Type.
type NewDashboardPanelDataType string

// NewEnvironment defines model for new_environment.
type NewEnvironment struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the environment
			Description *string `json:"description"`

			// The name of the environment
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewEnvironmentDataType `json:"type"`
	} `json:"data"`
}

// NewEnvironmentDataType defines model for NewEnvironment.Data.Type.
type NewEnvironmentDataType string

// NewFunctionality defines model for new_functionality.
type NewFunctionality struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the functionality
			Description *string `json:"description"`

			// Environments associated with this functionality
			EnvironmentIds *[]interface{} `json:"environment_ids"`

			// The name of the functionality
			Name string `json:"name"`

			// Emails to attach to the functionality
			NotifyEmails *[]string `json:"notify_emails"`

			// Owner Teams associated with this functionality
			OwnersGroupIds *[]interface{} `json:"owners_group_ids"`

			// The public description of the functionality
			PublicDescription *string `json:"public_description"`

			// Services associated with this functionality
			ServiceIds *[]interface{} `json:"service_ids"`

			// Slack Aliases associated with this service
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this service
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type NewFunctionalityDataType `json:"type"`
	} `json:"data"`
}

// NewFunctionalityDataType defines model for NewFunctionality.Data.Type.
type NewFunctionalityDataType string

// NewIncident defines model for new_incident.
type NewIncident struct {
	Data struct {
		Attributes struct {
			// Date of acknowledgment
			AcknowledgedAt *string `json:"acknowledged_at"`

			// Date of cancellation
			CancelledAt *string `json:"cancelled_at"`

			// Create an incident on Slack as well (if integration enabled)
			CreateOnSlack *bool `json:"create_on_slack"`

			// Date of detection
			DetectedAt *string `json:"detected_at"`

			// The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// The Incident Type ID's to attach to the incident
			IncidentTypeIds *[]string `json:"incident_type_ids"`

			// The kind of the incident
			Kind *NewIncidentDataAttributesKind `json:"kind,omitempty"`

			// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// Emails you want to notify
			NotifyEmails *[]string `json:"notify_emails"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID to attach to the incident
			SeverityId *string `json:"severity_id"`

			// The slug of the incident
			Slug *string `json:"slug,omitempty"`

			// Date of start
			StartedAt *string `json:"started_at"`

			// The status of the incident event
			Status *NewIncidentDataAttributesStatus `json:"status,omitempty"`

			// The summary of the incident
			Summary *string `json:"summary"`

			// The title of the incident
			Title string `json:"title"`

			// The url to the incident
			Url *string `json:"url,omitempty"`
		} `json:"attributes"`
		Type NewIncidentDataType `json:"type"`
	} `json:"data"`
}

// The kind of the incident
type NewIncidentDataAttributesKind string

// The status of the incident event
type NewIncidentDataAttributesStatus string

// NewIncidentDataType defines model for NewIncident.Data.Type.
type NewIncidentDataType string

// NewIncidentActionItem defines model for new_incident_action_item.
type NewIncidentActionItem struct {
	Data struct {
		Attributes struct {
			// The description of the incident action item
			Description *string `json:"description"`

			// The kind of the incident action item
			Kind *NewIncidentActionItemDataAttributesKind `json:"kind,omitempty"`

			// The priority of the incident action item
			Priority *NewIncidentActionItemDataAttributesPriority `json:"priority,omitempty"`

			// The status of incident the action item
			Status *NewIncidentActionItemDataAttributesStatus `json:"status,omitempty"`

			// The summary of the incident action item
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type NewIncidentActionItemDataType `json:"type"`
	} `json:"data"`
}

// The kind of the incident action item
type NewIncidentActionItemDataAttributesKind string

// The priority of the incident action item
type NewIncidentActionItemDataAttributesPriority string

// The status of incident the action item
type NewIncidentActionItemDataAttributesStatus string

// NewIncidentActionItemDataType defines model for NewIncidentActionItem.Data.Type.
type NewIncidentActionItemDataType string

// NewIncidentCustomFieldSelection defines model for new_incident_custom_field_selection.
type NewIncidentCustomFieldSelection struct {
	Data struct {
		Attributes struct {
			// The custom field for this selection
			CustomFieldId     float32    `json:"custom_field_id"`
			SelectedOptionIds *[]float32 `json:"selected_option_ids,omitempty"`

			// The selected value for text kind custom fields
			Value *string `json:"value"`
		} `json:"attributes"`
		Type NewIncidentCustomFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentCustomFieldSelectionDataType defines model for NewIncidentCustomFieldSelection.Data.Type.
type NewIncidentCustomFieldSelectionDataType string

// NewIncidentEvent defines model for new_incident_event.
type NewIncidentEvent struct {
	Data struct {
		Attributes struct {
			// The summary of the incident event
			Event string `json:"event"`

			// The visibility of the incident action item
			Visibility *NewIncidentEventDataAttributesVisibility `json:"visibility,omitempty"`
		} `json:"attributes"`
		Type NewIncidentEventDataType `json:"type"`
	} `json:"data"`
}

// The visibility of the incident action item
type NewIncidentEventDataAttributesVisibility string

// NewIncidentEventDataType defines model for NewIncidentEvent.Data.Type.
type NewIncidentEventDataType string

// NewIncidentFeedback defines model for new_incident_feedback.
type NewIncidentFeedback struct {
	Data struct {
		Attributes struct {
			// Is the feedback anonymous?
			Anonymous *bool `json:"anonymous,omitempty"`

			// The feedback of the incident feedback
			Feedback string `json:"feedback"`

			// The rating of the incident feedback
			Rating NewIncidentFeedbackDataAttributesRating `json:"rating"`
		} `json:"attributes"`
		Type NewIncidentFeedbackDataType `json:"type"`
	} `json:"data"`
}

// The rating of the incident feedback
type NewIncidentFeedbackDataAttributesRating int

// NewIncidentFeedbackDataType defines model for NewIncidentFeedback.Data.Type.
type NewIncidentFeedbackDataType string

// NewIncidentRole defines model for new_incident_role.
type NewIncidentRole struct {
	Data struct {
		Attributes struct {
			// The description of the incident role
			Description *string `json:"description"`

			// The name of the incident role
			Name string `json:"name"`

			// The summary of the incident role
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type NewIncidentRoleDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentRoleDataType defines model for NewIncidentRole.Data.Type.
type NewIncidentRoleDataType string

// NewIncidentRoleTask defines model for new_incident_role_task.
type NewIncidentRoleTask struct {
	Data struct {
		Attributes struct {
			// The description of the incident task
			Description *string `json:"description"`

			// The priority of the incident task
			Priority *NewIncidentRoleTaskDataAttributesPriority `json:"priority,omitempty"`

			// The task of the incident task
			Task string `json:"task"`
		} `json:"attributes"`
		Type NewIncidentRoleTaskDataType `json:"type"`
	} `json:"data"`
}

// The priority of the incident task
type NewIncidentRoleTaskDataAttributesPriority string

// NewIncidentRoleTaskDataType defines model for NewIncidentRoleTask.Data.Type.
type NewIncidentRoleTaskDataType string

// NewIncidentStatusPageEvent defines model for new_incident_status_page_event.
type NewIncidentStatusPageEvent struct {
	Data struct {
		Attributes struct {
			// The summary of the incident event
			Event string `json:"event"`

			// Notify all status pages subscribers
			NotifySubscribers *bool `json:"notify_subscribers"`

			// The status of the incident event
			Status *NewIncidentStatusPageEventDataAttributesStatus `json:"status,omitempty"`

			// Unique ID of the status page you wish to post the event to
			StatusPageId *string `json:"status_page_id,omitempty"`
		} `json:"attributes"`
		Type NewIncidentStatusPageEventDataType `json:"type"`
	} `json:"data"`
}

// The status of the incident event
type NewIncidentStatusPageEventDataAttributesStatus string

// NewIncidentStatusPageEventDataType defines model for NewIncidentStatusPageEvent.Data.Type.
type NewIncidentStatusPageEventDataType string

// NewIncidentType defines model for new_incident_type.
type NewIncidentType struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the incident type
			Description *string `json:"description"`

			// The name of the incident type
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewIncidentTypeDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentTypeDataType defines model for NewIncidentType.Data.Type.
type NewIncidentTypeDataType string

// NewPlaybook defines model for new_playbook.
type NewPlaybook struct {
	Data struct {
		Attributes struct {
			// The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// The external url of the playbook
			ExternalUrl *string `json:"external_url"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID's to attach to the incident
			SeverityIds *[]string `json:"severity_ids"`

			// The summary of the playbook
			Summary *string `json:"summary"`

			// The title of the playbook
			Title string `json:"title"`
		} `json:"attributes"`
		Type NewPlaybookDataType `json:"type"`
	} `json:"data"`
}

// NewPlaybookDataType defines model for NewPlaybook.Data.Type.
type NewPlaybookDataType string

// NewPlaybookTask defines model for new_playbook_task.
type NewPlaybookTask struct {
	Data struct {
		Attributes struct {
			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task string `json:"task"`
		} `json:"attributes"`
		Type NewPlaybookTaskDataType `json:"type"`
	} `json:"data"`
}

// NewPlaybookTaskDataType defines model for NewPlaybookTask.Data.Type.
type NewPlaybookTaskDataType string

// NewPostMortemTemplate defines model for new_post_mortem_template.
type NewPostMortemTemplate struct {
	Data struct {
		Attributes struct {
			// Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// The name of the postmortem template
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewPostMortemTemplateDataType `json:"type"`
	} `json:"data"`
}

// NewPostMortemTemplateDataType defines model for NewPostMortemTemplate.Data.Type.
type NewPostMortemTemplateDataType string

// NewPulse defines model for new_pulse.
type NewPulse struct {
	Data struct {
		Attributes struct {
			// Additional data
			Data *map[string]interface{} `json:"data"`

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {
				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`
			Refs *[]struct {
				// Key of the ref
				Key string `json:"key"`

				// Value of the ref
				Value string `json:"value"`
			} `json:"refs,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// The source of the pulse (eg: k8s)
			Source *string `json:"source"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type NewPulseDataType `json:"type"`
	} `json:"data"`
}

// NewPulseDataType defines model for NewPulse.Data.Type.
type NewPulseDataType string

// NewService defines model for new_service.
type NewService struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the service
			Description *string `json:"description"`

			// Environments associated with this service
			EnvironmentIds *[]interface{} `json:"environment_ids"`

			// The GitHub repository branch associated to this service. eg: main
			GithubRepositoryBranch *string `json:"github_repository_branch"`

			// The GitHub repository name associated to this service. eg: rootlyhq/my-service
			GithubRepositoryName *string `json:"github_repository_name"`

			// The Gitlab repository branch associated to this service. eg: main
			GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

			// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
			GitlabRepositoryName *string `json:"gitlab_repository_name"`

			// The name of the service
			Name string `json:"name"`

			// Emails to attach to the service
			NotifyEmails *[]string `json:"notify_emails"`

			// The Opsgenie service id associated to this service
			OpsgenieId *string `json:"opsgenie_id"`

			// Owner Teams associated with this service
			OwnersGroupIds *[]interface{} `json:"owners_group_ids"`

			// The PagerDuty service id associated to this service
			PagerdutyId *string `json:"pagerduty_id"`

			// The public description of the service
			PublicDescription *string `json:"public_description"`

			// Services dependent on this service
			ServiceIds *[]interface{} `json:"service_ids"`

			// Slack Aliases associated with this service
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this service
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type NewServiceDataType `json:"type"`
	} `json:"data"`
}

// NewServiceDataType defines model for NewService.Data.Type.
type NewServiceDataType string

// NewSeverity defines model for new_severity.
type NewSeverity struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the severity
			Description *string `json:"description"`

			// The name of the severity
			Name string `json:"name"`

			// The severity of the severity
			Severity *NewSeverityDataAttributesSeverity `json:"severity,omitempty"`
		} `json:"attributes"`
		Type NewSeverityDataType `json:"type"`
	} `json:"data"`
}

// The severity of the severity
type NewSeverityDataAttributesSeverity string

// NewSeverityDataType defines model for NewSeverity.Data.Type.
type NewSeverityDataType string

// NewStatusPage defines model for new_status_page.
type NewStatusPage struct {
	Data struct {
		Attributes struct {
			// Allow search engines to include your public status page in search results.
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// The description of the status page
			Description *string `json:"description"`

			// Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Make the status page accessible to the public
			Public *bool `json:"public"`

			// Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// Show uptime over x days
			ShowUptimeLastDays *NewStatusPageDataAttributesShowUptimeLastDays `json:"show_uptime_last_days"`

			// The title of the status page
			Title string `json:"title"`
		} `json:"attributes"`
		Type NewStatusPageDataType `json:"type"`
	} `json:"data"`
}

// Show uptime over x days
type NewStatusPageDataAttributesShowUptimeLastDays int

// NewStatusPageDataType defines model for NewStatusPage.Data.Type.
type NewStatusPageDataType string

// NewTeam defines model for new_team.
type NewTeam struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the team
			Description *string `json:"description"`

			// The name of the team
			Name string `json:"name"`

			// Emails to attach to the team
			NotifyEmails *[]string `json:"notify_emails"`

			// Slack Aliases associated with this service
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this service
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type NewTeamDataType `json:"type"`
	} `json:"data"`
}

// NewTeamDataType defines model for NewTeam.Data.Type.
type NewTeamDataType string

// NewWorkflow defines model for new_workflow.
type NewWorkflow struct {
	Data struct {
		Attributes struct {
			// Workflow command.
			Command *string `json:"command"`

			// The description of the workflow
			Description     *string   `json:"description"`
			Enabled         *bool     `json:"enabled,omitempty"`
			EnvironmentIds  *[]string `json:"environment_ids,omitempty"`
			GroupIds        *[]string `json:"group_ids,omitempty"`
			IncidentTypeIds *[]string `json:"incident_type_ids,omitempty"`

			// The title of the workflow
			Name string `json:"name"`

			// The order which the workflow should run with other workflows.
			Position *float32 `json:"position,omitempty"`

			// Repeat workflow every duration.
			RepeatEveryDuration *string                              `json:"repeat_every_duration"`
			RepeatOn            *[]NewWorkflowDataAttributesRepeatOn `json:"repeat_on,omitempty"`
			ServiceIds          *[]string                            `json:"service_ids,omitempty"`
			SeverityIds         *[]string                            `json:"severity_ids,omitempty"`

			// The slug of the workflow
			Slug          *string      `json:"slug,omitempty"`
			TriggerParams *interface{} `json:"trigger_params,omitempty"`

			// Wait this duration before executing.
			Wait *string `json:"wait"`
		} `json:"attributes"`
		Type NewWorkflowDataType `json:"type"`
	} `json:"data"`
}

// Repeat on weekdays.
type NewWorkflowDataAttributesRepeatOn string

// NewWorkflowDataType defines model for NewWorkflow.Data.Type.
type NewWorkflowDataType string

// NewWorkflowCustomFieldSelection defines model for new_workflow_custom_field_selection.
type NewWorkflowCustomFieldSelection struct {
	Data struct {
		Attributes struct {
			// The custom field for this selection
			CustomFieldId float32 `json:"custom_field_id"`

			// The trigger condition
			IncidentCondition NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition `json:"incident_condition"`
			SelectedOptionIds *[]float32                                                     `json:"selected_option_ids,omitempty"`
		} `json:"attributes"`
		Type NewWorkflowCustomFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// The trigger condition
type NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition string

// NewWorkflowCustomFieldSelectionDataType defines model for NewWorkflowCustomFieldSelection.Data.Type.
type NewWorkflowCustomFieldSelectionDataType string

// NewWorkflowTask defines model for new_workflow_task.
type NewWorkflowTask struct {
	Data struct {
		Attributes struct {
			// The position of the workflow task
			Position   *float32    `json:"position,omitempty"`
			TaskParams interface{} `json:"task_params"`
		} `json:"attributes"`
		Type NewWorkflowTaskDataType `json:"type"`
	} `json:"data"`
}

// NewWorkflowTaskDataType defines model for NewWorkflowTask.Data.Type.
type NewWorkflowTaskDataType string

// PageOpsgenieOnCallRespondersTaskParams defines model for page_opsgenie_on_call_responders_task_params.
type PageOpsgenieOnCallRespondersTaskParams struct {
	Priority *PageOpsgenieOnCallRespondersTaskParamsPriority `json:"priority,omitempty"`
	TaskType *PageOpsgenieOnCallRespondersTaskParamsTaskType `json:"task_type,omitempty"`
	Teams    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"teams,omitempty"`
	Users *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"users,omitempty"`
}

// PageOpsgenieOnCallRespondersTaskParamsPriority defines model for PageOpsgenieOnCallRespondersTaskParams.Priority.
type PageOpsgenieOnCallRespondersTaskParamsPriority string

// PageOpsgenieOnCallRespondersTaskParamsTaskType defines model for PageOpsgenieOnCallRespondersTaskParams.TaskType.
type PageOpsgenieOnCallRespondersTaskParamsTaskType string

// PagePagerdutyOnCallRespondersTaskParams defines model for page_pagerduty_on_call_responders_task_params.
type PagePagerdutyOnCallRespondersTaskParams struct {
	EscalationPolicies *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"escalation_policies,omitempty"`
	Message *string `json:"message,omitempty"`
	Service struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"service"`
	TaskType *PagePagerdutyOnCallRespondersTaskParamsTaskType `json:"task_type,omitempty"`
	Urgency  *PagePagerdutyOnCallRespondersTaskParamsUrgency  `json:"urgency,omitempty"`
	Users    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"users,omitempty"`
}

// PagePagerdutyOnCallRespondersTaskParamsTaskType defines model for PagePagerdutyOnCallRespondersTaskParams.TaskType.
type PagePagerdutyOnCallRespondersTaskParamsTaskType string

// PagePagerdutyOnCallRespondersTaskParamsUrgency defines model for PagePagerdutyOnCallRespondersTaskParams.Urgency.
type PagePagerdutyOnCallRespondersTaskParamsUrgency string

// PageVictorOpsOnCallRespondersTaskParams defines model for page_victor_ops_on_call_responders_task_params.
type PageVictorOpsOnCallRespondersTaskParams interface{}

// Playbook defines model for playbook.
type Playbook struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The external url of the playbook
	ExternalUrl *string `json:"external_url"`

	// The summary of the playbook
	Summary *string `json:"summary"`

	// The title of the playbook
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PlaybookList defines model for playbook_list.
type PlaybookList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook)
			Playbook `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the playbook
		Id   string               `json:"id"`
		Type PlaybookListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PlaybookListDataType defines model for PlaybookList.Data.Type.
type PlaybookListDataType string

// PlaybookResponse defines model for playbook_response.
type PlaybookResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook)
			Playbook `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the playbook
		Id   string                   `json:"id"`
		Type PlaybookResponseDataType `json:"type"`
	} `json:"data"`
}

// PlaybookResponseDataType defines model for PlaybookResponse.Data.Type.
type PlaybookResponseDataType string

// PlaybookTask defines model for playbook_task.
type PlaybookTask struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident task
	Description *string `json:"description"`

	// The task of the incident task
	Task string `json:"task"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PlaybookTaskList defines model for playbook_task_list.
type PlaybookTaskList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook_task)
			PlaybookTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string                   `json:"id"`
		Type PlaybookTaskListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PlaybookTaskListDataType defines model for PlaybookTaskList.Data.Type.
type PlaybookTaskListDataType string

// PlaybookTaskResponse defines model for playbook_task_response.
type PlaybookTaskResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook_task)
			PlaybookTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string                       `json:"id"`
		Type PlaybookTaskResponseDataType `json:"type"`
	} `json:"data"`
}

// PlaybookTaskResponseDataType defines model for PlaybookTaskResponse.Data.Type.
type PlaybookTaskResponseDataType string

// PostMortemTemplate defines model for post_mortem_template.
type PostMortemTemplate struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// Default selected template when editing a postmortem
	Default *bool `json:"default"`

	// The name of the postmortem template
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PostMortemTemplateList defines model for post_mortem_template_list.
type PostMortemTemplateList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/post_mortem_template)
			PostMortemTemplate `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the post_mortem_template
		Id   string                         `json:"id"`
		Type PostMortemTemplateListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PostMortemTemplateListDataType defines model for PostMortemTemplateList.Data.Type.
type PostMortemTemplateListDataType string

// PostMortemTemplateResponse defines model for post_mortem_template_response.
type PostMortemTemplateResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/post_mortem_template)
			PostMortemTemplate `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the post_mortem_template
		Id   string                             `json:"id"`
		Type PostMortemTemplateResponseDataType `json:"type"`
	} `json:"data"`
}

// PostMortemTemplateResponseDataType defines model for PostMortemTemplateResponse.Data.Type.
type PostMortemTemplateResponseDataType string

// PrintTaskParams defines model for print_task_params.
type PrintTaskParams struct {
	// The message to print
	Message  string                   `json:"message"`
	TaskType *PrintTaskParamsTaskType `json:"task_type,omitempty"`
}

// PrintTaskParamsTaskType defines model for PrintTaskParams.TaskType.
type PrintTaskParamsTaskType string

// PublishIncidentTaskParams defines model for publish_incident_task_params.
type PublishIncidentTaskParams struct {
	// Incident event description
	Event    string `json:"event"`
	Incident struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"incident"`
	PublicTitle  string                             `json:"public_title"`
	Status       PublishIncidentTaskParamsStatus    `json:"status"`
	StatusPageId string                             `json:"status_page_id"`
	TaskType     *PublishIncidentTaskParamsTaskType `json:"task_type,omitempty"`
}

// PublishIncidentTaskParamsStatus defines model for PublishIncidentTaskParams.Status.
type PublishIncidentTaskParamsStatus string

// PublishIncidentTaskParamsTaskType defines model for PublishIncidentTaskParams.TaskType.
type PublishIncidentTaskParamsTaskType string

// Pulse defines model for pulse.
type Pulse struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// Additional data
	Data *map[string]interface{} `json:"data"`

	// Environments attached to the pulse
	Environments *[]struct {
		// Embedded struct due to allOf(#/components/schemas/environment)
		Environment `yaml:",inline"`
	} `json:"environments,omitempty"`
	Labels *[]struct {
		// Key of the tag
		Key string `json:"key"`

		// Value of the tag
		Value string `json:"value"`
	} `json:"labels,omitempty"`
	Refs *[]struct {
		// Key of the ref
		Key string `json:"key"`

		// Value of the ref
		Value string `json:"value"`
	} `json:"refs,omitempty"`

	// Services attached to the pulse
	Services *[]struct {
		// Embedded struct due to allOf(#/components/schemas/service)
		Service `yaml:",inline"`
	} `json:"services,omitempty"`

	// The source of the pulse (eg: k8s)
	Source *string `json:"source"`

	// The summary of the pulse
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PulseList defines model for pulse_list.
type PulseList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/pulse)
			Pulse `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the pulse
		Id   string            `json:"id"`
		Type PulseListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PulseListDataType defines model for PulseList.Data.Type.
type PulseListDataType string

// PulseResponse defines model for pulse_response.
type PulseResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/pulse)
			Pulse `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the pulse
		Id   string                `json:"id"`
		Type PulseResponseDataType `json:"type"`
	} `json:"data"`
}

// PulseResponseDataType defines model for PulseResponse.Data.Type.
type PulseResponseDataType string

// PulseTriggerParams defines model for pulse_trigger_params.
type PulseTriggerParams struct {
	PulseCondition        *PulseTriggerParamsPulseCondition        `json:"pulse_condition,omitempty"`
	PulseConditionLabel   *PulseTriggerParamsPulseConditionLabel   `json:"pulse_condition_label,omitempty"`
	PulseConditionPayload *PulseTriggerParamsPulseConditionPayload `json:"pulse_condition_payload,omitempty"`
	PulseConditionSource  *PulseTriggerParamsPulseConditionSource  `json:"pulse_condition_source,omitempty"`
	PulseLabels           *[]string                                `json:"pulse_labels,omitempty"`
	PulsePayload          *[]string                                `json:"pulse_payload,omitempty"`

	// You can use jsonpath syntax. eg: $.incident.teams[*]
	PulseQueryPayload *string                       `json:"pulse_query_payload"`
	PulseSources      *[]string                     `json:"pulse_sources,omitempty"`
	TriggerType       PulseTriggerParamsTriggerType `json:"trigger_type"`
	Triggers          *[]PulseTriggerParamsTriggers `json:"triggers,omitempty"`
}

// PulseTriggerParamsPulseCondition defines model for PulseTriggerParams.PulseCondition.
type PulseTriggerParamsPulseCondition string

// PulseTriggerParamsPulseConditionLabel defines model for PulseTriggerParams.PulseConditionLabel.
type PulseTriggerParamsPulseConditionLabel string

// PulseTriggerParamsPulseConditionPayload defines model for PulseTriggerParams.PulseConditionPayload.
type PulseTriggerParamsPulseConditionPayload string

// PulseTriggerParamsPulseConditionSource defines model for PulseTriggerParams.PulseConditionSource.
type PulseTriggerParamsPulseConditionSource string

// PulseTriggerParamsTriggerType defines model for PulseTriggerParams.TriggerType.
type PulseTriggerParamsTriggerType string

// Actions that trigger the workflow.
type PulseTriggerParamsTriggers string

// RedisClientTaskParams defines model for redis_client_task_params.
type RedisClientTaskParams struct {
	Commands            string  `json:"commands"`
	EventMessage        *string `json:"event_message,omitempty"`
	EventUrl            *string `json:"event_url,omitempty"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *RedisClientTaskParamsTaskType `json:"task_type,omitempty"`
	Url      string                         `json:"url"`
}

// RedisClientTaskParamsTaskType defines model for RedisClientTaskParams.TaskType.
type RedisClientTaskParamsTaskType string

// RenameSlackChannelTaskParams defines model for rename_slack_channel_task_params.
type RenameSlackChannelTaskParams struct {
	Channel *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channel,omitempty"`
	TaskType *RenameSlackChannelTaskParamsTaskType `json:"task_type,omitempty"`
	Title    string                                `json:"title"`
}

// RenameSlackChannelTaskParamsTaskType defines model for RenameSlackChannelTaskParams.TaskType.
type RenameSlackChannelTaskParamsTaskType string

// ResolveIncident defines model for resolve_incident.
type ResolveIncident struct {
	Data struct {
		Attributes struct {
			// How was the incident resolved?
			ResolutionMessage *string `json:"resolution_message"`
		} `json:"attributes"`
		Type ResolveIncidentDataType `json:"type"`
	} `json:"data"`
}

// ResolveIncidentDataType defines model for ResolveIncident.Data.Type.
type ResolveIncidentDataType string

// RunCommandHerokuTaskParams defines model for run_command_heroku_task_params.
type RunCommandHerokuTaskParams struct {
	AppName             string `json:"app_name"`
	Command             string `json:"command"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	Size     RunCommandHerokuTaskParamsSize      `json:"size"`
	TaskType *RunCommandHerokuTaskParamsTaskType `json:"task_type,omitempty"`
}

// RunCommandHerokuTaskParamsSize defines model for RunCommandHerokuTaskParams.Size.
type RunCommandHerokuTaskParamsSize string

// RunCommandHerokuTaskParamsTaskType defines model for RunCommandHerokuTaskParams.TaskType.
type RunCommandHerokuTaskParamsTaskType string

// SendEmailTaskParams defines model for send_email_task_params.
type SendEmailTaskParams struct {
	// The email body
	Body *string `json:"body"`

	// The preheader
	Preheader *string `json:"preheader"`

	// The subject
	Subject  string                       `json:"subject"`
	TaskType *SendEmailTaskParamsTaskType `json:"task_type,omitempty"`
	To       []string                     `json:"to"`
}

// SendEmailTaskParamsTaskType defines model for SendEmailTaskParams.TaskType.
type SendEmailTaskParamsTaskType string

// SendSlackMessageTaskParams defines model for send_slack_message_task_params.
type SendSlackMessageTaskParams interface{}

// SendSmsTaskParams defines model for send_sms_task_params.
type SendSmsTaskParams struct {
	// The SMS message
	Content string `json:"content"`

	// The name
	Name         string                     `json:"name"`
	PhoneNumbers []string                   `json:"phone_numbers"`
	TaskType     *SendSmsTaskParamsTaskType `json:"task_type,omitempty"`
}

// SendSmsTaskParamsTaskType defines model for SendSmsTaskParams.TaskType.
type SendSmsTaskParamsTaskType string

// Service defines model for service.
type Service struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the service
	Description *string `json:"description"`

	// Environments associated with this service
	EnvironmentIds *[]interface{} `json:"environment_ids"`

	// The GitHub repository branch associated to this service. eg: main
	GithubRepositoryBranch *string `json:"github_repository_branch"`

	// The GitHub repository name associated to this service. eg: rootlyhq/my-service
	GithubRepositoryName *string `json:"github_repository_name"`

	// The Gitlab repository branch associated to this service. eg: main
	GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

	// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
	GitlabRepositoryName *string `json:"gitlab_repository_name"`

	// The name of the service
	Name string `json:"name"`

	// Emails attached to the service
	NotifyEmails *[]string `json:"notify_emails"`

	// The Opsgenie service id associated to this service
	OpsgenieId *string `json:"opsgenie_id"`

	// Owner Teams associated with this service
	OwnersGroupIds *[]interface{} `json:"owners_group_ids"`

	// The PagerDuty service id associated to this service
	PagerdutyId *string `json:"pagerduty_id"`

	// The public description of the service
	PublicDescription *string `json:"public_description"`

	// Services dependent on this service
	ServiceIds *[]interface{} `json:"service_ids"`

	// Slack Aliases associated with this service
	SlackAliases *[]struct {
		// Slack alias ID
		Id string `json:"id"`

		// Slack alias name
		Name string `json:"name"`
	} `json:"slack_aliases"`

	// Slack Channels associated with this service
	SlackChannels *[]struct {
		// Slack channel ID
		Id string `json:"id"`

		// Slack channel name
		Name string `json:"name"`
	} `json:"slack_channels"`

	// The slug of the service
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// ServiceList defines model for service_list.
type ServiceList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/service)
			Service `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the service
		Id   string              `json:"id"`
		Type ServiceListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// ServiceListDataType defines model for ServiceList.Data.Type.
type ServiceListDataType string

// ServiceResponse defines model for service_response.
type ServiceResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/service)
			Service `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the service
		Id   string                  `json:"id"`
		Type ServiceResponseDataType `json:"type"`
	} `json:"data"`
}

// ServiceResponseDataType defines model for ServiceResponse.Data.Type.
type ServiceResponseDataType string

// Severity defines model for severity.
type Severity struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the severity
	Description *string `json:"description"`

	// The name of the severity
	Name string `json:"name"`

	// The severity of the severity
	Severity *SeveritySeverity `json:"severity,omitempty"`

	// The slug of the severity
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The severity of the severity
type SeveritySeverity string

// SeverityList defines model for severity_list.
type SeverityList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/severity)
			Severity `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the severity
		Id   string               `json:"id"`
		Type SeverityListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// SeverityListDataType defines model for SeverityList.Data.Type.
type SeverityListDataType string

// SeverityResponse defines model for severity_response.
type SeverityResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/severity)
			Severity `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the severity
		Id   string                   `json:"id"`
		Type SeverityResponseDataType `json:"type"`
	} `json:"data"`
}

// SeverityResponseDataType defines model for SeverityResponse.Data.Type.
type SeverityResponseDataType string

// SnapshotDatadogGraphTaskParams defines model for snapshot_datadog_graph_task_params.
type SnapshotDatadogGraphTaskParams struct {
	Dashboards []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"dashboards"`
	MetricQueries *[]string `json:"metric_queries,omitempty"`

	// in format '1 minute', '30 days', '3 months', etc.
	PastDuration        string `json:"past_duration"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *SnapshotDatadogGraphTaskParamsTaskType `json:"task_type,omitempty"`
}

// SnapshotDatadogGraphTaskParamsTaskType defines model for SnapshotDatadogGraphTaskParams.TaskType.
type SnapshotDatadogGraphTaskParamsTaskType string

// SnapshotGrafanaDashboardTaskParams defines model for snapshot_grafana_dashboard_task_params.
type SnapshotGrafanaDashboardTaskParams struct {
	Dashboards []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"dashboards"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *SnapshotGrafanaDashboardTaskParamsTaskType `json:"task_type,omitempty"`
}

// SnapshotGrafanaDashboardTaskParamsTaskType defines model for SnapshotGrafanaDashboardTaskParams.TaskType.
type SnapshotGrafanaDashboardTaskParamsTaskType string

// SnapshotLookerLookTaskParams defines model for snapshot_looker_look_task_params.
type SnapshotLookerLookTaskParams struct {
	Dashboards []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"dashboards"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *SnapshotLookerLookTaskParamsTaskType `json:"task_type,omitempty"`
}

// SnapshotLookerLookTaskParamsTaskType defines model for SnapshotLookerLookTaskParams.TaskType.
type SnapshotLookerLookTaskParamsTaskType string

// SnapshotNewRelicGraphTaskParams defines model for snapshot_new_relic_graph_task_params.
type SnapshotNewRelicGraphTaskParams struct {
	MetricQuery         string                                    `json:"metric_query"`
	MetricType          SnapshotNewRelicGraphTaskParamsMetricType `json:"metric_type"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *SnapshotNewRelicGraphTaskParamsTaskType `json:"task_type,omitempty"`
}

// SnapshotNewRelicGraphTaskParamsMetricType defines model for SnapshotNewRelicGraphTaskParams.MetricType.
type SnapshotNewRelicGraphTaskParamsMetricType string

// SnapshotNewRelicGraphTaskParamsTaskType defines model for SnapshotNewRelicGraphTaskParams.TaskType.
type SnapshotNewRelicGraphTaskParamsTaskType string

// StandaloneTriggerParams defines model for standalone_trigger_params.
type StandaloneTriggerParams struct {
	TriggerType StandaloneTriggerParamsTriggerType `json:"trigger_type"`
	Triggers    *[]StandaloneTriggerParamsTriggers `json:"triggers,omitempty"`
}

// StandaloneTriggerParamsTriggerType defines model for StandaloneTriggerParams.TriggerType.
type StandaloneTriggerParamsTriggerType string

// Actions that trigger the workflow.
type StandaloneTriggerParamsTriggers string

// StatusPage defines model for status_page.
type StatusPage struct {
	// Allow search engines to include your public status page in search results.
	AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the status page
	Description *string `json:"description"`

	// Enabled / Disable the status page
	Enabled *bool `json:"enabled"`

	// The color of the footer. Eg. "#1F2F41"
	FooterColor *string `json:"footer_color"`

	// The color of the header. Eg. "#0061F2"
	HeaderColor *string `json:"header_color"`

	// Make the status page accessible to the public
	Public *bool `json:"public"`

	// Show uptime
	ShowUptime *bool `json:"show_uptime"`

	// Show uptime over x days
	ShowUptimeLastDays *StatusPageShowUptimeLastDays `json:"show_uptime_last_days"`

	// The title of the status page
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// Show uptime over x days
type StatusPageShowUptimeLastDays int

// StatusPageList defines model for status_page_list.
type StatusPageList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/status_page)
			StatusPage `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the status page
		Id   string                 `json:"id"`
		Type StatusPageListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// StatusPageListDataType defines model for StatusPageList.Data.Type.
type StatusPageListDataType string

// StatusPageResponse defines model for status_page_response.
type StatusPageResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/status_page)
			StatusPage `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the status page
		Id   string                     `json:"id"`
		Type StatusPageResponseDataType `json:"type"`
	} `json:"data"`
}

// StatusPageResponseDataType defines model for StatusPageResponse.Data.Type.
type StatusPageResponseDataType string

// Team defines model for team.
type Team struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the team
	Description *string `json:"description"`

	// The name of the team
	Name string `json:"name"`

	// Emails to attach to the team
	NotifyEmails *[]string `json:"notify_emails"`

	// Slack Aliases associated with this service
	SlackAliases *[]struct {
		// Slack alias ID
		Id string `json:"id"`

		// Slack alias name
		Name string `json:"name"`
	} `json:"slack_aliases"`

	// Slack Channels associated with this service
	SlackChannels *[]struct {
		// Slack channel ID
		Id string `json:"id"`

		// Slack channel name
		Name string `json:"name"`
	} `json:"slack_channels"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// TeamList defines model for team_list.
type TeamList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/team)
			Team `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the team
		Id   string           `json:"id"`
		Type TeamListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// TeamListDataType defines model for TeamList.Data.Type.
type TeamListDataType string

// TeamResponse defines model for team_response.
type TeamResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/team)
			Team `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the team
		Id   string               `json:"id"`
		Type TeamResponseDataType `json:"type"`
	} `json:"data"`
}

// TeamResponseDataType defines model for TeamResponse.Data.Type.
type TeamResponseDataType string

// TweetTwitterMessageTaskParams defines model for tweet_twitter_message_task_params.
type TweetTwitterMessageTaskParams struct {
	Message  string                                 `json:"message"`
	TaskType *TweetTwitterMessageTaskParamsTaskType `json:"task_type,omitempty"`
}

// TweetTwitterMessageTaskParamsTaskType defines model for TweetTwitterMessageTaskParams.TaskType.
type TweetTwitterMessageTaskParamsTaskType string

// UpdateAirtableTableRecordTaskParams defines model for update_airtable_table_record_task_params.
type UpdateAirtableTableRecordTaskParams struct {
	// The base key
	BaseKey string `json:"base_key"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON.
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The record id
	RecordId string `json:"record_id"`

	// The table name
	TableName string                                       `json:"table_name"`
	TaskType  *UpdateAirtableTableRecordTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateAirtableTableRecordTaskParamsTaskType defines model for UpdateAirtableTableRecordTaskParams.TaskType.
type UpdateAirtableTableRecordTaskParamsTaskType string

// UpdateAsanaTaskTaskParams defines model for update_asana_task_task_params.
type UpdateAsanaTaskTaskParams struct {
	// The assigned user's email.
	AssignUserEmail *string `json:"assign_user_email,omitempty"`
	Completion      struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON.
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The task id
	TaskId   string                             `json:"task_id"`
	TaskType *UpdateAsanaTaskTaskParamsTaskType `json:"task_type,omitempty"`

	// The task title
	Title *string `json:"title,omitempty"`
}

// UpdateAsanaTaskTaskParamsTaskType defines model for UpdateAsanaTaskTaskParams.TaskType.
type UpdateAsanaTaskTaskParamsTaskType string

// UpdateCause defines model for update_cause.
type UpdateCause struct {
	Data struct {
		Attributes struct {
			// The description of the cause
			Description *string `json:"description"`

			// The name of the cause
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdateCauseDataType `json:"type"`
	} `json:"data"`
}

// UpdateCauseDataType defines model for UpdateCause.Data.Type.
type UpdateCauseDataType string

// UpdateCustomField defines model for update_custom_field.
type UpdateCustomField struct {
	Data struct {
		Attributes struct {
			// The description of the custom_field
			Description *string `json:"description"`

			// The name of the custom_field
			Label *string `json:"label,omitempty"`

			// The position of the custom_field
			Position *float32                                   `json:"position,omitempty"`
			Required *[]UpdateCustomFieldDataAttributesRequired `json:"required"`
			Shown    *[]UpdateCustomFieldDataAttributesShown    `json:"shown,omitempty"`

			// The slug of the custom_field
			Slug *string `json:"slug,omitempty"`
		} `json:"attributes"`
		Type UpdateCustomFieldDataType `json:"type"`
	} `json:"data"`
}

// Where the custom_field is required
type UpdateCustomFieldDataAttributesRequired string

// Where the custom_field is shown
type UpdateCustomFieldDataAttributesShown string

// UpdateCustomFieldDataType defines model for UpdateCustomField.Data.Type.
type UpdateCustomFieldDataType string

// UpdateCustomFieldOption defines model for update_custom_field_option.
type UpdateCustomFieldOption struct {
	Data struct {
		Attributes struct {
			// The hex color of the custom_field_option
			Color *string `json:"color,omitempty"`

			// The position of the custom_field_option
			Position *float32 `json:"position,omitempty"`

			// The value of the custom_field_option
			Value *string `json:"value,omitempty"`
		} `json:"attributes"`
		Type UpdateCustomFieldOptionDataType `json:"type"`
	} `json:"data"`
}

// UpdateCustomFieldOptionDataType defines model for UpdateCustomFieldOption.Data.Type.
type UpdateCustomFieldOptionDataType string

// UpdateDashboard defines model for update_dashboard.
type UpdateDashboard struct {
	Data struct {
		Attributes *struct {
			// The name of the dashboard
			Name *string `json:"name,omitempty"`

			// The owner type of the dashboard
			Owner *UpdateDashboardDataAttributesOwner `json:"owner,omitempty"`

			// The grouping period for dashbaord panel data
			Period *UpdateDashboardDataAttributesPeriod `json:"period"`

			// Whether the dashboard is public
			Public *bool `json:"public,omitempty"`

			// The date range for dashboard panel data
			Range *string `json:"range"`
		} `json:"attributes,omitempty"`
		Type *UpdateDashboardDataType `json:"type,omitempty"`
	} `json:"data"`
}

// The owner type of the dashboard
type UpdateDashboardDataAttributesOwner string

// The grouping period for dashbaord panel data
type UpdateDashboardDataAttributesPeriod string

// UpdateDashboardDataType defines model for UpdateDashboard.Data.Type.
type UpdateDashboardDataType string

// UpdateDashboardPanel defines model for update_dashboard_panel.
type UpdateDashboardPanel struct {
	Data struct {
		Attributes *struct {
			// The name of the dashboard_panel
			Name   *string `json:"name"`
			Params *struct {
				Datasets *[]struct {
					Aggregate *struct {
						Cumulative *bool                                                               `json:"cumulative"`
						Key        *string                                                             `json:"key"`
						Operation  *UpdateDashboardPanelDataAttributesParamsDatasetsAggregateOperation `json:"operation,omitempty"`
					} `json:"aggregate"`
					Collection *UpdateDashboardPanelDataAttributesParamsDatasetsCollection `json:"collection,omitempty"`
					Filter     *[]struct {
						Operation *UpdateDashboardPanelDataAttributesParamsDatasetsFilterOperation `json:"operation,omitempty"`
						Rules     *[]struct {
							Condition *string `json:"condition,omitempty"`
							Key       *string                                                               `json:"key,omitempty"`
							Operation *string `json:"operation,omitempty"`
							Value     *string                                                               `json:"value,omitempty"`
						} `json:"rules,omitempty"`
					} `json:"filter,omitempty"`
					GroupBy *string `json:"group_by"`
					Name    *string `json:"name"`
				} `json:"datasets,omitempty"`
				Display *UpdateDashboardPanelDataAttributesParamsDisplay `json:"display,omitempty"`
			} `json:"params,omitempty"`
			Position *struct {
				H float32 `json:"h"`
				W float32 `json:"w"`
				X float32 `json:"x"`
				Y float32 `json:"y"`
			} `json:"position"`
		} `json:"attributes,omitempty"`
		Type *UpdateDashboardPanelDataType `json:"type,omitempty"`
	} `json:"data"`
}

// UpdateDashboardPanelDataAttributesParamsDatasetsAggregateOperation defines model for UpdateDashboardPanel.Data.Attributes.Params.Datasets.Aggregate.Operation.
type UpdateDashboardPanelDataAttributesParamsDatasetsAggregateOperation string

// UpdateDashboardPanelDataAttributesParamsDatasetsCollection defines model for UpdateDashboardPanel.Data.Attributes.Params.Datasets.Collection.
type UpdateDashboardPanelDataAttributesParamsDatasetsCollection string

// UpdateDashboardPanelDataAttributesParamsDatasetsFilterOperation defines model for UpdateDashboardPanel.Data.Attributes.Params.Datasets.Filter.Operation.
type UpdateDashboardPanelDataAttributesParamsDatasetsFilterOperation string

// UpdateDashboardPanelDataAttributesParamsDatasetsFilterRulesOperation defines model for UpdateDashboardPanel.Data.Attributes.Params.Datasets.Filter.Rules.Operation.
type UpdateDashboardPanelDataAttributesParamsDatasetsFilterRulesOperation string

// UpdateDashboardPanelDataAttributesParamsDisplay defines model for UpdateDashboardPanel.Data.Attributes.Params.Display.
type UpdateDashboardPanelDataAttributesParamsDisplay string

// UpdateDashboardPanelDataType defines model for UpdateDashboardPanel.Data.Type.
type UpdateDashboardPanelDataType string

// UpdateEnvironment defines model for update_environment.
type UpdateEnvironment struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the environment
			Description *string `json:"description"`

			// The name of the environment
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdateEnvironmentDataType `json:"type"`
	} `json:"data"`
}

// UpdateEnvironmentDataType defines model for UpdateEnvironment.Data.Type.
type UpdateEnvironmentDataType string

// UpdateFunctionality defines model for update_functionality.
type UpdateFunctionality struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the functionality
			Description *string `json:"description"`

			// Environments associated with this functionality
			EnvironmentIds *[]interface{} `json:"environment_ids"`

			// The name of the functionality
			Name *string `json:"name,omitempty"`

			// Emails to attach to the functionality
			NotifyEmails *[]string `json:"notify_emails"`

			// Owner Teams associated with this functionality
			OwnersGroupIds *[]interface{} `json:"owners_group_ids"`

			// The public description of the functionality
			PublicDescription *string `json:"public_description"`

			// Services associated with this functionality
			ServiceIds *[]interface{} `json:"service_ids"`

			// Slack Aliases associated with this service
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this service
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type UpdateFunctionalityDataType `json:"type"`
	} `json:"data"`
}

// UpdateFunctionalityDataType defines model for UpdateFunctionality.Data.Type.
type UpdateFunctionalityDataType string

// UpdateGithubIssueTaskParams defines model for update_github_issue_task_params.
type UpdateGithubIssueTaskParams struct {
	// The issue body
	Body       *string `json:"body,omitempty"`
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// The issue id
	IssueId  string                               `json:"issue_id"`
	TaskType *UpdateGithubIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title
	Title *string `json:"title,omitempty"`
}

// UpdateGithubIssueTaskParamsTaskType defines model for UpdateGithubIssueTaskParams.TaskType.
type UpdateGithubIssueTaskParamsTaskType string

// UpdateGoogleCalendarEventTaskParams defines model for update_google_calendar_event_task_params.
type UpdateGoogleCalendarEventTaskParams struct {
	// Days to adjust meeting by
	AdjustmentDays *float32 `json:"adjustment_days,omitempty"`

	// Emails of attendees
	Attendees               *[]string `json:"attendees,omitempty"`
	CanGuestsInviteOthers   *bool     `json:"can_guests_invite_others,omitempty"`
	CanGuestsModifyEvent    *bool     `json:"can_guests_modify_event,omitempty"`
	CanGuestsSeeOtherGuests *bool     `json:"can_guests_see_other_guests,omitempty"`

	// The event description
	Description *string `json:"description,omitempty"`

	// The event ID
	EventId string `json:"event_id"`

	// Meeting duration in format like '1 hour', '30 minutes'
	MeetingDuration        *string `json:"meeting_duration,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	ReplaceAttendees       *bool   `json:"replace_attendees,omitempty"`

	// Send an email to the attendees notifying them of the event
	SendUpdates *bool `json:"send_updates,omitempty"`

	// The event summary
	Summary  *string                                      `json:"summary,omitempty"`
	TaskType *UpdateGoogleCalendarEventTaskParamsTaskType `json:"task_type,omitempty"`

	// Time of meeting in format HH:MM
	TimeOfMeeting *string `json:"time_of_meeting,omitempty"`
}

// UpdateGoogleCalendarEventTaskParamsTaskType defines model for UpdateGoogleCalendarEventTaskParams.TaskType.
type UpdateGoogleCalendarEventTaskParamsTaskType string

// UpdateIncident defines model for update_incident.
type UpdateIncident struct {
	Data struct {
		Attributes struct {
			// Date of acknowledgment
			AcknowledgedAt *string `json:"acknowledged_at"`

			// Date of cancellation
			CancelledAt *string `json:"cancelled_at"`

			// Date of detection
			DetectedAt *string `json:"detected_at"`

			// The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// The Incident Type ID's to attach to the incident
			IncidentTypeIds *[]string `json:"incident_type_ids"`

			// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID to attach to the incident
			SeverityId *string `json:"severity_id"`

			// Date of start
			StartedAt *string `json:"started_at"`

			// The summary of the incident
			Summary *string `json:"summary"`

			// The title of the incident
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentDataType defines model for UpdateIncident.Data.Type.
type UpdateIncidentDataType string

// UpdateIncidentActionItem defines model for update_incident_action_item.
type UpdateIncidentActionItem struct {
	Data struct {
		Attributes struct {
			// The description of the incident action item
			Description *string `json:"description"`

			// The kind of the incident action item
			Kind *UpdateIncidentActionItemDataAttributesKind `json:"kind,omitempty"`

			// The priority of the incident action item
			Priority *UpdateIncidentActionItemDataAttributesPriority `json:"priority,omitempty"`

			// The status of incident the action item
			Status *UpdateIncidentActionItemDataAttributesStatus `json:"status,omitempty"`

			// The summary of the incident action item
			Summary *string `json:"summary,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentActionItemDataType `json:"type"`
	} `json:"data"`
}

// The kind of the incident action item
type UpdateIncidentActionItemDataAttributesKind string

// The priority of the incident action item
type UpdateIncidentActionItemDataAttributesPriority string

// The status of incident the action item
type UpdateIncidentActionItemDataAttributesStatus string

// UpdateIncidentActionItemDataType defines model for UpdateIncidentActionItem.Data.Type.
type UpdateIncidentActionItemDataType string

// UpdateIncidentCustomFieldSelection defines model for update_incident_custom_field_selection.
type UpdateIncidentCustomFieldSelection struct {
	Data struct {
		Attributes struct {
			SelectedOptionIds *[]float32 `json:"selected_option_ids,omitempty"`

			// The selected value for text kind custom fields
			Value *string `json:"value"`
		} `json:"attributes"`
		Type UpdateIncidentCustomFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentCustomFieldSelectionDataType defines model for UpdateIncidentCustomFieldSelection.Data.Type.
type UpdateIncidentCustomFieldSelectionDataType string

// UpdateIncidentEvent defines model for update_incident_event.
type UpdateIncidentEvent struct {
	Data struct {
		Attributes struct {
			// The summary of the incident event
			Event *string `json:"event,omitempty"`

			// The visibility of the incident action item
			Visibility *UpdateIncidentEventDataAttributesVisibility `json:"visibility,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentEventDataType `json:"type"`
	} `json:"data"`
}

// The visibility of the incident action item
type UpdateIncidentEventDataAttributesVisibility string

// UpdateIncidentEventDataType defines model for UpdateIncidentEvent.Data.Type.
type UpdateIncidentEventDataType string

// UpdateIncidentFeedback defines model for update_incident_feedback.
type UpdateIncidentFeedback struct {
	Data struct {
		Attributes struct {
			// Is the feedback anonymous?
			Anonymous *bool `json:"anonymous,omitempty"`

			// The feedback of the incident feedback
			Feedback *string `json:"feedback,omitempty"`

			// The rating of the incident feedback
			Rating *UpdateIncidentFeedbackDataAttributesRating `json:"rating,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentFeedbackDataType `json:"type"`
	} `json:"data"`
}

// The rating of the incident feedback
type UpdateIncidentFeedbackDataAttributesRating int

// UpdateIncidentFeedbackDataType defines model for UpdateIncidentFeedback.Data.Type.
type UpdateIncidentFeedbackDataType string

// UpdateIncidentPostMortem defines model for update_incident_post_mortem.
type UpdateIncidentPostMortem struct {
	Data struct {
		Attributes struct {
			// The Cause ID's to attach to the incident postmortem
			CauseIds *[]string `json:"cause_ids"`

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// Show alerts attached to the incident
			ShowAlertsAttached *bool `json:"show_alerts_attached,omitempty"`

			// Show services impacted of the incident postmortem
			ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

			// Show groups impacted of the incident postmortem
			ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

			// Show functionalities impacted of the incident postmortem
			ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

			// Show events timeline of the incident postmortem
			ShowTimeline *bool `json:"show_timeline,omitempty"`

			// Show action items in the timeline of the incident postmortem
			ShowTimelineActionItems *bool `json:"show_timeline_action_items,omitempty"`

			// Show workflow events in the timeline of the incident postmortem
			ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

			// Show tasks in the timeline of the incident postmortem
			ShowTimelineTasks *bool `json:"show_timeline_tasks,omitempty"`

			// Show trail events in the timeline of the incident postmortem
			ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

			// Date of started at
			StartedAt *string `json:"started_at"`

			// The status of the incident postmortem
			Status *UpdateIncidentPostMortemDataAttributesStatus `json:"status,omitempty"`

			// The title of the incident postmortem
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentPostMortemDataType `json:"type"`
	} `json:"data"`
}

// The status of the incident postmortem
type UpdateIncidentPostMortemDataAttributesStatus string

// UpdateIncidentPostMortemDataType defines model for UpdateIncidentPostMortem.Data.Type.
type UpdateIncidentPostMortemDataType string

// UpdateIncidentPostmortemTaskParams defines model for update_incident_postmortem_task_params.
type UpdateIncidentPostmortemTaskParams struct {
	// UUID of the postmortem that needs to be updated.
	PostmortemId *string                                     `json:"postmortem_id,omitempty"`
	Status       *string                                     `json:"status"`
	TaskType     *UpdateIncidentPostmortemTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title *string `json:"title"`
}

// UpdateIncidentPostmortemTaskParamsTaskType defines model for UpdateIncidentPostmortemTaskParams.TaskType.
type UpdateIncidentPostmortemTaskParamsTaskType string

// UpdateIncidentRole defines model for update_incident_role.
type UpdateIncidentRole struct {
	Data struct {
		Attributes struct {
			// The description of the incident role
			Description *string `json:"description"`

			// The name of the incident role
			Name *string `json:"name,omitempty"`

			// The summary of the incident role
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type UpdateIncidentRoleDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentRoleDataType defines model for UpdateIncidentRole.Data.Type.
type UpdateIncidentRoleDataType string

// UpdateIncidentRoleTask defines model for update_incident_role_task.
type UpdateIncidentRoleTask struct {
	Data struct {
		Attributes struct {
			// The description of the incident task
			Description *string `json:"description"`

			// The priority of the incident task
			Priority *UpdateIncidentRoleTaskDataAttributesPriority `json:"priority,omitempty"`

			// The task of the incident task
			Task *string `json:"task,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentRoleTaskDataType `json:"type"`
	} `json:"data"`
}

// The priority of the incident task
type UpdateIncidentRoleTaskDataAttributesPriority string

// UpdateIncidentRoleTaskDataType defines model for UpdateIncidentRoleTask.Data.Type.
type UpdateIncidentRoleTaskDataType string

// UpdateIncidentStatusPageEvent defines model for update_incident_status_page_event.
type UpdateIncidentStatusPageEvent struct {
	Data struct {
		Attributes struct {
			// The summary of the incident event
			Event *string `json:"event,omitempty"`

			// Notify all status pages subscribers
			NotifySubscribers *bool `json:"notify_subscribers"`

			// The status of the incident event
			Status *UpdateIncidentStatusPageEventDataAttributesStatus `json:"status,omitempty"`

			// Unique ID of the status page you wish to post the event to
			StatusPageId *string `json:"status_page_id,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentStatusPageEventDataType `json:"type"`
	} `json:"data"`
}

// The status of the incident event
type UpdateIncidentStatusPageEventDataAttributesStatus string

// UpdateIncidentStatusPageEventDataType defines model for UpdateIncidentStatusPageEvent.Data.Type.
type UpdateIncidentStatusPageEventDataType string

// UpdateIncidentTaskParams defines model for update_incident_task_params.
type UpdateIncidentTaskParams struct {
	AcknowledgedAt   *string   `json:"acknowledged_at"`
	DetectedAt       *string   `json:"detected_at"`
	EnvironmentIds   *[]string `json:"environment_ids"`
	FunctionalityIds *[]string `json:"functionality_ids"`
	GroupIds         *[]string `json:"group_ids"`

	// The incident id to update
	IncidentId      *string   `json:"incident_id,omitempty"`
	IncidentTypeIds *[]string `json:"incident_type_ids"`
	MitigatedAt     *string   `json:"mitigated_at"`
	Private         *bool     `json:"private,omitempty"`
	ResolvedAt      *string   `json:"resolved_at"`
	ServiceIds      *[]string `json:"service_ids"`
	SeverityId      *string   `json:"severity_id"`
	StartedAt       *string   `json:"started_at"`
	Status          *string   `json:"status"`

	// The incident summary
	Summary  *string                           `json:"summary"`
	TaskType *UpdateIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title *string `json:"title"`
}

// UpdateIncidentTaskParamsTaskType defines model for UpdateIncidentTaskParams.TaskType.
type UpdateIncidentTaskParamsTaskType string

// UpdateIncidentType defines model for update_incident_type.
type UpdateIncidentType struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the incident type
			Description *string `json:"description"`

			// The name of the incident type
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentTypeDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentTypeDataType defines model for UpdateIncidentType.Data.Type.
type UpdateIncidentTypeDataType string

// UpdateJiraIssueTaskParams defines model for update_jira_issue_task_params.
type UpdateJiraIssueTaskParams struct {
	// The assigned user's email.
	AssignUserEmail *string `json:"assign_user_email,omitempty"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON.
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The issue description.
	Description *string `json:"description,omitempty"`

	// The issue id.
	IssueId string `json:"issue_id"`

	// The issue labels.
	Labels *string `json:"labels,omitempty"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The project key.
	ProjectKey string `json:"project_key"`

	// The reporter user's email.
	ReporterUserEmail *string `json:"reporter_user_email,omitempty"`

	// The status id and display name.
	Status *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"status,omitempty"`
	TaskType *UpdateJiraIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title.
	Title *string `json:"title,omitempty"`
}

// UpdateJiraIssueTaskParamsTaskType defines model for UpdateJiraIssueTaskParams.TaskType.
type UpdateJiraIssueTaskParamsTaskType string

// UpdateLinearIssueTaskParams defines model for update_linear_issue_task_params.
type UpdateLinearIssueTaskParams struct {
	// The issue description.
	Description *string `json:"description,omitempty"`

	// The issue id.
	IssueId string `json:"issue_id"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The state id and display name.
	State *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"state,omitempty"`
	TaskType *UpdateLinearIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title.
	Title *string `json:"title,omitempty"`
}

// UpdateLinearIssueTaskParamsTaskType defines model for UpdateLinearIssueTaskParams.TaskType.
type UpdateLinearIssueTaskParamsTaskType string

// UpdatePlaybook defines model for update_playbook.
type UpdatePlaybook struct {
	Data struct {
		Attributes struct {
			// The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// The external url of the playbook
			ExternalUrl *string `json:"external_url"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID's to attach to the incident
			SeverityIds *[]string `json:"severity_ids"`

			// The summary of the playbook
			Summary *string `json:"summary"`

			// The title of the playbook
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdatePlaybookDataType `json:"type"`
	} `json:"data"`
}

// UpdatePlaybookDataType defines model for UpdatePlaybook.Data.Type.
type UpdatePlaybookDataType string

// UpdatePlaybookTask defines model for update_playbook_task.
type UpdatePlaybookTask struct {
	Data struct {
		Attributes struct {
			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task *string `json:"task,omitempty"`
		} `json:"attributes"`
		Type UpdatePlaybookTaskDataType `json:"type"`
	} `json:"data"`
}

// UpdatePlaybookTaskDataType defines model for UpdatePlaybookTask.Data.Type.
type UpdatePlaybookTaskDataType string

// UpdatePostMortemTemplate defines model for update_post_mortem_template.
type UpdatePostMortemTemplate struct {
	Data struct {
		Attributes struct {
			// Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// The name of the postmortem template
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdatePostMortemTemplateDataType `json:"type"`
	} `json:"data"`
}

// UpdatePostMortemTemplateDataType defines model for UpdatePostMortemTemplate.Data.Type.
type UpdatePostMortemTemplateDataType string

// UpdatePulse defines model for update_pulse.
type UpdatePulse struct {
	Data struct {
		Attributes struct {
			// Additional data
			Data *map[string]interface{} `json:"data"`

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {
				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`
			Refs *[]struct {
				// Key of the ref
				Key string `json:"key"`

				// Value of the ref
				Value string `json:"value"`
			} `json:"refs,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// The source of the pulse (eg: k8s)
			Source *string `json:"source"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary *string `json:"summary,omitempty"`
		} `json:"attributes"`
		Type *UpdatePulseDataType `json:"type,omitempty"`
	} `json:"data"`
}

// UpdatePulseDataType defines model for UpdatePulse.Data.Type.
type UpdatePulseDataType string

// UpdateService defines model for update_service.
type UpdateService struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the service
			Description *string `json:"description"`

			// Environments associated with this service
			EnvironmentIds *[]interface{} `json:"environment_ids"`

			// The GitHub repository branch associated to this service. eg: main
			GithubRepositoryBranch *string `json:"github_repository_branch"`

			// The GitHub repository name associated to this service. eg: rootlyhq/my-service
			GithubRepositoryName *string `json:"github_repository_name"`

			// The Gitlab repository branch associated to this service. eg: main
			GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

			// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
			GitlabRepositoryName *string `json:"gitlab_repository_name"`

			// The name of the service
			Name *string `json:"name,omitempty"`

			// Emails to attach to the service
			NotifyEmails *[]string `json:"notify_emails"`

			// The Opsgenie service id associated to this service
			OpsgenieId *string `json:"opsgenie_id"`

			// Owner Teams associated with this service
			OwnersGroupIds *[]interface{} `json:"owners_group_ids"`

			// The PagerDuty service id associated to this service
			PagerdutyId *string `json:"pagerduty_id"`

			// The public description of the service
			PublicDescription *string `json:"public_description"`

			// Services dependent on this service
			ServiceIds *[]interface{} `json:"service_ids"`

			// Slack Aliases associated with this service
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this service
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type UpdateServiceDataType `json:"type"`
	} `json:"data"`
}

// UpdateServiceDataType defines model for UpdateService.Data.Type.
type UpdateServiceDataType string

// UpdateServiceNowIncidentTaskParams defines model for update_service_now_incident_task_params.
type UpdateServiceNowIncidentTaskParams struct {
	// The completion id and display name.
	Completion *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion,omitempty"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON.
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The incident description
	Description *string `json:"description,omitempty"`

	// The incident id
	IncidentId string `json:"incident_id"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`
	TaskType *UpdateServiceNowIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title *string `json:"title,omitempty"`
}

// UpdateServiceNowIncidentTaskParamsTaskType defines model for UpdateServiceNowIncidentTaskParams.TaskType.
type UpdateServiceNowIncidentTaskParamsTaskType string

// UpdateSeverity defines model for update_severity.
type UpdateSeverity struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the severity
			Description *string `json:"description"`

			// The name of the severity
			Name *string `json:"name,omitempty"`

			// The severity of the severity
			Severity *UpdateSeverityDataAttributesSeverity `json:"severity,omitempty"`
		} `json:"attributes"`
		Type UpdateSeverityDataType `json:"type"`
	} `json:"data"`
}

// The severity of the severity
type UpdateSeverityDataAttributesSeverity string

// UpdateSeverityDataType defines model for UpdateSeverity.Data.Type.
type UpdateSeverityDataType string

// UpdateShortcutStoryTaskParams defines model for update_shortcut_story_task_params.
type UpdateShortcutStoryTaskParams struct {
	// The archivation id and display name.
	Archivation struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"archivation"`

	// The incident description
	Description *string `json:"description,omitempty"`

	// The story due date (ISO8601 format).
	DueDate *string `json:"due_date,omitempty"`

	// The story labels.
	Labels *string `json:"labels,omitempty"`

	// The story id
	StoryId  string                                 `json:"story_id"`
	TaskType *UpdateShortcutStoryTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title *string `json:"title,omitempty"`
}

// UpdateShortcutStoryTaskParamsTaskType defines model for UpdateShortcutStoryTaskParams.TaskType.
type UpdateShortcutStoryTaskParamsTaskType string

// UpdateShortcutTaskTaskParams defines model for update_shortcut_task_task_params.
type UpdateShortcutTaskTaskParams struct {
	// The completion id and display name.
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// The task description
	Description *string `json:"description,omitempty"`

	// The parent story
	ParentStoryId string `json:"parent_story_id"`

	// The task id
	TaskId   string                                `json:"task_id"`
	TaskType *UpdateShortcutTaskTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateShortcutTaskTaskParamsTaskType defines model for UpdateShortcutTaskTaskParams.TaskType.
type UpdateShortcutTaskTaskParamsTaskType string

// UpdateSlackChannelTopicTaskParams defines model for update_slack_channel_topic_task_params.
type UpdateSlackChannelTopicTaskParams struct {
	Channel struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channel"`
	TaskType *UpdateSlackChannelTopicTaskParamsTaskType `json:"task_type,omitempty"`
	Topic    string                                     `json:"topic"`
}

// UpdateSlackChannelTopicTaskParamsTaskType defines model for UpdateSlackChannelTopicTaskParams.TaskType.
type UpdateSlackChannelTopicTaskParamsTaskType string

// UpdateStatusPage defines model for update_status_page.
type UpdateStatusPage struct {
	Data struct {
		Attributes struct {
			// Allow search engines to include your public status page in search results.
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// The description of the status page
			Description *string `json:"description"`

			// Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Make the status page accessible to the public
			Public *bool `json:"public"`

			// Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// Show uptime over x days
			ShowUptimeLastDays *UpdateStatusPageDataAttributesShowUptimeLastDays `json:"show_uptime_last_days"`

			// The title of the status page
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdateStatusPageDataType `json:"type"`
	} `json:"data"`
}

// Show uptime over x days
type UpdateStatusPageDataAttributesShowUptimeLastDays int

// UpdateStatusPageDataType defines model for UpdateStatusPage.Data.Type.
type UpdateStatusPageDataType string

// UpdateStatusTaskParams defines model for update_status_task_params.
type UpdateStatusTaskParams struct {
	// In format '1 hour', '1 day', etc.
	InactivityTimeout *string                         `json:"inactivity_timeout,omitempty"`
	Status            UpdateStatusTaskParamsStatus    `json:"status"`
	TaskType          *UpdateStatusTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateStatusTaskParamsStatus defines model for UpdateStatusTaskParams.Status.
type UpdateStatusTaskParamsStatus string

// UpdateStatusTaskParamsTaskType defines model for UpdateStatusTaskParams.TaskType.
type UpdateStatusTaskParamsTaskType string

// UpdateTeam defines model for update_team.
type UpdateTeam struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the team
			Description *string `json:"description"`

			// The name of the team
			Name *string `json:"name,omitempty"`

			// Emails to attach to the team
			NotifyEmails *[]string `json:"notify_emails"`

			// Slack Aliases associated with this service
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this service
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type UpdateTeamDataType `json:"type"`
	} `json:"data"`
}

// UpdateTeamDataType defines model for UpdateTeam.Data.Type.
type UpdateTeamDataType string

// UpdateTrelloCardTaskParams defines model for update_trello_card_task_params.
type UpdateTrelloCardTaskParams struct {
	// The archivation id and display name.
	Archivation struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"archivation"`

	// The board id and display name.
	Board *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"board,omitempty"`

	// The card id
	CardId string `json:"card_id"`

	// The card description
	Description *string `json:"description,omitempty"`

	// The due date (ISO8601 format)
	DueDate *string `json:"due_date,omitempty"`
	Labels  *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"labels,omitempty"`

	// The list id and display name.
	List *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"list,omitempty"`
	TaskType *UpdateTrelloCardTaskParamsTaskType `json:"task_type,omitempty"`

	// The card title
	Title *string `json:"title,omitempty"`
}

// UpdateTrelloCardTaskParamsTaskType defines model for UpdateTrelloCardTaskParams.TaskType.
type UpdateTrelloCardTaskParamsTaskType string

// UpdateWorkflow defines model for update_workflow.
type UpdateWorkflow struct {
	Data struct {
		Attributes struct {
			// Workflow command.
			Command *string `json:"command"`

			// The description of the workflow
			Description     *string   `json:"description"`
			Enabled         *bool     `json:"enabled,omitempty"`
			EnvironmentIds  *[]string `json:"environment_ids,omitempty"`
			GroupIds        *[]string `json:"group_ids,omitempty"`
			IncidentTypeIds *[]string `json:"incident_type_ids,omitempty"`

			// The title of the workflow
			Name *string `json:"name,omitempty"`

			// The order which the workflow should run with other workflows.
			Position *float32 `json:"position,omitempty"`

			// Repeat workflow every duration.
			RepeatEveryDuration *string   `json:"repeat_every_duration"`
			ServiceIds          *[]string `json:"service_ids,omitempty"`
			SeverityIds         *[]string `json:"severity_ids,omitempty"`

			// The slug of the workflow
			Slug          *string                                 `json:"slug,omitempty"`
			TriggerParams *interface{}                            `json:"trigger_params,omitempty"`
			Triggers      *[]UpdateWorkflowDataAttributesTriggers `json:"triggers,omitempty"`

			// Wait this duration before executing.
			Wait *string `json:"wait"`
		} `json:"attributes"`
		Type UpdateWorkflowDataType `json:"type"`
	} `json:"data"`
}

// Actions that trigger the workflow.
type UpdateWorkflowDataAttributesTriggers string

// UpdateWorkflowDataType defines model for UpdateWorkflow.Data.Type.
type UpdateWorkflowDataType string

// UpdateWorkflowCustomFieldSelection defines model for update_workflow_custom_field_selection.
type UpdateWorkflowCustomFieldSelection struct {
	Data struct {
		Attributes struct {
			// The trigger condition
			IncidentCondition *UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition `json:"incident_condition,omitempty"`
			SelectedOptionIds *[]float32                                                         `json:"selected_option_ids,omitempty"`
		} `json:"attributes"`
		Type UpdateWorkflowCustomFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// The trigger condition
type UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition string

// UpdateWorkflowCustomFieldSelectionDataType defines model for UpdateWorkflowCustomFieldSelection.Data.Type.
type UpdateWorkflowCustomFieldSelectionDataType string

// UpdateWorkflowTask defines model for update_workflow_task.
type UpdateWorkflowTask struct {
	Data struct {
		Attributes struct {
			// The position of the workflow task
			Position   *float32     `json:"position,omitempty"`
			TaskParams *interface{} `json:"task_params,omitempty"`
		} `json:"attributes"`
		Type UpdateWorkflowTaskDataType `json:"type"`
	} `json:"data"`
}

// UpdateWorkflowTaskDataType defines model for UpdateWorkflowTask.Data.Type.
type UpdateWorkflowTaskDataType string

// UpdateZendeskTicketTaskParams defines model for update_zendesk_ticket_task_params.
type UpdateZendeskTicketTaskParams struct {
	// The completion id and display name.
	Completion *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion,omitempty"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The ticket subject.
	Subject *string `json:"subject,omitempty"`

	// The ticket tags.
	Tags     *string                                `json:"tags,omitempty"`
	TaskType *UpdateZendeskTicketTaskParamsTaskType `json:"task_type,omitempty"`

	// The ticket id.
	TicketId string `json:"ticket_id"`
}

// UpdateZendeskTicketTaskParamsTaskType defines model for UpdateZendeskTicketTaskParams.TaskType.
type UpdateZendeskTicketTaskParamsTaskType string

// UptimeChartResponse defines model for uptime_chart_response.
type UptimeChartResponse map[string]interface{}

// Workflow defines model for workflow.
type Workflow struct {
	// Workflow command.
	Command *string `json:"command"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the workflow
	Description     *string   `json:"description"`
	Enabled         *bool     `json:"enabled,omitempty"`
	EnvironmentIds  *[]string `json:"environment_ids,omitempty"`
	GroupIds        *[]string `json:"group_ids,omitempty"`
	IncidentTypeIds *[]string `json:"incident_type_ids,omitempty"`

	// The title of the workflow
	Name string `json:"name"`

	// The order which the workflow should run with other workflows.
	Position *float32 `json:"position,omitempty"`

	// Repeat workflow every duration.
	RepeatEveryDuration *string             `json:"repeat_every_duration"`
	RepeatOn            *[]WorkflowRepeatOn `json:"repeat_on"`
	ServiceIds          *[]string           `json:"service_ids,omitempty"`
	SeverityIds         *[]string           `json:"severity_ids,omitempty"`

	// The slug of the workflow
	Slug          *string             `json:"slug,omitempty"`
	TriggerParams *interface{}        `json:"trigger_params,omitempty"`
	Triggers      *[]WorkflowTriggers `json:"triggers,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// Wait this duration before executing.
	Wait *string `json:"wait"`
}

// Repeat on weekdays.
type WorkflowRepeatOn string

// Actions that trigger the workflow.
type WorkflowTriggers string

// WorkflowCustomFieldSelection defines model for workflow_custom_field_selection.
type WorkflowCustomFieldSelection struct {
	// The custom field for this selection
	CustomFieldId float32 `json:"custom_field_id"`

	// The trigger condition
	IncidentCondition WorkflowCustomFieldSelectionIncidentCondition `json:"incident_condition"`
	SelectedOptionIds []float32                                     `json:"selected_option_ids"`
}

// The trigger condition
type WorkflowCustomFieldSelectionIncidentCondition string

// WorkflowCustomFieldSelectionList defines model for workflow_custom_field_selection_list.
type WorkflowCustomFieldSelectionList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/workflow_custom_field_selection)
			WorkflowCustomFieldSelection `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the workflow_custom_field_selection
		Id   string                                   `json:"id"`
		Type WorkflowCustomFieldSelectionListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// WorkflowCustomFieldSelectionListDataType defines model for WorkflowCustomFieldSelectionList.Data.Type.
type WorkflowCustomFieldSelectionListDataType string

// WorkflowCustomFieldSelectionResponse defines model for workflow_custom_field_selection_response.
type WorkflowCustomFieldSelectionResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/workflow_custom_field_selection)
			WorkflowCustomFieldSelection `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the workflow_custom_field_selection
		Id   string                                       `json:"id"`
		Type WorkflowCustomFieldSelectionResponseDataType `json:"type"`
	} `json:"data"`
}

// WorkflowCustomFieldSelectionResponseDataType defines model for WorkflowCustomFieldSelectionResponse.Data.Type.
type WorkflowCustomFieldSelectionResponseDataType string

// WorkflowList defines model for workflow_list.
type WorkflowList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/workflow)
			Workflow `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the workflow
		Id   string               `json:"id"`
		Type WorkflowListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// WorkflowListDataType defines model for WorkflowList.Data.Type.
type WorkflowListDataType string

// WorkflowResponse defines model for workflow_response.
type WorkflowResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/workflow)
			Workflow `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the workflow
		Id   string                   `json:"id"`
		Type WorkflowResponseDataType `json:"type"`
	} `json:"data"`
}

// WorkflowResponseDataType defines model for WorkflowResponse.Data.Type.
type WorkflowResponseDataType string

// WorkflowTask defines model for workflow_task.
type WorkflowTask struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The position of the workflow task
	Position   float32     `json:"position"`
	TaskParams interface{} `json:"task_params"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The ID of the parent workflow
	WorkflowId string `json:"workflow_id"`
}

// WorkflowTaskList defines model for workflow_task_list.
type WorkflowTaskList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/workflow_task)
			WorkflowTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the workflow task
		Id   string                   `json:"id"`
		Type WorkflowTaskListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// WorkflowTaskListDataType defines model for WorkflowTaskList.Data.Type.
type WorkflowTaskListDataType string

// WorkflowTaskResponse defines model for workflow_task_response.
type WorkflowTaskResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/workflow_task)
			WorkflowTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the workflow task
		Id   string                       `json:"id"`
		Type WorkflowTaskResponseDataType `json:"type"`
	} `json:"data"`
}

// WorkflowTaskResponseDataType defines model for WorkflowTaskResponse.Data.Type.
type WorkflowTaskResponseDataType string

// GetScimUsersParams defines parameters for GetScimUsers.
type GetScimUsersParams struct {
	Filter     string `json:"filter"`
	StartIndex *int   `json:"startIndex,omitempty"`
	Count      *int   `json:"count,omitempty"`
}

// ListAlertsParams defines parameters for ListAlerts.
type ListAlertsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListCausesParams defines parameters for ListCauses.
type ListCausesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListCustomFieldsParams defines parameters for ListCustomFields.
type ListCustomFieldsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListCustomFieldOptionsParams defines parameters for ListCustomFieldOptions.
type ListCustomFieldOptionsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// GetDashboardPanelParams defines parameters for GetDashboardPanel.
type GetDashboardPanelParams struct {
	// Date range for panel data, ISO8601 timestamps separated by the word 'to'. Ex: '2022-06-19T11:28:46.029Z to 2022-07-18T21:58:46.029Z'.
	Range *string `json:"range,omitempty"`

	// The time period to group data by. Accepts 'day', 'week', and 'month'
	Period *string `json:"period,omitempty"`

	// The time zone to use for period
	TimeZone *string `json:"time_zone,omitempty"`
}

// ListDashboardsParams defines parameters for ListDashboards.
type ListDashboardsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListDashboardPanelsParams defines parameters for ListDashboardPanels.
type ListDashboardPanelsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListEnvironmentsParams defines parameters for ListEnvironments.
type ListEnvironmentsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListFunctionalitiesParams defines parameters for ListFunctionalities.
type ListFunctionalitiesParams struct {
	Include      *string `json:"include,omitempty"`
	PageNumber   *int    `json:"page[number],omitempty"`
	PageSize     *int    `json:"page[size],omitempty"`
	FilterSearch *string `json:"filter[search],omitempty"`
	FilterName   *string `json:"filter[name],omitempty"`
	FilterSlug   *string `json:"filter[slug],omitempty"`
}

// GetFunctionalityIncidentsChartParams defines parameters for GetFunctionalityIncidentsChart.
type GetFunctionalityIncidentsChartParams struct {
	Period string `json:"period"`
}

// GetFunctionalityUptimeChartParams defines parameters for GetFunctionalityUptimeChart.
type GetFunctionalityUptimeChartParams struct {
	Period *string `json:"period,omitempty"`
}

// ListIncidentRolesParams defines parameters for ListIncidentRoles.
type ListIncidentRolesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentRoleTasksParams defines parameters for ListIncidentRoleTasks.
type ListIncidentRoleTasksParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentTypesParams defines parameters for ListIncidentTypes.
type ListIncidentTypesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentsParams defines parameters for ListIncidents.
type ListIncidentsParams struct {
	Include                            *string        `json:"include,omitempty"`
	PageNumber                         *int           `json:"page[number],omitempty"`
	PageSize                           *int           `json:"page[size],omitempty"`
	FilterSearch                       *string        `json:"filter[search],omitempty"`
	FilterStatus                       *string        `json:"filter[status],omitempty"`
	FilterSeverity                     *string        `json:"filter[severity],omitempty"`
	FilterType                         *string        `json:"filter[type],omitempty"`
	FilterUserId                       *int           `json:"filter[user_id],omitempty"`
	FilterEnvironments                 *string        `json:"filter[environments],omitempty"`
	FilterFunctionalities              *string        `json:"filter[functionalities],omitempty"`
	FilterServices                     *[]interface{} `json:"filter[services],omitempty"`
	FilterTeams                        *[]interface{} `json:"filter[teams],omitempty"`
	FilterCustomFieldSelectedOptionIds *[]interface{} `json:"filter[custom_field_selected_option_ids],omitempty"`
}

// ListIncidentCustomFieldSelectionsParams defines parameters for ListIncidentCustomFieldSelections.
type ListIncidentCustomFieldSelectionsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentActionItemsParams defines parameters for ListIncidentActionItems.
type ListIncidentActionItemsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListAlertParams defines parameters for ListAlert.
type ListAlertParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentEventsParams defines parameters for ListIncidentEvents.
type ListIncidentEventsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentFeedbacksParams defines parameters for ListIncidentFeedbacks.
type ListIncidentFeedbacksParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentStatusPagesParams defines parameters for ListIncidentStatusPages.
type ListIncidentStatusPagesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListPlaybooksParams defines parameters for ListPlaybooks.
type ListPlaybooksParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListPlaybookTasksParams defines parameters for ListPlaybookTasks.
type ListPlaybookTasksParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListPostmortemTemplatesParams defines parameters for ListPostmortemTemplates.
type ListPostmortemTemplatesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentPostMortemsParams defines parameters for ListIncidentPostMortems.
type ListIncidentPostMortemsParams struct {
	Include               *string        `json:"include,omitempty"`
	PageNumber            *int           `json:"page[number],omitempty"`
	PageSize              *int           `json:"page[size],omitempty"`
	FilterSearch          *string        `json:"filter[search],omitempty"`
	FilterStatus          *string        `json:"filter[status],omitempty"`
	FilterSeverity        *string        `json:"filter[severity],omitempty"`
	FilterType            *string        `json:"filter[type],omitempty"`
	FilterUserId          *int           `json:"filter[user_id],omitempty"`
	FilterEnvironments    *string        `json:"filter[environments],omitempty"`
	FilterFunctionalities *string        `json:"filter[functionalities],omitempty"`
	FilterServices        *[]interface{} `json:"filter[services],omitempty"`
	FilterTeams           *[]interface{} `json:"filter[teams],omitempty"`
}

// ListPulsesParams defines parameters for ListPulses.
type ListPulsesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListServicesParams defines parameters for ListServices.
type ListServicesParams struct {
	Include           *string `json:"include,omitempty"`
	PageNumber        *int    `json:"page[number],omitempty"`
	PageSize          *int    `json:"page[size],omitempty"`
	FilterName        *string `json:"filter[name],omitempty"`
	FilterSlug        *string `json:"filter[slug],omitempty"`
	FilterBackstageId *string `json:"filter[backstage_id],omitempty"`
}

// GetServiceIncidentsChartParams defines parameters for GetServiceIncidentsChart.
type GetServiceIncidentsChartParams struct {
	Period string `json:"period"`
}

// GetServiceUptimeChartParams defines parameters for GetServiceUptimeChart.
type GetServiceUptimeChartParams struct {
	Period *string `json:"period,omitempty"`
}

// ListSeveritiesParams defines parameters for ListSeverities.
type ListSeveritiesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListStatusPagesParams defines parameters for ListStatusPages.
type ListStatusPagesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListTeamsParams defines parameters for ListTeams.
type ListTeamsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListWorkflowsParams defines parameters for ListWorkflows.
type ListWorkflowsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListWorkflowCustomFieldSelectionsParams defines parameters for ListWorkflowCustomFieldSelections.
type ListWorkflowCustomFieldSelectionsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListWorkflowTasksParams defines parameters for ListWorkflowTasks.
type ListWorkflowTasksParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetScimUsers request
	GetScimUsers(ctx context.Context, params *GetScimUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostScimUsers request
	PostScimUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteScimUsersId request
	DeleteScimUsersId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScimUsersId request
	GetScimUsersId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchScimUsersId request
	PatchScimUsersId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentActionItem request
	DeleteIncidentActionItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentActionItems request
	GetIncidentActionItems(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentActionItem request with any body
	UpdateIncidentActionItemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAlerts request
	ListAlerts(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAlert request with any body
	CreateAlertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlert request
	GetAlert(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCauses request
	ListCauses(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCause request with any body
	CreateCauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCause request
	DeleteCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCause request
	GetCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCause request with any body
	UpdateCauseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomFieldOption request
	DeleteCustomFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomFieldOption request
	GetCustomFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomFieldOption request with any body
	UpdateCustomFieldOptionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCustomFields request
	ListCustomFields(ctx context.Context, params *ListCustomFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomField request with any body
	CreateCustomFieldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCustomFieldOptions request
	ListCustomFieldOptions(ctx context.Context, customFieldId string, params *ListCustomFieldOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomFieldOption request with any body
	CreateCustomFieldOptionWithBody(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomField request
	DeleteCustomField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomField request
	GetCustomField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomField request with any body
	UpdateCustomFieldWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDashboardPanel request
	DeleteDashboardPanel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardPanel request
	GetDashboardPanel(ctx context.Context, id string, params *GetDashboardPanelParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDashboardPanel request with any body
	UpdateDashboardPanelWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DuplicateDashboardPanel request
	DuplicateDashboardPanel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDashboards request
	ListDashboards(ctx context.Context, params *ListDashboardsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDashboard request with any body
	CreateDashboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDashboardPanels request
	ListDashboardPanels(ctx context.Context, dashboardId string, params *ListDashboardPanelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDashboardPanel request with any body
	CreateDashboardPanelWithBody(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDashboard request
	DeleteDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboard request
	GetDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDashboard request with any body
	UpdateDashboardWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DuplicateDashboard request
	DuplicateDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetDefaultDashboard request
	SetDefaultDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEnvironments request
	ListEnvironments(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironment request with any body
	CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironment request
	DeleteEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEnvironment request with any body
	UpdateEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentEvent request
	DeleteIncidentEvent(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentEvents request
	GetIncidentEvents(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentEvent request with any body
	UpdateIncidentEventWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentFeedback request
	DeleteIncidentFeedback(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentFeedbacks request
	GetIncidentFeedbacks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentFeedback request with any body
	UpdateIncidentFeedbackWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFunctionalities request
	ListFunctionalities(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFunctionality request with any body
	CreateFunctionalityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFunctionality request
	DeleteFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionality request
	GetFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFunctionality request with any body
	UpdateFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionalityIncidentsChart request
	GetFunctionalityIncidentsChart(ctx context.Context, id string, params *GetFunctionalityIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionalityUptimeChart request
	GetFunctionalityUptimeChart(ctx context.Context, id string, params *GetFunctionalityUptimeChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentCustomFieldSelection request
	DeleteIncidentCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentCustomFieldSelection request
	GetIncidentCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentCustomFieldSelection request with any body
	UpdateIncidentCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentRoleTask request
	DeleteIncidentRoleTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentRoleTasks request
	GetIncidentRoleTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentRoleTask request with any body
	UpdateIncidentRoleTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentRoles request
	ListIncidentRoles(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentRole request with any body
	CreateIncidentRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentRole request
	DeleteIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentRole request
	GetIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentRole request with any body
	UpdateIncidentRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentRoleTasks request
	ListIncidentRoleTasks(ctx context.Context, incidentRoleId string, params *ListIncidentRoleTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentRoleTask request with any body
	CreateIncidentRoleTaskWithBody(ctx context.Context, incidentRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentTypes request
	ListIncidentTypes(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentType request with any body
	CreateIncidentTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentType request
	DeleteIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentType request
	GetIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentType request with any body
	UpdateIncidentTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidents request
	ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncident request with any body
	CreateIncidentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncident request
	DeleteIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncident request
	GetIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncident request with any body
	UpdateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelIncident request with any body
	CancelIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentCustomFieldSelections request
	ListIncidentCustomFieldSelections(ctx context.Context, id string, params *ListIncidentCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentCustomFieldSelection request with any body
	CreateIncidentCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MitigateIncident request with any body
	MitigateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResolveIncident request with any body
	ResolveIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentActionItems request
	ListIncidentActionItems(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentActionItem request with any body
	CreateIncidentActionItemWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAlert request
	ListAlert(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AttachAlert request with any body
	AttachAlertWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentEvents request
	ListIncidentEvents(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentEvent request with any body
	CreateIncidentEventWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentFeedbacks request
	ListIncidentFeedbacks(ctx context.Context, incidentId string, params *ListIncidentFeedbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentFeedback request with any body
	CreateIncidentFeedbackWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentStatusPages request
	ListIncidentStatusPages(ctx context.Context, incidentId string, params *ListIncidentStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentStatusPage request with any body
	CreateIncidentStatusPageWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlaybookTask request
	DeletePlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaybookTasks request
	GetPlaybookTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlaybookTask request with any body
	UpdatePlaybookTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlaybooks request
	ListPlaybooks(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlaybook request with any body
	CreatePlaybookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlaybook request
	DeletePlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaybook request
	GetPlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlaybook request with any body
	UpdatePlaybookWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlaybookTasks request
	ListPlaybookTasks(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlaybookTask request with any body
	CreatePlaybookTaskWithBody(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPostmortemTemplates request
	ListPostmortemTemplates(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePostmortemTemplate request with any body
	CreatePostmortemTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePostmortemTemplate request
	DeletePostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostmortemTemplate request
	GetPostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePostmortemTemplate request with any body
	UpdatePostmortemTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentPostMortems request
	ListIncidentPostMortems(ctx context.Context, params *ListIncidentPostMortemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentPostmortem request
	ListIncidentPostmortem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentPostmortem request with any body
	UpdateIncidentPostmortemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPulses request
	ListPulses(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePulse request with any body
	CreatePulseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPulse request
	GetPulse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePulse request with any body
	UpdatePulseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServices request
	ListServices(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateService request with any body
	CreateServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteService request
	DeleteService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetService request
	GetService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateService request with any body
	UpdateServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceIncidentsChart request
	GetServiceIncidentsChart(ctx context.Context, id string, params *GetServiceIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceUptimeChart request
	GetServiceUptimeChart(ctx context.Context, id string, params *GetServiceUptimeChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSeverities request
	ListSeverities(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSeverity request with any body
	CreateSeverityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSeverity request
	DeleteSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeverity request
	GetSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSeverity request with any body
	UpdateSeverityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentStatusPage request
	DeleteIncidentStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentStatusPages request
	GetIncidentStatusPages(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentStatusPage request with any body
	UpdateIncidentStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListStatusPages request
	ListStatusPages(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStatusPage request with any body
	CreateStatusPageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStatusPage request
	DeleteStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusPage request
	GetStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStatusPage request with any body
	UpdateStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTeams request
	ListTeams(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeam request with any body
	CreateTeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeam request
	DeleteTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeam request
	GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeam request with any body
	UpdateTeamWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflowCustomFieldSelection request
	DeleteWorkflowCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowCustomFieldSelection request
	GetWorkflowCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkflowCustomFieldSelection request with any body
	UpdateWorkflowCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflowTask request
	DeleteWorkflowTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowTask request
	GetWorkflowTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkflowTask request with any body
	UpdateWorkflowTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflows request
	ListWorkflows(ctx context.Context, params *ListWorkflowsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflow request with any body
	CreateWorkflowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflow request
	DeleteWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflow request
	GetWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkflow request with any body
	UpdateWorkflowWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflowCustomFieldSelections request
	ListWorkflowCustomFieldSelections(ctx context.Context, id string, params *ListWorkflowCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflowCustomFieldSelection request with any body
	CreateWorkflowCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflowTasks request
	ListWorkflowTasks(ctx context.Context, workflowId string, params *ListWorkflowTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflowTask request with any body
	CreateWorkflowTaskWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetScimUsers(ctx context.Context, params *GetScimUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScimUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScimUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScimUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteScimUsersId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteScimUsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScimUsersId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScimUsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScimUsersId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScimUsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentActionItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentActionItemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentActionItems(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentActionItemsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentActionItemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentActionItemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAlerts(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAlertsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAlertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAlertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlert(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCauses(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCausesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCauseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCauseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCauseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCauseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCauseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomFieldOptionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomFieldOptionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomFieldOptionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomFieldOptionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomFields(ctx context.Context, params *ListCustomFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomFieldsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomFieldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomFieldRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomFieldOptions(ctx context.Context, customFieldId string, params *ListCustomFieldOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomFieldOptionsRequest(c.Server, customFieldId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomFieldOptionWithBody(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomFieldOptionRequestWithBody(c.Server, customFieldId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomFieldRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomFieldRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomFieldWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomFieldRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDashboardPanel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDashboardPanelRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardPanel(ctx context.Context, id string, params *GetDashboardPanelParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardPanelRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDashboardPanelWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDashboardPanelRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DuplicateDashboardPanel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDuplicateDashboardPanelRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDashboards(ctx context.Context, params *ListDashboardsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDashboardsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDashboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDashboardRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDashboardPanels(ctx context.Context, dashboardId string, params *ListDashboardPanelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDashboardPanelsRequest(c.Server, dashboardId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDashboardPanelWithBody(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDashboardPanelRequestWithBody(c.Server, dashboardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDashboardRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDashboardWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDashboardRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DuplicateDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDuplicateDashboardRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetDefaultDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetDefaultDashboardRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEnvironments(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEnvironmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentEvent(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentEventRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentEvents(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentEventsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentEventWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentEventRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentFeedback(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentFeedbackRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentFeedbacks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentFeedbacksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentFeedbackWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentFeedbackRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFunctionalities(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFunctionalitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFunctionalityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFunctionalityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFunctionalityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionalityIncidentsChart(ctx context.Context, id string, params *GetFunctionalityIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalityIncidentsChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionalityUptimeChart(ctx context.Context, id string, params *GetFunctionalityUptimeChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalityUptimeChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentCustomFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentCustomFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentCustomFieldSelectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentRoleTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRoleTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentRoleTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRoleTasksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentRoleTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRoleTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentRoles(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRoleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentRoleTasks(ctx context.Context, incidentRoleId string, params *ListIncidentRoleTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentRoleTasksRequest(c.Server, incidentRoleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentRoleTaskWithBody(ctx context.Context, incidentRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRoleTaskRequestWithBody(c.Server, incidentRoleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentTypes(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentTypeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentCustomFieldSelections(ctx context.Context, id string, params *ListIncidentCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentCustomFieldSelectionsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentCustomFieldSelectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MitigateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMitigateIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolveIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResolveIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentActionItems(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentActionItemsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentActionItemWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentActionItemRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAlert(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAlertRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachAlertWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachAlertRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentEvents(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentEventsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentEventWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentEventRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentFeedbacks(ctx context.Context, incidentId string, params *ListIncidentFeedbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentFeedbacksRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentFeedbackWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentFeedbackRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentStatusPages(ctx context.Context, incidentId string, params *ListIncidentStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentStatusPagesRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentStatusPageWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentStatusPageRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaybookTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaybookTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaybookTasksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlaybookTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaybooks(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlaybooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaybookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaybookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaybookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlaybookRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaybookTasks(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlaybookTasksRequest(c.Server, playbookId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookTaskWithBody(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaybookTaskRequestWithBody(c.Server, playbookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPostmortemTemplates(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPostmortemTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePostmortemTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePostmortemTemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePostmortemTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostmortemTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePostmortemTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePostmortemTemplateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentPostMortems(ctx context.Context, params *ListIncidentPostMortemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentPostMortemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentPostmortem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentPostmortemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentPostmortemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentPostmortemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPulses(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPulsesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePulseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePulseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPulse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPulseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePulseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePulseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServices(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceIncidentsChart(ctx context.Context, id string, params *GetServiceIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceIncidentsChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceUptimeChart(ctx context.Context, id string, params *GetServiceUptimeChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceUptimeChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSeverities(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSeveritiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSeverityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSeverityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSeverityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeverityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSeverityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSeverityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentStatusPages(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentStatusPagesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentStatusPageRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListStatusPages(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListStatusPagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStatusPageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStatusPageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStatusPageRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTeams(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTeamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflowCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowCustomFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowCustomFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowCustomFieldSelectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflowTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflows(ctx context.Context, params *ListWorkflowsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflowCustomFieldSelections(ctx context.Context, id string, params *ListWorkflowCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowCustomFieldSelectionsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowCustomFieldSelectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflowTasks(ctx context.Context, workflowId string, params *ListWorkflowTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowTasksRequest(c.Server, workflowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowTaskWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowTaskRequestWithBody(c.Server, workflowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetScimUsersRequest generates requests for GetScimUsers
func NewGetScimUsersRequest(server string, params *GetScimUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scim/Users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, params.Filter); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.StartIndex != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startIndex", runtime.ParamLocationQuery, *params.StartIndex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostScimUsersRequest generates requests for PostScimUsers
func NewPostScimUsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scim/Users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteScimUsersIdRequest generates requests for DeleteScimUsersId
func NewDeleteScimUsersIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scim/Users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScimUsersIdRequest generates requests for GetScimUsersId
func NewGetScimUsersIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scim/Users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchScimUsersIdRequest generates requests for PatchScimUsersId
func NewPatchScimUsersIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scim/Users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIncidentActionItemRequest generates requests for DeleteIncidentActionItem
func NewDeleteIncidentActionItemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentActionItemsRequest generates requests for GetIncidentActionItems
func NewGetIncidentActionItemsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentActionItemRequestWithBody generates requests for UpdateIncidentActionItem with any type of body
func NewUpdateIncidentActionItemRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAlertsRequest generates requests for ListAlerts
func NewListAlertsRequest(server string, params *ListAlertsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAlertRequestWithBody generates requests for CreateAlert with any type of body
func NewCreateAlertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertRequest generates requests for GetAlert
func NewGetAlertRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListCausesRequest generates requests for ListCauses
func NewListCausesRequest(server string, params *ListCausesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCauseRequestWithBody generates requests for CreateCause with any type of body
func NewCreateCauseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCauseRequest generates requests for DeleteCause
func NewDeleteCauseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCauseRequest generates requests for GetCause
func NewGetCauseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCauseRequestWithBody generates requests for UpdateCause with any type of body
func NewUpdateCauseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomFieldOptionRequest generates requests for DeleteCustomFieldOption
func NewDeleteCustomFieldOptionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomFieldOptionRequest generates requests for GetCustomFieldOption
func NewGetCustomFieldOptionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCustomFieldOptionRequestWithBody generates requests for UpdateCustomFieldOption with any type of body
func NewUpdateCustomFieldOptionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCustomFieldsRequest generates requests for ListCustomFields
func NewListCustomFieldsRequest(server string, params *ListCustomFieldsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCustomFieldRequestWithBody generates requests for CreateCustomField with any type of body
func NewCreateCustomFieldRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCustomFieldOptionsRequest generates requests for ListCustomFieldOptions
func NewListCustomFieldOptionsRequest(server string, customFieldId string, params *ListCustomFieldOptionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_field_id", runtime.ParamLocationPath, customFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s/options", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCustomFieldOptionRequestWithBody generates requests for CreateCustomFieldOption with any type of body
func NewCreateCustomFieldOptionRequestWithBody(server string, customFieldId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_field_id", runtime.ParamLocationPath, customFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s/options", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomFieldRequest generates requests for DeleteCustomField
func NewDeleteCustomFieldRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomFieldRequest generates requests for GetCustomField
func NewGetCustomFieldRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCustomFieldRequestWithBody generates requests for UpdateCustomField with any type of body
func NewUpdateCustomFieldRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDashboardPanelRequest generates requests for DeleteDashboardPanel
func NewDeleteDashboardPanelRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboard_panels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardPanelRequest generates requests for GetDashboardPanel
func NewGetDashboardPanelRequest(server string, id string, params *GetDashboardPanelParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboard_panels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Range != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "range", runtime.ParamLocationQuery, *params.Range); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Period != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TimeZone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_zone", runtime.ParamLocationQuery, *params.TimeZone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDashboardPanelRequestWithBody generates requests for UpdateDashboardPanel with any type of body
func NewUpdateDashboardPanelRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboard_panels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDuplicateDashboardPanelRequest generates requests for DuplicateDashboardPanel
func NewDuplicateDashboardPanelRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboard_panels/%s/duplicate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDashboardsRequest generates requests for ListDashboards
func NewListDashboardsRequest(server string, params *ListDashboardsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDashboardRequestWithBody generates requests for CreateDashboard with any type of body
func NewCreateDashboardRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDashboardPanelsRequest generates requests for ListDashboardPanels
func NewListDashboardPanelsRequest(server string, dashboardId string, params *ListDashboardPanelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboard_id", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s/panels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDashboardPanelRequestWithBody generates requests for CreateDashboardPanel with any type of body
func NewCreateDashboardPanelRequestWithBody(server string, dashboardId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboard_id", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s/panels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDashboardRequest generates requests for DeleteDashboard
func NewDeleteDashboardRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardRequest generates requests for GetDashboard
func NewGetDashboardRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDashboardRequestWithBody generates requests for UpdateDashboard with any type of body
func NewUpdateDashboardRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDuplicateDashboardRequest generates requests for DuplicateDashboard
func NewDuplicateDashboardRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s/duplicate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetDefaultDashboardRequest generates requests for SetDefaultDashboard
func NewSetDefaultDashboardRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s/set_default", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListEnvironmentsRequest generates requests for ListEnvironments
func NewListEnvironmentsRequest(server string, params *ListEnvironmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentRequestWithBody generates requests for CreateEnvironment with any type of body
func NewCreateEnvironmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentRequest generates requests for DeleteEnvironment
func NewDeleteEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEnvironmentRequestWithBody generates requests for UpdateEnvironment with any type of body
func NewUpdateEnvironmentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentEventRequest generates requests for DeleteIncidentEvent
func NewDeleteIncidentEventRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentEventsRequest generates requests for GetIncidentEvents
func NewGetIncidentEventsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentEventRequestWithBody generates requests for UpdateIncidentEvent with any type of body
func NewUpdateIncidentEventRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentFeedbackRequest generates requests for DeleteIncidentFeedback
func NewDeleteIncidentFeedbackRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/feedbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentFeedbacksRequest generates requests for GetIncidentFeedbacks
func NewGetIncidentFeedbacksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/feedbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentFeedbackRequestWithBody generates requests for UpdateIncidentFeedback with any type of body
func NewUpdateIncidentFeedbackRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/feedbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFunctionalitiesRequest generates requests for ListFunctionalities
func NewListFunctionalitiesRequest(server string, params *ListFunctionalitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFunctionalityRequestWithBody generates requests for CreateFunctionality with any type of body
func NewCreateFunctionalityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFunctionalityRequest generates requests for DeleteFunctionality
func NewDeleteFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionalityRequest generates requests for GetFunctionality
func NewGetFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFunctionalityRequestWithBody generates requests for UpdateFunctionality with any type of body
func NewUpdateFunctionalityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFunctionalityIncidentsChartRequest generates requests for GetFunctionalityIncidentsChart
func NewGetFunctionalityIncidentsChartRequest(server string, id string, params *GetFunctionalityIncidentsChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s/incidents_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionalityUptimeChartRequest generates requests for GetFunctionalityUptimeChart
func NewGetFunctionalityUptimeChartRequest(server string, id string, params *GetFunctionalityUptimeChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s/uptime_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Period != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIncidentCustomFieldSelectionRequest generates requests for DeleteIncidentCustomFieldSelection
func NewDeleteIncidentCustomFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentCustomFieldSelectionRequest generates requests for GetIncidentCustomFieldSelection
func NewGetIncidentCustomFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentCustomFieldSelectionRequestWithBody generates requests for UpdateIncidentCustomFieldSelection with any type of body
func NewUpdateIncidentCustomFieldSelectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRoleTaskRequest generates requests for DeleteIncidentRoleTask
func NewDeleteIncidentRoleTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_role_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRoleTasksRequest generates requests for GetIncidentRoleTasks
func NewGetIncidentRoleTasksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_role_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRoleTaskRequestWithBody generates requests for UpdateIncidentRoleTask with any type of body
func NewUpdateIncidentRoleTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_role_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentRolesRequest generates requests for ListIncidentRoles
func NewListIncidentRolesRequest(server string, params *ListIncidentRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRoleRequestWithBody generates requests for CreateIncidentRole with any type of body
func NewCreateIncidentRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRoleRequest generates requests for DeleteIncidentRole
func NewDeleteIncidentRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRoleRequest generates requests for GetIncidentRole
func NewGetIncidentRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRoleRequestWithBody generates requests for UpdateIncidentRole with any type of body
func NewUpdateIncidentRoleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentRoleTasksRequest generates requests for ListIncidentRoleTasks
func NewListIncidentRoleTasksRequest(server string, incidentRoleId string, params *ListIncidentRoleTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_role_id", runtime.ParamLocationPath, incidentRoleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s/incident_role_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRoleTaskRequestWithBody generates requests for CreateIncidentRoleTask with any type of body
func NewCreateIncidentRoleTaskRequestWithBody(server string, incidentRoleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_role_id", runtime.ParamLocationPath, incidentRoleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s/incident_role_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentTypesRequest generates requests for ListIncidentTypes
func NewListIncidentTypesRequest(server string, params *ListIncidentTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentTypeRequestWithBody generates requests for CreateIncidentType with any type of body
func NewCreateIncidentTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentTypeRequest generates requests for DeleteIncidentType
func NewDeleteIncidentTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentTypeRequest generates requests for GetIncidentType
func NewGetIncidentTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentTypeRequestWithBody generates requests for UpdateIncidentType with any type of body
func NewUpdateIncidentTypeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentsRequest generates requests for ListIncidents
func NewListIncidentsRequest(server string, params *ListIncidentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[status]", runtime.ParamLocationQuery, *params.FilterStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSeverity != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[severity]", runtime.ParamLocationQuery, *params.FilterSeverity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[type]", runtime.ParamLocationQuery, *params.FilterType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterUserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[user_id]", runtime.ParamLocationQuery, *params.FilterUserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEnvironments != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[environments]", runtime.ParamLocationQuery, *params.FilterEnvironments); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterFunctionalities != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[functionalities]", runtime.ParamLocationQuery, *params.FilterFunctionalities); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterServices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[services]", runtime.ParamLocationQuery, *params.FilterServices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterTeams != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[teams]", runtime.ParamLocationQuery, *params.FilterTeams); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCustomFieldSelectedOptionIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[custom_field_selected_option_ids]", runtime.ParamLocationQuery, *params.FilterCustomFieldSelectedOptionIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRequestWithBody generates requests for CreateIncident with any type of body
func NewCreateIncidentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRequest generates requests for DeleteIncident
func NewDeleteIncidentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRequest generates requests for GetIncident
func NewGetIncidentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRequestWithBody generates requests for UpdateIncident with any type of body
func NewUpdateIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelIncidentRequestWithBody generates requests for CancelIncident with any type of body
func NewCancelIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentCustomFieldSelectionsRequest generates requests for ListIncidentCustomFieldSelections
func NewListIncidentCustomFieldSelectionsRequest(server string, id string, params *ListIncidentCustomFieldSelectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/custom_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentCustomFieldSelectionRequestWithBody generates requests for CreateIncidentCustomFieldSelection with any type of body
func NewCreateIncidentCustomFieldSelectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/custom_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMitigateIncidentRequestWithBody generates requests for MitigateIncident with any type of body
func NewMitigateIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/mitigate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResolveIncidentRequestWithBody generates requests for ResolveIncident with any type of body
func NewResolveIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/resolve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentActionItemsRequest generates requests for ListIncidentActionItems
func NewListIncidentActionItemsRequest(server string, incidentId string, params *ListIncidentActionItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/action_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentActionItemRequestWithBody generates requests for CreateIncidentActionItem with any type of body
func NewCreateIncidentActionItemRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/action_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAlertRequest generates requests for ListAlert
func NewListAlertRequest(server string, incidentId string, params *ListAlertParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/alerts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAttachAlertRequestWithBody generates requests for AttachAlert with any type of body
func NewAttachAlertRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/alerts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentEventsRequest generates requests for ListIncidentEvents
func NewListIncidentEventsRequest(server string, incidentId string, params *ListIncidentEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentEventRequestWithBody generates requests for CreateIncidentEvent with any type of body
func NewCreateIncidentEventRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentFeedbacksRequest generates requests for ListIncidentFeedbacks
func NewListIncidentFeedbacksRequest(server string, incidentId string, params *ListIncidentFeedbacksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/feedbacks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentFeedbackRequestWithBody generates requests for CreateIncidentFeedback with any type of body
func NewCreateIncidentFeedbackRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/feedbacks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentStatusPagesRequest generates requests for ListIncidentStatusPages
func NewListIncidentStatusPagesRequest(server string, incidentId string, params *ListIncidentStatusPagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/status-page-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentStatusPageRequestWithBody generates requests for CreateIncidentStatusPage with any type of body
func NewCreateIncidentStatusPageRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/status-page-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaybookTaskRequest generates requests for DeletePlaybookTask
func NewDeletePlaybookTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaybookTasksRequest generates requests for GetPlaybookTasks
func NewGetPlaybookTasksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlaybookTaskRequestWithBody generates requests for UpdatePlaybookTask with any type of body
func NewUpdatePlaybookTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlaybooksRequest generates requests for ListPlaybooks
func NewListPlaybooksRequest(server string, params *ListPlaybooksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaybookRequestWithBody generates requests for CreatePlaybook with any type of body
func NewCreatePlaybookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaybookRequest generates requests for DeletePlaybook
func NewDeletePlaybookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaybookRequest generates requests for GetPlaybook
func NewGetPlaybookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlaybookRequestWithBody generates requests for UpdatePlaybook with any type of body
func NewUpdatePlaybookRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlaybookTasksRequest generates requests for ListPlaybookTasks
func NewListPlaybookTasksRequest(server string, playbookId string, params *ListPlaybookTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, playbookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s/playbook_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaybookTaskRequestWithBody generates requests for CreatePlaybookTask with any type of body
func NewCreatePlaybookTaskRequestWithBody(server string, playbookId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, playbookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s/playbook_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPostmortemTemplatesRequest generates requests for ListPostmortemTemplates
func NewListPostmortemTemplatesRequest(server string, params *ListPostmortemTemplatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePostmortemTemplateRequestWithBody generates requests for CreatePostmortemTemplate with any type of body
func NewCreatePostmortemTemplateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePostmortemTemplateRequest generates requests for DeletePostmortemTemplate
func NewDeletePostmortemTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostmortemTemplateRequest generates requests for GetPostmortemTemplate
func NewGetPostmortemTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePostmortemTemplateRequestWithBody generates requests for UpdatePostmortemTemplate with any type of body
func NewUpdatePostmortemTemplateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentPostMortemsRequest generates requests for ListIncidentPostMortems
func NewListIncidentPostMortemsRequest(server string, params *ListIncidentPostMortemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[status]", runtime.ParamLocationQuery, *params.FilterStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSeverity != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[severity]", runtime.ParamLocationQuery, *params.FilterSeverity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[type]", runtime.ParamLocationQuery, *params.FilterType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterUserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[user_id]", runtime.ParamLocationQuery, *params.FilterUserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEnvironments != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[environments]", runtime.ParamLocationQuery, *params.FilterEnvironments); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterFunctionalities != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[functionalities]", runtime.ParamLocationQuery, *params.FilterFunctionalities); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterServices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[services]", runtime.ParamLocationQuery, *params.FilterServices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterTeams != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[teams]", runtime.ParamLocationQuery, *params.FilterTeams); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListIncidentPostmortemRequest generates requests for ListIncidentPostmortem
func NewListIncidentPostmortemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentPostmortemRequestWithBody generates requests for UpdateIncidentPostmortem with any type of body
func NewUpdateIncidentPostmortemRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPulsesRequest generates requests for ListPulses
func NewListPulsesRequest(server string, params *ListPulsesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePulseRequestWithBody generates requests for CreatePulse with any type of body
func NewCreatePulseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPulseRequest generates requests for GetPulse
func NewGetPulseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePulseRequestWithBody generates requests for UpdatePulse with any type of body
func NewUpdatePulseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListServicesRequest generates requests for ListServices
func NewListServicesRequest(server string, params *ListServicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterBackstageId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[backstage_id]", runtime.ParamLocationQuery, *params.FilterBackstageId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServiceRequestWithBody generates requests for CreateService with any type of body
func NewCreateServiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceRequest generates requests for DeleteService
func NewDeleteServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceRequest generates requests for GetService
func NewGetServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateServiceRequestWithBody generates requests for UpdateService with any type of body
func NewUpdateServiceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceIncidentsChartRequest generates requests for GetServiceIncidentsChart
func NewGetServiceIncidentsChartRequest(server string, id string, params *GetServiceIncidentsChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s/incidents_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceUptimeChartRequest generates requests for GetServiceUptimeChart
func NewGetServiceUptimeChartRequest(server string, id string, params *GetServiceUptimeChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s/uptime_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Period != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSeveritiesRequest generates requests for ListSeverities
func NewListSeveritiesRequest(server string, params *ListSeveritiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSeverityRequestWithBody generates requests for CreateSeverity with any type of body
func NewCreateSeverityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSeverityRequest generates requests for DeleteSeverity
func NewDeleteSeverityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeverityRequest generates requests for GetSeverity
func NewGetSeverityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSeverityRequestWithBody generates requests for UpdateSeverity with any type of body
func NewUpdateSeverityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentStatusPageRequest generates requests for DeleteIncidentStatusPage
func NewDeleteIncidentStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-page-events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentStatusPagesRequest generates requests for GetIncidentStatusPages
func NewGetIncidentStatusPagesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-page-events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentStatusPageRequestWithBody generates requests for UpdateIncidentStatusPage with any type of body
func NewUpdateIncidentStatusPageRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-page-events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListStatusPagesRequest generates requests for ListStatusPages
func NewListStatusPagesRequest(server string, params *ListStatusPagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStatusPageRequestWithBody generates requests for CreateStatusPage with any type of body
func NewCreateStatusPageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStatusPageRequest generates requests for DeleteStatusPage
func NewDeleteStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusPageRequest generates requests for GetStatusPage
func NewGetStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateStatusPageRequestWithBody generates requests for UpdateStatusPage with any type of body
func NewUpdateStatusPageRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTeamsRequest generates requests for ListTeams
func NewListTeamsRequest(server string, params *ListTeamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamRequestWithBody generates requests for CreateTeam with any type of body
func NewCreateTeamRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamRequest generates requests for DeleteTeam
func NewDeleteTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamRequest generates requests for GetTeam
func NewGetTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamRequestWithBody generates requests for UpdateTeam with any type of body
func NewUpdateTeamRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkflowCustomFieldSelectionRequest generates requests for DeleteWorkflowCustomFieldSelection
func NewDeleteWorkflowCustomFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowCustomFieldSelectionRequest generates requests for GetWorkflowCustomFieldSelection
func NewGetWorkflowCustomFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkflowCustomFieldSelectionRequestWithBody generates requests for UpdateWorkflowCustomFieldSelection with any type of body
func NewUpdateWorkflowCustomFieldSelectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkflowTaskRequest generates requests for DeleteWorkflowTask
func NewDeleteWorkflowTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowTaskRequest generates requests for GetWorkflowTask
func NewGetWorkflowTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkflowTaskRequestWithBody generates requests for UpdateWorkflowTask with any type of body
func NewUpdateWorkflowTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowsRequest generates requests for ListWorkflows
func NewListWorkflowsRequest(server string, params *ListWorkflowsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowRequestWithBody generates requests for CreateWorkflow with any type of body
func NewCreateWorkflowRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkflowRequest generates requests for DeleteWorkflow
func NewDeleteWorkflowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowRequest generates requests for GetWorkflow
func NewGetWorkflowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkflowRequestWithBody generates requests for UpdateWorkflow with any type of body
func NewUpdateWorkflowRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowCustomFieldSelectionsRequest generates requests for ListWorkflowCustomFieldSelections
func NewListWorkflowCustomFieldSelectionsRequest(server string, id string, params *ListWorkflowCustomFieldSelectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/custom_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowCustomFieldSelectionRequestWithBody generates requests for CreateWorkflowCustomFieldSelection with any type of body
func NewCreateWorkflowCustomFieldSelectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/custom_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowTasksRequest generates requests for ListWorkflowTasks
func NewListWorkflowTasksRequest(server string, workflowId string, params *ListWorkflowTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/workflow_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowTaskRequestWithBody generates requests for CreateWorkflowTask with any type of body
func NewCreateWorkflowTaskRequestWithBody(server string, workflowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/workflow_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetScimUsers request
	GetScimUsersWithResponse(ctx context.Context, params *GetScimUsersParams, reqEditors ...RequestEditorFn) (*GetScimUsersResponse, error)

	// PostScimUsers request
	PostScimUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostScimUsersResponse, error)

	// DeleteScimUsersId request
	DeleteScimUsersIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteScimUsersIdResponse, error)

	// GetScimUsersId request
	GetScimUsersIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetScimUsersIdResponse, error)

	// PatchScimUsersId request
	PatchScimUsersIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PatchScimUsersIdResponse, error)

	// DeleteIncidentActionItem request
	DeleteIncidentActionItemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentActionItemResponse, error)

	// GetIncidentActionItems request
	GetIncidentActionItemsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentActionItemsResponse, error)

	// UpdateIncidentActionItem request with any body
	UpdateIncidentActionItemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentActionItemResponse, error)

	// ListAlerts request
	ListAlertsWithResponse(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*ListAlertsResponse, error)

	// CreateAlert request with any body
	CreateAlertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlertResponse, error)

	// GetAlert request
	GetAlertWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertResponse, error)

	// ListCauses request
	ListCausesWithResponse(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*ListCausesResponse, error)

	// CreateCause request with any body
	CreateCauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCauseResponse, error)

	// DeleteCause request
	DeleteCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCauseResponse, error)

	// GetCause request
	GetCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCauseResponse, error)

	// UpdateCause request with any body
	UpdateCauseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCauseResponse, error)

	// DeleteCustomFieldOption request
	DeleteCustomFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldOptionResponse, error)

	// GetCustomFieldOption request
	GetCustomFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomFieldOptionResponse, error)

	// UpdateCustomFieldOption request with any body
	UpdateCustomFieldOptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldOptionResponse, error)

	// ListCustomFields request
	ListCustomFieldsWithResponse(ctx context.Context, params *ListCustomFieldsParams, reqEditors ...RequestEditorFn) (*ListCustomFieldsResponse, error)

	// CreateCustomField request with any body
	CreateCustomFieldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldResponse, error)

	// ListCustomFieldOptions request
	ListCustomFieldOptionsWithResponse(ctx context.Context, customFieldId string, params *ListCustomFieldOptionsParams, reqEditors ...RequestEditorFn) (*ListCustomFieldOptionsResponse, error)

	// CreateCustomFieldOption request with any body
	CreateCustomFieldOptionWithBodyWithResponse(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldOptionResponse, error)

	// DeleteCustomField request
	DeleteCustomFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldResponse, error)

	// GetCustomField request
	GetCustomFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomFieldResponse, error)

	// UpdateCustomField request with any body
	UpdateCustomFieldWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldResponse, error)

	// DeleteDashboardPanel request
	DeleteDashboardPanelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDashboardPanelResponse, error)

	// GetDashboardPanel request
	GetDashboardPanelWithResponse(ctx context.Context, id string, params *GetDashboardPanelParams, reqEditors ...RequestEditorFn) (*GetDashboardPanelResponse, error)

	// UpdateDashboardPanel request with any body
	UpdateDashboardPanelWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDashboardPanelResponse, error)

	// DuplicateDashboardPanel request
	DuplicateDashboardPanelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DuplicateDashboardPanelResponse, error)

	// ListDashboards request
	ListDashboardsWithResponse(ctx context.Context, params *ListDashboardsParams, reqEditors ...RequestEditorFn) (*ListDashboardsResponse, error)

	// CreateDashboard request with any body
	CreateDashboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDashboardResponse, error)

	// ListDashboardPanels request
	ListDashboardPanelsWithResponse(ctx context.Context, dashboardId string, params *ListDashboardPanelsParams, reqEditors ...RequestEditorFn) (*ListDashboardPanelsResponse, error)

	// CreateDashboardPanel request with any body
	CreateDashboardPanelWithBodyWithResponse(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDashboardPanelResponse, error)

	// DeleteDashboard request
	DeleteDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDashboardResponse, error)

	// GetDashboard request
	GetDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetDashboardResponse, error)

	// UpdateDashboard request with any body
	UpdateDashboardWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDashboardResponse, error)

	// DuplicateDashboard request
	DuplicateDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DuplicateDashboardResponse, error)

	// SetDefaultDashboard request
	SetDefaultDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SetDefaultDashboardResponse, error)

	// ListEnvironments request
	ListEnvironmentsWithResponse(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error)

	// CreateEnvironment request with any body
	CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	// DeleteEnvironment request
	DeleteEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error)

	// GetEnvironment request
	GetEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// UpdateEnvironment request with any body
	UpdateEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error)

	// DeleteIncidentEvent request
	DeleteIncidentEventWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventResponse, error)

	// GetIncidentEvents request
	GetIncidentEventsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventsResponse, error)

	// UpdateIncidentEvent request with any body
	UpdateIncidentEventWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventResponse, error)

	// DeleteIncidentFeedback request
	DeleteIncidentFeedbackWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentFeedbackResponse, error)

	// GetIncidentFeedbacks request
	GetIncidentFeedbacksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentFeedbacksResponse, error)

	// UpdateIncidentFeedback request with any body
	UpdateIncidentFeedbackWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentFeedbackResponse, error)

	// ListFunctionalities request
	ListFunctionalitiesWithResponse(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*ListFunctionalitiesResponse, error)

	// CreateFunctionality request with any body
	CreateFunctionalityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFunctionalityResponse, error)

	// DeleteFunctionality request
	DeleteFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFunctionalityResponse, error)

	// GetFunctionality request
	GetFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFunctionalityResponse, error)

	// UpdateFunctionality request with any body
	UpdateFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFunctionalityResponse, error)

	// GetFunctionalityIncidentsChart request
	GetFunctionalityIncidentsChartWithResponse(ctx context.Context, id string, params *GetFunctionalityIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetFunctionalityIncidentsChartResponse, error)

	// GetFunctionalityUptimeChart request
	GetFunctionalityUptimeChartWithResponse(ctx context.Context, id string, params *GetFunctionalityUptimeChartParams, reqEditors ...RequestEditorFn) (*GetFunctionalityUptimeChartResponse, error)

	// DeleteIncidentCustomFieldSelection request
	DeleteIncidentCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentCustomFieldSelectionResponse, error)

	// GetIncidentCustomFieldSelection request
	GetIncidentCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentCustomFieldSelectionResponse, error)

	// UpdateIncidentCustomFieldSelection request with any body
	UpdateIncidentCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentCustomFieldSelectionResponse, error)

	// DeleteIncidentRoleTask request
	DeleteIncidentRoleTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleTaskResponse, error)

	// GetIncidentRoleTasks request
	GetIncidentRoleTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleTasksResponse, error)

	// UpdateIncidentRoleTask request with any body
	UpdateIncidentRoleTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleTaskResponse, error)

	// ListIncidentRoles request
	ListIncidentRolesWithResponse(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*ListIncidentRolesResponse, error)

	// CreateIncidentRole request with any body
	CreateIncidentRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleResponse, error)

	// DeleteIncidentRole request
	DeleteIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleResponse, error)

	// GetIncidentRole request
	GetIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleResponse, error)

	// UpdateIncidentRole request with any body
	UpdateIncidentRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleResponse, error)

	// ListIncidentRoleTasks request
	ListIncidentRoleTasksWithResponse(ctx context.Context, incidentRoleId string, params *ListIncidentRoleTasksParams, reqEditors ...RequestEditorFn) (*ListIncidentRoleTasksResponse, error)

	// CreateIncidentRoleTask request with any body
	CreateIncidentRoleTaskWithBodyWithResponse(ctx context.Context, incidentRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleTaskResponse, error)

	// ListIncidentTypes request
	ListIncidentTypesWithResponse(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*ListIncidentTypesResponse, error)

	// CreateIncidentType request with any body
	CreateIncidentTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTypeResponse, error)

	// DeleteIncidentType request
	DeleteIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTypeResponse, error)

	// GetIncidentType request
	GetIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTypeResponse, error)

	// UpdateIncidentType request with any body
	UpdateIncidentTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTypeResponse, error)

	// ListIncidents request
	ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*ListIncidentsResponse, error)

	// CreateIncident request with any body
	CreateIncidentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error)

	// DeleteIncident request
	DeleteIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentResponse, error)

	// GetIncident request
	GetIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentResponse, error)

	// UpdateIncident request with any body
	UpdateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentResponse, error)

	// CancelIncident request with any body
	CancelIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelIncidentResponse, error)

	// ListIncidentCustomFieldSelections request
	ListIncidentCustomFieldSelectionsWithResponse(ctx context.Context, id string, params *ListIncidentCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListIncidentCustomFieldSelectionsResponse, error)

	// CreateIncidentCustomFieldSelection request with any body
	CreateIncidentCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentCustomFieldSelectionResponse, error)

	// MitigateIncident request with any body
	MitigateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MitigateIncidentResponse, error)

	// ResolveIncident request with any body
	ResolveIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error)

	// ListIncidentActionItems request
	ListIncidentActionItemsWithResponse(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*ListIncidentActionItemsResponse, error)

	// CreateIncidentActionItem request with any body
	CreateIncidentActionItemWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentActionItemResponse, error)

	// ListAlert request
	ListAlertWithResponse(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*ListAlertResponse, error)

	// AttachAlert request with any body
	AttachAlertWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachAlertResponse, error)

	// ListIncidentEvents request
	ListIncidentEventsWithResponse(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*ListIncidentEventsResponse, error)

	// CreateIncidentEvent request with any body
	CreateIncidentEventWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventResponse, error)

	// ListIncidentFeedbacks request
	ListIncidentFeedbacksWithResponse(ctx context.Context, incidentId string, params *ListIncidentFeedbacksParams, reqEditors ...RequestEditorFn) (*ListIncidentFeedbacksResponse, error)

	// CreateIncidentFeedback request with any body
	CreateIncidentFeedbackWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentFeedbackResponse, error)

	// ListIncidentStatusPages request
	ListIncidentStatusPagesWithResponse(ctx context.Context, incidentId string, params *ListIncidentStatusPagesParams, reqEditors ...RequestEditorFn) (*ListIncidentStatusPagesResponse, error)

	// CreateIncidentStatusPage request with any body
	CreateIncidentStatusPageWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentStatusPageResponse, error)

	// DeletePlaybookTask request
	DeletePlaybookTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookTaskResponse, error)

	// GetPlaybookTasks request
	GetPlaybookTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookTasksResponse, error)

	// UpdatePlaybookTask request with any body
	UpdatePlaybookTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookTaskResponse, error)

	// ListPlaybooks request
	ListPlaybooksWithResponse(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*ListPlaybooksResponse, error)

	// CreatePlaybook request with any body
	CreatePlaybookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookResponse, error)

	// DeletePlaybook request
	DeletePlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookResponse, error)

	// GetPlaybook request
	GetPlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookResponse, error)

	// UpdatePlaybook request with any body
	UpdatePlaybookWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookResponse, error)

	// ListPlaybookTasks request
	ListPlaybookTasksWithResponse(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*ListPlaybookTasksResponse, error)

	// CreatePlaybookTask request with any body
	CreatePlaybookTaskWithBodyWithResponse(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookTaskResponse, error)

	// ListPostmortemTemplates request
	ListPostmortemTemplatesWithResponse(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*ListPostmortemTemplatesResponse, error)

	// CreatePostmortemTemplate request with any body
	CreatePostmortemTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostmortemTemplateResponse, error)

	// DeletePostmortemTemplate request
	DeletePostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePostmortemTemplateResponse, error)

	// GetPostmortemTemplate request
	GetPostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPostmortemTemplateResponse, error)

	// UpdatePostmortemTemplate request with any body
	UpdatePostmortemTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostmortemTemplateResponse, error)

	// ListIncidentPostMortems request
	ListIncidentPostMortemsWithResponse(ctx context.Context, params *ListIncidentPostMortemsParams, reqEditors ...RequestEditorFn) (*ListIncidentPostMortemsResponse, error)

	// ListIncidentPostmortem request
	ListIncidentPostmortemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ListIncidentPostmortemResponse, error)

	// UpdateIncidentPostmortem request with any body
	UpdateIncidentPostmortemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPostmortemResponse, error)

	// ListPulses request
	ListPulsesWithResponse(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*ListPulsesResponse, error)

	// CreatePulse request with any body
	CreatePulseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePulseResponse, error)

	// GetPulse request
	GetPulseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPulseResponse, error)

	// UpdatePulse request with any body
	UpdatePulseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePulseResponse, error)

	// ListServices request
	ListServicesWithResponse(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error)

	// CreateService request with any body
	CreateServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error)

	// DeleteService request
	DeleteServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceResponse, error)

	// GetService request
	GetServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceResponse, error)

	// UpdateService request with any body
	UpdateServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error)

	// GetServiceIncidentsChart request
	GetServiceIncidentsChartWithResponse(ctx context.Context, id string, params *GetServiceIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetServiceIncidentsChartResponse, error)

	// GetServiceUptimeChart request
	GetServiceUptimeChartWithResponse(ctx context.Context, id string, params *GetServiceUptimeChartParams, reqEditors ...RequestEditorFn) (*GetServiceUptimeChartResponse, error)

	// ListSeverities request
	ListSeveritiesWithResponse(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*ListSeveritiesResponse, error)

	// CreateSeverity request with any body
	CreateSeverityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSeverityResponse, error)

	// DeleteSeverity request
	DeleteSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSeverityResponse, error)

	// GetSeverity request
	GetSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSeverityResponse, error)

	// UpdateSeverity request with any body
	UpdateSeverityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSeverityResponse, error)

	// DeleteIncidentStatusPage request
	DeleteIncidentStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentStatusPageResponse, error)

	// GetIncidentStatusPages request
	GetIncidentStatusPagesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentStatusPagesResponse, error)

	// UpdateIncidentStatusPage request with any body
	UpdateIncidentStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentStatusPageResponse, error)

	// ListStatusPages request
	ListStatusPagesWithResponse(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*ListStatusPagesResponse, error)

	// CreateStatusPage request with any body
	CreateStatusPageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStatusPageResponse, error)

	// DeleteStatusPage request
	DeleteStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStatusPageResponse, error)

	// GetStatusPage request
	GetStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStatusPageResponse, error)

	// UpdateStatusPage request with any body
	UpdateStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStatusPageResponse, error)

	// ListTeams request
	ListTeamsWithResponse(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*ListTeamsResponse, error)

	// CreateTeam request with any body
	CreateTeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	// DeleteTeam request
	DeleteTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error)

	// GetTeam request
	GetTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error)

	// UpdateTeam request with any body
	UpdateTeamWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)

	// DeleteWorkflowCustomFieldSelection request
	DeleteWorkflowCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowCustomFieldSelectionResponse, error)

	// GetWorkflowCustomFieldSelection request
	GetWorkflowCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowCustomFieldSelectionResponse, error)

	// UpdateWorkflowCustomFieldSelection request with any body
	UpdateWorkflowCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowCustomFieldSelectionResponse, error)

	// DeleteWorkflowTask request
	DeleteWorkflowTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowTaskResponse, error)

	// GetWorkflowTask request
	GetWorkflowTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowTaskResponse, error)

	// UpdateWorkflowTask request with any body
	UpdateWorkflowTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowTaskResponse, error)

	// ListWorkflows request
	ListWorkflowsWithResponse(ctx context.Context, params *ListWorkflowsParams, reqEditors ...RequestEditorFn) (*ListWorkflowsResponse, error)

	// CreateWorkflow request with any body
	CreateWorkflowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowResponse, error)

	// DeleteWorkflow request
	DeleteWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowResponse, error)

	// GetWorkflow request
	GetWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowResponse, error)

	// UpdateWorkflow request with any body
	UpdateWorkflowWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowResponse, error)

	// ListWorkflowCustomFieldSelections request
	ListWorkflowCustomFieldSelectionsWithResponse(ctx context.Context, id string, params *ListWorkflowCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListWorkflowCustomFieldSelectionsResponse, error)

	// CreateWorkflowCustomFieldSelection request with any body
	CreateWorkflowCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowCustomFieldSelectionResponse, error)

	// ListWorkflowTasks request
	ListWorkflowTasksWithResponse(ctx context.Context, workflowId string, params *ListWorkflowTasksParams, reqEditors ...RequestEditorFn) (*ListWorkflowTasksResponse, error)

	// CreateWorkflowTask request with any body
	CreateWorkflowTaskWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowTaskResponse, error)
}

type GetScimUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetScimUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScimUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostScimUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostScimUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostScimUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteScimUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteScimUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteScimUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScimUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetScimUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScimUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchScimUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchScimUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchScimUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentActionItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCausesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListCausesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCausesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomFieldOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCustomFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomFieldOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCustomFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomFieldOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCustomFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCustomFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListCustomFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCustomFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCustomFieldOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListCustomFieldOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCustomFieldOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomFieldOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCustomFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDashboardPanelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDashboardPanelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDashboardPanelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardPanelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDashboardPanelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardPanelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDashboardPanelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateDashboardPanelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDashboardPanelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DuplicateDashboardPanelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DuplicateDashboardPanelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DuplicateDashboardPanelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDashboardsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListDashboardsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDashboardsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDashboardPanelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListDashboardPanelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDashboardPanelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDashboardPanelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateDashboardPanelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDashboardPanelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DuplicateDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DuplicateDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DuplicateDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetDefaultDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SetDefaultDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetDefaultDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentFeedbacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentFeedbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentFeedbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFunctionalitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListFunctionalitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFunctionalitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalityIncidentsChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFunctionalityIncidentsChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalityIncidentsChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalityUptimeChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFunctionalityUptimeChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalityUptimeChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentRoleTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentRoleTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentRoleTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentRoleTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentRoleTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentRoleTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentRoleTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentRoleTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentRoleTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentRoleTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentRoleTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentRoleTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentRoleTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentRoleTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentRoleTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CancelIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentCustomFieldSelectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentCustomFieldSelectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentCustomFieldSelectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MitigateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MitigateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MitigateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResolveIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResolveIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResolveIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentActionItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttachAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AttachAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttachAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentFeedbacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentFeedbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentFeedbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentStatusPagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentStatusPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentStatusPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaybookTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlaybookTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaybookTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlaybooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPlaybooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlaybooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlaybookTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPlaybookTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlaybookTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPostmortemTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPostmortemTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPostmortemTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentPostMortemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentPostMortemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentPostMortemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentPostmortemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentPostmortemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentPostmortemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentPostmortemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentPostmortemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentPostmortemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPulsesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPulsesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPulsesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceIncidentsChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceIncidentsChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceIncidentsChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceUptimeChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceUptimeChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceUptimeChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSeveritiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListSeveritiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSeveritiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentStatusPagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentStatusPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentStatusPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStatusPagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListStatusPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStatusPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWorkflowCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkflowCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateWorkflowCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkflowCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWorkflowTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkflowTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateWorkflowTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkflowTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListWorkflowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowCustomFieldSelectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListWorkflowCustomFieldSelectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowCustomFieldSelectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListWorkflowTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetScimUsersWithResponse request returning *GetScimUsersResponse
func (c *ClientWithResponses) GetScimUsersWithResponse(ctx context.Context, params *GetScimUsersParams, reqEditors ...RequestEditorFn) (*GetScimUsersResponse, error) {
	rsp, err := c.GetScimUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScimUsersResponse(rsp)
}

// PostScimUsersWithResponse request returning *PostScimUsersResponse
func (c *ClientWithResponses) PostScimUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostScimUsersResponse, error) {
	rsp, err := c.PostScimUsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScimUsersResponse(rsp)
}

// DeleteScimUsersIdWithResponse request returning *DeleteScimUsersIdResponse
func (c *ClientWithResponses) DeleteScimUsersIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteScimUsersIdResponse, error) {
	rsp, err := c.DeleteScimUsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteScimUsersIdResponse(rsp)
}

// GetScimUsersIdWithResponse request returning *GetScimUsersIdResponse
func (c *ClientWithResponses) GetScimUsersIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetScimUsersIdResponse, error) {
	rsp, err := c.GetScimUsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScimUsersIdResponse(rsp)
}

// PatchScimUsersIdWithResponse request returning *PatchScimUsersIdResponse
func (c *ClientWithResponses) PatchScimUsersIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PatchScimUsersIdResponse, error) {
	rsp, err := c.PatchScimUsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScimUsersIdResponse(rsp)
}

// DeleteIncidentActionItemWithResponse request returning *DeleteIncidentActionItemResponse
func (c *ClientWithResponses) DeleteIncidentActionItemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentActionItemResponse, error) {
	rsp, err := c.DeleteIncidentActionItem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentActionItemResponse(rsp)
}

// GetIncidentActionItemsWithResponse request returning *GetIncidentActionItemsResponse
func (c *ClientWithResponses) GetIncidentActionItemsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentActionItemsResponse, error) {
	rsp, err := c.GetIncidentActionItems(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentActionItemsResponse(rsp)
}

// UpdateIncidentActionItemWithBodyWithResponse request with arbitrary body returning *UpdateIncidentActionItemResponse
func (c *ClientWithResponses) UpdateIncidentActionItemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentActionItemResponse, error) {
	rsp, err := c.UpdateIncidentActionItemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentActionItemResponse(rsp)
}

// ListAlertsWithResponse request returning *ListAlertsResponse
func (c *ClientWithResponses) ListAlertsWithResponse(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*ListAlertsResponse, error) {
	rsp, err := c.ListAlerts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAlertsResponse(rsp)
}

// CreateAlertWithBodyWithResponse request with arbitrary body returning *CreateAlertResponse
func (c *ClientWithResponses) CreateAlertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlertResponse, error) {
	rsp, err := c.CreateAlertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAlertResponse(rsp)
}

// GetAlertWithResponse request returning *GetAlertResponse
func (c *ClientWithResponses) GetAlertWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertResponse, error) {
	rsp, err := c.GetAlert(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertResponse(rsp)
}

// ListCausesWithResponse request returning *ListCausesResponse
func (c *ClientWithResponses) ListCausesWithResponse(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*ListCausesResponse, error) {
	rsp, err := c.ListCauses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCausesResponse(rsp)
}

// CreateCauseWithBodyWithResponse request with arbitrary body returning *CreateCauseResponse
func (c *ClientWithResponses) CreateCauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCauseResponse, error) {
	rsp, err := c.CreateCauseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCauseResponse(rsp)
}

// DeleteCauseWithResponse request returning *DeleteCauseResponse
func (c *ClientWithResponses) DeleteCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCauseResponse, error) {
	rsp, err := c.DeleteCause(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCauseResponse(rsp)
}

// GetCauseWithResponse request returning *GetCauseResponse
func (c *ClientWithResponses) GetCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCauseResponse, error) {
	rsp, err := c.GetCause(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCauseResponse(rsp)
}

// UpdateCauseWithBodyWithResponse request with arbitrary body returning *UpdateCauseResponse
func (c *ClientWithResponses) UpdateCauseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCauseResponse, error) {
	rsp, err := c.UpdateCauseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCauseResponse(rsp)
}

// DeleteCustomFieldOptionWithResponse request returning *DeleteCustomFieldOptionResponse
func (c *ClientWithResponses) DeleteCustomFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldOptionResponse, error) {
	rsp, err := c.DeleteCustomFieldOption(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomFieldOptionResponse(rsp)
}

// GetCustomFieldOptionWithResponse request returning *GetCustomFieldOptionResponse
func (c *ClientWithResponses) GetCustomFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomFieldOptionResponse, error) {
	rsp, err := c.GetCustomFieldOption(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomFieldOptionResponse(rsp)
}

// UpdateCustomFieldOptionWithBodyWithResponse request with arbitrary body returning *UpdateCustomFieldOptionResponse
func (c *ClientWithResponses) UpdateCustomFieldOptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldOptionResponse, error) {
	rsp, err := c.UpdateCustomFieldOptionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomFieldOptionResponse(rsp)
}

// ListCustomFieldsWithResponse request returning *ListCustomFieldsResponse
func (c *ClientWithResponses) ListCustomFieldsWithResponse(ctx context.Context, params *ListCustomFieldsParams, reqEditors ...RequestEditorFn) (*ListCustomFieldsResponse, error) {
	rsp, err := c.ListCustomFields(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomFieldsResponse(rsp)
}

// CreateCustomFieldWithBodyWithResponse request with arbitrary body returning *CreateCustomFieldResponse
func (c *ClientWithResponses) CreateCustomFieldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldResponse, error) {
	rsp, err := c.CreateCustomFieldWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomFieldResponse(rsp)
}

// ListCustomFieldOptionsWithResponse request returning *ListCustomFieldOptionsResponse
func (c *ClientWithResponses) ListCustomFieldOptionsWithResponse(ctx context.Context, customFieldId string, params *ListCustomFieldOptionsParams, reqEditors ...RequestEditorFn) (*ListCustomFieldOptionsResponse, error) {
	rsp, err := c.ListCustomFieldOptions(ctx, customFieldId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomFieldOptionsResponse(rsp)
}

// CreateCustomFieldOptionWithBodyWithResponse request with arbitrary body returning *CreateCustomFieldOptionResponse
func (c *ClientWithResponses) CreateCustomFieldOptionWithBodyWithResponse(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldOptionResponse, error) {
	rsp, err := c.CreateCustomFieldOptionWithBody(ctx, customFieldId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomFieldOptionResponse(rsp)
}

// DeleteCustomFieldWithResponse request returning *DeleteCustomFieldResponse
func (c *ClientWithResponses) DeleteCustomFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldResponse, error) {
	rsp, err := c.DeleteCustomField(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomFieldResponse(rsp)
}

// GetCustomFieldWithResponse request returning *GetCustomFieldResponse
func (c *ClientWithResponses) GetCustomFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomFieldResponse, error) {
	rsp, err := c.GetCustomField(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomFieldResponse(rsp)
}

// UpdateCustomFieldWithBodyWithResponse request with arbitrary body returning *UpdateCustomFieldResponse
func (c *ClientWithResponses) UpdateCustomFieldWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldResponse, error) {
	rsp, err := c.UpdateCustomFieldWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomFieldResponse(rsp)
}

// DeleteDashboardPanelWithResponse request returning *DeleteDashboardPanelResponse
func (c *ClientWithResponses) DeleteDashboardPanelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDashboardPanelResponse, error) {
	rsp, err := c.DeleteDashboardPanel(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDashboardPanelResponse(rsp)
}

// GetDashboardPanelWithResponse request returning *GetDashboardPanelResponse
func (c *ClientWithResponses) GetDashboardPanelWithResponse(ctx context.Context, id string, params *GetDashboardPanelParams, reqEditors ...RequestEditorFn) (*GetDashboardPanelResponse, error) {
	rsp, err := c.GetDashboardPanel(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardPanelResponse(rsp)
}

// UpdateDashboardPanelWithBodyWithResponse request with arbitrary body returning *UpdateDashboardPanelResponse
func (c *ClientWithResponses) UpdateDashboardPanelWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDashboardPanelResponse, error) {
	rsp, err := c.UpdateDashboardPanelWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDashboardPanelResponse(rsp)
}

// DuplicateDashboardPanelWithResponse request returning *DuplicateDashboardPanelResponse
func (c *ClientWithResponses) DuplicateDashboardPanelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DuplicateDashboardPanelResponse, error) {
	rsp, err := c.DuplicateDashboardPanel(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDuplicateDashboardPanelResponse(rsp)
}

// ListDashboardsWithResponse request returning *ListDashboardsResponse
func (c *ClientWithResponses) ListDashboardsWithResponse(ctx context.Context, params *ListDashboardsParams, reqEditors ...RequestEditorFn) (*ListDashboardsResponse, error) {
	rsp, err := c.ListDashboards(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDashboardsResponse(rsp)
}

// CreateDashboardWithBodyWithResponse request with arbitrary body returning *CreateDashboardResponse
func (c *ClientWithResponses) CreateDashboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDashboardResponse, error) {
	rsp, err := c.CreateDashboardWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDashboardResponse(rsp)
}

// ListDashboardPanelsWithResponse request returning *ListDashboardPanelsResponse
func (c *ClientWithResponses) ListDashboardPanelsWithResponse(ctx context.Context, dashboardId string, params *ListDashboardPanelsParams, reqEditors ...RequestEditorFn) (*ListDashboardPanelsResponse, error) {
	rsp, err := c.ListDashboardPanels(ctx, dashboardId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDashboardPanelsResponse(rsp)
}

// CreateDashboardPanelWithBodyWithResponse request with arbitrary body returning *CreateDashboardPanelResponse
func (c *ClientWithResponses) CreateDashboardPanelWithBodyWithResponse(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDashboardPanelResponse, error) {
	rsp, err := c.CreateDashboardPanelWithBody(ctx, dashboardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDashboardPanelResponse(rsp)
}

// DeleteDashboardWithResponse request returning *DeleteDashboardResponse
func (c *ClientWithResponses) DeleteDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDashboardResponse, error) {
	rsp, err := c.DeleteDashboard(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDashboardResponse(rsp)
}

// GetDashboardWithResponse request returning *GetDashboardResponse
func (c *ClientWithResponses) GetDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetDashboardResponse, error) {
	rsp, err := c.GetDashboard(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardResponse(rsp)
}

// UpdateDashboardWithBodyWithResponse request with arbitrary body returning *UpdateDashboardResponse
func (c *ClientWithResponses) UpdateDashboardWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDashboardResponse, error) {
	rsp, err := c.UpdateDashboardWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDashboardResponse(rsp)
}

// DuplicateDashboardWithResponse request returning *DuplicateDashboardResponse
func (c *ClientWithResponses) DuplicateDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DuplicateDashboardResponse, error) {
	rsp, err := c.DuplicateDashboard(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDuplicateDashboardResponse(rsp)
}

// SetDefaultDashboardWithResponse request returning *SetDefaultDashboardResponse
func (c *ClientWithResponses) SetDefaultDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SetDefaultDashboardResponse, error) {
	rsp, err := c.SetDefaultDashboard(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetDefaultDashboardResponse(rsp)
}

// ListEnvironmentsWithResponse request returning *ListEnvironmentsResponse
func (c *ClientWithResponses) ListEnvironmentsWithResponse(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error) {
	rsp, err := c.ListEnvironments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEnvironmentsResponse(rsp)
}

// CreateEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentResponse
func (c *ClientWithResponses) CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

// DeleteEnvironmentWithResponse request returning *DeleteEnvironmentResponse
func (c *ClientWithResponses) DeleteEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error) {
	rsp, err := c.DeleteEnvironment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// UpdateEnvironmentWithBodyWithResponse request with arbitrary body returning *UpdateEnvironmentResponse
func (c *ClientWithResponses) UpdateEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error) {
	rsp, err := c.UpdateEnvironmentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentResponse(rsp)
}

// DeleteIncidentEventWithResponse request returning *DeleteIncidentEventResponse
func (c *ClientWithResponses) DeleteIncidentEventWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventResponse, error) {
	rsp, err := c.DeleteIncidentEvent(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentEventResponse(rsp)
}

// GetIncidentEventsWithResponse request returning *GetIncidentEventsResponse
func (c *ClientWithResponses) GetIncidentEventsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventsResponse, error) {
	rsp, err := c.GetIncidentEvents(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentEventsResponse(rsp)
}

// UpdateIncidentEventWithBodyWithResponse request with arbitrary body returning *UpdateIncidentEventResponse
func (c *ClientWithResponses) UpdateIncidentEventWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventResponse, error) {
	rsp, err := c.UpdateIncidentEventWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentEventResponse(rsp)
}

// DeleteIncidentFeedbackWithResponse request returning *DeleteIncidentFeedbackResponse
func (c *ClientWithResponses) DeleteIncidentFeedbackWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentFeedbackResponse, error) {
	rsp, err := c.DeleteIncidentFeedback(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentFeedbackResponse(rsp)
}

// GetIncidentFeedbacksWithResponse request returning *GetIncidentFeedbacksResponse
func (c *ClientWithResponses) GetIncidentFeedbacksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentFeedbacksResponse, error) {
	rsp, err := c.GetIncidentFeedbacks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentFeedbacksResponse(rsp)
}

// UpdateIncidentFeedbackWithBodyWithResponse request with arbitrary body returning *UpdateIncidentFeedbackResponse
func (c *ClientWithResponses) UpdateIncidentFeedbackWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentFeedbackResponse, error) {
	rsp, err := c.UpdateIncidentFeedbackWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentFeedbackResponse(rsp)
}

// ListFunctionalitiesWithResponse request returning *ListFunctionalitiesResponse
func (c *ClientWithResponses) ListFunctionalitiesWithResponse(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*ListFunctionalitiesResponse, error) {
	rsp, err := c.ListFunctionalities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFunctionalitiesResponse(rsp)
}

// CreateFunctionalityWithBodyWithResponse request with arbitrary body returning *CreateFunctionalityResponse
func (c *ClientWithResponses) CreateFunctionalityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFunctionalityResponse, error) {
	rsp, err := c.CreateFunctionalityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFunctionalityResponse(rsp)
}

// DeleteFunctionalityWithResponse request returning *DeleteFunctionalityResponse
func (c *ClientWithResponses) DeleteFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFunctionalityResponse, error) {
	rsp, err := c.DeleteFunctionality(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFunctionalityResponse(rsp)
}

// GetFunctionalityWithResponse request returning *GetFunctionalityResponse
func (c *ClientWithResponses) GetFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFunctionalityResponse, error) {
	rsp, err := c.GetFunctionality(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalityResponse(rsp)
}

// UpdateFunctionalityWithBodyWithResponse request with arbitrary body returning *UpdateFunctionalityResponse
func (c *ClientWithResponses) UpdateFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFunctionalityResponse, error) {
	rsp, err := c.UpdateFunctionalityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFunctionalityResponse(rsp)
}

// GetFunctionalityIncidentsChartWithResponse request returning *GetFunctionalityIncidentsChartResponse
func (c *ClientWithResponses) GetFunctionalityIncidentsChartWithResponse(ctx context.Context, id string, params *GetFunctionalityIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetFunctionalityIncidentsChartResponse, error) {
	rsp, err := c.GetFunctionalityIncidentsChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalityIncidentsChartResponse(rsp)
}

// GetFunctionalityUptimeChartWithResponse request returning *GetFunctionalityUptimeChartResponse
func (c *ClientWithResponses) GetFunctionalityUptimeChartWithResponse(ctx context.Context, id string, params *GetFunctionalityUptimeChartParams, reqEditors ...RequestEditorFn) (*GetFunctionalityUptimeChartResponse, error) {
	rsp, err := c.GetFunctionalityUptimeChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalityUptimeChartResponse(rsp)
}

// DeleteIncidentCustomFieldSelectionWithResponse request returning *DeleteIncidentCustomFieldSelectionResponse
func (c *ClientWithResponses) DeleteIncidentCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.DeleteIncidentCustomFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentCustomFieldSelectionResponse(rsp)
}

// GetIncidentCustomFieldSelectionWithResponse request returning *GetIncidentCustomFieldSelectionResponse
func (c *ClientWithResponses) GetIncidentCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.GetIncidentCustomFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentCustomFieldSelectionResponse(rsp)
}

// UpdateIncidentCustomFieldSelectionWithBodyWithResponse request with arbitrary body returning *UpdateIncidentCustomFieldSelectionResponse
func (c *ClientWithResponses) UpdateIncidentCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.UpdateIncidentCustomFieldSelectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentCustomFieldSelectionResponse(rsp)
}

// DeleteIncidentRoleTaskWithResponse request returning *DeleteIncidentRoleTaskResponse
func (c *ClientWithResponses) DeleteIncidentRoleTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleTaskResponse, error) {
	rsp, err := c.DeleteIncidentRoleTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentRoleTaskResponse(rsp)
}

// GetIncidentRoleTasksWithResponse request returning *GetIncidentRoleTasksResponse
func (c *ClientWithResponses) GetIncidentRoleTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleTasksResponse, error) {
	rsp, err := c.GetIncidentRoleTasks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentRoleTasksResponse(rsp)
}

// UpdateIncidentRoleTaskWithBodyWithResponse request with arbitrary body returning *UpdateIncidentRoleTaskResponse
func (c *ClientWithResponses) UpdateIncidentRoleTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleTaskResponse, error) {
	rsp, err := c.UpdateIncidentRoleTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentRoleTaskResponse(rsp)
}

// ListIncidentRolesWithResponse request returning *ListIncidentRolesResponse
func (c *ClientWithResponses) ListIncidentRolesWithResponse(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*ListIncidentRolesResponse, error) {
	rsp, err := c.ListIncidentRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentRolesResponse(rsp)
}

// CreateIncidentRoleWithBodyWithResponse request with arbitrary body returning *CreateIncidentRoleResponse
func (c *ClientWithResponses) CreateIncidentRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleResponse, error) {
	rsp, err := c.CreateIncidentRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentRoleResponse(rsp)
}

// DeleteIncidentRoleWithResponse request returning *DeleteIncidentRoleResponse
func (c *ClientWithResponses) DeleteIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleResponse, error) {
	rsp, err := c.DeleteIncidentRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentRoleResponse(rsp)
}

// GetIncidentRoleWithResponse request returning *GetIncidentRoleResponse
func (c *ClientWithResponses) GetIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleResponse, error) {
	rsp, err := c.GetIncidentRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentRoleResponse(rsp)
}

// UpdateIncidentRoleWithBodyWithResponse request with arbitrary body returning *UpdateIncidentRoleResponse
func (c *ClientWithResponses) UpdateIncidentRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleResponse, error) {
	rsp, err := c.UpdateIncidentRoleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentRoleResponse(rsp)
}

// ListIncidentRoleTasksWithResponse request returning *ListIncidentRoleTasksResponse
func (c *ClientWithResponses) ListIncidentRoleTasksWithResponse(ctx context.Context, incidentRoleId string, params *ListIncidentRoleTasksParams, reqEditors ...RequestEditorFn) (*ListIncidentRoleTasksResponse, error) {
	rsp, err := c.ListIncidentRoleTasks(ctx, incidentRoleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentRoleTasksResponse(rsp)
}

// CreateIncidentRoleTaskWithBodyWithResponse request with arbitrary body returning *CreateIncidentRoleTaskResponse
func (c *ClientWithResponses) CreateIncidentRoleTaskWithBodyWithResponse(ctx context.Context, incidentRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleTaskResponse, error) {
	rsp, err := c.CreateIncidentRoleTaskWithBody(ctx, incidentRoleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentRoleTaskResponse(rsp)
}

// ListIncidentTypesWithResponse request returning *ListIncidentTypesResponse
func (c *ClientWithResponses) ListIncidentTypesWithResponse(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*ListIncidentTypesResponse, error) {
	rsp, err := c.ListIncidentTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentTypesResponse(rsp)
}

// CreateIncidentTypeWithBodyWithResponse request with arbitrary body returning *CreateIncidentTypeResponse
func (c *ClientWithResponses) CreateIncidentTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTypeResponse, error) {
	rsp, err := c.CreateIncidentTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentTypeResponse(rsp)
}

// DeleteIncidentTypeWithResponse request returning *DeleteIncidentTypeResponse
func (c *ClientWithResponses) DeleteIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTypeResponse, error) {
	rsp, err := c.DeleteIncidentType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentTypeResponse(rsp)
}

// GetIncidentTypeWithResponse request returning *GetIncidentTypeResponse
func (c *ClientWithResponses) GetIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTypeResponse, error) {
	rsp, err := c.GetIncidentType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentTypeResponse(rsp)
}

// UpdateIncidentTypeWithBodyWithResponse request with arbitrary body returning *UpdateIncidentTypeResponse
func (c *ClientWithResponses) UpdateIncidentTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTypeResponse, error) {
	rsp, err := c.UpdateIncidentTypeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentTypeResponse(rsp)
}

// ListIncidentsWithResponse request returning *ListIncidentsResponse
func (c *ClientWithResponses) ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*ListIncidentsResponse, error) {
	rsp, err := c.ListIncidents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentsResponse(rsp)
}

// CreateIncidentWithBodyWithResponse request with arbitrary body returning *CreateIncidentResponse
func (c *ClientWithResponses) CreateIncidentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error) {
	rsp, err := c.CreateIncidentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentResponse(rsp)
}

// DeleteIncidentWithResponse request returning *DeleteIncidentResponse
func (c *ClientWithResponses) DeleteIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentResponse, error) {
	rsp, err := c.DeleteIncident(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentResponse(rsp)
}

// GetIncidentWithResponse request returning *GetIncidentResponse
func (c *ClientWithResponses) GetIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentResponse, error) {
	rsp, err := c.GetIncident(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentResponse(rsp)
}

// UpdateIncidentWithBodyWithResponse request with arbitrary body returning *UpdateIncidentResponse
func (c *ClientWithResponses) UpdateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentResponse, error) {
	rsp, err := c.UpdateIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentResponse(rsp)
}

// CancelIncidentWithBodyWithResponse request with arbitrary body returning *CancelIncidentResponse
func (c *ClientWithResponses) CancelIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelIncidentResponse, error) {
	rsp, err := c.CancelIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelIncidentResponse(rsp)
}

// ListIncidentCustomFieldSelectionsWithResponse request returning *ListIncidentCustomFieldSelectionsResponse
func (c *ClientWithResponses) ListIncidentCustomFieldSelectionsWithResponse(ctx context.Context, id string, params *ListIncidentCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListIncidentCustomFieldSelectionsResponse, error) {
	rsp, err := c.ListIncidentCustomFieldSelections(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentCustomFieldSelectionsResponse(rsp)
}

// CreateIncidentCustomFieldSelectionWithBodyWithResponse request with arbitrary body returning *CreateIncidentCustomFieldSelectionResponse
func (c *ClientWithResponses) CreateIncidentCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.CreateIncidentCustomFieldSelectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentCustomFieldSelectionResponse(rsp)
}

// MitigateIncidentWithBodyWithResponse request with arbitrary body returning *MitigateIncidentResponse
func (c *ClientWithResponses) MitigateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MitigateIncidentResponse, error) {
	rsp, err := c.MitigateIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMitigateIncidentResponse(rsp)
}

// ResolveIncidentWithBodyWithResponse request with arbitrary body returning *ResolveIncidentResponse
func (c *ClientWithResponses) ResolveIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error) {
	rsp, err := c.ResolveIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolveIncidentResponse(rsp)
}

// ListIncidentActionItemsWithResponse request returning *ListIncidentActionItemsResponse
func (c *ClientWithResponses) ListIncidentActionItemsWithResponse(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*ListIncidentActionItemsResponse, error) {
	rsp, err := c.ListIncidentActionItems(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentActionItemsResponse(rsp)
}

// CreateIncidentActionItemWithBodyWithResponse request with arbitrary body returning *CreateIncidentActionItemResponse
func (c *ClientWithResponses) CreateIncidentActionItemWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentActionItemResponse, error) {
	rsp, err := c.CreateIncidentActionItemWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentActionItemResponse(rsp)
}

// ListAlertWithResponse request returning *ListAlertResponse
func (c *ClientWithResponses) ListAlertWithResponse(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*ListAlertResponse, error) {
	rsp, err := c.ListAlert(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAlertResponse(rsp)
}

// AttachAlertWithBodyWithResponse request with arbitrary body returning *AttachAlertResponse
func (c *ClientWithResponses) AttachAlertWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachAlertResponse, error) {
	rsp, err := c.AttachAlertWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachAlertResponse(rsp)
}

// ListIncidentEventsWithResponse request returning *ListIncidentEventsResponse
func (c *ClientWithResponses) ListIncidentEventsWithResponse(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*ListIncidentEventsResponse, error) {
	rsp, err := c.ListIncidentEvents(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentEventsResponse(rsp)
}

// CreateIncidentEventWithBodyWithResponse request with arbitrary body returning *CreateIncidentEventResponse
func (c *ClientWithResponses) CreateIncidentEventWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventResponse, error) {
	rsp, err := c.CreateIncidentEventWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentEventResponse(rsp)
}

// ListIncidentFeedbacksWithResponse request returning *ListIncidentFeedbacksResponse
func (c *ClientWithResponses) ListIncidentFeedbacksWithResponse(ctx context.Context, incidentId string, params *ListIncidentFeedbacksParams, reqEditors ...RequestEditorFn) (*ListIncidentFeedbacksResponse, error) {
	rsp, err := c.ListIncidentFeedbacks(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentFeedbacksResponse(rsp)
}

// CreateIncidentFeedbackWithBodyWithResponse request with arbitrary body returning *CreateIncidentFeedbackResponse
func (c *ClientWithResponses) CreateIncidentFeedbackWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentFeedbackResponse, error) {
	rsp, err := c.CreateIncidentFeedbackWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentFeedbackResponse(rsp)
}

// ListIncidentStatusPagesWithResponse request returning *ListIncidentStatusPagesResponse
func (c *ClientWithResponses) ListIncidentStatusPagesWithResponse(ctx context.Context, incidentId string, params *ListIncidentStatusPagesParams, reqEditors ...RequestEditorFn) (*ListIncidentStatusPagesResponse, error) {
	rsp, err := c.ListIncidentStatusPages(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentStatusPagesResponse(rsp)
}

// CreateIncidentStatusPageWithBodyWithResponse request with arbitrary body returning *CreateIncidentStatusPageResponse
func (c *ClientWithResponses) CreateIncidentStatusPageWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentStatusPageResponse, error) {
	rsp, err := c.CreateIncidentStatusPageWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentStatusPageResponse(rsp)
}

// DeletePlaybookTaskWithResponse request returning *DeletePlaybookTaskResponse
func (c *ClientWithResponses) DeletePlaybookTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookTaskResponse, error) {
	rsp, err := c.DeletePlaybookTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaybookTaskResponse(rsp)
}

// GetPlaybookTasksWithResponse request returning *GetPlaybookTasksResponse
func (c *ClientWithResponses) GetPlaybookTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookTasksResponse, error) {
	rsp, err := c.GetPlaybookTasks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaybookTasksResponse(rsp)
}

// UpdatePlaybookTaskWithBodyWithResponse request with arbitrary body returning *UpdatePlaybookTaskResponse
func (c *ClientWithResponses) UpdatePlaybookTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookTaskResponse, error) {
	rsp, err := c.UpdatePlaybookTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookTaskResponse(rsp)
}

// ListPlaybooksWithResponse request returning *ListPlaybooksResponse
func (c *ClientWithResponses) ListPlaybooksWithResponse(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*ListPlaybooksResponse, error) {
	rsp, err := c.ListPlaybooks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlaybooksResponse(rsp)
}

// CreatePlaybookWithBodyWithResponse request with arbitrary body returning *CreatePlaybookResponse
func (c *ClientWithResponses) CreatePlaybookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookResponse, error) {
	rsp, err := c.CreatePlaybookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookResponse(rsp)
}

// DeletePlaybookWithResponse request returning *DeletePlaybookResponse
func (c *ClientWithResponses) DeletePlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookResponse, error) {
	rsp, err := c.DeletePlaybook(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaybookResponse(rsp)
}

// GetPlaybookWithResponse request returning *GetPlaybookResponse
func (c *ClientWithResponses) GetPlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookResponse, error) {
	rsp, err := c.GetPlaybook(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaybookResponse(rsp)
}

// UpdatePlaybookWithBodyWithResponse request with arbitrary body returning *UpdatePlaybookResponse
func (c *ClientWithResponses) UpdatePlaybookWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookResponse, error) {
	rsp, err := c.UpdatePlaybookWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookResponse(rsp)
}

// ListPlaybookTasksWithResponse request returning *ListPlaybookTasksResponse
func (c *ClientWithResponses) ListPlaybookTasksWithResponse(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*ListPlaybookTasksResponse, error) {
	rsp, err := c.ListPlaybookTasks(ctx, playbookId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlaybookTasksResponse(rsp)
}

// CreatePlaybookTaskWithBodyWithResponse request with arbitrary body returning *CreatePlaybookTaskResponse
func (c *ClientWithResponses) CreatePlaybookTaskWithBodyWithResponse(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookTaskResponse, error) {
	rsp, err := c.CreatePlaybookTaskWithBody(ctx, playbookId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookTaskResponse(rsp)
}

// ListPostmortemTemplatesWithResponse request returning *ListPostmortemTemplatesResponse
func (c *ClientWithResponses) ListPostmortemTemplatesWithResponse(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*ListPostmortemTemplatesResponse, error) {
	rsp, err := c.ListPostmortemTemplates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPostmortemTemplatesResponse(rsp)
}

// CreatePostmortemTemplateWithBodyWithResponse request with arbitrary body returning *CreatePostmortemTemplateResponse
func (c *ClientWithResponses) CreatePostmortemTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostmortemTemplateResponse, error) {
	rsp, err := c.CreatePostmortemTemplateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePostmortemTemplateResponse(rsp)
}

// DeletePostmortemTemplateWithResponse request returning *DeletePostmortemTemplateResponse
func (c *ClientWithResponses) DeletePostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePostmortemTemplateResponse, error) {
	rsp, err := c.DeletePostmortemTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePostmortemTemplateResponse(rsp)
}

// GetPostmortemTemplateWithResponse request returning *GetPostmortemTemplateResponse
func (c *ClientWithResponses) GetPostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPostmortemTemplateResponse, error) {
	rsp, err := c.GetPostmortemTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostmortemTemplateResponse(rsp)
}

// UpdatePostmortemTemplateWithBodyWithResponse request with arbitrary body returning *UpdatePostmortemTemplateResponse
func (c *ClientWithResponses) UpdatePostmortemTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostmortemTemplateResponse, error) {
	rsp, err := c.UpdatePostmortemTemplateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePostmortemTemplateResponse(rsp)
}

// ListIncidentPostMortemsWithResponse request returning *ListIncidentPostMortemsResponse
func (c *ClientWithResponses) ListIncidentPostMortemsWithResponse(ctx context.Context, params *ListIncidentPostMortemsParams, reqEditors ...RequestEditorFn) (*ListIncidentPostMortemsResponse, error) {
	rsp, err := c.ListIncidentPostMortems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentPostMortemsResponse(rsp)
}

// ListIncidentPostmortemWithResponse request returning *ListIncidentPostmortemResponse
func (c *ClientWithResponses) ListIncidentPostmortemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ListIncidentPostmortemResponse, error) {
	rsp, err := c.ListIncidentPostmortem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentPostmortemResponse(rsp)
}

// UpdateIncidentPostmortemWithBodyWithResponse request with arbitrary body returning *UpdateIncidentPostmortemResponse
func (c *ClientWithResponses) UpdateIncidentPostmortemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPostmortemResponse, error) {
	rsp, err := c.UpdateIncidentPostmortemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentPostmortemResponse(rsp)
}

// ListPulsesWithResponse request returning *ListPulsesResponse
func (c *ClientWithResponses) ListPulsesWithResponse(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*ListPulsesResponse, error) {
	rsp, err := c.ListPulses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPulsesResponse(rsp)
}

// CreatePulseWithBodyWithResponse request with arbitrary body returning *CreatePulseResponse
func (c *ClientWithResponses) CreatePulseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePulseResponse, error) {
	rsp, err := c.CreatePulseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePulseResponse(rsp)
}

// GetPulseWithResponse request returning *GetPulseResponse
func (c *ClientWithResponses) GetPulseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPulseResponse, error) {
	rsp, err := c.GetPulse(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPulseResponse(rsp)
}

// UpdatePulseWithBodyWithResponse request with arbitrary body returning *UpdatePulseResponse
func (c *ClientWithResponses) UpdatePulseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePulseResponse, error) {
	rsp, err := c.UpdatePulseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePulseResponse(rsp)
}

// ListServicesWithResponse request returning *ListServicesResponse
func (c *ClientWithResponses) ListServicesWithResponse(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error) {
	rsp, err := c.ListServices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServicesResponse(rsp)
}

// CreateServiceWithBodyWithResponse request with arbitrary body returning *CreateServiceResponse
func (c *ClientWithResponses) CreateServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error) {
	rsp, err := c.CreateServiceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceResponse(rsp)
}

// DeleteServiceWithResponse request returning *DeleteServiceResponse
func (c *ClientWithResponses) DeleteServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceResponse, error) {
	rsp, err := c.DeleteService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceResponse(rsp)
}

// GetServiceWithResponse request returning *GetServiceResponse
func (c *ClientWithResponses) GetServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceResponse, error) {
	rsp, err := c.GetService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceResponse(rsp)
}

// UpdateServiceWithBodyWithResponse request with arbitrary body returning *UpdateServiceResponse
func (c *ClientWithResponses) UpdateServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error) {
	rsp, err := c.UpdateServiceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceResponse(rsp)
}

// GetServiceIncidentsChartWithResponse request returning *GetServiceIncidentsChartResponse
func (c *ClientWithResponses) GetServiceIncidentsChartWithResponse(ctx context.Context, id string, params *GetServiceIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetServiceIncidentsChartResponse, error) {
	rsp, err := c.GetServiceIncidentsChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceIncidentsChartResponse(rsp)
}

// GetServiceUptimeChartWithResponse request returning *GetServiceUptimeChartResponse
func (c *ClientWithResponses) GetServiceUptimeChartWithResponse(ctx context.Context, id string, params *GetServiceUptimeChartParams, reqEditors ...RequestEditorFn) (*GetServiceUptimeChartResponse, error) {
	rsp, err := c.GetServiceUptimeChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceUptimeChartResponse(rsp)
}

// ListSeveritiesWithResponse request returning *ListSeveritiesResponse
func (c *ClientWithResponses) ListSeveritiesWithResponse(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*ListSeveritiesResponse, error) {
	rsp, err := c.ListSeverities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSeveritiesResponse(rsp)
}

// CreateSeverityWithBodyWithResponse request with arbitrary body returning *CreateSeverityResponse
func (c *ClientWithResponses) CreateSeverityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSeverityResponse, error) {
	rsp, err := c.CreateSeverityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSeverityResponse(rsp)
}

// DeleteSeverityWithResponse request returning *DeleteSeverityResponse
func (c *ClientWithResponses) DeleteSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSeverityResponse, error) {
	rsp, err := c.DeleteSeverity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSeverityResponse(rsp)
}

// GetSeverityWithResponse request returning *GetSeverityResponse
func (c *ClientWithResponses) GetSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSeverityResponse, error) {
	rsp, err := c.GetSeverity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeverityResponse(rsp)
}

// UpdateSeverityWithBodyWithResponse request with arbitrary body returning *UpdateSeverityResponse
func (c *ClientWithResponses) UpdateSeverityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSeverityResponse, error) {
	rsp, err := c.UpdateSeverityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSeverityResponse(rsp)
}

// DeleteIncidentStatusPageWithResponse request returning *DeleteIncidentStatusPageResponse
func (c *ClientWithResponses) DeleteIncidentStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentStatusPageResponse, error) {
	rsp, err := c.DeleteIncidentStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentStatusPageResponse(rsp)
}

// GetIncidentStatusPagesWithResponse request returning *GetIncidentStatusPagesResponse
func (c *ClientWithResponses) GetIncidentStatusPagesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentStatusPagesResponse, error) {
	rsp, err := c.GetIncidentStatusPages(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentStatusPagesResponse(rsp)
}

// UpdateIncidentStatusPageWithBodyWithResponse request with arbitrary body returning *UpdateIncidentStatusPageResponse
func (c *ClientWithResponses) UpdateIncidentStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentStatusPageResponse, error) {
	rsp, err := c.UpdateIncidentStatusPageWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentStatusPageResponse(rsp)
}

// ListStatusPagesWithResponse request returning *ListStatusPagesResponse
func (c *ClientWithResponses) ListStatusPagesWithResponse(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*ListStatusPagesResponse, error) {
	rsp, err := c.ListStatusPages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListStatusPagesResponse(rsp)
}

// CreateStatusPageWithBodyWithResponse request with arbitrary body returning *CreateStatusPageResponse
func (c *ClientWithResponses) CreateStatusPageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStatusPageResponse, error) {
	rsp, err := c.CreateStatusPageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStatusPageResponse(rsp)
}

// DeleteStatusPageWithResponse request returning *DeleteStatusPageResponse
func (c *ClientWithResponses) DeleteStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStatusPageResponse, error) {
	rsp, err := c.DeleteStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStatusPageResponse(rsp)
}

// GetStatusPageWithResponse request returning *GetStatusPageResponse
func (c *ClientWithResponses) GetStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStatusPageResponse, error) {
	rsp, err := c.GetStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusPageResponse(rsp)
}

// UpdateStatusPageWithBodyWithResponse request with arbitrary body returning *UpdateStatusPageResponse
func (c *ClientWithResponses) UpdateStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStatusPageResponse, error) {
	rsp, err := c.UpdateStatusPageWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStatusPageResponse(rsp)
}

// ListTeamsWithResponse request returning *ListTeamsResponse
func (c *ClientWithResponses) ListTeamsWithResponse(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*ListTeamsResponse, error) {
	rsp, err := c.ListTeams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTeamsResponse(rsp)
}

// CreateTeamWithBodyWithResponse request with arbitrary body returning *CreateTeamResponse
func (c *ClientWithResponses) CreateTeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeamWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

// DeleteTeamWithResponse request returning *DeleteTeamResponse
func (c *ClientWithResponses) DeleteTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error) {
	rsp, err := c.DeleteTeam(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamResponse(rsp)
}

// GetTeamWithResponse request returning *GetTeamResponse
func (c *ClientWithResponses) GetTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error) {
	rsp, err := c.GetTeam(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamResponse(rsp)
}

// UpdateTeamWithBodyWithResponse request with arbitrary body returning *UpdateTeamResponse
func (c *ClientWithResponses) UpdateTeamWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeamWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

// DeleteWorkflowCustomFieldSelectionWithResponse request returning *DeleteWorkflowCustomFieldSelectionResponse
func (c *ClientWithResponses) DeleteWorkflowCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.DeleteWorkflowCustomFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowCustomFieldSelectionResponse(rsp)
}

// GetWorkflowCustomFieldSelectionWithResponse request returning *GetWorkflowCustomFieldSelectionResponse
func (c *ClientWithResponses) GetWorkflowCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.GetWorkflowCustomFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowCustomFieldSelectionResponse(rsp)
}

// UpdateWorkflowCustomFieldSelectionWithBodyWithResponse request with arbitrary body returning *UpdateWorkflowCustomFieldSelectionResponse
func (c *ClientWithResponses) UpdateWorkflowCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.UpdateWorkflowCustomFieldSelectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowCustomFieldSelectionResponse(rsp)
}

// DeleteWorkflowTaskWithResponse request returning *DeleteWorkflowTaskResponse
func (c *ClientWithResponses) DeleteWorkflowTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowTaskResponse, error) {
	rsp, err := c.DeleteWorkflowTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowTaskResponse(rsp)
}

// GetWorkflowTaskWithResponse request returning *GetWorkflowTaskResponse
func (c *ClientWithResponses) GetWorkflowTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowTaskResponse, error) {
	rsp, err := c.GetWorkflowTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowTaskResponse(rsp)
}

// UpdateWorkflowTaskWithBodyWithResponse request with arbitrary body returning *UpdateWorkflowTaskResponse
func (c *ClientWithResponses) UpdateWorkflowTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowTaskResponse, error) {
	rsp, err := c.UpdateWorkflowTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowTaskResponse(rsp)
}

// ListWorkflowsWithResponse request returning *ListWorkflowsResponse
func (c *ClientWithResponses) ListWorkflowsWithResponse(ctx context.Context, params *ListWorkflowsParams, reqEditors ...RequestEditorFn) (*ListWorkflowsResponse, error) {
	rsp, err := c.ListWorkflows(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowsResponse(rsp)
}

// CreateWorkflowWithBodyWithResponse request with arbitrary body returning *CreateWorkflowResponse
func (c *ClientWithResponses) CreateWorkflowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowResponse, error) {
	rsp, err := c.CreateWorkflowWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowResponse(rsp)
}

// DeleteWorkflowWithResponse request returning *DeleteWorkflowResponse
func (c *ClientWithResponses) DeleteWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowResponse, error) {
	rsp, err := c.DeleteWorkflow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowResponse(rsp)
}

// GetWorkflowWithResponse request returning *GetWorkflowResponse
func (c *ClientWithResponses) GetWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowResponse, error) {
	rsp, err := c.GetWorkflow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowResponse(rsp)
}

// UpdateWorkflowWithBodyWithResponse request with arbitrary body returning *UpdateWorkflowResponse
func (c *ClientWithResponses) UpdateWorkflowWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowResponse, error) {
	rsp, err := c.UpdateWorkflowWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowResponse(rsp)
}

// ListWorkflowCustomFieldSelectionsWithResponse request returning *ListWorkflowCustomFieldSelectionsResponse
func (c *ClientWithResponses) ListWorkflowCustomFieldSelectionsWithResponse(ctx context.Context, id string, params *ListWorkflowCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListWorkflowCustomFieldSelectionsResponse, error) {
	rsp, err := c.ListWorkflowCustomFieldSelections(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowCustomFieldSelectionsResponse(rsp)
}

// CreateWorkflowCustomFieldSelectionWithBodyWithResponse request with arbitrary body returning *CreateWorkflowCustomFieldSelectionResponse
func (c *ClientWithResponses) CreateWorkflowCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.CreateWorkflowCustomFieldSelectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowCustomFieldSelectionResponse(rsp)
}

// ListWorkflowTasksWithResponse request returning *ListWorkflowTasksResponse
func (c *ClientWithResponses) ListWorkflowTasksWithResponse(ctx context.Context, workflowId string, params *ListWorkflowTasksParams, reqEditors ...RequestEditorFn) (*ListWorkflowTasksResponse, error) {
	rsp, err := c.ListWorkflowTasks(ctx, workflowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowTasksResponse(rsp)
}

// CreateWorkflowTaskWithBodyWithResponse request with arbitrary body returning *CreateWorkflowTaskResponse
func (c *ClientWithResponses) CreateWorkflowTaskWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowTaskResponse, error) {
	rsp, err := c.CreateWorkflowTaskWithBody(ctx, workflowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowTaskResponse(rsp)
}

// ParseGetScimUsersResponse parses an HTTP response from a GetScimUsersWithResponse call
func ParseGetScimUsersResponse(rsp *http.Response) (*GetScimUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScimUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostScimUsersResponse parses an HTTP response from a PostScimUsersWithResponse call
func ParsePostScimUsersResponse(rsp *http.Response) (*PostScimUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostScimUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteScimUsersIdResponse parses an HTTP response from a DeleteScimUsersIdWithResponse call
func ParseDeleteScimUsersIdResponse(rsp *http.Response) (*DeleteScimUsersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteScimUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetScimUsersIdResponse parses an HTTP response from a GetScimUsersIdWithResponse call
func ParseGetScimUsersIdResponse(rsp *http.Response) (*GetScimUsersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScimUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchScimUsersIdResponse parses an HTTP response from a PatchScimUsersIdWithResponse call
func ParsePatchScimUsersIdResponse(rsp *http.Response) (*PatchScimUsersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchScimUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentActionItemResponse parses an HTTP response from a DeleteIncidentActionItemWithResponse call
func ParseDeleteIncidentActionItemResponse(rsp *http.Response) (*DeleteIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentActionItemsResponse parses an HTTP response from a GetIncidentActionItemsWithResponse call
func ParseGetIncidentActionItemsResponse(rsp *http.Response) (*GetIncidentActionItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentActionItemResponse parses an HTTP response from a UpdateIncidentActionItemWithResponse call
func ParseUpdateIncidentActionItemResponse(rsp *http.Response) (*UpdateIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListAlertsResponse parses an HTTP response from a ListAlertsWithResponse call
func ParseListAlertsResponse(rsp *http.Response) (*ListAlertsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateAlertResponse parses an HTTP response from a CreateAlertWithResponse call
func ParseCreateAlertResponse(rsp *http.Response) (*CreateAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAlertResponse parses an HTTP response from a GetAlertWithResponse call
func ParseGetAlertResponse(rsp *http.Response) (*GetAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListCausesResponse parses an HTTP response from a ListCausesWithResponse call
func ParseListCausesResponse(rsp *http.Response) (*ListCausesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCausesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateCauseResponse parses an HTTP response from a CreateCauseWithResponse call
func ParseCreateCauseResponse(rsp *http.Response) (*CreateCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCauseResponse parses an HTTP response from a DeleteCauseWithResponse call
func ParseDeleteCauseResponse(rsp *http.Response) (*DeleteCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCauseResponse parses an HTTP response from a GetCauseWithResponse call
func ParseGetCauseResponse(rsp *http.Response) (*GetCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateCauseResponse parses an HTTP response from a UpdateCauseWithResponse call
func ParseUpdateCauseResponse(rsp *http.Response) (*UpdateCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCustomFieldOptionResponse parses an HTTP response from a DeleteCustomFieldOptionWithResponse call
func ParseDeleteCustomFieldOptionResponse(rsp *http.Response) (*DeleteCustomFieldOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCustomFieldOptionResponse parses an HTTP response from a GetCustomFieldOptionWithResponse call
func ParseGetCustomFieldOptionResponse(rsp *http.Response) (*GetCustomFieldOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateCustomFieldOptionResponse parses an HTTP response from a UpdateCustomFieldOptionWithResponse call
func ParseUpdateCustomFieldOptionResponse(rsp *http.Response) (*UpdateCustomFieldOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListCustomFieldsResponse parses an HTTP response from a ListCustomFieldsWithResponse call
func ParseListCustomFieldsResponse(rsp *http.Response) (*ListCustomFieldsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCustomFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateCustomFieldResponse parses an HTTP response from a CreateCustomFieldWithResponse call
func ParseCreateCustomFieldResponse(rsp *http.Response) (*CreateCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListCustomFieldOptionsResponse parses an HTTP response from a ListCustomFieldOptionsWithResponse call
func ParseListCustomFieldOptionsResponse(rsp *http.Response) (*ListCustomFieldOptionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCustomFieldOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateCustomFieldOptionResponse parses an HTTP response from a CreateCustomFieldOptionWithResponse call
func ParseCreateCustomFieldOptionResponse(rsp *http.Response) (*CreateCustomFieldOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCustomFieldResponse parses an HTTP response from a DeleteCustomFieldWithResponse call
func ParseDeleteCustomFieldResponse(rsp *http.Response) (*DeleteCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCustomFieldResponse parses an HTTP response from a GetCustomFieldWithResponse call
func ParseGetCustomFieldResponse(rsp *http.Response) (*GetCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateCustomFieldResponse parses an HTTP response from a UpdateCustomFieldWithResponse call
func ParseUpdateCustomFieldResponse(rsp *http.Response) (*UpdateCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteDashboardPanelResponse parses an HTTP response from a DeleteDashboardPanelWithResponse call
func ParseDeleteDashboardPanelResponse(rsp *http.Response) (*DeleteDashboardPanelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDashboardPanelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDashboardPanelResponse parses an HTTP response from a GetDashboardPanelWithResponse call
func ParseGetDashboardPanelResponse(rsp *http.Response) (*GetDashboardPanelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardPanelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateDashboardPanelResponse parses an HTTP response from a UpdateDashboardPanelWithResponse call
func ParseUpdateDashboardPanelResponse(rsp *http.Response) (*UpdateDashboardPanelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDashboardPanelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDuplicateDashboardPanelResponse parses an HTTP response from a DuplicateDashboardPanelWithResponse call
func ParseDuplicateDashboardPanelResponse(rsp *http.Response) (*DuplicateDashboardPanelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DuplicateDashboardPanelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListDashboardsResponse parses an HTTP response from a ListDashboardsWithResponse call
func ParseListDashboardsResponse(rsp *http.Response) (*ListDashboardsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDashboardsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateDashboardResponse parses an HTTP response from a CreateDashboardWithResponse call
func ParseCreateDashboardResponse(rsp *http.Response) (*CreateDashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListDashboardPanelsResponse parses an HTTP response from a ListDashboardPanelsWithResponse call
func ParseListDashboardPanelsResponse(rsp *http.Response) (*ListDashboardPanelsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDashboardPanelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateDashboardPanelResponse parses an HTTP response from a CreateDashboardPanelWithResponse call
func ParseCreateDashboardPanelResponse(rsp *http.Response) (*CreateDashboardPanelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDashboardPanelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteDashboardResponse parses an HTTP response from a DeleteDashboardWithResponse call
func ParseDeleteDashboardResponse(rsp *http.Response) (*DeleteDashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDashboardResponse parses an HTTP response from a GetDashboardWithResponse call
func ParseGetDashboardResponse(rsp *http.Response) (*GetDashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateDashboardResponse parses an HTTP response from a UpdateDashboardWithResponse call
func ParseUpdateDashboardResponse(rsp *http.Response) (*UpdateDashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDuplicateDashboardResponse parses an HTTP response from a DuplicateDashboardWithResponse call
func ParseDuplicateDashboardResponse(rsp *http.Response) (*DuplicateDashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DuplicateDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSetDefaultDashboardResponse parses an HTTP response from a SetDefaultDashboardWithResponse call
func ParseSetDefaultDashboardResponse(rsp *http.Response) (*SetDefaultDashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetDefaultDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListEnvironmentsResponse parses an HTTP response from a ListEnvironmentsWithResponse call
func ParseListEnvironmentsResponse(rsp *http.Response) (*ListEnvironmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateEnvironmentResponse parses an HTTP response from a CreateEnvironmentWithResponse call
func ParseCreateEnvironmentResponse(rsp *http.Response) (*CreateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteEnvironmentResponse parses an HTTP response from a DeleteEnvironmentWithResponse call
func ParseDeleteEnvironmentResponse(rsp *http.Response) (*DeleteEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateEnvironmentResponse parses an HTTP response from a UpdateEnvironmentWithResponse call
func ParseUpdateEnvironmentResponse(rsp *http.Response) (*UpdateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentEventResponse parses an HTTP response from a DeleteIncidentEventWithResponse call
func ParseDeleteIncidentEventResponse(rsp *http.Response) (*DeleteIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentEventsResponse parses an HTTP response from a GetIncidentEventsWithResponse call
func ParseGetIncidentEventsResponse(rsp *http.Response) (*GetIncidentEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentEventResponse parses an HTTP response from a UpdateIncidentEventWithResponse call
func ParseUpdateIncidentEventResponse(rsp *http.Response) (*UpdateIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentFeedbackResponse parses an HTTP response from a DeleteIncidentFeedbackWithResponse call
func ParseDeleteIncidentFeedbackResponse(rsp *http.Response) (*DeleteIncidentFeedbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentFeedbacksResponse parses an HTTP response from a GetIncidentFeedbacksWithResponse call
func ParseGetIncidentFeedbacksResponse(rsp *http.Response) (*GetIncidentFeedbacksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentFeedbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentFeedbackResponse parses an HTTP response from a UpdateIncidentFeedbackWithResponse call
func ParseUpdateIncidentFeedbackResponse(rsp *http.Response) (*UpdateIncidentFeedbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListFunctionalitiesResponse parses an HTTP response from a ListFunctionalitiesWithResponse call
func ParseListFunctionalitiesResponse(rsp *http.Response) (*ListFunctionalitiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFunctionalitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateFunctionalityResponse parses an HTTP response from a CreateFunctionalityWithResponse call
func ParseCreateFunctionalityResponse(rsp *http.Response) (*CreateFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteFunctionalityResponse parses an HTTP response from a DeleteFunctionalityWithResponse call
func ParseDeleteFunctionalityResponse(rsp *http.Response) (*DeleteFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFunctionalityResponse parses an HTTP response from a GetFunctionalityWithResponse call
func ParseGetFunctionalityResponse(rsp *http.Response) (*GetFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateFunctionalityResponse parses an HTTP response from a UpdateFunctionalityWithResponse call
func ParseUpdateFunctionalityResponse(rsp *http.Response) (*UpdateFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFunctionalityIncidentsChartResponse parses an HTTP response from a GetFunctionalityIncidentsChartWithResponse call
func ParseGetFunctionalityIncidentsChartResponse(rsp *http.Response) (*GetFunctionalityIncidentsChartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalityIncidentsChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFunctionalityUptimeChartResponse parses an HTTP response from a GetFunctionalityUptimeChartWithResponse call
func ParseGetFunctionalityUptimeChartResponse(rsp *http.Response) (*GetFunctionalityUptimeChartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalityUptimeChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentCustomFieldSelectionResponse parses an HTTP response from a DeleteIncidentCustomFieldSelectionWithResponse call
func ParseDeleteIncidentCustomFieldSelectionResponse(rsp *http.Response) (*DeleteIncidentCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentCustomFieldSelectionResponse parses an HTTP response from a GetIncidentCustomFieldSelectionWithResponse call
func ParseGetIncidentCustomFieldSelectionResponse(rsp *http.Response) (*GetIncidentCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentCustomFieldSelectionResponse parses an HTTP response from a UpdateIncidentCustomFieldSelectionWithResponse call
func ParseUpdateIncidentCustomFieldSelectionResponse(rsp *http.Response) (*UpdateIncidentCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentRoleTaskResponse parses an HTTP response from a DeleteIncidentRoleTaskWithResponse call
func ParseDeleteIncidentRoleTaskResponse(rsp *http.Response) (*DeleteIncidentRoleTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentRoleTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentRoleTasksResponse parses an HTTP response from a GetIncidentRoleTasksWithResponse call
func ParseGetIncidentRoleTasksResponse(rsp *http.Response) (*GetIncidentRoleTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentRoleTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentRoleTaskResponse parses an HTTP response from a UpdateIncidentRoleTaskWithResponse call
func ParseUpdateIncidentRoleTaskResponse(rsp *http.Response) (*UpdateIncidentRoleTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentRoleTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentRolesResponse parses an HTTP response from a ListIncidentRolesWithResponse call
func ParseListIncidentRolesResponse(rsp *http.Response) (*ListIncidentRolesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentRoleResponse parses an HTTP response from a CreateIncidentRoleWithResponse call
func ParseCreateIncidentRoleResponse(rsp *http.Response) (*CreateIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentRoleResponse parses an HTTP response from a DeleteIncidentRoleWithResponse call
func ParseDeleteIncidentRoleResponse(rsp *http.Response) (*DeleteIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentRoleResponse parses an HTTP response from a GetIncidentRoleWithResponse call
func ParseGetIncidentRoleResponse(rsp *http.Response) (*GetIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentRoleResponse parses an HTTP response from a UpdateIncidentRoleWithResponse call
func ParseUpdateIncidentRoleResponse(rsp *http.Response) (*UpdateIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentRoleTasksResponse parses an HTTP response from a ListIncidentRoleTasksWithResponse call
func ParseListIncidentRoleTasksResponse(rsp *http.Response) (*ListIncidentRoleTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentRoleTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentRoleTaskResponse parses an HTTP response from a CreateIncidentRoleTaskWithResponse call
func ParseCreateIncidentRoleTaskResponse(rsp *http.Response) (*CreateIncidentRoleTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentRoleTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentTypesResponse parses an HTTP response from a ListIncidentTypesWithResponse call
func ParseListIncidentTypesResponse(rsp *http.Response) (*ListIncidentTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentTypeResponse parses an HTTP response from a CreateIncidentTypeWithResponse call
func ParseCreateIncidentTypeResponse(rsp *http.Response) (*CreateIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentTypeResponse parses an HTTP response from a DeleteIncidentTypeWithResponse call
func ParseDeleteIncidentTypeResponse(rsp *http.Response) (*DeleteIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentTypeResponse parses an HTTP response from a GetIncidentTypeWithResponse call
func ParseGetIncidentTypeResponse(rsp *http.Response) (*GetIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentTypeResponse parses an HTTP response from a UpdateIncidentTypeWithResponse call
func ParseUpdateIncidentTypeResponse(rsp *http.Response) (*UpdateIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentsResponse parses an HTTP response from a ListIncidentsWithResponse call
func ParseListIncidentsResponse(rsp *http.Response) (*ListIncidentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentResponse parses an HTTP response from a CreateIncidentWithResponse call
func ParseCreateIncidentResponse(rsp *http.Response) (*CreateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentResponse parses an HTTP response from a DeleteIncidentWithResponse call
func ParseDeleteIncidentResponse(rsp *http.Response) (*DeleteIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentResponse parses an HTTP response from a GetIncidentWithResponse call
func ParseGetIncidentResponse(rsp *http.Response) (*GetIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentResponse parses an HTTP response from a UpdateIncidentWithResponse call
func ParseUpdateIncidentResponse(rsp *http.Response) (*UpdateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCancelIncidentResponse parses an HTTP response from a CancelIncidentWithResponse call
func ParseCancelIncidentResponse(rsp *http.Response) (*CancelIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentCustomFieldSelectionsResponse parses an HTTP response from a ListIncidentCustomFieldSelectionsWithResponse call
func ParseListIncidentCustomFieldSelectionsResponse(rsp *http.Response) (*ListIncidentCustomFieldSelectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentCustomFieldSelectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentCustomFieldSelectionResponse parses an HTTP response from a CreateIncidentCustomFieldSelectionWithResponse call
func ParseCreateIncidentCustomFieldSelectionResponse(rsp *http.Response) (*CreateIncidentCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMitigateIncidentResponse parses an HTTP response from a MitigateIncidentWithResponse call
func ParseMitigateIncidentResponse(rsp *http.Response) (*MitigateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MitigateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResolveIncidentResponse parses an HTTP response from a ResolveIncidentWithResponse call
func ParseResolveIncidentResponse(rsp *http.Response) (*ResolveIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResolveIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentActionItemsResponse parses an HTTP response from a ListIncidentActionItemsWithResponse call
func ParseListIncidentActionItemsResponse(rsp *http.Response) (*ListIncidentActionItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentActionItemResponse parses an HTTP response from a CreateIncidentActionItemWithResponse call
func ParseCreateIncidentActionItemResponse(rsp *http.Response) (*CreateIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListAlertResponse parses an HTTP response from a ListAlertWithResponse call
func ParseListAlertResponse(rsp *http.Response) (*ListAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAttachAlertResponse parses an HTTP response from a AttachAlertWithResponse call
func ParseAttachAlertResponse(rsp *http.Response) (*AttachAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AttachAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentEventsResponse parses an HTTP response from a ListIncidentEventsWithResponse call
func ParseListIncidentEventsResponse(rsp *http.Response) (*ListIncidentEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentEventResponse parses an HTTP response from a CreateIncidentEventWithResponse call
func ParseCreateIncidentEventResponse(rsp *http.Response) (*CreateIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentFeedbacksResponse parses an HTTP response from a ListIncidentFeedbacksWithResponse call
func ParseListIncidentFeedbacksResponse(rsp *http.Response) (*ListIncidentFeedbacksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentFeedbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentFeedbackResponse parses an HTTP response from a CreateIncidentFeedbackWithResponse call
func ParseCreateIncidentFeedbackResponse(rsp *http.Response) (*CreateIncidentFeedbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentStatusPagesResponse parses an HTTP response from a ListIncidentStatusPagesWithResponse call
func ParseListIncidentStatusPagesResponse(rsp *http.Response) (*ListIncidentStatusPagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentStatusPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentStatusPageResponse parses an HTTP response from a CreateIncidentStatusPageWithResponse call
func ParseCreateIncidentStatusPageResponse(rsp *http.Response) (*CreateIncidentStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePlaybookTaskResponse parses an HTTP response from a DeletePlaybookTaskWithResponse call
func ParseDeletePlaybookTaskResponse(rsp *http.Response) (*DeletePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlaybookTasksResponse parses an HTTP response from a GetPlaybookTasksWithResponse call
func ParseGetPlaybookTasksResponse(rsp *http.Response) (*GetPlaybookTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaybookTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePlaybookTaskResponse parses an HTTP response from a UpdatePlaybookTaskWithResponse call
func ParseUpdatePlaybookTaskResponse(rsp *http.Response) (*UpdatePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPlaybooksResponse parses an HTTP response from a ListPlaybooksWithResponse call
func ParseListPlaybooksResponse(rsp *http.Response) (*ListPlaybooksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPlaybooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreatePlaybookResponse parses an HTTP response from a CreatePlaybookWithResponse call
func ParseCreatePlaybookResponse(rsp *http.Response) (*CreatePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePlaybookResponse parses an HTTP response from a DeletePlaybookWithResponse call
func ParseDeletePlaybookResponse(rsp *http.Response) (*DeletePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlaybookResponse parses an HTTP response from a GetPlaybookWithResponse call
func ParseGetPlaybookResponse(rsp *http.Response) (*GetPlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePlaybookResponse parses an HTTP response from a UpdatePlaybookWithResponse call
func ParseUpdatePlaybookResponse(rsp *http.Response) (*UpdatePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPlaybookTasksResponse parses an HTTP response from a ListPlaybookTasksWithResponse call
func ParseListPlaybookTasksResponse(rsp *http.Response) (*ListPlaybookTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPlaybookTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreatePlaybookTaskResponse parses an HTTP response from a CreatePlaybookTaskWithResponse call
func ParseCreatePlaybookTaskResponse(rsp *http.Response) (*CreatePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPostmortemTemplatesResponse parses an HTTP response from a ListPostmortemTemplatesWithResponse call
func ParseListPostmortemTemplatesResponse(rsp *http.Response) (*ListPostmortemTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPostmortemTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreatePostmortemTemplateResponse parses an HTTP response from a CreatePostmortemTemplateWithResponse call
func ParseCreatePostmortemTemplateResponse(rsp *http.Response) (*CreatePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePostmortemTemplateResponse parses an HTTP response from a DeletePostmortemTemplateWithResponse call
func ParseDeletePostmortemTemplateResponse(rsp *http.Response) (*DeletePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPostmortemTemplateResponse parses an HTTP response from a GetPostmortemTemplateWithResponse call
func ParseGetPostmortemTemplateResponse(rsp *http.Response) (*GetPostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePostmortemTemplateResponse parses an HTTP response from a UpdatePostmortemTemplateWithResponse call
func ParseUpdatePostmortemTemplateResponse(rsp *http.Response) (*UpdatePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentPostMortemsResponse parses an HTTP response from a ListIncidentPostMortemsWithResponse call
func ParseListIncidentPostMortemsResponse(rsp *http.Response) (*ListIncidentPostMortemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentPostMortemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentPostmortemResponse parses an HTTP response from a ListIncidentPostmortemWithResponse call
func ParseListIncidentPostmortemResponse(rsp *http.Response) (*ListIncidentPostmortemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentPostmortemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentPostmortemResponse parses an HTTP response from a UpdateIncidentPostmortemWithResponse call
func ParseUpdateIncidentPostmortemResponse(rsp *http.Response) (*UpdateIncidentPostmortemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentPostmortemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPulsesResponse parses an HTTP response from a ListPulsesWithResponse call
func ParseListPulsesResponse(rsp *http.Response) (*ListPulsesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPulsesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreatePulseResponse parses an HTTP response from a CreatePulseWithResponse call
func ParseCreatePulseResponse(rsp *http.Response) (*CreatePulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPulseResponse parses an HTTP response from a GetPulseWithResponse call
func ParseGetPulseResponse(rsp *http.Response) (*GetPulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePulseResponse parses an HTTP response from a UpdatePulseWithResponse call
func ParseUpdatePulseResponse(rsp *http.Response) (*UpdatePulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListServicesResponse parses an HTTP response from a ListServicesWithResponse call
func ParseListServicesResponse(rsp *http.Response) (*ListServicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateServiceResponse parses an HTTP response from a CreateServiceWithResponse call
func ParseCreateServiceResponse(rsp *http.Response) (*CreateServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteServiceResponse parses an HTTP response from a DeleteServiceWithResponse call
func ParseDeleteServiceResponse(rsp *http.Response) (*DeleteServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceResponse parses an HTTP response from a GetServiceWithResponse call
func ParseGetServiceResponse(rsp *http.Response) (*GetServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateServiceResponse parses an HTTP response from a UpdateServiceWithResponse call
func ParseUpdateServiceResponse(rsp *http.Response) (*UpdateServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceIncidentsChartResponse parses an HTTP response from a GetServiceIncidentsChartWithResponse call
func ParseGetServiceIncidentsChartResponse(rsp *http.Response) (*GetServiceIncidentsChartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceIncidentsChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceUptimeChartResponse parses an HTTP response from a GetServiceUptimeChartWithResponse call
func ParseGetServiceUptimeChartResponse(rsp *http.Response) (*GetServiceUptimeChartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceUptimeChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListSeveritiesResponse parses an HTTP response from a ListSeveritiesWithResponse call
func ParseListSeveritiesResponse(rsp *http.Response) (*ListSeveritiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSeveritiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateSeverityResponse parses an HTTP response from a CreateSeverityWithResponse call
func ParseCreateSeverityResponse(rsp *http.Response) (*CreateSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSeverityResponse parses an HTTP response from a DeleteSeverityWithResponse call
func ParseDeleteSeverityResponse(rsp *http.Response) (*DeleteSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSeverityResponse parses an HTTP response from a GetSeverityWithResponse call
func ParseGetSeverityResponse(rsp *http.Response) (*GetSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateSeverityResponse parses an HTTP response from a UpdateSeverityWithResponse call
func ParseUpdateSeverityResponse(rsp *http.Response) (*UpdateSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentStatusPageResponse parses an HTTP response from a DeleteIncidentStatusPageWithResponse call
func ParseDeleteIncidentStatusPageResponse(rsp *http.Response) (*DeleteIncidentStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentStatusPagesResponse parses an HTTP response from a GetIncidentStatusPagesWithResponse call
func ParseGetIncidentStatusPagesResponse(rsp *http.Response) (*GetIncidentStatusPagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentStatusPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentStatusPageResponse parses an HTTP response from a UpdateIncidentStatusPageWithResponse call
func ParseUpdateIncidentStatusPageResponse(rsp *http.Response) (*UpdateIncidentStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListStatusPagesResponse parses an HTTP response from a ListStatusPagesWithResponse call
func ParseListStatusPagesResponse(rsp *http.Response) (*ListStatusPagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListStatusPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateStatusPageResponse parses an HTTP response from a CreateStatusPageWithResponse call
func ParseCreateStatusPageResponse(rsp *http.Response) (*CreateStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteStatusPageResponse parses an HTTP response from a DeleteStatusPageWithResponse call
func ParseDeleteStatusPageResponse(rsp *http.Response) (*DeleteStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStatusPageResponse parses an HTTP response from a GetStatusPageWithResponse call
func ParseGetStatusPageResponse(rsp *http.Response) (*GetStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateStatusPageResponse parses an HTTP response from a UpdateStatusPageWithResponse call
func ParseUpdateStatusPageResponse(rsp *http.Response) (*UpdateStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListTeamsResponse parses an HTTP response from a ListTeamsWithResponse call
func ParseListTeamsResponse(rsp *http.Response) (*ListTeamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateTeamResponse parses an HTTP response from a CreateTeamWithResponse call
func ParseCreateTeamResponse(rsp *http.Response) (*CreateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteTeamResponse parses an HTTP response from a DeleteTeamWithResponse call
func ParseDeleteTeamResponse(rsp *http.Response) (*DeleteTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTeamResponse parses an HTTP response from a GetTeamWithResponse call
func ParseGetTeamResponse(rsp *http.Response) (*GetTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateTeamResponse parses an HTTP response from a UpdateTeamWithResponse call
func ParseUpdateTeamResponse(rsp *http.Response) (*UpdateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteWorkflowCustomFieldSelectionResponse parses an HTTP response from a DeleteWorkflowCustomFieldSelectionWithResponse call
func ParseDeleteWorkflowCustomFieldSelectionResponse(rsp *http.Response) (*DeleteWorkflowCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWorkflowCustomFieldSelectionResponse parses an HTTP response from a GetWorkflowCustomFieldSelectionWithResponse call
func ParseGetWorkflowCustomFieldSelectionResponse(rsp *http.Response) (*GetWorkflowCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateWorkflowCustomFieldSelectionResponse parses an HTTP response from a UpdateWorkflowCustomFieldSelectionWithResponse call
func ParseUpdateWorkflowCustomFieldSelectionResponse(rsp *http.Response) (*UpdateWorkflowCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkflowCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteWorkflowTaskResponse parses an HTTP response from a DeleteWorkflowTaskWithResponse call
func ParseDeleteWorkflowTaskResponse(rsp *http.Response) (*DeleteWorkflowTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWorkflowTaskResponse parses an HTTP response from a GetWorkflowTaskWithResponse call
func ParseGetWorkflowTaskResponse(rsp *http.Response) (*GetWorkflowTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateWorkflowTaskResponse parses an HTTP response from a UpdateWorkflowTaskWithResponse call
func ParseUpdateWorkflowTaskResponse(rsp *http.Response) (*UpdateWorkflowTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkflowTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListWorkflowsResponse parses an HTTP response from a ListWorkflowsWithResponse call
func ParseListWorkflowsResponse(rsp *http.Response) (*ListWorkflowsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateWorkflowResponse parses an HTTP response from a CreateWorkflowWithResponse call
func ParseCreateWorkflowResponse(rsp *http.Response) (*CreateWorkflowResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteWorkflowResponse parses an HTTP response from a DeleteWorkflowWithResponse call
func ParseDeleteWorkflowResponse(rsp *http.Response) (*DeleteWorkflowResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWorkflowResponse parses an HTTP response from a GetWorkflowWithResponse call
func ParseGetWorkflowResponse(rsp *http.Response) (*GetWorkflowResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateWorkflowResponse parses an HTTP response from a UpdateWorkflowWithResponse call
func ParseUpdateWorkflowResponse(rsp *http.Response) (*UpdateWorkflowResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListWorkflowCustomFieldSelectionsResponse parses an HTTP response from a ListWorkflowCustomFieldSelectionsWithResponse call
func ParseListWorkflowCustomFieldSelectionsResponse(rsp *http.Response) (*ListWorkflowCustomFieldSelectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowCustomFieldSelectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateWorkflowCustomFieldSelectionResponse parses an HTTP response from a CreateWorkflowCustomFieldSelectionWithResponse call
func ParseCreateWorkflowCustomFieldSelectionResponse(rsp *http.Response) (*CreateWorkflowCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListWorkflowTasksResponse parses an HTTP response from a ListWorkflowTasksWithResponse call
func ParseListWorkflowTasksResponse(rsp *http.Response) (*ListWorkflowTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateWorkflowTaskResponse parses an HTTP response from a CreateWorkflowTaskWithResponse call
func ParseCreateWorkflowTaskResponse(rsp *http.Response) (*CreateWorkflowTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// GET
	// (GET /scim/Users)
	GetScimUsers(ctx echo.Context, params GetScimUsersParams) error
	// POST
	// (POST /scim/Users)
	PostScimUsers(ctx echo.Context) error
	// DELETE
	// (DELETE /scim/Users/{id})
	DeleteScimUsersId(ctx echo.Context, id int) error
	// GET
	// (GET /scim/Users/{id})
	GetScimUsersId(ctx echo.Context, id int) error
	// PATCH
	// (PATCH /scim/Users/{id})
	PatchScimUsersId(ctx echo.Context, id int) error
	// Delete a incident action item
	// (DELETE /v1/action_items/{id})
	DeleteIncidentActionItem(ctx echo.Context, id string) error
	// Retrieves a incident action item
	// (GET /v1/action_items/{id})
	GetIncidentActionItems(ctx echo.Context, id string) error
	// Update a incident action item
	// (PUT /v1/action_items/{id})
	UpdateIncidentActionItem(ctx echo.Context, id string) error
	// List alerts
	// (GET /v1/alerts)
	ListAlerts(ctx echo.Context, params ListAlertsParams) error
	// Creates a alert
	// (POST /v1/alerts)
	CreateAlert(ctx echo.Context) error
	// Retrieves a alert
	// (GET /v1/alerts/{id})
	GetAlert(ctx echo.Context, id string) error
	// List causes
	// (GET /v1/causes)
	ListCauses(ctx echo.Context, params ListCausesParams) error
	// Creates a cause
	// (POST /v1/causes)
	CreateCause(ctx echo.Context) error
	// Delete a cause
	// (DELETE /v1/causes/{id})
	DeleteCause(ctx echo.Context, id string) error
	// Retrieves a cause
	// (GET /v1/causes/{id})
	GetCause(ctx echo.Context, id string) error
	// Update a cause
	// (PUT /v1/causes/{id})
	UpdateCause(ctx echo.Context, id string) error
	// Delete a custom_field_option
	// (DELETE /v1/custom_field_options/{id})
	DeleteCustomFieldOption(ctx echo.Context, id string) error
	// Retrieves a custom_field_option
	// (GET /v1/custom_field_options/{id})
	GetCustomFieldOption(ctx echo.Context, id string) error
	// Update a custom_field_option
	// (PUT /v1/custom_field_options/{id})
	UpdateCustomFieldOption(ctx echo.Context, id string) error
	// List custom_fields
	// (GET /v1/custom_fields)
	ListCustomFields(ctx echo.Context, params ListCustomFieldsParams) error
	// Creates a custom_field
	// (POST /v1/custom_fields)
	CreateCustomField(ctx echo.Context) error
	// List custom_field_options
	// (GET /v1/custom_fields/{custom_field_id}/options)
	ListCustomFieldOptions(ctx echo.Context, customFieldId string, params ListCustomFieldOptionsParams) error
	// Creates a custom_field_option
	// (POST /v1/custom_fields/{custom_field_id}/options)
	CreateCustomFieldOption(ctx echo.Context, customFieldId string) error
	// Delete a custom_field
	// (DELETE /v1/custom_fields/{id})
	DeleteCustomField(ctx echo.Context, id string) error
	// Retrieves a custom_field
	// (GET /v1/custom_fields/{id})
	GetCustomField(ctx echo.Context, id string) error
	// Update a custom_field
	// (PUT /v1/custom_fields/{id})
	UpdateCustomField(ctx echo.Context, id string) error
	// Delete a dashboard panel
	// (DELETE /v1/dashboard_panels/{id})
	DeleteDashboardPanel(ctx echo.Context, id string) error
	// Retrieves a dashboard panel
	// (GET /v1/dashboard_panels/{id})
	GetDashboardPanel(ctx echo.Context, id string, params GetDashboardPanelParams) error
	// Update a dashboard panel
	// (PUT /v1/dashboard_panels/{id})
	UpdateDashboardPanel(ctx echo.Context, id string) error
	// Duplicates a dashboard panel
	// (POST /v1/dashboard_panels/{id}/duplicate)
	DuplicateDashboardPanel(ctx echo.Context, id string) error
	// List dashboards
	// (GET /v1/dashboards)
	ListDashboards(ctx echo.Context, params ListDashboardsParams) error
	// Creates a dashboard
	// (POST /v1/dashboards)
	CreateDashboard(ctx echo.Context) error
	// List dashboard panels
	// (GET /v1/dashboards/{dashboard_id}/panels)
	ListDashboardPanels(ctx echo.Context, dashboardId string, params ListDashboardPanelsParams) error
	// Creates a dashboard panel
	// (POST /v1/dashboards/{dashboard_id}/panels)
	CreateDashboardPanel(ctx echo.Context, dashboardId string) error
	// Delete a dashboard
	// (DELETE /v1/dashboards/{id})
	DeleteDashboard(ctx echo.Context, id string) error
	// Retrieves a dashboard
	// (GET /v1/dashboards/{id})
	GetDashboard(ctx echo.Context, id string) error
	// Update a dashboard
	// (PUT /v1/dashboards/{id})
	UpdateDashboard(ctx echo.Context, id string) error
	// Duplicates a dashboard
	// (POST /v1/dashboards/{id}/duplicate)
	DuplicateDashboard(ctx echo.Context, id string) error
	// Sets dashboard to user default
	// (POST /v1/dashboards/{id}/set_default)
	SetDefaultDashboard(ctx echo.Context, id string) error
	// List environments
	// (GET /v1/environments)
	ListEnvironments(ctx echo.Context, params ListEnvironmentsParams) error
	// Creates a environment
	// (POST /v1/environments)
	CreateEnvironment(ctx echo.Context) error
	// Delete a environment
	// (DELETE /v1/environments/{id})
	DeleteEnvironment(ctx echo.Context, id string) error
	// Retrieves a environment
	// (GET /v1/environments/{id})
	GetEnvironment(ctx echo.Context, id string) error
	// Update a environment
	// (PUT /v1/environments/{id})
	UpdateEnvironment(ctx echo.Context, id string) error
	// Delete a incident event
	// (DELETE /v1/events/{id})
	DeleteIncidentEvent(ctx echo.Context, id string) error
	// Retrieves a incident event
	// (GET /v1/events/{id})
	GetIncidentEvents(ctx echo.Context, id string) error
	// Update a incident event
	// (PUT /v1/events/{id})
	UpdateIncidentEvent(ctx echo.Context, id string) error
	// Delete a incident feedback
	// (DELETE /v1/feedbacks/{id})
	DeleteIncidentFeedback(ctx echo.Context, id string) error
	// Retrieves a incident feedback
	// (GET /v1/feedbacks/{id})
	GetIncidentFeedbacks(ctx echo.Context, id string) error
	// Update a incident feedback
	// (PUT /v1/feedbacks/{id})
	UpdateIncidentFeedback(ctx echo.Context, id string) error
	// List functionalities
	// (GET /v1/functionalities)
	ListFunctionalities(ctx echo.Context, params ListFunctionalitiesParams) error
	// Creates a functionality
	// (POST /v1/functionalities)
	CreateFunctionality(ctx echo.Context) error
	// Delete a functionality
	// (DELETE /v1/functionalities/{id})
	DeleteFunctionality(ctx echo.Context, id string) error
	// Retrieves a functionality
	// (GET /v1/functionalities/{id})
	GetFunctionality(ctx echo.Context, id string) error
	// Update a functionality
	// (PUT /v1/functionalities/{id})
	UpdateFunctionality(ctx echo.Context, id string) error
	// Get functionality incidents chart
	// (GET /v1/functionalities/{id}/incidents_chart)
	GetFunctionalityIncidentsChart(ctx echo.Context, id string, params GetFunctionalityIncidentsChartParams) error
	// Get functionality uptime chart
	// (GET /v1/functionalities/{id}/uptime_chart)
	GetFunctionalityUptimeChart(ctx echo.Context, id string, params GetFunctionalityUptimeChartParams) error
	// Delete a incident_custom_field_selection
	// (DELETE /v1/incident_custom_field_selections/{id})
	DeleteIncidentCustomFieldSelection(ctx echo.Context, id string) error
	// Retrieves a incident_custom_field_selection
	// (GET /v1/incident_custom_field_selections/{id})
	GetIncidentCustomFieldSelection(ctx echo.Context, id string) error
	// Update a incident_custom_field_selection
	// (PUT /v1/incident_custom_field_selections/{id})
	UpdateIncidentCustomFieldSelection(ctx echo.Context, id string) error
	// Delete a incident_role task
	// (DELETE /v1/incident_role_tasks/{id})
	DeleteIncidentRoleTask(ctx echo.Context, id string) error
	// Retrieves a incident_role task
	// (GET /v1/incident_role_tasks/{id})
	GetIncidentRoleTasks(ctx echo.Context, id string) error
	// Update a incident_role task
	// (PUT /v1/incident_role_tasks/{id})
	UpdateIncidentRoleTask(ctx echo.Context, id string) error
	// List incident roles
	// (GET /v1/incident_roles)
	ListIncidentRoles(ctx echo.Context, params ListIncidentRolesParams) error
	// Creates a incident role
	// (POST /v1/incident_roles)
	CreateIncidentRole(ctx echo.Context) error
	// Delete a incident role
	// (DELETE /v1/incident_roles/{id})
	DeleteIncidentRole(ctx echo.Context, id string) error
	// Retrieves a incident role
	// (GET /v1/incident_roles/{id})
	GetIncidentRole(ctx echo.Context, id string) error
	// Update a incident role
	// (PUT /v1/incident_roles/{id})
	UpdateIncidentRole(ctx echo.Context, id string) error
	// List incident_role tasks
	// (GET /v1/incident_roles/{incident_role_id}/incident_role_tasks)
	ListIncidentRoleTasks(ctx echo.Context, incidentRoleId string, params ListIncidentRoleTasksParams) error
	// Creates a incident_role task
	// (POST /v1/incident_roles/{incident_role_id}/incident_role_tasks)
	CreateIncidentRoleTask(ctx echo.Context, incidentRoleId string) error
	// List incident_types
	// (GET /v1/incident_types)
	ListIncidentTypes(ctx echo.Context, params ListIncidentTypesParams) error
	// Creates a incident_type
	// (POST /v1/incident_types)
	CreateIncidentType(ctx echo.Context) error
	// Delete a incident_type
	// (DELETE /v1/incident_types/{id})
	DeleteIncidentType(ctx echo.Context, id string) error
	// Retrieves a incident_type
	// (GET /v1/incident_types/{id})
	GetIncidentType(ctx echo.Context, id string) error
	// Update a incident_type
	// (PUT /v1/incident_types/{id})
	UpdateIncidentType(ctx echo.Context, id string) error
	// List incidents
	// (GET /v1/incidents)
	ListIncidents(ctx echo.Context, params ListIncidentsParams) error
	// Creates a incident
	// (POST /v1/incidents)
	CreateIncident(ctx echo.Context) error
	// Delete a incident
	// (DELETE /v1/incidents/{id})
	DeleteIncident(ctx echo.Context, id string) error
	// Retrieves a incident
	// (GET /v1/incidents/{id})
	GetIncident(ctx echo.Context, id string) error
	// Update a incident
	// (PUT /v1/incidents/{id})
	UpdateIncident(ctx echo.Context, id string) error
	// Resolve an incident
	// (PUT /v1/incidents/{id}/cancel)
	CancelIncident(ctx echo.Context, id string) error
	// List incident_custom_field_selections
	// (GET /v1/incidents/{id}/custom_field_selections)
	ListIncidentCustomFieldSelections(ctx echo.Context, id string, params ListIncidentCustomFieldSelectionsParams) error
	// Creates a incident_custom_field_selection
	// (POST /v1/incidents/{id}/custom_field_selections)
	CreateIncidentCustomFieldSelection(ctx echo.Context, id string) error
	// Mitigate an incident
	// (PUT /v1/incidents/{id}/mitigate)
	MitigateIncident(ctx echo.Context, id string) error
	// Resolve an incident
	// (PUT /v1/incidents/{id}/resolve)
	ResolveIncident(ctx echo.Context, id string) error
	// List incident action items
	// (GET /v1/incidents/{incident_id}/action_items)
	ListIncidentActionItems(ctx echo.Context, incidentId string, params ListIncidentActionItemsParams) error
	// Creates a incident action item
	// (POST /v1/incidents/{incident_id}/action_items)
	CreateIncidentActionItem(ctx echo.Context, incidentId string) error
	// List alerts
	// (GET /v1/incidents/{incident_id}/alerts)
	ListAlert(ctx echo.Context, incidentId string, params ListAlertParams) error
	// Attach alerts to an incident
	// (POST /v1/incidents/{incident_id}/alerts)
	AttachAlert(ctx echo.Context, incidentId string) error
	// List incident events
	// (GET /v1/incidents/{incident_id}/events)
	ListIncidentEvents(ctx echo.Context, incidentId string, params ListIncidentEventsParams) error
	// Creates a incident event
	// (POST /v1/incidents/{incident_id}/events)
	CreateIncidentEvent(ctx echo.Context, incidentId string) error
	// List incident feedbacks
	// (GET /v1/incidents/{incident_id}/feedbacks)
	ListIncidentFeedbacks(ctx echo.Context, incidentId string, params ListIncidentFeedbacksParams) error
	// Creates a incident feedback
	// (POST /v1/incidents/{incident_id}/feedbacks)
	CreateIncidentFeedback(ctx echo.Context, incidentId string) error
	// List incident status page events
	// (GET /v1/incidents/{incident_id}/status-page-events)
	ListIncidentStatusPages(ctx echo.Context, incidentId string, params ListIncidentStatusPagesParams) error
	// Creates a incident status page event
	// (POST /v1/incidents/{incident_id}/status-page-events)
	CreateIncidentStatusPage(ctx echo.Context, incidentId string) error
	// Delete a playbook task
	// (DELETE /v1/playbook_tasks/{id})
	DeletePlaybookTask(ctx echo.Context, id string) error
	// Retrieves a playbook task
	// (GET /v1/playbook_tasks/{id})
	GetPlaybookTasks(ctx echo.Context, id string) error
	// Update a playbook task
	// (PUT /v1/playbook_tasks/{id})
	UpdatePlaybookTask(ctx echo.Context, id string) error
	// List playbooks
	// (GET /v1/playbooks)
	ListPlaybooks(ctx echo.Context, params ListPlaybooksParams) error
	// Creates a playbook
	// (POST /v1/playbooks)
	CreatePlaybook(ctx echo.Context) error
	// Delete a playbook
	// (DELETE /v1/playbooks/{id})
	DeletePlaybook(ctx echo.Context, id string) error
	// Retrieves a playbook
	// (GET /v1/playbooks/{id})
	GetPlaybook(ctx echo.Context, id string) error
	// Update a playbook
	// (PUT /v1/playbooks/{id})
	UpdatePlaybook(ctx echo.Context, id string) error
	// List playbook tasks
	// (GET /v1/playbooks/{playbook_id}/playbook_tasks)
	ListPlaybookTasks(ctx echo.Context, playbookId string, params ListPlaybookTasksParams) error
	// Creates a playbook task
	// (POST /v1/playbooks/{playbook_id}/playbook_tasks)
	CreatePlaybookTask(ctx echo.Context, playbookId string) error
	// List Postmortem Templates
	// (GET /v1/post_mortem_templates)
	ListPostmortemTemplates(ctx echo.Context, params ListPostmortemTemplatesParams) error
	// Creates a postmortem template
	// (POST /v1/post_mortem_templates)
	CreatePostmortemTemplate(ctx echo.Context) error
	// Delete a Postmortem Template
	// (DELETE /v1/post_mortem_templates/{id})
	DeletePostmortemTemplate(ctx echo.Context, id string) error
	// Retrieves a Postmortem Template
	// (GET /v1/post_mortem_templates/{id})
	GetPostmortemTemplate(ctx echo.Context, id string) error
	// Update a Postmortem Template
	// (PUT /v1/post_mortem_templates/{id})
	UpdatePostmortemTemplate(ctx echo.Context, id string) error
	// List incident postmortems
	// (GET /v1/post_mortems)
	ListIncidentPostMortems(ctx echo.Context, params ListIncidentPostMortemsParams) error
	// Retrieves a incident postmortem
	// (GET /v1/post_mortems/{id})
	ListIncidentPostmortem(ctx echo.Context, id string) error
	// Update a incident postmortem
	// (PUT /v1/post_mortems/{id})
	UpdateIncidentPostmortem(ctx echo.Context, id string) error
	// List pulses
	// (GET /v1/pulses)
	ListPulses(ctx echo.Context, params ListPulsesParams) error
	// Creates a pulse
	// (POST /v1/pulses)
	CreatePulse(ctx echo.Context) error
	// Retrieves a pulse
	// (GET /v1/pulses/{id})
	GetPulse(ctx echo.Context, id string) error
	// Update a pulse
	// (PUT /v1/pulses/{id})
	UpdatePulse(ctx echo.Context, id string) error
	// List services
	// (GET /v1/services)
	ListServices(ctx echo.Context, params ListServicesParams) error
	// Creates a service
	// (POST /v1/services)
	CreateService(ctx echo.Context) error
	// Delete a service
	// (DELETE /v1/services/{id})
	DeleteService(ctx echo.Context, id string) error
	// Retrieves a service
	// (GET /v1/services/{id})
	GetService(ctx echo.Context, id string) error
	// Update a service
	// (PUT /v1/services/{id})
	UpdateService(ctx echo.Context, id string) error
	// Get service incidents chart
	// (GET /v1/services/{id}/incidents_chart)
	GetServiceIncidentsChart(ctx echo.Context, id string, params GetServiceIncidentsChartParams) error
	// Get service uptime chart
	// (GET /v1/services/{id}/uptime_chart)
	GetServiceUptimeChart(ctx echo.Context, id string, params GetServiceUptimeChartParams) error
	// List severities
	// (GET /v1/severities)
	ListSeverities(ctx echo.Context, params ListSeveritiesParams) error
	// Creates a severity
	// (POST /v1/severities)
	CreateSeverity(ctx echo.Context) error
	// Delete a severity
	// (DELETE /v1/severities/{id})
	DeleteSeverity(ctx echo.Context, id string) error
	// Retrieves a severity
	// (GET /v1/severities/{id})
	GetSeverity(ctx echo.Context, id string) error
	// Update a severity
	// (PUT /v1/severities/{id})
	UpdateSeverity(ctx echo.Context, id string) error
	// Delete a incident status page event
	// (DELETE /v1/status-page-events/{id})
	DeleteIncidentStatusPage(ctx echo.Context, id string) error
	// Retrieves a incident status page event
	// (GET /v1/status-page-events/{id})
	GetIncidentStatusPages(ctx echo.Context, id string) error
	// Update a incident status page event
	// (PUT /v1/status-page-events/{id})
	UpdateIncidentStatusPage(ctx echo.Context, id string) error
	// List public status pages
	// (GET /v1/status-pages)
	ListStatusPages(ctx echo.Context, params ListStatusPagesParams) error
	// Creates a public status page
	// (POST /v1/status-pages)
	CreateStatusPage(ctx echo.Context) error
	// Delete a public status page
	// (DELETE /v1/status-pages/{id})
	DeleteStatusPage(ctx echo.Context, id string) error
	// Retrieves a public status page
	// (GET /v1/status-pages/{id})
	GetStatusPage(ctx echo.Context, id string) error
	// Update a public status page
	// (PUT /v1/status-pages/{id})
	UpdateStatusPage(ctx echo.Context, id string) error
	// List teams
	// (GET /v1/teams)
	ListTeams(ctx echo.Context, params ListTeamsParams) error
	// Creates a team
	// (POST /v1/teams)
	CreateTeam(ctx echo.Context) error
	// Delete a team
	// (DELETE /v1/teams/{id})
	DeleteTeam(ctx echo.Context, id string) error
	// Retrieves a team
	// (GET /v1/teams/{id})
	GetTeam(ctx echo.Context, id string) error
	// Update a team
	// (PUT /v1/teams/{id})
	UpdateTeam(ctx echo.Context, id string) error
	// Delete a workflow_custom_field_selection
	// (DELETE /v1/workflow_custom_field_selections/{id})
	DeleteWorkflowCustomFieldSelection(ctx echo.Context, id string) error
	// Retrieves a workflow_custom_field_selection
	// (GET /v1/workflow_custom_field_selections/{id})
	GetWorkflowCustomFieldSelection(ctx echo.Context, id string) error
	// Update a genius_workflow_custom_field_selection
	// (PUT /v1/workflow_custom_field_selections/{id})
	UpdateWorkflowCustomFieldSelection(ctx echo.Context, id string) error
	// Delete a workflow task
	// (DELETE /v1/workflow_tasks/{id})
	DeleteWorkflowTask(ctx echo.Context, id string) error
	// Retrieves a workflow task
	// (GET /v1/workflow_tasks/{id})
	GetWorkflowTask(ctx echo.Context, id string) error
	// Update a workflow task
	// (PUT /v1/workflow_tasks/{id})
	UpdateWorkflowTask(ctx echo.Context, id string) error
	// List workflows
	// (GET /v1/workflows)
	ListWorkflows(ctx echo.Context, params ListWorkflowsParams) error
	// Creates a workflow
	// (POST /v1/workflows)
	CreateWorkflow(ctx echo.Context) error
	// Delete a workflow
	// (DELETE /v1/workflows/{id})
	DeleteWorkflow(ctx echo.Context, id string) error
	// Retrieves a workflow
	// (GET /v1/workflows/{id})
	GetWorkflow(ctx echo.Context, id string) error
	// Update a workflow
	// (PUT /v1/workflows/{id})
	UpdateWorkflow(ctx echo.Context, id string) error
	// List workflow_custom_field_selections
	// (GET /v1/workflows/{id}/custom_field_selections)
	ListWorkflowCustomFieldSelections(ctx echo.Context, id string, params ListWorkflowCustomFieldSelectionsParams) error
	// Creates a workflow_custom_field_selection
	// (POST /v1/workflows/{id}/custom_field_selections)
	CreateWorkflowCustomFieldSelection(ctx echo.Context, id string) error
	// List workflow tasks
	// (GET /v1/workflows/{workflow_id}/workflow_tasks)
	ListWorkflowTasks(ctx echo.Context, workflowId string, params ListWorkflowTasksParams) error
	// Creates a workflow task
	// (POST /v1/workflows/{workflow_id}/workflow_tasks)
	CreateWorkflowTask(ctx echo.Context, workflowId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetScimUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetScimUsers(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScimUsersParams
	// ------------- Required query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, true, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "startIndex" -------------

	err = runtime.BindQueryParameter("form", true, false, "startIndex", ctx.QueryParams(), &params.StartIndex)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startIndex: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScimUsers(ctx, params)
	return err
}

// PostScimUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostScimUsers(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScimUsers(ctx)
	return err
}

// DeleteScimUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScimUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScimUsersId(ctx, id)
	return err
}

// GetScimUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) GetScimUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScimUsersId(ctx, id)
	return err
}

// PatchScimUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScimUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScimUsersId(ctx, id)
	return err
}

// DeleteIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentActionItem(ctx, id)
	return err
}

// GetIncidentActionItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentActionItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentActionItems(ctx, id)
	return err
}

// UpdateIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentActionItem(ctx, id)
	return err
}

// ListAlerts converts echo context to params.
func (w *ServerInterfaceWrapper) ListAlerts(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAlertsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAlerts(ctx, params)
	return err
}

// CreateAlert converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAlert(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAlert(ctx)
	return err
}

// GetAlert converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlert(ctx, id)
	return err
}

// ListCauses converts echo context to params.
func (w *ServerInterfaceWrapper) ListCauses(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCausesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCauses(ctx, params)
	return err
}

// CreateCause converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCause(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCause(ctx)
	return err
}

// DeleteCause converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCause(ctx, id)
	return err
}

// GetCause converts echo context to params.
func (w *ServerInterfaceWrapper) GetCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCause(ctx, id)
	return err
}

// UpdateCause converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCause(ctx, id)
	return err
}

// DeleteCustomFieldOption converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCustomFieldOption(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCustomFieldOption(ctx, id)
	return err
}

// GetCustomFieldOption converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomFieldOption(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomFieldOption(ctx, id)
	return err
}

// UpdateCustomFieldOption converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCustomFieldOption(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCustomFieldOption(ctx, id)
	return err
}

// ListCustomFields converts echo context to params.
func (w *ServerInterfaceWrapper) ListCustomFields(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCustomFieldsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCustomFields(ctx, params)
	return err
}

// CreateCustomField converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCustomField(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCustomField(ctx)
	return err
}

// ListCustomFieldOptions converts echo context to params.
func (w *ServerInterfaceWrapper) ListCustomFieldOptions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "custom_field_id" -------------
	var customFieldId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "custom_field_id", runtime.ParamLocationPath, ctx.Param("custom_field_id"), &customFieldId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter custom_field_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCustomFieldOptionsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCustomFieldOptions(ctx, customFieldId, params)
	return err
}

// CreateCustomFieldOption converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCustomFieldOption(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "custom_field_id" -------------
	var customFieldId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "custom_field_id", runtime.ParamLocationPath, ctx.Param("custom_field_id"), &customFieldId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter custom_field_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCustomFieldOption(ctx, customFieldId)
	return err
}

// DeleteCustomField converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCustomField(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCustomField(ctx, id)
	return err
}

// GetCustomField converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomField(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomField(ctx, id)
	return err
}

// UpdateCustomField converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCustomField(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCustomField(ctx, id)
	return err
}

// DeleteDashboardPanel converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDashboardPanel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDashboardPanel(ctx, id)
	return err
}

// GetDashboardPanel converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardPanel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDashboardPanelParams
	// ------------- Optional query parameter "range" -------------

	err = runtime.BindQueryParameter("form", true, false, "range", ctx.QueryParams(), &params.Range)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter range: %s", err))
	}

	// ------------- Optional query parameter "period" -------------

	err = runtime.BindQueryParameter("form", true, false, "period", ctx.QueryParams(), &params.Period)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter period: %s", err))
	}

	// ------------- Optional query parameter "time_zone" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_zone", ctx.QueryParams(), &params.TimeZone)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_zone: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardPanel(ctx, id, params)
	return err
}

// UpdateDashboardPanel converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDashboardPanel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateDashboardPanel(ctx, id)
	return err
}

// DuplicateDashboardPanel converts echo context to params.
func (w *ServerInterfaceWrapper) DuplicateDashboardPanel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DuplicateDashboardPanel(ctx, id)
	return err
}

// ListDashboards converts echo context to params.
func (w *ServerInterfaceWrapper) ListDashboards(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDashboardsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListDashboards(ctx, params)
	return err
}

// CreateDashboard converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDashboard(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateDashboard(ctx)
	return err
}

// ListDashboardPanels converts echo context to params.
func (w *ServerInterfaceWrapper) ListDashboardPanels(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dashboard_id" -------------
	var dashboardId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dashboard_id", runtime.ParamLocationPath, ctx.Param("dashboard_id"), &dashboardId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dashboard_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDashboardPanelsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListDashboardPanels(ctx, dashboardId, params)
	return err
}

// CreateDashboardPanel converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDashboardPanel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dashboard_id" -------------
	var dashboardId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dashboard_id", runtime.ParamLocationPath, ctx.Param("dashboard_id"), &dashboardId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dashboard_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateDashboardPanel(ctx, dashboardId)
	return err
}

// DeleteDashboard converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDashboard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDashboard(ctx, id)
	return err
}

// GetDashboard converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboard(ctx, id)
	return err
}

// UpdateDashboard converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDashboard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateDashboard(ctx, id)
	return err
}

// DuplicateDashboard converts echo context to params.
func (w *ServerInterfaceWrapper) DuplicateDashboard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DuplicateDashboard(ctx, id)
	return err
}

// SetDefaultDashboard converts echo context to params.
func (w *ServerInterfaceWrapper) SetDefaultDashboard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetDefaultDashboard(ctx, id)
	return err
}

// ListEnvironments converts echo context to params.
func (w *ServerInterfaceWrapper) ListEnvironments(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEnvironmentsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListEnvironments(ctx, params)
	return err
}

// CreateEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEnvironment(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateEnvironment(ctx)
	return err
}

// DeleteEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEnvironment(ctx, id)
	return err
}

// GetEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnvironment(ctx, id)
	return err
}

// UpdateEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateEnvironment(ctx, id)
	return err
}

// DeleteIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentEvent(ctx, id)
	return err
}

// GetIncidentEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentEvents(ctx, id)
	return err
}

// UpdateIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentEvent(ctx, id)
	return err
}

// DeleteIncidentFeedback converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentFeedback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentFeedback(ctx, id)
	return err
}

// GetIncidentFeedbacks converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentFeedbacks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentFeedbacks(ctx, id)
	return err
}

// UpdateIncidentFeedback converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentFeedback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentFeedback(ctx, id)
	return err
}

// ListFunctionalities converts echo context to params.
func (w *ServerInterfaceWrapper) ListFunctionalities(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFunctionalitiesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "filter[search]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[search]", ctx.QueryParams(), &params.FilterSearch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[search]: %s", err))
	}

	// ------------- Optional query parameter "filter[name]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[name]", ctx.QueryParams(), &params.FilterName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[name]: %s", err))
	}

	// ------------- Optional query parameter "filter[slug]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[slug]", ctx.QueryParams(), &params.FilterSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[slug]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListFunctionalities(ctx, params)
	return err
}

// CreateFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFunctionality(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateFunctionality(ctx)
	return err
}

// DeleteFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFunctionality(ctx, id)
	return err
}

// GetFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) GetFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFunctionality(ctx, id)
	return err
}

// UpdateFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateFunctionality(ctx, id)
	return err
}

// GetFunctionalityIncidentsChart converts echo context to params.
func (w *ServerInterfaceWrapper) GetFunctionalityIncidentsChart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFunctionalityIncidentsChartParams
	// ------------- Required query parameter "period" -------------

	err = runtime.BindQueryParameter("form", true, true, "period", ctx.QueryParams(), &params.Period)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter period: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFunctionalityIncidentsChart(ctx, id, params)
	return err
}

// GetFunctionalityUptimeChart converts echo context to params.
func (w *ServerInterfaceWrapper) GetFunctionalityUptimeChart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFunctionalityUptimeChartParams
	// ------------- Optional query parameter "period" -------------

	err = runtime.BindQueryParameter("form", true, false, "period", ctx.QueryParams(), &params.Period)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter period: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFunctionalityUptimeChart(ctx, id, params)
	return err
}

// DeleteIncidentCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentCustomFieldSelection(ctx, id)
	return err
}

// GetIncidentCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentCustomFieldSelection(ctx, id)
	return err
}

// UpdateIncidentCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentCustomFieldSelection(ctx, id)
	return err
}

// DeleteIncidentRoleTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentRoleTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentRoleTask(ctx, id)
	return err
}

// GetIncidentRoleTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentRoleTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentRoleTasks(ctx, id)
	return err
}

// UpdateIncidentRoleTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentRoleTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentRoleTask(ctx, id)
	return err
}

// ListIncidentRoles converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentRoles(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentRolesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentRoles(ctx, params)
	return err
}

// CreateIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentRole(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentRole(ctx)
	return err
}

// DeleteIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentRole(ctx, id)
	return err
}

// GetIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentRole(ctx, id)
	return err
}

// UpdateIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentRole(ctx, id)
	return err
}

// ListIncidentRoleTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentRoleTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_role_id" -------------
	var incidentRoleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_role_id", runtime.ParamLocationPath, ctx.Param("incident_role_id"), &incidentRoleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_role_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentRoleTasksParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentRoleTasks(ctx, incidentRoleId, params)
	return err
}

// CreateIncidentRoleTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentRoleTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_role_id" -------------
	var incidentRoleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_role_id", runtime.ParamLocationPath, ctx.Param("incident_role_id"), &incidentRoleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_role_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentRoleTask(ctx, incidentRoleId)
	return err
}

// ListIncidentTypes converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentTypes(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentTypesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentTypes(ctx, params)
	return err
}

// CreateIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentType(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentType(ctx)
	return err
}

// DeleteIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentType(ctx, id)
	return err
}

// GetIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentType(ctx, id)
	return err
}

// UpdateIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentType(ctx, id)
	return err
}

// ListIncidents converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidents(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "filter[search]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[search]", ctx.QueryParams(), &params.FilterSearch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[search]: %s", err))
	}

	// ------------- Optional query parameter "filter[status]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[status]", ctx.QueryParams(), &params.FilterStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[status]: %s", err))
	}

	// ------------- Optional query parameter "filter[severity]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[severity]", ctx.QueryParams(), &params.FilterSeverity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[severity]: %s", err))
	}

	// ------------- Optional query parameter "filter[type]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[type]", ctx.QueryParams(), &params.FilterType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[type]: %s", err))
	}

	// ------------- Optional query parameter "filter[user_id]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[user_id]", ctx.QueryParams(), &params.FilterUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[user_id]: %s", err))
	}

	// ------------- Optional query parameter "filter[environments]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[environments]", ctx.QueryParams(), &params.FilterEnvironments)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[environments]: %s", err))
	}

	// ------------- Optional query parameter "filter[functionalities]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[functionalities]", ctx.QueryParams(), &params.FilterFunctionalities)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[functionalities]: %s", err))
	}

	// ------------- Optional query parameter "filter[services]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[services]", ctx.QueryParams(), &params.FilterServices)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[services]: %s", err))
	}

	// ------------- Optional query parameter "filter[teams]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[teams]", ctx.QueryParams(), &params.FilterTeams)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[teams]: %s", err))
	}

	// ------------- Optional query parameter "filter[custom_field_selected_option_ids]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[custom_field_selected_option_ids]", ctx.QueryParams(), &params.FilterCustomFieldSelectedOptionIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[custom_field_selected_option_ids]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidents(ctx, params)
	return err
}

// CreateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncident(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncident(ctx)
	return err
}

// DeleteIncident converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncident(ctx, id)
	return err
}

// GetIncident converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncident(ctx, id)
	return err
}

// UpdateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncident(ctx, id)
	return err
}

// CancelIncident converts echo context to params.
func (w *ServerInterfaceWrapper) CancelIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CancelIncident(ctx, id)
	return err
}

// ListIncidentCustomFieldSelections converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentCustomFieldSelections(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentCustomFieldSelectionsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentCustomFieldSelections(ctx, id, params)
	return err
}

// CreateIncidentCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentCustomFieldSelection(ctx, id)
	return err
}

// MitigateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) MitigateIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MitigateIncident(ctx, id)
	return err
}

// ResolveIncident converts echo context to params.
func (w *ServerInterfaceWrapper) ResolveIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ResolveIncident(ctx, id)
	return err
}

// ListIncidentActionItems converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentActionItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentActionItemsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentActionItems(ctx, incidentId, params)
	return err
}

// CreateIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentActionItem(ctx, incidentId)
	return err
}

// ListAlert converts echo context to params.
func (w *ServerInterfaceWrapper) ListAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAlertParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAlert(ctx, incidentId, params)
	return err
}

// AttachAlert converts echo context to params.
func (w *ServerInterfaceWrapper) AttachAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AttachAlert(ctx, incidentId)
	return err
}

// ListIncidentEvents converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentEventsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentEvents(ctx, incidentId, params)
	return err
}

// CreateIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentEvent(ctx, incidentId)
	return err
}

// ListIncidentFeedbacks converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentFeedbacks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentFeedbacksParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentFeedbacks(ctx, incidentId, params)
	return err
}

// CreateIncidentFeedback converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentFeedback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentFeedback(ctx, incidentId)
	return err
}

// ListIncidentStatusPages converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentStatusPages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentStatusPagesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentStatusPages(ctx, incidentId, params)
	return err
}

// CreateIncidentStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentStatusPage(ctx, incidentId)
	return err
}

// DeletePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePlaybookTask(ctx, id)
	return err
}

// GetPlaybookTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybookTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybookTasks(ctx, id)
	return err
}

// UpdatePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePlaybookTask(ctx, id)
	return err
}

// ListPlaybooks converts echo context to params.
func (w *ServerInterfaceWrapper) ListPlaybooks(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlaybooksParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPlaybooks(ctx, params)
	return err
}

// CreatePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePlaybook(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePlaybook(ctx)
	return err
}

// DeletePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePlaybook(ctx, id)
	return err
}

// GetPlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybook(ctx, id)
	return err
}

// UpdatePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePlaybook(ctx, id)
	return err
}

// ListPlaybookTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListPlaybookTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playbook_id" -------------
	var playbookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, ctx.Param("playbook_id"), &playbookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playbook_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlaybookTasksParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPlaybookTasks(ctx, playbookId, params)
	return err
}

// CreatePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playbook_id" -------------
	var playbookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, ctx.Param("playbook_id"), &playbookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playbook_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePlaybookTask(ctx, playbookId)
	return err
}

// ListPostmortemTemplates converts echo context to params.
func (w *ServerInterfaceWrapper) ListPostmortemTemplates(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPostmortemTemplatesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPostmortemTemplates(ctx, params)
	return err
}

// CreatePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePostmortemTemplate(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePostmortemTemplate(ctx)
	return err
}

// DeletePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePostmortemTemplate(ctx, id)
	return err
}

// GetPostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPostmortemTemplate(ctx, id)
	return err
}

// UpdatePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePostmortemTemplate(ctx, id)
	return err
}

// ListIncidentPostMortems converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentPostMortems(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentPostMortemsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "filter[search]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[search]", ctx.QueryParams(), &params.FilterSearch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[search]: %s", err))
	}

	// ------------- Optional query parameter "filter[status]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[status]", ctx.QueryParams(), &params.FilterStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[status]: %s", err))
	}

	// ------------- Optional query parameter "filter[severity]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[severity]", ctx.QueryParams(), &params.FilterSeverity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[severity]: %s", err))
	}

	// ------------- Optional query parameter "filter[type]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[type]", ctx.QueryParams(), &params.FilterType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[type]: %s", err))
	}

	// ------------- Optional query parameter "filter[user_id]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[user_id]", ctx.QueryParams(), &params.FilterUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[user_id]: %s", err))
	}

	// ------------- Optional query parameter "filter[environments]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[environments]", ctx.QueryParams(), &params.FilterEnvironments)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[environments]: %s", err))
	}

	// ------------- Optional query parameter "filter[functionalities]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[functionalities]", ctx.QueryParams(), &params.FilterFunctionalities)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[functionalities]: %s", err))
	}

	// ------------- Optional query parameter "filter[services]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[services]", ctx.QueryParams(), &params.FilterServices)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[services]: %s", err))
	}

	// ------------- Optional query parameter "filter[teams]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[teams]", ctx.QueryParams(), &params.FilterTeams)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[teams]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentPostMortems(ctx, params)
	return err
}

// ListIncidentPostmortem converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentPostmortem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentPostmortem(ctx, id)
	return err
}

// UpdateIncidentPostmortem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentPostmortem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentPostmortem(ctx, id)
	return err
}

// ListPulses converts echo context to params.
func (w *ServerInterfaceWrapper) ListPulses(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPulsesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPulses(ctx, params)
	return err
}

// CreatePulse converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePulse(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePulse(ctx)
	return err
}

// GetPulse converts echo context to params.
func (w *ServerInterfaceWrapper) GetPulse(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPulse(ctx, id)
	return err
}

// UpdatePulse converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePulse(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePulse(ctx, id)
	return err
}

// ListServices converts echo context to params.
func (w *ServerInterfaceWrapper) ListServices(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListServicesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "filter[name]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[name]", ctx.QueryParams(), &params.FilterName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[name]: %s", err))
	}

	// ------------- Optional query parameter "filter[slug]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[slug]", ctx.QueryParams(), &params.FilterSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[slug]: %s", err))
	}

	// ------------- Optional query parameter "filter[backstage_id]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[backstage_id]", ctx.QueryParams(), &params.FilterBackstageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[backstage_id]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListServices(ctx, params)
	return err
}

// CreateService converts echo context to params.
func (w *ServerInterfaceWrapper) CreateService(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateService(ctx)
	return err
}

// DeleteService converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteService(ctx, id)
	return err
}

// GetService converts echo context to params.
func (w *ServerInterfaceWrapper) GetService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetService(ctx, id)
	return err
}

// UpdateService converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateService(ctx, id)
	return err
}

// GetServiceIncidentsChart converts echo context to params.
func (w *ServerInterfaceWrapper) GetServiceIncidentsChart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServiceIncidentsChartParams
	// ------------- Required query parameter "period" -------------

	err = runtime.BindQueryParameter("form", true, true, "period", ctx.QueryParams(), &params.Period)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter period: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetServiceIncidentsChart(ctx, id, params)
	return err
}

// GetServiceUptimeChart converts echo context to params.
func (w *ServerInterfaceWrapper) GetServiceUptimeChart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServiceUptimeChartParams
	// ------------- Optional query parameter "period" -------------

	err = runtime.BindQueryParameter("form", true, false, "period", ctx.QueryParams(), &params.Period)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter period: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetServiceUptimeChart(ctx, id, params)
	return err
}

// ListSeverities converts echo context to params.
func (w *ServerInterfaceWrapper) ListSeverities(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSeveritiesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSeverities(ctx, params)
	return err
}

// CreateSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSeverity(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSeverity(ctx)
	return err
}

// DeleteSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSeverity(ctx, id)
	return err
}

// GetSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) GetSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSeverity(ctx, id)
	return err
}

// UpdateSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSeverity(ctx, id)
	return err
}

// DeleteIncidentStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentStatusPage(ctx, id)
	return err
}

// GetIncidentStatusPages converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentStatusPages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentStatusPages(ctx, id)
	return err
}

// UpdateIncidentStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentStatusPage(ctx, id)
	return err
}

// ListStatusPages converts echo context to params.
func (w *ServerInterfaceWrapper) ListStatusPages(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListStatusPagesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListStatusPages(ctx, params)
	return err
}

// CreateStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateStatusPage(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateStatusPage(ctx)
	return err
}

// DeleteStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteStatusPage(ctx, id)
	return err
}

// GetStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatusPage(ctx, id)
	return err
}

// UpdateStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateStatusPage(ctx, id)
	return err
}

// ListTeams converts echo context to params.
func (w *ServerInterfaceWrapper) ListTeams(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTeamsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTeams(ctx, params)
	return err
}

// CreateTeam converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTeam(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTeam(ctx)
	return err
}

// DeleteTeam converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTeam(ctx, id)
	return err
}

// GetTeam converts echo context to params.
func (w *ServerInterfaceWrapper) GetTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTeam(ctx, id)
	return err
}

// UpdateTeam converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTeam(ctx, id)
	return err
}

// DeleteWorkflowCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorkflowCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteWorkflowCustomFieldSelection(ctx, id)
	return err
}

// GetWorkflowCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkflowCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWorkflowCustomFieldSelection(ctx, id)
	return err
}

// UpdateWorkflowCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateWorkflowCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateWorkflowCustomFieldSelection(ctx, id)
	return err
}

// DeleteWorkflowTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorkflowTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteWorkflowTask(ctx, id)
	return err
}

// GetWorkflowTask converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkflowTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWorkflowTask(ctx, id)
	return err
}

// UpdateWorkflowTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateWorkflowTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateWorkflowTask(ctx, id)
	return err
}

// ListWorkflows converts echo context to params.
func (w *ServerInterfaceWrapper) ListWorkflows(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWorkflowsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListWorkflows(ctx, params)
	return err
}

// CreateWorkflow converts echo context to params.
func (w *ServerInterfaceWrapper) CreateWorkflow(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateWorkflow(ctx)
	return err
}

// DeleteWorkflow converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorkflow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteWorkflow(ctx, id)
	return err
}

// GetWorkflow converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkflow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWorkflow(ctx, id)
	return err
}

// UpdateWorkflow converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateWorkflow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateWorkflow(ctx, id)
	return err
}

// ListWorkflowCustomFieldSelections converts echo context to params.
func (w *ServerInterfaceWrapper) ListWorkflowCustomFieldSelections(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWorkflowCustomFieldSelectionsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListWorkflowCustomFieldSelections(ctx, id, params)
	return err
}

// CreateWorkflowCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) CreateWorkflowCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateWorkflowCustomFieldSelection(ctx, id)
	return err
}

// ListWorkflowTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListWorkflowTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workflow_id" -------------
	var workflowId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, ctx.Param("workflow_id"), &workflowId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWorkflowTasksParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListWorkflowTasks(ctx, workflowId, params)
	return err
}

// CreateWorkflowTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreateWorkflowTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workflow_id" -------------
	var workflowId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, ctx.Param("workflow_id"), &workflowId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateWorkflowTask(ctx, workflowId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/scim/Users", wrapper.GetScimUsers)
	router.POST(baseURL+"/scim/Users", wrapper.PostScimUsers)
	router.DELETE(baseURL+"/scim/Users/:id", wrapper.DeleteScimUsersId)
	router.GET(baseURL+"/scim/Users/:id", wrapper.GetScimUsersId)
	router.PATCH(baseURL+"/scim/Users/:id", wrapper.PatchScimUsersId)
	router.DELETE(baseURL+"/v1/action_items/:id", wrapper.DeleteIncidentActionItem)
	router.GET(baseURL+"/v1/action_items/:id", wrapper.GetIncidentActionItems)
	router.PUT(baseURL+"/v1/action_items/:id", wrapper.UpdateIncidentActionItem)
	router.GET(baseURL+"/v1/alerts", wrapper.ListAlerts)
	router.POST(baseURL+"/v1/alerts", wrapper.CreateAlert)
	router.GET(baseURL+"/v1/alerts/:id", wrapper.GetAlert)
	router.GET(baseURL+"/v1/causes", wrapper.ListCauses)
	router.POST(baseURL+"/v1/causes", wrapper.CreateCause)
	router.DELETE(baseURL+"/v1/causes/:id", wrapper.DeleteCause)
	router.GET(baseURL+"/v1/causes/:id", wrapper.GetCause)
	router.PUT(baseURL+"/v1/causes/:id", wrapper.UpdateCause)
	router.DELETE(baseURL+"/v1/custom_field_options/:id", wrapper.DeleteCustomFieldOption)
	router.GET(baseURL+"/v1/custom_field_options/:id", wrapper.GetCustomFieldOption)
	router.PUT(baseURL+"/v1/custom_field_options/:id", wrapper.UpdateCustomFieldOption)
	router.GET(baseURL+"/v1/custom_fields", wrapper.ListCustomFields)
	router.POST(baseURL+"/v1/custom_fields", wrapper.CreateCustomField)
	router.GET(baseURL+"/v1/custom_fields/:custom_field_id/options", wrapper.ListCustomFieldOptions)
	router.POST(baseURL+"/v1/custom_fields/:custom_field_id/options", wrapper.CreateCustomFieldOption)
	router.DELETE(baseURL+"/v1/custom_fields/:id", wrapper.DeleteCustomField)
	router.GET(baseURL+"/v1/custom_fields/:id", wrapper.GetCustomField)
	router.PUT(baseURL+"/v1/custom_fields/:id", wrapper.UpdateCustomField)
	router.DELETE(baseURL+"/v1/dashboard_panels/:id", wrapper.DeleteDashboardPanel)
	router.GET(baseURL+"/v1/dashboard_panels/:id", wrapper.GetDashboardPanel)
	router.PUT(baseURL+"/v1/dashboard_panels/:id", wrapper.UpdateDashboardPanel)
	router.POST(baseURL+"/v1/dashboard_panels/:id/duplicate", wrapper.DuplicateDashboardPanel)
	router.GET(baseURL+"/v1/dashboards", wrapper.ListDashboards)
	router.POST(baseURL+"/v1/dashboards", wrapper.CreateDashboard)
	router.GET(baseURL+"/v1/dashboards/:dashboard_id/panels", wrapper.ListDashboardPanels)
	router.POST(baseURL+"/v1/dashboards/:dashboard_id/panels", wrapper.CreateDashboardPanel)
	router.DELETE(baseURL+"/v1/dashboards/:id", wrapper.DeleteDashboard)
	router.GET(baseURL+"/v1/dashboards/:id", wrapper.GetDashboard)
	router.PUT(baseURL+"/v1/dashboards/:id", wrapper.UpdateDashboard)
	router.POST(baseURL+"/v1/dashboards/:id/duplicate", wrapper.DuplicateDashboard)
	router.POST(baseURL+"/v1/dashboards/:id/set_default", wrapper.SetDefaultDashboard)
	router.GET(baseURL+"/v1/environments", wrapper.ListEnvironments)
	router.POST(baseURL+"/v1/environments", wrapper.CreateEnvironment)
	router.DELETE(baseURL+"/v1/environments/:id", wrapper.DeleteEnvironment)
	router.GET(baseURL+"/v1/environments/:id", wrapper.GetEnvironment)
	router.PUT(baseURL+"/v1/environments/:id", wrapper.UpdateEnvironment)
	router.DELETE(baseURL+"/v1/events/:id", wrapper.DeleteIncidentEvent)
	router.GET(baseURL+"/v1/events/:id", wrapper.GetIncidentEvents)
	router.PUT(baseURL+"/v1/events/:id", wrapper.UpdateIncidentEvent)
	router.DELETE(baseURL+"/v1/feedbacks/:id", wrapper.DeleteIncidentFeedback)
	router.GET(baseURL+"/v1/feedbacks/:id", wrapper.GetIncidentFeedbacks)
	router.PUT(baseURL+"/v1/feedbacks/:id", wrapper.UpdateIncidentFeedback)
	router.GET(baseURL+"/v1/functionalities", wrapper.ListFunctionalities)
	router.POST(baseURL+"/v1/functionalities", wrapper.CreateFunctionality)
	router.DELETE(baseURL+"/v1/functionalities/:id", wrapper.DeleteFunctionality)
	router.GET(baseURL+"/v1/functionalities/:id", wrapper.GetFunctionality)
	router.PUT(baseURL+"/v1/functionalities/:id", wrapper.UpdateFunctionality)
	router.GET(baseURL+"/v1/functionalities/:id/incidents_chart", wrapper.GetFunctionalityIncidentsChart)
	router.GET(baseURL+"/v1/functionalities/:id/uptime_chart", wrapper.GetFunctionalityUptimeChart)
	router.DELETE(baseURL+"/v1/incident_custom_field_selections/:id", wrapper.DeleteIncidentCustomFieldSelection)
	router.GET(baseURL+"/v1/incident_custom_field_selections/:id", wrapper.GetIncidentCustomFieldSelection)
	router.PUT(baseURL+"/v1/incident_custom_field_selections/:id", wrapper.UpdateIncidentCustomFieldSelection)
	router.DELETE(baseURL+"/v1/incident_role_tasks/:id", wrapper.DeleteIncidentRoleTask)
	router.GET(baseURL+"/v1/incident_role_tasks/:id", wrapper.GetIncidentRoleTasks)
	router.PUT(baseURL+"/v1/incident_role_tasks/:id", wrapper.UpdateIncidentRoleTask)
	router.GET(baseURL+"/v1/incident_roles", wrapper.ListIncidentRoles)
	router.POST(baseURL+"/v1/incident_roles", wrapper.CreateIncidentRole)
	router.DELETE(baseURL+"/v1/incident_roles/:id", wrapper.DeleteIncidentRole)
	router.GET(baseURL+"/v1/incident_roles/:id", wrapper.GetIncidentRole)
	router.PUT(baseURL+"/v1/incident_roles/:id", wrapper.UpdateIncidentRole)
	router.GET(baseURL+"/v1/incident_roles/:incident_role_id/incident_role_tasks", wrapper.ListIncidentRoleTasks)
	router.POST(baseURL+"/v1/incident_roles/:incident_role_id/incident_role_tasks", wrapper.CreateIncidentRoleTask)
	router.GET(baseURL+"/v1/incident_types", wrapper.ListIncidentTypes)
	router.POST(baseURL+"/v1/incident_types", wrapper.CreateIncidentType)
	router.DELETE(baseURL+"/v1/incident_types/:id", wrapper.DeleteIncidentType)
	router.GET(baseURL+"/v1/incident_types/:id", wrapper.GetIncidentType)
	router.PUT(baseURL+"/v1/incident_types/:id", wrapper.UpdateIncidentType)
	router.GET(baseURL+"/v1/incidents", wrapper.ListIncidents)
	router.POST(baseURL+"/v1/incidents", wrapper.CreateIncident)
	router.DELETE(baseURL+"/v1/incidents/:id", wrapper.DeleteIncident)
	router.GET(baseURL+"/v1/incidents/:id", wrapper.GetIncident)
	router.PUT(baseURL+"/v1/incidents/:id", wrapper.UpdateIncident)
	router.PUT(baseURL+"/v1/incidents/:id/cancel", wrapper.CancelIncident)
	router.GET(baseURL+"/v1/incidents/:id/custom_field_selections", wrapper.ListIncidentCustomFieldSelections)
	router.POST(baseURL+"/v1/incidents/:id/custom_field_selections", wrapper.CreateIncidentCustomFieldSelection)
	router.PUT(baseURL+"/v1/incidents/:id/mitigate", wrapper.MitigateIncident)
	router.PUT(baseURL+"/v1/incidents/:id/resolve", wrapper.ResolveIncident)
	router.GET(baseURL+"/v1/incidents/:incident_id/action_items", wrapper.ListIncidentActionItems)
	router.POST(baseURL+"/v1/incidents/:incident_id/action_items", wrapper.CreateIncidentActionItem)
	router.GET(baseURL+"/v1/incidents/:incident_id/alerts", wrapper.ListAlert)
	router.POST(baseURL+"/v1/incidents/:incident_id/alerts", wrapper.AttachAlert)
	router.GET(baseURL+"/v1/incidents/:incident_id/events", wrapper.ListIncidentEvents)
	router.POST(baseURL+"/v1/incidents/:incident_id/events", wrapper.CreateIncidentEvent)
	router.GET(baseURL+"/v1/incidents/:incident_id/feedbacks", wrapper.ListIncidentFeedbacks)
	router.POST(baseURL+"/v1/incidents/:incident_id/feedbacks", wrapper.CreateIncidentFeedback)
	router.GET(baseURL+"/v1/incidents/:incident_id/status-page-events", wrapper.ListIncidentStatusPages)
	router.POST(baseURL+"/v1/incidents/:incident_id/status-page-events", wrapper.CreateIncidentStatusPage)
	router.DELETE(baseURL+"/v1/playbook_tasks/:id", wrapper.DeletePlaybookTask)
	router.GET(baseURL+"/v1/playbook_tasks/:id", wrapper.GetPlaybookTasks)
	router.PUT(baseURL+"/v1/playbook_tasks/:id", wrapper.UpdatePlaybookTask)
	router.GET(baseURL+"/v1/playbooks", wrapper.ListPlaybooks)
	router.POST(baseURL+"/v1/playbooks", wrapper.CreatePlaybook)
	router.DELETE(baseURL+"/v1/playbooks/:id", wrapper.DeletePlaybook)
	router.GET(baseURL+"/v1/playbooks/:id", wrapper.GetPlaybook)
	router.PUT(baseURL+"/v1/playbooks/:id", wrapper.UpdatePlaybook)
	router.GET(baseURL+"/v1/playbooks/:playbook_id/playbook_tasks", wrapper.ListPlaybookTasks)
	router.POST(baseURL+"/v1/playbooks/:playbook_id/playbook_tasks", wrapper.CreatePlaybookTask)
	router.GET(baseURL+"/v1/post_mortem_templates", wrapper.ListPostmortemTemplates)
	router.POST(baseURL+"/v1/post_mortem_templates", wrapper.CreatePostmortemTemplate)
	router.DELETE(baseURL+"/v1/post_mortem_templates/:id", wrapper.DeletePostmortemTemplate)
	router.GET(baseURL+"/v1/post_mortem_templates/:id", wrapper.GetPostmortemTemplate)
	router.PUT(baseURL+"/v1/post_mortem_templates/:id", wrapper.UpdatePostmortemTemplate)
	router.GET(baseURL+"/v1/post_mortems", wrapper.ListIncidentPostMortems)
	router.GET(baseURL+"/v1/post_mortems/:id", wrapper.ListIncidentPostmortem)
	router.PUT(baseURL+"/v1/post_mortems/:id", wrapper.UpdateIncidentPostmortem)
	router.GET(baseURL+"/v1/pulses", wrapper.ListPulses)
	router.POST(baseURL+"/v1/pulses", wrapper.CreatePulse)
	router.GET(baseURL+"/v1/pulses/:id", wrapper.GetPulse)
	router.PUT(baseURL+"/v1/pulses/:id", wrapper.UpdatePulse)
	router.GET(baseURL+"/v1/services", wrapper.ListServices)
	router.POST(baseURL+"/v1/services", wrapper.CreateService)
	router.DELETE(baseURL+"/v1/services/:id", wrapper.DeleteService)
	router.GET(baseURL+"/v1/services/:id", wrapper.GetService)
	router.PUT(baseURL+"/v1/services/:id", wrapper.UpdateService)
	router.GET(baseURL+"/v1/services/:id/incidents_chart", wrapper.GetServiceIncidentsChart)
	router.GET(baseURL+"/v1/services/:id/uptime_chart", wrapper.GetServiceUptimeChart)
	router.GET(baseURL+"/v1/severities", wrapper.ListSeverities)
	router.POST(baseURL+"/v1/severities", wrapper.CreateSeverity)
	router.DELETE(baseURL+"/v1/severities/:id", wrapper.DeleteSeverity)
	router.GET(baseURL+"/v1/severities/:id", wrapper.GetSeverity)
	router.PUT(baseURL+"/v1/severities/:id", wrapper.UpdateSeverity)
	router.DELETE(baseURL+"/v1/status-page-events/:id", wrapper.DeleteIncidentStatusPage)
	router.GET(baseURL+"/v1/status-page-events/:id", wrapper.GetIncidentStatusPages)
	router.PUT(baseURL+"/v1/status-page-events/:id", wrapper.UpdateIncidentStatusPage)
	router.GET(baseURL+"/v1/status-pages", wrapper.ListStatusPages)
	router.POST(baseURL+"/v1/status-pages", wrapper.CreateStatusPage)
	router.DELETE(baseURL+"/v1/status-pages/:id", wrapper.DeleteStatusPage)
	router.GET(baseURL+"/v1/status-pages/:id", wrapper.GetStatusPage)
	router.PUT(baseURL+"/v1/status-pages/:id", wrapper.UpdateStatusPage)
	router.GET(baseURL+"/v1/teams", wrapper.ListTeams)
	router.POST(baseURL+"/v1/teams", wrapper.CreateTeam)
	router.DELETE(baseURL+"/v1/teams/:id", wrapper.DeleteTeam)
	router.GET(baseURL+"/v1/teams/:id", wrapper.GetTeam)
	router.PUT(baseURL+"/v1/teams/:id", wrapper.UpdateTeam)
	router.DELETE(baseURL+"/v1/workflow_custom_field_selections/:id", wrapper.DeleteWorkflowCustomFieldSelection)
	router.GET(baseURL+"/v1/workflow_custom_field_selections/:id", wrapper.GetWorkflowCustomFieldSelection)
	router.PUT(baseURL+"/v1/workflow_custom_field_selections/:id", wrapper.UpdateWorkflowCustomFieldSelection)
	router.DELETE(baseURL+"/v1/workflow_tasks/:id", wrapper.DeleteWorkflowTask)
	router.GET(baseURL+"/v1/workflow_tasks/:id", wrapper.GetWorkflowTask)
	router.PUT(baseURL+"/v1/workflow_tasks/:id", wrapper.UpdateWorkflowTask)
	router.GET(baseURL+"/v1/workflows", wrapper.ListWorkflows)
	router.POST(baseURL+"/v1/workflows", wrapper.CreateWorkflow)
	router.DELETE(baseURL+"/v1/workflows/:id", wrapper.DeleteWorkflow)
	router.GET(baseURL+"/v1/workflows/:id", wrapper.GetWorkflow)
	router.PUT(baseURL+"/v1/workflows/:id", wrapper.UpdateWorkflow)
	router.GET(baseURL+"/v1/workflows/:id/custom_field_selections", wrapper.ListWorkflowCustomFieldSelections)
	router.POST(baseURL+"/v1/workflows/:id/custom_field_selections", wrapper.CreateWorkflowCustomFieldSelection)
	router.GET(baseURL+"/v1/workflows/:workflow_id/workflow_tasks", wrapper.ListWorkflowTasks)
	router.POST(baseURL+"/v1/workflows/:workflow_id/workflow_tasks", wrapper.CreateWorkflowTask)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Lifl/78AAAD//01qzrukbQsA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

