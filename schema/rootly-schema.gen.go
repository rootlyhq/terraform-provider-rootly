// Package rootly provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package rootly

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Bearer_authScopes = "bearer_auth.Scopes"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemCondition.
const (
	ActionItemTriggerParamsIncidentActionItemConditionALL  ActionItemTriggerParamsIncidentActionItemCondition = "ALL"
	ActionItemTriggerParamsIncidentActionItemConditionANY  ActionItemTriggerParamsIncidentActionItemCondition = "ANY"
	ActionItemTriggerParamsIncidentActionItemConditionNONE ActionItemTriggerParamsIncidentActionItemCondition = "NONE"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemConditionGroup.
const (
	ActionItemTriggerParamsIncidentActionItemConditionGroupANY          ActionItemTriggerParamsIncidentActionItemConditionGroup = "ANY"
	ActionItemTriggerParamsIncidentActionItemConditionGroupCONTAINS     ActionItemTriggerParamsIncidentActionItemConditionGroup = "CONTAINS"
	ActionItemTriggerParamsIncidentActionItemConditionGroupCONTAINSALL  ActionItemTriggerParamsIncidentActionItemConditionGroup = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentActionItemConditionGroupCONTAINSNONE ActionItemTriggerParamsIncidentActionItemConditionGroup = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentActionItemConditionGroupIS           ActionItemTriggerParamsIncidentActionItemConditionGroup = "IS"
	ActionItemTriggerParamsIncidentActionItemConditionGroupNONE         ActionItemTriggerParamsIncidentActionItemConditionGroup = "NONE"
	ActionItemTriggerParamsIncidentActionItemConditionGroupSET          ActionItemTriggerParamsIncidentActionItemConditionGroup = "SET"
	ActionItemTriggerParamsIncidentActionItemConditionGroupUNSET        ActionItemTriggerParamsIncidentActionItemConditionGroup = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemConditionKind.
const (
	ActionItemTriggerParamsIncidentActionItemConditionKindANY          ActionItemTriggerParamsIncidentActionItemConditionKind = "ANY"
	ActionItemTriggerParamsIncidentActionItemConditionKindCONTAINS     ActionItemTriggerParamsIncidentActionItemConditionKind = "CONTAINS"
	ActionItemTriggerParamsIncidentActionItemConditionKindCONTAINSALL  ActionItemTriggerParamsIncidentActionItemConditionKind = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentActionItemConditionKindCONTAINSNONE ActionItemTriggerParamsIncidentActionItemConditionKind = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentActionItemConditionKindIS           ActionItemTriggerParamsIncidentActionItemConditionKind = "IS"
	ActionItemTriggerParamsIncidentActionItemConditionKindNONE         ActionItemTriggerParamsIncidentActionItemConditionKind = "NONE"
	ActionItemTriggerParamsIncidentActionItemConditionKindSET          ActionItemTriggerParamsIncidentActionItemConditionKind = "SET"
	ActionItemTriggerParamsIncidentActionItemConditionKindUNSET        ActionItemTriggerParamsIncidentActionItemConditionKind = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemConditionPriority.
const (
	ActionItemTriggerParamsIncidentActionItemConditionPriorityANY          ActionItemTriggerParamsIncidentActionItemConditionPriority = "ANY"
	ActionItemTriggerParamsIncidentActionItemConditionPriorityCONTAINS     ActionItemTriggerParamsIncidentActionItemConditionPriority = "CONTAINS"
	ActionItemTriggerParamsIncidentActionItemConditionPriorityCONTAINSALL  ActionItemTriggerParamsIncidentActionItemConditionPriority = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentActionItemConditionPriorityCONTAINSNONE ActionItemTriggerParamsIncidentActionItemConditionPriority = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentActionItemConditionPriorityIS           ActionItemTriggerParamsIncidentActionItemConditionPriority = "IS"
	ActionItemTriggerParamsIncidentActionItemConditionPriorityNONE         ActionItemTriggerParamsIncidentActionItemConditionPriority = "NONE"
	ActionItemTriggerParamsIncidentActionItemConditionPrioritySET          ActionItemTriggerParamsIncidentActionItemConditionPriority = "SET"
	ActionItemTriggerParamsIncidentActionItemConditionPriorityUNSET        ActionItemTriggerParamsIncidentActionItemConditionPriority = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemConditionStatus.
const (
	ActionItemTriggerParamsIncidentActionItemConditionStatusANY          ActionItemTriggerParamsIncidentActionItemConditionStatus = "ANY"
	ActionItemTriggerParamsIncidentActionItemConditionStatusCONTAINS     ActionItemTriggerParamsIncidentActionItemConditionStatus = "CONTAINS"
	ActionItemTriggerParamsIncidentActionItemConditionStatusCONTAINSALL  ActionItemTriggerParamsIncidentActionItemConditionStatus = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentActionItemConditionStatusCONTAINSNONE ActionItemTriggerParamsIncidentActionItemConditionStatus = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentActionItemConditionStatusIS           ActionItemTriggerParamsIncidentActionItemConditionStatus = "IS"
	ActionItemTriggerParamsIncidentActionItemConditionStatusNONE         ActionItemTriggerParamsIncidentActionItemConditionStatus = "NONE"
	ActionItemTriggerParamsIncidentActionItemConditionStatusSET          ActionItemTriggerParamsIncidentActionItemConditionStatus = "SET"
	ActionItemTriggerParamsIncidentActionItemConditionStatusUNSET        ActionItemTriggerParamsIncidentActionItemConditionStatus = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemKinds.
const (
	ActionItemTriggerParamsIncidentActionItemKindsFollowUp ActionItemTriggerParamsIncidentActionItemKinds = "follow_up"
	ActionItemTriggerParamsIncidentActionItemKindsTask     ActionItemTriggerParamsIncidentActionItemKinds = "task"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemPriorities.
const (
	ActionItemTriggerParamsIncidentActionItemPrioritiesHigh   ActionItemTriggerParamsIncidentActionItemPriorities = "high"
	ActionItemTriggerParamsIncidentActionItemPrioritiesLow    ActionItemTriggerParamsIncidentActionItemPriorities = "low"
	ActionItemTriggerParamsIncidentActionItemPrioritiesMedium ActionItemTriggerParamsIncidentActionItemPriorities = "medium"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemStatuses.
const (
	ActionItemTriggerParamsIncidentActionItemStatusesCancelled  ActionItemTriggerParamsIncidentActionItemStatuses = "cancelled"
	ActionItemTriggerParamsIncidentActionItemStatusesDone       ActionItemTriggerParamsIncidentActionItemStatuses = "done"
	ActionItemTriggerParamsIncidentActionItemStatusesInProgress ActionItemTriggerParamsIncidentActionItemStatuses = "in_progress"
	ActionItemTriggerParamsIncidentActionItemStatusesOpen       ActionItemTriggerParamsIncidentActionItemStatuses = "open"
)

// Defines values for ActionItemTriggerParamsIncidentCondition.
const (
	ActionItemTriggerParamsIncidentConditionALL  ActionItemTriggerParamsIncidentCondition = "ALL"
	ActionItemTriggerParamsIncidentConditionANY  ActionItemTriggerParamsIncidentCondition = "ANY"
	ActionItemTriggerParamsIncidentConditionNONE ActionItemTriggerParamsIncidentCondition = "NONE"
)

// Defines values for ActionItemTriggerParamsIncidentConditionAcknowledgedAt1.
const (
	ActionItemTriggerParamsIncidentConditionAcknowledgedAt1SET   ActionItemTriggerParamsIncidentConditionAcknowledgedAt1 = "SET"
	ActionItemTriggerParamsIncidentConditionAcknowledgedAt1UNSET ActionItemTriggerParamsIncidentConditionAcknowledgedAt1 = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionDetectedAt1.
const (
	ActionItemTriggerParamsIncidentConditionDetectedAt1SET   ActionItemTriggerParamsIncidentConditionDetectedAt1 = "SET"
	ActionItemTriggerParamsIncidentConditionDetectedAt1UNSET ActionItemTriggerParamsIncidentConditionDetectedAt1 = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionEnvironment.
const (
	ActionItemTriggerParamsIncidentConditionEnvironmentANY          ActionItemTriggerParamsIncidentConditionEnvironment = "ANY"
	ActionItemTriggerParamsIncidentConditionEnvironmentCONTAINS     ActionItemTriggerParamsIncidentConditionEnvironment = "CONTAINS"
	ActionItemTriggerParamsIncidentConditionEnvironmentCONTAINSALL  ActionItemTriggerParamsIncidentConditionEnvironment = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentConditionEnvironmentCONTAINSNONE ActionItemTriggerParamsIncidentConditionEnvironment = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentConditionEnvironmentIS           ActionItemTriggerParamsIncidentConditionEnvironment = "IS"
	ActionItemTriggerParamsIncidentConditionEnvironmentNONE         ActionItemTriggerParamsIncidentConditionEnvironment = "NONE"
	ActionItemTriggerParamsIncidentConditionEnvironmentSET          ActionItemTriggerParamsIncidentConditionEnvironment = "SET"
	ActionItemTriggerParamsIncidentConditionEnvironmentUNSET        ActionItemTriggerParamsIncidentConditionEnvironment = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionFunctionality.
const (
	ActionItemTriggerParamsIncidentConditionFunctionalityANY          ActionItemTriggerParamsIncidentConditionFunctionality = "ANY"
	ActionItemTriggerParamsIncidentConditionFunctionalityCONTAINS     ActionItemTriggerParamsIncidentConditionFunctionality = "CONTAINS"
	ActionItemTriggerParamsIncidentConditionFunctionalityCONTAINSALL  ActionItemTriggerParamsIncidentConditionFunctionality = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentConditionFunctionalityCONTAINSNONE ActionItemTriggerParamsIncidentConditionFunctionality = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentConditionFunctionalityIS           ActionItemTriggerParamsIncidentConditionFunctionality = "IS"
	ActionItemTriggerParamsIncidentConditionFunctionalityNONE         ActionItemTriggerParamsIncidentConditionFunctionality = "NONE"
	ActionItemTriggerParamsIncidentConditionFunctionalitySET          ActionItemTriggerParamsIncidentConditionFunctionality = "SET"
	ActionItemTriggerParamsIncidentConditionFunctionalityUNSET        ActionItemTriggerParamsIncidentConditionFunctionality = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionGroup.
const (
	ActionItemTriggerParamsIncidentConditionGroupANY          ActionItemTriggerParamsIncidentConditionGroup = "ANY"
	ActionItemTriggerParamsIncidentConditionGroupCONTAINS     ActionItemTriggerParamsIncidentConditionGroup = "CONTAINS"
	ActionItemTriggerParamsIncidentConditionGroupCONTAINSALL  ActionItemTriggerParamsIncidentConditionGroup = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentConditionGroupCONTAINSNONE ActionItemTriggerParamsIncidentConditionGroup = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentConditionGroupIS           ActionItemTriggerParamsIncidentConditionGroup = "IS"
	ActionItemTriggerParamsIncidentConditionGroupNONE         ActionItemTriggerParamsIncidentConditionGroup = "NONE"
	ActionItemTriggerParamsIncidentConditionGroupSET          ActionItemTriggerParamsIncidentConditionGroup = "SET"
	ActionItemTriggerParamsIncidentConditionGroupUNSET        ActionItemTriggerParamsIncidentConditionGroup = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionIncidentRoles.
const (
	ActionItemTriggerParamsIncidentConditionIncidentRolesANY          ActionItemTriggerParamsIncidentConditionIncidentRoles = "ANY"
	ActionItemTriggerParamsIncidentConditionIncidentRolesCONTAINS     ActionItemTriggerParamsIncidentConditionIncidentRoles = "CONTAINS"
	ActionItemTriggerParamsIncidentConditionIncidentRolesCONTAINSALL  ActionItemTriggerParamsIncidentConditionIncidentRoles = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentConditionIncidentRolesCONTAINSNONE ActionItemTriggerParamsIncidentConditionIncidentRoles = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentConditionIncidentRolesIS           ActionItemTriggerParamsIncidentConditionIncidentRoles = "IS"
	ActionItemTriggerParamsIncidentConditionIncidentRolesNONE         ActionItemTriggerParamsIncidentConditionIncidentRoles = "NONE"
	ActionItemTriggerParamsIncidentConditionIncidentRolesSET          ActionItemTriggerParamsIncidentConditionIncidentRoles = "SET"
	ActionItemTriggerParamsIncidentConditionIncidentRolesUNSET        ActionItemTriggerParamsIncidentConditionIncidentRoles = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionIncidentType.
const (
	ActionItemTriggerParamsIncidentConditionIncidentTypeANY          ActionItemTriggerParamsIncidentConditionIncidentType = "ANY"
	ActionItemTriggerParamsIncidentConditionIncidentTypeCONTAINS     ActionItemTriggerParamsIncidentConditionIncidentType = "CONTAINS"
	ActionItemTriggerParamsIncidentConditionIncidentTypeCONTAINSALL  ActionItemTriggerParamsIncidentConditionIncidentType = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentConditionIncidentTypeCONTAINSNONE ActionItemTriggerParamsIncidentConditionIncidentType = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentConditionIncidentTypeIS           ActionItemTriggerParamsIncidentConditionIncidentType = "IS"
	ActionItemTriggerParamsIncidentConditionIncidentTypeNONE         ActionItemTriggerParamsIncidentConditionIncidentType = "NONE"
	ActionItemTriggerParamsIncidentConditionIncidentTypeSET          ActionItemTriggerParamsIncidentConditionIncidentType = "SET"
	ActionItemTriggerParamsIncidentConditionIncidentTypeUNSET        ActionItemTriggerParamsIncidentConditionIncidentType = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionKind.
const (
	ActionItemTriggerParamsIncidentConditionKindANY          ActionItemTriggerParamsIncidentConditionKind = "ANY"
	ActionItemTriggerParamsIncidentConditionKindCONTAINS     ActionItemTriggerParamsIncidentConditionKind = "CONTAINS"
	ActionItemTriggerParamsIncidentConditionKindCONTAINSALL  ActionItemTriggerParamsIncidentConditionKind = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentConditionKindCONTAINSNONE ActionItemTriggerParamsIncidentConditionKind = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentConditionKindIS           ActionItemTriggerParamsIncidentConditionKind = "IS"
	ActionItemTriggerParamsIncidentConditionKindNONE         ActionItemTriggerParamsIncidentConditionKind = "NONE"
	ActionItemTriggerParamsIncidentConditionKindSET          ActionItemTriggerParamsIncidentConditionKind = "SET"
	ActionItemTriggerParamsIncidentConditionKindUNSET        ActionItemTriggerParamsIncidentConditionKind = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionMitigatedAt1.
const (
	ActionItemTriggerParamsIncidentConditionMitigatedAt1SET   ActionItemTriggerParamsIncidentConditionMitigatedAt1 = "SET"
	ActionItemTriggerParamsIncidentConditionMitigatedAt1UNSET ActionItemTriggerParamsIncidentConditionMitigatedAt1 = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionResolvedAt1.
const (
	ActionItemTriggerParamsIncidentConditionResolvedAt1SET   ActionItemTriggerParamsIncidentConditionResolvedAt1 = "SET"
	ActionItemTriggerParamsIncidentConditionResolvedAt1UNSET ActionItemTriggerParamsIncidentConditionResolvedAt1 = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionService.
const (
	ActionItemTriggerParamsIncidentConditionServiceANY          ActionItemTriggerParamsIncidentConditionService = "ANY"
	ActionItemTriggerParamsIncidentConditionServiceCONTAINS     ActionItemTriggerParamsIncidentConditionService = "CONTAINS"
	ActionItemTriggerParamsIncidentConditionServiceCONTAINSALL  ActionItemTriggerParamsIncidentConditionService = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentConditionServiceCONTAINSNONE ActionItemTriggerParamsIncidentConditionService = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentConditionServiceIS           ActionItemTriggerParamsIncidentConditionService = "IS"
	ActionItemTriggerParamsIncidentConditionServiceNONE         ActionItemTriggerParamsIncidentConditionService = "NONE"
	ActionItemTriggerParamsIncidentConditionServiceSET          ActionItemTriggerParamsIncidentConditionService = "SET"
	ActionItemTriggerParamsIncidentConditionServiceUNSET        ActionItemTriggerParamsIncidentConditionService = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionSeverity.
const (
	ActionItemTriggerParamsIncidentConditionSeverityANY          ActionItemTriggerParamsIncidentConditionSeverity = "ANY"
	ActionItemTriggerParamsIncidentConditionSeverityCONTAINS     ActionItemTriggerParamsIncidentConditionSeverity = "CONTAINS"
	ActionItemTriggerParamsIncidentConditionSeverityCONTAINSALL  ActionItemTriggerParamsIncidentConditionSeverity = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentConditionSeverityCONTAINSNONE ActionItemTriggerParamsIncidentConditionSeverity = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentConditionSeverityIS           ActionItemTriggerParamsIncidentConditionSeverity = "IS"
	ActionItemTriggerParamsIncidentConditionSeverityNONE         ActionItemTriggerParamsIncidentConditionSeverity = "NONE"
	ActionItemTriggerParamsIncidentConditionSeveritySET          ActionItemTriggerParamsIncidentConditionSeverity = "SET"
	ActionItemTriggerParamsIncidentConditionSeverityUNSET        ActionItemTriggerParamsIncidentConditionSeverity = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionStartedAt1.
const (
	ActionItemTriggerParamsIncidentConditionStartedAt1SET   ActionItemTriggerParamsIncidentConditionStartedAt1 = "SET"
	ActionItemTriggerParamsIncidentConditionStartedAt1UNSET ActionItemTriggerParamsIncidentConditionStartedAt1 = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionStatus.
const (
	ActionItemTriggerParamsIncidentConditionStatusANY          ActionItemTriggerParamsIncidentConditionStatus = "ANY"
	ActionItemTriggerParamsIncidentConditionStatusCONTAINS     ActionItemTriggerParamsIncidentConditionStatus = "CONTAINS"
	ActionItemTriggerParamsIncidentConditionStatusCONTAINSALL  ActionItemTriggerParamsIncidentConditionStatus = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentConditionStatusCONTAINSNONE ActionItemTriggerParamsIncidentConditionStatus = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentConditionStatusIS           ActionItemTriggerParamsIncidentConditionStatus = "IS"
	ActionItemTriggerParamsIncidentConditionStatusNONE         ActionItemTriggerParamsIncidentConditionStatus = "NONE"
	ActionItemTriggerParamsIncidentConditionStatusSET          ActionItemTriggerParamsIncidentConditionStatus = "SET"
	ActionItemTriggerParamsIncidentConditionStatusUNSET        ActionItemTriggerParamsIncidentConditionStatus = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionSummary1.
const (
	ActionItemTriggerParamsIncidentConditionSummary1SET   ActionItemTriggerParamsIncidentConditionSummary1 = "SET"
	ActionItemTriggerParamsIncidentConditionSummary1UNSET ActionItemTriggerParamsIncidentConditionSummary1 = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionVisibility.
const (
	ActionItemTriggerParamsIncidentConditionVisibilityANY          ActionItemTriggerParamsIncidentConditionVisibility = "ANY"
	ActionItemTriggerParamsIncidentConditionVisibilityCONTAINS     ActionItemTriggerParamsIncidentConditionVisibility = "CONTAINS"
	ActionItemTriggerParamsIncidentConditionVisibilityCONTAINSALL  ActionItemTriggerParamsIncidentConditionVisibility = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentConditionVisibilityCONTAINSNONE ActionItemTriggerParamsIncidentConditionVisibility = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentConditionVisibilityIS           ActionItemTriggerParamsIncidentConditionVisibility = "IS"
	ActionItemTriggerParamsIncidentConditionVisibilityNONE         ActionItemTriggerParamsIncidentConditionVisibility = "NONE"
	ActionItemTriggerParamsIncidentConditionVisibilitySET          ActionItemTriggerParamsIncidentConditionVisibility = "SET"
	ActionItemTriggerParamsIncidentConditionVisibilityUNSET        ActionItemTriggerParamsIncidentConditionVisibility = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionalInactivity1.
const (
	ActionItemTriggerParamsIncidentConditionalInactivity1IS ActionItemTriggerParamsIncidentConditionalInactivity1 = "IS"
)

// Defines values for ActionItemTriggerParamsIncidentKinds.
const (
	ActionItemTriggerParamsIncidentKindsBackfilled ActionItemTriggerParamsIncidentKinds = "backfilled"
	ActionItemTriggerParamsIncidentKindsExample    ActionItemTriggerParamsIncidentKinds = "example"
	ActionItemTriggerParamsIncidentKindsExampleSub ActionItemTriggerParamsIncidentKinds = "example_sub"
	ActionItemTriggerParamsIncidentKindsNormal     ActionItemTriggerParamsIncidentKinds = "normal"
	ActionItemTriggerParamsIncidentKindsNormalSub  ActionItemTriggerParamsIncidentKinds = "normal_sub"
	ActionItemTriggerParamsIncidentKindsScheduled  ActionItemTriggerParamsIncidentKinds = "scheduled"
	ActionItemTriggerParamsIncidentKindsTest       ActionItemTriggerParamsIncidentKinds = "test"
	ActionItemTriggerParamsIncidentKindsTestSub    ActionItemTriggerParamsIncidentKinds = "test_sub"
)

// Defines values for ActionItemTriggerParamsIncidentStatuses.
const (
	ActionItemTriggerParamsIncidentStatusesAcknowledged ActionItemTriggerParamsIncidentStatuses = "acknowledged"
	ActionItemTriggerParamsIncidentStatusesCancelled    ActionItemTriggerParamsIncidentStatuses = "cancelled"
	ActionItemTriggerParamsIncidentStatusesClosed       ActionItemTriggerParamsIncidentStatuses = "closed"
	ActionItemTriggerParamsIncidentStatusesCompleted    ActionItemTriggerParamsIncidentStatuses = "completed"
	ActionItemTriggerParamsIncidentStatusesDetected     ActionItemTriggerParamsIncidentStatuses = "detected"
	ActionItemTriggerParamsIncidentStatusesInProgress   ActionItemTriggerParamsIncidentStatuses = "in_progress"
	ActionItemTriggerParamsIncidentStatusesInTriage     ActionItemTriggerParamsIncidentStatuses = "in_triage"
	ActionItemTriggerParamsIncidentStatusesMitigated    ActionItemTriggerParamsIncidentStatuses = "mitigated"
	ActionItemTriggerParamsIncidentStatusesResolved     ActionItemTriggerParamsIncidentStatuses = "resolved"
	ActionItemTriggerParamsIncidentStatusesScheduled    ActionItemTriggerParamsIncidentStatuses = "scheduled"
	ActionItemTriggerParamsIncidentStatusesStarted      ActionItemTriggerParamsIncidentStatuses = "started"
)

// Defines values for ActionItemTriggerParamsTriggerType.
const (
	ActionItemTriggerParamsTriggerTypeActionItem ActionItemTriggerParamsTriggerType = "action_item"
)

// Defines values for AddActionItemTaskParamsAttributeToQueryBy.
const (
	AddActionItemTaskParamsAttributeToQueryByJiraIssueId AddActionItemTaskParamsAttributeToQueryBy = "jira_issue_id"
)

// Defines values for AddActionItemTaskParamsPriority.
const (
	AddActionItemTaskParamsPriorityHigh   AddActionItemTaskParamsPriority = "high"
	AddActionItemTaskParamsPriorityLow    AddActionItemTaskParamsPriority = "low"
	AddActionItemTaskParamsPriorityMedium AddActionItemTaskParamsPriority = "medium"
)

// Defines values for AddActionItemTaskParamsStatus.
const (
	AddActionItemTaskParamsStatusCancelled  AddActionItemTaskParamsStatus = "cancelled"
	AddActionItemTaskParamsStatusDone       AddActionItemTaskParamsStatus = "done"
	AddActionItemTaskParamsStatusInProgress AddActionItemTaskParamsStatus = "in_progress"
	AddActionItemTaskParamsStatusOpen       AddActionItemTaskParamsStatus = "open"
)

// Defines values for AddActionItemTaskParamsTaskType.
const (
	AddActionItem AddActionItemTaskParamsTaskType = "add_action_item"
)

// Defines values for AddMicrosoftTeamsTabTaskParamsTaskType.
const (
	AddMicrosoftTeamsTab AddMicrosoftTeamsTabTaskParamsTaskType = "add_microsoft_teams_tab"
)

// Defines values for AddRoleTaskParamsTaskType.
const (
	AddRole AddRoleTaskParamsTaskType = "add_role"
)

// Defines values for AddSlackBookmarkTaskParamsTaskType.
const (
	AddSlackBookmark AddSlackBookmarkTaskParamsTaskType = "add_slack_bookmark"
)

// Defines values for AddSubscribersDataType.
const (
	AddSubscribersDataTypeIncidents AddSubscribersDataType = "incidents"
)

// Defines values for AddTeamTaskParamsTaskType.
const (
	AddTeam AddTeamTaskParamsTaskType = "add_team"
)

// Defines values for AddToTimelineTaskParamsTaskType.
const (
	AddToTimeline AddToTimelineTaskParamsTaskType = "add_to_timeline"
)

// Defines values for AlertSource.
const (
	AlertSourceAlertmanager    AlertSource = "alertmanager"
	AlertSourceAsana           AlertSource = "asana"
	AlertSourceAzure           AlertSource = "azure"
	AlertSourceClickup         AlertSource = "clickup"
	AlertSourceCloudWatch      AlertSource = "cloud_watch"
	AlertSourceDatadog         AlertSource = "datadog"
	AlertSourceEmail           AlertSource = "email"
	AlertSourceGenericWebhook  AlertSource = "generic_webhook"
	AlertSourceGoogleCloud     AlertSource = "google_cloud"
	AlertSourceGrafana         AlertSource = "grafana"
	AlertSourceHoneycomb       AlertSource = "honeycomb"
	AlertSourceJira            AlertSource = "jira"
	AlertSourceLinear          AlertSource = "linear"
	AlertSourceLiveCallRouting AlertSource = "live_call_routing"
	AlertSourceManual          AlertSource = "manual"
	AlertSourceNobl9           AlertSource = "nobl9"
	AlertSourceOpsgenie        AlertSource = "opsgenie"
	AlertSourcePagerduty       AlertSource = "pagerduty"
	AlertSourcePagertree       AlertSource = "pagertree"
	AlertSourceRollbar         AlertSource = "rollbar"
	AlertSourceRootly          AlertSource = "rootly"
	AlertSourceSentry          AlertSource = "sentry"
	AlertSourceServiceNow      AlertSource = "service_now"
	AlertSourceSlack           AlertSource = "slack"
	AlertSourceVictorops       AlertSource = "victorops"
	AlertSourceWeb             AlertSource = "web"
	AlertSourceWorkflow        AlertSource = "workflow"
	AlertSourceZendesk         AlertSource = "zendesk"
)

// Defines values for AlertGroupListDataType.
const (
	AlertGroupListDataTypeAlertGroups AlertGroupListDataType = "alert_groups"
)

// Defines values for AlertGroupResponseDataType.
const (
	AlertGroupResponseDataTypeAlertGroups AlertGroupResponseDataType = "alert_groups"
)

// Defines values for AlertListDataSource.
const (
	AlertListDataSourceAlertmanager    AlertListDataSource = "alertmanager"
	AlertListDataSourceAsana           AlertListDataSource = "asana"
	AlertListDataSourceAzure           AlertListDataSource = "azure"
	AlertListDataSourceClickup         AlertListDataSource = "clickup"
	AlertListDataSourceCloudWatch      AlertListDataSource = "cloud_watch"
	AlertListDataSourceDatadog         AlertListDataSource = "datadog"
	AlertListDataSourceEmail           AlertListDataSource = "email"
	AlertListDataSourceGenericWebhook  AlertListDataSource = "generic_webhook"
	AlertListDataSourceGoogleCloud     AlertListDataSource = "google_cloud"
	AlertListDataSourceGrafana         AlertListDataSource = "grafana"
	AlertListDataSourceHoneycomb       AlertListDataSource = "honeycomb"
	AlertListDataSourceJira            AlertListDataSource = "jira"
	AlertListDataSourceLinear          AlertListDataSource = "linear"
	AlertListDataSourceLiveCallRouting AlertListDataSource = "live_call_routing"
	AlertListDataSourceManual          AlertListDataSource = "manual"
	AlertListDataSourceNobl9           AlertListDataSource = "nobl9"
	AlertListDataSourceOpsgenie        AlertListDataSource = "opsgenie"
	AlertListDataSourcePagerduty       AlertListDataSource = "pagerduty"
	AlertListDataSourcePagertree       AlertListDataSource = "pagertree"
	AlertListDataSourceRollbar         AlertListDataSource = "rollbar"
	AlertListDataSourceRootly          AlertListDataSource = "rootly"
	AlertListDataSourceSentry          AlertListDataSource = "sentry"
	AlertListDataSourceServiceNow      AlertListDataSource = "service_now"
	AlertListDataSourceSlack           AlertListDataSource = "slack"
	AlertListDataSourceVictorops       AlertListDataSource = "victorops"
	AlertListDataSourceWeb             AlertListDataSource = "web"
	AlertListDataSourceWorkflow        AlertListDataSource = "workflow"
	AlertListDataSourceZendesk         AlertListDataSource = "zendesk"
)

// Defines values for AlertListDataType.
const (
	AlertListDataTypeAlerts AlertListDataType = "alerts"
)

// Defines values for AlertResponseDataSource.
const (
	AlertResponseDataSourceAlertmanager    AlertResponseDataSource = "alertmanager"
	AlertResponseDataSourceAsana           AlertResponseDataSource = "asana"
	AlertResponseDataSourceAzure           AlertResponseDataSource = "azure"
	AlertResponseDataSourceClickup         AlertResponseDataSource = "clickup"
	AlertResponseDataSourceCloudWatch      AlertResponseDataSource = "cloud_watch"
	AlertResponseDataSourceDatadog         AlertResponseDataSource = "datadog"
	AlertResponseDataSourceEmail           AlertResponseDataSource = "email"
	AlertResponseDataSourceGenericWebhook  AlertResponseDataSource = "generic_webhook"
	AlertResponseDataSourceGoogleCloud     AlertResponseDataSource = "google_cloud"
	AlertResponseDataSourceGrafana         AlertResponseDataSource = "grafana"
	AlertResponseDataSourceHoneycomb       AlertResponseDataSource = "honeycomb"
	AlertResponseDataSourceJira            AlertResponseDataSource = "jira"
	AlertResponseDataSourceLinear          AlertResponseDataSource = "linear"
	AlertResponseDataSourceLiveCallRouting AlertResponseDataSource = "live_call_routing"
	AlertResponseDataSourceManual          AlertResponseDataSource = "manual"
	AlertResponseDataSourceNobl9           AlertResponseDataSource = "nobl9"
	AlertResponseDataSourceOpsgenie        AlertResponseDataSource = "opsgenie"
	AlertResponseDataSourcePagerduty       AlertResponseDataSource = "pagerduty"
	AlertResponseDataSourcePagertree       AlertResponseDataSource = "pagertree"
	AlertResponseDataSourceRollbar         AlertResponseDataSource = "rollbar"
	AlertResponseDataSourceRootly          AlertResponseDataSource = "rootly"
	AlertResponseDataSourceSentry          AlertResponseDataSource = "sentry"
	AlertResponseDataSourceServiceNow      AlertResponseDataSource = "service_now"
	AlertResponseDataSourceSlack           AlertResponseDataSource = "slack"
	AlertResponseDataSourceVictorops       AlertResponseDataSource = "victorops"
	AlertResponseDataSourceWeb             AlertResponseDataSource = "web"
	AlertResponseDataSourceWorkflow        AlertResponseDataSource = "workflow"
	AlertResponseDataSourceZendesk         AlertResponseDataSource = "zendesk"
)

// Defines values for AlertResponseDataType.
const (
	AlertResponseDataTypeAlerts AlertResponseDataType = "alerts"
)

// Defines values for AlertTriggerParamsAlertCondition.
const (
	AlertTriggerParamsAlertConditionALL  AlertTriggerParamsAlertCondition = "ALL"
	AlertTriggerParamsAlertConditionANY  AlertTriggerParamsAlertCondition = "ANY"
	AlertTriggerParamsAlertConditionNONE AlertTriggerParamsAlertCondition = "NONE"
)

// Defines values for AlertTriggerParamsAlertConditionLabel.
const (
	AlertTriggerParamsAlertConditionLabelANY          AlertTriggerParamsAlertConditionLabel = "ANY"
	AlertTriggerParamsAlertConditionLabelCONTAINS     AlertTriggerParamsAlertConditionLabel = "CONTAINS"
	AlertTriggerParamsAlertConditionLabelCONTAINSALL  AlertTriggerParamsAlertConditionLabel = "CONTAINS_ALL"
	AlertTriggerParamsAlertConditionLabelCONTAINSNONE AlertTriggerParamsAlertConditionLabel = "CONTAINS_NONE"
	AlertTriggerParamsAlertConditionLabelIS           AlertTriggerParamsAlertConditionLabel = "IS"
	AlertTriggerParamsAlertConditionLabelNONE         AlertTriggerParamsAlertConditionLabel = "NONE"
	AlertTriggerParamsAlertConditionLabelSET          AlertTriggerParamsAlertConditionLabel = "SET"
	AlertTriggerParamsAlertConditionLabelUNSET        AlertTriggerParamsAlertConditionLabel = "UNSET"
)

// Defines values for AlertTriggerParamsAlertConditionPayload.
const (
	AlertTriggerParamsAlertConditionPayloadANY          AlertTriggerParamsAlertConditionPayload = "ANY"
	AlertTriggerParamsAlertConditionPayloadCONTAINS     AlertTriggerParamsAlertConditionPayload = "CONTAINS"
	AlertTriggerParamsAlertConditionPayloadCONTAINSALL  AlertTriggerParamsAlertConditionPayload = "CONTAINS_ALL"
	AlertTriggerParamsAlertConditionPayloadCONTAINSNONE AlertTriggerParamsAlertConditionPayload = "CONTAINS_NONE"
	AlertTriggerParamsAlertConditionPayloadIS           AlertTriggerParamsAlertConditionPayload = "IS"
	AlertTriggerParamsAlertConditionPayloadNONE         AlertTriggerParamsAlertConditionPayload = "NONE"
	AlertTriggerParamsAlertConditionPayloadSET          AlertTriggerParamsAlertConditionPayload = "SET"
	AlertTriggerParamsAlertConditionPayloadUNSET        AlertTriggerParamsAlertConditionPayload = "UNSET"
)

// Defines values for AlertTriggerParamsAlertConditionSource.
const (
	AlertTriggerParamsAlertConditionSourceANY          AlertTriggerParamsAlertConditionSource = "ANY"
	AlertTriggerParamsAlertConditionSourceCONTAINS     AlertTriggerParamsAlertConditionSource = "CONTAINS"
	AlertTriggerParamsAlertConditionSourceCONTAINSALL  AlertTriggerParamsAlertConditionSource = "CONTAINS_ALL"
	AlertTriggerParamsAlertConditionSourceCONTAINSNONE AlertTriggerParamsAlertConditionSource = "CONTAINS_NONE"
	AlertTriggerParamsAlertConditionSourceIS           AlertTriggerParamsAlertConditionSource = "IS"
	AlertTriggerParamsAlertConditionSourceNONE         AlertTriggerParamsAlertConditionSource = "NONE"
	AlertTriggerParamsAlertConditionSourceSET          AlertTriggerParamsAlertConditionSource = "SET"
	AlertTriggerParamsAlertConditionSourceUNSET        AlertTriggerParamsAlertConditionSource = "UNSET"
)

// Defines values for AlertTriggerParamsTriggerType.
const (
	AlertTriggerParamsTriggerTypeAlert AlertTriggerParamsTriggerType = "alert"
)

// Defines values for AlertTriggerParamsTriggers.
const (
	AlertTriggerParamsTriggersAlertCreated AlertTriggerParamsTriggers = "alert_created"
)

// Defines values for AlertUrgencyListDataType.
const (
	AlertUrgencyListDataTypeAlertUrgencies AlertUrgencyListDataType = "alert_urgencies"
)

// Defines values for AlertUrgencyResponseDataType.
const (
	AlertUrgencyResponseDataTypeAlertUrgencies AlertUrgencyResponseDataType = "alert_urgencies"
)

// Defines values for AlertsSourceListDataType.
const (
	AlertsSourceListDataTypeAlertSources AlertsSourceListDataType = "alert_sources"
)

// Defines values for AlertsSourceResponseDataType.
const (
	AlertsSourceResponseDataTypeAlertSources AlertsSourceResponseDataType = "alert_sources"
)

// Defines values for ArchiveMicrosoftTeamsChannelsTaskParamsTaskType.
const (
	ArchiveMicrosoftTeamsChannels ArchiveMicrosoftTeamsChannelsTaskParamsTaskType = "archive_microsoft_teams_channels"
)

// Defines values for ArchiveSlackChannelsTaskParamsTaskType.
const (
	ArchiveSlackChannels ArchiveSlackChannelsTaskParamsTaskType = "archive_slack_channels"
)

// Defines values for AssignRoleToUserDataType.
const (
	AssignRoleToUserDataTypeIncidents AssignRoleToUserDataType = "incidents"
)

// Defines values for AttachAlertDataType.
const (
	AttachAlertDataTypeAlerts AttachAlertDataType = "alerts"
)

// Defines values for AttachDatadogDashboardsTaskParamsTaskType.
const (
	AttachDatadogDashboards AttachDatadogDashboardsTaskParamsTaskType = "attach_datadog_dashboards"
)

// Defines values for AuditItemType.
const (
	AuditItemTypeCause                          AuditItemType = "Cause"
	AuditItemTypeCustomField                    AuditItemType = "CustomField"
	AuditItemTypeCustomFieldOption              AuditItemType = "CustomFieldOption"
	AuditItemTypeCustomForm                     AuditItemType = "CustomForm"
	AuditItemTypeDashboard                      AuditItemType = "Dashboard"
	AuditItemTypeEnvironment                    AuditItemType = "Environment"
	AuditItemTypeEscalationPolicy               AuditItemType = "EscalationPolicy"
	AuditItemTypeEscalationPolicyPath           AuditItemType = "EscalationPolicyPath"
	AuditItemTypeExportJob                      AuditItemType = "ExportJob"
	AuditItemTypeFormField                      AuditItemType = "FormField"
	AuditItemTypeFunctionality                  AuditItemType = "Functionality"
	AuditItemTypeGeniusWorkflow                 AuditItemType = "GeniusWorkflow"
	AuditItemTypeGeniusWorkflowGroup            AuditItemType = "GeniusWorkflowGroup"
	AuditItemTypeGeniusWorkflowRun              AuditItemType = "GeniusWorkflowRun"
	AuditItemTypeGroup                          AuditItemType = "Group"
	AuditItemTypeHeartbeat                      AuditItemType = "Heartbeat"
	AuditItemTypeIncident                       AuditItemType = "Incident"
	AuditItemTypeIncidentActionItem             AuditItemType = "IncidentActionItem"
	AuditItemTypeIncidentEvent                  AuditItemType = "IncidentEvent"
	AuditItemTypeIncidentFormFieldSelection     AuditItemType = "IncidentFormFieldSelection"
	AuditItemTypeIncidentFormFieldSelectionUser AuditItemType = "IncidentFormFieldSelectionUser"
	AuditItemTypeIncidentPostMortem             AuditItemType = "IncidentPostMortem"
	AuditItemTypeIncidentRoleAssignment         AuditItemType = "IncidentRoleAssignment"
	AuditItemTypeIncidentRoleTask               AuditItemType = "IncidentRoleTask"
	AuditItemTypeIncidentStatusPageEvent        AuditItemType = "IncidentStatusPageEvent"
	AuditItemTypeIncidentTask                   AuditItemType = "IncidentTask"
	AuditItemTypeIncidentType                   AuditItemType = "IncidentType"
	AuditItemTypeLiveCallRouter                 AuditItemType = "LiveCallRouter"
	AuditItemTypeOnCallRole                     AuditItemType = "OnCallRole"
	AuditItemTypePlaybook                       AuditItemType = "Playbook"
	AuditItemTypePlaybookTask                   AuditItemType = "PlaybookTask"
	AuditItemTypeRole                           AuditItemType = "Role"
	AuditItemTypeSchedule                       AuditItemType = "Schedule"
	AuditItemTypeService                        AuditItemType = "Service"
	AuditItemTypeSeverity                       AuditItemType = "Severity"
	AuditItemTypeStatusPage                     AuditItemType = "StatusPage"
)

// Defines values for AuditsListDataType.
const (
	Audits AuditsListDataType = "audits"
)

// Defines values for AuthorizationAuthorizableType.
const (
	AuthorizationAuthorizableTypeDashboard AuthorizationAuthorizableType = "Dashboard"
)

// Defines values for AuthorizationGranteeType.
const (
	AuthorizationGranteeTypeTeam AuthorizationGranteeType = "Team"
	AuthorizationGranteeTypeUser AuthorizationGranteeType = "User"
)

// Defines values for AuthorizationPermissions.
const (
	AuthorizationPermissionsAuthorize AuthorizationPermissions = "authorize"
	AuthorizationPermissionsDestroy   AuthorizationPermissions = "destroy"
	AuthorizationPermissionsRead      AuthorizationPermissions = "read"
	AuthorizationPermissionsUpdate    AuthorizationPermissions = "update"
)

// Defines values for AuthorizationListDataType.
const (
	AuthorizationListDataTypeAuthorizations AuthorizationListDataType = "authorizations"
)

// Defines values for AuthorizationResponseDataType.
const (
	AuthorizationResponseDataTypeAuthorizations AuthorizationResponseDataType = "authorizations"
)

// Defines values for AutoAssignRoleOpsgenieTaskParamsTaskType.
const (
	AutoAssignRoleOpsgenie AutoAssignRoleOpsgenieTaskParamsTaskType = "auto_assign_role_opsgenie"
)

// Defines values for AutoAssignRolePagerdutyTaskParamsTaskType.
const (
	AutoAssignRolePagerduty AutoAssignRolePagerdutyTaskParamsTaskType = "auto_assign_role_pagerduty"
)

// Defines values for AutoAssignRoleRootlyTaskParamsTaskType.
const (
	AutoAssignRoleRootly AutoAssignRoleRootlyTaskParamsTaskType = "auto_assign_role_rootly"
)

// Defines values for AutoAssignRoleVictorOpsTaskParamsTaskType.
const (
	AutoAssignRoleVictorOps AutoAssignRoleVictorOpsTaskParamsTaskType = "auto_assign_role_victor_ops"
)

// Defines values for CallPeopleTaskParamsTaskType.
const (
	CallPeople CallPeopleTaskParamsTaskType = "call_people"
)

// Defines values for CancelIncidentDataType.
const (
	CancelIncidentDataTypeIncidents CancelIncidentDataType = "incidents"
)

// Defines values for CatalogIcon.
const (
	CatalogIconChartBar          CatalogIcon = "chart-bar"
	CatalogIconCursorArrowRipple CatalogIcon = "cursor-arrow-ripple"
	CatalogIconGlobeAlt          CatalogIcon = "globe-alt"
	CatalogIconLightBulb         CatalogIcon = "light-bulb"
	CatalogIconServerStack       CatalogIcon = "server-stack"
	CatalogIconShapes            CatalogIcon = "shapes"
	CatalogIconUserGroup         CatalogIcon = "user-group"
	CatalogIconUsers             CatalogIcon = "users"
)

// Defines values for CatalogEntityListDataType.
const (
	CatalogEntityListDataTypeCatalogEntities CatalogEntityListDataType = "catalog_entities"
)

// Defines values for CatalogEntityPropertyKey.
const (
	CatalogEntityPropertyKeyCatalogEntity CatalogEntityPropertyKey = "catalog_entity"
	CatalogEntityPropertyKeyText          CatalogEntityPropertyKey = "text"
)

// Defines values for CatalogEntityPropertyListDataType.
const (
	CatalogEntityPropertyListDataTypeCatalogEntityProperties CatalogEntityPropertyListDataType = "catalog_entity_properties"
)

// Defines values for CatalogEntityPropertyResponseDataType.
const (
	CatalogEntityPropertyResponseDataTypeCatalogEntityProperties CatalogEntityPropertyResponseDataType = "catalog_entity_properties"
)

// Defines values for CatalogEntityResponseDataType.
const (
	CatalogEntityResponseDataTypeCatalogEntities CatalogEntityResponseDataType = "catalog_entities"
)

// Defines values for CatalogFieldKind.
const (
	CatalogFieldKindReference CatalogFieldKind = "reference"
	CatalogFieldKindText      CatalogFieldKind = "text"
)

// Defines values for CatalogFieldListDataType.
const (
	CatalogFieldListDataTypeCatalogFields CatalogFieldListDataType = "catalog_fields"
)

// Defines values for CatalogFieldResponseDataType.
const (
	CatalogFieldResponseDataTypeCatalogFields CatalogFieldResponseDataType = "catalog_fields"
)

// Defines values for CatalogListDataType.
const (
	CatalogListDataTypeCatalogs CatalogListDataType = "catalogs"
)

// Defines values for CatalogResponseDataType.
const (
	CatalogResponseDataTypeCatalogs CatalogResponseDataType = "catalogs"
)

// Defines values for CauseListDataType.
const (
	CauseListDataTypeCauses CauseListDataType = "causes"
)

// Defines values for CauseResponseDataType.
const (
	CauseResponseDataTypeCauses CauseResponseDataType = "causes"
)

// Defines values for ChangeSlackChannelPrivacyTaskParamsPrivacy.
const (
	Private ChangeSlackChannelPrivacyTaskParamsPrivacy = "private"
	Public  ChangeSlackChannelPrivacyTaskParamsPrivacy = "public"
)

// Defines values for ChangeSlackChannelPrivacyTaskParamsTaskType.
const (
	ChangeSlackChannelPrivacyTaskParamsTaskTypeRenameSlackChannel ChangeSlackChannelPrivacyTaskParamsTaskType = "rename_slack_channel"
)

// Defines values for CreateAirtableTableRecordTaskParamsTaskType.
const (
	CreateAirtableTableRecord CreateAirtableTableRecordTaskParamsTaskType = "create_airtable_table_record"
)

// Defines values for CreateAsanaSubtaskTaskParamsDependencyDirection.
const (
	CreateAsanaSubtaskTaskParamsDependencyDirectionBlockedBy CreateAsanaSubtaskTaskParamsDependencyDirection = "blocked_by"
	CreateAsanaSubtaskTaskParamsDependencyDirectionBlocking  CreateAsanaSubtaskTaskParamsDependencyDirection = "blocking"
)

// Defines values for CreateAsanaSubtaskTaskParamsTaskType.
const (
	CreateAsanaSubtask CreateAsanaSubtaskTaskParamsTaskType = "create_asana_subtask"
)

// Defines values for CreateAsanaTaskTaskParamsDependencyDirection.
const (
	CreateAsanaTaskTaskParamsDependencyDirectionBlockedBy CreateAsanaTaskTaskParamsDependencyDirection = "blocked_by"
	CreateAsanaTaskTaskParamsDependencyDirectionBlocking  CreateAsanaTaskTaskParamsDependencyDirection = "blocking"
)

// Defines values for CreateAsanaTaskTaskParamsTaskType.
const (
	CreateAsanaTask CreateAsanaTaskTaskParamsTaskType = "create_asana_task"
)

// Defines values for CreateClickupTaskTaskParamsTaskType.
const (
	CreateClickupTask CreateClickupTaskTaskParamsTaskType = "create_clickup_task"
)

// Defines values for CreateConfluencePageTaskParamsTaskType.
const (
	CreateConfluencePage CreateConfluencePageTaskParamsTaskType = "create_confluence_page"
)

// Defines values for CreateDatadogNotebookTaskParamsKind.
const (
	Documentation CreateDatadogNotebookTaskParamsKind = "documentation"
	Investigation CreateDatadogNotebookTaskParamsKind = "investigation"
	Postmortem    CreateDatadogNotebookTaskParamsKind = "postmortem"
	Report        CreateDatadogNotebookTaskParamsKind = "report"
	Runbook       CreateDatadogNotebookTaskParamsKind = "runbook"
)

// Defines values for CreateDatadogNotebookTaskParamsTaskType.
const (
	CreateDatadogNotebook CreateDatadogNotebookTaskParamsTaskType = "create_datadog_notebook"
)

// Defines values for CreateDropboxPaperPageTaskParamsTaskType.
const (
	CreateDropboxPaperPage CreateDropboxPaperPageTaskParamsTaskType = "create_dropbox_paper_page"
)

// Defines values for CreateGithubIssueTaskParamsTaskType.
const (
	CreateGithubIssue CreateGithubIssueTaskParamsTaskType = "create_github_issue"
)

// Defines values for CreateGitlabIssueTaskParamsIssueType.
const (
	CreateGitlabIssueTaskParamsIssueTypeIncident CreateGitlabIssueTaskParamsIssueType = "incident"
	CreateGitlabIssueTaskParamsIssueTypeIssue    CreateGitlabIssueTaskParamsIssueType = "issue"
	CreateGitlabIssueTaskParamsIssueTypeTask     CreateGitlabIssueTaskParamsIssueType = "task"
	CreateGitlabIssueTaskParamsIssueTypeTestCase CreateGitlabIssueTaskParamsIssueType = "test_case"
)

// Defines values for CreateGitlabIssueTaskParamsTaskType.
const (
	CreateGitlabIssue CreateGitlabIssueTaskParamsTaskType = "create_gitlab_issue"
)

// Defines values for CreateGoToMeetingTaskParamsConferenceCallInfo.
const (
	Free  CreateGoToMeetingTaskParamsConferenceCallInfo = "free"
	Hyrid CreateGoToMeetingTaskParamsConferenceCallInfo = "hyrid"
	Ptsn  CreateGoToMeetingTaskParamsConferenceCallInfo = "ptsn"
	Voip  CreateGoToMeetingTaskParamsConferenceCallInfo = "voip"
)

// Defines values for CreateGoToMeetingTaskParamsTaskType.
const (
	CreateGoToMeetingTask CreateGoToMeetingTaskParamsTaskType = "create_go_to_meeting_task"
)

// Defines values for CreateGoogleCalendarEventTaskParamsConferenceSolutionKey.
const (
	CreateGoogleCalendarEventTaskParamsConferenceSolutionKeyAddOn             CreateGoogleCalendarEventTaskParamsConferenceSolutionKey = "addOn"
	CreateGoogleCalendarEventTaskParamsConferenceSolutionKeyEventHangout      CreateGoogleCalendarEventTaskParamsConferenceSolutionKey = "eventHangout"
	CreateGoogleCalendarEventTaskParamsConferenceSolutionKeyEventNamedHangout CreateGoogleCalendarEventTaskParamsConferenceSolutionKey = "eventNamedHangout"
	CreateGoogleCalendarEventTaskParamsConferenceSolutionKeyHangoutsMeet      CreateGoogleCalendarEventTaskParamsConferenceSolutionKey = "hangoutsMeet"
)

// Defines values for CreateGoogleCalendarEventTaskParamsTaskType.
const (
	CreateGoogleCalendarEventTaskParamsTaskTypeCreateGoogleCalendarEvent CreateGoogleCalendarEventTaskParamsTaskType = "create_google_calendar_event"
)

// Defines values for CreateGoogleDocsPageTaskParamsTaskType.
const (
	CreateGoogleDocsPageTaskParamsTaskTypeCreateGoogleDocsPage CreateGoogleDocsPageTaskParamsTaskType = "create_google_docs_page"
)

// Defines values for CreateGoogleDocsPermissionsTaskParamsTaskType.
const (
	CreateGoogleDocsPermissions CreateGoogleDocsPermissionsTaskParamsTaskType = "create_google_docs_permissions"
)

// Defines values for CreateGoogleMeetingTaskParamsConferenceSolutionKey.
const (
	CreateGoogleMeetingTaskParamsConferenceSolutionKeyAddOn             CreateGoogleMeetingTaskParamsConferenceSolutionKey = "addOn"
	CreateGoogleMeetingTaskParamsConferenceSolutionKeyEventHangout      CreateGoogleMeetingTaskParamsConferenceSolutionKey = "eventHangout"
	CreateGoogleMeetingTaskParamsConferenceSolutionKeyEventNamedHangout CreateGoogleMeetingTaskParamsConferenceSolutionKey = "eventNamedHangout"
	CreateGoogleMeetingTaskParamsConferenceSolutionKeyHangoutsMeet      CreateGoogleMeetingTaskParamsConferenceSolutionKey = "hangoutsMeet"
)

// Defines values for CreateGoogleMeetingTaskParamsTaskType.
const (
	CreateGoogleMeeting CreateGoogleMeetingTaskParamsTaskType = "create_google_meeting"
)

// Defines values for CreateIncidentPostmortemTaskParamsTaskType.
const (
	CreateIncidentPostmortem CreateIncidentPostmortemTaskParamsTaskType = "create_incident_postmortem"
)

// Defines values for CreateIncidentTaskParamsTaskType.
const (
	CreateIncident CreateIncidentTaskParamsTaskType = "create_incident"
)

// Defines values for CreateJiraIssueTaskParamsTaskType.
const (
	CreateJiraIssue CreateJiraIssueTaskParamsTaskType = "create_jira_issue"
)

// Defines values for CreateJiraSubtaskTaskParamsTaskType.
const (
	CreateJiraSubtask CreateJiraSubtaskTaskParamsTaskType = "create_jira_subtask"
)

// Defines values for CreateLinearIssueCommentTaskParamsTaskType.
const (
	CreateLinearIssueComment CreateLinearIssueCommentTaskParamsTaskType = "create_linear_issue_comment"
)

// Defines values for CreateLinearIssueTaskParamsTaskType.
const (
	CreateLinearIssue CreateLinearIssueTaskParamsTaskType = "create_linear_issue"
)

// Defines values for CreateLinearSubtaskIssueTaskParamsTaskType.
const (
	CreateLinearSubtaskIssue CreateLinearSubtaskIssueTaskParamsTaskType = "create_linear_subtask_issue"
)

// Defines values for CreateMicrosoftTeamsChannelTaskParamsPrivate.
const (
	CreateMicrosoftTeamsChannelTaskParamsPrivateAuto  CreateMicrosoftTeamsChannelTaskParamsPrivate = "auto"
	CreateMicrosoftTeamsChannelTaskParamsPrivateFalse CreateMicrosoftTeamsChannelTaskParamsPrivate = "false"
	CreateMicrosoftTeamsChannelTaskParamsPrivateTrue  CreateMicrosoftTeamsChannelTaskParamsPrivate = "true"
)

// Defines values for CreateMicrosoftTeamsChannelTaskParamsTaskType.
const (
	CreateMicrosoftTeamsChannel CreateMicrosoftTeamsChannelTaskParamsTaskType = "create_microsoft_teams_channel"
)

// Defines values for CreateMicrosoftTeamsMeetingTaskParamsTaskType.
const (
	CreateMicrosoftTeamsMeeting CreateMicrosoftTeamsMeetingTaskParamsTaskType = "create_microsoft_teams_meeting"
)

// Defines values for CreateMotionTaskTaskParamsTaskType.
const (
	CreateMotionTask CreateMotionTaskTaskParamsTaskType = "create_motion_task"
)

// Defines values for CreateNotionPageTaskParamsTaskType.
const (
	CreateNotionPage CreateNotionPageTaskParamsTaskType = "create_notion_page"
)

// Defines values for CreateOpsgenieAlertTaskParamsPriority.
const (
	CreateOpsgenieAlertTaskParamsPriorityAuto CreateOpsgenieAlertTaskParamsPriority = "auto"
	CreateOpsgenieAlertTaskParamsPriorityP1   CreateOpsgenieAlertTaskParamsPriority = "P1"
	CreateOpsgenieAlertTaskParamsPriorityP2   CreateOpsgenieAlertTaskParamsPriority = "P2"
	CreateOpsgenieAlertTaskParamsPriorityP3   CreateOpsgenieAlertTaskParamsPriority = "P3"
	CreateOpsgenieAlertTaskParamsPriorityP4   CreateOpsgenieAlertTaskParamsPriority = "P4"
	CreateOpsgenieAlertTaskParamsPriorityP5   CreateOpsgenieAlertTaskParamsPriority = "P5"
)

// Defines values for CreateOpsgenieAlertTaskParamsTaskType.
const (
	CreateOpsgenieAlert CreateOpsgenieAlertTaskParamsTaskType = "create_opsgenie_alert"
)

// Defines values for CreateOutlookEventTaskParamsTaskType.
const (
	CreateOutlookEvent CreateOutlookEventTaskParamsTaskType = "create_outlook_event"
)

// Defines values for CreatePagerdutyStatusUpdateTaskParamsTaskType.
const (
	CreatePagerdutyStatusUpdate CreatePagerdutyStatusUpdateTaskParamsTaskType = "create_pagerduty_status_update"
)

// Defines values for CreatePagertreeAlertTaskParamsSeverity.
const (
	CreatePagertreeAlertTaskParamsSeverityAuto CreatePagertreeAlertTaskParamsSeverity = "auto"
	CreatePagertreeAlertTaskParamsSeveritySEV1 CreatePagertreeAlertTaskParamsSeverity = "SEV-1"
	CreatePagertreeAlertTaskParamsSeveritySEV2 CreatePagertreeAlertTaskParamsSeverity = "SEV-2"
	CreatePagertreeAlertTaskParamsSeveritySEV3 CreatePagertreeAlertTaskParamsSeverity = "SEV-3"
	CreatePagertreeAlertTaskParamsSeveritySEV4 CreatePagertreeAlertTaskParamsSeverity = "SEV-4"
)

// Defines values for CreatePagertreeAlertTaskParamsTaskType.
const (
	CreatePagertreeAlert CreatePagertreeAlertTaskParamsTaskType = "create_pagertree_alert"
)

// Defines values for CreatePagertreeAlertTaskParamsUrgency.
const (
	CreatePagertreeAlertTaskParamsUrgencyAuto     CreatePagertreeAlertTaskParamsUrgency = "auto"
	CreatePagertreeAlertTaskParamsUrgencyCritical CreatePagertreeAlertTaskParamsUrgency = "critical"
	CreatePagertreeAlertTaskParamsUrgencyHigh     CreatePagertreeAlertTaskParamsUrgency = "high"
	CreatePagertreeAlertTaskParamsUrgencyLow      CreatePagertreeAlertTaskParamsUrgency = "low"
	CreatePagertreeAlertTaskParamsUrgencyMedium   CreatePagertreeAlertTaskParamsUrgency = "medium"
)

// Defines values for CreateQuipPageTaskParamsTaskType.
const (
	CreateQuipPageTaskParamsTaskTypeCreateGoogleDocsPage CreateQuipPageTaskParamsTaskType = "create_google_docs_page"
)

// Defines values for CreateServiceNowIncidentTaskParamsTaskType.
const (
	CreateServiceNowIncident CreateServiceNowIncidentTaskParamsTaskType = "create_service_now_incident"
)

// Defines values for CreateSharepointPageTaskParamsTaskType.
const (
	CreateSharepointPage CreateSharepointPageTaskParamsTaskType = "create_sharepoint_page"
)

// Defines values for CreateShortcutStoryTaskParamsKind.
const (
	Bug     CreateShortcutStoryTaskParamsKind = "bug"
	Chore   CreateShortcutStoryTaskParamsKind = "chore"
	Feature CreateShortcutStoryTaskParamsKind = "feature"
)

// Defines values for CreateShortcutStoryTaskParamsTaskType.
const (
	CreateShortcutStory CreateShortcutStoryTaskParamsTaskType = "create_shortcut_story"
)

// Defines values for CreateShortcutTaskTaskParamsTaskType.
const (
	CreateShortcutTask CreateShortcutTaskTaskParamsTaskType = "create_shortcut_task"
)

// Defines values for CreateSlackChannelTaskParamsPrivate.
const (
	CreateSlackChannelTaskParamsPrivateAuto  CreateSlackChannelTaskParamsPrivate = "auto"
	CreateSlackChannelTaskParamsPrivateFalse CreateSlackChannelTaskParamsPrivate = "false"
	CreateSlackChannelTaskParamsPrivateTrue  CreateSlackChannelTaskParamsPrivate = "true"
)

// Defines values for CreateSlackChannelTaskParamsTaskType.
const (
	CreateSlackChannel CreateSlackChannelTaskParamsTaskType = "create_slack_channel"
)

// Defines values for CreateTrelloCardTaskParamsTaskType.
const (
	CreateTrelloCard CreateTrelloCardTaskParamsTaskType = "create_trello_card"
)

// Defines values for CreateWebexMeetingTaskParamsTaskType.
const (
	CreateWebexMeeting CreateWebexMeetingTaskParamsTaskType = "create_webex_meeting"
)

// Defines values for CreateZendeskJiraLinkTaskParamsTaskType.
const (
	CreateZendeskJiraLink CreateZendeskJiraLinkTaskParamsTaskType = "create_zendesk_jira_link"
)

// Defines values for CreateZendeskTicketTaskParamsKind.
const (
	CreateZendeskTicketTaskParamsKindIncident CreateZendeskTicketTaskParamsKind = "incident"
	CreateZendeskTicketTaskParamsKindProblem  CreateZendeskTicketTaskParamsKind = "problem"
	CreateZendeskTicketTaskParamsKindQuestion CreateZendeskTicketTaskParamsKind = "question"
	CreateZendeskTicketTaskParamsKindTask     CreateZendeskTicketTaskParamsKind = "task"
)

// Defines values for CreateZendeskTicketTaskParamsTaskType.
const (
	CreateZendeskTicket CreateZendeskTicketTaskParamsTaskType = "create_zendesk_ticket"
)

// Defines values for CreateZoomMeetingTaskParamsAutoRecording.
const (
	CreateZoomMeetingTaskParamsAutoRecordingCloud CreateZoomMeetingTaskParamsAutoRecording = "cloud"
	CreateZoomMeetingTaskParamsAutoRecordingLocal CreateZoomMeetingTaskParamsAutoRecording = "local"
	CreateZoomMeetingTaskParamsAutoRecordingNone  CreateZoomMeetingTaskParamsAutoRecording = "none"
)

// Defines values for CreateZoomMeetingTaskParamsTaskType.
const (
	CreateZoomMeeting CreateZoomMeetingTaskParamsTaskType = "create_zoom_meeting"
)

// Defines values for CustomFieldRequired.
const (
	CustomFieldRequiredIncidentForm                CustomFieldRequired = "incident_form"
	CustomFieldRequiredIncidentMitigationForm      CustomFieldRequired = "incident_mitigation_form"
	CustomFieldRequiredIncidentMitigationSlackForm CustomFieldRequired = "incident_mitigation_slack_form"
	CustomFieldRequiredIncidentPostMortemForm      CustomFieldRequired = "incident_post_mortem_form"
	CustomFieldRequiredIncidentResolutionForm      CustomFieldRequired = "incident_resolution_form"
	CustomFieldRequiredIncidentResolutionSlackForm CustomFieldRequired = "incident_resolution_slack_form"
	CustomFieldRequiredIncidentSlackForm           CustomFieldRequired = "incident_slack_form"
)

// Defines values for CustomFieldShown.
const (
	CustomFieldShownIncidentForm                CustomFieldShown = "incident_form"
	CustomFieldShownIncidentMitigationForm      CustomFieldShown = "incident_mitigation_form"
	CustomFieldShownIncidentMitigationSlackForm CustomFieldShown = "incident_mitigation_slack_form"
	CustomFieldShownIncidentPostMortem          CustomFieldShown = "incident_post_mortem"
	CustomFieldShownIncidentPostMortemForm      CustomFieldShown = "incident_post_mortem_form"
	CustomFieldShownIncidentResolutionForm      CustomFieldShown = "incident_resolution_form"
	CustomFieldShownIncidentResolutionSlackForm CustomFieldShown = "incident_resolution_slack_form"
	CustomFieldShownIncidentSlackForm           CustomFieldShown = "incident_slack_form"
)

// Defines values for CustomFieldListDataType.
const (
	CustomFieldListDataTypeCustomFields CustomFieldListDataType = "custom_fields"
)

// Defines values for CustomFieldOptionListDataType.
const (
	CustomFieldOptionListDataTypeCustomFieldOptions CustomFieldOptionListDataType = "custom_field_options"
)

// Defines values for CustomFieldOptionResponseDataType.
const (
	CustomFieldOptionResponseDataTypeCustomFieldOptions CustomFieldOptionResponseDataType = "custom_field_options"
)

// Defines values for CustomFieldResponseDataType.
const (
	CustomFieldResponseDataTypeCustomFields CustomFieldResponseDataType = "custom_fields"
)

// Defines values for CustomFormListDataType.
const (
	CustomFormListDataTypeCustomForms CustomFormListDataType = "custom_forms"
)

// Defines values for CustomFormResponseDataType.
const (
	CustomFormResponseDataTypeCustomForms CustomFormResponseDataType = "custom_forms"
)

// Defines values for DashboardColor.
const (
	DashboardColorHashD7F5E1 DashboardColor = "#D7F5E1"
	DashboardColorHashE9E2FF DashboardColor = "#E9E2FF"
	DashboardColorHashFAE6E8 DashboardColor = "#FAE6E8"
	DashboardColorHashFAEEE6 DashboardColor = "#FAEEE6"
	DashboardColorHashFCF2CF DashboardColor = "#FCF2CF"
)

// Defines values for DashboardOwner.
const (
	DashboardOwnerTeam DashboardOwner = "team"
	DashboardOwnerUser DashboardOwner = "user"
)

// Defines values for DashboardListDataType.
const (
	DashboardListDataTypeDashboards DashboardListDataType = "dashboards"
)

// Defines values for DashboardResponseDataType.
const (
	DashboardResponseDataTypeDashboards DashboardResponseDataType = "dashboards"
)

// Defines values for EnvironmentListDataType.
const (
	EnvironmentListDataTypeEnvironments EnvironmentListDataType = "environments"
)

// Defines values for EnvironmentResponseDataType.
const (
	EnvironmentResponseDataTypeEnvironments EnvironmentResponseDataType = "environments"
)

// Defines values for EscalationLevelNotificationTargetParamsType.
const (
	EscalationLevelNotificationTargetParamsTypeSchedule     EscalationLevelNotificationTargetParamsType = "schedule"
	EscalationLevelNotificationTargetParamsTypeSlackChannel EscalationLevelNotificationTargetParamsType = "slack_channel"
	EscalationLevelNotificationTargetParamsTypeUser         EscalationLevelNotificationTargetParamsType = "user"
)

// Defines values for EscalationLevelResponseDataType.
const (
	EscalationLevelResponseDataTypeEscalationLevels EscalationLevelResponseDataType = "escalation_levels"
)

// Defines values for EscalationPathRulesOperator.
const (
	EscalationPathRulesOperatorContains       EscalationPathRulesOperator = "contains"
	EscalationPathRulesOperatorDoesNotContain EscalationPathRulesOperator = "does_not_contain"
	EscalationPathRulesOperatorIs             EscalationPathRulesOperator = "is"
	EscalationPathRulesOperatorIsNot          EscalationPathRulesOperator = "is_not"
)

// Defines values for EscalationPathRulesRuleType.
const (
	EscalationPathRulesRuleTypeAlertUrgency EscalationPathRulesRuleType = "alert_urgency"
	EscalationPathRulesRuleTypeJsonPath     EscalationPathRulesRuleType = "json_path"
	EscalationPathRulesRuleTypeWorkingHour  EscalationPathRulesRuleType = "working_hour"
)

// Defines values for EscalationPathResponseDataType.
const (
	EscalationPathResponseDataTypeEscalationPaths EscalationPathResponseDataType = "escalation_paths"
)

// Defines values for EscalationPolicyListDataType.
const (
	EscalationPolicyListDataTypeEscalationPolicies EscalationPolicyListDataType = "escalation_policies"
)

// Defines values for EscalationPolicyResponseDataType.
const (
	EscalationPolicyResponseDataTypeEscalationPolicies EscalationPolicyResponseDataType = "escalation_policies"
)

// Defines values for FormFieldInputKind.
const (
	FormFieldInputKindCheckbox    FormFieldInputKind = "checkbox"
	FormFieldInputKindDate        FormFieldInputKind = "date"
	FormFieldInputKindDatetime    FormFieldInputKind = "datetime"
	FormFieldInputKindMultiSelect FormFieldInputKind = "multi_select"
	FormFieldInputKindNumber      FormFieldInputKind = "number"
	FormFieldInputKindRichText    FormFieldInputKind = "rich_text"
	FormFieldInputKindSelect      FormFieldInputKind = "select"
	FormFieldInputKindTags        FormFieldInputKind = "tags"
	FormFieldInputKindText        FormFieldInputKind = "text"
	FormFieldInputKindTextarea    FormFieldInputKind = "textarea"
)

// Defines values for FormFieldKind.
const (
	FormFieldKindAcknowledgedAt              FormFieldKind = "acknowledged_at"
	FormFieldKindAttachAlerts                FormFieldKind = "attach_alerts"
	FormFieldKindCauses                      FormFieldKind = "causes"
	FormFieldKindCustom                      FormFieldKind = "custom"
	FormFieldKindDetectedAt                  FormFieldKind = "detected_at"
	FormFieldKindEnvironments                FormFieldKind = "environments"
	FormFieldKindFunctionalities             FormFieldKind = "functionalities"
	FormFieldKindInTriageAt                  FormFieldKind = "in_triage_at"
	FormFieldKindLabels                      FormFieldKind = "labels"
	FormFieldKindManualStartingDatetimeField FormFieldKind = "manual_starting_datetime_field"
	FormFieldKindMarkAsBackfilled            FormFieldKind = "mark_as_backfilled"
	FormFieldKindMarkAsInTriage              FormFieldKind = "mark_as_in_triage"
	FormFieldKindMarkAsTest                  FormFieldKind = "mark_as_test"
	FormFieldKindMitigatedAt                 FormFieldKind = "mitigated_at"
	FormFieldKindMitigationMessage           FormFieldKind = "mitigation_message"
	FormFieldKindNotifyEmails                FormFieldKind = "notify_emails"
	FormFieldKindResolutionMessage           FormFieldKind = "resolution_message"
	FormFieldKindResolvedAt                  FormFieldKind = "resolved_at"
	FormFieldKindServices                    FormFieldKind = "services"
	FormFieldKindSeverity                    FormFieldKind = "severity"
	FormFieldKindShowOngoingIncidents        FormFieldKind = "show_ongoing_incidents"
	FormFieldKindStartedAt                   FormFieldKind = "started_at"
	FormFieldKindSummary                     FormFieldKind = "summary"
	FormFieldKindTeams                       FormFieldKind = "teams"
	FormFieldKindTitle                       FormFieldKind = "title"
	FormFieldKindTriggerManualWorkflows      FormFieldKind = "trigger_manual_workflows"
	FormFieldKindTypes                       FormFieldKind = "types"
	FormFieldKindVisibility                  FormFieldKind = "visibility"
)

// Defines values for FormFieldValueKind.
const (
	FormFieldValueKindCatalogEntity FormFieldValueKind = "catalog_entity"
	FormFieldValueKindFunctionality FormFieldValueKind = "functionality"
	FormFieldValueKindGroup         FormFieldValueKind = "group"
	FormFieldValueKindInherit       FormFieldValueKind = "inherit"
	FormFieldValueKindService       FormFieldValueKind = "service"
	FormFieldValueKindUser          FormFieldValueKind = "user"
)

// Defines values for FormFieldListDataType.
const (
	FormFieldListDataTypeFormFields FormFieldListDataType = "form_fields"
)

// Defines values for FormFieldOptionListDataType.
const (
	FormFieldOptionListDataTypeFormFieldOptions FormFieldOptionListDataType = "form_field_options"
)

// Defines values for FormFieldOptionResponseDataType.
const (
	FormFieldOptionResponseDataTypeFormFieldOptions FormFieldOptionResponseDataType = "form_field_options"
)

// Defines values for FormFieldPlacementPlacementOperator.
const (
	FormFieldPlacementPlacementOperatorAnd FormFieldPlacementPlacementOperator = "and"
	FormFieldPlacementPlacementOperatorOr  FormFieldPlacementPlacementOperator = "or"
)

// Defines values for FormFieldPlacementRequiredOperator.
const (
	FormFieldPlacementRequiredOperatorAnd FormFieldPlacementRequiredOperator = "and"
	FormFieldPlacementRequiredOperatorOr  FormFieldPlacementRequiredOperator = "or"
)

// Defines values for FormFieldPlacementConditionComparison.
const (
	FormFieldPlacementConditionComparisonEqual    FormFieldPlacementConditionComparison = "equal"
	FormFieldPlacementConditionComparisonIsNotSet FormFieldPlacementConditionComparison = "is_not_set"
	FormFieldPlacementConditionComparisonIsSet    FormFieldPlacementConditionComparison = "is_set"
)

// Defines values for FormFieldPlacementConditionConditioned.
const (
	FormFieldPlacementConditionConditionedPlacement FormFieldPlacementConditionConditioned = "placement"
	FormFieldPlacementConditionConditionedRequired  FormFieldPlacementConditionConditioned = "required"
)

// Defines values for FormFieldPlacementConditionListDataType.
const (
	FormFieldPlacementConditionListDataTypeFormFieldPlacementConditions FormFieldPlacementConditionListDataType = "form_field_placement_conditions"
)

// Defines values for FormFieldPlacementConditionResponseDataType.
const (
	FormFieldPlacementConditionResponseDataTypeFormFieldPlacementConditions FormFieldPlacementConditionResponseDataType = "form_field_placement_conditions"
)

// Defines values for FormFieldPlacementListDataType.
const (
	FormFieldPlacementListDataTypeFormFieldPlacements FormFieldPlacementListDataType = "form_field_placements"
)

// Defines values for FormFieldPlacementResponseDataType.
const (
	FormFieldPlacementResponseDataTypeFormFieldPlacements FormFieldPlacementResponseDataType = "form_field_placements"
)

// Defines values for FormFieldPositionForm.
const (
	FormFieldPositionFormIncidentPostMortem               FormFieldPositionForm = "incident_post_mortem"
	FormFieldPositionFormSlackIncidentCancellationForm    FormFieldPositionForm = "slack_incident_cancellation_form"
	FormFieldPositionFormSlackIncidentMitigationForm      FormFieldPositionForm = "slack_incident_mitigation_form"
	FormFieldPositionFormSlackIncidentResolutionForm      FormFieldPositionForm = "slack_incident_resolution_form"
	FormFieldPositionFormSlackNewIncidentForm             FormFieldPositionForm = "slack_new_incident_form"
	FormFieldPositionFormSlackScheduledIncidentForm       FormFieldPositionForm = "slack_scheduled_incident_form"
	FormFieldPositionFormSlackUpdateIncidentForm          FormFieldPositionForm = "slack_update_incident_form"
	FormFieldPositionFormSlackUpdateIncidentStatusForm    FormFieldPositionForm = "slack_update_incident_status_form"
	FormFieldPositionFormSlackUpdateScheduledIncidentForm FormFieldPositionForm = "slack_update_scheduled_incident_form"
	FormFieldPositionFormWebIncidentCancellationForm      FormFieldPositionForm = "web_incident_cancellation_form"
	FormFieldPositionFormWebIncidentMitigationForm        FormFieldPositionForm = "web_incident_mitigation_form"
	FormFieldPositionFormWebIncidentPostMortemForm        FormFieldPositionForm = "web_incident_post_mortem_form"
	FormFieldPositionFormWebIncidentResolutionForm        FormFieldPositionForm = "web_incident_resolution_form"
	FormFieldPositionFormWebNewIncidentForm               FormFieldPositionForm = "web_new_incident_form"
	FormFieldPositionFormWebScheduledIncidentForm         FormFieldPositionForm = "web_scheduled_incident_form"
	FormFieldPositionFormWebUpdateIncidentForm            FormFieldPositionForm = "web_update_incident_form"
	FormFieldPositionFormWebUpdateScheduledIncidentForm   FormFieldPositionForm = "web_update_scheduled_incident_form"
)

// Defines values for FormFieldPositionListDataType.
const (
	FormFieldPositionListDataTypeFormFieldPositions FormFieldPositionListDataType = "form_field_positions"
)

// Defines values for FormFieldPositionResponseDataType.
const (
	FormFieldPositionResponseDataTypeFormFieldPositions FormFieldPositionResponseDataType = "form_field_positions"
)

// Defines values for FormFieldResponseDataType.
const (
	FormFieldResponseDataTypeFormFields FormFieldResponseDataType = "form_fields"
)

// Defines values for FormSetConditionComparison.
const (
	FormSetConditionComparisonEqual FormSetConditionComparison = "equal"
)

// Defines values for FormSetConditionListDataType.
const (
	FormSetConditionListDataTypeFormSetConditions FormSetConditionListDataType = "form_set_conditions"
)

// Defines values for FormSetConditionResponseDataType.
const (
	FormSetConditionResponseDataTypeFormSetConditions FormSetConditionResponseDataType = "form_set_conditions"
)

// Defines values for FormSetListDataType.
const (
	FormSetListDataTypeFormSets FormSetListDataType = "form_sets"
)

// Defines values for FormSetResponseDataType.
const (
	FormSetResponseDataTypeFormSets FormSetResponseDataType = "form_sets"
)

// Defines values for FunctionalityListDataType.
const (
	FunctionalityListDataTypeFunctionalities FunctionalityListDataType = "functionalities"
)

// Defines values for FunctionalityResponseDataType.
const (
	FunctionalityResponseDataTypeFunctionalities FunctionalityResponseDataType = "functionalities"
)

// Defines values for GetAlertsTaskParamsTaskType.
const (
	GetAlerts GetAlertsTaskParamsTaskType = "get_alerts"
)

// Defines values for GetGithubCommitsTaskParamsTaskType.
const (
	GetGithubCommits GetGithubCommitsTaskParamsTaskType = "get_github_commits"
)

// Defines values for GetGitlabCommitsTaskParamsTaskType.
const (
	GetGitlabCommits GetGitlabCommitsTaskParamsTaskType = "get_gitlab_commits"
)

// Defines values for GetPulsesTaskParamsTaskType.
const (
	GetPulses GetPulsesTaskParamsTaskType = "get_pulses"
)

// Defines values for HeartbeatIntervalUnit.
const (
	HeartbeatIntervalUnitHours   HeartbeatIntervalUnit = "hours"
	HeartbeatIntervalUnitMinutes HeartbeatIntervalUnit = "minutes"
	HeartbeatIntervalUnitSeconds HeartbeatIntervalUnit = "seconds"
)

// Defines values for HeartbeatNotificationTargetType.
const (
	HeartbeatNotificationTargetTypeEscalationPolicy HeartbeatNotificationTargetType = "EscalationPolicy"
	HeartbeatNotificationTargetTypeGroup            HeartbeatNotificationTargetType = "Group"
	HeartbeatNotificationTargetTypeService          HeartbeatNotificationTargetType = "Service"
	HeartbeatNotificationTargetTypeUser             HeartbeatNotificationTargetType = "User"
)

// Defines values for HeartbeatStatus.
const (
	HeartbeatStatusActive  HeartbeatStatus = "active"
	HeartbeatStatusExpired HeartbeatStatus = "expired"
	HeartbeatStatusWaiting HeartbeatStatus = "waiting"
)

// Defines values for HeartbeatListDataType.
const (
	HeartbeatListDataTypeHeartbeats HeartbeatListDataType = "heartbeats"
)

// Defines values for HeartbeatResponseDataType.
const (
	HeartbeatResponseDataTypeHeartbeats HeartbeatResponseDataType = "heartbeats"
)

// Defines values for HttpClientTaskParamsMethod.
const (
	DELETE  HttpClientTaskParamsMethod = "DELETE"
	GET     HttpClientTaskParamsMethod = "GET"
	OPTIONS HttpClientTaskParamsMethod = "OPTIONS"
	PATCH   HttpClientTaskParamsMethod = "PATCH"
	POST    HttpClientTaskParamsMethod = "POST"
	PUT     HttpClientTaskParamsMethod = "PUT"
)

// Defines values for HttpClientTaskParamsTaskType.
const (
	HttpClient HttpClientTaskParamsTaskType = "http_client"
)

// Defines values for InTriageIncidentDataType.
const (
	InTriageIncidentDataTypeIncidents InTriageIncidentDataType = "incidents"
)

// Defines values for IncidentRetrospectiveProgressStatus.
const (
	IncidentRetrospectiveProgressStatusActive     IncidentRetrospectiveProgressStatus = "active"
	IncidentRetrospectiveProgressStatusCompleted  IncidentRetrospectiveProgressStatus = "completed"
	IncidentRetrospectiveProgressStatusNotStarted IncidentRetrospectiveProgressStatus = "not_started"
	IncidentRetrospectiveProgressStatusSkipped    IncidentRetrospectiveProgressStatus = "skipped"
)

// Defines values for IncidentActionItemKind.
const (
	IncidentActionItemKindFollowUp IncidentActionItemKind = "follow_up"
	IncidentActionItemKindTask     IncidentActionItemKind = "task"
)

// Defines values for IncidentActionItemPriority.
const (
	IncidentActionItemPriorityHigh   IncidentActionItemPriority = "high"
	IncidentActionItemPriorityLow    IncidentActionItemPriority = "low"
	IncidentActionItemPriorityMedium IncidentActionItemPriority = "medium"
)

// Defines values for IncidentActionItemStatus.
const (
	IncidentActionItemStatusCancelled  IncidentActionItemStatus = "cancelled"
	IncidentActionItemStatusDone       IncidentActionItemStatus = "done"
	IncidentActionItemStatusInProgress IncidentActionItemStatus = "in_progress"
	IncidentActionItemStatusOpen       IncidentActionItemStatus = "open"
)

// Defines values for IncidentActionItemListDataType.
const (
	IncidentActionItemListDataTypeIncidentActionItems IncidentActionItemListDataType = "incident_action_items"
)

// Defines values for IncidentActionItemResponseDataType.
const (
	IncidentActionItemResponseDataTypeIncidentActionItems IncidentActionItemResponseDataType = "incident_action_items"
)

// Defines values for IncidentCustomFieldSelectionListDataType.
const (
	IncidentCustomFieldSelectionListDataTypeIncidentCustomFieldSelections IncidentCustomFieldSelectionListDataType = "incident_custom_field_selections"
)

// Defines values for IncidentCustomFieldSelectionResponseDataType.
const (
	IncidentCustomFieldSelectionResponseDataTypeIncidentCustomFieldSelections IncidentCustomFieldSelectionResponseDataType = "incident_custom_field_selections"
)

// Defines values for IncidentEventVisibility.
const (
	IncidentEventVisibilityExternal IncidentEventVisibility = "external"
	IncidentEventVisibilityInternal IncidentEventVisibility = "internal"
)

// Defines values for IncidentEventFunctionalityStatus.
const (
	IncidentEventFunctionalityStatusMajorOutage   IncidentEventFunctionalityStatus = "major_outage"
	IncidentEventFunctionalityStatusOperational   IncidentEventFunctionalityStatus = "operational"
	IncidentEventFunctionalityStatusPartialOutage IncidentEventFunctionalityStatus = "partial_outage"
)

// Defines values for IncidentEventFunctionalityListDataType.
const (
	IncidentEventFunctionalityListDataTypeIncidentEventFunctionalities IncidentEventFunctionalityListDataType = "incident_event_functionalities"
)

// Defines values for IncidentEventFunctionalityResponseDataType.
const (
	IncidentEventFunctionalityResponseDataTypeIncidentEventFunctionalities IncidentEventFunctionalityResponseDataType = "incident_event_functionalities"
)

// Defines values for IncidentEventListDataType.
const (
	IncidentEventListDataTypeIncidentEvents IncidentEventListDataType = "incident_events"
)

// Defines values for IncidentEventResponseDataType.
const (
	IncidentEventResponseDataTypeIncidentEvents IncidentEventResponseDataType = "incident_events"
)

// Defines values for IncidentEventServiceStatus.
const (
	IncidentEventServiceStatusMajorOutage   IncidentEventServiceStatus = "major_outage"
	IncidentEventServiceStatusOperational   IncidentEventServiceStatus = "operational"
	IncidentEventServiceStatusPartialOutage IncidentEventServiceStatus = "partial_outage"
)

// Defines values for IncidentEventServiceListDataType.
const (
	IncidentEventServiceListDataTypeIncidentEventServices IncidentEventServiceListDataType = "incident_event_services"
)

// Defines values for IncidentEventServiceResponseDataType.
const (
	IncidentEventServiceResponseDataTypeIncidentEventServices IncidentEventServiceResponseDataType = "incident_event_services"
)

// Defines values for IncidentFeedbackRating.
const (
	IncidentFeedbackRatingN0 IncidentFeedbackRating = 0
	IncidentFeedbackRatingN1 IncidentFeedbackRating = 1
	IncidentFeedbackRatingN2 IncidentFeedbackRating = 2
	IncidentFeedbackRatingN3 IncidentFeedbackRating = 3
	IncidentFeedbackRatingN4 IncidentFeedbackRating = 4
)

// Defines values for IncidentFeedbackListDataType.
const (
	IncidentFeedbackListDataTypeIncidentFeedbacks IncidentFeedbackListDataType = "incident_feedbacks"
)

// Defines values for IncidentFeedbackResponseDataType.
const (
	IncidentFeedbackResponseDataTypeIncidentFeedbacks IncidentFeedbackResponseDataType = "incident_feedbacks"
)

// Defines values for IncidentFormFieldSelectionListDataType.
const (
	IncidentFormFieldSelectionListDataTypeIncidentFormFieldSelections IncidentFormFieldSelectionListDataType = "incident_form_field_selections"
)

// Defines values for IncidentFormFieldSelectionResponseDataType.
const (
	IncidentFormFieldSelectionResponseDataTypeIncidentFormFieldSelections IncidentFormFieldSelectionResponseDataType = "incident_form_field_selections"
)

// Defines values for IncidentListDataType.
const (
	IncidentListDataTypeIncidents IncidentListDataType = "incidents"
)

// Defines values for IncidentPermissionSetPrivateIncidentPermissions.
const (
	IncidentPermissionSetPrivateIncidentPermissionsCreate IncidentPermissionSetPrivateIncidentPermissions = "create"
	IncidentPermissionSetPrivateIncidentPermissionsDelete IncidentPermissionSetPrivateIncidentPermissions = "delete"
	IncidentPermissionSetPrivateIncidentPermissionsRead   IncidentPermissionSetPrivateIncidentPermissions = "read"
	IncidentPermissionSetPrivateIncidentPermissionsUpdate IncidentPermissionSetPrivateIncidentPermissions = "update"
)

// Defines values for IncidentPermissionSetPublicIncidentPermissions.
const (
	IncidentPermissionSetPublicIncidentPermissionsCreate IncidentPermissionSetPublicIncidentPermissions = "create"
	IncidentPermissionSetPublicIncidentPermissionsDelete IncidentPermissionSetPublicIncidentPermissions = "delete"
	IncidentPermissionSetPublicIncidentPermissionsRead   IncidentPermissionSetPublicIncidentPermissions = "read"
	IncidentPermissionSetPublicIncidentPermissionsUpdate IncidentPermissionSetPublicIncidentPermissions = "update"
)

// Defines values for IncidentPermissionSetBooleanKind.
const (
	IncidentPermissionSetBooleanKindAssignIncidentRoles IncidentPermissionSetBooleanKind = "assign_incident_roles"
	IncidentPermissionSetBooleanKindInviteSubscribers   IncidentPermissionSetBooleanKind = "invite_subscribers"
	IncidentPermissionSetBooleanKindModifyCustomFields  IncidentPermissionSetBooleanKind = "modify_custom_fields"
	IncidentPermissionSetBooleanKindPublishToStatusPage IncidentPermissionSetBooleanKind = "publish_to_status_page"
	IncidentPermissionSetBooleanKindTriggerWorkflows    IncidentPermissionSetBooleanKind = "trigger_workflows"
	IncidentPermissionSetBooleanKindUpdateSummary       IncidentPermissionSetBooleanKind = "update_summary"
	IncidentPermissionSetBooleanKindUpdateTimeline      IncidentPermissionSetBooleanKind = "update_timeline"
)

// Defines values for IncidentPermissionSetBooleanListDataType.
const (
	IncidentPermissionSetBooleanListDataTypeIncidentPermissionSetBooleans IncidentPermissionSetBooleanListDataType = "incident_permission_set_booleans"
)

// Defines values for IncidentPermissionSetBooleanResponseDataType.
const (
	IncidentPermissionSetBooleanResponseDataTypeIncidentPermissionSetBooleans IncidentPermissionSetBooleanResponseDataType = "incident_permission_set_booleans"
)

// Defines values for IncidentPermissionSetListDataType.
const (
	IncidentPermissionSetListDataTypeIncidentPermissionSets IncidentPermissionSetListDataType = "incident_permission_sets"
)

// Defines values for IncidentPermissionSetResourceKind.
const (
	IncidentPermissionSetResourceKindIncidentTypes IncidentPermissionSetResourceKind = "incident_types"
	IncidentPermissionSetResourceKindSeverities    IncidentPermissionSetResourceKind = "severities"
	IncidentPermissionSetResourceKindStatuses      IncidentPermissionSetResourceKind = "statuses"
	IncidentPermissionSetResourceKindSubStatuses   IncidentPermissionSetResourceKind = "sub_statuses"
)

// Defines values for IncidentPermissionSetResourceListDataType.
const (
	IncidentPermissionSetResourceListDataTypeIncidentPermissionSetResources IncidentPermissionSetResourceListDataType = "incident_permission_set_resources"
)

// Defines values for IncidentPermissionSetResourceResponseDataType.
const (
	IncidentPermissionSetResourceResponseDataTypeIncidentPermissionSetResources IncidentPermissionSetResourceResponseDataType = "incident_permission_set_resources"
)

// Defines values for IncidentPermissionSetResponseDataType.
const (
	IncidentPermissionSetResponseDataTypeIncidentPermissionSets IncidentPermissionSetResponseDataType = "incident_permission_sets"
)

// Defines values for IncidentPostMortemShowTimelineOrder.
const (
	Asc  IncidentPostMortemShowTimelineOrder = "asc"
	Desc IncidentPostMortemShowTimelineOrder = "desc"
)

// Defines values for IncidentPostMortemStatus.
const (
	IncidentPostMortemStatusDraft     IncidentPostMortemStatus = "draft"
	IncidentPostMortemStatusPublished IncidentPostMortemStatus = "published"
)

// Defines values for IncidentPostMortemListDataType.
const (
	IncidentPostMortemListDataTypeIncidentPostMortems IncidentPostMortemListDataType = "incident_post_mortems"
)

// Defines values for IncidentPostMortemResponseDataType.
const (
	IncidentPostMortemResponseDataTypeIncidentPostMortems IncidentPostMortemResponseDataType = "incident_post_mortems"
)

// Defines values for IncidentResponseDataType.
const (
	IncidentResponseDataTypeIncidents IncidentResponseDataType = "incidents"
)

// Defines values for IncidentRetrospectiveStepStatus.
const (
	IncidentRetrospectiveStepStatusCompleted  IncidentRetrospectiveStepStatus = "completed"
	IncidentRetrospectiveStepStatusInProgress IncidentRetrospectiveStepStatus = "in_progress"
	IncidentRetrospectiveStepStatusSkipped    IncidentRetrospectiveStepStatus = "skipped"
	IncidentRetrospectiveStepStatusTodo       IncidentRetrospectiveStepStatus = "todo"
)

// Defines values for IncidentRetrospectiveStepResponseDataType.
const (
	IncidentRetrospectiveStepResponseDataTypeIncidentRetrospectiveSteps IncidentRetrospectiveStepResponseDataType = "incident_retrospective_steps"
)

// Defines values for IncidentRoleListDataType.
const (
	IncidentRoleListDataTypeIncidentRoles IncidentRoleListDataType = "incident_roles"
)

// Defines values for IncidentRoleResponseDataType.
const (
	IncidentRoleResponseDataTypeIncidentRoles IncidentRoleResponseDataType = "incident_roles"
)

// Defines values for IncidentRoleTaskPriority.
const (
	IncidentRoleTaskPriorityHigh   IncidentRoleTaskPriority = "high"
	IncidentRoleTaskPriorityLow    IncidentRoleTaskPriority = "low"
	IncidentRoleTaskPriorityMedium IncidentRoleTaskPriority = "medium"
)

// Defines values for IncidentRoleTaskListDataType.
const (
	IncidentRoleTaskListDataTypeIncidentRoleTasks IncidentRoleTaskListDataType = "incident_role_tasks"
)

// Defines values for IncidentRoleTaskResponseDataType.
const (
	IncidentRoleTaskResponseDataTypeIncidentRoleTasks IncidentRoleTaskResponseDataType = "incident_role_tasks"
)

// Defines values for IncidentStatusPageEventStatus.
const (
	IncidentStatusPageEventStatusCompleted     IncidentStatusPageEventStatus = "completed"
	IncidentStatusPageEventStatusIdentified    IncidentStatusPageEventStatus = "identified"
	IncidentStatusPageEventStatusInProgress    IncidentStatusPageEventStatus = "in_progress"
	IncidentStatusPageEventStatusInvestigating IncidentStatusPageEventStatus = "investigating"
	IncidentStatusPageEventStatusMonitoring    IncidentStatusPageEventStatus = "monitoring"
	IncidentStatusPageEventStatusResolved      IncidentStatusPageEventStatus = "resolved"
	IncidentStatusPageEventStatusScheduled     IncidentStatusPageEventStatus = "scheduled"
	IncidentStatusPageEventStatusVerifying     IncidentStatusPageEventStatus = "verifying"
)

// Defines values for IncidentStatusPageEventListDataType.
const (
	IncidentStatusPageEventListDataTypeIncidentStatusPageEvents IncidentStatusPageEventListDataType = "incident_status_page_events"
)

// Defines values for IncidentStatusPageEventResponseDataType.
const (
	IncidentStatusPageEventResponseDataTypeIncidentStatusPageEvents IncidentStatusPageEventResponseDataType = "incident_status_page_events"
)

// Defines values for IncidentSubStatusListDataType.
const (
	IncidentSubStatusListDataTypeIncidentSubStatuses IncidentSubStatusListDataType = "incident_sub_statuses"
)

// Defines values for IncidentSubStatusResponseDataType.
const (
	IncidentSubStatusResponseDataTypeIncidentSubStatuses IncidentSubStatusResponseDataType = "incident_sub_statuses"
)

// Defines values for IncidentTriggerParamsIncidentCondition.
const (
	IncidentTriggerParamsIncidentConditionALL  IncidentTriggerParamsIncidentCondition = "ALL"
	IncidentTriggerParamsIncidentConditionANY  IncidentTriggerParamsIncidentCondition = "ANY"
	IncidentTriggerParamsIncidentConditionNONE IncidentTriggerParamsIncidentCondition = "NONE"
)

// Defines values for IncidentTriggerParamsIncidentConditionAcknowledgedAt1.
const (
	IncidentTriggerParamsIncidentConditionAcknowledgedAt1SET   IncidentTriggerParamsIncidentConditionAcknowledgedAt1 = "SET"
	IncidentTriggerParamsIncidentConditionAcknowledgedAt1UNSET IncidentTriggerParamsIncidentConditionAcknowledgedAt1 = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionCause.
const (
	IncidentTriggerParamsIncidentConditionCauseANY          IncidentTriggerParamsIncidentConditionCause = "ANY"
	IncidentTriggerParamsIncidentConditionCauseCONTAINS     IncidentTriggerParamsIncidentConditionCause = "CONTAINS"
	IncidentTriggerParamsIncidentConditionCauseCONTAINSALL  IncidentTriggerParamsIncidentConditionCause = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionCauseCONTAINSNONE IncidentTriggerParamsIncidentConditionCause = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionCauseIS           IncidentTriggerParamsIncidentConditionCause = "IS"
	IncidentTriggerParamsIncidentConditionCauseNONE         IncidentTriggerParamsIncidentConditionCause = "NONE"
	IncidentTriggerParamsIncidentConditionCauseSET          IncidentTriggerParamsIncidentConditionCause = "SET"
	IncidentTriggerParamsIncidentConditionCauseUNSET        IncidentTriggerParamsIncidentConditionCause = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionDetectedAt1.
const (
	IncidentTriggerParamsIncidentConditionDetectedAt1SET   IncidentTriggerParamsIncidentConditionDetectedAt1 = "SET"
	IncidentTriggerParamsIncidentConditionDetectedAt1UNSET IncidentTriggerParamsIncidentConditionDetectedAt1 = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionEnvironment.
const (
	IncidentTriggerParamsIncidentConditionEnvironmentANY          IncidentTriggerParamsIncidentConditionEnvironment = "ANY"
	IncidentTriggerParamsIncidentConditionEnvironmentCONTAINS     IncidentTriggerParamsIncidentConditionEnvironment = "CONTAINS"
	IncidentTriggerParamsIncidentConditionEnvironmentCONTAINSALL  IncidentTriggerParamsIncidentConditionEnvironment = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionEnvironmentCONTAINSNONE IncidentTriggerParamsIncidentConditionEnvironment = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionEnvironmentIS           IncidentTriggerParamsIncidentConditionEnvironment = "IS"
	IncidentTriggerParamsIncidentConditionEnvironmentNONE         IncidentTriggerParamsIncidentConditionEnvironment = "NONE"
	IncidentTriggerParamsIncidentConditionEnvironmentSET          IncidentTriggerParamsIncidentConditionEnvironment = "SET"
	IncidentTriggerParamsIncidentConditionEnvironmentUNSET        IncidentTriggerParamsIncidentConditionEnvironment = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionFunctionality.
const (
	IncidentTriggerParamsIncidentConditionFunctionalityANY          IncidentTriggerParamsIncidentConditionFunctionality = "ANY"
	IncidentTriggerParamsIncidentConditionFunctionalityCONTAINS     IncidentTriggerParamsIncidentConditionFunctionality = "CONTAINS"
	IncidentTriggerParamsIncidentConditionFunctionalityCONTAINSALL  IncidentTriggerParamsIncidentConditionFunctionality = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionFunctionalityCONTAINSNONE IncidentTriggerParamsIncidentConditionFunctionality = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionFunctionalityIS           IncidentTriggerParamsIncidentConditionFunctionality = "IS"
	IncidentTriggerParamsIncidentConditionFunctionalityNONE         IncidentTriggerParamsIncidentConditionFunctionality = "NONE"
	IncidentTriggerParamsIncidentConditionFunctionalitySET          IncidentTriggerParamsIncidentConditionFunctionality = "SET"
	IncidentTriggerParamsIncidentConditionFunctionalityUNSET        IncidentTriggerParamsIncidentConditionFunctionality = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionGroup.
const (
	IncidentTriggerParamsIncidentConditionGroupANY          IncidentTriggerParamsIncidentConditionGroup = "ANY"
	IncidentTriggerParamsIncidentConditionGroupCONTAINS     IncidentTriggerParamsIncidentConditionGroup = "CONTAINS"
	IncidentTriggerParamsIncidentConditionGroupCONTAINSALL  IncidentTriggerParamsIncidentConditionGroup = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionGroupCONTAINSNONE IncidentTriggerParamsIncidentConditionGroup = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionGroupIS           IncidentTriggerParamsIncidentConditionGroup = "IS"
	IncidentTriggerParamsIncidentConditionGroupNONE         IncidentTriggerParamsIncidentConditionGroup = "NONE"
	IncidentTriggerParamsIncidentConditionGroupSET          IncidentTriggerParamsIncidentConditionGroup = "SET"
	IncidentTriggerParamsIncidentConditionGroupUNSET        IncidentTriggerParamsIncidentConditionGroup = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionIncidentRoles.
const (
	IncidentTriggerParamsIncidentConditionIncidentRolesANY          IncidentTriggerParamsIncidentConditionIncidentRoles = "ANY"
	IncidentTriggerParamsIncidentConditionIncidentRolesCONTAINS     IncidentTriggerParamsIncidentConditionIncidentRoles = "CONTAINS"
	IncidentTriggerParamsIncidentConditionIncidentRolesCONTAINSALL  IncidentTriggerParamsIncidentConditionIncidentRoles = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionIncidentRolesCONTAINSNONE IncidentTriggerParamsIncidentConditionIncidentRoles = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionIncidentRolesIS           IncidentTriggerParamsIncidentConditionIncidentRoles = "IS"
	IncidentTriggerParamsIncidentConditionIncidentRolesNONE         IncidentTriggerParamsIncidentConditionIncidentRoles = "NONE"
	IncidentTriggerParamsIncidentConditionIncidentRolesSET          IncidentTriggerParamsIncidentConditionIncidentRoles = "SET"
	IncidentTriggerParamsIncidentConditionIncidentRolesUNSET        IncidentTriggerParamsIncidentConditionIncidentRoles = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionIncidentType.
const (
	IncidentTriggerParamsIncidentConditionIncidentTypeANY          IncidentTriggerParamsIncidentConditionIncidentType = "ANY"
	IncidentTriggerParamsIncidentConditionIncidentTypeCONTAINS     IncidentTriggerParamsIncidentConditionIncidentType = "CONTAINS"
	IncidentTriggerParamsIncidentConditionIncidentTypeCONTAINSALL  IncidentTriggerParamsIncidentConditionIncidentType = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionIncidentTypeCONTAINSNONE IncidentTriggerParamsIncidentConditionIncidentType = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionIncidentTypeIS           IncidentTriggerParamsIncidentConditionIncidentType = "IS"
	IncidentTriggerParamsIncidentConditionIncidentTypeNONE         IncidentTriggerParamsIncidentConditionIncidentType = "NONE"
	IncidentTriggerParamsIncidentConditionIncidentTypeSET          IncidentTriggerParamsIncidentConditionIncidentType = "SET"
	IncidentTriggerParamsIncidentConditionIncidentTypeUNSET        IncidentTriggerParamsIncidentConditionIncidentType = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionKind.
const (
	IncidentTriggerParamsIncidentConditionKindANY          IncidentTriggerParamsIncidentConditionKind = "ANY"
	IncidentTriggerParamsIncidentConditionKindCONTAINS     IncidentTriggerParamsIncidentConditionKind = "CONTAINS"
	IncidentTriggerParamsIncidentConditionKindCONTAINSALL  IncidentTriggerParamsIncidentConditionKind = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionKindCONTAINSNONE IncidentTriggerParamsIncidentConditionKind = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionKindIS           IncidentTriggerParamsIncidentConditionKind = "IS"
	IncidentTriggerParamsIncidentConditionKindNONE         IncidentTriggerParamsIncidentConditionKind = "NONE"
	IncidentTriggerParamsIncidentConditionKindSET          IncidentTriggerParamsIncidentConditionKind = "SET"
	IncidentTriggerParamsIncidentConditionKindUNSET        IncidentTriggerParamsIncidentConditionKind = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionMitigatedAt1.
const (
	IncidentTriggerParamsIncidentConditionMitigatedAt1SET   IncidentTriggerParamsIncidentConditionMitigatedAt1 = "SET"
	IncidentTriggerParamsIncidentConditionMitigatedAt1UNSET IncidentTriggerParamsIncidentConditionMitigatedAt1 = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionResolvedAt1.
const (
	IncidentTriggerParamsIncidentConditionResolvedAt1SET   IncidentTriggerParamsIncidentConditionResolvedAt1 = "SET"
	IncidentTriggerParamsIncidentConditionResolvedAt1UNSET IncidentTriggerParamsIncidentConditionResolvedAt1 = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionService.
const (
	IncidentTriggerParamsIncidentConditionServiceANY          IncidentTriggerParamsIncidentConditionService = "ANY"
	IncidentTriggerParamsIncidentConditionServiceCONTAINS     IncidentTriggerParamsIncidentConditionService = "CONTAINS"
	IncidentTriggerParamsIncidentConditionServiceCONTAINSALL  IncidentTriggerParamsIncidentConditionService = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionServiceCONTAINSNONE IncidentTriggerParamsIncidentConditionService = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionServiceIS           IncidentTriggerParamsIncidentConditionService = "IS"
	IncidentTriggerParamsIncidentConditionServiceNONE         IncidentTriggerParamsIncidentConditionService = "NONE"
	IncidentTriggerParamsIncidentConditionServiceSET          IncidentTriggerParamsIncidentConditionService = "SET"
	IncidentTriggerParamsIncidentConditionServiceUNSET        IncidentTriggerParamsIncidentConditionService = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionSeverity.
const (
	IncidentTriggerParamsIncidentConditionSeverityANY          IncidentTriggerParamsIncidentConditionSeverity = "ANY"
	IncidentTriggerParamsIncidentConditionSeverityCONTAINS     IncidentTriggerParamsIncidentConditionSeverity = "CONTAINS"
	IncidentTriggerParamsIncidentConditionSeverityCONTAINSALL  IncidentTriggerParamsIncidentConditionSeverity = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionSeverityCONTAINSNONE IncidentTriggerParamsIncidentConditionSeverity = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionSeverityIS           IncidentTriggerParamsIncidentConditionSeverity = "IS"
	IncidentTriggerParamsIncidentConditionSeverityNONE         IncidentTriggerParamsIncidentConditionSeverity = "NONE"
	IncidentTriggerParamsIncidentConditionSeveritySET          IncidentTriggerParamsIncidentConditionSeverity = "SET"
	IncidentTriggerParamsIncidentConditionSeverityUNSET        IncidentTriggerParamsIncidentConditionSeverity = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionStartedAt1.
const (
	IncidentTriggerParamsIncidentConditionStartedAt1SET   IncidentTriggerParamsIncidentConditionStartedAt1 = "SET"
	IncidentTriggerParamsIncidentConditionStartedAt1UNSET IncidentTriggerParamsIncidentConditionStartedAt1 = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionStatus.
const (
	IncidentTriggerParamsIncidentConditionStatusANY          IncidentTriggerParamsIncidentConditionStatus = "ANY"
	IncidentTriggerParamsIncidentConditionStatusCONTAINS     IncidentTriggerParamsIncidentConditionStatus = "CONTAINS"
	IncidentTriggerParamsIncidentConditionStatusCONTAINSALL  IncidentTriggerParamsIncidentConditionStatus = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionStatusCONTAINSNONE IncidentTriggerParamsIncidentConditionStatus = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionStatusIS           IncidentTriggerParamsIncidentConditionStatus = "IS"
	IncidentTriggerParamsIncidentConditionStatusNONE         IncidentTriggerParamsIncidentConditionStatus = "NONE"
	IncidentTriggerParamsIncidentConditionStatusSET          IncidentTriggerParamsIncidentConditionStatus = "SET"
	IncidentTriggerParamsIncidentConditionStatusUNSET        IncidentTriggerParamsIncidentConditionStatus = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionSummary1.
const (
	IncidentTriggerParamsIncidentConditionSummary1SET   IncidentTriggerParamsIncidentConditionSummary1 = "SET"
	IncidentTriggerParamsIncidentConditionSummary1UNSET IncidentTriggerParamsIncidentConditionSummary1 = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionVisibility.
const (
	IncidentTriggerParamsIncidentConditionVisibilityANY          IncidentTriggerParamsIncidentConditionVisibility = "ANY"
	IncidentTriggerParamsIncidentConditionVisibilityCONTAINS     IncidentTriggerParamsIncidentConditionVisibility = "CONTAINS"
	IncidentTriggerParamsIncidentConditionVisibilityCONTAINSALL  IncidentTriggerParamsIncidentConditionVisibility = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionVisibilityCONTAINSNONE IncidentTriggerParamsIncidentConditionVisibility = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionVisibilityIS           IncidentTriggerParamsIncidentConditionVisibility = "IS"
	IncidentTriggerParamsIncidentConditionVisibilityNONE         IncidentTriggerParamsIncidentConditionVisibility = "NONE"
	IncidentTriggerParamsIncidentConditionVisibilitySET          IncidentTriggerParamsIncidentConditionVisibility = "SET"
	IncidentTriggerParamsIncidentConditionVisibilityUNSET        IncidentTriggerParamsIncidentConditionVisibility = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionalInactivity1.
const (
	IncidentTriggerParamsIncidentConditionalInactivity1IS IncidentTriggerParamsIncidentConditionalInactivity1 = "IS"
)

// Defines values for IncidentTriggerParamsIncidentKinds.
const (
	IncidentTriggerParamsIncidentKindsBackfilled IncidentTriggerParamsIncidentKinds = "backfilled"
	IncidentTriggerParamsIncidentKindsExample    IncidentTriggerParamsIncidentKinds = "example"
	IncidentTriggerParamsIncidentKindsExampleSub IncidentTriggerParamsIncidentKinds = "example_sub"
	IncidentTriggerParamsIncidentKindsNormal     IncidentTriggerParamsIncidentKinds = "normal"
	IncidentTriggerParamsIncidentKindsNormalSub  IncidentTriggerParamsIncidentKinds = "normal_sub"
	IncidentTriggerParamsIncidentKindsScheduled  IncidentTriggerParamsIncidentKinds = "scheduled"
	IncidentTriggerParamsIncidentKindsTest       IncidentTriggerParamsIncidentKinds = "test"
	IncidentTriggerParamsIncidentKindsTestSub    IncidentTriggerParamsIncidentKinds = "test_sub"
)

// Defines values for IncidentTriggerParamsIncidentPostMortemConditionCause.
const (
	IncidentTriggerParamsIncidentPostMortemConditionCauseANY          IncidentTriggerParamsIncidentPostMortemConditionCause = "ANY"
	IncidentTriggerParamsIncidentPostMortemConditionCauseCONTAINS     IncidentTriggerParamsIncidentPostMortemConditionCause = "CONTAINS"
	IncidentTriggerParamsIncidentPostMortemConditionCauseCONTAINSALL  IncidentTriggerParamsIncidentPostMortemConditionCause = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentPostMortemConditionCauseCONTAINSNONE IncidentTriggerParamsIncidentPostMortemConditionCause = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentPostMortemConditionCauseIS           IncidentTriggerParamsIncidentPostMortemConditionCause = "IS"
	IncidentTriggerParamsIncidentPostMortemConditionCauseNONE         IncidentTriggerParamsIncidentPostMortemConditionCause = "NONE"
	IncidentTriggerParamsIncidentPostMortemConditionCauseSET          IncidentTriggerParamsIncidentPostMortemConditionCause = "SET"
	IncidentTriggerParamsIncidentPostMortemConditionCauseUNSET        IncidentTriggerParamsIncidentPostMortemConditionCause = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentStatuses.
const (
	IncidentTriggerParamsIncidentStatusesAcknowledged IncidentTriggerParamsIncidentStatuses = "acknowledged"
	IncidentTriggerParamsIncidentStatusesCancelled    IncidentTriggerParamsIncidentStatuses = "cancelled"
	IncidentTriggerParamsIncidentStatusesClosed       IncidentTriggerParamsIncidentStatuses = "closed"
	IncidentTriggerParamsIncidentStatusesCompleted    IncidentTriggerParamsIncidentStatuses = "completed"
	IncidentTriggerParamsIncidentStatusesDetected     IncidentTriggerParamsIncidentStatuses = "detected"
	IncidentTriggerParamsIncidentStatusesInProgress   IncidentTriggerParamsIncidentStatuses = "in_progress"
	IncidentTriggerParamsIncidentStatusesInTriage     IncidentTriggerParamsIncidentStatuses = "in_triage"
	IncidentTriggerParamsIncidentStatusesMitigated    IncidentTriggerParamsIncidentStatuses = "mitigated"
	IncidentTriggerParamsIncidentStatusesResolved     IncidentTriggerParamsIncidentStatuses = "resolved"
	IncidentTriggerParamsIncidentStatusesScheduled    IncidentTriggerParamsIncidentStatuses = "scheduled"
	IncidentTriggerParamsIncidentStatusesStarted      IncidentTriggerParamsIncidentStatuses = "started"
)

// Defines values for IncidentTriggerParamsTriggerType.
const (
	IncidentTriggerParamsTriggerTypeIncident IncidentTriggerParamsTriggerType = "incident"
)

// Defines values for IncidentTypeListDataType.
const (
	IncidentTypeListDataTypeIncidentTypes IncidentTypeListDataType = "incident_types"
)

// Defines values for IncidentTypeResponseDataType.
const (
	IncidentTypeResponseDataTypeIncidentTypes IncidentTypeResponseDataType = "incident_types"
)

// Defines values for InviteToMicrosoftTeamsChannelTaskParamsTaskType.
const (
	InviteToMicrosoftTeamsChannel InviteToMicrosoftTeamsChannelTaskParamsTaskType = "invite_to_microsoft_teams_channel"
)

// Defines values for InviteToSlackChannelOpsgenieTaskParamsTaskType.
const (
	InviteToSlackChannelOpsgenie InviteToSlackChannelOpsgenieTaskParamsTaskType = "invite_to_slack_channel_opsgenie"
)

// Defines values for InviteToSlackChannelPagerdutyTaskParamsTaskType.
const (
	InviteToSlackChannelPagerduty InviteToSlackChannelPagerdutyTaskParamsTaskType = "invite_to_slack_channel_pagerduty"
)

// Defines values for InviteToSlackChannelRootlyTaskParamsTaskType.
const (
	InviteToSlackChannelRootly InviteToSlackChannelRootlyTaskParamsTaskType = "invite_to_slack_channel_rootly"
)

// Defines values for InviteToSlackChannelTaskParamsTaskType.
const (
	InviteToSlackChannel InviteToSlackChannelTaskParamsTaskType = "invite_to_slack_channel"
)

// Defines values for InviteToSlackChannelVictorOpsTaskParamsTaskType.
const (
	InviteToSlackChannelVictorOps InviteToSlackChannelVictorOpsTaskParamsTaskType = "invite_to_slack_channel_victor_ops"
)

// Defines values for IpRangesResponseDataType.
const (
	IpRangesResponseDataTypeIpRanges IpRangesResponseDataType = "ip_ranges"
)

// Defines values for LiveCallRouterCountryCode.
const (
	LiveCallRouterCountryCodeAU LiveCallRouterCountryCode = "AU"
	LiveCallRouterCountryCodeCA LiveCallRouterCountryCode = "CA"
	LiveCallRouterCountryCodeGB LiveCallRouterCountryCode = "GB"
	LiveCallRouterCountryCodeNZ LiveCallRouterCountryCode = "NZ"
	LiveCallRouterCountryCodeUS LiveCallRouterCountryCode = "US"
)

// Defines values for LiveCallRouterEscalationPolicyTriggerParamsType.
const (
	LiveCallRouterEscalationPolicyTriggerParamsTypeEscalationPolicy LiveCallRouterEscalationPolicyTriggerParamsType = "EscalationPolicy"
	LiveCallRouterEscalationPolicyTriggerParamsTypeGroup            LiveCallRouterEscalationPolicyTriggerParamsType = "Group"
	LiveCallRouterEscalationPolicyTriggerParamsTypeService          LiveCallRouterEscalationPolicyTriggerParamsType = "Service"
)

// Defines values for LiveCallRouterKind.
const (
	LiveCallRouterKindLive      LiveCallRouterKind = "live"
	LiveCallRouterKindVoicemail LiveCallRouterKind = "voicemail"
)

// Defines values for LiveCallRouterPhoneType.
const (
	LiveCallRouterPhoneTypeLocal    LiveCallRouterPhoneType = "local"
	LiveCallRouterPhoneTypeTollFree LiveCallRouterPhoneType = "toll_free"
)

// Defines values for LiveCallRouterListDataType.
const (
	LiveCallRouterListDataTypeLiveCallRouters LiveCallRouterListDataType = "live_call_routers"
)

// Defines values for LiveCallRouterResponseDataType.
const (
	LiveCallRouterResponseDataTypeLiveCallRouters LiveCallRouterResponseDataType = "live_call_routers"
)

// Defines values for MitigateIncidentDataType.
const (
	MitigateIncidentDataTypeIncidents MitigateIncidentDataType = "incidents"
)

// Defines values for NewAlertDataAttributesNotificationTargetType.
const (
	NewAlertDataAttributesNotificationTargetTypeEscalationPolicy NewAlertDataAttributesNotificationTargetType = "EscalationPolicy"
	NewAlertDataAttributesNotificationTargetTypeGroup            NewAlertDataAttributesNotificationTargetType = "Group"
	NewAlertDataAttributesNotificationTargetTypeService          NewAlertDataAttributesNotificationTargetType = "Service"
	NewAlertDataAttributesNotificationTargetTypeUser             NewAlertDataAttributesNotificationTargetType = "User"
)

// Defines values for NewAlertDataAttributesSource.
const (
	NewAlertDataAttributesSourceAlertmanager    NewAlertDataAttributesSource = "alertmanager"
	NewAlertDataAttributesSourceAsana           NewAlertDataAttributesSource = "asana"
	NewAlertDataAttributesSourceAzure           NewAlertDataAttributesSource = "azure"
	NewAlertDataAttributesSourceClickup         NewAlertDataAttributesSource = "clickup"
	NewAlertDataAttributesSourceCloudWatch      NewAlertDataAttributesSource = "cloud_watch"
	NewAlertDataAttributesSourceDatadog         NewAlertDataAttributesSource = "datadog"
	NewAlertDataAttributesSourceEmail           NewAlertDataAttributesSource = "email"
	NewAlertDataAttributesSourceGenericWebhook  NewAlertDataAttributesSource = "generic_webhook"
	NewAlertDataAttributesSourceGoogleCloud     NewAlertDataAttributesSource = "google_cloud"
	NewAlertDataAttributesSourceGrafana         NewAlertDataAttributesSource = "grafana"
	NewAlertDataAttributesSourceHoneycomb       NewAlertDataAttributesSource = "honeycomb"
	NewAlertDataAttributesSourceJira            NewAlertDataAttributesSource = "jira"
	NewAlertDataAttributesSourceLinear          NewAlertDataAttributesSource = "linear"
	NewAlertDataAttributesSourceLiveCallRouting NewAlertDataAttributesSource = "live_call_routing"
	NewAlertDataAttributesSourceManual          NewAlertDataAttributesSource = "manual"
	NewAlertDataAttributesSourceNobl9           NewAlertDataAttributesSource = "nobl9"
	NewAlertDataAttributesSourceOpsgenie        NewAlertDataAttributesSource = "opsgenie"
	NewAlertDataAttributesSourcePagerduty       NewAlertDataAttributesSource = "pagerduty"
	NewAlertDataAttributesSourcePagertree       NewAlertDataAttributesSource = "pagertree"
	NewAlertDataAttributesSourceRollbar         NewAlertDataAttributesSource = "rollbar"
	NewAlertDataAttributesSourceRootly          NewAlertDataAttributesSource = "rootly"
	NewAlertDataAttributesSourceSentry          NewAlertDataAttributesSource = "sentry"
	NewAlertDataAttributesSourceServiceNow      NewAlertDataAttributesSource = "service_now"
	NewAlertDataAttributesSourceSlack           NewAlertDataAttributesSource = "slack"
	NewAlertDataAttributesSourceVictorops       NewAlertDataAttributesSource = "victorops"
	NewAlertDataAttributesSourceWeb             NewAlertDataAttributesSource = "web"
	NewAlertDataAttributesSourceWorkflow        NewAlertDataAttributesSource = "workflow"
	NewAlertDataAttributesSourceZendesk         NewAlertDataAttributesSource = "zendesk"
)

// Defines values for NewAlertDataAttributesStatus.
const (
	NewAlertDataAttributesStatusAcknowledged NewAlertDataAttributesStatus = "acknowledged"
	NewAlertDataAttributesStatusOpen         NewAlertDataAttributesStatus = "open"
	NewAlertDataAttributesStatusResolved     NewAlertDataAttributesStatus = "resolved"
	NewAlertDataAttributesStatusTriggered    NewAlertDataAttributesStatus = "triggered"
)

// Defines values for NewAlertDataType.
const (
	NewAlertDataTypeAlerts NewAlertDataType = "alerts"
)

// Defines values for NewAlertGroupDataAttributesAlertGroupTargetsAttributesTargetType.
const (
	NewAlertGroupDataAttributesAlertGroupTargetsAttributesTargetTypeEscalationPolicy NewAlertGroupDataAttributesAlertGroupTargetsAttributesTargetType = "EscalationPolicy"
	NewAlertGroupDataAttributesAlertGroupTargetsAttributesTargetTypeGroup            NewAlertGroupDataAttributesAlertGroupTargetsAttributesTargetType = "Group"
	NewAlertGroupDataAttributesAlertGroupTargetsAttributesTargetTypeService          NewAlertGroupDataAttributesAlertGroupTargetsAttributesTargetType = "Service"
)

// Defines values for NewAlertGroupDataAttributesConditionType.
const (
	NewAlertGroupDataAttributesConditionTypeAll NewAlertGroupDataAttributesConditionType = "all"
	NewAlertGroupDataAttributesConditionTypeAny NewAlertGroupDataAttributesConditionType = "any"
)

// Defines values for NewAlertGroupDataAttributesGroupByAlertTitle.
const (
	NewAlertGroupDataAttributesGroupByAlertTitleN0 NewAlertGroupDataAttributesGroupByAlertTitle = 0
	NewAlertGroupDataAttributesGroupByAlertTitleN1 NewAlertGroupDataAttributesGroupByAlertTitle = 1
)

// Defines values for NewAlertGroupDataAttributesGroupByAlertUrgency.
const (
	NewAlertGroupDataAttributesGroupByAlertUrgencyN0 NewAlertGroupDataAttributesGroupByAlertUrgency = 0
	NewAlertGroupDataAttributesGroupByAlertUrgencyN1 NewAlertGroupDataAttributesGroupByAlertUrgency = 1
)

// Defines values for NewAlertGroupDataType.
const (
	NewAlertGroupDataTypeAlertGroups NewAlertGroupDataType = "alert_groups"
)

// Defines values for NewAlertUrgencyDataType.
const (
	NewAlertUrgencyDataTypeAlertUrgencies NewAlertUrgencyDataType = "alert_urgencies"
)

// Defines values for NewAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperator.
const (
	NewAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperatorContains       NewAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperator = "contains"
	NewAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperatorDoesNotContain NewAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperator = "does_not_contain"
	NewAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperatorIs             NewAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperator = "is"
	NewAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperatorIsNot          NewAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperator = "is_not"
)

// Defines values for NewAlertsSourceDataAttributesSourceType.
const (
	NewAlertsSourceDataAttributesSourceTypeAlertmanager   NewAlertsSourceDataAttributesSourceType = "alertmanager"
	NewAlertsSourceDataAttributesSourceTypeAzure          NewAlertsSourceDataAttributesSourceType = "azure"
	NewAlertsSourceDataAttributesSourceTypeCheckly        NewAlertsSourceDataAttributesSourceType = "checkly"
	NewAlertsSourceDataAttributesSourceTypeCloudWatch     NewAlertsSourceDataAttributesSourceType = "cloud_watch"
	NewAlertsSourceDataAttributesSourceTypeDatadog        NewAlertsSourceDataAttributesSourceType = "datadog"
	NewAlertsSourceDataAttributesSourceTypeGenericWebhook NewAlertsSourceDataAttributesSourceType = "generic_webhook"
	NewAlertsSourceDataAttributesSourceTypeGoogleCloud    NewAlertsSourceDataAttributesSourceType = "google_cloud"
	NewAlertsSourceDataAttributesSourceTypeGrafana        NewAlertsSourceDataAttributesSourceType = "grafana"
	NewAlertsSourceDataAttributesSourceTypeNewRelic       NewAlertsSourceDataAttributesSourceType = "new_relic"
	NewAlertsSourceDataAttributesSourceTypeSentry         NewAlertsSourceDataAttributesSourceType = "sentry"
)

// Defines values for NewAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesField.
const (
	NewAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesFieldAlertExternalUrl       NewAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesField = "alert_external_url"
	NewAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesFieldAlertTitle             NewAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesField = "alert_title"
	NewAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesFieldExternalId             NewAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesField = "external_id"
	NewAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesFieldNotificationTargetId   NewAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesField = "notification_target_id"
	NewAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesFieldNotificationTargetType NewAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesField = "notification_target_type"
	NewAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesFieldState                  NewAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesField = "state"
)

// Defines values for NewAlertsSourceDataType.
const (
	NewAlertsSourceDataTypeAlertSources NewAlertsSourceDataType = "alert_sources"
)

// Defines values for NewAuthorizationDataAttributesAuthorizableType.
const (
	NewAuthorizationDataAttributesAuthorizableTypeDashboard NewAuthorizationDataAttributesAuthorizableType = "Dashboard"
)

// Defines values for NewAuthorizationDataAttributesGranteeType.
const (
	NewAuthorizationDataAttributesGranteeTypeTeam NewAuthorizationDataAttributesGranteeType = "Team"
	NewAuthorizationDataAttributesGranteeTypeUser NewAuthorizationDataAttributesGranteeType = "User"
)

// Defines values for NewAuthorizationDataAttributesPermissions.
const (
	NewAuthorizationDataAttributesPermissionsAuthorize NewAuthorizationDataAttributesPermissions = "authorize"
	NewAuthorizationDataAttributesPermissionsDestroy   NewAuthorizationDataAttributesPermissions = "destroy"
	NewAuthorizationDataAttributesPermissionsRead      NewAuthorizationDataAttributesPermissions = "read"
	NewAuthorizationDataAttributesPermissionsUpdate    NewAuthorizationDataAttributesPermissions = "update"
)

// Defines values for NewAuthorizationDataType.
const (
	NewAuthorizationDataTypeAuthorizations NewAuthorizationDataType = "authorizations"
)

// Defines values for NewCatalogDataAttributesIcon.
const (
	NewCatalogDataAttributesIconChartBar          NewCatalogDataAttributesIcon = "chart-bar"
	NewCatalogDataAttributesIconCursorArrowRipple NewCatalogDataAttributesIcon = "cursor-arrow-ripple"
	NewCatalogDataAttributesIconGlobeAlt          NewCatalogDataAttributesIcon = "globe-alt"
	NewCatalogDataAttributesIconLightBulb         NewCatalogDataAttributesIcon = "light-bulb"
	NewCatalogDataAttributesIconServerStack       NewCatalogDataAttributesIcon = "server-stack"
	NewCatalogDataAttributesIconShapes            NewCatalogDataAttributesIcon = "shapes"
	NewCatalogDataAttributesIconUserGroup         NewCatalogDataAttributesIcon = "user-group"
	NewCatalogDataAttributesIconUsers             NewCatalogDataAttributesIcon = "users"
)

// Defines values for NewCatalogDataType.
const (
	NewCatalogDataTypeCatalogs NewCatalogDataType = "catalogs"
)

// Defines values for NewCatalogEntityDataType.
const (
	NewCatalogEntityDataTypeCatalogEntities NewCatalogEntityDataType = "catalog_entities"
)

// Defines values for NewCatalogEntityPropertyDataAttributesKey.
const (
	NewCatalogEntityPropertyDataAttributesKeyCatalogEntity NewCatalogEntityPropertyDataAttributesKey = "catalog_entity"
	NewCatalogEntityPropertyDataAttributesKeyText          NewCatalogEntityPropertyDataAttributesKey = "text"
)

// Defines values for NewCatalogEntityPropertyDataType.
const (
	NewCatalogEntityPropertyDataTypeCatalogEntityProperties NewCatalogEntityPropertyDataType = "catalog_entity_properties"
)

// Defines values for NewCatalogFieldDataAttributesKind.
const (
	NewCatalogFieldDataAttributesKindReference NewCatalogFieldDataAttributesKind = "reference"
	NewCatalogFieldDataAttributesKindText      NewCatalogFieldDataAttributesKind = "text"
)

// Defines values for NewCatalogFieldDataType.
const (
	NewCatalogFieldDataTypeCatalogFields NewCatalogFieldDataType = "catalog_fields"
)

// Defines values for NewCauseDataType.
const (
	NewCauseDataTypeCauses NewCauseDataType = "causes"
)

// Defines values for NewCustomFieldDataAttributesRequired.
const (
	NewCustomFieldDataAttributesRequiredIncidentForm                NewCustomFieldDataAttributesRequired = "incident_form"
	NewCustomFieldDataAttributesRequiredIncidentMitigationForm      NewCustomFieldDataAttributesRequired = "incident_mitigation_form"
	NewCustomFieldDataAttributesRequiredIncidentMitigationSlackForm NewCustomFieldDataAttributesRequired = "incident_mitigation_slack_form"
	NewCustomFieldDataAttributesRequiredIncidentPostMortemForm      NewCustomFieldDataAttributesRequired = "incident_post_mortem_form"
	NewCustomFieldDataAttributesRequiredIncidentResolutionForm      NewCustomFieldDataAttributesRequired = "incident_resolution_form"
	NewCustomFieldDataAttributesRequiredIncidentResolutionSlackForm NewCustomFieldDataAttributesRequired = "incident_resolution_slack_form"
	NewCustomFieldDataAttributesRequiredIncidentSlackForm           NewCustomFieldDataAttributesRequired = "incident_slack_form"
)

// Defines values for NewCustomFieldDataAttributesShown.
const (
	NewCustomFieldDataAttributesShownIncidentForm                NewCustomFieldDataAttributesShown = "incident_form"
	NewCustomFieldDataAttributesShownIncidentMitigationForm      NewCustomFieldDataAttributesShown = "incident_mitigation_form"
	NewCustomFieldDataAttributesShownIncidentMitigationSlackForm NewCustomFieldDataAttributesShown = "incident_mitigation_slack_form"
	NewCustomFieldDataAttributesShownIncidentPostMortem          NewCustomFieldDataAttributesShown = "incident_post_mortem"
	NewCustomFieldDataAttributesShownIncidentPostMortemForm      NewCustomFieldDataAttributesShown = "incident_post_mortem_form"
	NewCustomFieldDataAttributesShownIncidentResolutionForm      NewCustomFieldDataAttributesShown = "incident_resolution_form"
	NewCustomFieldDataAttributesShownIncidentResolutionSlackForm NewCustomFieldDataAttributesShown = "incident_resolution_slack_form"
	NewCustomFieldDataAttributesShownIncidentSlackForm           NewCustomFieldDataAttributesShown = "incident_slack_form"
)

// Defines values for NewCustomFieldDataType.
const (
	NewCustomFieldDataTypeCustomFields NewCustomFieldDataType = "custom_fields"
)

// Defines values for NewCustomFieldOptionDataType.
const (
	NewCustomFieldOptionDataTypeCustomFieldOptions NewCustomFieldOptionDataType = "custom_field_options"
)

// Defines values for NewCustomFormDataType.
const (
	NewCustomFormDataTypeCustomForms NewCustomFormDataType = "custom_forms"
)

// Defines values for NewDashboardDataAttributesColor.
const (
	NewDashboardDataAttributesColorHashD7F5E1 NewDashboardDataAttributesColor = "#D7F5E1"
	NewDashboardDataAttributesColorHashE9E2FF NewDashboardDataAttributesColor = "#E9E2FF"
	NewDashboardDataAttributesColorHashFAE6E8 NewDashboardDataAttributesColor = "#FAE6E8"
	NewDashboardDataAttributesColorHashFAEEE6 NewDashboardDataAttributesColor = "#FAEEE6"
	NewDashboardDataAttributesColorHashFCF2CF NewDashboardDataAttributesColor = "#FCF2CF"
)

// Defines values for NewDashboardDataAttributesOwner.
const (
	NewDashboardDataAttributesOwnerTeam NewDashboardDataAttributesOwner = "team"
	NewDashboardDataAttributesOwnerUser NewDashboardDataAttributesOwner = "user"
)

// Defines values for NewDashboardDataAttributesPeriod.
const (
	NewDashboardDataAttributesPeriodDay   NewDashboardDataAttributesPeriod = "day"
	NewDashboardDataAttributesPeriodMonth NewDashboardDataAttributesPeriod = "month"
	NewDashboardDataAttributesPeriodWeek  NewDashboardDataAttributesPeriod = "week"
)

// Defines values for NewDashboardDataType.
const (
	NewDashboardDataTypeDashboards NewDashboardDataType = "dashboards"
)

// Defines values for NewEnvironmentDataType.
const (
	NewEnvironmentDataTypeEnvironments NewEnvironmentDataType = "environments"
)

// Defines values for NewEscalationLevelDataAttributesNotificationTargetParamsType.
const (
	NewEscalationLevelDataAttributesNotificationTargetParamsTypeSchedule     NewEscalationLevelDataAttributesNotificationTargetParamsType = "schedule"
	NewEscalationLevelDataAttributesNotificationTargetParamsTypeSlackChannel NewEscalationLevelDataAttributesNotificationTargetParamsType = "slack_channel"
	NewEscalationLevelDataAttributesNotificationTargetParamsTypeUser         NewEscalationLevelDataAttributesNotificationTargetParamsType = "user"
)

// Defines values for NewEscalationLevelDataType.
const (
	NewEscalationLevelDataTypeEscalationLevels NewEscalationLevelDataType = "escalation_levels"
)

// Defines values for NewEscalationPathDataAttributesNotificationType.
const (
	NewEscalationPathDataAttributesNotificationTypeAudible NewEscalationPathDataAttributesNotificationType = "audible"
	NewEscalationPathDataAttributesNotificationTypeQuiet   NewEscalationPathDataAttributesNotificationType = "quiet"
)

// Defines values for NewEscalationPathDataAttributesRulesOperator.
const (
	NewEscalationPathDataAttributesRulesOperatorContains       NewEscalationPathDataAttributesRulesOperator = "contains"
	NewEscalationPathDataAttributesRulesOperatorDoesNotContain NewEscalationPathDataAttributesRulesOperator = "does_not_contain"
	NewEscalationPathDataAttributesRulesOperatorIs             NewEscalationPathDataAttributesRulesOperator = "is"
	NewEscalationPathDataAttributesRulesOperatorIsNot          NewEscalationPathDataAttributesRulesOperator = "is_not"
)

// Defines values for NewEscalationPathDataAttributesRulesRuleType.
const (
	NewEscalationPathDataAttributesRulesRuleTypeAlertUrgency NewEscalationPathDataAttributesRulesRuleType = "alert_urgency"
	NewEscalationPathDataAttributesRulesRuleTypeJsonPath     NewEscalationPathDataAttributesRulesRuleType = "json_path"
	NewEscalationPathDataAttributesRulesRuleTypeWorkingHour  NewEscalationPathDataAttributesRulesRuleType = "working_hour"
)

// Defines values for NewEscalationPathDataType.
const (
	NewEscalationPathDataTypeEscalationPaths NewEscalationPathDataType = "escalation_paths"
)

// Defines values for NewEscalationPolicyDataType.
const (
	NewEscalationPolicyDataTypeEscalationPolicies NewEscalationPolicyDataType = "escalation_policies"
)

// Defines values for NewFormFieldDataAttributesInputKind.
const (
	NewFormFieldDataAttributesInputKindCheckbox    NewFormFieldDataAttributesInputKind = "checkbox"
	NewFormFieldDataAttributesInputKindDate        NewFormFieldDataAttributesInputKind = "date"
	NewFormFieldDataAttributesInputKindDatetime    NewFormFieldDataAttributesInputKind = "datetime"
	NewFormFieldDataAttributesInputKindMultiSelect NewFormFieldDataAttributesInputKind = "multi_select"
	NewFormFieldDataAttributesInputKindNumber      NewFormFieldDataAttributesInputKind = "number"
	NewFormFieldDataAttributesInputKindRichText    NewFormFieldDataAttributesInputKind = "rich_text"
	NewFormFieldDataAttributesInputKindSelect      NewFormFieldDataAttributesInputKind = "select"
	NewFormFieldDataAttributesInputKindTags        NewFormFieldDataAttributesInputKind = "tags"
	NewFormFieldDataAttributesInputKindText        NewFormFieldDataAttributesInputKind = "text"
	NewFormFieldDataAttributesInputKindTextarea    NewFormFieldDataAttributesInputKind = "textarea"
)

// Defines values for NewFormFieldDataAttributesKind.
const (
	NewFormFieldDataAttributesKindAcknowledgedAt              NewFormFieldDataAttributesKind = "acknowledged_at"
	NewFormFieldDataAttributesKindAttachAlerts                NewFormFieldDataAttributesKind = "attach_alerts"
	NewFormFieldDataAttributesKindCauses                      NewFormFieldDataAttributesKind = "causes"
	NewFormFieldDataAttributesKindCustom                      NewFormFieldDataAttributesKind = "custom"
	NewFormFieldDataAttributesKindDetectedAt                  NewFormFieldDataAttributesKind = "detected_at"
	NewFormFieldDataAttributesKindEnvironments                NewFormFieldDataAttributesKind = "environments"
	NewFormFieldDataAttributesKindFunctionalities             NewFormFieldDataAttributesKind = "functionalities"
	NewFormFieldDataAttributesKindInTriageAt                  NewFormFieldDataAttributesKind = "in_triage_at"
	NewFormFieldDataAttributesKindLabels                      NewFormFieldDataAttributesKind = "labels"
	NewFormFieldDataAttributesKindManualStartingDatetimeField NewFormFieldDataAttributesKind = "manual_starting_datetime_field"
	NewFormFieldDataAttributesKindMarkAsBackfilled            NewFormFieldDataAttributesKind = "mark_as_backfilled"
	NewFormFieldDataAttributesKindMarkAsInTriage              NewFormFieldDataAttributesKind = "mark_as_in_triage"
	NewFormFieldDataAttributesKindMarkAsTest                  NewFormFieldDataAttributesKind = "mark_as_test"
	NewFormFieldDataAttributesKindMitigatedAt                 NewFormFieldDataAttributesKind = "mitigated_at"
	NewFormFieldDataAttributesKindMitigationMessage           NewFormFieldDataAttributesKind = "mitigation_message"
	NewFormFieldDataAttributesKindNotifyEmails                NewFormFieldDataAttributesKind = "notify_emails"
	NewFormFieldDataAttributesKindResolutionMessage           NewFormFieldDataAttributesKind = "resolution_message"
	NewFormFieldDataAttributesKindResolvedAt                  NewFormFieldDataAttributesKind = "resolved_at"
	NewFormFieldDataAttributesKindServices                    NewFormFieldDataAttributesKind = "services"
	NewFormFieldDataAttributesKindSeverity                    NewFormFieldDataAttributesKind = "severity"
	NewFormFieldDataAttributesKindShowOngoingIncidents        NewFormFieldDataAttributesKind = "show_ongoing_incidents"
	NewFormFieldDataAttributesKindStartedAt                   NewFormFieldDataAttributesKind = "started_at"
	NewFormFieldDataAttributesKindSummary                     NewFormFieldDataAttributesKind = "summary"
	NewFormFieldDataAttributesKindTeams                       NewFormFieldDataAttributesKind = "teams"
	NewFormFieldDataAttributesKindTitle                       NewFormFieldDataAttributesKind = "title"
	NewFormFieldDataAttributesKindTriggerManualWorkflows      NewFormFieldDataAttributesKind = "trigger_manual_workflows"
	NewFormFieldDataAttributesKindTypes                       NewFormFieldDataAttributesKind = "types"
	NewFormFieldDataAttributesKindVisibility                  NewFormFieldDataAttributesKind = "visibility"
)

// Defines values for NewFormFieldDataAttributesValueKind.
const (
	NewFormFieldDataAttributesValueKindCatalogEntity NewFormFieldDataAttributesValueKind = "catalog_entity"
	NewFormFieldDataAttributesValueKindFunctionality NewFormFieldDataAttributesValueKind = "functionality"
	NewFormFieldDataAttributesValueKindGroup         NewFormFieldDataAttributesValueKind = "group"
	NewFormFieldDataAttributesValueKindInherit       NewFormFieldDataAttributesValueKind = "inherit"
	NewFormFieldDataAttributesValueKindService       NewFormFieldDataAttributesValueKind = "service"
	NewFormFieldDataAttributesValueKindUser          NewFormFieldDataAttributesValueKind = "user"
)

// Defines values for NewFormFieldDataType.
const (
	NewFormFieldDataTypeFormFields NewFormFieldDataType = "form_fields"
)

// Defines values for NewFormFieldOptionDataType.
const (
	NewFormFieldOptionDataTypeFormFieldOptions NewFormFieldOptionDataType = "form_field_options"
)

// Defines values for NewFormFieldPlacementDataAttributesPlacementOperator.
const (
	NewFormFieldPlacementDataAttributesPlacementOperatorAnd NewFormFieldPlacementDataAttributesPlacementOperator = "and"
	NewFormFieldPlacementDataAttributesPlacementOperatorOr  NewFormFieldPlacementDataAttributesPlacementOperator = "or"
)

// Defines values for NewFormFieldPlacementDataAttributesRequiredOperator.
const (
	NewFormFieldPlacementDataAttributesRequiredOperatorAnd NewFormFieldPlacementDataAttributesRequiredOperator = "and"
	NewFormFieldPlacementDataAttributesRequiredOperatorOr  NewFormFieldPlacementDataAttributesRequiredOperator = "or"
)

// Defines values for NewFormFieldPlacementDataType.
const (
	NewFormFieldPlacementDataTypeFormFieldPlacements NewFormFieldPlacementDataType = "form_field_placements"
)

// Defines values for NewFormFieldPlacementConditionDataAttributesComparison.
const (
	NewFormFieldPlacementConditionDataAttributesComparisonEqual    NewFormFieldPlacementConditionDataAttributesComparison = "equal"
	NewFormFieldPlacementConditionDataAttributesComparisonIsNotSet NewFormFieldPlacementConditionDataAttributesComparison = "is_not_set"
	NewFormFieldPlacementConditionDataAttributesComparisonIsSet    NewFormFieldPlacementConditionDataAttributesComparison = "is_set"
)

// Defines values for NewFormFieldPlacementConditionDataAttributesConditioned.
const (
	NewFormFieldPlacementConditionDataAttributesConditionedPlacement NewFormFieldPlacementConditionDataAttributesConditioned = "placement"
	NewFormFieldPlacementConditionDataAttributesConditionedRequired  NewFormFieldPlacementConditionDataAttributesConditioned = "required"
)

// Defines values for NewFormFieldPlacementConditionDataType.
const (
	NewFormFieldPlacementConditionDataTypeFormFieldPlacementConditions NewFormFieldPlacementConditionDataType = "form_field_placement_conditions"
)

// Defines values for NewFormFieldPositionDataAttributesForm.
const (
	NewFormFieldPositionDataAttributesFormIncidentPostMortem               NewFormFieldPositionDataAttributesForm = "incident_post_mortem"
	NewFormFieldPositionDataAttributesFormSlackIncidentCancellationForm    NewFormFieldPositionDataAttributesForm = "slack_incident_cancellation_form"
	NewFormFieldPositionDataAttributesFormSlackIncidentMitigationForm      NewFormFieldPositionDataAttributesForm = "slack_incident_mitigation_form"
	NewFormFieldPositionDataAttributesFormSlackIncidentResolutionForm      NewFormFieldPositionDataAttributesForm = "slack_incident_resolution_form"
	NewFormFieldPositionDataAttributesFormSlackNewIncidentForm             NewFormFieldPositionDataAttributesForm = "slack_new_incident_form"
	NewFormFieldPositionDataAttributesFormSlackScheduledIncidentForm       NewFormFieldPositionDataAttributesForm = "slack_scheduled_incident_form"
	NewFormFieldPositionDataAttributesFormSlackUpdateIncidentForm          NewFormFieldPositionDataAttributesForm = "slack_update_incident_form"
	NewFormFieldPositionDataAttributesFormSlackUpdateIncidentStatusForm    NewFormFieldPositionDataAttributesForm = "slack_update_incident_status_form"
	NewFormFieldPositionDataAttributesFormSlackUpdateScheduledIncidentForm NewFormFieldPositionDataAttributesForm = "slack_update_scheduled_incident_form"
	NewFormFieldPositionDataAttributesFormWebIncidentCancellationForm      NewFormFieldPositionDataAttributesForm = "web_incident_cancellation_form"
	NewFormFieldPositionDataAttributesFormWebIncidentMitigationForm        NewFormFieldPositionDataAttributesForm = "web_incident_mitigation_form"
	NewFormFieldPositionDataAttributesFormWebIncidentPostMortemForm        NewFormFieldPositionDataAttributesForm = "web_incident_post_mortem_form"
	NewFormFieldPositionDataAttributesFormWebIncidentResolutionForm        NewFormFieldPositionDataAttributesForm = "web_incident_resolution_form"
	NewFormFieldPositionDataAttributesFormWebNewIncidentForm               NewFormFieldPositionDataAttributesForm = "web_new_incident_form"
	NewFormFieldPositionDataAttributesFormWebScheduledIncidentForm         NewFormFieldPositionDataAttributesForm = "web_scheduled_incident_form"
	NewFormFieldPositionDataAttributesFormWebUpdateIncidentForm            NewFormFieldPositionDataAttributesForm = "web_update_incident_form"
	NewFormFieldPositionDataAttributesFormWebUpdateScheduledIncidentForm   NewFormFieldPositionDataAttributesForm = "web_update_scheduled_incident_form"
)

// Defines values for NewFormFieldPositionDataType.
const (
	NewFormFieldPositionDataTypeFormFieldPositions NewFormFieldPositionDataType = "form_field_positions"
)

// Defines values for NewFormSetDataType.
const (
	NewFormSetDataTypeFormSets NewFormSetDataType = "form_sets"
)

// Defines values for NewFormSetConditionDataAttributesComparison.
const (
	NewFormSetConditionDataAttributesComparisonEqual NewFormSetConditionDataAttributesComparison = "equal"
)

// Defines values for NewFormSetConditionDataType.
const (
	NewFormSetConditionDataTypeFormSetConditions NewFormSetConditionDataType = "form_set_conditions"
)

// Defines values for NewFunctionalityDataAttributesShowUptimeLastDays.
const (
	NewFunctionalityDataAttributesShowUptimeLastDaysN30 NewFunctionalityDataAttributesShowUptimeLastDays = 30
	NewFunctionalityDataAttributesShowUptimeLastDaysN60 NewFunctionalityDataAttributesShowUptimeLastDays = 60
	NewFunctionalityDataAttributesShowUptimeLastDaysN90 NewFunctionalityDataAttributesShowUptimeLastDays = 90
)

// Defines values for NewFunctionalityDataType.
const (
	NewFunctionalityDataTypeFunctionalities NewFunctionalityDataType = "functionalities"
)

// Defines values for NewHeartbeatDataAttributesIntervalUnit.
const (
	NewHeartbeatDataAttributesIntervalUnitHours   NewHeartbeatDataAttributesIntervalUnit = "hours"
	NewHeartbeatDataAttributesIntervalUnitMinutes NewHeartbeatDataAttributesIntervalUnit = "minutes"
	NewHeartbeatDataAttributesIntervalUnitSeconds NewHeartbeatDataAttributesIntervalUnit = "seconds"
)

// Defines values for NewHeartbeatDataAttributesNotificationTargetType.
const (
	NewHeartbeatDataAttributesNotificationTargetTypeEscalationPolicy NewHeartbeatDataAttributesNotificationTargetType = "EscalationPolicy"
	NewHeartbeatDataAttributesNotificationTargetTypeGroup            NewHeartbeatDataAttributesNotificationTargetType = "Group"
	NewHeartbeatDataAttributesNotificationTargetTypeService          NewHeartbeatDataAttributesNotificationTargetType = "Service"
	NewHeartbeatDataAttributesNotificationTargetTypeUser             NewHeartbeatDataAttributesNotificationTargetType = "User"
)

// Defines values for NewHeartbeatDataType.
const (
	NewHeartbeatDataTypeHeartbeats NewHeartbeatDataType = "heartbeats"
)

// Defines values for NewIncidentDataAttributesKind.
const (
	NewIncidentDataAttributesKindBackfilled NewIncidentDataAttributesKind = "backfilled"
	NewIncidentDataAttributesKindExample    NewIncidentDataAttributesKind = "example"
	NewIncidentDataAttributesKindExampleSub NewIncidentDataAttributesKind = "example_sub"
	NewIncidentDataAttributesKindNormal     NewIncidentDataAttributesKind = "normal"
	NewIncidentDataAttributesKindNormalSub  NewIncidentDataAttributesKind = "normal_sub"
	NewIncidentDataAttributesKindScheduled  NewIncidentDataAttributesKind = "scheduled"
	NewIncidentDataAttributesKindTest       NewIncidentDataAttributesKind = "test"
	NewIncidentDataAttributesKindTestSub    NewIncidentDataAttributesKind = "test_sub"
)

// Defines values for NewIncidentDataAttributesStatus.
const (
	NewIncidentDataAttributesStatusAcknowledged NewIncidentDataAttributesStatus = "acknowledged"
	NewIncidentDataAttributesStatusCancelled    NewIncidentDataAttributesStatus = "cancelled"
	NewIncidentDataAttributesStatusClosed       NewIncidentDataAttributesStatus = "closed"
	NewIncidentDataAttributesStatusCompleted    NewIncidentDataAttributesStatus = "completed"
	NewIncidentDataAttributesStatusDetected     NewIncidentDataAttributesStatus = "detected"
	NewIncidentDataAttributesStatusInProgress   NewIncidentDataAttributesStatus = "in_progress"
	NewIncidentDataAttributesStatusInTriage     NewIncidentDataAttributesStatus = "in_triage"
	NewIncidentDataAttributesStatusMitigated    NewIncidentDataAttributesStatus = "mitigated"
	NewIncidentDataAttributesStatusResolved     NewIncidentDataAttributesStatus = "resolved"
	NewIncidentDataAttributesStatusScheduled    NewIncidentDataAttributesStatus = "scheduled"
	NewIncidentDataAttributesStatusStarted      NewIncidentDataAttributesStatus = "started"
)

// Defines values for NewIncidentDataType.
const (
	NewIncidentDataTypeIncidents NewIncidentDataType = "incidents"
)

// Defines values for NewIncidentActionItemDataAttributesKind.
const (
	NewIncidentActionItemDataAttributesKindFollowUp NewIncidentActionItemDataAttributesKind = "follow_up"
	NewIncidentActionItemDataAttributesKindTask     NewIncidentActionItemDataAttributesKind = "task"
)

// Defines values for NewIncidentActionItemDataAttributesPriority.
const (
	NewIncidentActionItemDataAttributesPriorityHigh   NewIncidentActionItemDataAttributesPriority = "high"
	NewIncidentActionItemDataAttributesPriorityLow    NewIncidentActionItemDataAttributesPriority = "low"
	NewIncidentActionItemDataAttributesPriorityMedium NewIncidentActionItemDataAttributesPriority = "medium"
)

// Defines values for NewIncidentActionItemDataAttributesStatus.
const (
	NewIncidentActionItemDataAttributesStatusCancelled  NewIncidentActionItemDataAttributesStatus = "cancelled"
	NewIncidentActionItemDataAttributesStatusDone       NewIncidentActionItemDataAttributesStatus = "done"
	NewIncidentActionItemDataAttributesStatusInProgress NewIncidentActionItemDataAttributesStatus = "in_progress"
	NewIncidentActionItemDataAttributesStatusOpen       NewIncidentActionItemDataAttributesStatus = "open"
)

// Defines values for NewIncidentActionItemDataType.
const (
	NewIncidentActionItemDataTypeIncidentActionItems NewIncidentActionItemDataType = "incident_action_items"
)

// Defines values for NewIncidentCustomFieldSelectionDataType.
const (
	NewIncidentCustomFieldSelectionDataTypeIncidentCustomFieldSelections NewIncidentCustomFieldSelectionDataType = "incident_custom_field_selections"
)

// Defines values for NewIncidentEventDataAttributesVisibility.
const (
	NewIncidentEventDataAttributesVisibilityExternal NewIncidentEventDataAttributesVisibility = "external"
	NewIncidentEventDataAttributesVisibilityInternal NewIncidentEventDataAttributesVisibility = "internal"
)

// Defines values for NewIncidentEventDataType.
const (
	NewIncidentEventDataTypeIncidentEvents NewIncidentEventDataType = "incident_events"
)

// Defines values for NewIncidentEventFunctionalityDataAttributesStatus.
const (
	NewIncidentEventFunctionalityDataAttributesStatusMajorOutage   NewIncidentEventFunctionalityDataAttributesStatus = "major_outage"
	NewIncidentEventFunctionalityDataAttributesStatusOperational   NewIncidentEventFunctionalityDataAttributesStatus = "operational"
	NewIncidentEventFunctionalityDataAttributesStatusPartialOutage NewIncidentEventFunctionalityDataAttributesStatus = "partial_outage"
)

// Defines values for NewIncidentEventFunctionalityDataType.
const (
	NewIncidentEventFunctionalityDataTypeIncidentEventFunctionalities NewIncidentEventFunctionalityDataType = "incident_event_functionalities"
)

// Defines values for NewIncidentEventServiceDataAttributesStatus.
const (
	NewIncidentEventServiceDataAttributesStatusMajorOutage   NewIncidentEventServiceDataAttributesStatus = "major_outage"
	NewIncidentEventServiceDataAttributesStatusOperational   NewIncidentEventServiceDataAttributesStatus = "operational"
	NewIncidentEventServiceDataAttributesStatusPartialOutage NewIncidentEventServiceDataAttributesStatus = "partial_outage"
)

// Defines values for NewIncidentEventServiceDataType.
const (
	NewIncidentEventServiceDataTypeIncidentEventServices NewIncidentEventServiceDataType = "incident_event_services"
)

// Defines values for NewIncidentFeedbackDataAttributesRating.
const (
	NewIncidentFeedbackDataAttributesRatingN0 NewIncidentFeedbackDataAttributesRating = 0
	NewIncidentFeedbackDataAttributesRatingN1 NewIncidentFeedbackDataAttributesRating = 1
	NewIncidentFeedbackDataAttributesRatingN2 NewIncidentFeedbackDataAttributesRating = 2
	NewIncidentFeedbackDataAttributesRatingN3 NewIncidentFeedbackDataAttributesRating = 3
	NewIncidentFeedbackDataAttributesRatingN4 NewIncidentFeedbackDataAttributesRating = 4
)

// Defines values for NewIncidentFeedbackDataType.
const (
	NewIncidentFeedbackDataTypeIncidentFeedbacks NewIncidentFeedbackDataType = "incident_feedbacks"
)

// Defines values for NewIncidentFormFieldSelectionDataType.
const (
	NewIncidentFormFieldSelectionDataTypeIncidentFormFieldSelections NewIncidentFormFieldSelectionDataType = "incident_form_field_selections"
)

// Defines values for NewIncidentPermissionSetDataAttributesPrivateIncidentPermissions.
const (
	NewIncidentPermissionSetDataAttributesPrivateIncidentPermissionsCreate NewIncidentPermissionSetDataAttributesPrivateIncidentPermissions = "create"
	NewIncidentPermissionSetDataAttributesPrivateIncidentPermissionsDelete NewIncidentPermissionSetDataAttributesPrivateIncidentPermissions = "delete"
	NewIncidentPermissionSetDataAttributesPrivateIncidentPermissionsRead   NewIncidentPermissionSetDataAttributesPrivateIncidentPermissions = "read"
	NewIncidentPermissionSetDataAttributesPrivateIncidentPermissionsUpdate NewIncidentPermissionSetDataAttributesPrivateIncidentPermissions = "update"
)

// Defines values for NewIncidentPermissionSetDataAttributesPublicIncidentPermissions.
const (
	NewIncidentPermissionSetDataAttributesPublicIncidentPermissionsCreate NewIncidentPermissionSetDataAttributesPublicIncidentPermissions = "create"
	NewIncidentPermissionSetDataAttributesPublicIncidentPermissionsDelete NewIncidentPermissionSetDataAttributesPublicIncidentPermissions = "delete"
	NewIncidentPermissionSetDataAttributesPublicIncidentPermissionsRead   NewIncidentPermissionSetDataAttributesPublicIncidentPermissions = "read"
	NewIncidentPermissionSetDataAttributesPublicIncidentPermissionsUpdate NewIncidentPermissionSetDataAttributesPublicIncidentPermissions = "update"
)

// Defines values for NewIncidentPermissionSetDataType.
const (
	NewIncidentPermissionSetDataTypeIncidentPermissionSets NewIncidentPermissionSetDataType = "incident_permission_sets"
)

// Defines values for NewIncidentPermissionSetBooleanDataAttributesKind.
const (
	NewIncidentPermissionSetBooleanDataAttributesKindAssignIncidentRoles NewIncidentPermissionSetBooleanDataAttributesKind = "assign_incident_roles"
	NewIncidentPermissionSetBooleanDataAttributesKindInviteSubscribers   NewIncidentPermissionSetBooleanDataAttributesKind = "invite_subscribers"
	NewIncidentPermissionSetBooleanDataAttributesKindModifyCustomFields  NewIncidentPermissionSetBooleanDataAttributesKind = "modify_custom_fields"
	NewIncidentPermissionSetBooleanDataAttributesKindPublishToStatusPage NewIncidentPermissionSetBooleanDataAttributesKind = "publish_to_status_page"
	NewIncidentPermissionSetBooleanDataAttributesKindTriggerWorkflows    NewIncidentPermissionSetBooleanDataAttributesKind = "trigger_workflows"
	NewIncidentPermissionSetBooleanDataAttributesKindUpdateSummary       NewIncidentPermissionSetBooleanDataAttributesKind = "update_summary"
	NewIncidentPermissionSetBooleanDataAttributesKindUpdateTimeline      NewIncidentPermissionSetBooleanDataAttributesKind = "update_timeline"
)

// Defines values for NewIncidentPermissionSetBooleanDataType.
const (
	NewIncidentPermissionSetBooleanDataTypeIncidentPermissionSetBooleans NewIncidentPermissionSetBooleanDataType = "incident_permission_set_booleans"
)

// Defines values for NewIncidentPermissionSetResourceDataAttributesKind.
const (
	NewIncidentPermissionSetResourceDataAttributesKindIncidentTypes NewIncidentPermissionSetResourceDataAttributesKind = "incident_types"
	NewIncidentPermissionSetResourceDataAttributesKindSeverities    NewIncidentPermissionSetResourceDataAttributesKind = "severities"
	NewIncidentPermissionSetResourceDataAttributesKindStatuses      NewIncidentPermissionSetResourceDataAttributesKind = "statuses"
	NewIncidentPermissionSetResourceDataAttributesKindSubStatuses   NewIncidentPermissionSetResourceDataAttributesKind = "sub_statuses"
)

// Defines values for NewIncidentPermissionSetResourceDataType.
const (
	NewIncidentPermissionSetResourceDataTypeIncidentPermissionSetResources NewIncidentPermissionSetResourceDataType = "incident_permission_set_resources"
)

// Defines values for NewIncidentRoleDataType.
const (
	NewIncidentRoleDataTypeIncidentRoles NewIncidentRoleDataType = "incident_roles"
)

// Defines values for NewIncidentRoleTaskDataAttributesPriority.
const (
	NewIncidentRoleTaskDataAttributesPriorityHigh   NewIncidentRoleTaskDataAttributesPriority = "high"
	NewIncidentRoleTaskDataAttributesPriorityLow    NewIncidentRoleTaskDataAttributesPriority = "low"
	NewIncidentRoleTaskDataAttributesPriorityMedium NewIncidentRoleTaskDataAttributesPriority = "medium"
)

// Defines values for NewIncidentRoleTaskDataType.
const (
	NewIncidentRoleTaskDataTypeIncidentRoleTasks NewIncidentRoleTaskDataType = "incident_role_tasks"
)

// Defines values for NewIncidentStatusPageEventDataAttributesStatus.
const (
	NewIncidentStatusPageEventDataAttributesStatusCompleted     NewIncidentStatusPageEventDataAttributesStatus = "completed"
	NewIncidentStatusPageEventDataAttributesStatusIdentified    NewIncidentStatusPageEventDataAttributesStatus = "identified"
	NewIncidentStatusPageEventDataAttributesStatusInProgress    NewIncidentStatusPageEventDataAttributesStatus = "in_progress"
	NewIncidentStatusPageEventDataAttributesStatusInvestigating NewIncidentStatusPageEventDataAttributesStatus = "investigating"
	NewIncidentStatusPageEventDataAttributesStatusMonitoring    NewIncidentStatusPageEventDataAttributesStatus = "monitoring"
	NewIncidentStatusPageEventDataAttributesStatusResolved      NewIncidentStatusPageEventDataAttributesStatus = "resolved"
	NewIncidentStatusPageEventDataAttributesStatusScheduled     NewIncidentStatusPageEventDataAttributesStatus = "scheduled"
	NewIncidentStatusPageEventDataAttributesStatusVerifying     NewIncidentStatusPageEventDataAttributesStatus = "verifying"
)

// Defines values for NewIncidentStatusPageEventDataType.
const (
	NewIncidentStatusPageEventDataTypeIncidentStatusPageEvents NewIncidentStatusPageEventDataType = "incident_status_page_events"
)

// Defines values for NewIncidentSubStatusDataType.
const (
	NewIncidentSubStatusDataTypeIncidentSubStatuses NewIncidentSubStatusDataType = "incident_sub_statuses"
)

// Defines values for NewIncidentTypeDataType.
const (
	NewIncidentTypeDataTypeIncidentTypes NewIncidentTypeDataType = "incident_types"
)

// Defines values for NewLiveCallRouterDataAttributesCountryCode.
const (
	NewLiveCallRouterDataAttributesCountryCodeAU NewLiveCallRouterDataAttributesCountryCode = "AU"
	NewLiveCallRouterDataAttributesCountryCodeCA NewLiveCallRouterDataAttributesCountryCode = "CA"
	NewLiveCallRouterDataAttributesCountryCodeGB NewLiveCallRouterDataAttributesCountryCode = "GB"
	NewLiveCallRouterDataAttributesCountryCodeNZ NewLiveCallRouterDataAttributesCountryCode = "NZ"
	NewLiveCallRouterDataAttributesCountryCodeUS NewLiveCallRouterDataAttributesCountryCode = "US"
)

// Defines values for NewLiveCallRouterDataAttributesEscalationPolicyTriggerParamsType.
const (
	NewLiveCallRouterDataAttributesEscalationPolicyTriggerParamsTypeEscalationPolicy NewLiveCallRouterDataAttributesEscalationPolicyTriggerParamsType = "escalation_policy"
	NewLiveCallRouterDataAttributesEscalationPolicyTriggerParamsTypeGroup            NewLiveCallRouterDataAttributesEscalationPolicyTriggerParamsType = "group"
	NewLiveCallRouterDataAttributesEscalationPolicyTriggerParamsTypeService          NewLiveCallRouterDataAttributesEscalationPolicyTriggerParamsType = "service"
)

// Defines values for NewLiveCallRouterDataAttributesKind.
const (
	NewLiveCallRouterDataAttributesKindLive      NewLiveCallRouterDataAttributesKind = "live"
	NewLiveCallRouterDataAttributesKindVoicemail NewLiveCallRouterDataAttributesKind = "voicemail"
)

// Defines values for NewLiveCallRouterDataAttributesPhoneType.
const (
	NewLiveCallRouterDataAttributesPhoneTypeLocal    NewLiveCallRouterDataAttributesPhoneType = "local"
	NewLiveCallRouterDataAttributesPhoneTypeTollFree NewLiveCallRouterDataAttributesPhoneType = "toll_free"
)

// Defines values for NewLiveCallRouterDataType.
const (
	NewLiveCallRouterDataTypeLiveCallRouters NewLiveCallRouterDataType = "live_call_routers"
)

// Defines values for NewOnCallRoleDataAttributesAlertSourcesPermissions.
const (
	NewOnCallRoleDataAttributesAlertSourcesPermissionsCreate NewOnCallRoleDataAttributesAlertSourcesPermissions = "create"
	NewOnCallRoleDataAttributesAlertSourcesPermissionsDelete NewOnCallRoleDataAttributesAlertSourcesPermissions = "delete"
	NewOnCallRoleDataAttributesAlertSourcesPermissionsUpdate NewOnCallRoleDataAttributesAlertSourcesPermissions = "update"
)

// Defines values for NewOnCallRoleDataAttributesAlertUrgencyPermissions.
const (
	NewOnCallRoleDataAttributesAlertUrgencyPermissionsCreate NewOnCallRoleDataAttributesAlertUrgencyPermissions = "create"
	NewOnCallRoleDataAttributesAlertUrgencyPermissionsDelete NewOnCallRoleDataAttributesAlertUrgencyPermissions = "delete"
	NewOnCallRoleDataAttributesAlertUrgencyPermissionsRead   NewOnCallRoleDataAttributesAlertUrgencyPermissions = "read"
	NewOnCallRoleDataAttributesAlertUrgencyPermissionsUpdate NewOnCallRoleDataAttributesAlertUrgencyPermissions = "update"
)

// Defines values for NewOnCallRoleDataAttributesAlertsPermissions.
const (
	NewOnCallRoleDataAttributesAlertsPermissionsCreate NewOnCallRoleDataAttributesAlertsPermissions = "create"
	NewOnCallRoleDataAttributesAlertsPermissionsRead   NewOnCallRoleDataAttributesAlertsPermissions = "read"
	NewOnCallRoleDataAttributesAlertsPermissionsUpdate NewOnCallRoleDataAttributesAlertsPermissions = "update"
)

// Defines values for NewOnCallRoleDataAttributesApiKeysPermissions.
const (
	NewOnCallRoleDataAttributesApiKeysPermissionsCreate NewOnCallRoleDataAttributesApiKeysPermissions = "create"
	NewOnCallRoleDataAttributesApiKeysPermissionsDelete NewOnCallRoleDataAttributesApiKeysPermissions = "delete"
	NewOnCallRoleDataAttributesApiKeysPermissionsRead   NewOnCallRoleDataAttributesApiKeysPermissions = "read"
	NewOnCallRoleDataAttributesApiKeysPermissionsUpdate NewOnCallRoleDataAttributesApiKeysPermissions = "update"
)

// Defines values for NewOnCallRoleDataAttributesAuditsPermissions.
const (
	NewOnCallRoleDataAttributesAuditsPermissionsCreate NewOnCallRoleDataAttributesAuditsPermissions = "create"
	NewOnCallRoleDataAttributesAuditsPermissionsDelete NewOnCallRoleDataAttributesAuditsPermissions = "delete"
	NewOnCallRoleDataAttributesAuditsPermissionsRead   NewOnCallRoleDataAttributesAuditsPermissions = "read"
	NewOnCallRoleDataAttributesAuditsPermissionsUpdate NewOnCallRoleDataAttributesAuditsPermissions = "update"
)

// Defines values for NewOnCallRoleDataAttributesContactsPermissions.
const (
	NewOnCallRoleDataAttributesContactsPermissionsRead NewOnCallRoleDataAttributesContactsPermissions = "read"
)

// Defines values for NewOnCallRoleDataAttributesEscalationPoliciesPermissions.
const (
	NewOnCallRoleDataAttributesEscalationPoliciesPermissionsCreate NewOnCallRoleDataAttributesEscalationPoliciesPermissions = "create"
	NewOnCallRoleDataAttributesEscalationPoliciesPermissionsDelete NewOnCallRoleDataAttributesEscalationPoliciesPermissions = "delete"
	NewOnCallRoleDataAttributesEscalationPoliciesPermissionsRead   NewOnCallRoleDataAttributesEscalationPoliciesPermissions = "read"
	NewOnCallRoleDataAttributesEscalationPoliciesPermissionsUpdate NewOnCallRoleDataAttributesEscalationPoliciesPermissions = "update"
)

// Defines values for NewOnCallRoleDataAttributesGroupsPermissions.
const (
	NewOnCallRoleDataAttributesGroupsPermissionsCreate NewOnCallRoleDataAttributesGroupsPermissions = "create"
	NewOnCallRoleDataAttributesGroupsPermissionsDelete NewOnCallRoleDataAttributesGroupsPermissions = "delete"
	NewOnCallRoleDataAttributesGroupsPermissionsRead   NewOnCallRoleDataAttributesGroupsPermissions = "read"
	NewOnCallRoleDataAttributesGroupsPermissionsUpdate NewOnCallRoleDataAttributesGroupsPermissions = "update"
)

// Defines values for NewOnCallRoleDataAttributesHeartbeatsPermissions.
const (
	NewOnCallRoleDataAttributesHeartbeatsPermissionsCreate NewOnCallRoleDataAttributesHeartbeatsPermissions = "create"
	NewOnCallRoleDataAttributesHeartbeatsPermissionsDelete NewOnCallRoleDataAttributesHeartbeatsPermissions = "delete"
	NewOnCallRoleDataAttributesHeartbeatsPermissionsRead   NewOnCallRoleDataAttributesHeartbeatsPermissions = "read"
	NewOnCallRoleDataAttributesHeartbeatsPermissionsUpdate NewOnCallRoleDataAttributesHeartbeatsPermissions = "update"
)

// Defines values for NewOnCallRoleDataAttributesIntegrationsPermissions.
const (
	NewOnCallRoleDataAttributesIntegrationsPermissionsCreate NewOnCallRoleDataAttributesIntegrationsPermissions = "create"
	NewOnCallRoleDataAttributesIntegrationsPermissionsDelete NewOnCallRoleDataAttributesIntegrationsPermissions = "delete"
	NewOnCallRoleDataAttributesIntegrationsPermissionsRead   NewOnCallRoleDataAttributesIntegrationsPermissions = "read"
	NewOnCallRoleDataAttributesIntegrationsPermissionsUpdate NewOnCallRoleDataAttributesIntegrationsPermissions = "update"
)

// Defines values for NewOnCallRoleDataAttributesInvitationsPermissions.
const (
	NewOnCallRoleDataAttributesInvitationsPermissionsCreate NewOnCallRoleDataAttributesInvitationsPermissions = "create"
	NewOnCallRoleDataAttributesInvitationsPermissionsDelete NewOnCallRoleDataAttributesInvitationsPermissions = "delete"
	NewOnCallRoleDataAttributesInvitationsPermissionsRead   NewOnCallRoleDataAttributesInvitationsPermissions = "read"
	NewOnCallRoleDataAttributesInvitationsPermissionsUpdate NewOnCallRoleDataAttributesInvitationsPermissions = "update"
)

// Defines values for NewOnCallRoleDataAttributesLiveCallRoutingPermissions.
const (
	NewOnCallRoleDataAttributesLiveCallRoutingPermissionsCreate NewOnCallRoleDataAttributesLiveCallRoutingPermissions = "create"
	NewOnCallRoleDataAttributesLiveCallRoutingPermissionsDelete NewOnCallRoleDataAttributesLiveCallRoutingPermissions = "delete"
	NewOnCallRoleDataAttributesLiveCallRoutingPermissionsRead   NewOnCallRoleDataAttributesLiveCallRoutingPermissions = "read"
	NewOnCallRoleDataAttributesLiveCallRoutingPermissionsUpdate NewOnCallRoleDataAttributesLiveCallRoutingPermissions = "update"
)

// Defines values for NewOnCallRoleDataAttributesScheduleOverridePermissions.
const (
	NewOnCallRoleDataAttributesScheduleOverridePermissionsCreate NewOnCallRoleDataAttributesScheduleOverridePermissions = "create"
	NewOnCallRoleDataAttributesScheduleOverridePermissionsUpdate NewOnCallRoleDataAttributesScheduleOverridePermissions = "update"
)

// Defines values for NewOnCallRoleDataAttributesSchedulesPermissions.
const (
	NewOnCallRoleDataAttributesSchedulesPermissionsCreate NewOnCallRoleDataAttributesSchedulesPermissions = "create"
	NewOnCallRoleDataAttributesSchedulesPermissionsDelete NewOnCallRoleDataAttributesSchedulesPermissions = "delete"
	NewOnCallRoleDataAttributesSchedulesPermissionsRead   NewOnCallRoleDataAttributesSchedulesPermissions = "read"
	NewOnCallRoleDataAttributesSchedulesPermissionsUpdate NewOnCallRoleDataAttributesSchedulesPermissions = "update"
)

// Defines values for NewOnCallRoleDataAttributesServicesPermissions.
const (
	NewOnCallRoleDataAttributesServicesPermissionsCreate NewOnCallRoleDataAttributesServicesPermissions = "create"
	NewOnCallRoleDataAttributesServicesPermissionsDelete NewOnCallRoleDataAttributesServicesPermissions = "delete"
	NewOnCallRoleDataAttributesServicesPermissionsRead   NewOnCallRoleDataAttributesServicesPermissions = "read"
	NewOnCallRoleDataAttributesServicesPermissionsUpdate NewOnCallRoleDataAttributesServicesPermissions = "update"
)

// Defines values for NewOnCallRoleDataAttributesWebhooksPermissions.
const (
	NewOnCallRoleDataAttributesWebhooksPermissionsCreate NewOnCallRoleDataAttributesWebhooksPermissions = "create"
	NewOnCallRoleDataAttributesWebhooksPermissionsDelete NewOnCallRoleDataAttributesWebhooksPermissions = "delete"
	NewOnCallRoleDataAttributesWebhooksPermissionsRead   NewOnCallRoleDataAttributesWebhooksPermissions = "read"
	NewOnCallRoleDataAttributesWebhooksPermissionsUpdate NewOnCallRoleDataAttributesWebhooksPermissions = "update"
)

// Defines values for NewOnCallRoleDataAttributesWorkflowsPermissions.
const (
	NewOnCallRoleDataAttributesWorkflowsPermissionsCreate NewOnCallRoleDataAttributesWorkflowsPermissions = "create"
	NewOnCallRoleDataAttributesWorkflowsPermissionsDelete NewOnCallRoleDataAttributesWorkflowsPermissions = "delete"
	NewOnCallRoleDataAttributesWorkflowsPermissionsRead   NewOnCallRoleDataAttributesWorkflowsPermissions = "read"
	NewOnCallRoleDataAttributesWorkflowsPermissionsUpdate NewOnCallRoleDataAttributesWorkflowsPermissions = "update"
)

// Defines values for NewOnCallRoleDataType.
const (
	NewOnCallRoleDataTypeOnCallRoles NewOnCallRoleDataType = "on_call_roles"
)

// Defines values for NewOnCallShadowDataAttributesShadowableType.
const (
	NewOnCallShadowDataAttributesShadowableTypeSchedule NewOnCallShadowDataAttributesShadowableType = "Schedule"
	NewOnCallShadowDataAttributesShadowableTypeUser     NewOnCallShadowDataAttributesShadowableType = "User"
)

// Defines values for NewOnCallShadowDataType.
const (
	NewOnCallShadowDataTypeOnCallShadows NewOnCallShadowDataType = "on_call_shadows"
)

// Defines values for NewOverrideShiftDataType.
const (
	NewOverrideShiftDataTypeShifts NewOverrideShiftDataType = "shifts"
)

// Defines values for NewPlaybookDataType.
const (
	NewPlaybookDataTypePlaybooks NewPlaybookDataType = "playbooks"
)

// Defines values for NewPlaybookTaskDataType.
const (
	NewPlaybookTaskDataTypePlaybookTasks NewPlaybookTaskDataType = "playbook_tasks"
)

// Defines values for NewPostMortemTemplateDataAttributesFormat.
const (
	NewPostMortemTemplateDataAttributesFormatHtml     NewPostMortemTemplateDataAttributesFormat = "html"
	NewPostMortemTemplateDataAttributesFormatMarkdown NewPostMortemTemplateDataAttributesFormat = "markdown"
)

// Defines values for NewPostMortemTemplateDataType.
const (
	NewPostMortemTemplateDataTypePostMortemTemplates NewPostMortemTemplateDataType = "post_mortem_templates"
)

// Defines values for NewPulseDataType.
const (
	NewPulseDataTypePulses NewPulseDataType = "pulses"
)

// Defines values for NewRetrospectiveProcessDataType.
const (
	NewRetrospectiveProcessDataTypeRetrospectiveProcesses NewRetrospectiveProcessDataType = "retrospective_processes"
)

// Defines values for NewRetrospectiveProcessGroupDataType.
const (
	NewRetrospectiveProcessGroupDataTypeRetrospectiveProcessGroups NewRetrospectiveProcessGroupDataType = "retrospective_process_groups"
)

// Defines values for NewRetrospectiveProcessGroupStepDataType.
const (
	NewRetrospectiveProcessGroupStepDataTypeRetrospectiveProcessGroupSteps NewRetrospectiveProcessGroupStepDataType = "retrospective_process_group_steps"
)

// Defines values for NewRetrospectiveStepDataType.
const (
	NewRetrospectiveStepDataTypeRetrospectiveSteps NewRetrospectiveStepDataType = "retrospective_steps"
)

// Defines values for NewRoleDataAttributesAlertsPermissions.
const (
	NewRoleDataAttributesAlertsPermissionsCreate NewRoleDataAttributesAlertsPermissions = "create"
	NewRoleDataAttributesAlertsPermissionsRead   NewRoleDataAttributesAlertsPermissions = "read"
)

// Defines values for NewRoleDataAttributesApiKeysPermissions.
const (
	NewRoleDataAttributesApiKeysPermissionsCreate NewRoleDataAttributesApiKeysPermissions = "create"
	NewRoleDataAttributesApiKeysPermissionsDelete NewRoleDataAttributesApiKeysPermissions = "delete"
	NewRoleDataAttributesApiKeysPermissionsRead   NewRoleDataAttributesApiKeysPermissions = "read"
	NewRoleDataAttributesApiKeysPermissionsUpdate NewRoleDataAttributesApiKeysPermissions = "update"
)

// Defines values for NewRoleDataAttributesAuditsPermissions.
const (
	NewRoleDataAttributesAuditsPermissionsCreate NewRoleDataAttributesAuditsPermissions = "create"
	NewRoleDataAttributesAuditsPermissionsDelete NewRoleDataAttributesAuditsPermissions = "delete"
	NewRoleDataAttributesAuditsPermissionsRead   NewRoleDataAttributesAuditsPermissions = "read"
	NewRoleDataAttributesAuditsPermissionsUpdate NewRoleDataAttributesAuditsPermissions = "update"
)

// Defines values for NewRoleDataAttributesBillingPermissions.
const (
	NewRoleDataAttributesBillingPermissionsCreate NewRoleDataAttributesBillingPermissions = "create"
	NewRoleDataAttributesBillingPermissionsDelete NewRoleDataAttributesBillingPermissions = "delete"
	NewRoleDataAttributesBillingPermissionsRead   NewRoleDataAttributesBillingPermissions = "read"
	NewRoleDataAttributesBillingPermissionsUpdate NewRoleDataAttributesBillingPermissions = "update"
)

// Defines values for NewRoleDataAttributesEnvironmentsPermissions.
const (
	NewRoleDataAttributesEnvironmentsPermissionsCreate NewRoleDataAttributesEnvironmentsPermissions = "create"
	NewRoleDataAttributesEnvironmentsPermissionsDelete NewRoleDataAttributesEnvironmentsPermissions = "delete"
	NewRoleDataAttributesEnvironmentsPermissionsRead   NewRoleDataAttributesEnvironmentsPermissions = "read"
	NewRoleDataAttributesEnvironmentsPermissionsUpdate NewRoleDataAttributesEnvironmentsPermissions = "update"
)

// Defines values for NewRoleDataAttributesFormFieldsPermissions.
const (
	NewRoleDataAttributesFormFieldsPermissionsCreate NewRoleDataAttributesFormFieldsPermissions = "create"
	NewRoleDataAttributesFormFieldsPermissionsDelete NewRoleDataAttributesFormFieldsPermissions = "delete"
	NewRoleDataAttributesFormFieldsPermissionsRead   NewRoleDataAttributesFormFieldsPermissions = "read"
	NewRoleDataAttributesFormFieldsPermissionsUpdate NewRoleDataAttributesFormFieldsPermissions = "update"
)

// Defines values for NewRoleDataAttributesFunctionalitiesPermissions.
const (
	NewRoleDataAttributesFunctionalitiesPermissionsCreate NewRoleDataAttributesFunctionalitiesPermissions = "create"
	NewRoleDataAttributesFunctionalitiesPermissionsDelete NewRoleDataAttributesFunctionalitiesPermissions = "delete"
	NewRoleDataAttributesFunctionalitiesPermissionsRead   NewRoleDataAttributesFunctionalitiesPermissions = "read"
	NewRoleDataAttributesFunctionalitiesPermissionsUpdate NewRoleDataAttributesFunctionalitiesPermissions = "update"
)

// Defines values for NewRoleDataAttributesGroupsPermissions.
const (
	NewRoleDataAttributesGroupsPermissionsCreate NewRoleDataAttributesGroupsPermissions = "create"
	NewRoleDataAttributesGroupsPermissionsDelete NewRoleDataAttributesGroupsPermissions = "delete"
	NewRoleDataAttributesGroupsPermissionsRead   NewRoleDataAttributesGroupsPermissions = "read"
	NewRoleDataAttributesGroupsPermissionsUpdate NewRoleDataAttributesGroupsPermissions = "update"
)

// Defines values for NewRoleDataAttributesIncidentCausesPermissions.
const (
	NewRoleDataAttributesIncidentCausesPermissionsCreate NewRoleDataAttributesIncidentCausesPermissions = "create"
	NewRoleDataAttributesIncidentCausesPermissionsDelete NewRoleDataAttributesIncidentCausesPermissions = "delete"
	NewRoleDataAttributesIncidentCausesPermissionsRead   NewRoleDataAttributesIncidentCausesPermissions = "read"
	NewRoleDataAttributesIncidentCausesPermissionsUpdate NewRoleDataAttributesIncidentCausesPermissions = "update"
)

// Defines values for NewRoleDataAttributesIncidentFeedbacksPermissions.
const (
	NewRoleDataAttributesIncidentFeedbacksPermissionsCreate NewRoleDataAttributesIncidentFeedbacksPermissions = "create"
	NewRoleDataAttributesIncidentFeedbacksPermissionsDelete NewRoleDataAttributesIncidentFeedbacksPermissions = "delete"
	NewRoleDataAttributesIncidentFeedbacksPermissionsRead   NewRoleDataAttributesIncidentFeedbacksPermissions = "read"
	NewRoleDataAttributesIncidentFeedbacksPermissionsUpdate NewRoleDataAttributesIncidentFeedbacksPermissions = "update"
)

// Defines values for NewRoleDataAttributesIncidentRolesPermissions.
const (
	NewRoleDataAttributesIncidentRolesPermissionsCreate NewRoleDataAttributesIncidentRolesPermissions = "create"
	NewRoleDataAttributesIncidentRolesPermissionsDelete NewRoleDataAttributesIncidentRolesPermissions = "delete"
	NewRoleDataAttributesIncidentRolesPermissionsRead   NewRoleDataAttributesIncidentRolesPermissions = "read"
	NewRoleDataAttributesIncidentRolesPermissionsUpdate NewRoleDataAttributesIncidentRolesPermissions = "update"
)

// Defines values for NewRoleDataAttributesIncidentTypesPermissions.
const (
	NewRoleDataAttributesIncidentTypesPermissionsCreate NewRoleDataAttributesIncidentTypesPermissions = "create"
	NewRoleDataAttributesIncidentTypesPermissionsDelete NewRoleDataAttributesIncidentTypesPermissions = "delete"
	NewRoleDataAttributesIncidentTypesPermissionsRead   NewRoleDataAttributesIncidentTypesPermissions = "read"
	NewRoleDataAttributesIncidentTypesPermissionsUpdate NewRoleDataAttributesIncidentTypesPermissions = "update"
)

// Defines values for NewRoleDataAttributesIncidentsPermissions.
const (
	NewRoleDataAttributesIncidentsPermissionsCreate NewRoleDataAttributesIncidentsPermissions = "create"
	NewRoleDataAttributesIncidentsPermissionsDelete NewRoleDataAttributesIncidentsPermissions = "delete"
	NewRoleDataAttributesIncidentsPermissionsRead   NewRoleDataAttributesIncidentsPermissions = "read"
	NewRoleDataAttributesIncidentsPermissionsUpdate NewRoleDataAttributesIncidentsPermissions = "update"
)

// Defines values for NewRoleDataAttributesInvitationsPermissions.
const (
	NewRoleDataAttributesInvitationsPermissionsCreate NewRoleDataAttributesInvitationsPermissions = "create"
	NewRoleDataAttributesInvitationsPermissionsDelete NewRoleDataAttributesInvitationsPermissions = "delete"
	NewRoleDataAttributesInvitationsPermissionsRead   NewRoleDataAttributesInvitationsPermissions = "read"
	NewRoleDataAttributesInvitationsPermissionsUpdate NewRoleDataAttributesInvitationsPermissions = "update"
)

// Defines values for NewRoleDataAttributesPlaybooksPermissions.
const (
	NewRoleDataAttributesPlaybooksPermissionsCreate NewRoleDataAttributesPlaybooksPermissions = "create"
	NewRoleDataAttributesPlaybooksPermissionsDelete NewRoleDataAttributesPlaybooksPermissions = "delete"
	NewRoleDataAttributesPlaybooksPermissionsRead   NewRoleDataAttributesPlaybooksPermissions = "read"
	NewRoleDataAttributesPlaybooksPermissionsUpdate NewRoleDataAttributesPlaybooksPermissions = "update"
)

// Defines values for NewRoleDataAttributesPrivateIncidentsPermissions.
const (
	NewRoleDataAttributesPrivateIncidentsPermissionsCreate NewRoleDataAttributesPrivateIncidentsPermissions = "create"
	NewRoleDataAttributesPrivateIncidentsPermissionsDelete NewRoleDataAttributesPrivateIncidentsPermissions = "delete"
	NewRoleDataAttributesPrivateIncidentsPermissionsRead   NewRoleDataAttributesPrivateIncidentsPermissions = "read"
	NewRoleDataAttributesPrivateIncidentsPermissionsUpdate NewRoleDataAttributesPrivateIncidentsPermissions = "update"
)

// Defines values for NewRoleDataAttributesPulsesPermissions.
const (
	NewRoleDataAttributesPulsesPermissionsCreate NewRoleDataAttributesPulsesPermissions = "create"
	NewRoleDataAttributesPulsesPermissionsRead   NewRoleDataAttributesPulsesPermissions = "read"
	NewRoleDataAttributesPulsesPermissionsUpdate NewRoleDataAttributesPulsesPermissions = "update"
)

// Defines values for NewRoleDataAttributesRetrospectivePermissions.
const (
	NewRoleDataAttributesRetrospectivePermissionsCreate NewRoleDataAttributesRetrospectivePermissions = "create"
	NewRoleDataAttributesRetrospectivePermissionsDelete NewRoleDataAttributesRetrospectivePermissions = "delete"
	NewRoleDataAttributesRetrospectivePermissionsRead   NewRoleDataAttributesRetrospectivePermissions = "read"
	NewRoleDataAttributesRetrospectivePermissionsUpdate NewRoleDataAttributesRetrospectivePermissions = "update"
)

// Defines values for NewRoleDataAttributesRolesPermissions.
const (
	NewRoleDataAttributesRolesPermissionsCreate NewRoleDataAttributesRolesPermissions = "create"
	NewRoleDataAttributesRolesPermissionsDelete NewRoleDataAttributesRolesPermissions = "delete"
	NewRoleDataAttributesRolesPermissionsRead   NewRoleDataAttributesRolesPermissions = "read"
	NewRoleDataAttributesRolesPermissionsUpdate NewRoleDataAttributesRolesPermissions = "update"
)

// Defines values for NewRoleDataAttributesSecretsPermissions.
const (
	NewRoleDataAttributesSecretsPermissionsCreate NewRoleDataAttributesSecretsPermissions = "create"
	NewRoleDataAttributesSecretsPermissionsDelete NewRoleDataAttributesSecretsPermissions = "delete"
	NewRoleDataAttributesSecretsPermissionsRead   NewRoleDataAttributesSecretsPermissions = "read"
	NewRoleDataAttributesSecretsPermissionsUpdate NewRoleDataAttributesSecretsPermissions = "update"
)

// Defines values for NewRoleDataAttributesServicesPermissions.
const (
	NewRoleDataAttributesServicesPermissionsCreate NewRoleDataAttributesServicesPermissions = "create"
	NewRoleDataAttributesServicesPermissionsDelete NewRoleDataAttributesServicesPermissions = "delete"
	NewRoleDataAttributesServicesPermissionsRead   NewRoleDataAttributesServicesPermissions = "read"
	NewRoleDataAttributesServicesPermissionsUpdate NewRoleDataAttributesServicesPermissions = "update"
)

// Defines values for NewRoleDataAttributesSeveritiesPermissions.
const (
	NewRoleDataAttributesSeveritiesPermissionsCreate NewRoleDataAttributesSeveritiesPermissions = "create"
	NewRoleDataAttributesSeveritiesPermissionsDelete NewRoleDataAttributesSeveritiesPermissions = "delete"
	NewRoleDataAttributesSeveritiesPermissionsRead   NewRoleDataAttributesSeveritiesPermissions = "read"
	NewRoleDataAttributesSeveritiesPermissionsUpdate NewRoleDataAttributesSeveritiesPermissions = "update"
)

// Defines values for NewRoleDataAttributesStatusPagesPermissions.
const (
	NewRoleDataAttributesStatusPagesPermissionsCreate NewRoleDataAttributesStatusPagesPermissions = "create"
	NewRoleDataAttributesStatusPagesPermissionsDelete NewRoleDataAttributesStatusPagesPermissions = "delete"
	NewRoleDataAttributesStatusPagesPermissionsRead   NewRoleDataAttributesStatusPagesPermissions = "read"
	NewRoleDataAttributesStatusPagesPermissionsUpdate NewRoleDataAttributesStatusPagesPermissions = "update"
)

// Defines values for NewRoleDataAttributesWebhooksPermissions.
const (
	NewRoleDataAttributesWebhooksPermissionsCreate NewRoleDataAttributesWebhooksPermissions = "create"
	NewRoleDataAttributesWebhooksPermissionsDelete NewRoleDataAttributesWebhooksPermissions = "delete"
	NewRoleDataAttributesWebhooksPermissionsRead   NewRoleDataAttributesWebhooksPermissions = "read"
	NewRoleDataAttributesWebhooksPermissionsUpdate NewRoleDataAttributesWebhooksPermissions = "update"
)

// Defines values for NewRoleDataAttributesWorkflowsPermissions.
const (
	NewRoleDataAttributesWorkflowsPermissionsCreate NewRoleDataAttributesWorkflowsPermissions = "create"
	NewRoleDataAttributesWorkflowsPermissionsDelete NewRoleDataAttributesWorkflowsPermissions = "delete"
	NewRoleDataAttributesWorkflowsPermissionsRead   NewRoleDataAttributesWorkflowsPermissions = "read"
	NewRoleDataAttributesWorkflowsPermissionsUpdate NewRoleDataAttributesWorkflowsPermissions = "update"
)

// Defines values for NewRoleDataType.
const (
	NewRoleDataTypeRoles NewRoleDataType = "roles"
)

// Defines values for NewScheduleDataType.
const (
	NewScheduleDataTypeSchedules NewScheduleDataType = "schedules"
)

// Defines values for NewScheduleRotationDataAttributesActiveDays.
const (
	NewScheduleRotationDataAttributesActiveDaysF NewScheduleRotationDataAttributesActiveDays = "F"
	NewScheduleRotationDataAttributesActiveDaysM NewScheduleRotationDataAttributesActiveDays = "M"
	NewScheduleRotationDataAttributesActiveDaysR NewScheduleRotationDataAttributesActiveDays = "R"
	NewScheduleRotationDataAttributesActiveDaysS NewScheduleRotationDataAttributesActiveDays = "S"
	NewScheduleRotationDataAttributesActiveDaysT NewScheduleRotationDataAttributesActiveDays = "T"
	NewScheduleRotationDataAttributesActiveDaysU NewScheduleRotationDataAttributesActiveDays = "U"
	NewScheduleRotationDataAttributesActiveDaysW NewScheduleRotationDataAttributesActiveDays = "W"
)

// Defines values for NewScheduleRotationDataAttributesScheduleRotationableAttributesHandoffDay.
const (
	NewScheduleRotationDataAttributesScheduleRotationableAttributesHandoffDayFirstDayOfMonth NewScheduleRotationDataAttributesScheduleRotationableAttributesHandoffDay = "first_day_of_month"
	NewScheduleRotationDataAttributesScheduleRotationableAttributesHandoffDayLastDayOfMonth  NewScheduleRotationDataAttributesScheduleRotationableAttributesHandoffDay = "last_day_of_month"
)

// Defines values for NewScheduleRotationDataAttributesScheduleRotationableAttributesShiftLengthUnit.
const (
	NewScheduleRotationDataAttributesScheduleRotationableAttributesShiftLengthUnitDays  NewScheduleRotationDataAttributesScheduleRotationableAttributesShiftLengthUnit = "days"
	NewScheduleRotationDataAttributesScheduleRotationableAttributesShiftLengthUnitHours NewScheduleRotationDataAttributesScheduleRotationableAttributesShiftLengthUnit = "hours"
	NewScheduleRotationDataAttributesScheduleRotationableAttributesShiftLengthUnitWeeks NewScheduleRotationDataAttributesScheduleRotationableAttributesShiftLengthUnit = "weeks"
)

// Defines values for NewScheduleRotationDataAttributesScheduleRotationableType.
const (
	NewScheduleRotationDataAttributesScheduleRotationableTypeScheduleBiweeklyRotation NewScheduleRotationDataAttributesScheduleRotationableType = "ScheduleBiweeklyRotation"
	NewScheduleRotationDataAttributesScheduleRotationableTypeScheduleCustomRotation   NewScheduleRotationDataAttributesScheduleRotationableType = "ScheduleCustomRotation"
	NewScheduleRotationDataAttributesScheduleRotationableTypeScheduleDailyRotation    NewScheduleRotationDataAttributesScheduleRotationableType = "ScheduleDailyRotation"
	NewScheduleRotationDataAttributesScheduleRotationableTypeScheduleMonthlyRotation  NewScheduleRotationDataAttributesScheduleRotationableType = "ScheduleMonthlyRotation"
	NewScheduleRotationDataAttributesScheduleRotationableTypeScheduleWeeklyRotation   NewScheduleRotationDataAttributesScheduleRotationableType = "ScheduleWeeklyRotation"
)

// Defines values for NewScheduleRotationDataType.
const (
	NewScheduleRotationDataTypeScheduleRotations NewScheduleRotationDataType = "schedule_rotations"
)

// Defines values for NewScheduleRotationActiveDayDataAttributesDayName.
const (
	NewScheduleRotationActiveDayDataAttributesDayNameF NewScheduleRotationActiveDayDataAttributesDayName = "F"
	NewScheduleRotationActiveDayDataAttributesDayNameM NewScheduleRotationActiveDayDataAttributesDayName = "M"
	NewScheduleRotationActiveDayDataAttributesDayNameR NewScheduleRotationActiveDayDataAttributesDayName = "R"
	NewScheduleRotationActiveDayDataAttributesDayNameS NewScheduleRotationActiveDayDataAttributesDayName = "S"
	NewScheduleRotationActiveDayDataAttributesDayNameT NewScheduleRotationActiveDayDataAttributesDayName = "T"
	NewScheduleRotationActiveDayDataAttributesDayNameU NewScheduleRotationActiveDayDataAttributesDayName = "U"
	NewScheduleRotationActiveDayDataAttributesDayNameW NewScheduleRotationActiveDayDataAttributesDayName = "W"
)

// Defines values for NewScheduleRotationActiveDayDataType.
const (
	NewScheduleRotationActiveDayDataTypeScheduleRotationActiveDays NewScheduleRotationActiveDayDataType = "schedule_rotation_active_days"
)

// Defines values for NewScheduleRotationUserDataType.
const (
	NewScheduleRotationUserDataTypeScheduleRotationUsers NewScheduleRotationUserDataType = "schedule_rotation_users"
)

// Defines values for NewSecretDataAttributesKind.
const (
	BuiltIn        NewSecretDataAttributesKind = "built_in"
	HashicorpVault NewSecretDataAttributesKind = "hashicorp_vault"
)

// Defines values for NewSecretDataType.
const (
	NewSecretDataTypeSecrets NewSecretDataType = "secrets"
)

// Defines values for NewServiceDataAttributesShowUptimeLastDays.
const (
	NewServiceDataAttributesShowUptimeLastDaysN30 NewServiceDataAttributesShowUptimeLastDays = 30
	NewServiceDataAttributesShowUptimeLastDaysN60 NewServiceDataAttributesShowUptimeLastDays = 60
	NewServiceDataAttributesShowUptimeLastDaysN90 NewServiceDataAttributesShowUptimeLastDays = 90
)

// Defines values for NewServiceDataType.
const (
	NewServiceDataTypeServices NewServiceDataType = "services"
)

// Defines values for NewSeverityDataAttributesSeverity.
const (
	NewSeverityDataAttributesSeverityCritical NewSeverityDataAttributesSeverity = "critical"
	NewSeverityDataAttributesSeverityHigh     NewSeverityDataAttributesSeverity = "high"
	NewSeverityDataAttributesSeverityLow      NewSeverityDataAttributesSeverity = "low"
	NewSeverityDataAttributesSeverityMedium   NewSeverityDataAttributesSeverity = "medium"
)

// Defines values for NewSeverityDataType.
const (
	NewSeverityDataTypeSeverities NewSeverityDataType = "severities"
)

// Defines values for NewStatusPageDataAttributesShowUptimeLastDays.
const (
	NewStatusPageDataAttributesShowUptimeLastDaysN180 NewStatusPageDataAttributesShowUptimeLastDays = 180
	NewStatusPageDataAttributesShowUptimeLastDaysN30  NewStatusPageDataAttributesShowUptimeLastDays = 30
	NewStatusPageDataAttributesShowUptimeLastDaysN360 NewStatusPageDataAttributesShowUptimeLastDays = 360
	NewStatusPageDataAttributesShowUptimeLastDaysN60  NewStatusPageDataAttributesShowUptimeLastDays = 60
	NewStatusPageDataAttributesShowUptimeLastDaysN90  NewStatusPageDataAttributesShowUptimeLastDays = 90
)

// Defines values for NewStatusPageDataType.
const (
	NewStatusPageDataTypeStatusPages NewStatusPageDataType = "status_pages"
)

// Defines values for NewSubStatusDataAttributesParentStatus.
const (
	NewSubStatusDataAttributesParentStatusRetrospective NewSubStatusDataAttributesParentStatus = "retrospective"
	NewSubStatusDataAttributesParentStatusStarted       NewSubStatusDataAttributesParentStatus = "started"
)

// Defines values for NewSubStatusDataType.
const (
	NewSubStatusDataTypeSubStatuses NewSubStatusDataType = "sub_statuses"
)

// Defines values for NewTeamDataType.
const (
	NewTeamDataTypeGroups NewTeamDataType = "groups"
)

// Defines values for NewUserNotificationRuleDataAttributesEnabledContactTypes.
const (
	NewUserNotificationRuleDataAttributesEnabledContactTypesCall              NewUserNotificationRuleDataAttributesEnabledContactTypes = "call"
	NewUserNotificationRuleDataAttributesEnabledContactTypesDevice            NewUserNotificationRuleDataAttributesEnabledContactTypes = "device"
	NewUserNotificationRuleDataAttributesEnabledContactTypesEmail             NewUserNotificationRuleDataAttributesEnabledContactTypes = "email"
	NewUserNotificationRuleDataAttributesEnabledContactTypesNonCriticalDevice NewUserNotificationRuleDataAttributesEnabledContactTypes = "non_critical_device"
	NewUserNotificationRuleDataAttributesEnabledContactTypesSms               NewUserNotificationRuleDataAttributesEnabledContactTypes = "sms"
)

// Defines values for NewUserNotificationRuleDataType.
const (
	NewUserNotificationRuleDataTypeUserNotificationRules NewUserNotificationRuleDataType = "user_notification_rules"
)

// Defines values for NewWebhooksEndpointDataAttributesEventTypes.
const (
	NewWebhooksEndpointDataAttributesEventTypesAlertCreated                NewWebhooksEndpointDataAttributesEventTypes = "alert.created"
	NewWebhooksEndpointDataAttributesEventTypesGeniusWorkflowRunCanceled   NewWebhooksEndpointDataAttributesEventTypes = "genius_workflow_run.canceled"
	NewWebhooksEndpointDataAttributesEventTypesGeniusWorkflowRunCompleted  NewWebhooksEndpointDataAttributesEventTypes = "genius_workflow_run.completed"
	NewWebhooksEndpointDataAttributesEventTypesGeniusWorkflowRunFailed     NewWebhooksEndpointDataAttributesEventTypes = "genius_workflow_run.failed"
	NewWebhooksEndpointDataAttributesEventTypesGeniusWorkflowRunQueued     NewWebhooksEndpointDataAttributesEventTypes = "genius_workflow_run.queued"
	NewWebhooksEndpointDataAttributesEventTypesGeniusWorkflowRunStarted    NewWebhooksEndpointDataAttributesEventTypes = "genius_workflow_run.started"
	NewWebhooksEndpointDataAttributesEventTypesIncidentCancelled           NewWebhooksEndpointDataAttributesEventTypes = "incident.cancelled"
	NewWebhooksEndpointDataAttributesEventTypesIncidentCreated             NewWebhooksEndpointDataAttributesEventTypes = "incident.created"
	NewWebhooksEndpointDataAttributesEventTypesIncidentDeleted             NewWebhooksEndpointDataAttributesEventTypes = "incident.deleted"
	NewWebhooksEndpointDataAttributesEventTypesIncidentInTriage            NewWebhooksEndpointDataAttributesEventTypes = "incident.in_triage"
	NewWebhooksEndpointDataAttributesEventTypesIncidentMitigated           NewWebhooksEndpointDataAttributesEventTypes = "incident.mitigated"
	NewWebhooksEndpointDataAttributesEventTypesIncidentPostMortemCreated   NewWebhooksEndpointDataAttributesEventTypes = "incident_post_mortem.created"
	NewWebhooksEndpointDataAttributesEventTypesIncidentPostMortemDeleted   NewWebhooksEndpointDataAttributesEventTypes = "incident_post_mortem.deleted"
	NewWebhooksEndpointDataAttributesEventTypesIncidentPostMortemPublished NewWebhooksEndpointDataAttributesEventTypes = "incident_post_mortem.published"
	NewWebhooksEndpointDataAttributesEventTypesIncidentPostMortemUpdated   NewWebhooksEndpointDataAttributesEventTypes = "incident_post_mortem.updated"
	NewWebhooksEndpointDataAttributesEventTypesIncidentResolved            NewWebhooksEndpointDataAttributesEventTypes = "incident.resolved"
	NewWebhooksEndpointDataAttributesEventTypesIncidentScheduledCompleted  NewWebhooksEndpointDataAttributesEventTypes = "incident.scheduled.completed"
	NewWebhooksEndpointDataAttributesEventTypesIncidentScheduledCreated    NewWebhooksEndpointDataAttributesEventTypes = "incident.scheduled.created"
	NewWebhooksEndpointDataAttributesEventTypesIncidentScheduledDeleted    NewWebhooksEndpointDataAttributesEventTypes = "incident.scheduled.deleted"
	NewWebhooksEndpointDataAttributesEventTypesIncidentScheduledInProgress NewWebhooksEndpointDataAttributesEventTypes = "incident.scheduled.in_progress"
	NewWebhooksEndpointDataAttributesEventTypesIncidentScheduledUpdated    NewWebhooksEndpointDataAttributesEventTypes = "incident.scheduled.updated"
	NewWebhooksEndpointDataAttributesEventTypesIncidentUpdated             NewWebhooksEndpointDataAttributesEventTypes = "incident.updated"
	NewWebhooksEndpointDataAttributesEventTypesPulseCreated                NewWebhooksEndpointDataAttributesEventTypes = "pulse.created"
)

// Defines values for NewWebhooksEndpointDataType.
const (
	NewWebhooksEndpointDataTypeWebhooksEndpoints NewWebhooksEndpointDataType = "webhooks_endpoints"
)

// Defines values for NewWorkflowDataAttributesPriority.
const (
	NewWorkflowDataAttributesPriorityHigh   NewWorkflowDataAttributesPriority = "high"
	NewWorkflowDataAttributesPriorityLow    NewWorkflowDataAttributesPriority = "low"
	NewWorkflowDataAttributesPriorityNormal NewWorkflowDataAttributesPriority = "normal"
)

// Defines values for NewWorkflowDataAttributesRepeatOn.
const (
	NewWorkflowDataAttributesRepeatOnF NewWorkflowDataAttributesRepeatOn = "F"
	NewWorkflowDataAttributesRepeatOnM NewWorkflowDataAttributesRepeatOn = "M"
	NewWorkflowDataAttributesRepeatOnR NewWorkflowDataAttributesRepeatOn = "R"
	NewWorkflowDataAttributesRepeatOnS NewWorkflowDataAttributesRepeatOn = "S"
	NewWorkflowDataAttributesRepeatOnT NewWorkflowDataAttributesRepeatOn = "T"
	NewWorkflowDataAttributesRepeatOnU NewWorkflowDataAttributesRepeatOn = "U"
	NewWorkflowDataAttributesRepeatOnW NewWorkflowDataAttributesRepeatOn = "W"
)

// Defines values for NewWorkflowDataType.
const (
	NewWorkflowDataTypeWorkflows NewWorkflowDataType = "workflows"
)

// Defines values for NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition.
const (
	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionANY          NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "ANY"
	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionCONTAINS     NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "CONTAINS"
	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionCONTAINSALL  NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "CONTAINS_ALL"
	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionCONTAINSNONE NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "CONTAINS_NONE"
	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionIS           NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "IS"
	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionNONE         NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "NONE"
	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionSET          NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "SET"
	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionUNSET        NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "UNSET"
)

// Defines values for NewWorkflowCustomFieldSelectionDataType.
const (
	NewWorkflowCustomFieldSelectionDataTypeWorkflowCustomFieldSelections NewWorkflowCustomFieldSelectionDataType = "workflow_custom_field_selections"
)

// Defines values for NewWorkflowFormFieldConditionDataAttributesIncidentCondition.
const (
	NewWorkflowFormFieldConditionDataAttributesIncidentConditionANY          NewWorkflowFormFieldConditionDataAttributesIncidentCondition = "ANY"
	NewWorkflowFormFieldConditionDataAttributesIncidentConditionCONTAINS     NewWorkflowFormFieldConditionDataAttributesIncidentCondition = "CONTAINS"
	NewWorkflowFormFieldConditionDataAttributesIncidentConditionCONTAINSALL  NewWorkflowFormFieldConditionDataAttributesIncidentCondition = "CONTAINS_ALL"
	NewWorkflowFormFieldConditionDataAttributesIncidentConditionCONTAINSNONE NewWorkflowFormFieldConditionDataAttributesIncidentCondition = "CONTAINS_NONE"
	NewWorkflowFormFieldConditionDataAttributesIncidentConditionIS           NewWorkflowFormFieldConditionDataAttributesIncidentCondition = "IS"
	NewWorkflowFormFieldConditionDataAttributesIncidentConditionNONE         NewWorkflowFormFieldConditionDataAttributesIncidentCondition = "NONE"
	NewWorkflowFormFieldConditionDataAttributesIncidentConditionSET          NewWorkflowFormFieldConditionDataAttributesIncidentCondition = "SET"
	NewWorkflowFormFieldConditionDataAttributesIncidentConditionUNSET        NewWorkflowFormFieldConditionDataAttributesIncidentCondition = "UNSET"
)

// Defines values for NewWorkflowFormFieldConditionDataType.
const (
	NewWorkflowFormFieldConditionDataTypeWorkflowFormFieldConditions NewWorkflowFormFieldConditionDataType = "workflow_form_field_conditions"
)

// Defines values for NewWorkflowGroupDataAttributesKind.
const (
	NewWorkflowGroupDataAttributesKindActionItem NewWorkflowGroupDataAttributesKind = "action_item"
	NewWorkflowGroupDataAttributesKindAlert      NewWorkflowGroupDataAttributesKind = "alert"
	NewWorkflowGroupDataAttributesKindIncident   NewWorkflowGroupDataAttributesKind = "incident"
	NewWorkflowGroupDataAttributesKindPostMortem NewWorkflowGroupDataAttributesKind = "post_mortem"
	NewWorkflowGroupDataAttributesKindPulse      NewWorkflowGroupDataAttributesKind = "pulse"
	NewWorkflowGroupDataAttributesKindSimple     NewWorkflowGroupDataAttributesKind = "simple"
)

// Defines values for NewWorkflowGroupDataType.
const (
	NewWorkflowGroupDataTypeWorkflowGroups NewWorkflowGroupDataType = "workflow_groups"
)

// Defines values for NewWorkflowRunDataType.
const (
	NewWorkflowRunDataTypeWorkflowRuns NewWorkflowRunDataType = "workflow_runs"
)

// Defines values for NewWorkflowTaskDataType.
const (
	NewWorkflowTaskDataTypeWorkflowTasks NewWorkflowTaskDataType = "workflow_tasks"
)

// Defines values for OnCallRoleAlertSourcesPermissions.
const (
	OnCallRoleAlertSourcesPermissionsCreate OnCallRoleAlertSourcesPermissions = "create"
	OnCallRoleAlertSourcesPermissionsDelete OnCallRoleAlertSourcesPermissions = "delete"
	OnCallRoleAlertSourcesPermissionsUpdate OnCallRoleAlertSourcesPermissions = "update"
)

// Defines values for OnCallRoleAlertUrgencyPermissions.
const (
	OnCallRoleAlertUrgencyPermissionsCreate OnCallRoleAlertUrgencyPermissions = "create"
	OnCallRoleAlertUrgencyPermissionsDelete OnCallRoleAlertUrgencyPermissions = "delete"
	OnCallRoleAlertUrgencyPermissionsRead   OnCallRoleAlertUrgencyPermissions = "read"
	OnCallRoleAlertUrgencyPermissionsUpdate OnCallRoleAlertUrgencyPermissions = "update"
)

// Defines values for OnCallRoleAlertsPermissions.
const (
	OnCallRoleAlertsPermissionsCreate OnCallRoleAlertsPermissions = "create"
	OnCallRoleAlertsPermissionsRead   OnCallRoleAlertsPermissions = "read"
	OnCallRoleAlertsPermissionsUpdate OnCallRoleAlertsPermissions = "update"
)

// Defines values for OnCallRoleApiKeysPermissions.
const (
	OnCallRoleApiKeysPermissionsCreate OnCallRoleApiKeysPermissions = "create"
	OnCallRoleApiKeysPermissionsDelete OnCallRoleApiKeysPermissions = "delete"
	OnCallRoleApiKeysPermissionsRead   OnCallRoleApiKeysPermissions = "read"
	OnCallRoleApiKeysPermissionsUpdate OnCallRoleApiKeysPermissions = "update"
)

// Defines values for OnCallRoleAuditsPermissions.
const (
	OnCallRoleAuditsPermissionsCreate OnCallRoleAuditsPermissions = "create"
	OnCallRoleAuditsPermissionsDelete OnCallRoleAuditsPermissions = "delete"
	OnCallRoleAuditsPermissionsRead   OnCallRoleAuditsPermissions = "read"
	OnCallRoleAuditsPermissionsUpdate OnCallRoleAuditsPermissions = "update"
)

// Defines values for OnCallRoleContactsPermissions.
const (
	OnCallRoleContactsPermissionsRead OnCallRoleContactsPermissions = "read"
)

// Defines values for OnCallRoleEscalationPoliciesPermissions.
const (
	OnCallRoleEscalationPoliciesPermissionsCreate OnCallRoleEscalationPoliciesPermissions = "create"
	OnCallRoleEscalationPoliciesPermissionsDelete OnCallRoleEscalationPoliciesPermissions = "delete"
	OnCallRoleEscalationPoliciesPermissionsRead   OnCallRoleEscalationPoliciesPermissions = "read"
	OnCallRoleEscalationPoliciesPermissionsUpdate OnCallRoleEscalationPoliciesPermissions = "update"
)

// Defines values for OnCallRoleGroupsPermissions.
const (
	OnCallRoleGroupsPermissionsCreate OnCallRoleGroupsPermissions = "create"
	OnCallRoleGroupsPermissionsDelete OnCallRoleGroupsPermissions = "delete"
	OnCallRoleGroupsPermissionsRead   OnCallRoleGroupsPermissions = "read"
	OnCallRoleGroupsPermissionsUpdate OnCallRoleGroupsPermissions = "update"
)

// Defines values for OnCallRoleHeartbeatsPermissions.
const (
	OnCallRoleHeartbeatsPermissionsCreate OnCallRoleHeartbeatsPermissions = "create"
	OnCallRoleHeartbeatsPermissionsDelete OnCallRoleHeartbeatsPermissions = "delete"
	OnCallRoleHeartbeatsPermissionsRead   OnCallRoleHeartbeatsPermissions = "read"
	OnCallRoleHeartbeatsPermissionsUpdate OnCallRoleHeartbeatsPermissions = "update"
)

// Defines values for OnCallRoleIntegrationsPermissions.
const (
	OnCallRoleIntegrationsPermissionsCreate OnCallRoleIntegrationsPermissions = "create"
	OnCallRoleIntegrationsPermissionsDelete OnCallRoleIntegrationsPermissions = "delete"
	OnCallRoleIntegrationsPermissionsRead   OnCallRoleIntegrationsPermissions = "read"
	OnCallRoleIntegrationsPermissionsUpdate OnCallRoleIntegrationsPermissions = "update"
)

// Defines values for OnCallRoleInvitationsPermissions.
const (
	OnCallRoleInvitationsPermissionsCreate OnCallRoleInvitationsPermissions = "create"
	OnCallRoleInvitationsPermissionsDelete OnCallRoleInvitationsPermissions = "delete"
	OnCallRoleInvitationsPermissionsRead   OnCallRoleInvitationsPermissions = "read"
	OnCallRoleInvitationsPermissionsUpdate OnCallRoleInvitationsPermissions = "update"
)

// Defines values for OnCallRoleLiveCallRoutingPermissions.
const (
	OnCallRoleLiveCallRoutingPermissionsCreate OnCallRoleLiveCallRoutingPermissions = "create"
	OnCallRoleLiveCallRoutingPermissionsDelete OnCallRoleLiveCallRoutingPermissions = "delete"
	OnCallRoleLiveCallRoutingPermissionsRead   OnCallRoleLiveCallRoutingPermissions = "read"
	OnCallRoleLiveCallRoutingPermissionsUpdate OnCallRoleLiveCallRoutingPermissions = "update"
)

// Defines values for OnCallRoleScheduleOverridePermissions.
const (
	OnCallRoleScheduleOverridePermissionsCreate OnCallRoleScheduleOverridePermissions = "create"
	OnCallRoleScheduleOverridePermissionsUpdate OnCallRoleScheduleOverridePermissions = "update"
)

// Defines values for OnCallRoleSchedulesPermissions.
const (
	OnCallRoleSchedulesPermissionsCreate OnCallRoleSchedulesPermissions = "create"
	OnCallRoleSchedulesPermissionsDelete OnCallRoleSchedulesPermissions = "delete"
	OnCallRoleSchedulesPermissionsRead   OnCallRoleSchedulesPermissions = "read"
	OnCallRoleSchedulesPermissionsUpdate OnCallRoleSchedulesPermissions = "update"
)

// Defines values for OnCallRoleServicesPermissions.
const (
	OnCallRoleServicesPermissionsCreate OnCallRoleServicesPermissions = "create"
	OnCallRoleServicesPermissionsDelete OnCallRoleServicesPermissions = "delete"
	OnCallRoleServicesPermissionsRead   OnCallRoleServicesPermissions = "read"
	OnCallRoleServicesPermissionsUpdate OnCallRoleServicesPermissions = "update"
)

// Defines values for OnCallRoleWebhooksPermissions.
const (
	OnCallRoleWebhooksPermissionsCreate OnCallRoleWebhooksPermissions = "create"
	OnCallRoleWebhooksPermissionsDelete OnCallRoleWebhooksPermissions = "delete"
	OnCallRoleWebhooksPermissionsRead   OnCallRoleWebhooksPermissions = "read"
	OnCallRoleWebhooksPermissionsUpdate OnCallRoleWebhooksPermissions = "update"
)

// Defines values for OnCallRoleWorkflowsPermissions.
const (
	OnCallRoleWorkflowsPermissionsCreate OnCallRoleWorkflowsPermissions = "create"
	OnCallRoleWorkflowsPermissionsDelete OnCallRoleWorkflowsPermissions = "delete"
	OnCallRoleWorkflowsPermissionsRead   OnCallRoleWorkflowsPermissions = "read"
	OnCallRoleWorkflowsPermissionsUpdate OnCallRoleWorkflowsPermissions = "update"
)

// Defines values for OnCallRoleListDataType.
const (
	OnCallRoleListDataTypeOnCallRoles OnCallRoleListDataType = "on_call_roles"
)

// Defines values for OnCallRoleResponseDataType.
const (
	OnCallRoleResponseDataTypeOnCallRoles OnCallRoleResponseDataType = "on_call_roles"
)

// Defines values for OnCallShadowShadowableType.
const (
	OnCallShadowShadowableTypeSchedule OnCallShadowShadowableType = "Schedule"
	OnCallShadowShadowableTypeUser     OnCallShadowShadowableType = "User"
)

// Defines values for OnCallShadowResponseDataType.
const (
	OnCallShadowResponseDataTypeOnCallShadows OnCallShadowResponseDataType = "on_call_shadows"
)

// Defines values for OnCallShadowsListDataType.
const (
	OnCallShadowsListDataTypeOnCallShadows OnCallShadowsListDataType = "on_call_shadows"
)

// Defines values for OverrideShiftListDataType.
const (
	OverrideShiftListDataTypeShifts OverrideShiftListDataType = "shifts"
)

// Defines values for OverrideShiftResponseDataType.
const (
	OverrideShiftResponseDataTypeShifts OverrideShiftResponseDataType = "shifts"
)

// Defines values for PageOpsgenieOnCallRespondersTaskParamsPriority.
const (
	PageOpsgenieOnCallRespondersTaskParamsPriorityAuto PageOpsgenieOnCallRespondersTaskParamsPriority = "auto"
	PageOpsgenieOnCallRespondersTaskParamsPriorityP1   PageOpsgenieOnCallRespondersTaskParamsPriority = "P1"
	PageOpsgenieOnCallRespondersTaskParamsPriorityP2   PageOpsgenieOnCallRespondersTaskParamsPriority = "P2"
	PageOpsgenieOnCallRespondersTaskParamsPriorityP3   PageOpsgenieOnCallRespondersTaskParamsPriority = "P3"
	PageOpsgenieOnCallRespondersTaskParamsPriorityP4   PageOpsgenieOnCallRespondersTaskParamsPriority = "P4"
	PageOpsgenieOnCallRespondersTaskParamsPriorityP5   PageOpsgenieOnCallRespondersTaskParamsPriority = "P5"
)

// Defines values for PageOpsgenieOnCallRespondersTaskParamsTaskType.
const (
	PageOpsgenieOnCallResponders PageOpsgenieOnCallRespondersTaskParamsTaskType = "page_opsgenie_on_call_responders"
)

// Defines values for PagePagerdutyOnCallRespondersTaskParamsTaskType.
const (
	PagePagerdutyOnCallResponders PagePagerdutyOnCallRespondersTaskParamsTaskType = "page_pagerduty_on_call_responders"
)

// Defines values for PagePagerdutyOnCallRespondersTaskParamsUrgency.
const (
	PagePagerdutyOnCallRespondersTaskParamsUrgencyAuto PagePagerdutyOnCallRespondersTaskParamsUrgency = "auto"
	PagePagerdutyOnCallRespondersTaskParamsUrgencyHigh PagePagerdutyOnCallRespondersTaskParamsUrgency = "high"
	PagePagerdutyOnCallRespondersTaskParamsUrgencyLow  PagePagerdutyOnCallRespondersTaskParamsUrgency = "low"
)

// Defines values for PageRootlyOnCallRespondersTaskParamsTaskType.
const (
	PageRootlyOnCallResponders PageRootlyOnCallRespondersTaskParamsTaskType = "page_rootly_on_call_responders"
)

// Defines values for PageVictorOpsOnCallRespondersTaskParamsTaskType.
const (
	PageVictorOpsOnCallResponders PageVictorOpsOnCallRespondersTaskParamsTaskType = "page_victor_ops_on_call_responders"
)

// Defines values for PlaybookListDataType.
const (
	PlaybookListDataTypePlaybooks PlaybookListDataType = "playbooks"
)

// Defines values for PlaybookResponseDataType.
const (
	PlaybookResponseDataTypePlaybooks PlaybookResponseDataType = "playbooks"
)

// Defines values for PlaybookTaskListDataType.
const (
	PlaybookTaskListDataTypePlaybookTasks PlaybookTaskListDataType = "playbook_tasks"
)

// Defines values for PlaybookTaskResponseDataType.
const (
	PlaybookTaskResponseDataTypePlaybookTasks PlaybookTaskResponseDataType = "playbook_tasks"
)

// Defines values for PostMortemTemplateFormat.
const (
	PostMortemTemplateFormatHtml     PostMortemTemplateFormat = "html"
	PostMortemTemplateFormatMarkdown PostMortemTemplateFormat = "markdown"
)

// Defines values for PostMortemTemplateListDataType.
const (
	PostMortemTemplateListDataTypePostMortemTemplates PostMortemTemplateListDataType = "post_mortem_templates"
)

// Defines values for PostMortemTemplateResponseDataType.
const (
	PostMortemTemplateResponseDataTypePostMortemTemplates PostMortemTemplateResponseDataType = "post_mortem_templates"
)

// Defines values for PrintTaskParamsTaskType.
const (
	Print PrintTaskParamsTaskType = "print"
)

// Defines values for PublishIncidentTaskParamsStatus.
const (
	PublishIncidentTaskParamsStatusCompleted     PublishIncidentTaskParamsStatus = "completed"
	PublishIncidentTaskParamsStatusIdentified    PublishIncidentTaskParamsStatus = "identified"
	PublishIncidentTaskParamsStatusInProgress    PublishIncidentTaskParamsStatus = "in_progress"
	PublishIncidentTaskParamsStatusInvestigating PublishIncidentTaskParamsStatus = "investigating"
	PublishIncidentTaskParamsStatusMonitoring    PublishIncidentTaskParamsStatus = "monitoring"
	PublishIncidentTaskParamsStatusResolved      PublishIncidentTaskParamsStatus = "resolved"
	PublishIncidentTaskParamsStatusScheduled     PublishIncidentTaskParamsStatus = "scheduled"
	PublishIncidentTaskParamsStatusVerifying     PublishIncidentTaskParamsStatus = "verifying"
)

// Defines values for PublishIncidentTaskParamsTaskType.
const (
	PublishIncident PublishIncidentTaskParamsTaskType = "publish_incident"
)

// Defines values for PulseListDataType.
const (
	PulseListDataTypePulses PulseListDataType = "pulses"
)

// Defines values for PulseResponseDataType.
const (
	PulseResponseDataTypePulses PulseResponseDataType = "pulses"
)

// Defines values for PulseTriggerParamsPulseCondition.
const (
	PulseTriggerParamsPulseConditionALL  PulseTriggerParamsPulseCondition = "ALL"
	PulseTriggerParamsPulseConditionANY  PulseTriggerParamsPulseCondition = "ANY"
	PulseTriggerParamsPulseConditionNONE PulseTriggerParamsPulseCondition = "NONE"
)

// Defines values for PulseTriggerParamsPulseConditionLabel.
const (
	PulseTriggerParamsPulseConditionLabelANY          PulseTriggerParamsPulseConditionLabel = "ANY"
	PulseTriggerParamsPulseConditionLabelCONTAINS     PulseTriggerParamsPulseConditionLabel = "CONTAINS"
	PulseTriggerParamsPulseConditionLabelCONTAINSALL  PulseTriggerParamsPulseConditionLabel = "CONTAINS_ALL"
	PulseTriggerParamsPulseConditionLabelCONTAINSNONE PulseTriggerParamsPulseConditionLabel = "CONTAINS_NONE"
	PulseTriggerParamsPulseConditionLabelIS           PulseTriggerParamsPulseConditionLabel = "IS"
	PulseTriggerParamsPulseConditionLabelNONE         PulseTriggerParamsPulseConditionLabel = "NONE"
	PulseTriggerParamsPulseConditionLabelSET          PulseTriggerParamsPulseConditionLabel = "SET"
	PulseTriggerParamsPulseConditionLabelUNSET        PulseTriggerParamsPulseConditionLabel = "UNSET"
)

// Defines values for PulseTriggerParamsPulseConditionPayload.
const (
	PulseTriggerParamsPulseConditionPayloadANY          PulseTriggerParamsPulseConditionPayload = "ANY"
	PulseTriggerParamsPulseConditionPayloadCONTAINS     PulseTriggerParamsPulseConditionPayload = "CONTAINS"
	PulseTriggerParamsPulseConditionPayloadCONTAINSALL  PulseTriggerParamsPulseConditionPayload = "CONTAINS_ALL"
	PulseTriggerParamsPulseConditionPayloadCONTAINSNONE PulseTriggerParamsPulseConditionPayload = "CONTAINS_NONE"
	PulseTriggerParamsPulseConditionPayloadIS           PulseTriggerParamsPulseConditionPayload = "IS"
	PulseTriggerParamsPulseConditionPayloadNONE         PulseTriggerParamsPulseConditionPayload = "NONE"
	PulseTriggerParamsPulseConditionPayloadSET          PulseTriggerParamsPulseConditionPayload = "SET"
	PulseTriggerParamsPulseConditionPayloadUNSET        PulseTriggerParamsPulseConditionPayload = "UNSET"
)

// Defines values for PulseTriggerParamsPulseConditionSource.
const (
	PulseTriggerParamsPulseConditionSourceANY          PulseTriggerParamsPulseConditionSource = "ANY"
	PulseTriggerParamsPulseConditionSourceCONTAINS     PulseTriggerParamsPulseConditionSource = "CONTAINS"
	PulseTriggerParamsPulseConditionSourceCONTAINSALL  PulseTriggerParamsPulseConditionSource = "CONTAINS_ALL"
	PulseTriggerParamsPulseConditionSourceCONTAINSNONE PulseTriggerParamsPulseConditionSource = "CONTAINS_NONE"
	PulseTriggerParamsPulseConditionSourceIS           PulseTriggerParamsPulseConditionSource = "IS"
	PulseTriggerParamsPulseConditionSourceNONE         PulseTriggerParamsPulseConditionSource = "NONE"
	PulseTriggerParamsPulseConditionSourceSET          PulseTriggerParamsPulseConditionSource = "SET"
	PulseTriggerParamsPulseConditionSourceUNSET        PulseTriggerParamsPulseConditionSource = "UNSET"
)

// Defines values for PulseTriggerParamsTriggerType.
const (
	PulseTriggerParamsTriggerTypePulse PulseTriggerParamsTriggerType = "pulse"
)

// Defines values for PulseTriggerParamsTriggers.
const (
	PulseTriggerParamsTriggersPulseCreated PulseTriggerParamsTriggers = "pulse_created"
)

// Defines values for RedisClientTaskParamsTaskType.
const (
	RedisClient RedisClientTaskParamsTaskType = "redis_client"
)

// Defines values for RemoveGoogleDocsPermissionsTaskParamsAttributeToQueryBy.
const (
	RemoveGoogleDocsPermissionsTaskParamsAttributeToQueryByEmailAddress RemoveGoogleDocsPermissionsTaskParamsAttributeToQueryBy = "email_address"
	RemoveGoogleDocsPermissionsTaskParamsAttributeToQueryByRole         RemoveGoogleDocsPermissionsTaskParamsAttributeToQueryBy = "role"
	RemoveGoogleDocsPermissionsTaskParamsAttributeToQueryByType         RemoveGoogleDocsPermissionsTaskParamsAttributeToQueryBy = "type"
)

// Defines values for RemoveGoogleDocsPermissionsTaskParamsTaskType.
const (
	RemoveGoogleDocsPermissions RemoveGoogleDocsPermissionsTaskParamsTaskType = "remove_google_docs_permissions"
)

// Defines values for RemoveSubscribersDataType.
const (
	RemoveSubscribersDataTypeIncidents RemoveSubscribersDataType = "incidents"
)

// Defines values for RenameMicrosoftTeamsChannelTaskParamsTaskType.
const (
	RenameMicrosoftTeamsChannel RenameMicrosoftTeamsChannelTaskParamsTaskType = "rename_microsoft_teams_channel"
)

// Defines values for RenameSlackChannelTaskParamsTaskType.
const (
	RenameSlackChannelTaskParamsTaskTypeRenameSlackChannel RenameSlackChannelTaskParamsTaskType = "rename_slack_channel"
)

// Defines values for ResolveAlertDataType.
const (
	Alerts ResolveAlertDataType = "alerts"
)

// Defines values for ResolveIncidentDataType.
const (
	ResolveIncidentDataTypeIncidents ResolveIncidentDataType = "incidents"
)

// Defines values for RestartIncidentDataType.
const (
	RestartIncidentDataTypeIncidents RestartIncidentDataType = "incidents"
)

// Defines values for RetrospectiveConfigurationKind.
const (
	Mandatory RetrospectiveConfigurationKind = "mandatory"
	Skip      RetrospectiveConfigurationKind = "skip"
)

// Defines values for RetrospectiveConfigurationListDataType.
const (
	RetrospectiveConfigurationListDataTypeRetrospectiveConfigurations RetrospectiveConfigurationListDataType = "retrospective_configurations"
)

// Defines values for RetrospectiveConfigurationResponseDataType.
const (
	RetrospectiveConfigurationResponseDataTypeRetrospectiveConfigurations RetrospectiveConfigurationResponseDataType = "retrospective_configurations"
)

// Defines values for RetrospectiveProcessGroupListDataType.
const (
	RetrospectiveProcessGroupListDataTypeRetrospectiveProcessGroups RetrospectiveProcessGroupListDataType = "retrospective_process_groups"
)

// Defines values for RetrospectiveProcessGroupResponseDataType.
const (
	RetrospectiveProcessGroupResponseDataTypeRetrospectiveProcessGroups RetrospectiveProcessGroupResponseDataType = "retrospective_process_groups"
)

// Defines values for RetrospectiveProcessGroupStepListDataType.
const (
	RetrospectiveProcessGroupStepListDataTypeRetrospectiveProcessGroupSteps RetrospectiveProcessGroupStepListDataType = "retrospective_process_group_steps"
)

// Defines values for RetrospectiveProcessGroupStepResponseDataType.
const (
	RetrospectiveProcessGroupStepResponseDataTypeRetrospectiveProcessGroupSteps RetrospectiveProcessGroupStepResponseDataType = "retrospective_process_group_steps"
)

// Defines values for RetrospectiveProcessListDataType.
const (
	RetrospectiveProcessListDataTypeRetrospectiveProcesses RetrospectiveProcessListDataType = "retrospective_processes"
)

// Defines values for RetrospectiveProcessResponseDataType.
const (
	RetrospectiveProcessResponseDataTypeRetrospectiveProcesses RetrospectiveProcessResponseDataType = "retrospective_processes"
)

// Defines values for RetrospectiveStepListDataType.
const (
	RetrospectiveStepListDataTypeRetrospectiveSteps RetrospectiveStepListDataType = "retrospective_steps"
)

// Defines values for RetrospectiveStepResponseDataType.
const (
	RetrospectiveStepResponseDataTypeRetrospectiveSteps RetrospectiveStepResponseDataType = "retrospective_steps"
)

// Defines values for RoleAlertsPermissions.
const (
	RoleAlertsPermissionsCreate RoleAlertsPermissions = "create"
	RoleAlertsPermissionsRead   RoleAlertsPermissions = "read"
)

// Defines values for RoleApiKeysPermissions.
const (
	RoleApiKeysPermissionsCreate RoleApiKeysPermissions = "create"
	RoleApiKeysPermissionsDelete RoleApiKeysPermissions = "delete"
	RoleApiKeysPermissionsRead   RoleApiKeysPermissions = "read"
	RoleApiKeysPermissionsUpdate RoleApiKeysPermissions = "update"
)

// Defines values for RoleAuditsPermissions.
const (
	RoleAuditsPermissionsCreate RoleAuditsPermissions = "create"
	RoleAuditsPermissionsDelete RoleAuditsPermissions = "delete"
	RoleAuditsPermissionsRead   RoleAuditsPermissions = "read"
	RoleAuditsPermissionsUpdate RoleAuditsPermissions = "update"
)

// Defines values for RoleBillingPermissions.
const (
	RoleBillingPermissionsCreate RoleBillingPermissions = "create"
	RoleBillingPermissionsDelete RoleBillingPermissions = "delete"
	RoleBillingPermissionsRead   RoleBillingPermissions = "read"
	RoleBillingPermissionsUpdate RoleBillingPermissions = "update"
)

// Defines values for RoleEnvironmentsPermissions.
const (
	RoleEnvironmentsPermissionsCreate RoleEnvironmentsPermissions = "create"
	RoleEnvironmentsPermissionsDelete RoleEnvironmentsPermissions = "delete"
	RoleEnvironmentsPermissionsRead   RoleEnvironmentsPermissions = "read"
	RoleEnvironmentsPermissionsUpdate RoleEnvironmentsPermissions = "update"
)

// Defines values for RoleFormFieldsPermissions.
const (
	RoleFormFieldsPermissionsCreate RoleFormFieldsPermissions = "create"
	RoleFormFieldsPermissionsDelete RoleFormFieldsPermissions = "delete"
	RoleFormFieldsPermissionsRead   RoleFormFieldsPermissions = "read"
	RoleFormFieldsPermissionsUpdate RoleFormFieldsPermissions = "update"
)

// Defines values for RoleFunctionalitiesPermissions.
const (
	RoleFunctionalitiesPermissionsCreate RoleFunctionalitiesPermissions = "create"
	RoleFunctionalitiesPermissionsDelete RoleFunctionalitiesPermissions = "delete"
	RoleFunctionalitiesPermissionsRead   RoleFunctionalitiesPermissions = "read"
	RoleFunctionalitiesPermissionsUpdate RoleFunctionalitiesPermissions = "update"
)

// Defines values for RoleGroupsPermissions.
const (
	RoleGroupsPermissionsCreate RoleGroupsPermissions = "create"
	RoleGroupsPermissionsDelete RoleGroupsPermissions = "delete"
	RoleGroupsPermissionsRead   RoleGroupsPermissions = "read"
	RoleGroupsPermissionsUpdate RoleGroupsPermissions = "update"
)

// Defines values for RoleIncidentCausesPermissions.
const (
	RoleIncidentCausesPermissionsCreate RoleIncidentCausesPermissions = "create"
	RoleIncidentCausesPermissionsDelete RoleIncidentCausesPermissions = "delete"
	RoleIncidentCausesPermissionsRead   RoleIncidentCausesPermissions = "read"
	RoleIncidentCausesPermissionsUpdate RoleIncidentCausesPermissions = "update"
)

// Defines values for RoleIncidentFeedbacksPermissions.
const (
	RoleIncidentFeedbacksPermissionsCreate RoleIncidentFeedbacksPermissions = "create"
	RoleIncidentFeedbacksPermissionsDelete RoleIncidentFeedbacksPermissions = "delete"
	RoleIncidentFeedbacksPermissionsRead   RoleIncidentFeedbacksPermissions = "read"
	RoleIncidentFeedbacksPermissionsUpdate RoleIncidentFeedbacksPermissions = "update"
)

// Defines values for RoleIncidentRolesPermissions.
const (
	RoleIncidentRolesPermissionsCreate RoleIncidentRolesPermissions = "create"
	RoleIncidentRolesPermissionsDelete RoleIncidentRolesPermissions = "delete"
	RoleIncidentRolesPermissionsRead   RoleIncidentRolesPermissions = "read"
	RoleIncidentRolesPermissionsUpdate RoleIncidentRolesPermissions = "update"
)

// Defines values for RoleIncidentTypesPermissions.
const (
	RoleIncidentTypesPermissionsCreate RoleIncidentTypesPermissions = "create"
	RoleIncidentTypesPermissionsDelete RoleIncidentTypesPermissions = "delete"
	RoleIncidentTypesPermissionsRead   RoleIncidentTypesPermissions = "read"
	RoleIncidentTypesPermissionsUpdate RoleIncidentTypesPermissions = "update"
)

// Defines values for RoleIncidentsPermissions.
const (
	RoleIncidentsPermissionsCreate RoleIncidentsPermissions = "create"
	RoleIncidentsPermissionsDelete RoleIncidentsPermissions = "delete"
	RoleIncidentsPermissionsRead   RoleIncidentsPermissions = "read"
	RoleIncidentsPermissionsUpdate RoleIncidentsPermissions = "update"
)

// Defines values for RoleInvitationsPermissions.
const (
	RoleInvitationsPermissionsCreate RoleInvitationsPermissions = "create"
	RoleInvitationsPermissionsDelete RoleInvitationsPermissions = "delete"
	RoleInvitationsPermissionsRead   RoleInvitationsPermissions = "read"
	RoleInvitationsPermissionsUpdate RoleInvitationsPermissions = "update"
)

// Defines values for RolePlaybooksPermissions.
const (
	RolePlaybooksPermissionsCreate RolePlaybooksPermissions = "create"
	RolePlaybooksPermissionsDelete RolePlaybooksPermissions = "delete"
	RolePlaybooksPermissionsRead   RolePlaybooksPermissions = "read"
	RolePlaybooksPermissionsUpdate RolePlaybooksPermissions = "update"
)

// Defines values for RolePrivateIncidentsPermissions.
const (
	RolePrivateIncidentsPermissionsCreate RolePrivateIncidentsPermissions = "create"
	RolePrivateIncidentsPermissionsDelete RolePrivateIncidentsPermissions = "delete"
	RolePrivateIncidentsPermissionsRead   RolePrivateIncidentsPermissions = "read"
	RolePrivateIncidentsPermissionsUpdate RolePrivateIncidentsPermissions = "update"
)

// Defines values for RolePulsesPermissions.
const (
	RolePulsesPermissionsCreate RolePulsesPermissions = "create"
	RolePulsesPermissionsRead   RolePulsesPermissions = "read"
	RolePulsesPermissionsUpdate RolePulsesPermissions = "update"
)

// Defines values for RoleRetrospectivePermissions.
const (
	RoleRetrospectivePermissionsCreate RoleRetrospectivePermissions = "create"
	RoleRetrospectivePermissionsDelete RoleRetrospectivePermissions = "delete"
	RoleRetrospectivePermissionsRead   RoleRetrospectivePermissions = "read"
	RoleRetrospectivePermissionsUpdate RoleRetrospectivePermissions = "update"
)

// Defines values for RoleRolesPermissions.
const (
	RoleRolesPermissionsCreate RoleRolesPermissions = "create"
	RoleRolesPermissionsDelete RoleRolesPermissions = "delete"
	RoleRolesPermissionsRead   RoleRolesPermissions = "read"
	RoleRolesPermissionsUpdate RoleRolesPermissions = "update"
)

// Defines values for RoleSecretsPermissions.
const (
	RoleSecretsPermissionsCreate RoleSecretsPermissions = "create"
	RoleSecretsPermissionsDelete RoleSecretsPermissions = "delete"
	RoleSecretsPermissionsRead   RoleSecretsPermissions = "read"
	RoleSecretsPermissionsUpdate RoleSecretsPermissions = "update"
)

// Defines values for RoleServicesPermissions.
const (
	RoleServicesPermissionsCreate RoleServicesPermissions = "create"
	RoleServicesPermissionsDelete RoleServicesPermissions = "delete"
	RoleServicesPermissionsRead   RoleServicesPermissions = "read"
	RoleServicesPermissionsUpdate RoleServicesPermissions = "update"
)

// Defines values for RoleSeveritiesPermissions.
const (
	RoleSeveritiesPermissionsCreate RoleSeveritiesPermissions = "create"
	RoleSeveritiesPermissionsDelete RoleSeveritiesPermissions = "delete"
	RoleSeveritiesPermissionsRead   RoleSeveritiesPermissions = "read"
	RoleSeveritiesPermissionsUpdate RoleSeveritiesPermissions = "update"
)

// Defines values for RoleStatusPagesPermissions.
const (
	RoleStatusPagesPermissionsCreate RoleStatusPagesPermissions = "create"
	RoleStatusPagesPermissionsDelete RoleStatusPagesPermissions = "delete"
	RoleStatusPagesPermissionsRead   RoleStatusPagesPermissions = "read"
	RoleStatusPagesPermissionsUpdate RoleStatusPagesPermissions = "update"
)

// Defines values for RoleWebhooksPermissions.
const (
	RoleWebhooksPermissionsCreate RoleWebhooksPermissions = "create"
	RoleWebhooksPermissionsDelete RoleWebhooksPermissions = "delete"
	RoleWebhooksPermissionsRead   RoleWebhooksPermissions = "read"
	RoleWebhooksPermissionsUpdate RoleWebhooksPermissions = "update"
)

// Defines values for RoleWorkflowsPermissions.
const (
	RoleWorkflowsPermissionsCreate RoleWorkflowsPermissions = "create"
	RoleWorkflowsPermissionsDelete RoleWorkflowsPermissions = "delete"
	RoleWorkflowsPermissionsRead   RoleWorkflowsPermissions = "read"
	RoleWorkflowsPermissionsUpdate RoleWorkflowsPermissions = "update"
)

// Defines values for RoleListDataType.
const (
	RoleListDataTypeRoles RoleListDataType = "roles"
)

// Defines values for RoleResponseDataType.
const (
	RoleResponseDataTypeRoles RoleResponseDataType = "roles"
)

// Defines values for RunCommandHerokuTaskParamsSize.
const (
	Standard1X RunCommandHerokuTaskParamsSize = "standard-1X"
	Standard2X RunCommandHerokuTaskParamsSize = "standard-2X"
)

// Defines values for RunCommandHerokuTaskParamsTaskType.
const (
	RunCommandHeroku RunCommandHerokuTaskParamsTaskType = "run_command_heroku"
)

// Defines values for ScheduleListDataType.
const (
	ScheduleListDataTypeSchedules ScheduleListDataType = "schedules"
)

// Defines values for ScheduleResponseDataType.
const (
	ScheduleResponseDataTypeSchedules ScheduleResponseDataType = "schedules"
)

// Defines values for ScheduleRotationActiveDays.
const (
	ScheduleRotationActiveDaysF ScheduleRotationActiveDays = "F"
	ScheduleRotationActiveDaysM ScheduleRotationActiveDays = "M"
	ScheduleRotationActiveDaysR ScheduleRotationActiveDays = "R"
	ScheduleRotationActiveDaysS ScheduleRotationActiveDays = "S"
	ScheduleRotationActiveDaysT ScheduleRotationActiveDays = "T"
	ScheduleRotationActiveDaysU ScheduleRotationActiveDays = "U"
	ScheduleRotationActiveDaysW ScheduleRotationActiveDays = "W"
)

// Defines values for ScheduleRotationScheduleRotationableAttributesHandoffDay.
const (
	ScheduleRotationScheduleRotationableAttributesHandoffDayFirstDayOfMonth ScheduleRotationScheduleRotationableAttributesHandoffDay = "first_day_of_month"
	ScheduleRotationScheduleRotationableAttributesHandoffDayLastDayOfMonth  ScheduleRotationScheduleRotationableAttributesHandoffDay = "last_day_of_month"
)

// Defines values for ScheduleRotationScheduleRotationableAttributesShiftLengthUnit.
const (
	ScheduleRotationScheduleRotationableAttributesShiftLengthUnitDays  ScheduleRotationScheduleRotationableAttributesShiftLengthUnit = "days"
	ScheduleRotationScheduleRotationableAttributesShiftLengthUnitHours ScheduleRotationScheduleRotationableAttributesShiftLengthUnit = "hours"
	ScheduleRotationScheduleRotationableAttributesShiftLengthUnitWeeks ScheduleRotationScheduleRotationableAttributesShiftLengthUnit = "weeks"
)

// Defines values for ScheduleRotationScheduleRotationableType.
const (
	ScheduleRotationScheduleRotationableTypeScheduleBiweeklyRotation ScheduleRotationScheduleRotationableType = "ScheduleBiweeklyRotation"
	ScheduleRotationScheduleRotationableTypeScheduleCustomRotation   ScheduleRotationScheduleRotationableType = "ScheduleCustomRotation"
	ScheduleRotationScheduleRotationableTypeScheduleDailyRotation    ScheduleRotationScheduleRotationableType = "ScheduleDailyRotation"
	ScheduleRotationScheduleRotationableTypeScheduleMonthlyRotation  ScheduleRotationScheduleRotationableType = "ScheduleMonthlyRotation"
	ScheduleRotationScheduleRotationableTypeScheduleWeeklyRotation   ScheduleRotationScheduleRotationableType = "ScheduleWeeklyRotation"
)

// Defines values for ScheduleRotationActiveDayDayName.
const (
	ScheduleRotationActiveDayDayNameF ScheduleRotationActiveDayDayName = "F"
	ScheduleRotationActiveDayDayNameM ScheduleRotationActiveDayDayName = "M"
	ScheduleRotationActiveDayDayNameR ScheduleRotationActiveDayDayName = "R"
	ScheduleRotationActiveDayDayNameS ScheduleRotationActiveDayDayName = "S"
	ScheduleRotationActiveDayDayNameT ScheduleRotationActiveDayDayName = "T"
	ScheduleRotationActiveDayDayNameU ScheduleRotationActiveDayDayName = "U"
	ScheduleRotationActiveDayDayNameW ScheduleRotationActiveDayDayName = "W"
)

// Defines values for ScheduleRotationActiveDayListDataType.
const (
	ScheduleRotationActiveDayListDataTypeScheduleRotationActiveDays ScheduleRotationActiveDayListDataType = "schedule_rotation_active_days"
)

// Defines values for ScheduleRotationActiveDayResponseDataType.
const (
	ScheduleRotationActiveDayResponseDataTypeScheduleRotationActiveDays ScheduleRotationActiveDayResponseDataType = "schedule_rotation_active_days"
)

// Defines values for ScheduleRotationListDataType.
const (
	ScheduleRotationListDataTypeScheduleRotations ScheduleRotationListDataType = "schedule_rotations"
)

// Defines values for ScheduleRotationResponseDataType.
const (
	ScheduleRotationResponseDataTypeScheduleRotations ScheduleRotationResponseDataType = "schedule_rotations"
)

// Defines values for ScheduleRotationUserListDataType.
const (
	ScheduleRotationUserListDataTypeScheduleRotationUsers ScheduleRotationUserListDataType = "schedule_rotation_users"
)

// Defines values for ScheduleRotationUserResponseDataType.
const (
	ScheduleRotationUserResponseDataTypeScheduleRotationUsers ScheduleRotationUserResponseDataType = "schedule_rotation_users"
)

// Defines values for SecretListDataType.
const (
	SecretListDataTypeSecrets SecretListDataType = "secrets"
)

// Defines values for SecretResponseDataType.
const (
	SecretResponseDataTypeSecrets SecretResponseDataType = "secrets"
)

// Defines values for SendDashboardReportTaskParamsTaskType.
const (
	SendDashboardReport SendDashboardReportTaskParamsTaskType = "send_dashboard_report"
)

// Defines values for SendEmailTaskParamsTaskType.
const (
	SendEmail SendEmailTaskParamsTaskType = "send_email"
)

// Defines values for SendMicrosoftTeamsBlocksTaskParamsTaskType.
const (
	SendMicrosoftTeamsBlocks SendMicrosoftTeamsBlocksTaskParamsTaskType = "send_microsoft_teams_blocks"
)

// Defines values for SendMicrosoftTeamsMessageTaskParamsTaskType.
const (
	SendMicrosoftTeamsMessage SendMicrosoftTeamsMessageTaskParamsTaskType = "send_microsoft_teams_message"
)

// Defines values for SendSlackBlocksTaskParamsTaskType.
const (
	SendSlackBlocks SendSlackBlocksTaskParamsTaskType = "send_slack_blocks"
)

// Defines values for SendSlackMessageTaskParamsActionables.
const (
	SendSlackMessageTaskParamsActionablesAddOpsgenieResponders  SendSlackMessageTaskParamsActionables = "add_opsgenie_responders"
	SendSlackMessageTaskParamsActionablesAddPagerdutyResponders SendSlackMessageTaskParamsActionables = "add_pagerduty_responders"
	SendSlackMessageTaskParamsActionablesAddVictorOpsResponders SendSlackMessageTaskParamsActionables = "add_victor_ops_responders"
	SendSlackMessageTaskParamsActionablesAllCommands            SendSlackMessageTaskParamsActionables = "all_commands"
	SendSlackMessageTaskParamsActionablesArchiveChannel         SendSlackMessageTaskParamsActionables = "archive_channel"
	SendSlackMessageTaskParamsActionablesCancelIncident         SendSlackMessageTaskParamsActionables = "cancel_incident"
	SendSlackMessageTaskParamsActionablesDeleteMessage          SendSlackMessageTaskParamsActionables = "delete_message"
	SendSlackMessageTaskParamsActionablesLeaveFeedback          SendSlackMessageTaskParamsActionables = "leave_feedback"
	SendSlackMessageTaskParamsActionablesManageActionItems      SendSlackMessageTaskParamsActionables = "manage_action_items"
	SendSlackMessageTaskParamsActionablesManageFormFields       SendSlackMessageTaskParamsActionables = "manage_form_fields"
	SendSlackMessageTaskParamsActionablesManageIncidentRoles    SendSlackMessageTaskParamsActionables = "manage_incident_roles"
	SendSlackMessageTaskParamsActionablesPauseReminder          SendSlackMessageTaskParamsActionables = "pause_reminder"
	SendSlackMessageTaskParamsActionablesRestartReminder        SendSlackMessageTaskParamsActionables = "restart_reminder"
	SendSlackMessageTaskParamsActionablesSnoozeReminder         SendSlackMessageTaskParamsActionables = "snooze_reminder"
	SendSlackMessageTaskParamsActionablesUpdateIncident         SendSlackMessageTaskParamsActionables = "update_incident"
	SendSlackMessageTaskParamsActionablesUpdateStatus           SendSlackMessageTaskParamsActionables = "update_status"
	SendSlackMessageTaskParamsActionablesUpdateStatusPage       SendSlackMessageTaskParamsActionables = "update_status_page"
	SendSlackMessageTaskParamsActionablesUpdateSummary          SendSlackMessageTaskParamsActionables = "update_summary"
	SendSlackMessageTaskParamsActionablesViewTasks              SendSlackMessageTaskParamsActionables = "view_tasks"
)

// Defines values for SendSlackMessageTaskParamsTaskType.
const (
	SendSlackMessage SendSlackMessageTaskParamsTaskType = "send_slack_message"
)

// Defines values for SendSmsTaskParamsTaskType.
const (
	SendSms SendSmsTaskParamsTaskType = "send_sms"
)

// Defines values for SendWhatsappMessageTaskParamsTaskType.
const (
	SendWhatsappMessage SendWhatsappMessageTaskParamsTaskType = "send_whatsapp_message"
)

// Defines values for ServiceListDataType.
const (
	ServiceListDataTypeServices ServiceListDataType = "services"
)

// Defines values for ServiceResponseDataType.
const (
	ServiceResponseDataTypeServices ServiceResponseDataType = "services"
)

// Defines values for SeveritySeverity.
const (
	SeveritySeverityCritical SeveritySeverity = "critical"
	SeveritySeverityHigh     SeveritySeverity = "high"
	SeveritySeverityLow      SeveritySeverity = "low"
	SeveritySeverityMedium   SeveritySeverity = "medium"
)

// Defines values for SeverityListDataType.
const (
	SeverityListDataTypeSeverities SeverityListDataType = "severities"
)

// Defines values for SeverityResponseDataType.
const (
	SeverityResponseDataTypeSeverities SeverityResponseDataType = "severities"
)

// Defines values for ShiftListDataType.
const (
	ShiftListDataTypeShifts ShiftListDataType = "shifts"
)

// Defines values for ShiftOverrideResponseDataType.
const (
	ShiftOverrideResponseDataTypeShiftOverride ShiftOverrideResponseDataType = "shift_override"
)

// Defines values for SimpleTriggerParamsTriggerType.
const (
	SimpleTriggerParamsTriggerTypeSimple SimpleTriggerParamsTriggerType = "simple"
)

// Defines values for SimpleTriggerParamsTriggers.
const (
	SlackCommand SimpleTriggerParamsTriggers = "slack_command"
)

// Defines values for SnapshotDatadogGraphTaskParamsTaskType.
const (
	SnapshotDatadogGraph SnapshotDatadogGraphTaskParamsTaskType = "snapshot_datadog_graph"
)

// Defines values for SnapshotGrafanaDashboardTaskParamsTaskType.
const (
	SnapshotGrafanaDashboard SnapshotGrafanaDashboardTaskParamsTaskType = "snapshot_grafana_dashboard"
)

// Defines values for SnapshotLookerLookTaskParamsTaskType.
const (
	SnapshotLookerLook SnapshotLookerLookTaskParamsTaskType = "snapshot_looker_look"
)

// Defines values for SnapshotNewRelicGraphTaskParamsMetricType.
const (
	APDEX                SnapshotNewRelicGraphTaskParamsMetricType = "APDEX"
	AREA                 SnapshotNewRelicGraphTaskParamsMetricType = "AREA"
	BAR                  SnapshotNewRelicGraphTaskParamsMetricType = "BAR"
	BASELINE             SnapshotNewRelicGraphTaskParamsMetricType = "BASELINE"
	BILLBOARD            SnapshotNewRelicGraphTaskParamsMetricType = "BILLBOARD"
	BULLET               SnapshotNewRelicGraphTaskParamsMetricType = "BULLET"
	EVENTFEED            SnapshotNewRelicGraphTaskParamsMetricType = "EVENT_FEED"
	FUNNEL               SnapshotNewRelicGraphTaskParamsMetricType = "FUNNEL"
	HEATMAP              SnapshotNewRelicGraphTaskParamsMetricType = "HEATMAP"
	HISTOGRAM            SnapshotNewRelicGraphTaskParamsMetricType = "HISTOGRAM"
	LINE                 SnapshotNewRelicGraphTaskParamsMetricType = "LINE"
	PIE                  SnapshotNewRelicGraphTaskParamsMetricType = "PIE"
	SCATTER              SnapshotNewRelicGraphTaskParamsMetricType = "SCATTER"
	STACKEDHORIZONTALBAR SnapshotNewRelicGraphTaskParamsMetricType = "STACKED_HORIZONTAL_BAR"
	TABLE                SnapshotNewRelicGraphTaskParamsMetricType = "TABLE"
	VERTICALBAR          SnapshotNewRelicGraphTaskParamsMetricType = "VERTICAL_BAR"
)

// Defines values for SnapshotNewRelicGraphTaskParamsTaskType.
const (
	SnapshotLookerGraph SnapshotNewRelicGraphTaskParamsTaskType = "snapshot_looker_graph"
)

// Defines values for StatusPageShowUptimeLastDays.
const (
	StatusPageShowUptimeLastDaysN180 StatusPageShowUptimeLastDays = 180
	StatusPageShowUptimeLastDaysN30  StatusPageShowUptimeLastDays = 30
	StatusPageShowUptimeLastDaysN360 StatusPageShowUptimeLastDays = 360
	StatusPageShowUptimeLastDaysN60  StatusPageShowUptimeLastDays = 60
	StatusPageShowUptimeLastDaysN90  StatusPageShowUptimeLastDays = 90
)

// Defines values for StatusPageListDataType.
const (
	StatusPageListDataTypeStatusPages StatusPageListDataType = "status_pages"
)

// Defines values for StatusPageResponseDataType.
const (
	StatusPageResponseDataTypeStatusPages StatusPageResponseDataType = "status_pages"
)

// Defines values for StatusPageTemplateKind.
const (
	StatusPageTemplateKindNormal    StatusPageTemplateKind = "normal"
	StatusPageTemplateKindScheduled StatusPageTemplateKind = "scheduled"
)

// Defines values for StatusPageTemplateListDataType.
const (
	StatusPageTemplateListDataTypeStatusPageTemplates StatusPageTemplateListDataType = "status_page_templates"
)

// Defines values for StatusPageTemplateResponseDataType.
const (
	StatusPageTemplateResponseDataTypeStatusPageTemplates StatusPageTemplateResponseDataType = "status_page_templates"
)

// Defines values for SubStatusParentStatus.
const (
	SubStatusParentStatusCancelled  SubStatusParentStatus = "cancelled"
	SubStatusParentStatusClosed     SubStatusParentStatus = "closed"
	SubStatusParentStatusCompleted  SubStatusParentStatus = "completed"
	SubStatusParentStatusInProgress SubStatusParentStatus = "in_progress"
	SubStatusParentStatusInTriage   SubStatusParentStatus = "in_triage"
	SubStatusParentStatusResolved   SubStatusParentStatus = "resolved"
	SubStatusParentStatusScheduled  SubStatusParentStatus = "scheduled"
	SubStatusParentStatusStarted    SubStatusParentStatus = "started"
)

// Defines values for SubStatusListDataType.
const (
	SubStatusListDataTypeSubStatuses SubStatusListDataType = "sub_statuses"
)

// Defines values for SubStatusResponseDataType.
const (
	SubStatusResponseDataTypeSubStatuses SubStatusResponseDataType = "sub_statuses"
)

// Defines values for TeamListDataType.
const (
	TeamListDataTypeGroups TeamListDataType = "groups"
)

// Defines values for TeamResponseDataType.
const (
	TeamResponseDataTypeGroups TeamResponseDataType = "groups"
)

// Defines values for TriggerWorkflowTaskParamsAttributeToQueryBy.
const (
	TriggerWorkflowTaskParamsAttributeToQueryByAirtableRecordId     TriggerWorkflowTaskParamsAttributeToQueryBy = "airtable_record_id"
	TriggerWorkflowTaskParamsAttributeToQueryByAsanaTaskId          TriggerWorkflowTaskParamsAttributeToQueryBy = "asana_task_id"
	TriggerWorkflowTaskParamsAttributeToQueryByClickupTaskId        TriggerWorkflowTaskParamsAttributeToQueryBy = "clickup_task_id"
	TriggerWorkflowTaskParamsAttributeToQueryByFreshserviceTaskId   TriggerWorkflowTaskParamsAttributeToQueryBy = "freshservice_task_id"
	TriggerWorkflowTaskParamsAttributeToQueryByFreshserviceTicketId TriggerWorkflowTaskParamsAttributeToQueryBy = "freshservice_ticket_id"
	TriggerWorkflowTaskParamsAttributeToQueryByGithubIssueId        TriggerWorkflowTaskParamsAttributeToQueryBy = "github_issue_id"
	TriggerWorkflowTaskParamsAttributeToQueryById                   TriggerWorkflowTaskParamsAttributeToQueryBy = "id"
	TriggerWorkflowTaskParamsAttributeToQueryByJiraIssueId          TriggerWorkflowTaskParamsAttributeToQueryBy = "jira_issue_id"
	TriggerWorkflowTaskParamsAttributeToQueryByLinearIssueId        TriggerWorkflowTaskParamsAttributeToQueryBy = "linear_issue_id"
	TriggerWorkflowTaskParamsAttributeToQueryByMotionTaskId         TriggerWorkflowTaskParamsAttributeToQueryBy = "motion_task_id"
	TriggerWorkflowTaskParamsAttributeToQueryByOpsgenieIncidentId   TriggerWorkflowTaskParamsAttributeToQueryBy = "opsgenie_incident_id"
	TriggerWorkflowTaskParamsAttributeToQueryByPagerdutyIncidentId  TriggerWorkflowTaskParamsAttributeToQueryBy = "pagerduty_incident_id"
	TriggerWorkflowTaskParamsAttributeToQueryBySequentialId         TriggerWorkflowTaskParamsAttributeToQueryBy = "sequential_id"
	TriggerWorkflowTaskParamsAttributeToQueryByShortcutStoryId      TriggerWorkflowTaskParamsAttributeToQueryBy = "shortcut_story_id"
	TriggerWorkflowTaskParamsAttributeToQueryByShortcutTaskId       TriggerWorkflowTaskParamsAttributeToQueryBy = "shortcut_task_id"
	TriggerWorkflowTaskParamsAttributeToQueryBySlug                 TriggerWorkflowTaskParamsAttributeToQueryBy = "slug"
	TriggerWorkflowTaskParamsAttributeToQueryByTrelloCardId         TriggerWorkflowTaskParamsAttributeToQueryBy = "trello_card_id"
	TriggerWorkflowTaskParamsAttributeToQueryByVictorOpsIncidentId  TriggerWorkflowTaskParamsAttributeToQueryBy = "victor_ops_incident_id"
	TriggerWorkflowTaskParamsAttributeToQueryByZendeskTicketId      TriggerWorkflowTaskParamsAttributeToQueryBy = "zendesk_ticket_id"
)

// Defines values for TriggerWorkflowTaskParamsKind.
const (
	TriggerWorkflowTaskParamsKindActionItem TriggerWorkflowTaskParamsKind = "action_item"
	TriggerWorkflowTaskParamsKindAlert      TriggerWorkflowTaskParamsKind = "alert"
	TriggerWorkflowTaskParamsKindIncident   TriggerWorkflowTaskParamsKind = "incident"
	TriggerWorkflowTaskParamsKindPostMortem TriggerWorkflowTaskParamsKind = "post_mortem"
	TriggerWorkflowTaskParamsKindPulse      TriggerWorkflowTaskParamsKind = "pulse"
)

// Defines values for TriggerWorkflowTaskParamsTaskType.
const (
	TriggerWorkflow TriggerWorkflowTaskParamsTaskType = "trigger_workflow"
)

// Defines values for TweetTwitterMessageTaskParamsTaskType.
const (
	TweetTwitterMessage TweetTwitterMessageTaskParamsTaskType = "tweet_twitter_message"
)

// Defines values for UnassignRoleFromUserDataType.
const (
	UnassignRoleFromUserDataTypeIncidents UnassignRoleFromUserDataType = "incidents"
)

// Defines values for UpdateActionItemTaskParamsAttributeToQueryBy.
const (
	UpdateActionItemTaskParamsAttributeToQueryByAirtableRecordId     UpdateActionItemTaskParamsAttributeToQueryBy = "airtable_record_id"
	UpdateActionItemTaskParamsAttributeToQueryByAsanaTaskId          UpdateActionItemTaskParamsAttributeToQueryBy = "asana_task_id"
	UpdateActionItemTaskParamsAttributeToQueryByClickupTaskId        UpdateActionItemTaskParamsAttributeToQueryBy = "clickup_task_id"
	UpdateActionItemTaskParamsAttributeToQueryByFreshserviceTaskId   UpdateActionItemTaskParamsAttributeToQueryBy = "freshservice_task_id"
	UpdateActionItemTaskParamsAttributeToQueryByFreshserviceTicketId UpdateActionItemTaskParamsAttributeToQueryBy = "freshservice_ticket_id"
	UpdateActionItemTaskParamsAttributeToQueryByGithubIssueId        UpdateActionItemTaskParamsAttributeToQueryBy = "github_issue_id"
	UpdateActionItemTaskParamsAttributeToQueryByGitlabIssueId        UpdateActionItemTaskParamsAttributeToQueryBy = "gitlab_issue_id"
	UpdateActionItemTaskParamsAttributeToQueryById                   UpdateActionItemTaskParamsAttributeToQueryBy = "id"
	UpdateActionItemTaskParamsAttributeToQueryByJiraIssueId          UpdateActionItemTaskParamsAttributeToQueryBy = "jira_issue_id"
	UpdateActionItemTaskParamsAttributeToQueryByLinearIssueId        UpdateActionItemTaskParamsAttributeToQueryBy = "linear_issue_id"
	UpdateActionItemTaskParamsAttributeToQueryByMotionTaskId         UpdateActionItemTaskParamsAttributeToQueryBy = "motion_task_id"
	UpdateActionItemTaskParamsAttributeToQueryByShortcutStoryId      UpdateActionItemTaskParamsAttributeToQueryBy = "shortcut_story_id"
	UpdateActionItemTaskParamsAttributeToQueryByShortcutTaskId       UpdateActionItemTaskParamsAttributeToQueryBy = "shortcut_task_id"
	UpdateActionItemTaskParamsAttributeToQueryByTrelloCardId         UpdateActionItemTaskParamsAttributeToQueryBy = "trello_card_id"
	UpdateActionItemTaskParamsAttributeToQueryByZendeskTicketId      UpdateActionItemTaskParamsAttributeToQueryBy = "zendesk_ticket_id"
)

// Defines values for UpdateActionItemTaskParamsPriority.
const (
	UpdateActionItemTaskParamsPriorityHigh   UpdateActionItemTaskParamsPriority = "high"
	UpdateActionItemTaskParamsPriorityLow    UpdateActionItemTaskParamsPriority = "low"
	UpdateActionItemTaskParamsPriorityMedium UpdateActionItemTaskParamsPriority = "medium"
)

// Defines values for UpdateActionItemTaskParamsStatus.
const (
	UpdateActionItemTaskParamsStatusCancelled  UpdateActionItemTaskParamsStatus = "cancelled"
	UpdateActionItemTaskParamsStatusDone       UpdateActionItemTaskParamsStatus = "done"
	UpdateActionItemTaskParamsStatusInProgress UpdateActionItemTaskParamsStatus = "in_progress"
	UpdateActionItemTaskParamsStatusOpen       UpdateActionItemTaskParamsStatus = "open"
)

// Defines values for UpdateActionItemTaskParamsTaskType.
const (
	UpdateActionItem UpdateActionItemTaskParamsTaskType = "update_action_item"
)

// Defines values for UpdateAirtableTableRecordTaskParamsTaskType.
const (
	UpdateAirtableTableRecord UpdateAirtableTableRecordTaskParamsTaskType = "update_airtable_table_record"
)

// Defines values for UpdateAlertGroupDataAttributesAlertGroupTargetsAttributesTargetType.
const (
	UpdateAlertGroupDataAttributesAlertGroupTargetsAttributesTargetTypeEscalationPolicy UpdateAlertGroupDataAttributesAlertGroupTargetsAttributesTargetType = "EscalationPolicy"
	UpdateAlertGroupDataAttributesAlertGroupTargetsAttributesTargetTypeGroup            UpdateAlertGroupDataAttributesAlertGroupTargetsAttributesTargetType = "Group"
	UpdateAlertGroupDataAttributesAlertGroupTargetsAttributesTargetTypeService          UpdateAlertGroupDataAttributesAlertGroupTargetsAttributesTargetType = "Service"
)

// Defines values for UpdateAlertGroupDataAttributesConditionType.
const (
	UpdateAlertGroupDataAttributesConditionTypeAll UpdateAlertGroupDataAttributesConditionType = "all"
	UpdateAlertGroupDataAttributesConditionTypeAny UpdateAlertGroupDataAttributesConditionType = "any"
)

// Defines values for UpdateAlertGroupDataAttributesGroupByAlertTitle.
const (
	UpdateAlertGroupDataAttributesGroupByAlertTitleN0 UpdateAlertGroupDataAttributesGroupByAlertTitle = 0
	UpdateAlertGroupDataAttributesGroupByAlertTitleN1 UpdateAlertGroupDataAttributesGroupByAlertTitle = 1
)

// Defines values for UpdateAlertGroupDataAttributesGroupByAlertUrgency.
const (
	UpdateAlertGroupDataAttributesGroupByAlertUrgencyN0 UpdateAlertGroupDataAttributesGroupByAlertUrgency = 0
	UpdateAlertGroupDataAttributesGroupByAlertUrgencyN1 UpdateAlertGroupDataAttributesGroupByAlertUrgency = 1
)

// Defines values for UpdateAlertGroupDataType.
const (
	UpdateAlertGroupDataTypeAlertGroups UpdateAlertGroupDataType = "alert_groups"
)

// Defines values for UpdateAlertUrgencyDataType.
const (
	UpdateAlertUrgencyDataTypeAlertUrgencies UpdateAlertUrgencyDataType = "alert_urgencies"
)

// Defines values for UpdateAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperator.
const (
	UpdateAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperatorContains       UpdateAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperator = "contains"
	UpdateAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperatorDoesNotContain UpdateAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperator = "does_not_contain"
	UpdateAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperatorIs             UpdateAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperator = "is"
	UpdateAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperatorIsNot          UpdateAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperator = "is_not"
)

// Defines values for UpdateAlertsSourceDataAttributesSourceType.
const (
	UpdateAlertsSourceDataAttributesSourceTypeAlertmanager   UpdateAlertsSourceDataAttributesSourceType = "alertmanager"
	UpdateAlertsSourceDataAttributesSourceTypeAzure          UpdateAlertsSourceDataAttributesSourceType = "azure"
	UpdateAlertsSourceDataAttributesSourceTypeCheckly        UpdateAlertsSourceDataAttributesSourceType = "checkly"
	UpdateAlertsSourceDataAttributesSourceTypeCloudWatch     UpdateAlertsSourceDataAttributesSourceType = "cloud_watch"
	UpdateAlertsSourceDataAttributesSourceTypeDatadog        UpdateAlertsSourceDataAttributesSourceType = "datadog"
	UpdateAlertsSourceDataAttributesSourceTypeGenericWebhook UpdateAlertsSourceDataAttributesSourceType = "generic_webhook"
	UpdateAlertsSourceDataAttributesSourceTypeGoogleCloud    UpdateAlertsSourceDataAttributesSourceType = "google_cloud"
	UpdateAlertsSourceDataAttributesSourceTypeGrafana        UpdateAlertsSourceDataAttributesSourceType = "grafana"
	UpdateAlertsSourceDataAttributesSourceTypeNewRelic       UpdateAlertsSourceDataAttributesSourceType = "new_relic"
	UpdateAlertsSourceDataAttributesSourceTypeSentry         UpdateAlertsSourceDataAttributesSourceType = "sentry"
)

// Defines values for UpdateAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesField.
const (
	UpdateAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesFieldAlertExternalUrl       UpdateAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesField = "alert_external_url"
	UpdateAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesFieldAlertTitle             UpdateAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesField = "alert_title"
	UpdateAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesFieldExternalId             UpdateAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesField = "external_id"
	UpdateAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesFieldNotificationTargetId   UpdateAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesField = "notification_target_id"
	UpdateAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesFieldNotificationTargetType UpdateAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesField = "notification_target_type"
	UpdateAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesFieldState                  UpdateAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesField = "state"
)

// Defines values for UpdateAlertsSourceDataType.
const (
	UpdateAlertsSourceDataTypeAlertSources UpdateAlertsSourceDataType = "alert_sources"
)

// Defines values for UpdateAsanaTaskTaskParamsDependencyDirection.
const (
	BlockedBy UpdateAsanaTaskTaskParamsDependencyDirection = "blocked_by"
	Blocking  UpdateAsanaTaskTaskParamsDependencyDirection = "blocking"
)

// Defines values for UpdateAsanaTaskTaskParamsTaskType.
const (
	UpdateAsanaTask UpdateAsanaTaskTaskParamsTaskType = "update_asana_task"
)

// Defines values for UpdateAttachedAlertsTaskParamsStatus.
const (
	UpdateAttachedAlertsTaskParamsStatusAcknowledged UpdateAttachedAlertsTaskParamsStatus = "acknowledged"
	UpdateAttachedAlertsTaskParamsStatusResolved     UpdateAttachedAlertsTaskParamsStatus = "resolved"
)

// Defines values for UpdateAttachedAlertsTaskParamsTaskType.
const (
	UpdateAttachedAlerts UpdateAttachedAlertsTaskParamsTaskType = "update_attached_alerts"
)

// Defines values for UpdateAuthorizationDataAttributesPermissions.
const (
	UpdateAuthorizationDataAttributesPermissionsAuthorize UpdateAuthorizationDataAttributesPermissions = "authorize"
	UpdateAuthorizationDataAttributesPermissionsDestroy   UpdateAuthorizationDataAttributesPermissions = "destroy"
	UpdateAuthorizationDataAttributesPermissionsRead      UpdateAuthorizationDataAttributesPermissions = "read"
	UpdateAuthorizationDataAttributesPermissionsUpdate    UpdateAuthorizationDataAttributesPermissions = "update"
)

// Defines values for UpdateAuthorizationDataType.
const (
	UpdateAuthorizationDataTypeAuthorizations UpdateAuthorizationDataType = "authorizations"
)

// Defines values for UpdateCatalogDataAttributesIcon.
const (
	UpdateCatalogDataAttributesIconChartBar          UpdateCatalogDataAttributesIcon = "chart-bar"
	UpdateCatalogDataAttributesIconCursorArrowRipple UpdateCatalogDataAttributesIcon = "cursor-arrow-ripple"
	UpdateCatalogDataAttributesIconGlobeAlt          UpdateCatalogDataAttributesIcon = "globe-alt"
	UpdateCatalogDataAttributesIconLightBulb         UpdateCatalogDataAttributesIcon = "light-bulb"
	UpdateCatalogDataAttributesIconServerStack       UpdateCatalogDataAttributesIcon = "server-stack"
	UpdateCatalogDataAttributesIconShapes            UpdateCatalogDataAttributesIcon = "shapes"
	UpdateCatalogDataAttributesIconUserGroup         UpdateCatalogDataAttributesIcon = "user-group"
	UpdateCatalogDataAttributesIconUsers             UpdateCatalogDataAttributesIcon = "users"
)

// Defines values for UpdateCatalogDataType.
const (
	UpdateCatalogDataTypeCatalogs UpdateCatalogDataType = "catalogs"
)

// Defines values for UpdateCatalogEntityDataType.
const (
	UpdateCatalogEntityDataTypeCatalogEntities UpdateCatalogEntityDataType = "catalog_entities"
)

// Defines values for UpdateCatalogEntityPropertyDataAttributesKey.
const (
	UpdateCatalogEntityPropertyDataAttributesKeyCatalogEntity UpdateCatalogEntityPropertyDataAttributesKey = "catalog_entity"
	UpdateCatalogEntityPropertyDataAttributesKeyText          UpdateCatalogEntityPropertyDataAttributesKey = "text"
)

// Defines values for UpdateCatalogEntityPropertyDataType.
const (
	UpdateCatalogEntityPropertyDataTypeCatalogEntityProperties UpdateCatalogEntityPropertyDataType = "catalog_entity_properties"
)

// Defines values for UpdateCatalogFieldDataAttributesKind.
const (
	UpdateCatalogFieldDataAttributesKindReference UpdateCatalogFieldDataAttributesKind = "reference"
	UpdateCatalogFieldDataAttributesKindText      UpdateCatalogFieldDataAttributesKind = "text"
)

// Defines values for UpdateCatalogFieldDataType.
const (
	UpdateCatalogFieldDataTypeCatalogFields UpdateCatalogFieldDataType = "catalog_fields"
)

// Defines values for UpdateCauseDataType.
const (
	UpdateCauseDataTypeCauses UpdateCauseDataType = "causes"
)

// Defines values for UpdateClickupTaskTaskParamsTaskType.
const (
	UpdateClickupTask UpdateClickupTaskTaskParamsTaskType = "update_clickup_task"
)

// Defines values for UpdateCustomFieldDataAttributesRequired.
const (
	UpdateCustomFieldDataAttributesRequiredIncidentForm                UpdateCustomFieldDataAttributesRequired = "incident_form"
	UpdateCustomFieldDataAttributesRequiredIncidentMitigationForm      UpdateCustomFieldDataAttributesRequired = "incident_mitigation_form"
	UpdateCustomFieldDataAttributesRequiredIncidentMitigationSlackForm UpdateCustomFieldDataAttributesRequired = "incident_mitigation_slack_form"
	UpdateCustomFieldDataAttributesRequiredIncidentPostMortemForm      UpdateCustomFieldDataAttributesRequired = "incident_post_mortem_form"
	UpdateCustomFieldDataAttributesRequiredIncidentResolutionForm      UpdateCustomFieldDataAttributesRequired = "incident_resolution_form"
	UpdateCustomFieldDataAttributesRequiredIncidentResolutionSlackForm UpdateCustomFieldDataAttributesRequired = "incident_resolution_slack_form"
	UpdateCustomFieldDataAttributesRequiredIncidentSlackForm           UpdateCustomFieldDataAttributesRequired = "incident_slack_form"
)

// Defines values for UpdateCustomFieldDataAttributesShown.
const (
	UpdateCustomFieldDataAttributesShownIncidentForm                UpdateCustomFieldDataAttributesShown = "incident_form"
	UpdateCustomFieldDataAttributesShownIncidentMitigationForm      UpdateCustomFieldDataAttributesShown = "incident_mitigation_form"
	UpdateCustomFieldDataAttributesShownIncidentMitigationSlackForm UpdateCustomFieldDataAttributesShown = "incident_mitigation_slack_form"
	UpdateCustomFieldDataAttributesShownIncidentPostMortem          UpdateCustomFieldDataAttributesShown = "incident_post_mortem"
	UpdateCustomFieldDataAttributesShownIncidentPostMortemForm      UpdateCustomFieldDataAttributesShown = "incident_post_mortem_form"
	UpdateCustomFieldDataAttributesShownIncidentResolutionForm      UpdateCustomFieldDataAttributesShown = "incident_resolution_form"
	UpdateCustomFieldDataAttributesShownIncidentResolutionSlackForm UpdateCustomFieldDataAttributesShown = "incident_resolution_slack_form"
	UpdateCustomFieldDataAttributesShownIncidentSlackForm           UpdateCustomFieldDataAttributesShown = "incident_slack_form"
)

// Defines values for UpdateCustomFieldDataType.
const (
	UpdateCustomFieldDataTypeCustomFields UpdateCustomFieldDataType = "custom_fields"
)

// Defines values for UpdateCustomFieldOptionDataType.
const (
	UpdateCustomFieldOptionDataTypeCustomFieldOptions UpdateCustomFieldOptionDataType = "custom_field_options"
)

// Defines values for UpdateCustomFormDataType.
const (
	UpdateCustomFormDataTypeCustomForms UpdateCustomFormDataType = "custom_forms"
)

// Defines values for UpdateDashboardDataAttributesColor.
const (
	HashD7F5E1 UpdateDashboardDataAttributesColor = "#D7F5E1"
	HashE9E2FF UpdateDashboardDataAttributesColor = "#E9E2FF"
	HashFAE6E8 UpdateDashboardDataAttributesColor = "#FAE6E8"
	HashFAEEE6 UpdateDashboardDataAttributesColor = "#FAEEE6"
	HashFCF2CF UpdateDashboardDataAttributesColor = "#FCF2CF"
)

// Defines values for UpdateDashboardDataAttributesOwner.
const (
	UpdateDashboardDataAttributesOwnerTeam UpdateDashboardDataAttributesOwner = "team"
	UpdateDashboardDataAttributesOwnerUser UpdateDashboardDataAttributesOwner = "user"
)

// Defines values for UpdateDashboardDataAttributesPeriod.
const (
	UpdateDashboardDataAttributesPeriodDay   UpdateDashboardDataAttributesPeriod = "day"
	UpdateDashboardDataAttributesPeriodMonth UpdateDashboardDataAttributesPeriod = "month"
	UpdateDashboardDataAttributesPeriodWeek  UpdateDashboardDataAttributesPeriod = "week"
)

// Defines values for UpdateDashboardDataType.
const (
	UpdateDashboardDataTypeDashboards UpdateDashboardDataType = "dashboards"
)

// Defines values for UpdateEnvironmentDataType.
const (
	UpdateEnvironmentDataTypeEnvironments UpdateEnvironmentDataType = "environments"
)

// Defines values for UpdateEscalationLevelDataAttributesNotificationTargetParamsType.
const (
	UpdateEscalationLevelDataAttributesNotificationTargetParamsTypeSchedule     UpdateEscalationLevelDataAttributesNotificationTargetParamsType = "schedule"
	UpdateEscalationLevelDataAttributesNotificationTargetParamsTypeSlackChannel UpdateEscalationLevelDataAttributesNotificationTargetParamsType = "slack_channel"
	UpdateEscalationLevelDataAttributesNotificationTargetParamsTypeUser         UpdateEscalationLevelDataAttributesNotificationTargetParamsType = "user"
)

// Defines values for UpdateEscalationLevelDataType.
const (
	EscalationLevels UpdateEscalationLevelDataType = "escalation_levels"
)

// Defines values for UpdateEscalationPathDataAttributesNotificationType.
const (
	UpdateEscalationPathDataAttributesNotificationTypeAudible UpdateEscalationPathDataAttributesNotificationType = "audible"
	UpdateEscalationPathDataAttributesNotificationTypeQuiet   UpdateEscalationPathDataAttributesNotificationType = "quiet"
)

// Defines values for UpdateEscalationPathDataAttributesRulesOperator.
const (
	Contains       UpdateEscalationPathDataAttributesRulesOperator = "contains"
	DoesNotContain UpdateEscalationPathDataAttributesRulesOperator = "does_not_contain"
	Is             UpdateEscalationPathDataAttributesRulesOperator = "is"
	IsNot          UpdateEscalationPathDataAttributesRulesOperator = "is_not"
)

// Defines values for UpdateEscalationPathDataAttributesRulesRuleType.
const (
	UpdateEscalationPathDataAttributesRulesRuleTypeAlertUrgency UpdateEscalationPathDataAttributesRulesRuleType = "alert_urgency"
	UpdateEscalationPathDataAttributesRulesRuleTypeJsonPath     UpdateEscalationPathDataAttributesRulesRuleType = "json_path"
	UpdateEscalationPathDataAttributesRulesRuleTypeWorkingHour  UpdateEscalationPathDataAttributesRulesRuleType = "working_hour"
)

// Defines values for UpdateEscalationPathDataType.
const (
	UpdateEscalationPathDataTypeEscalationPaths UpdateEscalationPathDataType = "escalation_paths"
)

// Defines values for UpdateEscalationPolicyDataType.
const (
	UpdateEscalationPolicyDataTypeEscalationPolicies UpdateEscalationPolicyDataType = "escalation_policies"
)

// Defines values for UpdateFormFieldDataAttributesInputKind.
const (
	Checkbox    UpdateFormFieldDataAttributesInputKind = "checkbox"
	Date        UpdateFormFieldDataAttributesInputKind = "date"
	Datetime    UpdateFormFieldDataAttributesInputKind = "datetime"
	MultiSelect UpdateFormFieldDataAttributesInputKind = "multi_select"
	Number      UpdateFormFieldDataAttributesInputKind = "number"
	RichText    UpdateFormFieldDataAttributesInputKind = "rich_text"
	Select      UpdateFormFieldDataAttributesInputKind = "select"
	Tags        UpdateFormFieldDataAttributesInputKind = "tags"
	Text        UpdateFormFieldDataAttributesInputKind = "text"
	Textarea    UpdateFormFieldDataAttributesInputKind = "textarea"
)

// Defines values for UpdateFormFieldDataAttributesKind.
const (
	UpdateFormFieldDataAttributesKindAcknowledgedAt              UpdateFormFieldDataAttributesKind = "acknowledged_at"
	UpdateFormFieldDataAttributesKindAttachAlerts                UpdateFormFieldDataAttributesKind = "attach_alerts"
	UpdateFormFieldDataAttributesKindCauses                      UpdateFormFieldDataAttributesKind = "causes"
	UpdateFormFieldDataAttributesKindCustom                      UpdateFormFieldDataAttributesKind = "custom"
	UpdateFormFieldDataAttributesKindDetectedAt                  UpdateFormFieldDataAttributesKind = "detected_at"
	UpdateFormFieldDataAttributesKindEnvironments                UpdateFormFieldDataAttributesKind = "environments"
	UpdateFormFieldDataAttributesKindFunctionalities             UpdateFormFieldDataAttributesKind = "functionalities"
	UpdateFormFieldDataAttributesKindInTriageAt                  UpdateFormFieldDataAttributesKind = "in_triage_at"
	UpdateFormFieldDataAttributesKindLabels                      UpdateFormFieldDataAttributesKind = "labels"
	UpdateFormFieldDataAttributesKindManualStartingDatetimeField UpdateFormFieldDataAttributesKind = "manual_starting_datetime_field"
	UpdateFormFieldDataAttributesKindMarkAsBackfilled            UpdateFormFieldDataAttributesKind = "mark_as_backfilled"
	UpdateFormFieldDataAttributesKindMarkAsInTriage              UpdateFormFieldDataAttributesKind = "mark_as_in_triage"
	UpdateFormFieldDataAttributesKindMarkAsTest                  UpdateFormFieldDataAttributesKind = "mark_as_test"
	UpdateFormFieldDataAttributesKindMitigatedAt                 UpdateFormFieldDataAttributesKind = "mitigated_at"
	UpdateFormFieldDataAttributesKindMitigationMessage           UpdateFormFieldDataAttributesKind = "mitigation_message"
	UpdateFormFieldDataAttributesKindNotifyEmails                UpdateFormFieldDataAttributesKind = "notify_emails"
	UpdateFormFieldDataAttributesKindResolutionMessage           UpdateFormFieldDataAttributesKind = "resolution_message"
	UpdateFormFieldDataAttributesKindResolvedAt                  UpdateFormFieldDataAttributesKind = "resolved_at"
	UpdateFormFieldDataAttributesKindServices                    UpdateFormFieldDataAttributesKind = "services"
	UpdateFormFieldDataAttributesKindSeverity                    UpdateFormFieldDataAttributesKind = "severity"
	UpdateFormFieldDataAttributesKindShowOngoingIncidents        UpdateFormFieldDataAttributesKind = "show_ongoing_incidents"
	UpdateFormFieldDataAttributesKindStartedAt                   UpdateFormFieldDataAttributesKind = "started_at"
	UpdateFormFieldDataAttributesKindSummary                     UpdateFormFieldDataAttributesKind = "summary"
	UpdateFormFieldDataAttributesKindTeams                       UpdateFormFieldDataAttributesKind = "teams"
	UpdateFormFieldDataAttributesKindTitle                       UpdateFormFieldDataAttributesKind = "title"
	UpdateFormFieldDataAttributesKindTriggerManualWorkflows      UpdateFormFieldDataAttributesKind = "trigger_manual_workflows"
	UpdateFormFieldDataAttributesKindTypes                       UpdateFormFieldDataAttributesKind = "types"
	UpdateFormFieldDataAttributesKindVisibility                  UpdateFormFieldDataAttributesKind = "visibility"
)

// Defines values for UpdateFormFieldDataAttributesValueKind.
const (
	UpdateFormFieldDataAttributesValueKindCatalogEntity UpdateFormFieldDataAttributesValueKind = "catalog_entity"
	UpdateFormFieldDataAttributesValueKindFunctionality UpdateFormFieldDataAttributesValueKind = "functionality"
	UpdateFormFieldDataAttributesValueKindGroup         UpdateFormFieldDataAttributesValueKind = "group"
	UpdateFormFieldDataAttributesValueKindInherit       UpdateFormFieldDataAttributesValueKind = "inherit"
	UpdateFormFieldDataAttributesValueKindService       UpdateFormFieldDataAttributesValueKind = "service"
	UpdateFormFieldDataAttributesValueKindUser          UpdateFormFieldDataAttributesValueKind = "user"
)

// Defines values for UpdateFormFieldDataType.
const (
	UpdateFormFieldDataTypeFormFields UpdateFormFieldDataType = "form_fields"
)

// Defines values for UpdateFormFieldOptionDataType.
const (
	UpdateFormFieldOptionDataTypeFormFieldOptions UpdateFormFieldOptionDataType = "form_field_options"
)

// Defines values for UpdateFormFieldPlacementDataAttributesPlacementOperator.
const (
	UpdateFormFieldPlacementDataAttributesPlacementOperatorAnd UpdateFormFieldPlacementDataAttributesPlacementOperator = "and"
	UpdateFormFieldPlacementDataAttributesPlacementOperatorOr  UpdateFormFieldPlacementDataAttributesPlacementOperator = "or"
)

// Defines values for UpdateFormFieldPlacementDataAttributesRequiredOperator.
const (
	UpdateFormFieldPlacementDataAttributesRequiredOperatorAnd UpdateFormFieldPlacementDataAttributesRequiredOperator = "and"
	UpdateFormFieldPlacementDataAttributesRequiredOperatorOr  UpdateFormFieldPlacementDataAttributesRequiredOperator = "or"
)

// Defines values for UpdateFormFieldPlacementDataType.
const (
	UpdateFormFieldPlacementDataTypeFormFieldPlacements UpdateFormFieldPlacementDataType = "form_field_placements"
)

// Defines values for UpdateFormFieldPlacementConditionDataAttributesComparison.
const (
	UpdateFormFieldPlacementConditionDataAttributesComparisonEqual    UpdateFormFieldPlacementConditionDataAttributesComparison = "equal"
	UpdateFormFieldPlacementConditionDataAttributesComparisonIsNotSet UpdateFormFieldPlacementConditionDataAttributesComparison = "is_not_set"
	UpdateFormFieldPlacementConditionDataAttributesComparisonIsSet    UpdateFormFieldPlacementConditionDataAttributesComparison = "is_set"
)

// Defines values for UpdateFormFieldPlacementConditionDataAttributesConditioned.
const (
	Placement UpdateFormFieldPlacementConditionDataAttributesConditioned = "placement"
	Required  UpdateFormFieldPlacementConditionDataAttributesConditioned = "required"
)

// Defines values for UpdateFormFieldPlacementConditionDataType.
const (
	UpdateFormFieldPlacementConditionDataTypeFormFieldPlacementConditions UpdateFormFieldPlacementConditionDataType = "form_field_placement_conditions"
)

// Defines values for UpdateFormFieldPositionDataAttributesForm.
const (
	UpdateFormFieldPositionDataAttributesFormIncidentPostMortem               UpdateFormFieldPositionDataAttributesForm = "incident_post_mortem"
	UpdateFormFieldPositionDataAttributesFormSlackIncidentCancellationForm    UpdateFormFieldPositionDataAttributesForm = "slack_incident_cancellation_form"
	UpdateFormFieldPositionDataAttributesFormSlackIncidentMitigationForm      UpdateFormFieldPositionDataAttributesForm = "slack_incident_mitigation_form"
	UpdateFormFieldPositionDataAttributesFormSlackIncidentResolutionForm      UpdateFormFieldPositionDataAttributesForm = "slack_incident_resolution_form"
	UpdateFormFieldPositionDataAttributesFormSlackNewIncidentForm             UpdateFormFieldPositionDataAttributesForm = "slack_new_incident_form"
	UpdateFormFieldPositionDataAttributesFormSlackScheduledIncidentForm       UpdateFormFieldPositionDataAttributesForm = "slack_scheduled_incident_form"
	UpdateFormFieldPositionDataAttributesFormSlackUpdateIncidentForm          UpdateFormFieldPositionDataAttributesForm = "slack_update_incident_form"
	UpdateFormFieldPositionDataAttributesFormSlackUpdateIncidentStatusForm    UpdateFormFieldPositionDataAttributesForm = "slack_update_incident_status_form"
	UpdateFormFieldPositionDataAttributesFormSlackUpdateScheduledIncidentForm UpdateFormFieldPositionDataAttributesForm = "slack_update_scheduled_incident_form"
	UpdateFormFieldPositionDataAttributesFormWebIncidentCancellationForm      UpdateFormFieldPositionDataAttributesForm = "web_incident_cancellation_form"
	UpdateFormFieldPositionDataAttributesFormWebIncidentMitigationForm        UpdateFormFieldPositionDataAttributesForm = "web_incident_mitigation_form"
	UpdateFormFieldPositionDataAttributesFormWebIncidentPostMortemForm        UpdateFormFieldPositionDataAttributesForm = "web_incident_post_mortem_form"
	UpdateFormFieldPositionDataAttributesFormWebIncidentResolutionForm        UpdateFormFieldPositionDataAttributesForm = "web_incident_resolution_form"
	UpdateFormFieldPositionDataAttributesFormWebNewIncidentForm               UpdateFormFieldPositionDataAttributesForm = "web_new_incident_form"
	UpdateFormFieldPositionDataAttributesFormWebScheduledIncidentForm         UpdateFormFieldPositionDataAttributesForm = "web_scheduled_incident_form"
	UpdateFormFieldPositionDataAttributesFormWebUpdateIncidentForm            UpdateFormFieldPositionDataAttributesForm = "web_update_incident_form"
	UpdateFormFieldPositionDataAttributesFormWebUpdateScheduledIncidentForm   UpdateFormFieldPositionDataAttributesForm = "web_update_scheduled_incident_form"
)

// Defines values for UpdateFormFieldPositionDataType.
const (
	UpdateFormFieldPositionDataTypeFormFieldPositions UpdateFormFieldPositionDataType = "form_field_positions"
)

// Defines values for UpdateFormSetDataType.
const (
	UpdateFormSetDataTypeFormSets UpdateFormSetDataType = "form_sets"
)

// Defines values for UpdateFormSetConditionDataAttributesComparison.
const (
	UpdateFormSetConditionDataAttributesComparisonEqual UpdateFormSetConditionDataAttributesComparison = "equal"
)

// Defines values for UpdateFormSetConditionDataType.
const (
	UpdateFormSetConditionDataTypeFormSetConditions UpdateFormSetConditionDataType = "form_set_conditions"
)

// Defines values for UpdateFunctionalityDataType.
const (
	UpdateFunctionalityDataTypeFunctionalities UpdateFunctionalityDataType = "functionalities"
)

// Defines values for UpdateGithubIssueTaskParamsTaskType.
const (
	UpdateGithubIssue UpdateGithubIssueTaskParamsTaskType = "update_github_issue"
)

// Defines values for UpdateGitlabIssueTaskParamsIssueType.
const (
	UpdateGitlabIssueTaskParamsIssueTypeIncident UpdateGitlabIssueTaskParamsIssueType = "incident"
	UpdateGitlabIssueTaskParamsIssueTypeIssue    UpdateGitlabIssueTaskParamsIssueType = "issue"
	UpdateGitlabIssueTaskParamsIssueTypeTask     UpdateGitlabIssueTaskParamsIssueType = "task"
	UpdateGitlabIssueTaskParamsIssueTypeTestCase UpdateGitlabIssueTaskParamsIssueType = "test_case"
)

// Defines values for UpdateGitlabIssueTaskParamsTaskType.
const (
	UpdateGitlabIssue UpdateGitlabIssueTaskParamsTaskType = "update_gitlab_issue"
)

// Defines values for UpdateGoogleCalendarEventTaskParamsConferenceSolutionKey.
const (
	AddOn             UpdateGoogleCalendarEventTaskParamsConferenceSolutionKey = "addOn"
	EventHangout      UpdateGoogleCalendarEventTaskParamsConferenceSolutionKey = "eventHangout"
	EventNamedHangout UpdateGoogleCalendarEventTaskParamsConferenceSolutionKey = "eventNamedHangout"
	HangoutsMeet      UpdateGoogleCalendarEventTaskParamsConferenceSolutionKey = "hangoutsMeet"
)

// Defines values for UpdateGoogleCalendarEventTaskParamsTaskType.
const (
	UpdateGoogleCalendarEventTaskParamsTaskTypeCreateGoogleCalendarEvent UpdateGoogleCalendarEventTaskParamsTaskType = "create_google_calendar_event"
)

// Defines values for UpdateGoogleDocsPageTaskParamsTaskType.
const (
	UpdateGoogleDocsPage UpdateGoogleDocsPageTaskParamsTaskType = "update_google_docs_page"
)

// Defines values for UpdateHeartbeatDataAttributesIntervalUnit.
const (
	UpdateHeartbeatDataAttributesIntervalUnitHours   UpdateHeartbeatDataAttributesIntervalUnit = "hours"
	UpdateHeartbeatDataAttributesIntervalUnitMinutes UpdateHeartbeatDataAttributesIntervalUnit = "minutes"
	UpdateHeartbeatDataAttributesIntervalUnitSeconds UpdateHeartbeatDataAttributesIntervalUnit = "seconds"
)

// Defines values for UpdateHeartbeatDataAttributesNotificationTargetType.
const (
	UpdateHeartbeatDataAttributesNotificationTargetTypeEscalationPolicy UpdateHeartbeatDataAttributesNotificationTargetType = "EscalationPolicy"
	UpdateHeartbeatDataAttributesNotificationTargetTypeGroup            UpdateHeartbeatDataAttributesNotificationTargetType = "Group"
	UpdateHeartbeatDataAttributesNotificationTargetTypeService          UpdateHeartbeatDataAttributesNotificationTargetType = "Service"
	UpdateHeartbeatDataAttributesNotificationTargetTypeUser             UpdateHeartbeatDataAttributesNotificationTargetType = "User"
)

// Defines values for UpdateHeartbeatDataType.
const (
	UpdateHeartbeatDataTypeHeartbeats UpdateHeartbeatDataType = "heartbeats"
)

// Defines values for UpdateIncidentDataAttributesKind.
const (
	Backfilled UpdateIncidentDataAttributesKind = "backfilled"
	Example    UpdateIncidentDataAttributesKind = "example"
	ExampleSub UpdateIncidentDataAttributesKind = "example_sub"
	Normal     UpdateIncidentDataAttributesKind = "normal"
	NormalSub  UpdateIncidentDataAttributesKind = "normal_sub"
	Scheduled  UpdateIncidentDataAttributesKind = "scheduled"
	Test       UpdateIncidentDataAttributesKind = "test"
	TestSub    UpdateIncidentDataAttributesKind = "test_sub"
)

// Defines values for UpdateIncidentDataAttributesStatus.
const (
	UpdateIncidentDataAttributesStatusAcknowledged UpdateIncidentDataAttributesStatus = "acknowledged"
	UpdateIncidentDataAttributesStatusCancelled    UpdateIncidentDataAttributesStatus = "cancelled"
	UpdateIncidentDataAttributesStatusClosed       UpdateIncidentDataAttributesStatus = "closed"
	UpdateIncidentDataAttributesStatusCompleted    UpdateIncidentDataAttributesStatus = "completed"
	UpdateIncidentDataAttributesStatusDetected     UpdateIncidentDataAttributesStatus = "detected"
	UpdateIncidentDataAttributesStatusInProgress   UpdateIncidentDataAttributesStatus = "in_progress"
	UpdateIncidentDataAttributesStatusInTriage     UpdateIncidentDataAttributesStatus = "in_triage"
	UpdateIncidentDataAttributesStatusMitigated    UpdateIncidentDataAttributesStatus = "mitigated"
	UpdateIncidentDataAttributesStatusResolved     UpdateIncidentDataAttributesStatus = "resolved"
	UpdateIncidentDataAttributesStatusScheduled    UpdateIncidentDataAttributesStatus = "scheduled"
	UpdateIncidentDataAttributesStatusStarted      UpdateIncidentDataAttributesStatus = "started"
)

// Defines values for UpdateIncidentDataType.
const (
	Incidents UpdateIncidentDataType = "incidents"
)

// Defines values for UpdateIncidentActionItemDataAttributesKind.
const (
	UpdateIncidentActionItemDataAttributesKindFollowUp UpdateIncidentActionItemDataAttributesKind = "follow_up"
	UpdateIncidentActionItemDataAttributesKindTask     UpdateIncidentActionItemDataAttributesKind = "task"
)

// Defines values for UpdateIncidentActionItemDataAttributesPriority.
const (
	UpdateIncidentActionItemDataAttributesPriorityHigh   UpdateIncidentActionItemDataAttributesPriority = "high"
	UpdateIncidentActionItemDataAttributesPriorityLow    UpdateIncidentActionItemDataAttributesPriority = "low"
	UpdateIncidentActionItemDataAttributesPriorityMedium UpdateIncidentActionItemDataAttributesPriority = "medium"
)

// Defines values for UpdateIncidentActionItemDataAttributesStatus.
const (
	UpdateIncidentActionItemDataAttributesStatusCancelled  UpdateIncidentActionItemDataAttributesStatus = "cancelled"
	UpdateIncidentActionItemDataAttributesStatusDone       UpdateIncidentActionItemDataAttributesStatus = "done"
	UpdateIncidentActionItemDataAttributesStatusInProgress UpdateIncidentActionItemDataAttributesStatus = "in_progress"
	UpdateIncidentActionItemDataAttributesStatusOpen       UpdateIncidentActionItemDataAttributesStatus = "open"
)

// Defines values for UpdateIncidentActionItemDataType.
const (
	UpdateIncidentActionItemDataTypeIncidentActionItems UpdateIncidentActionItemDataType = "incident_action_items"
)

// Defines values for UpdateIncidentCustomFieldSelectionDataType.
const (
	UpdateIncidentCustomFieldSelectionDataTypeIncidentCustomFieldSelections UpdateIncidentCustomFieldSelectionDataType = "incident_custom_field_selections"
)

// Defines values for UpdateIncidentEventDataAttributesVisibility.
const (
	External UpdateIncidentEventDataAttributesVisibility = "external"
	Internal UpdateIncidentEventDataAttributesVisibility = "internal"
)

// Defines values for UpdateIncidentEventDataType.
const (
	UpdateIncidentEventDataTypeIncidentEvents UpdateIncidentEventDataType = "incident_events"
)

// Defines values for UpdateIncidentEventFunctionalityDataAttributesStatus.
const (
	UpdateIncidentEventFunctionalityDataAttributesStatusMajorOutage   UpdateIncidentEventFunctionalityDataAttributesStatus = "major_outage"
	UpdateIncidentEventFunctionalityDataAttributesStatusOperational   UpdateIncidentEventFunctionalityDataAttributesStatus = "operational"
	UpdateIncidentEventFunctionalityDataAttributesStatusPartialOutage UpdateIncidentEventFunctionalityDataAttributesStatus = "partial_outage"
)

// Defines values for UpdateIncidentEventFunctionalityDataType.
const (
	UpdateIncidentEventFunctionalityDataTypeIncidentEventFunctionalities UpdateIncidentEventFunctionalityDataType = "incident_event_functionalities"
)

// Defines values for UpdateIncidentEventServiceDataAttributesStatus.
const (
	UpdateIncidentEventServiceDataAttributesStatusMajorOutage   UpdateIncidentEventServiceDataAttributesStatus = "major_outage"
	UpdateIncidentEventServiceDataAttributesStatusOperational   UpdateIncidentEventServiceDataAttributesStatus = "operational"
	UpdateIncidentEventServiceDataAttributesStatusPartialOutage UpdateIncidentEventServiceDataAttributesStatus = "partial_outage"
)

// Defines values for UpdateIncidentEventServiceDataType.
const (
	UpdateIncidentEventServiceDataTypeIncidentEventServices UpdateIncidentEventServiceDataType = "incident_event_services"
)

// Defines values for UpdateIncidentFeedbackDataAttributesRating.
const (
	N0 UpdateIncidentFeedbackDataAttributesRating = 0
	N1 UpdateIncidentFeedbackDataAttributesRating = 1
	N2 UpdateIncidentFeedbackDataAttributesRating = 2
	N3 UpdateIncidentFeedbackDataAttributesRating = 3
	N4 UpdateIncidentFeedbackDataAttributesRating = 4
)

// Defines values for UpdateIncidentFeedbackDataType.
const (
	UpdateIncidentFeedbackDataTypeIncidentFeedbacks UpdateIncidentFeedbackDataType = "incident_feedbacks"
)

// Defines values for UpdateIncidentFormFieldSelectionDataType.
const (
	UpdateIncidentFormFieldSelectionDataTypeIncidentFormFieldSelections UpdateIncidentFormFieldSelectionDataType = "incident_form_field_selections"
)

// Defines values for UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissions.
const (
	UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissionsCreate UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissions = "create"
	UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissionsDelete UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissions = "delete"
	UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissionsRead   UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissions = "read"
	UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissionsUpdate UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissions = "update"
)

// Defines values for UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissions.
const (
	UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissionsCreate UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissions = "create"
	UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissionsDelete UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissions = "delete"
	UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissionsRead   UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissions = "read"
	UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissionsUpdate UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissions = "update"
)

// Defines values for UpdateIncidentPermissionSetDataType.
const (
	UpdateIncidentPermissionSetDataTypeIncidentPermissionSets UpdateIncidentPermissionSetDataType = "incident_permission_sets"
)

// Defines values for UpdateIncidentPermissionSetBooleanDataAttributesKind.
const (
	UpdateIncidentPermissionSetBooleanDataAttributesKindAssignIncidentRoles UpdateIncidentPermissionSetBooleanDataAttributesKind = "assign_incident_roles"
	UpdateIncidentPermissionSetBooleanDataAttributesKindInviteSubscribers   UpdateIncidentPermissionSetBooleanDataAttributesKind = "invite_subscribers"
	UpdateIncidentPermissionSetBooleanDataAttributesKindModifyCustomFields  UpdateIncidentPermissionSetBooleanDataAttributesKind = "modify_custom_fields"
	UpdateIncidentPermissionSetBooleanDataAttributesKindPublishToStatusPage UpdateIncidentPermissionSetBooleanDataAttributesKind = "publish_to_status_page"
	UpdateIncidentPermissionSetBooleanDataAttributesKindTriggerWorkflows    UpdateIncidentPermissionSetBooleanDataAttributesKind = "trigger_workflows"
	UpdateIncidentPermissionSetBooleanDataAttributesKindUpdateSummary       UpdateIncidentPermissionSetBooleanDataAttributesKind = "update_summary"
	UpdateIncidentPermissionSetBooleanDataAttributesKindUpdateTimeline      UpdateIncidentPermissionSetBooleanDataAttributesKind = "update_timeline"
)

// Defines values for UpdateIncidentPermissionSetBooleanDataType.
const (
	UpdateIncidentPermissionSetBooleanDataTypeIncidentPermissionSetBooleans UpdateIncidentPermissionSetBooleanDataType = "incident_permission_set_booleans"
)

// Defines values for UpdateIncidentPermissionSetResourceDataAttributesKind.
const (
	UpdateIncidentPermissionSetResourceDataAttributesKindIncidentTypes UpdateIncidentPermissionSetResourceDataAttributesKind = "incident_types"
	UpdateIncidentPermissionSetResourceDataAttributesKindSeverities    UpdateIncidentPermissionSetResourceDataAttributesKind = "severities"
	UpdateIncidentPermissionSetResourceDataAttributesKindStatuses      UpdateIncidentPermissionSetResourceDataAttributesKind = "statuses"
	UpdateIncidentPermissionSetResourceDataAttributesKindSubStatuses   UpdateIncidentPermissionSetResourceDataAttributesKind = "sub_statuses"
)

// Defines values for UpdateIncidentPermissionSetResourceDataType.
const (
	UpdateIncidentPermissionSetResourceDataTypeIncidentPermissionSetResources UpdateIncidentPermissionSetResourceDataType = "incident_permission_set_resources"
)

// Defines values for UpdateIncidentPostMortemDataAttributesStatus.
const (
	UpdateIncidentPostMortemDataAttributesStatusDraft     UpdateIncidentPostMortemDataAttributesStatus = "draft"
	UpdateIncidentPostMortemDataAttributesStatusPublished UpdateIncidentPostMortemDataAttributesStatus = "published"
)

// Defines values for UpdateIncidentPostMortemDataType.
const (
	IncidentPostMortems UpdateIncidentPostMortemDataType = "incident_post_mortems"
)

// Defines values for UpdateIncidentPostmortemTaskParamsTaskType.
const (
	UpdateIncidentPostmortem UpdateIncidentPostmortemTaskParamsTaskType = "update_incident_postmortem"
)

// Defines values for UpdateIncidentRetrospectiveStepDataAttributesStatus.
const (
	UpdateIncidentRetrospectiveStepDataAttributesStatusCompleted  UpdateIncidentRetrospectiveStepDataAttributesStatus = "completed"
	UpdateIncidentRetrospectiveStepDataAttributesStatusInProgress UpdateIncidentRetrospectiveStepDataAttributesStatus = "in_progress"
	UpdateIncidentRetrospectiveStepDataAttributesStatusSkipped    UpdateIncidentRetrospectiveStepDataAttributesStatus = "skipped"
	UpdateIncidentRetrospectiveStepDataAttributesStatusTodo       UpdateIncidentRetrospectiveStepDataAttributesStatus = "todo"
)

// Defines values for UpdateIncidentRetrospectiveStepDataType.
const (
	UpdateIncidentRetrospectiveStepDataTypeIncidentRetrospectiveSteps UpdateIncidentRetrospectiveStepDataType = "incident_retrospective_steps"
)

// Defines values for UpdateIncidentRoleDataType.
const (
	UpdateIncidentRoleDataTypeIncidentRoles UpdateIncidentRoleDataType = "incident_roles"
)

// Defines values for UpdateIncidentRoleTaskDataAttributesPriority.
const (
	UpdateIncidentRoleTaskDataAttributesPriorityHigh   UpdateIncidentRoleTaskDataAttributesPriority = "high"
	UpdateIncidentRoleTaskDataAttributesPriorityLow    UpdateIncidentRoleTaskDataAttributesPriority = "low"
	UpdateIncidentRoleTaskDataAttributesPriorityMedium UpdateIncidentRoleTaskDataAttributesPriority = "medium"
)

// Defines values for UpdateIncidentRoleTaskDataType.
const (
	UpdateIncidentRoleTaskDataTypeIncidentRoleTasks UpdateIncidentRoleTaskDataType = "incident_role_tasks"
)

// Defines values for UpdateIncidentStatusPageEventDataAttributesStatus.
const (
	UpdateIncidentStatusPageEventDataAttributesStatusCompleted     UpdateIncidentStatusPageEventDataAttributesStatus = "completed"
	UpdateIncidentStatusPageEventDataAttributesStatusIdentified    UpdateIncidentStatusPageEventDataAttributesStatus = "identified"
	UpdateIncidentStatusPageEventDataAttributesStatusInProgress    UpdateIncidentStatusPageEventDataAttributesStatus = "in_progress"
	UpdateIncidentStatusPageEventDataAttributesStatusInvestigating UpdateIncidentStatusPageEventDataAttributesStatus = "investigating"
	UpdateIncidentStatusPageEventDataAttributesStatusMonitoring    UpdateIncidentStatusPageEventDataAttributesStatus = "monitoring"
	UpdateIncidentStatusPageEventDataAttributesStatusResolved      UpdateIncidentStatusPageEventDataAttributesStatus = "resolved"
	UpdateIncidentStatusPageEventDataAttributesStatusScheduled     UpdateIncidentStatusPageEventDataAttributesStatus = "scheduled"
	UpdateIncidentStatusPageEventDataAttributesStatusVerifying     UpdateIncidentStatusPageEventDataAttributesStatus = "verifying"
)

// Defines values for UpdateIncidentStatusPageEventDataType.
const (
	UpdateIncidentStatusPageEventDataTypeIncidentStatusPageEvents UpdateIncidentStatusPageEventDataType = "incident_status_page_events"
)

// Defines values for UpdateIncidentStatusTimestampTaskParamsTaskType.
const (
	UpdateIncidentStatusTimestampTaskParamsTaskTypeUpdateStatus UpdateIncidentStatusTimestampTaskParamsTaskType = "update_status"
)

// Defines values for UpdateIncidentSubStatusDataType.
const (
	UpdateIncidentSubStatusDataTypeIncidentSubStatuses UpdateIncidentSubStatusDataType = "incident_sub_statuses"
)

// Defines values for UpdateIncidentTaskParamsAttributeToQueryBy.
const (
	UpdateIncidentTaskParamsAttributeToQueryByAirtableRecordId     UpdateIncidentTaskParamsAttributeToQueryBy = "airtable_record_id"
	UpdateIncidentTaskParamsAttributeToQueryByAsanaTaskId          UpdateIncidentTaskParamsAttributeToQueryBy = "asana_task_id"
	UpdateIncidentTaskParamsAttributeToQueryByClickupTaskId        UpdateIncidentTaskParamsAttributeToQueryBy = "clickup_task_id"
	UpdateIncidentTaskParamsAttributeToQueryByFreshserviceTaskId   UpdateIncidentTaskParamsAttributeToQueryBy = "freshservice_task_id"
	UpdateIncidentTaskParamsAttributeToQueryByFreshserviceTicketId UpdateIncidentTaskParamsAttributeToQueryBy = "freshservice_ticket_id"
	UpdateIncidentTaskParamsAttributeToQueryByGithubIssueId        UpdateIncidentTaskParamsAttributeToQueryBy = "github_issue_id"
	UpdateIncidentTaskParamsAttributeToQueryByGitlabIssueId        UpdateIncidentTaskParamsAttributeToQueryBy = "gitlab_issue_id"
	UpdateIncidentTaskParamsAttributeToQueryById                   UpdateIncidentTaskParamsAttributeToQueryBy = "id"
	UpdateIncidentTaskParamsAttributeToQueryByJiraIssueId          UpdateIncidentTaskParamsAttributeToQueryBy = "jira_issue_id"
	UpdateIncidentTaskParamsAttributeToQueryByLinearIssueId        UpdateIncidentTaskParamsAttributeToQueryBy = "linear_issue_id"
	UpdateIncidentTaskParamsAttributeToQueryByMotionTaskId         UpdateIncidentTaskParamsAttributeToQueryBy = "motion_task_id"
	UpdateIncidentTaskParamsAttributeToQueryByOpsgenieIncidentId   UpdateIncidentTaskParamsAttributeToQueryBy = "opsgenie_incident_id"
	UpdateIncidentTaskParamsAttributeToQueryByPagerdutyIncidentId  UpdateIncidentTaskParamsAttributeToQueryBy = "pagerduty_incident_id"
	UpdateIncidentTaskParamsAttributeToQueryBySequentialId         UpdateIncidentTaskParamsAttributeToQueryBy = "sequential_id"
	UpdateIncidentTaskParamsAttributeToQueryByShortcutStoryId      UpdateIncidentTaskParamsAttributeToQueryBy = "shortcut_story_id"
	UpdateIncidentTaskParamsAttributeToQueryByShortcutTaskId       UpdateIncidentTaskParamsAttributeToQueryBy = "shortcut_task_id"
	UpdateIncidentTaskParamsAttributeToQueryBySlug                 UpdateIncidentTaskParamsAttributeToQueryBy = "slug"
	UpdateIncidentTaskParamsAttributeToQueryByTrelloCardId         UpdateIncidentTaskParamsAttributeToQueryBy = "trello_card_id"
	UpdateIncidentTaskParamsAttributeToQueryByVictorOpsIncidentId  UpdateIncidentTaskParamsAttributeToQueryBy = "victor_ops_incident_id"
	UpdateIncidentTaskParamsAttributeToQueryByZendeskTicketId      UpdateIncidentTaskParamsAttributeToQueryBy = "zendesk_ticket_id"
)

// Defines values for UpdateIncidentTaskParamsTaskType.
const (
	UpdateIncidentTaskParamsTaskTypeUpdateIncident UpdateIncidentTaskParamsTaskType = "update_incident"
)

// Defines values for UpdateIncidentTypeDataType.
const (
	UpdateIncidentTypeDataTypeIncidentTypes UpdateIncidentTypeDataType = "incident_types"
)

// Defines values for UpdateJiraIssueTaskParamsTaskType.
const (
	UpdateJiraIssue UpdateJiraIssueTaskParamsTaskType = "update_jira_issue"
)

// Defines values for UpdateLinearIssueTaskParamsTaskType.
const (
	UpdateLinearIssue UpdateLinearIssueTaskParamsTaskType = "update_linear_issue"
)

// Defines values for UpdateLiveCallRouterDataAttributesCountryCode.
const (
	UpdateLiveCallRouterDataAttributesCountryCodeAU UpdateLiveCallRouterDataAttributesCountryCode = "AU"
	UpdateLiveCallRouterDataAttributesCountryCodeCA UpdateLiveCallRouterDataAttributesCountryCode = "CA"
	UpdateLiveCallRouterDataAttributesCountryCodeGB UpdateLiveCallRouterDataAttributesCountryCode = "GB"
	UpdateLiveCallRouterDataAttributesCountryCodeNZ UpdateLiveCallRouterDataAttributesCountryCode = "NZ"
	UpdateLiveCallRouterDataAttributesCountryCodeUS UpdateLiveCallRouterDataAttributesCountryCode = "US"
)

// Defines values for UpdateLiveCallRouterDataAttributesEscalationPolicyTriggerParamsType.
const (
	UpdateLiveCallRouterDataAttributesEscalationPolicyTriggerParamsTypeEscalationPolicy UpdateLiveCallRouterDataAttributesEscalationPolicyTriggerParamsType = "EscalationPolicy"
	UpdateLiveCallRouterDataAttributesEscalationPolicyTriggerParamsTypeGroup            UpdateLiveCallRouterDataAttributesEscalationPolicyTriggerParamsType = "Group"
	UpdateLiveCallRouterDataAttributesEscalationPolicyTriggerParamsTypeService          UpdateLiveCallRouterDataAttributesEscalationPolicyTriggerParamsType = "Service"
)

// Defines values for UpdateLiveCallRouterDataAttributesKind.
const (
	Live      UpdateLiveCallRouterDataAttributesKind = "live"
	Voicemail UpdateLiveCallRouterDataAttributesKind = "voicemail"
)

// Defines values for UpdateLiveCallRouterDataAttributesPhoneType.
const (
	UpdateLiveCallRouterDataAttributesPhoneTypeLocal    UpdateLiveCallRouterDataAttributesPhoneType = "local"
	UpdateLiveCallRouterDataAttributesPhoneTypeTollFree UpdateLiveCallRouterDataAttributesPhoneType = "toll_free"
)

// Defines values for UpdateLiveCallRouterDataType.
const (
	UpdateLiveCallRouterDataTypeLiveCallRouters UpdateLiveCallRouterDataType = "live_call_routers"
)

// Defines values for UpdateMotionTaskTaskParamsTaskType.
const (
	UpdateMotionTask UpdateMotionTaskTaskParamsTaskType = "update_motion_task"
)

// Defines values for UpdateNotionPageTaskParamsTaskType.
const (
	UpdateNotionPage UpdateNotionPageTaskParamsTaskType = "update_notion_page"
)

// Defines values for UpdateOnCallRoleDataAttributesAlertSourcesPermissions.
const (
	UpdateOnCallRoleDataAttributesAlertSourcesPermissionsCreate UpdateOnCallRoleDataAttributesAlertSourcesPermissions = "create"
	UpdateOnCallRoleDataAttributesAlertSourcesPermissionsDelete UpdateOnCallRoleDataAttributesAlertSourcesPermissions = "delete"
	UpdateOnCallRoleDataAttributesAlertSourcesPermissionsUpdate UpdateOnCallRoleDataAttributesAlertSourcesPermissions = "update"
)

// Defines values for UpdateOnCallRoleDataAttributesAlertUrgencyPermissions.
const (
	UpdateOnCallRoleDataAttributesAlertUrgencyPermissionsCreate UpdateOnCallRoleDataAttributesAlertUrgencyPermissions = "create"
	UpdateOnCallRoleDataAttributesAlertUrgencyPermissionsDelete UpdateOnCallRoleDataAttributesAlertUrgencyPermissions = "delete"
	UpdateOnCallRoleDataAttributesAlertUrgencyPermissionsRead   UpdateOnCallRoleDataAttributesAlertUrgencyPermissions = "read"
	UpdateOnCallRoleDataAttributesAlertUrgencyPermissionsUpdate UpdateOnCallRoleDataAttributesAlertUrgencyPermissions = "update"
)

// Defines values for UpdateOnCallRoleDataAttributesAlertsPermissions.
const (
	UpdateOnCallRoleDataAttributesAlertsPermissionsCreate UpdateOnCallRoleDataAttributesAlertsPermissions = "create"
	UpdateOnCallRoleDataAttributesAlertsPermissionsRead   UpdateOnCallRoleDataAttributesAlertsPermissions = "read"
	UpdateOnCallRoleDataAttributesAlertsPermissionsUpdate UpdateOnCallRoleDataAttributesAlertsPermissions = "update"
)

// Defines values for UpdateOnCallRoleDataAttributesApiKeysPermissions.
const (
	UpdateOnCallRoleDataAttributesApiKeysPermissionsCreate UpdateOnCallRoleDataAttributesApiKeysPermissions = "create"
	UpdateOnCallRoleDataAttributesApiKeysPermissionsDelete UpdateOnCallRoleDataAttributesApiKeysPermissions = "delete"
	UpdateOnCallRoleDataAttributesApiKeysPermissionsRead   UpdateOnCallRoleDataAttributesApiKeysPermissions = "read"
	UpdateOnCallRoleDataAttributesApiKeysPermissionsUpdate UpdateOnCallRoleDataAttributesApiKeysPermissions = "update"
)

// Defines values for UpdateOnCallRoleDataAttributesAuditsPermissions.
const (
	UpdateOnCallRoleDataAttributesAuditsPermissionsCreate UpdateOnCallRoleDataAttributesAuditsPermissions = "create"
	UpdateOnCallRoleDataAttributesAuditsPermissionsDelete UpdateOnCallRoleDataAttributesAuditsPermissions = "delete"
	UpdateOnCallRoleDataAttributesAuditsPermissionsRead   UpdateOnCallRoleDataAttributesAuditsPermissions = "read"
	UpdateOnCallRoleDataAttributesAuditsPermissionsUpdate UpdateOnCallRoleDataAttributesAuditsPermissions = "update"
)

// Defines values for UpdateOnCallRoleDataAttributesContactsPermissions.
const (
	UpdateOnCallRoleDataAttributesContactsPermissionsRead UpdateOnCallRoleDataAttributesContactsPermissions = "read"
)

// Defines values for UpdateOnCallRoleDataAttributesEscalationPoliciesPermissions.
const (
	UpdateOnCallRoleDataAttributesEscalationPoliciesPermissionsCreate UpdateOnCallRoleDataAttributesEscalationPoliciesPermissions = "create"
	UpdateOnCallRoleDataAttributesEscalationPoliciesPermissionsDelete UpdateOnCallRoleDataAttributesEscalationPoliciesPermissions = "delete"
	UpdateOnCallRoleDataAttributesEscalationPoliciesPermissionsRead   UpdateOnCallRoleDataAttributesEscalationPoliciesPermissions = "read"
	UpdateOnCallRoleDataAttributesEscalationPoliciesPermissionsUpdate UpdateOnCallRoleDataAttributesEscalationPoliciesPermissions = "update"
)

// Defines values for UpdateOnCallRoleDataAttributesGroupsPermissions.
const (
	UpdateOnCallRoleDataAttributesGroupsPermissionsCreate UpdateOnCallRoleDataAttributesGroupsPermissions = "create"
	UpdateOnCallRoleDataAttributesGroupsPermissionsDelete UpdateOnCallRoleDataAttributesGroupsPermissions = "delete"
	UpdateOnCallRoleDataAttributesGroupsPermissionsRead   UpdateOnCallRoleDataAttributesGroupsPermissions = "read"
	UpdateOnCallRoleDataAttributesGroupsPermissionsUpdate UpdateOnCallRoleDataAttributesGroupsPermissions = "update"
)

// Defines values for UpdateOnCallRoleDataAttributesHeartbeatsPermissions.
const (
	UpdateOnCallRoleDataAttributesHeartbeatsPermissionsCreate UpdateOnCallRoleDataAttributesHeartbeatsPermissions = "create"
	UpdateOnCallRoleDataAttributesHeartbeatsPermissionsDelete UpdateOnCallRoleDataAttributesHeartbeatsPermissions = "delete"
	UpdateOnCallRoleDataAttributesHeartbeatsPermissionsRead   UpdateOnCallRoleDataAttributesHeartbeatsPermissions = "read"
	UpdateOnCallRoleDataAttributesHeartbeatsPermissionsUpdate UpdateOnCallRoleDataAttributesHeartbeatsPermissions = "update"
)

// Defines values for UpdateOnCallRoleDataAttributesIntegrationsPermissions.
const (
	UpdateOnCallRoleDataAttributesIntegrationsPermissionsCreate UpdateOnCallRoleDataAttributesIntegrationsPermissions = "create"
	UpdateOnCallRoleDataAttributesIntegrationsPermissionsDelete UpdateOnCallRoleDataAttributesIntegrationsPermissions = "delete"
	UpdateOnCallRoleDataAttributesIntegrationsPermissionsRead   UpdateOnCallRoleDataAttributesIntegrationsPermissions = "read"
	UpdateOnCallRoleDataAttributesIntegrationsPermissionsUpdate UpdateOnCallRoleDataAttributesIntegrationsPermissions = "update"
)

// Defines values for UpdateOnCallRoleDataAttributesInvitationsPermissions.
const (
	UpdateOnCallRoleDataAttributesInvitationsPermissionsCreate UpdateOnCallRoleDataAttributesInvitationsPermissions = "create"
	UpdateOnCallRoleDataAttributesInvitationsPermissionsDelete UpdateOnCallRoleDataAttributesInvitationsPermissions = "delete"
	UpdateOnCallRoleDataAttributesInvitationsPermissionsRead   UpdateOnCallRoleDataAttributesInvitationsPermissions = "read"
	UpdateOnCallRoleDataAttributesInvitationsPermissionsUpdate UpdateOnCallRoleDataAttributesInvitationsPermissions = "update"
)

// Defines values for UpdateOnCallRoleDataAttributesLiveCallRoutingPermissions.
const (
	UpdateOnCallRoleDataAttributesLiveCallRoutingPermissionsCreate UpdateOnCallRoleDataAttributesLiveCallRoutingPermissions = "create"
	UpdateOnCallRoleDataAttributesLiveCallRoutingPermissionsDelete UpdateOnCallRoleDataAttributesLiveCallRoutingPermissions = "delete"
	UpdateOnCallRoleDataAttributesLiveCallRoutingPermissionsRead   UpdateOnCallRoleDataAttributesLiveCallRoutingPermissions = "read"
	UpdateOnCallRoleDataAttributesLiveCallRoutingPermissionsUpdate UpdateOnCallRoleDataAttributesLiveCallRoutingPermissions = "update"
)

// Defines values for UpdateOnCallRoleDataAttributesScheduleOverridePermissions.
const (
	UpdateOnCallRoleDataAttributesScheduleOverridePermissionsCreate UpdateOnCallRoleDataAttributesScheduleOverridePermissions = "create"
	UpdateOnCallRoleDataAttributesScheduleOverridePermissionsUpdate UpdateOnCallRoleDataAttributesScheduleOverridePermissions = "update"
)

// Defines values for UpdateOnCallRoleDataAttributesSchedulesPermissions.
const (
	UpdateOnCallRoleDataAttributesSchedulesPermissionsCreate UpdateOnCallRoleDataAttributesSchedulesPermissions = "create"
	UpdateOnCallRoleDataAttributesSchedulesPermissionsDelete UpdateOnCallRoleDataAttributesSchedulesPermissions = "delete"
	UpdateOnCallRoleDataAttributesSchedulesPermissionsRead   UpdateOnCallRoleDataAttributesSchedulesPermissions = "read"
	UpdateOnCallRoleDataAttributesSchedulesPermissionsUpdate UpdateOnCallRoleDataAttributesSchedulesPermissions = "update"
)

// Defines values for UpdateOnCallRoleDataAttributesServicesPermissions.
const (
	UpdateOnCallRoleDataAttributesServicesPermissionsCreate UpdateOnCallRoleDataAttributesServicesPermissions = "create"
	UpdateOnCallRoleDataAttributesServicesPermissionsDelete UpdateOnCallRoleDataAttributesServicesPermissions = "delete"
	UpdateOnCallRoleDataAttributesServicesPermissionsRead   UpdateOnCallRoleDataAttributesServicesPermissions = "read"
	UpdateOnCallRoleDataAttributesServicesPermissionsUpdate UpdateOnCallRoleDataAttributesServicesPermissions = "update"
)

// Defines values for UpdateOnCallRoleDataAttributesWebhooksPermissions.
const (
	UpdateOnCallRoleDataAttributesWebhooksPermissionsCreate UpdateOnCallRoleDataAttributesWebhooksPermissions = "create"
	UpdateOnCallRoleDataAttributesWebhooksPermissionsDelete UpdateOnCallRoleDataAttributesWebhooksPermissions = "delete"
	UpdateOnCallRoleDataAttributesWebhooksPermissionsRead   UpdateOnCallRoleDataAttributesWebhooksPermissions = "read"
	UpdateOnCallRoleDataAttributesWebhooksPermissionsUpdate UpdateOnCallRoleDataAttributesWebhooksPermissions = "update"
)

// Defines values for UpdateOnCallRoleDataAttributesWorkflowsPermissions.
const (
	UpdateOnCallRoleDataAttributesWorkflowsPermissionsCreate UpdateOnCallRoleDataAttributesWorkflowsPermissions = "create"
	UpdateOnCallRoleDataAttributesWorkflowsPermissionsDelete UpdateOnCallRoleDataAttributesWorkflowsPermissions = "delete"
	UpdateOnCallRoleDataAttributesWorkflowsPermissionsRead   UpdateOnCallRoleDataAttributesWorkflowsPermissions = "read"
	UpdateOnCallRoleDataAttributesWorkflowsPermissionsUpdate UpdateOnCallRoleDataAttributesWorkflowsPermissions = "update"
)

// Defines values for UpdateOnCallRoleDataType.
const (
	UpdateOnCallRoleDataTypeOnCallRoles UpdateOnCallRoleDataType = "on_call_roles"
)

// Defines values for UpdateOnCallShadowDataAttributesShadowableType.
const (
	UpdateOnCallShadowDataAttributesShadowableTypeSchedule UpdateOnCallShadowDataAttributesShadowableType = "Schedule"
	UpdateOnCallShadowDataAttributesShadowableTypeUser     UpdateOnCallShadowDataAttributesShadowableType = "User"
)

// Defines values for UpdateOnCallShadowDataType.
const (
	UpdateOnCallShadowDataTypeOnCallShadows UpdateOnCallShadowDataType = "on_call_shadows"
)

// Defines values for UpdateOpsgenieAlertTaskParamsPriority.
const (
	UpdateOpsgenieAlertTaskParamsPriorityAuto UpdateOpsgenieAlertTaskParamsPriority = "auto"
	UpdateOpsgenieAlertTaskParamsPriorityP1   UpdateOpsgenieAlertTaskParamsPriority = "P1"
	UpdateOpsgenieAlertTaskParamsPriorityP2   UpdateOpsgenieAlertTaskParamsPriority = "P2"
	UpdateOpsgenieAlertTaskParamsPriorityP3   UpdateOpsgenieAlertTaskParamsPriority = "P3"
	UpdateOpsgenieAlertTaskParamsPriorityP4   UpdateOpsgenieAlertTaskParamsPriority = "P4"
	UpdateOpsgenieAlertTaskParamsPriorityP5   UpdateOpsgenieAlertTaskParamsPriority = "P5"
)

// Defines values for UpdateOpsgenieAlertTaskParamsTaskType.
const (
	UpdateOpsgenieAlert UpdateOpsgenieAlertTaskParamsTaskType = "update_opsgenie_alert"
)

// Defines values for UpdateOpsgenieIncidentTaskParamsPriority.
const (
	UpdateOpsgenieIncidentTaskParamsPriorityAuto UpdateOpsgenieIncidentTaskParamsPriority = "auto"
	UpdateOpsgenieIncidentTaskParamsPriorityP1   UpdateOpsgenieIncidentTaskParamsPriority = "P1"
	UpdateOpsgenieIncidentTaskParamsPriorityP2   UpdateOpsgenieIncidentTaskParamsPriority = "P2"
	UpdateOpsgenieIncidentTaskParamsPriorityP3   UpdateOpsgenieIncidentTaskParamsPriority = "P3"
	UpdateOpsgenieIncidentTaskParamsPriorityP4   UpdateOpsgenieIncidentTaskParamsPriority = "P4"
	UpdateOpsgenieIncidentTaskParamsPriorityP5   UpdateOpsgenieIncidentTaskParamsPriority = "P5"
)

// Defines values for UpdateOpsgenieIncidentTaskParamsStatus.
const (
	UpdateOpsgenieIncidentTaskParamsStatusAuto    UpdateOpsgenieIncidentTaskParamsStatus = "auto"
	UpdateOpsgenieIncidentTaskParamsStatusClose   UpdateOpsgenieIncidentTaskParamsStatus = "close"
	UpdateOpsgenieIncidentTaskParamsStatusOpen    UpdateOpsgenieIncidentTaskParamsStatus = "open"
	UpdateOpsgenieIncidentTaskParamsStatusResolve UpdateOpsgenieIncidentTaskParamsStatus = "resolve"
)

// Defines values for UpdateOpsgenieIncidentTaskParamsTaskType.
const (
	UpdateOpsgenieIncident UpdateOpsgenieIncidentTaskParamsTaskType = "update_opsgenie_incident"
)

// Defines values for UpdateOverrideShiftDataType.
const (
	Shifts UpdateOverrideShiftDataType = "shifts"
)

// Defines values for UpdatePagerdutyIncidentTaskParamsStatus.
const (
	UpdatePagerdutyIncidentTaskParamsStatusAcknowledged UpdatePagerdutyIncidentTaskParamsStatus = "acknowledged"
	UpdatePagerdutyIncidentTaskParamsStatusAuto         UpdatePagerdutyIncidentTaskParamsStatus = "auto"
	UpdatePagerdutyIncidentTaskParamsStatusResolved     UpdatePagerdutyIncidentTaskParamsStatus = "resolved"
)

// Defines values for UpdatePagerdutyIncidentTaskParamsTaskType.
const (
	UpdatePagerdutyIncident UpdatePagerdutyIncidentTaskParamsTaskType = "update_pagerduty_incident"
)

// Defines values for UpdatePagerdutyIncidentTaskParamsUrgency.
const (
	UpdatePagerdutyIncidentTaskParamsUrgencyAuto UpdatePagerdutyIncidentTaskParamsUrgency = "auto"
	UpdatePagerdutyIncidentTaskParamsUrgencyHigh UpdatePagerdutyIncidentTaskParamsUrgency = "high"
	UpdatePagerdutyIncidentTaskParamsUrgencyLow  UpdatePagerdutyIncidentTaskParamsUrgency = "low"
)

// Defines values for UpdatePagertreeAlertTaskParamsSeverity.
const (
	UpdatePagertreeAlertTaskParamsSeverityAuto UpdatePagertreeAlertTaskParamsSeverity = "auto"
	UpdatePagertreeAlertTaskParamsSeveritySEV1 UpdatePagertreeAlertTaskParamsSeverity = "SEV-1"
	UpdatePagertreeAlertTaskParamsSeveritySEV2 UpdatePagertreeAlertTaskParamsSeverity = "SEV-2"
	UpdatePagertreeAlertTaskParamsSeveritySEV3 UpdatePagertreeAlertTaskParamsSeverity = "SEV-3"
	UpdatePagertreeAlertTaskParamsSeveritySEV4 UpdatePagertreeAlertTaskParamsSeverity = "SEV-4"
)

// Defines values for UpdatePagertreeAlertTaskParamsTaskType.
const (
	UpdatePagertreeAlert UpdatePagertreeAlertTaskParamsTaskType = "update_pagertree_alert"
)

// Defines values for UpdatePagertreeAlertTaskParamsUrgency.
const (
	UpdatePagertreeAlertTaskParamsUrgencyAuto     UpdatePagertreeAlertTaskParamsUrgency = "auto"
	UpdatePagertreeAlertTaskParamsUrgencyCritical UpdatePagertreeAlertTaskParamsUrgency = "critical"
	UpdatePagertreeAlertTaskParamsUrgencyHigh     UpdatePagertreeAlertTaskParamsUrgency = "high"
	UpdatePagertreeAlertTaskParamsUrgencyLow      UpdatePagertreeAlertTaskParamsUrgency = "low"
	UpdatePagertreeAlertTaskParamsUrgencyMedium   UpdatePagertreeAlertTaskParamsUrgency = "medium"
)

// Defines values for UpdatePlaybookDataType.
const (
	UpdatePlaybookDataTypePlaybooks UpdatePlaybookDataType = "playbooks"
)

// Defines values for UpdatePlaybookTaskDataType.
const (
	UpdatePlaybookTaskDataTypePlaybookTasks UpdatePlaybookTaskDataType = "playbook_tasks"
)

// Defines values for UpdatePostMortemTemplateDataAttributesFormat.
const (
	Html     UpdatePostMortemTemplateDataAttributesFormat = "html"
	Markdown UpdatePostMortemTemplateDataAttributesFormat = "markdown"
)

// Defines values for UpdatePostMortemTemplateDataType.
const (
	UpdatePostMortemTemplateDataTypePostMortemTemplates UpdatePostMortemTemplateDataType = "post_mortem_templates"
)

// Defines values for UpdatePulseDataType.
const (
	UpdatePulseDataTypePulses UpdatePulseDataType = "pulses"
)

// Defines values for UpdateRetrospectiveConfigurationDataType.
const (
	RetrospectiveConfigurations UpdateRetrospectiveConfigurationDataType = "retrospective_configurations"
)

// Defines values for UpdateRetrospectiveProcessDataType.
const (
	UpdateRetrospectiveProcessDataTypeRetrospectiveProcesses UpdateRetrospectiveProcessDataType = "retrospective_processes"
)

// Defines values for UpdateRetrospectiveProcessGroupDataType.
const (
	UpdateRetrospectiveProcessGroupDataTypeRetrospectiveProcessGroups UpdateRetrospectiveProcessGroupDataType = "retrospective_process_groups"
)

// Defines values for UpdateRetrospectiveProcessGroupStepDataType.
const (
	UpdateRetrospectiveProcessGroupStepDataTypeRetrospectiveProcessGroupSteps UpdateRetrospectiveProcessGroupStepDataType = "retrospective_process_group_steps"
)

// Defines values for UpdateRetrospectiveStepDataType.
const (
	UpdateRetrospectiveStepDataTypeRetrospectiveSteps UpdateRetrospectiveStepDataType = "retrospective_steps"
)

// Defines values for UpdateRoleDataAttributesApiKeysPermissions.
const (
	UpdateRoleDataAttributesApiKeysPermissionsCreate UpdateRoleDataAttributesApiKeysPermissions = "create"
	UpdateRoleDataAttributesApiKeysPermissionsDelete UpdateRoleDataAttributesApiKeysPermissions = "delete"
	UpdateRoleDataAttributesApiKeysPermissionsRead   UpdateRoleDataAttributesApiKeysPermissions = "read"
	UpdateRoleDataAttributesApiKeysPermissionsUpdate UpdateRoleDataAttributesApiKeysPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesAuditsPermissions.
const (
	UpdateRoleDataAttributesAuditsPermissionsCreate UpdateRoleDataAttributesAuditsPermissions = "create"
	UpdateRoleDataAttributesAuditsPermissionsDelete UpdateRoleDataAttributesAuditsPermissions = "delete"
	UpdateRoleDataAttributesAuditsPermissionsRead   UpdateRoleDataAttributesAuditsPermissions = "read"
	UpdateRoleDataAttributesAuditsPermissionsUpdate UpdateRoleDataAttributesAuditsPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesBillingPermissions.
const (
	UpdateRoleDataAttributesBillingPermissionsCreate UpdateRoleDataAttributesBillingPermissions = "create"
	UpdateRoleDataAttributesBillingPermissionsDelete UpdateRoleDataAttributesBillingPermissions = "delete"
	UpdateRoleDataAttributesBillingPermissionsRead   UpdateRoleDataAttributesBillingPermissions = "read"
	UpdateRoleDataAttributesBillingPermissionsUpdate UpdateRoleDataAttributesBillingPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesEnvironmentsPermissions.
const (
	UpdateRoleDataAttributesEnvironmentsPermissionsCreate UpdateRoleDataAttributesEnvironmentsPermissions = "create"
	UpdateRoleDataAttributesEnvironmentsPermissionsDelete UpdateRoleDataAttributesEnvironmentsPermissions = "delete"
	UpdateRoleDataAttributesEnvironmentsPermissionsRead   UpdateRoleDataAttributesEnvironmentsPermissions = "read"
	UpdateRoleDataAttributesEnvironmentsPermissionsUpdate UpdateRoleDataAttributesEnvironmentsPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesFormFieldsPermissions.
const (
	UpdateRoleDataAttributesFormFieldsPermissionsCreate UpdateRoleDataAttributesFormFieldsPermissions = "create"
	UpdateRoleDataAttributesFormFieldsPermissionsDelete UpdateRoleDataAttributesFormFieldsPermissions = "delete"
	UpdateRoleDataAttributesFormFieldsPermissionsRead   UpdateRoleDataAttributesFormFieldsPermissions = "read"
	UpdateRoleDataAttributesFormFieldsPermissionsUpdate UpdateRoleDataAttributesFormFieldsPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesFunctionalitiesPermissions.
const (
	UpdateRoleDataAttributesFunctionalitiesPermissionsCreate UpdateRoleDataAttributesFunctionalitiesPermissions = "create"
	UpdateRoleDataAttributesFunctionalitiesPermissionsDelete UpdateRoleDataAttributesFunctionalitiesPermissions = "delete"
	UpdateRoleDataAttributesFunctionalitiesPermissionsRead   UpdateRoleDataAttributesFunctionalitiesPermissions = "read"
	UpdateRoleDataAttributesFunctionalitiesPermissionsUpdate UpdateRoleDataAttributesFunctionalitiesPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesGroupsPermissions.
const (
	UpdateRoleDataAttributesGroupsPermissionsCreate UpdateRoleDataAttributesGroupsPermissions = "create"
	UpdateRoleDataAttributesGroupsPermissionsDelete UpdateRoleDataAttributesGroupsPermissions = "delete"
	UpdateRoleDataAttributesGroupsPermissionsRead   UpdateRoleDataAttributesGroupsPermissions = "read"
	UpdateRoleDataAttributesGroupsPermissionsUpdate UpdateRoleDataAttributesGroupsPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesIncidentCausesPermissions.
const (
	UpdateRoleDataAttributesIncidentCausesPermissionsCreate UpdateRoleDataAttributesIncidentCausesPermissions = "create"
	UpdateRoleDataAttributesIncidentCausesPermissionsDelete UpdateRoleDataAttributesIncidentCausesPermissions = "delete"
	UpdateRoleDataAttributesIncidentCausesPermissionsRead   UpdateRoleDataAttributesIncidentCausesPermissions = "read"
	UpdateRoleDataAttributesIncidentCausesPermissionsUpdate UpdateRoleDataAttributesIncidentCausesPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesIncidentFeedbacksPermissions.
const (
	UpdateRoleDataAttributesIncidentFeedbacksPermissionsCreate UpdateRoleDataAttributesIncidentFeedbacksPermissions = "create"
	UpdateRoleDataAttributesIncidentFeedbacksPermissionsDelete UpdateRoleDataAttributesIncidentFeedbacksPermissions = "delete"
	UpdateRoleDataAttributesIncidentFeedbacksPermissionsRead   UpdateRoleDataAttributesIncidentFeedbacksPermissions = "read"
	UpdateRoleDataAttributesIncidentFeedbacksPermissionsUpdate UpdateRoleDataAttributesIncidentFeedbacksPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesIncidentRolesPermissions.
const (
	UpdateRoleDataAttributesIncidentRolesPermissionsCreate UpdateRoleDataAttributesIncidentRolesPermissions = "create"
	UpdateRoleDataAttributesIncidentRolesPermissionsDelete UpdateRoleDataAttributesIncidentRolesPermissions = "delete"
	UpdateRoleDataAttributesIncidentRolesPermissionsRead   UpdateRoleDataAttributesIncidentRolesPermissions = "read"
	UpdateRoleDataAttributesIncidentRolesPermissionsUpdate UpdateRoleDataAttributesIncidentRolesPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesIncidentTypesPermissions.
const (
	UpdateRoleDataAttributesIncidentTypesPermissionsCreate UpdateRoleDataAttributesIncidentTypesPermissions = "create"
	UpdateRoleDataAttributesIncidentTypesPermissionsDelete UpdateRoleDataAttributesIncidentTypesPermissions = "delete"
	UpdateRoleDataAttributesIncidentTypesPermissionsRead   UpdateRoleDataAttributesIncidentTypesPermissions = "read"
	UpdateRoleDataAttributesIncidentTypesPermissionsUpdate UpdateRoleDataAttributesIncidentTypesPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesIncidentsPermissions.
const (
	UpdateRoleDataAttributesIncidentsPermissionsCreate UpdateRoleDataAttributesIncidentsPermissions = "create"
	UpdateRoleDataAttributesIncidentsPermissionsDelete UpdateRoleDataAttributesIncidentsPermissions = "delete"
	UpdateRoleDataAttributesIncidentsPermissionsRead   UpdateRoleDataAttributesIncidentsPermissions = "read"
	UpdateRoleDataAttributesIncidentsPermissionsUpdate UpdateRoleDataAttributesIncidentsPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesInvitationsPermissions.
const (
	UpdateRoleDataAttributesInvitationsPermissionsCreate UpdateRoleDataAttributesInvitationsPermissions = "create"
	UpdateRoleDataAttributesInvitationsPermissionsDelete UpdateRoleDataAttributesInvitationsPermissions = "delete"
	UpdateRoleDataAttributesInvitationsPermissionsRead   UpdateRoleDataAttributesInvitationsPermissions = "read"
	UpdateRoleDataAttributesInvitationsPermissionsUpdate UpdateRoleDataAttributesInvitationsPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesPlaybooksPermissions.
const (
	UpdateRoleDataAttributesPlaybooksPermissionsCreate UpdateRoleDataAttributesPlaybooksPermissions = "create"
	UpdateRoleDataAttributesPlaybooksPermissionsDelete UpdateRoleDataAttributesPlaybooksPermissions = "delete"
	UpdateRoleDataAttributesPlaybooksPermissionsRead   UpdateRoleDataAttributesPlaybooksPermissions = "read"
	UpdateRoleDataAttributesPlaybooksPermissionsUpdate UpdateRoleDataAttributesPlaybooksPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesPrivateIncidentsPermissions.
const (
	UpdateRoleDataAttributesPrivateIncidentsPermissionsCreate UpdateRoleDataAttributesPrivateIncidentsPermissions = "create"
	UpdateRoleDataAttributesPrivateIncidentsPermissionsDelete UpdateRoleDataAttributesPrivateIncidentsPermissions = "delete"
	UpdateRoleDataAttributesPrivateIncidentsPermissionsRead   UpdateRoleDataAttributesPrivateIncidentsPermissions = "read"
	UpdateRoleDataAttributesPrivateIncidentsPermissionsUpdate UpdateRoleDataAttributesPrivateIncidentsPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesRetrospectivePermissions.
const (
	UpdateRoleDataAttributesRetrospectivePermissionsCreate UpdateRoleDataAttributesRetrospectivePermissions = "create"
	UpdateRoleDataAttributesRetrospectivePermissionsDelete UpdateRoleDataAttributesRetrospectivePermissions = "delete"
	UpdateRoleDataAttributesRetrospectivePermissionsRead   UpdateRoleDataAttributesRetrospectivePermissions = "read"
	UpdateRoleDataAttributesRetrospectivePermissionsUpdate UpdateRoleDataAttributesRetrospectivePermissions = "update"
)

// Defines values for UpdateRoleDataAttributesRolesPermissions.
const (
	UpdateRoleDataAttributesRolesPermissionsCreate UpdateRoleDataAttributesRolesPermissions = "create"
	UpdateRoleDataAttributesRolesPermissionsDelete UpdateRoleDataAttributesRolesPermissions = "delete"
	UpdateRoleDataAttributesRolesPermissionsRead   UpdateRoleDataAttributesRolesPermissions = "read"
	UpdateRoleDataAttributesRolesPermissionsUpdate UpdateRoleDataAttributesRolesPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesSecretsPermissions.
const (
	UpdateRoleDataAttributesSecretsPermissionsCreate UpdateRoleDataAttributesSecretsPermissions = "create"
	UpdateRoleDataAttributesSecretsPermissionsDelete UpdateRoleDataAttributesSecretsPermissions = "delete"
	UpdateRoleDataAttributesSecretsPermissionsRead   UpdateRoleDataAttributesSecretsPermissions = "read"
	UpdateRoleDataAttributesSecretsPermissionsUpdate UpdateRoleDataAttributesSecretsPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesServicesPermissions.
const (
	UpdateRoleDataAttributesServicesPermissionsCreate UpdateRoleDataAttributesServicesPermissions = "create"
	UpdateRoleDataAttributesServicesPermissionsDelete UpdateRoleDataAttributesServicesPermissions = "delete"
	UpdateRoleDataAttributesServicesPermissionsRead   UpdateRoleDataAttributesServicesPermissions = "read"
	UpdateRoleDataAttributesServicesPermissionsUpdate UpdateRoleDataAttributesServicesPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesSeveritiesPermissions.
const (
	UpdateRoleDataAttributesSeveritiesPermissionsCreate UpdateRoleDataAttributesSeveritiesPermissions = "create"
	UpdateRoleDataAttributesSeveritiesPermissionsDelete UpdateRoleDataAttributesSeveritiesPermissions = "delete"
	UpdateRoleDataAttributesSeveritiesPermissionsRead   UpdateRoleDataAttributesSeveritiesPermissions = "read"
	UpdateRoleDataAttributesSeveritiesPermissionsUpdate UpdateRoleDataAttributesSeveritiesPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesStatusPagesPermissions.
const (
	UpdateRoleDataAttributesStatusPagesPermissionsCreate UpdateRoleDataAttributesStatusPagesPermissions = "create"
	UpdateRoleDataAttributesStatusPagesPermissionsDelete UpdateRoleDataAttributesStatusPagesPermissions = "delete"
	UpdateRoleDataAttributesStatusPagesPermissionsRead   UpdateRoleDataAttributesStatusPagesPermissions = "read"
	UpdateRoleDataAttributesStatusPagesPermissionsUpdate UpdateRoleDataAttributesStatusPagesPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesWebhooksPermissions.
const (
	UpdateRoleDataAttributesWebhooksPermissionsCreate UpdateRoleDataAttributesWebhooksPermissions = "create"
	UpdateRoleDataAttributesWebhooksPermissionsDelete UpdateRoleDataAttributesWebhooksPermissions = "delete"
	UpdateRoleDataAttributesWebhooksPermissionsRead   UpdateRoleDataAttributesWebhooksPermissions = "read"
	UpdateRoleDataAttributesWebhooksPermissionsUpdate UpdateRoleDataAttributesWebhooksPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesWorkflowsPermissions.
const (
	Create UpdateRoleDataAttributesWorkflowsPermissions = "create"
	Delete UpdateRoleDataAttributesWorkflowsPermissions = "delete"
	Read   UpdateRoleDataAttributesWorkflowsPermissions = "read"
	Update UpdateRoleDataAttributesWorkflowsPermissions = "update"
)

// Defines values for UpdateRoleDataType.
const (
	UpdateRoleDataTypeRoles UpdateRoleDataType = "roles"
)

// Defines values for UpdateScheduleDataType.
const (
	UpdateScheduleDataTypeSchedules UpdateScheduleDataType = "schedules"
)

// Defines values for UpdateScheduleRotationDataAttributesActiveDays.
const (
	UpdateScheduleRotationDataAttributesActiveDaysF UpdateScheduleRotationDataAttributesActiveDays = "F"
	UpdateScheduleRotationDataAttributesActiveDaysM UpdateScheduleRotationDataAttributesActiveDays = "M"
	UpdateScheduleRotationDataAttributesActiveDaysR UpdateScheduleRotationDataAttributesActiveDays = "R"
	UpdateScheduleRotationDataAttributesActiveDaysS UpdateScheduleRotationDataAttributesActiveDays = "S"
	UpdateScheduleRotationDataAttributesActiveDaysT UpdateScheduleRotationDataAttributesActiveDays = "T"
	UpdateScheduleRotationDataAttributesActiveDaysU UpdateScheduleRotationDataAttributesActiveDays = "U"
	UpdateScheduleRotationDataAttributesActiveDaysW UpdateScheduleRotationDataAttributesActiveDays = "W"
)

// Defines values for UpdateScheduleRotationDataAttributesScheduleRotationableAttributesHandoffDay.
const (
	FirstDayOfMonth UpdateScheduleRotationDataAttributesScheduleRotationableAttributesHandoffDay = "first_day_of_month"
	LastDayOfMonth  UpdateScheduleRotationDataAttributesScheduleRotationableAttributesHandoffDay = "last_day_of_month"
)

// Defines values for UpdateScheduleRotationDataAttributesScheduleRotationableAttributesShiftLengthUnit.
const (
	UpdateScheduleRotationDataAttributesScheduleRotationableAttributesShiftLengthUnitDays  UpdateScheduleRotationDataAttributesScheduleRotationableAttributesShiftLengthUnit = "days"
	UpdateScheduleRotationDataAttributesScheduleRotationableAttributesShiftLengthUnitHours UpdateScheduleRotationDataAttributesScheduleRotationableAttributesShiftLengthUnit = "hours"
	UpdateScheduleRotationDataAttributesScheduleRotationableAttributesShiftLengthUnitWeeks UpdateScheduleRotationDataAttributesScheduleRotationableAttributesShiftLengthUnit = "weeks"
)

// Defines values for UpdateScheduleRotationDataAttributesScheduleRotationableType.
const (
	ScheduleBiweeklyRotation UpdateScheduleRotationDataAttributesScheduleRotationableType = "ScheduleBiweeklyRotation"
	ScheduleCustomRotation   UpdateScheduleRotationDataAttributesScheduleRotationableType = "ScheduleCustomRotation"
	ScheduleDailyRotation    UpdateScheduleRotationDataAttributesScheduleRotationableType = "ScheduleDailyRotation"
	ScheduleMonthlyRotation  UpdateScheduleRotationDataAttributesScheduleRotationableType = "ScheduleMonthlyRotation"
	ScheduleWeeklyRotation   UpdateScheduleRotationDataAttributesScheduleRotationableType = "ScheduleWeeklyRotation"
)

// Defines values for UpdateScheduleRotationDataType.
const (
	UpdateScheduleRotationDataTypeScheduleRotations UpdateScheduleRotationDataType = "schedule_rotations"
)

// Defines values for UpdateScheduleRotationActiveDayDataAttributesDayName.
const (
	UpdateScheduleRotationActiveDayDataAttributesDayNameF UpdateScheduleRotationActiveDayDataAttributesDayName = "F"
	UpdateScheduleRotationActiveDayDataAttributesDayNameM UpdateScheduleRotationActiveDayDataAttributesDayName = "M"
	UpdateScheduleRotationActiveDayDataAttributesDayNameR UpdateScheduleRotationActiveDayDataAttributesDayName = "R"
	UpdateScheduleRotationActiveDayDataAttributesDayNameS UpdateScheduleRotationActiveDayDataAttributesDayName = "S"
	UpdateScheduleRotationActiveDayDataAttributesDayNameT UpdateScheduleRotationActiveDayDataAttributesDayName = "T"
	UpdateScheduleRotationActiveDayDataAttributesDayNameU UpdateScheduleRotationActiveDayDataAttributesDayName = "U"
	UpdateScheduleRotationActiveDayDataAttributesDayNameW UpdateScheduleRotationActiveDayDataAttributesDayName = "W"
)

// Defines values for UpdateScheduleRotationActiveDayDataType.
const (
	UpdateScheduleRotationActiveDayDataTypeScheduleRotationActiveDays UpdateScheduleRotationActiveDayDataType = "schedule_rotation_active_days"
)

// Defines values for UpdateScheduleRotationUserDataType.
const (
	UpdateScheduleRotationUserDataTypeScheduleRotationUsers UpdateScheduleRotationUserDataType = "schedule_rotation_users"
)

// Defines values for UpdateSecretDataType.
const (
	UpdateSecretDataTypeSecrets UpdateSecretDataType = "secrets"
)

// Defines values for UpdateServiceDataType.
const (
	UpdateServiceDataTypeServices UpdateServiceDataType = "services"
)

// Defines values for UpdateServiceNowIncidentTaskParamsTaskType.
const (
	UpdateServiceNowIncident UpdateServiceNowIncidentTaskParamsTaskType = "update_service_now_incident"
)

// Defines values for UpdateSeverityDataAttributesSeverity.
const (
	Critical UpdateSeverityDataAttributesSeverity = "critical"
	High     UpdateSeverityDataAttributesSeverity = "high"
	Low      UpdateSeverityDataAttributesSeverity = "low"
	Medium   UpdateSeverityDataAttributesSeverity = "medium"
)

// Defines values for UpdateSeverityDataType.
const (
	UpdateSeverityDataTypeSeverities UpdateSeverityDataType = "severities"
)

// Defines values for UpdateShortcutStoryTaskParamsTaskType.
const (
	UpdateShortcutStory UpdateShortcutStoryTaskParamsTaskType = "update_shortcut_story"
)

// Defines values for UpdateShortcutTaskTaskParamsTaskType.
const (
	UpdateShortcutTask UpdateShortcutTaskTaskParamsTaskType = "update_shortcut_task"
)

// Defines values for UpdateSlackChannelTopicTaskParamsTaskType.
const (
	UpdateSlackChannelTopic UpdateSlackChannelTopicTaskParamsTaskType = "update_slack_channel_topic"
)

// Defines values for UpdateStatusPageDataAttributesShowUptimeLastDays.
const (
	N180 UpdateStatusPageDataAttributesShowUptimeLastDays = 180
	N30  UpdateStatusPageDataAttributesShowUptimeLastDays = 30
	N360 UpdateStatusPageDataAttributesShowUptimeLastDays = 360
	N60  UpdateStatusPageDataAttributesShowUptimeLastDays = 60
	N90  UpdateStatusPageDataAttributesShowUptimeLastDays = 90
)

// Defines values for UpdateStatusPageDataType.
const (
	UpdateStatusPageDataTypeStatusPages UpdateStatusPageDataType = "status_pages"
)

// Defines values for UpdateStatusTaskParamsStatus.
const (
	UpdateStatusTaskParamsStatusCancelled UpdateStatusTaskParamsStatus = "cancelled"
	UpdateStatusTaskParamsStatusClosed    UpdateStatusTaskParamsStatus = "closed"
	UpdateStatusTaskParamsStatusInTriage  UpdateStatusTaskParamsStatus = "in_triage"
	UpdateStatusTaskParamsStatusMitigated UpdateStatusTaskParamsStatus = "mitigated"
	UpdateStatusTaskParamsStatusResolved  UpdateStatusTaskParamsStatus = "resolved"
	UpdateStatusTaskParamsStatusStarted   UpdateStatusTaskParamsStatus = "started"
)

// Defines values for UpdateStatusTaskParamsTaskType.
const (
	UpdateStatusTaskParamsTaskTypeUpdateStatus UpdateStatusTaskParamsTaskType = "update_status"
)

// Defines values for UpdateSubStatusDataType.
const (
	UpdateSubStatusDataTypeSubStatuses UpdateSubStatusDataType = "sub_statuses"
)

// Defines values for UpdateTeamDataType.
const (
	UpdateTeamDataTypeGroups UpdateTeamDataType = "groups"
)

// Defines values for UpdateTrelloCardTaskParamsTaskType.
const (
	UpdateTrelloCard UpdateTrelloCardTaskParamsTaskType = "update_trello_card"
)

// Defines values for UpdateUserNotificationRuleDataAttributesEnabledContactTypes.
const (
	UpdateUserNotificationRuleDataAttributesEnabledContactTypesCall              UpdateUserNotificationRuleDataAttributesEnabledContactTypes = "call"
	UpdateUserNotificationRuleDataAttributesEnabledContactTypesDevice            UpdateUserNotificationRuleDataAttributesEnabledContactTypes = "device"
	UpdateUserNotificationRuleDataAttributesEnabledContactTypesEmail             UpdateUserNotificationRuleDataAttributesEnabledContactTypes = "email"
	UpdateUserNotificationRuleDataAttributesEnabledContactTypesNonCriticalDevice UpdateUserNotificationRuleDataAttributesEnabledContactTypes = "non_critical_device"
	UpdateUserNotificationRuleDataAttributesEnabledContactTypesSms               UpdateUserNotificationRuleDataAttributesEnabledContactTypes = "sms"
)

// Defines values for UpdateUserNotificationRuleDataType.
const (
	UpdateUserNotificationRuleDataTypeUserNotificationRules UpdateUserNotificationRuleDataType = "user_notification_rules"
)

// Defines values for UpdateVictorOpsIncidentTaskParamsStatus.
const (
	Ack     UpdateVictorOpsIncidentTaskParamsStatus = "ack"
	Auto    UpdateVictorOpsIncidentTaskParamsStatus = "auto"
	Resolve UpdateVictorOpsIncidentTaskParamsStatus = "resolve"
)

// Defines values for UpdateVictorOpsIncidentTaskParamsTaskType.
const (
	UpdateVictorOpsIncident UpdateVictorOpsIncidentTaskParamsTaskType = "update_victor_ops_incident"
)

// Defines values for UpdateWebhooksEndpointDataAttributesEventTypes.
const (
	UpdateWebhooksEndpointDataAttributesEventTypesAlertCreated                UpdateWebhooksEndpointDataAttributesEventTypes = "alert.created"
	UpdateWebhooksEndpointDataAttributesEventTypesGeniusWorkflowRunCanceled   UpdateWebhooksEndpointDataAttributesEventTypes = "genius_workflow_run.canceled"
	UpdateWebhooksEndpointDataAttributesEventTypesGeniusWorkflowRunCompleted  UpdateWebhooksEndpointDataAttributesEventTypes = "genius_workflow_run.completed"
	UpdateWebhooksEndpointDataAttributesEventTypesGeniusWorkflowRunFailed     UpdateWebhooksEndpointDataAttributesEventTypes = "genius_workflow_run.failed"
	UpdateWebhooksEndpointDataAttributesEventTypesGeniusWorkflowRunQueued     UpdateWebhooksEndpointDataAttributesEventTypes = "genius_workflow_run.queued"
	UpdateWebhooksEndpointDataAttributesEventTypesGeniusWorkflowRunStarted    UpdateWebhooksEndpointDataAttributesEventTypes = "genius_workflow_run.started"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentCancelled           UpdateWebhooksEndpointDataAttributesEventTypes = "incident.cancelled"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentCreated             UpdateWebhooksEndpointDataAttributesEventTypes = "incident.created"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentDeleted             UpdateWebhooksEndpointDataAttributesEventTypes = "incident.deleted"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentInTriage            UpdateWebhooksEndpointDataAttributesEventTypes = "incident.in_triage"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentMitigated           UpdateWebhooksEndpointDataAttributesEventTypes = "incident.mitigated"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentPostMortemCreated   UpdateWebhooksEndpointDataAttributesEventTypes = "incident_post_mortem.created"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentPostMortemDeleted   UpdateWebhooksEndpointDataAttributesEventTypes = "incident_post_mortem.deleted"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentPostMortemPublished UpdateWebhooksEndpointDataAttributesEventTypes = "incident_post_mortem.published"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentPostMortemUpdated   UpdateWebhooksEndpointDataAttributesEventTypes = "incident_post_mortem.updated"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentResolved            UpdateWebhooksEndpointDataAttributesEventTypes = "incident.resolved"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentScheduledCompleted  UpdateWebhooksEndpointDataAttributesEventTypes = "incident.scheduled.completed"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentScheduledCreated    UpdateWebhooksEndpointDataAttributesEventTypes = "incident.scheduled.created"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentScheduledDeleted    UpdateWebhooksEndpointDataAttributesEventTypes = "incident.scheduled.deleted"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentScheduledInProgress UpdateWebhooksEndpointDataAttributesEventTypes = "incident.scheduled.in_progress"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentScheduledUpdated    UpdateWebhooksEndpointDataAttributesEventTypes = "incident.scheduled.updated"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentUpdated             UpdateWebhooksEndpointDataAttributesEventTypes = "incident.updated"
	UpdateWebhooksEndpointDataAttributesEventTypesPulseCreated                UpdateWebhooksEndpointDataAttributesEventTypes = "pulse.created"
)

// Defines values for UpdateWebhooksEndpointDataType.
const (
	UpdateWebhooksEndpointDataTypeWebhooksEndpoints UpdateWebhooksEndpointDataType = "webhooks_endpoints"
)

// Defines values for UpdateWorkflowDataType.
const (
	UpdateWorkflowDataTypeWorkflows UpdateWorkflowDataType = "workflows"
)

// Defines values for UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition.
const (
	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionANY          UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "ANY"
	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionCONTAINS     UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "CONTAINS"
	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionCONTAINSALL  UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "CONTAINS_ALL"
	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionCONTAINSNONE UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "CONTAINS_NONE"
	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionIS           UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "IS"
	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionNONE         UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "NONE"
	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionSET          UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "SET"
	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionUNSET        UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "UNSET"
)

// Defines values for UpdateWorkflowCustomFieldSelectionDataType.
const (
	UpdateWorkflowCustomFieldSelectionDataTypeWorkflowCustomFieldSelections UpdateWorkflowCustomFieldSelectionDataType = "workflow_custom_field_selections"
)

// Defines values for UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition.
const (
	UpdateWorkflowFormFieldConditionDataAttributesIncidentConditionANY          UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition = "ANY"
	UpdateWorkflowFormFieldConditionDataAttributesIncidentConditionCONTAINS     UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition = "CONTAINS"
	UpdateWorkflowFormFieldConditionDataAttributesIncidentConditionCONTAINSALL  UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition = "CONTAINS_ALL"
	UpdateWorkflowFormFieldConditionDataAttributesIncidentConditionCONTAINSNONE UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition = "CONTAINS_NONE"
	UpdateWorkflowFormFieldConditionDataAttributesIncidentConditionIS           UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition = "IS"
	UpdateWorkflowFormFieldConditionDataAttributesIncidentConditionNONE         UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition = "NONE"
	UpdateWorkflowFormFieldConditionDataAttributesIncidentConditionSET          UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition = "SET"
	UpdateWorkflowFormFieldConditionDataAttributesIncidentConditionUNSET        UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition = "UNSET"
)

// Defines values for UpdateWorkflowFormFieldConditionDataType.
const (
	UpdateWorkflowFormFieldConditionDataTypeWorkflowFormFieldConditions UpdateWorkflowFormFieldConditionDataType = "workflow_form_field_conditions"
)

// Defines values for UpdateWorkflowGroupDataAttributesKind.
const (
	UpdateWorkflowGroupDataAttributesKindActionItem UpdateWorkflowGroupDataAttributesKind = "action_item"
	UpdateWorkflowGroupDataAttributesKindAlert      UpdateWorkflowGroupDataAttributesKind = "alert"
	UpdateWorkflowGroupDataAttributesKindIncident   UpdateWorkflowGroupDataAttributesKind = "incident"
	UpdateWorkflowGroupDataAttributesKindPostMortem UpdateWorkflowGroupDataAttributesKind = "post_mortem"
	UpdateWorkflowGroupDataAttributesKindPulse      UpdateWorkflowGroupDataAttributesKind = "pulse"
	UpdateWorkflowGroupDataAttributesKindSimple     UpdateWorkflowGroupDataAttributesKind = "simple"
)

// Defines values for UpdateWorkflowGroupDataType.
const (
	UpdateWorkflowGroupDataTypeWorkflowGroups UpdateWorkflowGroupDataType = "workflow_groups"
)

// Defines values for UpdateWorkflowTaskDataType.
const (
	UpdateWorkflowTaskDataTypeWorkflowTasks UpdateWorkflowTaskDataType = "workflow_tasks"
)

// Defines values for UpdateZendeskTicketTaskParamsTaskType.
const (
	UpdateZendeskTicket UpdateZendeskTicketTaskParamsTaskType = "update_zendesk_ticket"
)

// Defines values for UserListDataType.
const (
	UserListDataTypeUsers UserListDataType = "users"
)

// Defines values for UserNotificationRuleEnabledContactTypes.
const (
	Call              UserNotificationRuleEnabledContactTypes = "call"
	Device            UserNotificationRuleEnabledContactTypes = "device"
	Email             UserNotificationRuleEnabledContactTypes = "email"
	NonCriticalDevice UserNotificationRuleEnabledContactTypes = "non_critical_device"
	Sms               UserNotificationRuleEnabledContactTypes = "sms"
)

// Defines values for UserNotificationRuleListDataType.
const (
	UserNotificationRuleListDataTypeUserNotificationRules UserNotificationRuleListDataType = "user_notification_rules"
)

// Defines values for UserNotificationRuleResponseDataType.
const (
	UserNotificationRuleResponseDataTypeUserNotificationRules UserNotificationRuleResponseDataType = "user_notification_rules"
)

// Defines values for UserResponseDataType.
const (
	Users UserResponseDataType = "users"
)

// Defines values for WebhooksDeliveryListDataType.
const (
	WebhooksDeliveryListDataTypeWebhooksDeliveries WebhooksDeliveryListDataType = "webhooks_deliveries"
)

// Defines values for WebhooksDeliveryResponseDataType.
const (
	WebhooksDeliveryResponseDataTypeWebhooksDeliveries WebhooksDeliveryResponseDataType = "webhooks_deliveries"
)

// Defines values for WebhooksEndpointEventTypes.
const (
	AlertCreated                WebhooksEndpointEventTypes = "alert.created"
	GeniusWorkflowRunCanceled   WebhooksEndpointEventTypes = "genius_workflow_run.canceled"
	GeniusWorkflowRunCompleted  WebhooksEndpointEventTypes = "genius_workflow_run.completed"
	GeniusWorkflowRunFailed     WebhooksEndpointEventTypes = "genius_workflow_run.failed"
	GeniusWorkflowRunQueued     WebhooksEndpointEventTypes = "genius_workflow_run.queued"
	GeniusWorkflowRunStarted    WebhooksEndpointEventTypes = "genius_workflow_run.started"
	IncidentCancelled           WebhooksEndpointEventTypes = "incident.cancelled"
	IncidentCreated             WebhooksEndpointEventTypes = "incident.created"
	IncidentDeleted             WebhooksEndpointEventTypes = "incident.deleted"
	IncidentInTriage            WebhooksEndpointEventTypes = "incident.in_triage"
	IncidentMitigated           WebhooksEndpointEventTypes = "incident.mitigated"
	IncidentPostMortemCreated   WebhooksEndpointEventTypes = "incident_post_mortem.created"
	IncidentPostMortemDeleted   WebhooksEndpointEventTypes = "incident_post_mortem.deleted"
	IncidentPostMortemPublished WebhooksEndpointEventTypes = "incident_post_mortem.published"
	IncidentPostMortemUpdated   WebhooksEndpointEventTypes = "incident_post_mortem.updated"
	IncidentResolved            WebhooksEndpointEventTypes = "incident.resolved"
	IncidentScheduledCompleted  WebhooksEndpointEventTypes = "incident.scheduled.completed"
	IncidentScheduledCreated    WebhooksEndpointEventTypes = "incident.scheduled.created"
	IncidentScheduledDeleted    WebhooksEndpointEventTypes = "incident.scheduled.deleted"
	IncidentScheduledInProgress WebhooksEndpointEventTypes = "incident.scheduled.in_progress"
	IncidentScheduledUpdated    WebhooksEndpointEventTypes = "incident.scheduled.updated"
	IncidentUpdated             WebhooksEndpointEventTypes = "incident.updated"
	PulseCreated                WebhooksEndpointEventTypes = "pulse.created"
)

// Defines values for WebhooksEndpointListDataType.
const (
	WebhooksEndpointListDataTypeWebhooksEndpoints WebhooksEndpointListDataType = "webhooks_endpoints"
)

// Defines values for WebhooksEndpointResponseDataType.
const (
	WebhooksEndpointResponseDataTypeWebhooksEndpoints WebhooksEndpointResponseDataType = "webhooks_endpoints"
)

// Defines values for WorkflowRepeatOn.
const (
	WorkflowRepeatOnF WorkflowRepeatOn = "F"
	WorkflowRepeatOnM WorkflowRepeatOn = "M"
	WorkflowRepeatOnR WorkflowRepeatOn = "R"
	WorkflowRepeatOnS WorkflowRepeatOn = "S"
	WorkflowRepeatOnT WorkflowRepeatOn = "T"
	WorkflowRepeatOnU WorkflowRepeatOn = "U"
	WorkflowRepeatOnW WorkflowRepeatOn = "W"
)

// Defines values for WorkflowCustomFieldSelectionIncidentCondition.
const (
	WorkflowCustomFieldSelectionIncidentConditionANY          WorkflowCustomFieldSelectionIncidentCondition = "ANY"
	WorkflowCustomFieldSelectionIncidentConditionCONTAINS     WorkflowCustomFieldSelectionIncidentCondition = "CONTAINS"
	WorkflowCustomFieldSelectionIncidentConditionCONTAINSALL  WorkflowCustomFieldSelectionIncidentCondition = "CONTAINS_ALL"
	WorkflowCustomFieldSelectionIncidentConditionCONTAINSNONE WorkflowCustomFieldSelectionIncidentCondition = "CONTAINS_NONE"
	WorkflowCustomFieldSelectionIncidentConditionIS           WorkflowCustomFieldSelectionIncidentCondition = "IS"
	WorkflowCustomFieldSelectionIncidentConditionNONE         WorkflowCustomFieldSelectionIncidentCondition = "NONE"
	WorkflowCustomFieldSelectionIncidentConditionSET          WorkflowCustomFieldSelectionIncidentCondition = "SET"
	WorkflowCustomFieldSelectionIncidentConditionUNSET        WorkflowCustomFieldSelectionIncidentCondition = "UNSET"
)

// Defines values for WorkflowCustomFieldSelectionListDataType.
const (
	WorkflowCustomFieldSelectionListDataTypeWorkflowCustomFieldSelections WorkflowCustomFieldSelectionListDataType = "workflow_custom_field_selections"
)

// Defines values for WorkflowCustomFieldSelectionResponseDataType.
const (
	WorkflowCustomFieldSelectionResponseDataTypeWorkflowCustomFieldSelections WorkflowCustomFieldSelectionResponseDataType = "workflow_custom_field_selections"
)

// Defines values for WorkflowFormFieldConditionIncidentCondition.
const (
	ANY          WorkflowFormFieldConditionIncidentCondition = "ANY"
	CONTAINS     WorkflowFormFieldConditionIncidentCondition = "CONTAINS"
	CONTAINSALL  WorkflowFormFieldConditionIncidentCondition = "CONTAINS_ALL"
	CONTAINSNONE WorkflowFormFieldConditionIncidentCondition = "CONTAINS_NONE"
	IS           WorkflowFormFieldConditionIncidentCondition = "IS"
	NONE         WorkflowFormFieldConditionIncidentCondition = "NONE"
	SET          WorkflowFormFieldConditionIncidentCondition = "SET"
	UNSET        WorkflowFormFieldConditionIncidentCondition = "UNSET"
)

// Defines values for WorkflowFormFieldConditionListDataType.
const (
	WorkflowFormFieldConditionListDataTypeWorkflowFormFieldConditions WorkflowFormFieldConditionListDataType = "workflow_form_field_conditions"
)

// Defines values for WorkflowFormFieldConditionResponseDataType.
const (
	WorkflowFormFieldConditionResponseDataTypeWorkflowFormFieldConditions WorkflowFormFieldConditionResponseDataType = "workflow_form_field_conditions"
)

// Defines values for WorkflowGroupKind.
const (
	WorkflowGroupKindActionItem WorkflowGroupKind = "action_item"
	WorkflowGroupKindAlert      WorkflowGroupKind = "alert"
	WorkflowGroupKindIncident   WorkflowGroupKind = "incident"
	WorkflowGroupKindPostMortem WorkflowGroupKind = "post_mortem"
	WorkflowGroupKindPulse      WorkflowGroupKind = "pulse"
	WorkflowGroupKindSimple     WorkflowGroupKind = "simple"
)

// Defines values for WorkflowGroupListDataType.
const (
	WorkflowGroupListDataTypeWorkflowGroups WorkflowGroupListDataType = "workflow_groups"
)

// Defines values for WorkflowGroupResponseDataType.
const (
	WorkflowGroupResponseDataTypeWorkflowGroups WorkflowGroupResponseDataType = "workflow_groups"
)

// Defines values for WorkflowListDataType.
const (
	WorkflowListDataTypeWorkflows WorkflowListDataType = "workflows"
)

// Defines values for WorkflowResponseDataType.
const (
	WorkflowResponseDataTypeWorkflows WorkflowResponseDataType = "workflows"
)

// Defines values for WorkflowRunStatus.
const (
	WorkflowRunStatusCanceled            WorkflowRunStatus = "canceled"
	WorkflowRunStatusCompleted           WorkflowRunStatus = "completed"
	WorkflowRunStatusCompletedWithErrors WorkflowRunStatus = "completed_with_errors"
	WorkflowRunStatusFailed              WorkflowRunStatus = "failed"
	WorkflowRunStatusQueued              WorkflowRunStatus = "queued"
	WorkflowRunStatusStarted             WorkflowRunStatus = "started"
)

// Defines values for WorkflowRunTriggeredBy.
const (
	WorkflowRunTriggeredBySystem WorkflowRunTriggeredBy = "system"
	WorkflowRunTriggeredByUser   WorkflowRunTriggeredBy = "user"
)

// Defines values for WorkflowRunResponseDataType.
const (
	WorkflowRunResponseDataTypeWorkflowRuns WorkflowRunResponseDataType = "workflow_runs"
)

// Defines values for WorkflowRunsListDataType.
const (
	WorkflowRuns WorkflowRunsListDataType = "workflow_runs"
)

// Defines values for WorkflowTaskListDataType.
const (
	WorkflowTaskListDataTypeWorkflowTasks WorkflowTaskListDataType = "workflow_tasks"
)

// Defines values for WorkflowTaskResponseDataType.
const (
	WorkflowTaskResponseDataTypeWorkflowTasks WorkflowTaskResponseDataType = "workflow_tasks"
)

// Defines values for ListCatalogEntityPropertiesParamsInclude.
const (
	ListCatalogEntityPropertiesParamsIncludeCatalogEntity ListCatalogEntityPropertiesParamsInclude = "catalog_entity"
	ListCatalogEntityPropertiesParamsIncludeCatalogField  ListCatalogEntityPropertiesParamsInclude = "catalog_field"
)

// Defines values for ListCatalogEntityPropertiesParamsSort.
const (
	ListCatalogEntityPropertiesParamsSortCreatedAt      ListCatalogEntityPropertiesParamsSort = "created_at"
	ListCatalogEntityPropertiesParamsSortMinusCreatedAt ListCatalogEntityPropertiesParamsSort = "-created_at"
	ListCatalogEntityPropertiesParamsSortMinusUpdatedAt ListCatalogEntityPropertiesParamsSort = "-updated_at"
	ListCatalogEntityPropertiesParamsSortUpdatedAt      ListCatalogEntityPropertiesParamsSort = "updated_at"
)

// Defines values for GetCatalogEntityParamsInclude.
const (
	GetCatalogEntityParamsIncludeCatalog    GetCatalogEntityParamsInclude = "catalog"
	GetCatalogEntityParamsIncludeProperties GetCatalogEntityParamsInclude = "properties"
)

// Defines values for GetCatalogEntityPropertyParamsInclude.
const (
	GetCatalogEntityPropertyParamsIncludeCatalogEntity GetCatalogEntityPropertyParamsInclude = "catalog_entity"
	GetCatalogEntityPropertyParamsIncludeCatalogField  GetCatalogEntityPropertyParamsInclude = "catalog_field"
)

// Defines values for GetCatalogFieldParamsInclude.
const (
	GetCatalogFieldParamsIncludeCatalog GetCatalogFieldParamsInclude = "catalog"
)

// Defines values for ListCatalogsParamsInclude.
const (
	Entities ListCatalogsParamsInclude = "entities"
	Fields   ListCatalogsParamsInclude = "fields"
)

// Defines values for ListCatalogsParamsSort.
const (
	ListCatalogsParamsSortCreatedAt      ListCatalogsParamsSort = "created_at"
	ListCatalogsParamsSortMinusCreatedAt ListCatalogsParamsSort = "-created_at"
	ListCatalogsParamsSortMinusPosition  ListCatalogsParamsSort = "-position"
	ListCatalogsParamsSortMinusUpdatedAt ListCatalogsParamsSort = "-updated_at"
	ListCatalogsParamsSortPosition       ListCatalogsParamsSort = "position"
	ListCatalogsParamsSortUpdatedAt      ListCatalogsParamsSort = "updated_at"
)

// Defines values for ListCatalogEntitiesParamsInclude.
const (
	ListCatalogEntitiesParamsIncludeCatalog    ListCatalogEntitiesParamsInclude = "catalog"
	ListCatalogEntitiesParamsIncludeProperties ListCatalogEntitiesParamsInclude = "properties"
)

// Defines values for ListCatalogEntitiesParamsSort.
const (
	ListCatalogEntitiesParamsSortCreatedAt      ListCatalogEntitiesParamsSort = "created_at"
	ListCatalogEntitiesParamsSortMinusCreatedAt ListCatalogEntitiesParamsSort = "-created_at"
	ListCatalogEntitiesParamsSortMinusPosition  ListCatalogEntitiesParamsSort = "-position"
	ListCatalogEntitiesParamsSortMinusUpdatedAt ListCatalogEntitiesParamsSort = "-updated_at"
	ListCatalogEntitiesParamsSortPosition       ListCatalogEntitiesParamsSort = "position"
	ListCatalogEntitiesParamsSortUpdatedAt      ListCatalogEntitiesParamsSort = "updated_at"
)

// Defines values for ListCatalogFieldsParamsInclude.
const (
	ListCatalogFieldsParamsIncludeCatalog ListCatalogFieldsParamsInclude = "catalog"
)

// Defines values for ListCatalogFieldsParamsSort.
const (
	ListCatalogFieldsParamsSortCreatedAt      ListCatalogFieldsParamsSort = "created_at"
	ListCatalogFieldsParamsSortMinusCreatedAt ListCatalogFieldsParamsSort = "-created_at"
	ListCatalogFieldsParamsSortMinusPosition  ListCatalogFieldsParamsSort = "-position"
	ListCatalogFieldsParamsSortMinusUpdatedAt ListCatalogFieldsParamsSort = "-updated_at"
	ListCatalogFieldsParamsSortPosition       ListCatalogFieldsParamsSort = "position"
	ListCatalogFieldsParamsSortUpdatedAt      ListCatalogFieldsParamsSort = "updated_at"
)

// Defines values for ListCustomFieldsParamsInclude.
const (
	ListCustomFieldsParamsIncludeOptions ListCustomFieldsParamsInclude = "options"
)

// Defines values for ListCustomFieldsParamsSort.
const (
	ListCustomFieldsParamsSortCreatedAt      ListCustomFieldsParamsSort = "created_at"
	ListCustomFieldsParamsSortMinusCreatedAt ListCustomFieldsParamsSort = "-created_at"
	ListCustomFieldsParamsSortMinusPosition  ListCustomFieldsParamsSort = "-position"
	ListCustomFieldsParamsSortMinusUpdatedAt ListCustomFieldsParamsSort = "-updated_at"
	ListCustomFieldsParamsSortPosition       ListCustomFieldsParamsSort = "position"
	ListCustomFieldsParamsSortUpdatedAt      ListCustomFieldsParamsSort = "updated_at"
)

// Defines values for GetCustomFieldParamsInclude.
const (
	GetCustomFieldParamsIncludeOptions GetCustomFieldParamsInclude = "options"
)

// Defines values for ListDashboardsParamsInclude.
const (
	ListDashboardsParamsIncludePanels ListDashboardsParamsInclude = "panels"
)

// Defines values for GetDashboardParamsInclude.
const (
	GetDashboardParamsIncludePanels GetDashboardParamsInclude = "panels"
)

// Defines values for GetEscalationPathParamsInclude.
const (
	GetEscalationPathParamsIncludeEscalationPolicyLevels GetEscalationPathParamsInclude = "escalation_policy_levels"
)

// Defines values for ListEscalationPoliciesParamsInclude.
const (
	ListEscalationPoliciesParamsIncludeEscalationPaths        ListEscalationPoliciesParamsInclude = "escalation_paths"
	ListEscalationPoliciesParamsIncludeEscalationPolicyLevels ListEscalationPoliciesParamsInclude = "escalation_policy_levels"
	ListEscalationPoliciesParamsIncludeGroups                 ListEscalationPoliciesParamsInclude = "groups"
	ListEscalationPoliciesParamsIncludeServices               ListEscalationPoliciesParamsInclude = "services"
)

// Defines values for ListEscalationPathsParamsInclude.
const (
	ListEscalationPathsParamsIncludeEscalationPolicyLevels ListEscalationPathsParamsInclude = "escalation_policy_levels"
)

// Defines values for GetEscalationPolicyParamsInclude.
const (
	GetEscalationPolicyParamsIncludeEscalationPaths        GetEscalationPolicyParamsInclude = "escalation_paths"
	GetEscalationPolicyParamsIncludeEscalationPolicyLevels GetEscalationPolicyParamsInclude = "escalation_policy_levels"
	GetEscalationPolicyParamsIncludeGroups                 GetEscalationPolicyParamsInclude = "groups"
	GetEscalationPolicyParamsIncludeServices               GetEscalationPolicyParamsInclude = "services"
)

// Defines values for ListFormFieldsParamsInclude.
const (
	ListFormFieldsParamsIncludeOptions   ListFormFieldsParamsInclude = "options"
	ListFormFieldsParamsIncludePositions ListFormFieldsParamsInclude = "positions"
)

// Defines values for GetFormFieldParamsInclude.
const (
	GetFormFieldParamsIncludeOptions   GetFormFieldParamsInclude = "options"
	GetFormFieldParamsIncludePositions GetFormFieldParamsInclude = "positions"
)

// Defines values for GetIncidentSubStatusParamsInclude.
const (
	GetIncidentSubStatusParamsIncludeAssignedByUser GetIncidentSubStatusParamsInclude = "assigned_by_user"
	GetIncidentSubStatusParamsIncludeSubStatus      GetIncidentSubStatusParamsInclude = "sub_status"
)

// Defines values for ListIncidentsParamsSort.
const (
	ListIncidentsParamsSortCreatedAt      ListIncidentsParamsSort = "created_at"
	ListIncidentsParamsSortMinusCreatedAt ListIncidentsParamsSort = "-created_at"
	ListIncidentsParamsSortMinusUpdatedAt ListIncidentsParamsSort = "-updated_at"
	ListIncidentsParamsSortUpdatedAt      ListIncidentsParamsSort = "updated_at"
)

// Defines values for ListIncidentsParamsInclude.
const (
	ListIncidentsParamsIncludeActionItems             ListIncidentsParamsInclude = "action_items"
	ListIncidentsParamsIncludeCauses                  ListIncidentsParamsInclude = "causes"
	ListIncidentsParamsIncludeEnvironments            ListIncidentsParamsInclude = "environments"
	ListIncidentsParamsIncludeEvents                  ListIncidentsParamsInclude = "events"
	ListIncidentsParamsIncludeFeedbacks               ListIncidentsParamsInclude = "feedbacks"
	ListIncidentsParamsIncludeFormFieldSelections     ListIncidentsParamsInclude = "form_field_selections"
	ListIncidentsParamsIncludeFunctionalities         ListIncidentsParamsInclude = "functionalities"
	ListIncidentsParamsIncludeGroups                  ListIncidentsParamsInclude = "groups"
	ListIncidentsParamsIncludeIncidentPostMortem      ListIncidentsParamsInclude = "incident_post_mortem"
	ListIncidentsParamsIncludeIncidentRoleAssignments ListIncidentsParamsInclude = "incident_role_assignments"
	ListIncidentsParamsIncludeIncidentSlackMessages   ListIncidentsParamsInclude = "incident_slack_messages"
	ListIncidentsParamsIncludeIncidentTypes           ListIncidentsParamsInclude = "incident_types"
	ListIncidentsParamsIncludeServices                ListIncidentsParamsInclude = "services"
	ListIncidentsParamsIncludeSubStatuses             ListIncidentsParamsInclude = "sub_statuses"
	ListIncidentsParamsIncludeSubscribers             ListIncidentsParamsInclude = "subscribers"
)

// Defines values for GetIncidentParamsInclude.
const (
	GetIncidentParamsIncludeActionItems             GetIncidentParamsInclude = "action_items"
	GetIncidentParamsIncludeCauses                  GetIncidentParamsInclude = "causes"
	GetIncidentParamsIncludeEnvironments            GetIncidentParamsInclude = "environments"
	GetIncidentParamsIncludeEvents                  GetIncidentParamsInclude = "events"
	GetIncidentParamsIncludeFeedbacks               GetIncidentParamsInclude = "feedbacks"
	GetIncidentParamsIncludeFormFieldSelections     GetIncidentParamsInclude = "form_field_selections"
	GetIncidentParamsIncludeFunctionalities         GetIncidentParamsInclude = "functionalities"
	GetIncidentParamsIncludeGroups                  GetIncidentParamsInclude = "groups"
	GetIncidentParamsIncludeIncidentPostMortem      GetIncidentParamsInclude = "incident_post_mortem"
	GetIncidentParamsIncludeIncidentRoleAssignments GetIncidentParamsInclude = "incident_role_assignments"
	GetIncidentParamsIncludeIncidentSlackMessages   GetIncidentParamsInclude = "incident_slack_messages"
	GetIncidentParamsIncludeIncidentTypes           GetIncidentParamsInclude = "incident_types"
	GetIncidentParamsIncludeServices                GetIncidentParamsInclude = "services"
	GetIncidentParamsIncludeSubStatuses             GetIncidentParamsInclude = "sub_statuses"
	GetIncidentParamsIncludeSubscribers             GetIncidentParamsInclude = "subscribers"
)

// Defines values for ListIncidentSubStatusesParamsInclude.
const (
	ListIncidentSubStatusesParamsIncludeAssignedByUser ListIncidentSubStatusesParamsInclude = "assigned_by_user"
	ListIncidentSubStatusesParamsIncludeSubStatus      ListIncidentSubStatusesParamsInclude = "sub_status"
)

// Defines values for ListIncidentSubStatusesParamsSort.
const (
	ListIncidentSubStatusesParamsSortAssignedAt      ListIncidentSubStatusesParamsSort = "assigned_at"
	ListIncidentSubStatusesParamsSortCreatedAt       ListIncidentSubStatusesParamsSort = "created_at"
	ListIncidentSubStatusesParamsSortMinusAssignedAt ListIncidentSubStatusesParamsSort = "-assigned_at"
	ListIncidentSubStatusesParamsSortMinusCreatedAt  ListIncidentSubStatusesParamsSort = "-created_at"
	ListIncidentSubStatusesParamsSortMinusUpdatedAt  ListIncidentSubStatusesParamsSort = "-updated_at"
	ListIncidentSubStatusesParamsSortUpdatedAt       ListIncidentSubStatusesParamsSort = "updated_at"
)

// Defines values for GeneratePhoneNumberLiveCallRouterParamsCountryCode.
const (
	GeneratePhoneNumberLiveCallRouterParamsCountryCodeAU GeneratePhoneNumberLiveCallRouterParamsCountryCode = "AU"
	GeneratePhoneNumberLiveCallRouterParamsCountryCodeCA GeneratePhoneNumberLiveCallRouterParamsCountryCode = "CA"
	GeneratePhoneNumberLiveCallRouterParamsCountryCodeGB GeneratePhoneNumberLiveCallRouterParamsCountryCode = "GB"
	GeneratePhoneNumberLiveCallRouterParamsCountryCodeNZ GeneratePhoneNumberLiveCallRouterParamsCountryCode = "NZ"
	GeneratePhoneNumberLiveCallRouterParamsCountryCodeUS GeneratePhoneNumberLiveCallRouterParamsCountryCode = "US"
)

// Defines values for GeneratePhoneNumberLiveCallRouterParamsPhoneType.
const (
	Local    GeneratePhoneNumberLiveCallRouterParamsPhoneType = "local"
	TollFree GeneratePhoneNumberLiveCallRouterParamsPhoneType = "toll_free"
)

// Defines values for ListPlaybooksParamsInclude.
const (
	ListPlaybooksParamsIncludeCauses          ListPlaybooksParamsInclude = "causes"
	ListPlaybooksParamsIncludeEnvironments    ListPlaybooksParamsInclude = "environments"
	ListPlaybooksParamsIncludeFunctionalities ListPlaybooksParamsInclude = "functionalities"
	ListPlaybooksParamsIncludeGroups          ListPlaybooksParamsInclude = "groups"
	ListPlaybooksParamsIncludeIncidentTypes   ListPlaybooksParamsInclude = "incident_types"
	ListPlaybooksParamsIncludeServices        ListPlaybooksParamsInclude = "services"
	ListPlaybooksParamsIncludeSeverities      ListPlaybooksParamsInclude = "severities"
)

// Defines values for GetPlaybookParamsInclude.
const (
	GetPlaybookParamsIncludeCauses          GetPlaybookParamsInclude = "causes"
	GetPlaybookParamsIncludeEnvironments    GetPlaybookParamsInclude = "environments"
	GetPlaybookParamsIncludeFunctionalities GetPlaybookParamsInclude = "functionalities"
	GetPlaybookParamsIncludeGroups          GetPlaybookParamsInclude = "groups"
	GetPlaybookParamsIncludeIncidentTypes   GetPlaybookParamsInclude = "incident_types"
	GetPlaybookParamsIncludeServices        GetPlaybookParamsInclude = "services"
	GetPlaybookParamsIncludeSeverities      GetPlaybookParamsInclude = "severities"
)

// Defines values for ListRetrospectiveConfigurationsParamsInclude.
const (
	ListRetrospectiveConfigurationsParamsIncludeGroups        ListRetrospectiveConfigurationsParamsInclude = "groups"
	ListRetrospectiveConfigurationsParamsIncludeIncidentTypes ListRetrospectiveConfigurationsParamsInclude = "incident_types"
	ListRetrospectiveConfigurationsParamsIncludeSeverities    ListRetrospectiveConfigurationsParamsInclude = "severities"
)

// Defines values for GetRetrospectiveConfigurationParamsInclude.
const (
	GetRetrospectiveConfigurationParamsIncludeGroups        GetRetrospectiveConfigurationParamsInclude = "groups"
	GetRetrospectiveConfigurationParamsIncludeIncidentTypes GetRetrospectiveConfigurationParamsInclude = "incident_types"
	GetRetrospectiveConfigurationParamsIncludeSeverities    GetRetrospectiveConfigurationParamsInclude = "severities"
)

// Defines values for GetRetrospectiveProcessGroupParamsInclude.
const (
	GetRetrospectiveProcessGroupParamsIncludeRetrospectiveProcessGroupSteps GetRetrospectiveProcessGroupParamsInclude = "retrospective_process_group_steps"
)

// Defines values for ListRetrospectiveProcessesParamsInclude.
const (
	ListRetrospectiveProcessesParamsIncludeGroups             ListRetrospectiveProcessesParamsInclude = "groups"
	ListRetrospectiveProcessesParamsIncludeIncidentTypes      ListRetrospectiveProcessesParamsInclude = "incident_types"
	ListRetrospectiveProcessesParamsIncludeRetrospectiveSteps ListRetrospectiveProcessesParamsInclude = "retrospective_steps"
	ListRetrospectiveProcessesParamsIncludeSeverities         ListRetrospectiveProcessesParamsInclude = "severities"
)

// Defines values for GetRetrospectiveProcessParamsInclude.
const (
	GetRetrospectiveProcessParamsIncludeGroups             GetRetrospectiveProcessParamsInclude = "groups"
	GetRetrospectiveProcessParamsIncludeIncidentTypes      GetRetrospectiveProcessParamsInclude = "incident_types"
	GetRetrospectiveProcessParamsIncludeRetrospectiveSteps GetRetrospectiveProcessParamsInclude = "retrospective_steps"
	GetRetrospectiveProcessParamsIncludeSeverities         GetRetrospectiveProcessParamsInclude = "severities"
)

// Defines values for ListRetrospectiveProcessGroupsParamsInclude.
const (
	ListRetrospectiveProcessGroupsParamsIncludeRetrospectiveProcessGroupSteps ListRetrospectiveProcessGroupsParamsInclude = "retrospective_process_group_steps"
)

// Defines values for ListRetrospectiveProcessGroupsParamsSort.
const (
	ListRetrospectiveProcessGroupsParamsSortCreatedAt      ListRetrospectiveProcessGroupsParamsSort = "created_at"
	ListRetrospectiveProcessGroupsParamsSortMinusCreatedAt ListRetrospectiveProcessGroupsParamsSort = "-created_at"
	ListRetrospectiveProcessGroupsParamsSortMinusPosition  ListRetrospectiveProcessGroupsParamsSort = "-position"
	ListRetrospectiveProcessGroupsParamsSortMinusUpdatedAt ListRetrospectiveProcessGroupsParamsSort = "-updated_at"
	ListRetrospectiveProcessGroupsParamsSortPosition       ListRetrospectiveProcessGroupsParamsSort = "position"
	ListRetrospectiveProcessGroupsParamsSortUpdatedAt      ListRetrospectiveProcessGroupsParamsSort = "updated_at"
)

// Defines values for ListShiftsParamsInclude.
const (
	ListShiftsParamsIncludeShiftOverride ListShiftsParamsInclude = "shift_override"
	ListShiftsParamsIncludeUser          ListShiftsParamsInclude = "user"
)

// Defines values for ListUsersParamsSort.
const (
	ListUsersParamsSortCreatedAt      ListUsersParamsSort = "created_at"
	ListUsersParamsSortMinusCreatedAt ListUsersParamsSort = "-created_at"
	ListUsersParamsSortMinusUpdatedAt ListUsersParamsSort = "-updated_at"
	ListUsersParamsSortUpdatedAt      ListUsersParamsSort = "updated_at"
)

// Defines values for ListUsersParamsInclude.
const (
	ListUsersParamsIncludeDevices        ListUsersParamsInclude = "devices"
	ListUsersParamsIncludeEmailAddresses ListUsersParamsInclude = "email_addresses"
	ListUsersParamsIncludePhoneNumbers   ListUsersParamsInclude = "phone_numbers"
)

// Defines values for GetUserParamsInclude.
const (
	GetUserParamsIncludeDevices        GetUserParamsInclude = "devices"
	GetUserParamsIncludeEmailAddresses GetUserParamsInclude = "email_addresses"
	GetUserParamsIncludePhoneNumbers   GetUserParamsInclude = "phone_numbers"
)

// Defines values for ListWorkflowsParamsInclude.
const (
	ListWorkflowsParamsIncludeFormFieldConditions ListWorkflowsParamsInclude = "form_field_conditions"
	ListWorkflowsParamsIncludeGeniusTasks         ListWorkflowsParamsInclude = "genius_tasks"
	ListWorkflowsParamsIncludeGeniusWorkflowRuns  ListWorkflowsParamsInclude = "genius_workflow_runs"
)

// Defines values for ListWorkflowsParamsSort.
const (
	ListWorkflowsParamsSortCreatedAt      ListWorkflowsParamsSort = "created_at"
	ListWorkflowsParamsSortMinusCreatedAt ListWorkflowsParamsSort = "-created_at"
	ListWorkflowsParamsSortMinusPosition  ListWorkflowsParamsSort = "-position"
	ListWorkflowsParamsSortMinusUpdatedAt ListWorkflowsParamsSort = "-updated_at"
	ListWorkflowsParamsSortPosition       ListWorkflowsParamsSort = "position"
	ListWorkflowsParamsSortUpdatedAt      ListWorkflowsParamsSort = "updated_at"
)

// Defines values for GetWorkflowParamsInclude.
const (
	GetWorkflowParamsIncludeFormFieldConditions GetWorkflowParamsInclude = "form_field_conditions"
	GetWorkflowParamsIncludeGeniusTasks         GetWorkflowParamsInclude = "genius_tasks"
	GetWorkflowParamsIncludeGeniusWorkflowRuns  GetWorkflowParamsInclude = "genius_workflow_runs"
)

// Defines values for ListWorkflowRunsParamsInclude.
const (
	GeniusTaskRuns ListWorkflowRunsParamsInclude = "genius_task_runs"
)

// ActionItemTriggerParams defines model for action_item_trigger_params.
type ActionItemTriggerParams struct {
	IncidentActionItemCondition         *ActionItemTriggerParamsIncidentActionItemCondition         `json:"incident_action_item_condition,omitempty"`
	IncidentActionItemConditionGroup    *ActionItemTriggerParamsIncidentActionItemConditionGroup    `json:"incident_action_item_condition_group,omitempty"`
	IncidentActionItemConditionKind     *ActionItemTriggerParamsIncidentActionItemConditionKind     `json:"incident_action_item_condition_kind,omitempty"`
	IncidentActionItemConditionPriority *ActionItemTriggerParamsIncidentActionItemConditionPriority `json:"incident_action_item_condition_priority,omitempty"`
	IncidentActionItemConditionStatus   *ActionItemTriggerParamsIncidentActionItemConditionStatus   `json:"incident_action_item_condition_status,omitempty"`
	IncidentActionItemGroupIds          *[]string                                                   `json:"incident_action_item_group_ids,omitempty"`
	IncidentActionItemKinds             *[]ActionItemTriggerParamsIncidentActionItemKinds           `json:"incident_action_item_kinds,omitempty"`
	IncidentActionItemPriorities        *[]ActionItemTriggerParamsIncidentActionItemPriorities      `json:"incident_action_item_priorities,omitempty"`
	IncidentActionItemStatuses          *[]ActionItemTriggerParamsIncidentActionItemStatuses        `json:"incident_action_item_statuses,omitempty"`
	IncidentCondition                   *ActionItemTriggerParamsIncidentCondition                   `json:"incident_condition,omitempty"`
	IncidentConditionAcknowledgedAt     *ActionItemTriggerParams_IncidentConditionAcknowledgedAt    `json:"incident_condition_acknowledged_at,omitempty"`
	IncidentConditionDetectedAt         *ActionItemTriggerParams_IncidentConditionDetectedAt        `json:"incident_condition_detected_at,omitempty"`
	IncidentConditionEnvironment        *ActionItemTriggerParamsIncidentConditionEnvironment        `json:"incident_condition_environment,omitempty"`
	IncidentConditionFunctionality      *ActionItemTriggerParamsIncidentConditionFunctionality      `json:"incident_condition_functionality,omitempty"`
	IncidentConditionGroup              *ActionItemTriggerParamsIncidentConditionGroup              `json:"incident_condition_group,omitempty"`
	IncidentConditionIncidentRoles      *ActionItemTriggerParamsIncidentConditionIncidentRoles      `json:"incident_condition_incident_roles,omitempty"`
	IncidentConditionIncidentType       *ActionItemTriggerParamsIncidentConditionIncidentType       `json:"incident_condition_incident_type,omitempty"`
	IncidentConditionKind               *ActionItemTriggerParamsIncidentConditionKind               `json:"incident_condition_kind,omitempty"`
	IncidentConditionMitigatedAt        *ActionItemTriggerParams_IncidentConditionMitigatedAt       `json:"incident_condition_mitigated_at,omitempty"`
	IncidentConditionResolvedAt         *ActionItemTriggerParams_IncidentConditionResolvedAt        `json:"incident_condition_resolved_at,omitempty"`
	IncidentConditionService            *ActionItemTriggerParamsIncidentConditionService            `json:"incident_condition_service,omitempty"`
	IncidentConditionSeverity           *ActionItemTriggerParamsIncidentConditionSeverity           `json:"incident_condition_severity,omitempty"`
	IncidentConditionStartedAt          *ActionItemTriggerParams_IncidentConditionStartedAt         `json:"incident_condition_started_at,omitempty"`
	IncidentConditionStatus             *ActionItemTriggerParamsIncidentConditionStatus             `json:"incident_condition_status,omitempty"`
	IncidentConditionSummary            *ActionItemTriggerParams_IncidentConditionSummary           `json:"incident_condition_summary,omitempty"`
	IncidentConditionVisibility         *ActionItemTriggerParamsIncidentConditionVisibility         `json:"incident_condition_visibility,omitempty"`
	IncidentConditionalInactivity       *ActionItemTriggerParams_IncidentConditionalInactivity      `json:"incident_conditional_inactivity,omitempty"`
	IncidentInactivityDuration          *ActionItemTriggerParams_IncidentInactivityDuration         `json:"incident_inactivity_duration,omitempty"`
	IncidentKinds                       *[]ActionItemTriggerParamsIncidentKinds                     `json:"incident_kinds,omitempty"`
	IncidentStatuses                    *[]ActionItemTriggerParamsIncidentStatuses                  `json:"incident_statuses,omitempty"`
	IncidentVisibilities                *[]bool                                                     `json:"incident_visibilities,omitempty"`
	TriggerType                         ActionItemTriggerParamsTriggerType                          `json:"trigger_type"`
	Triggers                            *[]string                                                   `json:"triggers,omitempty"`
}

// ActionItemTriggerParamsIncidentActionItemCondition defines model for ActionItemTriggerParams.IncidentActionItemCondition.
type ActionItemTriggerParamsIncidentActionItemCondition string

// ActionItemTriggerParamsIncidentActionItemConditionGroup defines model for ActionItemTriggerParams.IncidentActionItemConditionGroup.
type ActionItemTriggerParamsIncidentActionItemConditionGroup string

// ActionItemTriggerParamsIncidentActionItemConditionKind defines model for ActionItemTriggerParams.IncidentActionItemConditionKind.
type ActionItemTriggerParamsIncidentActionItemConditionKind string

// ActionItemTriggerParamsIncidentActionItemConditionPriority defines model for ActionItemTriggerParams.IncidentActionItemConditionPriority.
type ActionItemTriggerParamsIncidentActionItemConditionPriority string

// ActionItemTriggerParamsIncidentActionItemConditionStatus defines model for ActionItemTriggerParams.IncidentActionItemConditionStatus.
type ActionItemTriggerParamsIncidentActionItemConditionStatus string

// ActionItemTriggerParamsIncidentActionItemKinds defines model for ActionItemTriggerParams.IncidentActionItemKinds.
type ActionItemTriggerParamsIncidentActionItemKinds string

// ActionItemTriggerParamsIncidentActionItemPriorities defines model for ActionItemTriggerParams.IncidentActionItemPriorities.
type ActionItemTriggerParamsIncidentActionItemPriorities string

// ActionItemTriggerParamsIncidentActionItemStatuses defines model for ActionItemTriggerParams.IncidentActionItemStatuses.
type ActionItemTriggerParamsIncidentActionItemStatuses string

// ActionItemTriggerParamsIncidentCondition defines model for ActionItemTriggerParams.IncidentCondition.
type ActionItemTriggerParamsIncidentCondition string

// ActionItemTriggerParamsIncidentConditionAcknowledgedAt0 defines model for .
type ActionItemTriggerParamsIncidentConditionAcknowledgedAt0 = interface{}

// ActionItemTriggerParamsIncidentConditionAcknowledgedAt1 defines model for ActionItemTriggerParams.IncidentConditionAcknowledgedAt.1.
type ActionItemTriggerParamsIncidentConditionAcknowledgedAt1 string

// ActionItemTriggerParams_IncidentConditionAcknowledgedAt defines model for ActionItemTriggerParams.IncidentConditionAcknowledgedAt.
type ActionItemTriggerParams_IncidentConditionAcknowledgedAt struct {
	union json.RawMessage
}

// ActionItemTriggerParamsIncidentConditionDetectedAt0 defines model for .
type ActionItemTriggerParamsIncidentConditionDetectedAt0 = interface{}

// ActionItemTriggerParamsIncidentConditionDetectedAt1 defines model for ActionItemTriggerParams.IncidentConditionDetectedAt.1.
type ActionItemTriggerParamsIncidentConditionDetectedAt1 string

// ActionItemTriggerParams_IncidentConditionDetectedAt defines model for ActionItemTriggerParams.IncidentConditionDetectedAt.
type ActionItemTriggerParams_IncidentConditionDetectedAt struct {
	union json.RawMessage
}

// ActionItemTriggerParamsIncidentConditionEnvironment defines model for ActionItemTriggerParams.IncidentConditionEnvironment.
type ActionItemTriggerParamsIncidentConditionEnvironment string

// ActionItemTriggerParamsIncidentConditionFunctionality defines model for ActionItemTriggerParams.IncidentConditionFunctionality.
type ActionItemTriggerParamsIncidentConditionFunctionality string

// ActionItemTriggerParamsIncidentConditionGroup defines model for ActionItemTriggerParams.IncidentConditionGroup.
type ActionItemTriggerParamsIncidentConditionGroup string

// ActionItemTriggerParamsIncidentConditionIncidentRoles defines model for ActionItemTriggerParams.IncidentConditionIncidentRoles.
type ActionItemTriggerParamsIncidentConditionIncidentRoles string

// ActionItemTriggerParamsIncidentConditionIncidentType defines model for ActionItemTriggerParams.IncidentConditionIncidentType.
type ActionItemTriggerParamsIncidentConditionIncidentType string

// ActionItemTriggerParamsIncidentConditionKind defines model for ActionItemTriggerParams.IncidentConditionKind.
type ActionItemTriggerParamsIncidentConditionKind string

// ActionItemTriggerParamsIncidentConditionMitigatedAt0 defines model for .
type ActionItemTriggerParamsIncidentConditionMitigatedAt0 = interface{}

// ActionItemTriggerParamsIncidentConditionMitigatedAt1 defines model for ActionItemTriggerParams.IncidentConditionMitigatedAt.1.
type ActionItemTriggerParamsIncidentConditionMitigatedAt1 string

// ActionItemTriggerParams_IncidentConditionMitigatedAt defines model for ActionItemTriggerParams.IncidentConditionMitigatedAt.
type ActionItemTriggerParams_IncidentConditionMitigatedAt struct {
	union json.RawMessage
}

// ActionItemTriggerParamsIncidentConditionResolvedAt0 defines model for .
type ActionItemTriggerParamsIncidentConditionResolvedAt0 = interface{}

// ActionItemTriggerParamsIncidentConditionResolvedAt1 defines model for ActionItemTriggerParams.IncidentConditionResolvedAt.1.
type ActionItemTriggerParamsIncidentConditionResolvedAt1 string

// ActionItemTriggerParams_IncidentConditionResolvedAt defines model for ActionItemTriggerParams.IncidentConditionResolvedAt.
type ActionItemTriggerParams_IncidentConditionResolvedAt struct {
	union json.RawMessage
}

// ActionItemTriggerParamsIncidentConditionService defines model for ActionItemTriggerParams.IncidentConditionService.
type ActionItemTriggerParamsIncidentConditionService string

// ActionItemTriggerParamsIncidentConditionSeverity defines model for ActionItemTriggerParams.IncidentConditionSeverity.
type ActionItemTriggerParamsIncidentConditionSeverity string

// ActionItemTriggerParamsIncidentConditionStartedAt0 defines model for .
type ActionItemTriggerParamsIncidentConditionStartedAt0 = interface{}

// ActionItemTriggerParamsIncidentConditionStartedAt1 defines model for ActionItemTriggerParams.IncidentConditionStartedAt.1.
type ActionItemTriggerParamsIncidentConditionStartedAt1 string

// ActionItemTriggerParams_IncidentConditionStartedAt defines model for ActionItemTriggerParams.IncidentConditionStartedAt.
type ActionItemTriggerParams_IncidentConditionStartedAt struct {
	union json.RawMessage
}

// ActionItemTriggerParamsIncidentConditionStatus defines model for ActionItemTriggerParams.IncidentConditionStatus.
type ActionItemTriggerParamsIncidentConditionStatus string

// ActionItemTriggerParamsIncidentConditionSummary0 defines model for .
type ActionItemTriggerParamsIncidentConditionSummary0 = interface{}

// ActionItemTriggerParamsIncidentConditionSummary1 defines model for ActionItemTriggerParams.IncidentConditionSummary.1.
type ActionItemTriggerParamsIncidentConditionSummary1 string

// ActionItemTriggerParams_IncidentConditionSummary defines model for ActionItemTriggerParams.IncidentConditionSummary.
type ActionItemTriggerParams_IncidentConditionSummary struct {
	union json.RawMessage
}

// ActionItemTriggerParamsIncidentConditionVisibility defines model for ActionItemTriggerParams.IncidentConditionVisibility.
type ActionItemTriggerParamsIncidentConditionVisibility string

// ActionItemTriggerParamsIncidentConditionalInactivity0 defines model for .
type ActionItemTriggerParamsIncidentConditionalInactivity0 = interface{}

// ActionItemTriggerParamsIncidentConditionalInactivity1 defines model for ActionItemTriggerParams.IncidentConditionalInactivity.1.
type ActionItemTriggerParamsIncidentConditionalInactivity1 string

// ActionItemTriggerParams_IncidentConditionalInactivity defines model for ActionItemTriggerParams.IncidentConditionalInactivity.
type ActionItemTriggerParams_IncidentConditionalInactivity struct {
	union json.RawMessage
}

// ActionItemTriggerParamsIncidentInactivityDuration0 defines model for .
type ActionItemTriggerParamsIncidentInactivityDuration0 = interface{}

// ActionItemTriggerParamsIncidentInactivityDuration1 ex. 10 min, 1h, 3 days, 2 weeks
type ActionItemTriggerParamsIncidentInactivityDuration1 = string

// ActionItemTriggerParams_IncidentInactivityDuration defines model for ActionItemTriggerParams.IncidentInactivityDuration.
type ActionItemTriggerParams_IncidentInactivityDuration struct {
	union json.RawMessage
}

// ActionItemTriggerParamsIncidentKinds defines model for ActionItemTriggerParams.IncidentKinds.
type ActionItemTriggerParamsIncidentKinds string

// ActionItemTriggerParamsIncidentStatuses defines model for ActionItemTriggerParams.IncidentStatuses.
type ActionItemTriggerParamsIncidentStatuses string

// ActionItemTriggerParamsTriggerType defines model for ActionItemTriggerParams.TriggerType.
type ActionItemTriggerParamsTriggerType string

// AddActionItemTaskParams defines model for add_action_item_task_params.
type AddActionItemTaskParams struct {
	// AssignedToUser  The user this action item is assigned to
	AssignedToUser *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"assigned_to_user,omitempty"`

	// AssignedToUserId [DEPRECATED] Use assigned_to_user attribute instead. The user id this action item is assigned to
	AssignedToUserId *string `json:"assigned_to_user_id,omitempty"`

	// AttributeToQueryBy Attribute of the Incident to match against
	AttributeToQueryBy *AddActionItemTaskParamsAttributeToQueryBy `json:"attribute_to_query_by"`

	// CustomFieldsMapping Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// Description The action item description
	Description *string `json:"description,omitempty"`

	// IncidentRoleId The role id this action item is associated with
	IncidentRoleId *string `json:"incident_role_id,omitempty"`

	// Kind The action item kind
	Kind                   *string `json:"kind,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// Priority The action item priority
	Priority AddActionItemTaskParamsPriority `json:"priority"`

	// QueryValue Value that attribute_to_query_by to uses to match against
	QueryValue *string `json:"query_value"`

	// Status The action item status
	Status AddActionItemTaskParamsStatus `json:"status"`

	// Summary The action item summary
	Summary  string                           `json:"summary"`
	TaskType *AddActionItemTaskParamsTaskType `json:"task_type,omitempty"`
}

// AddActionItemTaskParamsAttributeToQueryBy Attribute of the Incident to match against
type AddActionItemTaskParamsAttributeToQueryBy string

// AddActionItemTaskParamsPriority The action item priority
type AddActionItemTaskParamsPriority string

// AddActionItemTaskParamsStatus The action item status
type AddActionItemTaskParamsStatus string

// AddActionItemTaskParamsTaskType defines model for AddActionItemTaskParams.TaskType.
type AddActionItemTaskParamsTaskType string

// AddMicrosoftTeamsTabTaskParams defines model for add_microsoft_teams_tab_task_params.
type AddMicrosoftTeamsTabTaskParams struct {
	Channel struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channel"`

	// Link The tab link. Required if not a playbook tab
	Link *string `json:"link"`

	// PlaybookId The playbook id if tab is of an incident playbook
	PlaybookId *string                                 `json:"playbook_id,omitempty"`
	TaskType   *AddMicrosoftTeamsTabTaskParamsTaskType `json:"task_type,omitempty"`
	Team       struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"team"`

	// Title The tab title. Required if not a playbook tab
	Title *string `json:"title"`
	union json.RawMessage
}

// AddMicrosoftTeamsTabTaskParamsTaskType defines model for AddMicrosoftTeamsTabTaskParams.TaskType.
type AddMicrosoftTeamsTabTaskParamsTaskType string

// AddMicrosoftTeamsTabTaskParams0 defines model for .
type AddMicrosoftTeamsTabTaskParams0 = interface{}

// AddMicrosoftTeamsTabTaskParams1 defines model for .
type AddMicrosoftTeamsTabTaskParams1 = interface{}

// AddRoleTaskParams defines model for add_role_task_params.
type AddRoleTaskParams struct {
	// AssignedToUser  The user this role is assigned to
	AssignedToUser *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"assigned_to_user,omitempty"`

	// AssignedToUserId [DEPRECATED] Use assigned_to_user attribute instead. The user id this role is assigned to
	AssignedToUserId *string `json:"assigned_to_user_id,omitempty"`

	// IncidentRoleId The role id to add to the incident
	IncidentRoleId string                     `json:"incident_role_id"`
	TaskType       *AddRoleTaskParamsTaskType `json:"task_type,omitempty"`
}

// AddRoleTaskParamsTaskType defines model for AddRoleTaskParams.TaskType.
type AddRoleTaskParamsTaskType string

// AddSlackBookmarkTaskParams defines model for add_slack_bookmark_task_params.
type AddSlackBookmarkTaskParams struct {
	Channel struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channel"`

	// Emoji The bookmark emoji
	Emoji *string `json:"emoji,omitempty"`

	// Link The bookmark link. Required if not a playbook bookmark
	Link *string `json:"link"`

	// PlaybookId The playbook id if bookmark is of an incident playbook
	PlaybookId *string                             `json:"playbook_id,omitempty"`
	TaskType   *AddSlackBookmarkTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The bookmark title. Required if not a playbook bookmark
	Title *string `json:"title"`
	union json.RawMessage
}

// AddSlackBookmarkTaskParamsTaskType defines model for AddSlackBookmarkTaskParams.TaskType.
type AddSlackBookmarkTaskParamsTaskType string

// AddSlackBookmarkTaskParams0 defines model for .
type AddSlackBookmarkTaskParams0 = interface{}

// AddSlackBookmarkTaskParams1 defines model for .
type AddSlackBookmarkTaskParams1 = interface{}

// AddSubscribers defines model for add_subscribers.
type AddSubscribers struct {
	Data struct {
		Attributes struct {
			// RemoveUsersWithNoPrivateIncidentAccess Users without read permissions for private incidents will be removed from the subscriber list of this incident
			RemoveUsersWithNoPrivateIncidentAccess *bool `json:"remove_users_with_no_private_incident_access"`

			// UserIds IDs of users you wish to add to list of subscribers for this incident
			UserIds *[]string `json:"user_ids"`
		} `json:"attributes"`
		Type AddSubscribersDataType `json:"type"`
	} `json:"data"`
}

// AddSubscribersDataType defines model for AddSubscribers.Data.Type.
type AddSubscribersDataType string

// AddTeamTaskParams defines model for add_team_task_params.
type AddTeamTaskParams struct {
	// GroupId The team id
	GroupId  string                     `json:"group_id"`
	TaskType *AddTeamTaskParamsTaskType `json:"task_type,omitempty"`
}

// AddTeamTaskParamsTaskType defines model for AddTeamTaskParams.TaskType.
type AddTeamTaskParamsTaskType string

// AddToTimelineTaskParams defines model for add_to_timeline_task_params.
type AddToTimelineTaskParams struct {
	// Event The timeline event description
	Event               string `json:"event"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *AddToTimelineTaskParamsTaskType `json:"task_type,omitempty"`

	// Url A URL for the timeline event
	Url *string `json:"url,omitempty"`
}

// AddToTimelineTaskParamsTaskType defines model for AddToTimelineTaskParams.TaskType.
type AddToTimelineTaskParamsTaskType string

// Alert defines model for alert.
type Alert struct {
	// AlertUrgencyId The ID of the alert urgency
	AlertUrgencyId *string `json:"alert_urgency_id"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Data Additional data
	Data *map[string]interface{} `json:"data"`

	// Description The description of the alert
	Description *string `json:"description"`

	// Environments Environments attached to the alert
	Environments *[]Environment `json:"environments,omitempty"`

	// ExternalId External ID
	ExternalId *string `json:"external_id"`

	// ExternalUrl External Url
	ExternalUrl *string `json:"external_url"`

	// Groups Groups attached to the alert
	Groups *[]Team `json:"groups,omitempty"`
	Labels *[]struct {
		// Key Key of the tag
		Key string `json:"key"`

		// Value Value of the tag
		Value string `json:"value"`
	} `json:"labels,omitempty"`

	// Services Services attached to the alert
	Services *[]Service `json:"services,omitempty"`

	// Source The source of the alert
	Source AlertSource `json:"source"`

	// Summary The summary of the alert
	Summary string `json:"summary"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// AlertSource The source of the alert
type AlertSource string

// AlertGroup defines model for alert_group.
type AlertGroup struct {
	// ConditionType Grouping condition for the alert group
	ConditionType string `json:"condition_type"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// DeletedAt Date or deletion
	DeletedAt *string `json:"deleted_at"`

	// Description The description of the alert group
	Description *string `json:"description"`

	// GroupByAlertTitle Whether the alerts are grouped by title or not
	GroupByAlertTitle bool `json:"group_by_alert_title"`

	// GroupByAlertUrgency Whether the alerts are grouped by urgency or not
	GroupByAlertUrgency bool `json:"group_by_alert_urgency"`

	// Name The name of the alert group
	Name string `json:"name"`

	// Slug The slug of the alert group
	Slug string `json:"slug"`

	// TimeWindow Time window for the alert grouping
	TimeWindow int `json:"time_window"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// AlertGroupList defines model for alert_group_list.
type AlertGroupList struct {
	Data []struct {
		Attributes AlertGroup `json:"attributes"`

		// Id Unique ID of the alert group
		Id   string                 `json:"id"`
		Type AlertGroupListDataType `json:"type"`
	} `json:"data"`
}

// AlertGroupListDataType defines model for AlertGroupList.Data.Type.
type AlertGroupListDataType string

// AlertGroupResponse defines model for alert_group_response.
type AlertGroupResponse struct {
	Data struct {
		Attributes AlertGroup `json:"attributes"`

		// Id Unique ID of the alert group
		Id   string                     `json:"id"`
		Type AlertGroupResponseDataType `json:"type"`
	} `json:"data"`
}

// AlertGroupResponseDataType defines model for AlertGroupResponse.Data.Type.
type AlertGroupResponseDataType string

// AlertList defines model for alert_list.
type AlertList struct {
	Data []struct {
		Attributes Alert `json:"attributes"`

		// Id Unique ID of the alert
		Id string `json:"id"`

		// Source The source of the alert
		Source *AlertListDataSource `json:"source,omitempty"`
		Type   AlertListDataType    `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// AlertListDataSource The source of the alert
type AlertListDataSource string

// AlertListDataType defines model for AlertList.Data.Type.
type AlertListDataType string

// AlertResponse defines model for alert_response.
type AlertResponse struct {
	Data struct {
		Attributes Alert `json:"attributes"`

		// Id Unique ID of the alert
		Id string `json:"id"`

		// Source The source of the alert
		Source *AlertResponseDataSource `json:"source,omitempty"`
		Type   AlertResponseDataType    `json:"type"`
	} `json:"data"`
}

// AlertResponseDataSource The source of the alert
type AlertResponseDataSource string

// AlertResponseDataType defines model for AlertResponse.Data.Type.
type AlertResponseDataType string

// AlertTriggerParams defines model for alert_trigger_params.
type AlertTriggerParams struct {
	AlertCondition                 *AlertTriggerParamsAlertCondition        `json:"alert_condition,omitempty"`
	AlertConditionLabel            *AlertTriggerParamsAlertConditionLabel   `json:"alert_condition_label,omitempty"`
	AlertConditionLabelUseRegexp   *bool                                    `json:"alert_condition_label_use_regexp,omitempty"`
	AlertConditionPayload          *AlertTriggerParamsAlertConditionPayload `json:"alert_condition_payload,omitempty"`
	AlertConditionPayloadUseRegexp *bool                                    `json:"alert_condition_payload_use_regexp,omitempty"`
	AlertConditionSource           *AlertTriggerParamsAlertConditionSource  `json:"alert_condition_source,omitempty"`
	AlertConditionSourceUseRegexp  *bool                                    `json:"alert_condition_source_use_regexp,omitempty"`
	AlertLabels                    *[]string                                `json:"alert_labels,omitempty"`
	AlertPayload                   *[]string                                `json:"alert_payload,omitempty"`

	// AlertQueryPayload You can use jsonpath syntax. eg: $.incident.teams[*]
	AlertQueryPayload *string                       `json:"alert_query_payload"`
	AlertSources      *[]string                     `json:"alert_sources,omitempty"`
	TriggerType       AlertTriggerParamsTriggerType `json:"trigger_type"`
	Triggers          *[]AlertTriggerParamsTriggers `json:"triggers,omitempty"`
}

// AlertTriggerParamsAlertCondition defines model for AlertTriggerParams.AlertCondition.
type AlertTriggerParamsAlertCondition string

// AlertTriggerParamsAlertConditionLabel defines model for AlertTriggerParams.AlertConditionLabel.
type AlertTriggerParamsAlertConditionLabel string

// AlertTriggerParamsAlertConditionPayload defines model for AlertTriggerParams.AlertConditionPayload.
type AlertTriggerParamsAlertConditionPayload string

// AlertTriggerParamsAlertConditionSource defines model for AlertTriggerParams.AlertConditionSource.
type AlertTriggerParamsAlertConditionSource string

// AlertTriggerParamsTriggerType defines model for AlertTriggerParams.TriggerType.
type AlertTriggerParamsTriggerType string

// AlertTriggerParamsTriggers Actions that trigger the workflow
type AlertTriggerParamsTriggers string

// AlertUrgency defines model for alert_urgency.
type AlertUrgency struct {
	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Description The description of the alert urgency
	Description string `json:"description"`

	// Name The name of the alert urgency
	Name string `json:"name"`

	// Position Position of the alert urgency
	Position int `json:"position"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// AlertUrgencyList defines model for alert_urgency_list.
type AlertUrgencyList struct {
	Data []struct {
		Attributes AlertUrgency `json:"attributes"`

		// Id Unique ID of the alert urgency
		Id   string                   `json:"id"`
		Type AlertUrgencyListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// AlertUrgencyListDataType defines model for AlertUrgencyList.Data.Type.
type AlertUrgencyListDataType string

// AlertUrgencyResponse defines model for alert_urgency_response.
type AlertUrgencyResponse struct {
	Data struct {
		Attributes AlertUrgency `json:"attributes"`

		// Id Unique ID of the alert urgency
		Id   string                       `json:"id"`
		Type AlertUrgencyResponseDataType `json:"type"`
	} `json:"data"`
}

// AlertUrgencyResponseDataType defines model for AlertUrgencyResponse.Data.Type.
type AlertUrgencyResponseDataType string

// AlertsSource defines model for alerts_source.
type AlertsSource struct {
	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Name The name of the alert source
	Name string `json:"name"`

	// Secret A secret key used to authenticate incoming requests to this alerts source
	Secret string `json:"secret"`

	// SourceType The alert source type
	SourceType *string `json:"source_type,omitempty"`

	// SourceableAttributes Additional attributes specific to certain alert sources (e.g., generic_webhook), encapsulating source-specific configurations or details
	SourceableAttributes *map[string]interface{} `json:"sourceable_attributes,omitempty"`

	// Status The current status of the alert source
	Status string `json:"status"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`

	// WebhookEndpoint The URL endpoint of the alert source
	WebhookEndpoint string `json:"webhook_endpoint"`
}

// AlertsSourceList defines model for alerts_source_list.
type AlertsSourceList struct {
	Data []struct {
		Attributes AlertsSource `json:"attributes"`

		// Id Unique ID of the alert source
		Id   string                   `json:"id"`
		Type AlertsSourceListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// AlertsSourceListDataType defines model for AlertsSourceList.Data.Type.
type AlertsSourceListDataType string

// AlertsSourceResponse defines model for alerts_source_response.
type AlertsSourceResponse struct {
	Data struct {
		Attributes AlertsSource `json:"attributes"`

		// Id Unique ID of the alert source
		Id   string                       `json:"id"`
		Type AlertsSourceResponseDataType `json:"type"`
	} `json:"data"`
}

// AlertsSourceResponseDataType defines model for AlertsSourceResponse.Data.Type.
type AlertsSourceResponseDataType string

// ArchiveMicrosoftTeamsChannelsTaskParams defines model for archive_microsoft_teams_channels_task_params.
type ArchiveMicrosoftTeamsChannelsTaskParams struct {
	Channels []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channels"`
	TaskType *ArchiveMicrosoftTeamsChannelsTaskParamsTaskType `json:"task_type,omitempty"`
	Team     struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"team"`
}

// ArchiveMicrosoftTeamsChannelsTaskParamsTaskType defines model for ArchiveMicrosoftTeamsChannelsTaskParams.TaskType.
type ArchiveMicrosoftTeamsChannelsTaskParamsTaskType string

// ArchiveSlackChannelsTaskParams defines model for archive_slack_channels_task_params.
type ArchiveSlackChannelsTaskParams struct {
	Channels []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channels"`
	TaskType *ArchiveSlackChannelsTaskParamsTaskType `json:"task_type,omitempty"`
}

// ArchiveSlackChannelsTaskParamsTaskType defines model for ArchiveSlackChannelsTaskParams.TaskType.
type ArchiveSlackChannelsTaskParamsTaskType string

// AssignRoleToUser defines model for assign_role_to_user.
type AssignRoleToUser struct {
	Data struct {
		Attributes struct {
			// IncidentRoleId ID of the incident role
			IncidentRoleId *string `json:"incident_role_id,omitempty"`

			// UserId ID of user you wish to assign this incident
			UserId *string `json:"user_id,omitempty"`
		} `json:"attributes"`
		Type AssignRoleToUserDataType `json:"type"`
	} `json:"data"`
}

// AssignRoleToUserDataType defines model for AssignRoleToUser.Data.Type.
type AssignRoleToUserDataType string

// AttachAlert defines model for attach_alert.
type AttachAlert struct {
	Data struct {
		Attributes struct {
			// AlertIds Alert Id to attach to the incident
			AlertIds *[]string `json:"alert_ids"`
		} `json:"attributes"`
		Type AttachAlertDataType `json:"type"`
	} `json:"data"`
}

// AttachAlertDataType defines model for AttachAlert.Data.Type.
type AttachAlertDataType string

// AttachDatadogDashboardsTaskParams defines model for attach_datadog_dashboards_task_params.
type AttachDatadogDashboardsTaskParams struct {
	Dashboards []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"dashboards"`
	PostToIncidentTimeline *bool `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *AttachDatadogDashboardsTaskParamsTaskType `json:"task_type,omitempty"`
}

// AttachDatadogDashboardsTaskParamsTaskType defines model for AttachDatadogDashboardsTaskParams.TaskType.
type AttachDatadogDashboardsTaskParamsTaskType string

// Audit defines model for audit.
type Audit struct {
	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Event Describes the action that was taken.
	Event string `json:"event"`

	// Id ID of audit
	Id *int `json:"id"`

	// ItemId ID of the affected object
	ItemId *string `json:"item_id"`

	// ItemType Describes the object in which the action was taken on
	ItemType *AuditItemType `json:"item_type"`

	// Object The object in which the action was taken on
	Object *map[string]interface{} `json:"object"`

	// ObjectChanges The changes that occurred on the object
	ObjectChanges *map[string]interface{} `json:"object_changes"`

	// UserId The ID of who took action on the object. Together with whodunnit_type can be used to find the user
	UserId *int `json:"user_id"`
}

// AuditItemType Describes the object in which the action was taken on
type AuditItemType string

// AuditsList defines model for audits_list.
type AuditsList struct {
	Data []struct {
		Attributes Audit `json:"attributes"`

		// Id Unique ID of the audit log item
		Id   string             `json:"id"`
		Type AuditsListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// AuditsListDataType defines model for AuditsList.Data.Type.
type AuditsListDataType string

// Authorization defines model for authorization.
type Authorization struct {
	// AuthorizableId The id of the resource being accessed.
	AuthorizableId string `json:"authorizable_id"`

	// AuthorizableType The type of resource being accessed.
	AuthorizableType AuthorizationAuthorizableType `json:"authorizable_type"`
	CreatedAt        string                        `json:"created_at"`

	// GranteeId The resource id granted access.
	GranteeId string `json:"grantee_id"`

	// GranteeType The type of resource granted access.
	GranteeType AuthorizationGranteeType   `json:"grantee_type"`
	Permissions []AuthorizationPermissions `json:"permissions"`
	UpdatedAt   string                     `json:"updated_at"`
}

// AuthorizationAuthorizableType The type of resource being accessed.
type AuthorizationAuthorizableType string

// AuthorizationGranteeType The type of resource granted access.
type AuthorizationGranteeType string

// AuthorizationPermissions defines model for Authorization.Permissions.
type AuthorizationPermissions string

// AuthorizationList defines model for authorization_list.
type AuthorizationList struct {
	Data []struct {
		Attributes Authorization `json:"attributes"`

		// Id Unique ID of the authorization
		Id   string                    `json:"id"`
		Type AuthorizationListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// AuthorizationListDataType defines model for AuthorizationList.Data.Type.
type AuthorizationListDataType string

// AuthorizationResponse defines model for authorization_response.
type AuthorizationResponse struct {
	Data struct {
		Attributes Authorization `json:"attributes"`

		// Id Unique ID of the authorization
		Id   string                        `json:"id"`
		Type AuthorizationResponseDataType `json:"type"`
	} `json:"data"`
}

// AuthorizationResponseDataType defines model for AuthorizationResponse.Data.Type.
type AuthorizationResponseDataType string

// AutoAssignRoleOpsgenieTaskParams defines model for auto_assign_role_opsgenie_task_params.
type AutoAssignRoleOpsgenieTaskParams struct {
	// IncidentRoleId The role id
	IncidentRoleId string `json:"incident_role_id"`
	Schedule       struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule"`
	TaskType *AutoAssignRoleOpsgenieTaskParamsTaskType `json:"task_type,omitempty"`
}

// AutoAssignRoleOpsgenieTaskParamsTaskType defines model for AutoAssignRoleOpsgenieTaskParams.TaskType.
type AutoAssignRoleOpsgenieTaskParamsTaskType string

// AutoAssignRolePagerdutyTaskParams defines model for auto_assign_role_pagerduty_task_params.
type AutoAssignRolePagerdutyTaskParams struct {
	EscalationPolicy *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"escalation_policy,omitempty"`

	// IncidentRoleId The role id
	IncidentRoleId string `json:"incident_role_id"`
	Schedule       *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule,omitempty"`
	Service *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"service,omitempty"`
	TaskType *AutoAssignRolePagerdutyTaskParamsTaskType `json:"task_type,omitempty"`
	union    json.RawMessage
}

// AutoAssignRolePagerdutyTaskParamsTaskType defines model for AutoAssignRolePagerdutyTaskParams.TaskType.
type AutoAssignRolePagerdutyTaskParamsTaskType string

// AutoAssignRolePagerdutyTaskParams0 defines model for .
type AutoAssignRolePagerdutyTaskParams0 = interface{}

// AutoAssignRolePagerdutyTaskParams1 defines model for .
type AutoAssignRolePagerdutyTaskParams1 = interface{}

// AutoAssignRoleRootlyTaskParams defines model for auto_assign_role_rootly_task_params.
type AutoAssignRoleRootlyTaskParams struct {
	EscalationPolicyTarget *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"escalation_policy_target,omitempty"`
	GroupTarget *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"group_target,omitempty"`

	// IncidentRoleId The role id
	IncidentRoleId string `json:"incident_role_id"`
	ScheduleTarget *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule_target,omitempty"`
	ServiceTarget *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"service_target,omitempty"`
	TaskType   *AutoAssignRoleRootlyTaskParamsTaskType `json:"task_type,omitempty"`
	UserTarget *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"user_target,omitempty"`
}

// AutoAssignRoleRootlyTaskParamsTaskType defines model for AutoAssignRoleRootlyTaskParams.TaskType.
type AutoAssignRoleRootlyTaskParamsTaskType string

// AutoAssignRoleVictorOpsTaskParams defines model for auto_assign_role_victor_ops_task_params.
type AutoAssignRoleVictorOpsTaskParams struct {
	// IncidentRoleId The role id
	IncidentRoleId string                                     `json:"incident_role_id"`
	TaskType       *AutoAssignRoleVictorOpsTaskParamsTaskType `json:"task_type,omitempty"`
	Team           struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"team"`
}

// AutoAssignRoleVictorOpsTaskParamsTaskType defines model for AutoAssignRoleVictorOpsTaskParams.TaskType.
type AutoAssignRoleVictorOpsTaskParamsTaskType string

// CallPeopleTaskParams defines model for call_people_task_params.
type CallPeopleTaskParams struct {
	// Content The message to be read by text-to-voice
	Content string `json:"content"`

	// Name The name
	Name         string                        `json:"name"`
	PhoneNumbers []string                      `json:"phone_numbers"`
	TaskType     *CallPeopleTaskParamsTaskType `json:"task_type,omitempty"`
}

// CallPeopleTaskParamsTaskType defines model for CallPeopleTaskParams.TaskType.
type CallPeopleTaskParamsTaskType string

// CancelIncident defines model for cancel_incident.
type CancelIncident struct {
	Data struct {
		Attributes struct {
			// CancellationMessage Why was the incident cancelled?
			CancellationMessage *string `json:"cancellation_message"`
		} `json:"attributes"`
		Type CancelIncidentDataType `json:"type"`
	} `json:"data"`
}

// CancelIncidentDataType defines model for CancelIncident.Data.Type.
type CancelIncidentDataType string

// Catalog defines model for catalog.
type Catalog struct {
	CreatedAt   string      `json:"created_at"`
	Description *string     `json:"description"`
	Icon        CatalogIcon `json:"icon"`
	Name        string      `json:"name"`

	// Position Default position of the catalog when displayed in a list.
	Position  *int   `json:"position"`
	UpdatedAt string `json:"updated_at"`
}

// CatalogIcon defines model for Catalog.Icon.
type CatalogIcon string

// CatalogEntity defines model for catalog_entity.
type CatalogEntity struct {
	CreatedAt   string  `json:"created_at"`
	Description *string `json:"description"`
	Name        string  `json:"name"`

	// Position Default position of the item when displayed in a list.
	Position  *int   `json:"position"`
	UpdatedAt string `json:"updated_at"`
}

// CatalogEntityList defines model for catalog_entity_list.
type CatalogEntityList struct {
	Data []struct {
		Attributes CatalogEntity `json:"attributes"`

		// Id Unique ID of the catalog_entity
		Id   string                    `json:"id"`
		Type CatalogEntityListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// CatalogEntityListDataType defines model for CatalogEntityList.Data.Type.
type CatalogEntityListDataType string

// CatalogEntityProperty defines model for catalog_entity_property.
type CatalogEntityProperty struct {
	CatalogEntityId string                   `json:"catalog_entity_id"`
	CatalogFieldId  string                   `json:"catalog_field_id"`
	CreatedAt       string                   `json:"created_at"`
	Key             CatalogEntityPropertyKey `json:"key"`
	UpdatedAt       string                   `json:"updated_at"`
	Value           string                   `json:"value"`
}

// CatalogEntityPropertyKey defines model for CatalogEntityProperty.Key.
type CatalogEntityPropertyKey string

// CatalogEntityPropertyList defines model for catalog_entity_property_list.
type CatalogEntityPropertyList struct {
	Data []struct {
		Attributes CatalogEntityProperty `json:"attributes"`

		// Id Unique ID of the catalog_entity_property
		Id   string                            `json:"id"`
		Type CatalogEntityPropertyListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// CatalogEntityPropertyListDataType defines model for CatalogEntityPropertyList.Data.Type.
type CatalogEntityPropertyListDataType string

// CatalogEntityPropertyResponse defines model for catalog_entity_property_response.
type CatalogEntityPropertyResponse struct {
	Data struct {
		Attributes CatalogEntityProperty `json:"attributes"`

		// Id Unique ID of the catalog_entity_property
		Id   string                                `json:"id"`
		Type CatalogEntityPropertyResponseDataType `json:"type"`
	} `json:"data"`
}

// CatalogEntityPropertyResponseDataType defines model for CatalogEntityPropertyResponse.Data.Type.
type CatalogEntityPropertyResponseDataType string

// CatalogEntityResponse defines model for catalog_entity_response.
type CatalogEntityResponse struct {
	Data struct {
		Attributes CatalogEntity `json:"attributes"`

		// Id Unique ID of the catalog_entity
		Id   string                        `json:"id"`
		Type CatalogEntityResponseDataType `json:"type"`
	} `json:"data"`
}

// CatalogEntityResponseDataType defines model for CatalogEntityResponse.Data.Type.
type CatalogEntityResponseDataType string

// CatalogField defines model for catalog_field.
type CatalogField struct {
	CatalogId string           `json:"catalog_id"`
	CreatedAt string           `json:"created_at"`
	Kind      CatalogFieldKind `json:"kind"`

	// KindCatalogId Restricts values to items of specified catalog.
	KindCatalogId *string `json:"kind_catalog_id"`

	// Multiple Whether the attribute accepts multiple values.
	Multiple bool   `json:"multiple"`
	Name     string `json:"name"`

	// Position Default position of the item when displayed in a list.
	Position  *int   `json:"position"`
	Slug      string `json:"slug"`
	UpdatedAt string `json:"updated_at"`
}

// CatalogFieldKind defines model for CatalogField.Kind.
type CatalogFieldKind string

// CatalogFieldList defines model for catalog_field_list.
type CatalogFieldList struct {
	Data []struct {
		Attributes CatalogField `json:"attributes"`

		// Id Unique ID of the catalog_field
		Id   string                   `json:"id"`
		Type CatalogFieldListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// CatalogFieldListDataType defines model for CatalogFieldList.Data.Type.
type CatalogFieldListDataType string

// CatalogFieldResponse defines model for catalog_field_response.
type CatalogFieldResponse struct {
	Data struct {
		Attributes CatalogField `json:"attributes"`

		// Id Unique ID of the catalog_field
		Id   string                       `json:"id"`
		Type CatalogFieldResponseDataType `json:"type"`
	} `json:"data"`
}

// CatalogFieldResponseDataType defines model for CatalogFieldResponse.Data.Type.
type CatalogFieldResponseDataType string

// CatalogList defines model for catalog_list.
type CatalogList struct {
	Data []struct {
		Attributes Catalog `json:"attributes"`

		// Id Unique ID of the catalog
		Id   string              `json:"id"`
		Type CatalogListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// CatalogListDataType defines model for CatalogList.Data.Type.
type CatalogListDataType string

// CatalogResponse defines model for catalog_response.
type CatalogResponse struct {
	Data struct {
		Attributes Catalog `json:"attributes"`

		// Id Unique ID of the catalog
		Id   string                  `json:"id"`
		Type CatalogResponseDataType `json:"type"`
	} `json:"data"`
}

// CatalogResponseDataType defines model for CatalogResponse.Data.Type.
type CatalogResponseDataType string

// Cause defines model for cause.
type Cause struct {
	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Description The description of the cause
	Description *string `json:"description"`

	// Name The name of the cause
	Name string `json:"name"`

	// Position Position of the cause
	Position *int `json:"position"`

	// Slug The slug of the cause
	Slug *string `json:"slug,omitempty"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// CauseList defines model for cause_list.
type CauseList struct {
	Data []struct {
		Attributes Cause `json:"attributes"`

		// Id Unique ID of the cause
		Id   string            `json:"id"`
		Type CauseListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// CauseListDataType defines model for CauseList.Data.Type.
type CauseListDataType string

// CauseResponse defines model for cause_response.
type CauseResponse struct {
	Data struct {
		Attributes Cause `json:"attributes"`

		// Id Unique ID of the cause
		Id   string                `json:"id"`
		Type CauseResponseDataType `json:"type"`
	} `json:"data"`
}

// CauseResponseDataType defines model for CauseResponse.Data.Type.
type CauseResponseDataType string

// ChangeSlackChannelPrivacyTaskParams defines model for change_slack_channel_privacy_task_params.
type ChangeSlackChannelPrivacyTaskParams struct {
	Channel *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channel,omitempty"`
	Privacy  ChangeSlackChannelPrivacyTaskParamsPrivacy   `json:"privacy"`
	TaskType *ChangeSlackChannelPrivacyTaskParamsTaskType `json:"task_type,omitempty"`
}

// ChangeSlackChannelPrivacyTaskParamsPrivacy defines model for ChangeSlackChannelPrivacyTaskParams.Privacy.
type ChangeSlackChannelPrivacyTaskParamsPrivacy string

// ChangeSlackChannelPrivacyTaskParamsTaskType defines model for ChangeSlackChannelPrivacyTaskParams.TaskType.
type ChangeSlackChannelPrivacyTaskParamsTaskType string

// CreateAirtableTableRecordTaskParams defines model for create_airtable_table_record_task_params.
type CreateAirtableTableRecordTaskParams struct {
	Base struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"base"`

	// CustomFieldsMapping Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`
	Table               struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"table"`
	TaskType *CreateAirtableTableRecordTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateAirtableTableRecordTaskParamsTaskType defines model for CreateAirtableTableRecordTaskParams.TaskType.
type CreateAirtableTableRecordTaskParamsTaskType string

// CreateAsanaSubtaskTaskParams defines model for create_asana_subtask_task_params.
type CreateAsanaSubtaskTaskParams struct {
	// AssignUserEmail The assigned user's email
	AssignUserEmail *string `json:"assign_user_email,omitempty"`
	Completion      struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// CustomFieldsMapping Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string                                          `json:"custom_fields_mapping"`
	DependencyDirection *CreateAsanaSubtaskTaskParamsDependencyDirection `json:"dependency_direction,omitempty"`

	// DependentTaskIds Dependent task ids. Supports liquid syntax
	DependentTaskIds *[]string `json:"dependent_task_ids"`

	// DueDate The due date
	DueDate *string `json:"due_date,omitempty"`
	Notes   *string `json:"notes,omitempty"`

	// ParentTaskId The parent task id
	ParentTaskId string                                `json:"parent_task_id"`
	TaskType     *CreateAsanaSubtaskTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The subtask title
	Title string `json:"title"`
}

// CreateAsanaSubtaskTaskParamsDependencyDirection defines model for CreateAsanaSubtaskTaskParams.DependencyDirection.
type CreateAsanaSubtaskTaskParamsDependencyDirection string

// CreateAsanaSubtaskTaskParamsTaskType defines model for CreateAsanaSubtaskTaskParams.TaskType.
type CreateAsanaSubtaskTaskParamsTaskType string

// CreateAsanaTaskTaskParams defines model for create_asana_task_task_params.
type CreateAsanaTaskTaskParams struct {
	// AssignUserEmail The assigned user's email
	AssignUserEmail *string `json:"assign_user_email,omitempty"`
	Completion      struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// CustomFieldsMapping Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string                                       `json:"custom_fields_mapping"`
	DependencyDirection *CreateAsanaTaskTaskParamsDependencyDirection `json:"dependency_direction,omitempty"`

	// DependentTaskIds Dependent task ids. Supports liquid syntax
	DependentTaskIds *[]string `json:"dependent_task_ids"`

	// DueDate The due date
	DueDate  *string `json:"due_date,omitempty"`
	Notes    *string `json:"notes,omitempty"`
	Projects []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"projects"`
	TaskType *CreateAsanaTaskTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The task title
	Title     string `json:"title"`
	Workspace struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"workspace"`
}

// CreateAsanaTaskTaskParamsDependencyDirection defines model for CreateAsanaTaskTaskParams.DependencyDirection.
type CreateAsanaTaskTaskParamsDependencyDirection string

// CreateAsanaTaskTaskParamsTaskType defines model for CreateAsanaTaskTaskParams.TaskType.
type CreateAsanaTaskTaskParamsTaskType string

// CreateClickupTaskTaskParams defines model for create_clickup_task_task_params.
type CreateClickupTaskTaskParams struct {
	// CustomFieldsMapping Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// Description The task description
	Description *string `json:"description,omitempty"`

	// DueDate The due date
	DueDate *string `json:"due_date,omitempty"`

	// Priority The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// Tags The task tags
	Tags *string `json:"tags,omitempty"`

	// TaskPayload Additional ClickUp task attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON
	TaskPayload *string                              `json:"task_payload"`
	TaskType    *CreateClickupTaskTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The task title
	Title string `json:"title"`
}

// CreateClickupTaskTaskParamsTaskType defines model for CreateClickupTaskTaskParams.TaskType.
type CreateClickupTaskTaskParamsTaskType string

// CreateConfluencePageTaskParams defines model for create_confluence_page_task_params.
type CreateConfluencePageTaskParams struct {
	Ancestor *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"ancestor,omitempty"`

	// Content The page content
	Content *string `json:"content,omitempty"`

	// Integration Specify integration id if you have more than one Confluence instance
	Integration *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"integration,omitempty"`
	MarkPostMortemAsPublished *bool `json:"mark_post_mortem_as_published,omitempty"`

	// PostMortemTemplateId The Retrospective template to use
	PostMortemTemplateId *string `json:"post_mortem_template_id,omitempty"`
	Space                struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"space"`
	TaskType *CreateConfluencePageTaskParamsTaskType `json:"task_type,omitempty"`
	Template *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"template,omitempty"`

	// Title The page title
	Title string `json:"title"`
}

// CreateConfluencePageTaskParamsTaskType defines model for CreateConfluencePageTaskParams.TaskType.
type CreateConfluencePageTaskParamsTaskType string

// CreateDatadogNotebookTaskParams defines model for create_datadog_notebook_task_params.
type CreateDatadogNotebookTaskParams struct {
	// Content The notebook content
	Content *string `json:"content,omitempty"`

	// Kind The notebook kind
	Kind                      CreateDatadogNotebookTaskParamsKind `json:"kind"`
	MarkPostMortemAsPublished *bool                               `json:"mark_post_mortem_as_published,omitempty"`

	// PostMortemTemplateId Retrospective template to use when creating notebook, if desired
	PostMortemTemplateId *string                                  `json:"post_mortem_template_id,omitempty"`
	TaskType             *CreateDatadogNotebookTaskParamsTaskType `json:"task_type,omitempty"`
	Template             *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"template,omitempty"`

	// Title The notebook title
	Title string `json:"title"`
}

// CreateDatadogNotebookTaskParamsKind The notebook kind
type CreateDatadogNotebookTaskParamsKind string

// CreateDatadogNotebookTaskParamsTaskType defines model for CreateDatadogNotebookTaskParams.TaskType.
type CreateDatadogNotebookTaskParamsTaskType string

// CreateDropboxPaperPageTaskParams defines model for create_dropbox_paper_page_task_params.
type CreateDropboxPaperPageTaskParams struct {
	// Content The page content
	Content                   *string `json:"content,omitempty"`
	MarkPostMortemAsPublished *bool   `json:"mark_post_mortem_as_published,omitempty"`
	Namespace                 *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"namespace,omitempty"`
	ParentFolder *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_folder,omitempty"`

	// PostMortemTemplateId Retrospective template to use when creating page task, if desired
	PostMortemTemplateId *string                                   `json:"post_mortem_template_id,omitempty"`
	TaskType             *CreateDropboxPaperPageTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The page task title
	Title string `json:"title"`
}

// CreateDropboxPaperPageTaskParamsTaskType defines model for CreateDropboxPaperPageTaskParams.TaskType.
type CreateDropboxPaperPageTaskParamsTaskType string

// CreateGithubIssueTaskParams defines model for create_github_issue_task_params.
type CreateGithubIssueTaskParams struct {
	// Body The issue body
	Body       *string `json:"body,omitempty"`
	Repository struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"repository"`
	TaskType *CreateGithubIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The issue title
	Title string `json:"title"`
}

// CreateGithubIssueTaskParamsTaskType defines model for CreateGithubIssueTaskParams.TaskType.
type CreateGithubIssueTaskParamsTaskType string

// CreateGitlabIssueTaskParams defines model for create_gitlab_issue_task_params.
type CreateGitlabIssueTaskParams struct {
	// Description The issue description
	Description *string `json:"description,omitempty"`

	// DueDate The due date
	DueDate *string `json:"due_date,omitempty"`

	// IssueType The issue type
	IssueType *CreateGitlabIssueTaskParamsIssueType `json:"issue_type,omitempty"`

	// Labels The issue labels
	Labels     *string `json:"labels,omitempty"`
	Repository struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"repository"`
	TaskType *CreateGitlabIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The issue title
	Title string `json:"title"`
}

// CreateGitlabIssueTaskParamsIssueType The issue type
type CreateGitlabIssueTaskParamsIssueType string

// CreateGitlabIssueTaskParamsTaskType defines model for CreateGitlabIssueTaskParams.TaskType.
type CreateGitlabIssueTaskParamsTaskType string

// CreateGoToMeetingTaskParams defines model for create_go_to_meeting_task_params.
type CreateGoToMeetingTaskParams struct {
	ConferenceCallInfo     *CreateGoToMeetingTaskParamsConferenceCallInfo `json:"conference_call_info"`
	PasswordRequired       *bool                                          `json:"password_required"`
	PostToIncidentTimeline *bool                                          `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// Subject The meeting subject
	Subject  string                               `json:"subject"`
	TaskType *CreateGoToMeetingTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateGoToMeetingTaskParamsConferenceCallInfo defines model for CreateGoToMeetingTaskParams.ConferenceCallInfo.
type CreateGoToMeetingTaskParamsConferenceCallInfo string

// CreateGoToMeetingTaskParamsTaskType defines model for CreateGoToMeetingTaskParams.TaskType.
type CreateGoToMeetingTaskParamsTaskType string

// CreateGoogleCalendarEventTaskParams defines model for create_google_calendar_event_task_params.
type CreateGoogleCalendarEventTaskParams struct {
	// Attendees Emails of attendees
	Attendees               *[]string `json:"attendees,omitempty"`
	CanGuestsInviteOthers   *bool     `json:"can_guests_invite_others,omitempty"`
	CanGuestsModifyEvent    *bool     `json:"can_guests_modify_event,omitempty"`
	CanGuestsSeeOtherGuests *bool     `json:"can_guests_see_other_guests,omitempty"`

	// ConferenceSolutionKey Sets the video conference type attached to the meeting
	ConferenceSolutionKey *CreateGoogleCalendarEventTaskParamsConferenceSolutionKey `json:"conference_solution_key"`

	// DaysUntilMeeting The days until meeting
	DaysUntilMeeting int `json:"days_until_meeting"`

	// Description The event description
	Description     string `json:"description"`
	ExcludeWeekends *bool  `json:"exclude_weekends,omitempty"`

	// MeetingDuration Meeting duration in format like '1 hour', '30 minutes'
	MeetingDuration        string `json:"meeting_duration"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// SendUpdates Send an email to the attendees notifying them of the event
	SendUpdates *bool `json:"send_updates,omitempty"`

	// Summary The event summary
	Summary  string                                       `json:"summary"`
	TaskType *CreateGoogleCalendarEventTaskParamsTaskType `json:"task_type,omitempty"`

	// TimeOfMeeting Time of meeting in format HH:MM
	TimeOfMeeting string `json:"time_of_meeting"`

	// TimeZone A valid IANA time zone name.
	TimeZone *string `json:"time_zone"`
}

// CreateGoogleCalendarEventTaskParamsConferenceSolutionKey Sets the video conference type attached to the meeting
type CreateGoogleCalendarEventTaskParamsConferenceSolutionKey string

// CreateGoogleCalendarEventTaskParamsTaskType defines model for CreateGoogleCalendarEventTaskParams.TaskType.
type CreateGoogleCalendarEventTaskParamsTaskType string

// CreateGoogleDocsPageTaskParams defines model for create_google_docs_page_task_params.
type CreateGoogleDocsPageTaskParams struct {
	// Content The page content
	Content *string `json:"content,omitempty"`
	Drive   *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"drive,omitempty"`
	MarkPostMortemAsPublished *bool `json:"mark_post_mortem_as_published,omitempty"`
	ParentFolder              *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_folder,omitempty"`

	// Permissions Page permissions JSON
	Permissions *string `json:"permissions,omitempty"`

	// PostMortemTemplateId Retrospective template to use when creating page, if desired
	PostMortemTemplateId *string                                 `json:"post_mortem_template_id,omitempty"`
	TaskType             *CreateGoogleDocsPageTaskParamsTaskType `json:"task_type,omitempty"`

	// TemplateId The Google Doc file ID to use as a template
	TemplateId *string `json:"template_id,omitempty"`

	// Title The page title
	Title string `json:"title"`
}

// CreateGoogleDocsPageTaskParamsTaskType defines model for CreateGoogleDocsPageTaskParams.TaskType.
type CreateGoogleDocsPageTaskParamsTaskType string

// CreateGoogleDocsPermissionsTaskParams defines model for create_google_docs_permissions_task_params.
type CreateGoogleDocsPermissionsTaskParams struct {
	// EmailMessage Email message notification
	EmailMessage *string `json:"email_message"`

	// FileId The Google Doc file ID
	FileId string `json:"file_id"`

	// Permissions Page permissions JSON
	Permissions           string                                         `json:"permissions"`
	SendNotificationEmail *bool                                          `json:"send_notification_email,omitempty"`
	TaskType              *CreateGoogleDocsPermissionsTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateGoogleDocsPermissionsTaskParamsTaskType defines model for CreateGoogleDocsPermissionsTaskParams.TaskType.
type CreateGoogleDocsPermissionsTaskParamsTaskType string

// CreateGoogleMeetingTaskParams defines model for create_google_meeting_task_params.
type CreateGoogleMeetingTaskParams struct {
	// ConferenceSolutionKey Sets the video conference type attached to the meeting
	ConferenceSolutionKey *CreateGoogleMeetingTaskParamsConferenceSolutionKey `json:"conference_solution_key,omitempty"`

	// Description The meeting description
	Description            string `json:"description"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// RecordMeeting Rootly AI will record the meeting and automatically generate a transcript and summary from your meeting
	RecordMeeting *bool `json:"record_meeting,omitempty"`

	// Summary The meeting summary
	Summary  string                                 `json:"summary"`
	TaskType *CreateGoogleMeetingTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateGoogleMeetingTaskParamsConferenceSolutionKey Sets the video conference type attached to the meeting
type CreateGoogleMeetingTaskParamsConferenceSolutionKey string

// CreateGoogleMeetingTaskParamsTaskType defines model for CreateGoogleMeetingTaskParams.TaskType.
type CreateGoogleMeetingTaskParamsTaskType string

// CreateIncidentPostmortemTaskParams defines model for create_incident_postmortem_task_params.
type CreateIncidentPostmortemTaskParams struct {
	// IncidentId UUID of the incident that needs a retrospective
	IncidentId string                                      `json:"incident_id"`
	Status     *string                                     `json:"status"`
	TaskType   *CreateIncidentPostmortemTaskParamsTaskType `json:"task_type,omitempty"`

	// Template Retrospective template to use
	Template *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"template"`

	// Title The retrospective title
	Title string `json:"title"`
}

// CreateIncidentPostmortemTaskParamsTaskType defines model for CreateIncidentPostmortemTaskParams.TaskType.
type CreateIncidentPostmortemTaskParamsTaskType string

// CreateIncidentTaskParams defines model for create_incident_task_params.
type CreateIncidentTaskParams struct {
	// CustomFieldsMapping Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string   `json:"custom_fields_mapping"`
	EnvironmentIds      *[]string `json:"environment_ids,omitempty"`
	FunctionalityIds    *[]string `json:"functionality_ids,omitempty"`
	GroupIds            *[]string `json:"group_ids,omitempty"`
	IncidentTypeIds     *[]string `json:"incident_type_ids,omitempty"`
	Private             *bool     `json:"private,omitempty"`
	ServiceIds          *[]string `json:"service_ids,omitempty"`
	SeverityId          *string   `json:"severity_id,omitempty"`

	// Summary The incident summary
	Summary  *string                           `json:"summary,omitempty"`
	TaskType *CreateIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The incident title
	Title string `json:"title"`
}

// CreateIncidentTaskParamsTaskType defines model for CreateIncidentTaskParams.TaskType.
type CreateIncidentTaskParamsTaskType string

// CreateJiraIssueTaskParams defines model for create_jira_issue_task_params.
type CreateJiraIssueTaskParams struct {
	// AssignUserEmail The assigned user's email
	AssignUserEmail *string `json:"assign_user_email,omitempty"`

	// CustomFieldsMapping Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// Description The issue description
	Description *string `json:"description,omitempty"`

	// DueDate The due date
	DueDate *string `json:"due_date,omitempty"`

	// Integration Specify integration id if you have more than one Jira instance
	Integration *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"integration,omitempty"`

	// IssueType The issue type id and display name
	IssueType struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"issue_type"`

	// Labels The issue labels
	Labels *string `json:"labels,omitempty"`

	// Priority The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// ProjectKey The project key
	ProjectKey string `json:"project_key"`

	// ReporterUserEmail The reporter user's email
	ReporterUserEmail *string `json:"reporter_user_email,omitempty"`

	// Status The status id and display name
	Status *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"status,omitempty"`
	TaskType *CreateJiraIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The issue title
	Title string `json:"title"`

	// UpdatePayload Update payload. Can contain liquid markup and need to be valid JSON
	UpdatePayload *string `json:"update_payload"`
}

// CreateJiraIssueTaskParamsTaskType defines model for CreateJiraIssueTaskParams.TaskType.
type CreateJiraIssueTaskParamsTaskType string

// CreateJiraSubtaskTaskParams defines model for create_jira_subtask_task_params.
type CreateJiraSubtaskTaskParams struct {
	// AssignUserEmail The assigned user's email
	AssignUserEmail *string `json:"assign_user_email,omitempty"`

	// CustomFieldsMapping Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// Description The issue description
	Description *string `json:"description,omitempty"`

	// DueDate The due date
	DueDate *string `json:"due_date,omitempty"`

	// Integration Specify integration id if you have more than one Jira instance
	Integration *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"integration,omitempty"`

	// Labels The issue labels
	Labels *string `json:"labels,omitempty"`

	// ParentIssueId The parent issue
	ParentIssueId string `json:"parent_issue_id"`

	// Priority The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// ProjectKey The project key
	ProjectKey string `json:"project_key"`

	// ReporterUserEmail The reporter user's email
	ReporterUserEmail *string `json:"reporter_user_email,omitempty"`

	// Status The status id and display name
	Status *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"status,omitempty"`

	// SubtaskIssueType The issue type id and display name
	SubtaskIssueType struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"subtask_issue_type"`
	TaskType *CreateJiraSubtaskTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The issue title
	Title string `json:"title"`

	// UpdatePayload Update payload. Can contain liquid markup and need to be valid JSON
	UpdatePayload *string `json:"update_payload"`
}

// CreateJiraSubtaskTaskParamsTaskType defines model for CreateJiraSubtaskTaskParams.TaskType.
type CreateJiraSubtaskTaskParamsTaskType string

// CreateLinearIssueCommentTaskParams defines model for create_linear_issue_comment_task_params.
type CreateLinearIssueCommentTaskParams struct {
	// Body The issue description
	Body string `json:"body"`

	// IssueId The issue id
	IssueId  string                                      `json:"issue_id"`
	TaskType *CreateLinearIssueCommentTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateLinearIssueCommentTaskParamsTaskType defines model for CreateLinearIssueCommentTaskParams.TaskType.
type CreateLinearIssueCommentTaskParamsTaskType string

// CreateLinearIssueTaskParams defines model for create_linear_issue_task_params.
type CreateLinearIssueTaskParams struct {
	// AssignUserEmail The assigned user's email
	AssignUserEmail *string `json:"assign_user_email,omitempty"`

	// Description The issue description
	Description *string `json:"description,omitempty"`
	Labels      *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"labels,omitempty"`

	// Priority The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// Project The project id and display name
	Project *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"project,omitempty"`

	// State The state id and display name
	State struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"state"`
	TaskType *CreateLinearIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// Team The team id and display name
	Team struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"team"`

	// Title The issue title
	Title string `json:"title"`
}

// CreateLinearIssueTaskParamsTaskType defines model for CreateLinearIssueTaskParams.TaskType.
type CreateLinearIssueTaskParamsTaskType string

// CreateLinearSubtaskIssueTaskParams defines model for create_linear_subtask_issue_task_params.
type CreateLinearSubtaskIssueTaskParams struct {
	// AssignUserEmail The assigned user's email
	AssignUserEmail *string `json:"assign_user_email,omitempty"`

	// Description The issue description
	Description *string `json:"description,omitempty"`

	// ParentIssueId The parent issue
	ParentIssueId string `json:"parent_issue_id"`

	// Priority The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// State The state id and display name
	State struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"state"`
	TaskType *CreateLinearSubtaskIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The issue title
	Title string `json:"title"`
}

// CreateLinearSubtaskIssueTaskParamsTaskType defines model for CreateLinearSubtaskIssueTaskParams.TaskType.
type CreateLinearSubtaskIssueTaskParamsTaskType string

// CreateMicrosoftTeamsChannelTaskParams defines model for create_microsoft_teams_channel_task_params.
type CreateMicrosoftTeamsChannelTaskParams struct {
	// Description Microsoft Team channel description
	Description *string                                        `json:"description,omitempty"`
	Private     *CreateMicrosoftTeamsChannelTaskParamsPrivate  `json:"private,omitempty"`
	TaskType    *CreateMicrosoftTeamsChannelTaskParamsTaskType `json:"task_type,omitempty"`
	Team        *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"team,omitempty"`

	// Title Microsoft Team channel title
	Title string `json:"title"`
}

// CreateMicrosoftTeamsChannelTaskParamsPrivate defines model for CreateMicrosoftTeamsChannelTaskParams.Private.
type CreateMicrosoftTeamsChannelTaskParamsPrivate string

// CreateMicrosoftTeamsChannelTaskParamsTaskType defines model for CreateMicrosoftTeamsChannelTaskParams.TaskType.
type CreateMicrosoftTeamsChannelTaskParamsTaskType string

// CreateMicrosoftTeamsMeetingTaskParams defines model for create_microsoft_teams_meeting_task_params.
type CreateMicrosoftTeamsMeetingTaskParams struct {
	// Name The meeting name
	Name                   string `json:"name"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// RecordMeeting Rootly AI will record the meeting and automatically generate a transcript and summary from your meeting
	RecordMeeting *bool `json:"record_meeting,omitempty"`

	// Subject The meeting subject
	Subject  string                                         `json:"subject"`
	TaskType *CreateMicrosoftTeamsMeetingTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateMicrosoftTeamsMeetingTaskParamsTaskType defines model for CreateMicrosoftTeamsMeetingTaskParams.TaskType.
type CreateMicrosoftTeamsMeetingTaskParamsTaskType string

// CreateMotionTaskTaskParams defines model for create_motion_task_task_params.
type CreateMotionTaskTaskParams struct {
	// Description The task description
	Description *string `json:"description,omitempty"`

	// DueDate The due date
	DueDate *string `json:"due_date,omitempty"`

	// Duration The duration. Eg.  "NONE", "REMINDER", or a integer greater than 0.
	Duration *string   `json:"duration,omitempty"`
	Labels   *[]string `json:"labels,omitempty"`

	// Priority The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`
	Project *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"project,omitempty"`
	Status *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"status,omitempty"`
	TaskType *CreateMotionTaskTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The task title
	Title     string `json:"title"`
	Workspace struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"workspace"`
}

// CreateMotionTaskTaskParamsTaskType defines model for CreateMotionTaskTaskParams.TaskType.
type CreateMotionTaskTaskParamsTaskType string

// CreateNotionPageTaskParams defines model for create_notion_page_task_params.
type CreateNotionPageTaskParams struct {
	MarkPostMortemAsPublished *bool `json:"mark_post_mortem_as_published,omitempty"`

	// ParentPage The parent page id and display name
	ParentPage struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_page"`

	// PostMortemTemplateId Retrospective template to use when creating page task, if desired
	PostMortemTemplateId   *string                             `json:"post_mortem_template_id,omitempty"`
	ShowActionItemsAsTable *bool                               `json:"show_action_items_as_table,omitempty"`
	ShowTimelineAsTable    *bool                               `json:"show_timeline_as_table,omitempty"`
	TaskType               *CreateNotionPageTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The Notion page title
	Title string `json:"title"`
}

// CreateNotionPageTaskParamsTaskType defines model for CreateNotionPageTaskParams.TaskType.
type CreateNotionPageTaskParamsTaskType string

// CreateOpsgenieAlertTaskParams defines model for create_opsgenie_alert_task_params.
type CreateOpsgenieAlertTaskParams struct {
	// Description Description field of the alert that is generally used to provide a detailed information about the alert
	Description *string `json:"description,omitempty"`

	// Details Details payload. Can contain liquid markup and need to be valid JSON
	Details     *string `json:"details"`
	Escalations *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"escalations,omitempty"`

	// Message Message of the alert
	Message   string                                 `json:"message"`
	Priority  *CreateOpsgenieAlertTaskParamsPriority `json:"priority,omitempty"`
	Schedules *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedules,omitempty"`
	TaskType *CreateOpsgenieAlertTaskParamsTaskType `json:"task_type,omitempty"`
	Teams    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"teams,omitempty"`
	Users *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"users,omitempty"`
}

// CreateOpsgenieAlertTaskParamsPriority defines model for CreateOpsgenieAlertTaskParams.Priority.
type CreateOpsgenieAlertTaskParamsPriority string

// CreateOpsgenieAlertTaskParamsTaskType defines model for CreateOpsgenieAlertTaskParams.TaskType.
type CreateOpsgenieAlertTaskParamsTaskType string

// CreateOutlookEventTaskParams defines model for create_outlook_event_task_params.
type CreateOutlookEventTaskParams struct {
	// Attendees Emails of attendees
	Attendees *[]string `json:"attendees,omitempty"`
	Calendar  struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"calendar"`

	// DaysUntilMeeting The days until meeting
	DaysUntilMeeting int `json:"days_until_meeting"`

	// Description The event description
	Description     string `json:"description"`
	ExcludeWeekends *bool  `json:"exclude_weekends,omitempty"`

	// MeetingDuration Meeting duration in format like '1 hour', '30 minutes'
	MeetingDuration        string `json:"meeting_duration"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// Summary The event summary
	Summary  string                                `json:"summary"`
	TaskType *CreateOutlookEventTaskParamsTaskType `json:"task_type,omitempty"`

	// TimeOfMeeting Time of meeting in format HH:MM
	TimeOfMeeting string `json:"time_of_meeting"`

	// TimeZone A valid IANA time zone name.
	TimeZone *string `json:"time_zone"`
}

// CreateOutlookEventTaskParamsTaskType defines model for CreateOutlookEventTaskParams.TaskType.
type CreateOutlookEventTaskParamsTaskType string

// CreatePagerdutyStatusUpdateTaskParams defines model for create_pagerduty_status_update_task_params.
type CreatePagerdutyStatusUpdateTaskParams struct {
	// Message A message outlining the incident's resolution in PagerDuty
	Message string `json:"message"`

	// PagerdutyIncidentId PagerDuty incident id
	PagerdutyIncidentId string                                         `json:"pagerduty_incident_id"`
	TaskType            *CreatePagerdutyStatusUpdateTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreatePagerdutyStatusUpdateTaskParamsTaskType defines model for CreatePagerdutyStatusUpdateTaskParams.TaskType.
type CreatePagerdutyStatusUpdateTaskParamsTaskType string

// CreatePagertreeAlertTaskParams defines model for create_pagertree_alert_task_params.
type CreatePagertreeAlertTaskParams struct {
	// Description Description of alert as text
	Description *string `json:"description,omitempty"`

	// Incident Setting to true makes an alert a Pagertree incident
	Incident *bool                                   `json:"incident,omitempty"`
	Severity *CreatePagertreeAlertTaskParamsSeverity `json:"severity,omitempty"`
	TaskType *CreatePagertreeAlertTaskParamsTaskType `json:"task_type,omitempty"`
	Teams    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"teams,omitempty"`

	// Title Title of alert as text
	Title   *string                                `json:"title,omitempty"`
	Urgency *CreatePagertreeAlertTaskParamsUrgency `json:"urgency,omitempty"`
	Users   *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"users,omitempty"`
}

// CreatePagertreeAlertTaskParamsSeverity defines model for CreatePagertreeAlertTaskParams.Severity.
type CreatePagertreeAlertTaskParamsSeverity string

// CreatePagertreeAlertTaskParamsTaskType defines model for CreatePagertreeAlertTaskParams.TaskType.
type CreatePagertreeAlertTaskParamsTaskType string

// CreatePagertreeAlertTaskParamsUrgency defines model for CreatePagertreeAlertTaskParams.Urgency.
type CreatePagertreeAlertTaskParamsUrgency string

// CreateQuipPageTaskParams defines model for create_quip_page_task_params.
type CreateQuipPageTaskParams struct {
	// Content The page content
	Content                   *string `json:"content,omitempty"`
	MarkPostMortemAsPublished *bool   `json:"mark_post_mortem_as_published,omitempty"`

	// ParentFolderId The parent folder id
	ParentFolderId *string `json:"parent_folder_id,omitempty"`

	// PostMortemTemplateId Retrospective template to use when creating page, if desired
	PostMortemTemplateId *string                           `json:"post_mortem_template_id,omitempty"`
	TaskType             *CreateQuipPageTaskParamsTaskType `json:"task_type,omitempty"`

	// TemplateId The Quip file ID to use as a template
	TemplateId *string `json:"template_id,omitempty"`

	// Title The page title
	Title string `json:"title"`
}

// CreateQuipPageTaskParamsTaskType defines model for CreateQuipPageTaskParams.TaskType.
type CreateQuipPageTaskParamsTaskType string

// CreateServiceNowIncidentTaskParams defines model for create_service_now_incident_task_params.
type CreateServiceNowIncidentTaskParams struct {
	// Completion The completion id and display name
	Completion *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion,omitempty"`

	// CustomFieldsMapping Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// Description The incident description
	Description *string `json:"description,omitempty"`

	// Priority The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`
	TaskType *CreateServiceNowIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The incident title
	Title string `json:"title"`
}

// CreateServiceNowIncidentTaskParamsTaskType defines model for CreateServiceNowIncidentTaskParams.TaskType.
type CreateServiceNowIncidentTaskParamsTaskType string

// CreateSharepointPageTaskParams defines model for create_sharepoint_page_task_params.
type CreateSharepointPageTaskParams struct {
	// Content The page content
	Content *string `json:"content,omitempty"`
	Drive   struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"drive"`
	MarkPostMortemAsPublished *bool `json:"mark_post_mortem_as_published,omitempty"`
	ParentFolder              *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_folder,omitempty"`

	// PostMortemTemplateId Retrospective template to use when creating page, if desired
	PostMortemTemplateId *string `json:"post_mortem_template_id,omitempty"`
	Site                 struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"site"`
	TaskType *CreateSharepointPageTaskParamsTaskType `json:"task_type,omitempty"`

	// TemplateId The SharePoint file ID to use as a template
	TemplateId *string `json:"template_id,omitempty"`

	// Title The page title
	Title string `json:"title"`
}

// CreateSharepointPageTaskParamsTaskType defines model for CreateSharepointPageTaskParams.TaskType.
type CreateSharepointPageTaskParamsTaskType string

// CreateShortcutStoryTaskParams defines model for create_shortcut_story_task_params.
type CreateShortcutStoryTaskParams struct {
	// Archivation The archivation id and display name
	Archivation struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"archivation"`

	// Description The incident description
	Description *string `json:"description,omitempty"`

	// DueDate The due date
	DueDate *string                           `json:"due_date,omitempty"`
	Kind    CreateShortcutStoryTaskParamsKind `json:"kind"`

	// Labels The story labels
	Labels *string `json:"labels,omitempty"`

	// Project The project id and display name
	Project struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"project"`
	TaskType *CreateShortcutStoryTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The incident title
	Title string `json:"title"`
}

// CreateShortcutStoryTaskParamsKind defines model for CreateShortcutStoryTaskParams.Kind.
type CreateShortcutStoryTaskParamsKind string

// CreateShortcutStoryTaskParamsTaskType defines model for CreateShortcutStoryTaskParams.TaskType.
type CreateShortcutStoryTaskParamsTaskType string

// CreateShortcutTaskTaskParams defines model for create_shortcut_task_task_params.
type CreateShortcutTaskTaskParams struct {
	// Completion The completion id and display name
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// Description The task description
	Description string `json:"description"`

	// ParentStoryId The parent story
	ParentStoryId string                                `json:"parent_story_id"`
	TaskType      *CreateShortcutTaskTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateShortcutTaskTaskParamsTaskType defines model for CreateShortcutTaskTaskParams.TaskType.
type CreateShortcutTaskTaskParamsTaskType string

// CreateSlackChannelTaskParams defines model for create_slack_channel_task_params.
type CreateSlackChannelTaskParams struct {
	Private  *CreateSlackChannelTaskParamsPrivate  `json:"private,omitempty"`
	TaskType *CreateSlackChannelTaskParamsTaskType `json:"task_type,omitempty"`

	// Title Slack channel title
	Title     string `json:"title"`
	Workspace struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"workspace"`
}

// CreateSlackChannelTaskParamsPrivate defines model for CreateSlackChannelTaskParams.Private.
type CreateSlackChannelTaskParamsPrivate string

// CreateSlackChannelTaskParamsTaskType defines model for CreateSlackChannelTaskParams.TaskType.
type CreateSlackChannelTaskParamsTaskType string

// CreateTrelloCardTaskParams defines model for create_trello_card_task_params.
type CreateTrelloCardTaskParams struct {
	// Archivation The archivation id and display name
	Archivation *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"archivation,omitempty"`

	// Board The board id and display name
	Board struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"board"`

	// Description The card description
	Description *string `json:"description,omitempty"`

	// DueDate The due date
	DueDate *string `json:"due_date,omitempty"`
	Labels  *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"labels,omitempty"`

	// List The list id and display name
	List struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"list"`
	TaskType *CreateTrelloCardTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The card title
	Title string `json:"title"`
}

// CreateTrelloCardTaskParamsTaskType defines model for CreateTrelloCardTaskParams.TaskType.
type CreateTrelloCardTaskParamsTaskType string

// CreateWebexMeetingTaskParams defines model for create_webex_meeting_task_params.
type CreateWebexMeetingTaskParams struct {
	// Password The meeting password
	Password               *string `json:"password,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// RecordMeeting Rootly AI will record the meeting and automatically generate a transcript and summary from your meeting
	RecordMeeting *bool                                 `json:"record_meeting,omitempty"`
	TaskType      *CreateWebexMeetingTaskParamsTaskType `json:"task_type,omitempty"`

	// Topic The meeting topic
	Topic string `json:"topic"`
}

// CreateWebexMeetingTaskParamsTaskType defines model for CreateWebexMeetingTaskParams.TaskType.
type CreateWebexMeetingTaskParamsTaskType string

// CreateZendeskJiraLinkTaskParams defines model for create_zendesk_jira_link_task_params.
type CreateZendeskJiraLinkTaskParams struct {
	// JiraIssueId Jira Issue Id.
	JiraIssueId string `json:"jira_issue_id"`

	// JiraIssueKey Jira Issue Key.
	JiraIssueKey string                                   `json:"jira_issue_key"`
	TaskType     *CreateZendeskJiraLinkTaskParamsTaskType `json:"task_type,omitempty"`

	// ZendeskTicketId Zendesk Ticket Id.
	ZendeskTicketId string `json:"zendesk_ticket_id"`
}

// CreateZendeskJiraLinkTaskParamsTaskType defines model for CreateZendeskJiraLinkTaskParams.TaskType.
type CreateZendeskJiraLinkTaskParamsTaskType string

// CreateZendeskTicketTaskParams defines model for create_zendesk_ticket_task_params.
type CreateZendeskTicketTaskParams struct {
	// Comment The ticket comment
	Comment *string `json:"comment,omitempty"`

	// Completion The completion id and display name
	Completion *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion,omitempty"`

	// CustomFieldsMapping Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string                           `json:"custom_fields_mapping"`
	Kind                CreateZendeskTicketTaskParamsKind `json:"kind"`

	// Priority The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// Subject The ticket subject
	Subject string `json:"subject"`

	// Tags The ticket tags
	Tags     *string                                `json:"tags,omitempty"`
	TaskType *CreateZendeskTicketTaskParamsTaskType `json:"task_type,omitempty"`

	// TicketPayload Additional Zendesk ticket attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON
	TicketPayload *string `json:"ticket_payload"`
}

// CreateZendeskTicketTaskParamsKind defines model for CreateZendeskTicketTaskParams.Kind.
type CreateZendeskTicketTaskParamsKind string

// CreateZendeskTicketTaskParamsTaskType defines model for CreateZendeskTicketTaskParams.TaskType.
type CreateZendeskTicketTaskParamsTaskType string

// CreateZoomMeetingTaskParams defines model for create_zoom_meeting_task_params.
type CreateZoomMeetingTaskParams struct {
	AlternativeHosts *[]string                                 `json:"alternative_hosts,omitempty"`
	AutoRecording    *CreateZoomMeetingTaskParamsAutoRecording `json:"auto_recording,omitempty"`

	// CreateAsEmail The email to use if creating as email
	CreateAsEmail *string `json:"create_as_email,omitempty"`

	// Password The meeting password
	Password               *string `json:"password,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// RecordMeeting Rootly AI will record the meeting and automatically generate a transcript and summary from your meeting
	RecordMeeting *bool                                `json:"record_meeting,omitempty"`
	TaskType      *CreateZoomMeetingTaskParamsTaskType `json:"task_type,omitempty"`

	// Topic The meeting topic
	Topic string `json:"topic"`
}

// CreateZoomMeetingTaskParamsAutoRecording defines model for CreateZoomMeetingTaskParams.AutoRecording.
type CreateZoomMeetingTaskParamsAutoRecording string

// CreateZoomMeetingTaskParamsTaskType defines model for CreateZoomMeetingTaskParams.TaskType.
type CreateZoomMeetingTaskParamsTaskType string

// CustomField defines model for custom_field.
type CustomField struct {
	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Default The default value for text field kinds
	Default *string `json:"default"`

	// Description The description of the custom_field
	Description *string `json:"description"`

	// Enabled Whether the custom_field is enabled
	Enabled *bool `json:"enabled,omitempty"`

	// Kind The kind of the custom_field
	Kind *string `json:"kind,omitempty"`

	// Label The name of the custom_field
	Label string `json:"label"`

	// Position The position of the custom_field
	Position int                    `json:"position"`
	Required *[]CustomFieldRequired `json:"required"`
	Shown    []CustomFieldShown     `json:"shown"`

	// Slug The slug of the custom_field
	Slug string `json:"slug"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// CustomFieldRequired Where the custom_field is required
type CustomFieldRequired string

// CustomFieldShown Where the custom_field is shown
type CustomFieldShown string

// CustomFieldList defines model for custom_field_list.
type CustomFieldList struct {
	Data []struct {
		Attributes CustomField `json:"attributes"`

		// Id Unique ID of the custom_field
		Id   string                  `json:"id"`
		Type CustomFieldListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// CustomFieldListDataType defines model for CustomFieldList.Data.Type.
type CustomFieldListDataType string

// CustomFieldOption defines model for custom_field_option.
type CustomFieldOption struct {
	// Color The hex color of the custom_field_option
	Color string `json:"color"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// CustomFieldId The ID of the parent custom field
	CustomFieldId *int  `json:"custom_field_id,omitempty"`
	Default       *bool `json:"default,omitempty"`

	// Position The position of the custom_field_option
	Position int `json:"position"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`

	// Value The value of the custom_field_option
	Value string `json:"value"`
}

// CustomFieldOptionList defines model for custom_field_option_list.
type CustomFieldOptionList struct {
	Data []struct {
		Attributes CustomFieldOption `json:"attributes"`

		// Id Unique ID of the custom_field_option
		Id   string                        `json:"id"`
		Type CustomFieldOptionListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// CustomFieldOptionListDataType defines model for CustomFieldOptionList.Data.Type.
type CustomFieldOptionListDataType string

// CustomFieldOptionResponse defines model for custom_field_option_response.
type CustomFieldOptionResponse struct {
	Data struct {
		Attributes CustomFieldOption `json:"attributes"`

		// Id Unique ID of the custom_field_option
		Id   string                            `json:"id"`
		Type CustomFieldOptionResponseDataType `json:"type"`
	} `json:"data"`
}

// CustomFieldOptionResponseDataType defines model for CustomFieldOptionResponse.Data.Type.
type CustomFieldOptionResponseDataType string

// CustomFieldResponse defines model for custom_field_response.
type CustomFieldResponse struct {
	Data struct {
		Attributes CustomField `json:"attributes"`

		// Id Unique ID of the custom_field
		Id   string                      `json:"id"`
		Type CustomFieldResponseDataType `json:"type"`
	} `json:"data"`
}

// CustomFieldResponseDataType defines model for CustomFieldResponse.Data.Type.
type CustomFieldResponseDataType string

// CustomForm defines model for custom_form.
type CustomForm struct {
	// Command The Slack command used to trigger this form.
	Command string `json:"command"`

	// CreatedAt Date of creation.
	CreatedAt   string  `json:"created_at"`
	Description *string `json:"description"`
	Enabled     bool    `json:"enabled"`

	// Name The name of the custom form.
	Name string `json:"name"`

	// Slug The custom form slug. Add this to form_field.shown or form_field.required to associate form fields with custom forms.
	Slug string `json:"slug"`

	// UpdatedAt Date of last update.
	UpdatedAt string `json:"updated_at"`
}

// CustomFormList defines model for custom_form_list.
type CustomFormList struct {
	Data []struct {
		Attributes CustomForm `json:"attributes"`

		// Id Unique id of the custom form.
		Id   string                 `json:"id"`
		Type CustomFormListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// CustomFormListDataType defines model for CustomFormList.Data.Type.
type CustomFormListDataType string

// CustomFormResponse defines model for custom_form_response.
type CustomFormResponse struct {
	Data struct {
		Attributes CustomForm `json:"attributes"`

		// Id Unique id of the custom form.
		Id   string                     `json:"id"`
		Type CustomFormResponseDataType `json:"type"`
	} `json:"data"`
}

// CustomFormResponseDataType defines model for CustomFormResponse.Data.Type.
type CustomFormResponseDataType string

// Dashboard defines model for dashboard.
type Dashboard struct {
	// AutoRefresh Whether the dashboard auto-updates the UI with new data.
	AutoRefresh *bool `json:"auto_refresh,omitempty"`

	// Color The hex color of the dashboard
	Color *DashboardColor `json:"color"`

	// CreatedAt Date of creation
	CreatedAt *string `json:"created_at,omitempty"`

	// Description The description of the dashboard
	Description *string `json:"description"`

	// Icon The emoji icon of the dashboard
	Icon *string `json:"icon,omitempty"`

	// Name The name of the dashboard
	Name string `json:"name"`

	// Owner The owner type of the dashboard
	Owner DashboardOwner `json:"owner"`

	// Period The grouping period for dashboard panel data
	Period *string `json:"period"`

	// Public Whether the dashboard is public
	Public bool `json:"public"`

	// Range The date range for dashboard panel data
	Range *string `json:"range"`

	// TeamId The dashboard team
	TeamId *int `json:"team_id,omitempty"`

	// UpdatedAt Date of last update
	UpdatedAt *string `json:"updated_at,omitempty"`

	// UserId The dashboard user owner if owner is of type user
	UserId *int `json:"user_id"`
}

// DashboardColor The hex color of the dashboard
type DashboardColor string

// DashboardOwner The owner type of the dashboard
type DashboardOwner string

// DashboardList defines model for dashboard_list.
type DashboardList struct {
	Data []struct {
		Attributes Dashboard `json:"attributes"`

		// Id Unique ID of the dashboard
		Id   string                `json:"id"`
		Type DashboardListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// DashboardListDataType defines model for DashboardList.Data.Type.
type DashboardListDataType string

// DashboardResponse defines model for dashboard_response.
type DashboardResponse struct {
	Data struct {
		Attributes Dashboard `json:"attributes"`

		// Id Unique ID of the dashboard
		Id   string                    `json:"id"`
		Type DashboardResponseDataType `json:"type"`
	} `json:"data"`
}

// DashboardResponseDataType defines model for DashboardResponse.Data.Type.
type DashboardResponseDataType string

// Environment defines model for environment.
type Environment struct {
	// Color The hex color of the environment
	Color *string `json:"color"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Description The description of the environment
	Description *string `json:"description"`

	// Name The name of the environment
	Name string `json:"name"`

	// NotifyEmails Emails attached to the environment
	NotifyEmails *[]string `json:"notify_emails"`

	// Position Position of the environment
	Position *int `json:"position"`

	// SlackAliases Slack Aliases associated with this environment
	SlackAliases *[]struct {
		// Id Slack alias ID
		Id string `json:"id"`

		// Name Slack alias name
		Name string `json:"name"`
	} `json:"slack_aliases"`

	// SlackChannels Slack Channels associated with this environment
	SlackChannels *[]struct {
		// Id Slack channel ID
		Id string `json:"id"`

		// Name Slack channel name
		Name string `json:"name"`
	} `json:"slack_channels"`

	// Slug The slug of the environment
	Slug *string `json:"slug,omitempty"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// EnvironmentList defines model for environment_list.
type EnvironmentList struct {
	Data []struct {
		Attributes Environment `json:"attributes"`

		// Id Unique ID of the environment
		Id   string                  `json:"id"`
		Type EnvironmentListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// EnvironmentListDataType defines model for EnvironmentList.Data.Type.
type EnvironmentListDataType string

// EnvironmentResponse defines model for environment_response.
type EnvironmentResponse struct {
	Data struct {
		Attributes Environment `json:"attributes"`

		// Id Unique ID of the environment
		Id   string                      `json:"id"`
		Type EnvironmentResponseDataType `json:"type"`
	} `json:"data"`
}

// EnvironmentResponseDataType defines model for EnvironmentResponse.Data.Type.
type EnvironmentResponseDataType string

// ErrorsList defines model for errors_list.
type ErrorsList struct {
	Errors *[]struct {
		Code   *string `json:"code"`
		Detail *string `json:"detail"`
		Status string  `json:"status"`
		Title  string  `json:"title"`
	} `json:"errors,omitempty"`
}

// EscalationLevel defines model for escalation_level.
type EscalationLevel struct {
	// CreatedAt Date of creation
	CreatedAt *string `json:"created_at,omitempty"`

	// Delay Delay before notification targets will be alerted.
	Delay int `json:"delay"`

	// EscalationPathId The ID of the dynamic escalation policy path the level will belong to. If nothing is specified it will add the level to your default path.
	EscalationPathId *string `json:"escalation_path_id"`

	// EscalationPolicyId The ID of the escalation policy
	EscalationPolicyId string `json:"escalation_policy_id"`

	// NotificationTargetParams Escalation level's notification targets
	NotificationTargetParams []struct {
		// Id The ID of notification target
		Id string `json:"id"`

		// Type The type of the notification target
		Type EscalationLevelNotificationTargetParamsType `json:"type"`
	} `json:"notification_target_params"`

	// Position Position of the escalation policy level
	Position int `json:"position"`

	// UpdatedAt Date of last update
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// EscalationLevelNotificationTargetParamsType The type of the notification target
type EscalationLevelNotificationTargetParamsType string

// EscalationLevelList defines model for escalation_level_list.
type EscalationLevelList struct {
	Data []struct {
		Attributes EscalationLevel `json:"attributes"`

		// Id Unique ID of the escalation policy level
		Id string `json:"id"`
	} `json:"data"`
	Links Links `json:"links"`
}

// EscalationLevelResponse defines model for escalation_level_response.
type EscalationLevelResponse struct {
	Data struct {
		Attributes EscalationLevel `json:"attributes"`

		// Id Unique ID of the escalation policy level
		Id   string                           `json:"id"`
		Type *EscalationLevelResponseDataType `json:"type,omitempty"`
	} `json:"data"`
}

// EscalationLevelResponseDataType defines model for EscalationLevelResponse.Data.Type.
type EscalationLevelResponseDataType string

// EscalationPath defines model for escalation_path.
type EscalationPath struct {
	// CreatedAt Date of creation
	CreatedAt *string `json:"created_at,omitempty"`

	// Default Whether this escalation path is the default path
	Default bool `json:"default"`

	// EscalationPolicyId The ID of the escalation policy
	EscalationPolicyId string `json:"escalation_policy_id"`

	// Name The name of the escalation path
	Name string `json:"name"`

	// NotificationType Notification rule type
	NotificationType string `json:"notification_type"`

	// Repeat Whether this path should be repeated until someone acknowledges the alert
	Repeat *bool `json:"repeat"`

	// RepeatCount The number of times this path will be executed until someone acknowledges the alert
	RepeatCount *int `json:"repeat_count"`

	// Rules Escalation path rules
	Rules *[]struct {
		// JsonPath JSON path to extract value from payload
		JsonPath *string `json:"json_path,omitempty"`

		// Operator How JSON path value should be matched
		Operator *EscalationPathRulesOperator `json:"operator,omitempty"`

		// RuleType The type of the escalation path rule
		RuleType *EscalationPathRulesRuleType `json:"rule_type,omitempty"`

		// UrgencyIds Alert urgency ids for which this escalation path should be used
		UrgencyIds *[]string `json:"urgency_ids,omitempty"`

		// Value Value with which JSON path value should be matched
		Value *string `json:"value,omitempty"`

		// WithinWorkingHour Whether the escalation path should be used within working hours
		WithinWorkingHour *bool `json:"within_working_hour,omitempty"`
	} `json:"rules,omitempty"`

	// UpdatedAt Date of last update
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// EscalationPathRulesOperator How JSON path value should be matched
type EscalationPathRulesOperator string

// EscalationPathRulesRuleType The type of the escalation path rule
type EscalationPathRulesRuleType string

// EscalationPathList defines model for escalation_path_list.
type EscalationPathList struct {
	Data []struct {
		Attributes EscalationPath `json:"attributes"`

		// Id Unique ID of the escalation policy path
		Id string `json:"id"`
	} `json:"data"`
	Links Links `json:"links"`
}

// EscalationPathResponse defines model for escalation_path_response.
type EscalationPathResponse struct {
	Data struct {
		Attributes EscalationPath `json:"attributes"`

		// Id Unique ID of the escalation policy path
		Id   string                          `json:"id"`
		Type *EscalationPathResponseDataType `json:"type,omitempty"`
	} `json:"data"`
}

// EscalationPathResponseDataType defines model for EscalationPathResponse.Data.Type.
type EscalationPathResponseDataType string

// EscalationPolicy defines model for escalation_policy.
type EscalationPolicy struct {
	// CreatedAt Date of creation
	CreatedAt *string `json:"created_at,omitempty"`

	// CreatedByUserId User who created the escalation policy
	CreatedByUserId int `json:"created_by_user_id"`

	// Description The description of the escalation policy
	Description *string `json:"description"`

	// GroupIds Associated groups (alerting the group will trigger escalation policy)
	GroupIds *[]string `json:"group_ids,omitempty"`

	// LastUpdatedByUserId User who updated the escalation policy
	LastUpdatedByUserId *int `json:"last_updated_by_user_id,omitempty"`

	// Name The name of the escalation policy
	Name string `json:"name"`

	// RepeatCount The number of times this policy will be executed until someone acknowledges the alert
	RepeatCount int `json:"repeat_count"`

	// ServiceIds Associated services (alerting the service will trigger escalation policy)
	ServiceIds *[]string `json:"service_ids,omitempty"`

	// UpdatedAt Date of last update
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// EscalationPolicyList defines model for escalation_policy_list.
type EscalationPolicyList struct {
	Data []struct {
		Attributes EscalationPolicy `json:"attributes"`

		// Id Unique ID of the escalation policy
		Id   string                       `json:"id"`
		Type EscalationPolicyListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// EscalationPolicyListDataType defines model for EscalationPolicyList.Data.Type.
type EscalationPolicyListDataType string

// EscalationPolicyResponse defines model for escalation_policy_response.
type EscalationPolicyResponse struct {
	Data struct {
		Attributes EscalationPolicy `json:"attributes"`

		// Id Unique ID of the escalation policy
		Id   string                           `json:"id"`
		Type EscalationPolicyResponseDataType `json:"type"`
	} `json:"data"`
}

// EscalationPolicyResponseDataType defines model for EscalationPolicyResponse.Data.Type.
type EscalationPolicyResponseDataType string

// FormField defines model for form_field.
type FormField struct {
	// CreatedAt Date of creation
	CreatedAt     string   `json:"created_at"`
	DefaultValues []string `json:"default_values"`

	// Description The description of the form field
	Description *string `json:"description"`

	// Enabled Whether the form field is enabled
	Enabled *bool `json:"enabled,omitempty"`

	// InputKind The input kind of the form field
	InputKind FormFieldInputKind `json:"input_kind"`

	// Kind The kind of the form field
	Kind FormFieldKind `json:"kind"`

	// Name The name of the form field
	Name     string   `json:"name"`
	Required []string `json:"required"`

	// ShowOnIncidentDetails Whether the form field is shown on the incident details panel
	ShowOnIncidentDetails *bool    `json:"show_on_incident_details,omitempty"`
	Shown                 []string `json:"shown"`

	// Slug The slug of the form field
	Slug string `json:"slug"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`

	// ValueKind The value kind of the form field
	ValueKind FormFieldValueKind `json:"value_kind"`

	// ValueKindCatalogId The ID of the catalog used when value_kind is `catalog_entity`
	ValueKindCatalogId *string `json:"value_kind_catalog_id"`
}

// FormFieldInputKind The input kind of the form field
type FormFieldInputKind string

// FormFieldKind The kind of the form field
type FormFieldKind string

// FormFieldValueKind The value kind of the form field
type FormFieldValueKind string

// FormFieldList defines model for form_field_list.
type FormFieldList struct {
	Data []struct {
		Attributes FormField `json:"attributes"`

		// Id Unique ID of the form field
		Id   string                `json:"id"`
		Type FormFieldListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// FormFieldListDataType defines model for FormFieldList.Data.Type.
type FormFieldListDataType string

// FormFieldOption defines model for form_field_option.
type FormFieldOption struct {
	// Color The hex color of the form_field_option
	Color string `json:"color"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`
	Default   *bool  `json:"default,omitempty"`

	// FormFieldId The ID of the parent custom field
	FormFieldId *string `json:"form_field_id,omitempty"`

	// Position The position of the form_field_option
	Position int `json:"position"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`

	// Value The value of the form_field_option
	Value string `json:"value"`
}

// FormFieldOptionList defines model for form_field_option_list.
type FormFieldOptionList struct {
	Data []struct {
		Attributes FormFieldOption `json:"attributes"`

		// Id Unique ID of the form_field_option
		Id   string                      `json:"id"`
		Type FormFieldOptionListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// FormFieldOptionListDataType defines model for FormFieldOptionList.Data.Type.
type FormFieldOptionListDataType string

// FormFieldOptionResponse defines model for form_field_option_response.
type FormFieldOptionResponse struct {
	Data struct {
		Attributes FormFieldOption `json:"attributes"`

		// Id Unique ID of the form_field_option
		Id   string                          `json:"id"`
		Type FormFieldOptionResponseDataType `json:"type"`
	} `json:"data"`
}

// FormFieldOptionResponseDataType defines model for FormFieldOptionResponse.Data.Type.
type FormFieldOptionResponseDataType string

// FormFieldPlacement defines model for form_field_placement.
type FormFieldPlacement struct {
	// Form The form this field is placed on.
	Form string `json:"form"`

	// FormFieldId The form field that is placed.
	FormFieldId string `json:"form_field_id"`

	// FormSetId The form set this field is placed in.
	FormSetId string `json:"form_set_id"`

	// PlacementOperator Logical operator when evaluating multiple form_field_placement_conditions with conditioned=placement
	PlacementOperator *FormFieldPlacementPlacementOperator `json:"placement_operator,omitempty"`

	// Position The position of the field placement.
	Position int `json:"position"`

	// Required Whether the field is unconditionally required on this form.
	Required bool `json:"required"`

	// RequiredOperator Logical operator when evaluating multiple form_field_placement_conditions with conditioned=required
	RequiredOperator *FormFieldPlacementRequiredOperator `json:"required_operator,omitempty"`
}

// FormFieldPlacementPlacementOperator Logical operator when evaluating multiple form_field_placement_conditions with conditioned=placement
type FormFieldPlacementPlacementOperator string

// FormFieldPlacementRequiredOperator Logical operator when evaluating multiple form_field_placement_conditions with conditioned=required
type FormFieldPlacementRequiredOperator string

// FormFieldPlacementCondition defines model for form_field_placement_condition.
type FormFieldPlacementCondition struct {
	// Comparison The condition comparison.
	Comparison FormFieldPlacementConditionComparison `json:"comparison"`

	// Conditioned The resource or attribute the condition applies.
	Conditioned FormFieldPlacementConditionConditioned `json:"conditioned"`

	// FormFieldId The condition field.
	FormFieldId string `json:"form_field_id"`

	// FormFieldPlacementId The form field placement this condition applies.
	FormFieldPlacementId string `json:"form_field_placement_id"`

	// Position The condition position.
	Position int `json:"position"`

	// Values The values for comparison.
	Values []string `json:"values"`
}

// FormFieldPlacementConditionComparison The condition comparison.
type FormFieldPlacementConditionComparison string

// FormFieldPlacementConditionConditioned The resource or attribute the condition applies.
type FormFieldPlacementConditionConditioned string

// FormFieldPlacementConditionList defines model for form_field_placement_condition_list.
type FormFieldPlacementConditionList struct {
	Data []struct {
		Attributes FormFieldPlacementCondition `json:"attributes"`

		// Id Unique ID of the form set condition
		Id   string                                  `json:"id"`
		Type FormFieldPlacementConditionListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// FormFieldPlacementConditionListDataType defines model for FormFieldPlacementConditionList.Data.Type.
type FormFieldPlacementConditionListDataType string

// FormFieldPlacementConditionResponse defines model for form_field_placement_condition_response.
type FormFieldPlacementConditionResponse struct {
	Data struct {
		Attributes FormFieldPlacementCondition `json:"attributes"`

		// Id Unique ID of the form set condition
		Id   string                                      `json:"id"`
		Type FormFieldPlacementConditionResponseDataType `json:"type"`
	} `json:"data"`
}

// FormFieldPlacementConditionResponseDataType defines model for FormFieldPlacementConditionResponse.Data.Type.
type FormFieldPlacementConditionResponseDataType string

// FormFieldPlacementList defines model for form_field_placement_list.
type FormFieldPlacementList struct {
	Data []struct {
		Attributes FormFieldPlacement `json:"attributes"`

		// Id Unique ID of the form field placement
		Id   string                         `json:"id"`
		Type FormFieldPlacementListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// FormFieldPlacementListDataType defines model for FormFieldPlacementList.Data.Type.
type FormFieldPlacementListDataType string

// FormFieldPlacementResponse defines model for form_field_placement_response.
type FormFieldPlacementResponse struct {
	Data struct {
		Attributes FormFieldPlacement `json:"attributes"`

		// Id Unique ID of the form field placement
		Id   string                             `json:"id"`
		Type FormFieldPlacementResponseDataType `json:"type"`
	} `json:"data"`
}

// FormFieldPlacementResponseDataType defines model for FormFieldPlacementResponse.Data.Type.
type FormFieldPlacementResponseDataType string

// FormFieldPosition defines model for form_field_position.
type FormFieldPosition struct {
	// Form The form for the position
	Form FormFieldPositionForm `json:"form"`

	// FormFieldId The ID of the form field.
	FormFieldId string `json:"form_field_id"`

	// Position The position of the form_field_position
	Position int `json:"position"`
}

// FormFieldPositionForm The form for the position
type FormFieldPositionForm string

// FormFieldPositionList defines model for form_field_position_list.
type FormFieldPositionList struct {
	Data []struct {
		Attributes FormFieldPosition `json:"attributes"`

		// Id Unique ID of the form_field_position
		Id   string                        `json:"id"`
		Type FormFieldPositionListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// FormFieldPositionListDataType defines model for FormFieldPositionList.Data.Type.
type FormFieldPositionListDataType string

// FormFieldPositionResponse defines model for form_field_position_response.
type FormFieldPositionResponse struct {
	Data struct {
		Attributes FormFieldPosition `json:"attributes"`

		// Id Unique ID of the form_field_position
		Id   string                            `json:"id"`
		Type FormFieldPositionResponseDataType `json:"type"`
	} `json:"data"`
}

// FormFieldPositionResponseDataType defines model for FormFieldPositionResponse.Data.Type.
type FormFieldPositionResponseDataType string

// FormFieldResponse defines model for form_field_response.
type FormFieldResponse struct {
	Data struct {
		Attributes FormField `json:"attributes"`

		// Id Unique ID of the form field
		Id   string                    `json:"id"`
		Type FormFieldResponseDataType `json:"type"`
	} `json:"data"`
}

// FormFieldResponseDataType defines model for FormFieldResponse.Data.Type.
type FormFieldResponseDataType string

// FormSet defines model for form_set.
type FormSet struct {
	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Forms The forms included in the form set. Add custom forms using the custom form's `slug` field. Or choose a built-in form: `web_new_incident_form`, `web_update_incident_form`, `web_incident_post_mortem_form`, `web_incident_mitigation_form`, `web_incident_resolution_form`, `web_incident_cancellation_form`, `web_scheduled_incident_form`, `web_update_scheduled_incident_form`, `slack_new_incident_form`, `slack_update_incident_form`, `slack_update_incident_status_form`, `slack_incident_mitigation_form`, `slack_incident_resolution_form`, `slack_incident_cancellation_form`, `slack_scheduled_incident_form`, `slack_update_scheduled_incident_form`
	Forms []string `json:"forms"`

	// IsDefault Whether the form set is default
	IsDefault bool `json:"is_default"`

	// Name The name of the form set
	Name string `json:"name"`

	// Slug The slug of the form set
	Slug string `json:"slug"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// FormSetCondition defines model for form_set_condition.
type FormSetCondition struct {
	// Comparison The condition comparison.
	Comparison FormSetConditionComparison `json:"comparison"`

	// FormFieldId The form field this condition applies.
	FormFieldId string `json:"form_field_id"`

	// FormSetId The form set this condition applies.
	FormSetId string `json:"form_set_id"`

	// Values The values for comparison.
	Values []string `json:"values"`
}

// FormSetConditionComparison The condition comparison.
type FormSetConditionComparison string

// FormSetConditionList defines model for form_set_condition_list.
type FormSetConditionList struct {
	Data []struct {
		Attributes FormSetCondition `json:"attributes"`

		// Id Unique ID of the form set condition
		Id   string                       `json:"id"`
		Type FormSetConditionListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// FormSetConditionListDataType defines model for FormSetConditionList.Data.Type.
type FormSetConditionListDataType string

// FormSetConditionResponse defines model for form_set_condition_response.
type FormSetConditionResponse struct {
	Data struct {
		Attributes FormSetCondition `json:"attributes"`

		// Id Unique ID of the form set condition
		Id   string                           `json:"id"`
		Type FormSetConditionResponseDataType `json:"type"`
	} `json:"data"`
}

// FormSetConditionResponseDataType defines model for FormSetConditionResponse.Data.Type.
type FormSetConditionResponseDataType string

// FormSetList defines model for form_set_list.
type FormSetList struct {
	Data []struct {
		Attributes FormSet `json:"attributes"`

		// Id Unique ID of the form set
		Id   string              `json:"id"`
		Type FormSetListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// FormSetListDataType defines model for FormSetList.Data.Type.
type FormSetListDataType string

// FormSetResponse defines model for form_set_response.
type FormSetResponse struct {
	Data struct {
		Attributes FormSet `json:"attributes"`

		// Id Unique ID of the form set
		Id   string                  `json:"id"`
		Type FormSetResponseDataType `json:"type"`
	} `json:"data"`
}

// FormSetResponseDataType defines model for FormSetResponse.Data.Type.
type FormSetResponseDataType string

// Functionality defines model for functionality.
type Functionality struct {
	// BackstageId The Backstage entity id associated to this functionality. eg: :namespace/:kind/:entity_name
	BackstageId *string `json:"backstage_id"`

	// Color The hex color of the functionality
	Color *string `json:"color"`

	// CortexId The Cortex group id associated to this functionality
	CortexId *string `json:"cortex_id"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Description The description of the functionality
	Description *string `json:"description"`

	// EnvironmentIds Environments associated with this functionality
	EnvironmentIds *[]string `json:"environment_ids"`

	// ExternalId The external id associated to this functionality
	ExternalId *string `json:"external_id"`

	// Name The name of the functionality
	Name string `json:"name"`

	// NotifyEmails Emails attached to the functionality
	NotifyEmails *[]string `json:"notify_emails"`

	// OpsgenieId The Opsgenie service id associated to this functionality
	OpsgenieId *string `json:"opsgenie_id"`

	// OpsgenieTeamId The Opsgenie team id associated to this functionality
	OpsgenieTeamId *string `json:"opsgenie_team_id"`

	// OwnersGroupIds Owner Teams associated with this functionality
	OwnersGroupIds *[]string `json:"owners_group_ids"`

	// OwnersUserIds Owner Users associated with this functionality
	OwnersUserIds *[]int `json:"owners_user_ids"`

	// PagerdutyId The PagerDuty service id associated to this functionality
	PagerdutyId *string `json:"pagerduty_id"`

	// Position Position of the functionality
	Position *int `json:"position"`

	// PublicDescription The public description of the functionality
	PublicDescription *string `json:"public_description"`

	// ServiceIds Services associated with this functionality
	ServiceIds *[]string `json:"service_ids"`

	// ServiceNowCiSysId The Service Now CI sys id associated to this functionality
	ServiceNowCiSysId *string `json:"service_now_ci_sys_id"`

	// SlackAliases Slack Aliases associated with this functionality
	SlackAliases *[]struct {
		// Id Slack alias ID
		Id string `json:"id"`

		// Name Slack alias name
		Name string `json:"name"`
	} `json:"slack_aliases"`

	// SlackChannels Slack Channels associated with this functionality
	SlackChannels *[]struct {
		// Id Slack channel ID
		Id string `json:"id"`

		// Name Slack channel name
		Name string `json:"name"`
	} `json:"slack_channels"`

	// Slug The slug of the functionality
	Slug *string `json:"slug,omitempty"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// FunctionalityList defines model for functionality_list.
type FunctionalityList struct {
	Data []struct {
		Attributes Functionality `json:"attributes"`

		// Id Unique ID of the functionality
		Id   string                    `json:"id"`
		Type FunctionalityListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// FunctionalityListDataType defines model for FunctionalityList.Data.Type.
type FunctionalityListDataType string

// FunctionalityResponse defines model for functionality_response.
type FunctionalityResponse struct {
	Data struct {
		Attributes Functionality `json:"attributes"`

		// Id Unique ID of the functionality
		Id   string                        `json:"id"`
		Type FunctionalityResponseDataType `json:"type"`
	} `json:"data"`
}

// FunctionalityResponseDataType defines model for FunctionalityResponse.Data.Type.
type FunctionalityResponseDataType string

// GetAlertsTaskParams defines model for get_alerts_task_params.
type GetAlertsTaskParams struct {
	EnvironmentIds                 *[]string `json:"environment_ids,omitempty"`
	EnvironmentsImpactedByIncident *bool     `json:"environments_impacted_by_incident,omitempty"`
	Labels                         *[]string `json:"labels,omitempty"`

	// ParentMessageThreadTask A hash where [id] is the task id of the parent task that sent a message, and [name] is the name of the parent task
	ParentMessageThreadTask *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_message_thread_task,omitempty"`

	// PastDuration How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)
	PastDuration           string `json:"past_duration"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	ServiceIds                 *[]string                    `json:"service_ids,omitempty"`
	ServicesImpactedByIncident *bool                        `json:"services_impacted_by_incident,omitempty"`
	Sources                    *[]string                    `json:"sources,omitempty"`
	TaskType                   *GetAlertsTaskParamsTaskType `json:"task_type,omitempty"`
}

// GetAlertsTaskParamsTaskType defines model for GetAlertsTaskParams.TaskType.
type GetAlertsTaskParamsTaskType string

// GetGithubCommitsTaskParams defines model for get_github_commits_task_params.
type GetGithubCommitsTaskParams struct {
	// Branch The branch
	Branch                string    `json:"branch"`
	GithubRepositoryNames *[]string `json:"github_repository_names,omitempty"`

	// PastDuration How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)
	PastDuration           string `json:"past_duration"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	ServiceIds                 *[]string                           `json:"service_ids,omitempty"`
	ServicesImpactedByIncident *bool                               `json:"services_impacted_by_incident,omitempty"`
	TaskType                   *GetGithubCommitsTaskParamsTaskType `json:"task_type,omitempty"`
	union                      json.RawMessage
}

// GetGithubCommitsTaskParamsTaskType defines model for GetGithubCommitsTaskParams.TaskType.
type GetGithubCommitsTaskParamsTaskType string

// GetGithubCommitsTaskParams0 defines model for .
type GetGithubCommitsTaskParams0 = interface{}

// GetGithubCommitsTaskParams1 defines model for .
type GetGithubCommitsTaskParams1 = interface{}

// GetGitlabCommitsTaskParams defines model for get_gitlab_commits_task_params.
type GetGitlabCommitsTaskParams struct {
	// Branch The branch
	Branch                string    `json:"branch"`
	GitlabRepositoryNames *[]string `json:"gitlab_repository_names,omitempty"`

	// PastDuration How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)
	PastDuration           string `json:"past_duration"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	ServiceIds                 *[]string                           `json:"service_ids,omitempty"`
	ServicesImpactedByIncident *bool                               `json:"services_impacted_by_incident,omitempty"`
	TaskType                   *GetGitlabCommitsTaskParamsTaskType `json:"task_type,omitempty"`
	union                      json.RawMessage
}

// GetGitlabCommitsTaskParamsTaskType defines model for GetGitlabCommitsTaskParams.TaskType.
type GetGitlabCommitsTaskParamsTaskType string

// GetGitlabCommitsTaskParams0 defines model for .
type GetGitlabCommitsTaskParams0 = interface{}

// GetGitlabCommitsTaskParams1 defines model for .
type GetGitlabCommitsTaskParams1 = interface{}

// GetPulsesTaskParams defines model for get_pulses_task_params.
type GetPulsesTaskParams struct {
	EnvironmentIds                 *[]string `json:"environment_ids,omitempty"`
	EnvironmentsImpactedByIncident *bool     `json:"environments_impacted_by_incident,omitempty"`
	Labels                         *[]string `json:"labels,omitempty"`

	// ParentMessageThreadTask A hash where [id] is the task id of the parent task that sent a message, and [name] is the name of the parent task
	ParentMessageThreadTask *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_message_thread_task,omitempty"`

	// PastDuration How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)
	PastDuration           string `json:"past_duration"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	Refs                       *[]string                    `json:"refs,omitempty"`
	ServiceIds                 *[]string                    `json:"service_ids,omitempty"`
	ServicesImpactedByIncident *bool                        `json:"services_impacted_by_incident,omitempty"`
	Sources                    *[]string                    `json:"sources,omitempty"`
	TaskType                   *GetPulsesTaskParamsTaskType `json:"task_type,omitempty"`
}

// GetPulsesTaskParamsTaskType defines model for GetPulsesTaskParams.TaskType.
type GetPulsesTaskParamsTaskType string

// Heartbeat defines model for heartbeat.
type Heartbeat struct {
	// AlertSummary Summary of alerts triggered when heartbeat expires.
	AlertSummary string `json:"alert_summary"`

	// AlertUrgencyId Urgency of alerts triggered when heartbeat expires.
	AlertUrgencyId *string `json:"alert_urgency_id"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Description The description of the heartbeat
	Description *string `json:"description"`

	// Enabled Whether to trigger alerts when heartbeat is expired.
	Enabled bool `json:"enabled"`

	// ExpiresAt When heartbeat expires
	ExpiresAt    *string               `json:"expires_at"`
	Interval     int                   `json:"interval"`
	IntervalUnit HeartbeatIntervalUnit `json:"interval_unit"`

	// LastPingedAt When the heartbeat was last pinged.
	LastPingedAt *string `json:"last_pinged_at"`

	// Name The name of the heartbeat
	Name                   string                          `json:"name"`
	NotificationTargetId   string                          `json:"notification_target_id"`
	NotificationTargetType HeartbeatNotificationTargetType `json:"notification_target_type"`
	Status                 HeartbeatStatus                 `json:"status"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// HeartbeatIntervalUnit defines model for Heartbeat.IntervalUnit.
type HeartbeatIntervalUnit string

// HeartbeatNotificationTargetType defines model for Heartbeat.NotificationTargetType.
type HeartbeatNotificationTargetType string

// HeartbeatStatus defines model for Heartbeat.Status.
type HeartbeatStatus string

// HeartbeatList defines model for heartbeat_list.
type HeartbeatList struct {
	Data []struct {
		Attributes Heartbeat `json:"attributes"`

		// Id Unique ID of the heartbeat
		Id   string                `json:"id"`
		Type HeartbeatListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// HeartbeatListDataType defines model for HeartbeatList.Data.Type.
type HeartbeatListDataType string

// HeartbeatResponse defines model for heartbeat_response.
type HeartbeatResponse struct {
	Data struct {
		Attributes Heartbeat `json:"attributes"`

		// Id Unique ID of the heartbeat
		Id   string                    `json:"id"`
		Type HeartbeatResponseDataType `json:"type"`
	} `json:"data"`
}

// HeartbeatResponseDataType defines model for HeartbeatResponse.Data.Type.
type HeartbeatResponseDataType string

// HttpClientTaskParams defines model for http_client_task_params.
type HttpClientTaskParams struct {
	// Body HTTP body
	Body         *string `json:"body,omitempty"`
	EventMessage *string `json:"event_message,omitempty"`
	EventUrl     *string `json:"event_url,omitempty"`

	// Headers JSON map of HTTP headers
	Headers *string `json:"headers,omitempty"`

	// Method HTTP method
	Method *HttpClientTaskParamsMethod `json:"method,omitempty"`

	// Params JSON map of HTTP query parameters
	Params                 *string `json:"params,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// SucceedOnStatus HTTP status code expected. Can be a regular expression. Eg: 200, 200|203, 20[0-3]
	SucceedOnStatus string                        `json:"succeed_on_status"`
	TaskType        *HttpClientTaskParamsTaskType `json:"task_type,omitempty"`

	// Url URL endpoint
	Url string `json:"url"`
}

// HttpClientTaskParamsMethod HTTP method
type HttpClientTaskParamsMethod string

// HttpClientTaskParamsTaskType defines model for HttpClientTaskParams.TaskType.
type HttpClientTaskParamsTaskType string

// InTriageIncident defines model for in_triage_incident.
type InTriageIncident struct {
	Data struct {
		Type InTriageIncidentDataType `json:"type"`
	} `json:"data"`
}

// InTriageIncidentDataType defines model for InTriageIncident.Data.Type.
type InTriageIncidentDataType string

// Incident defines model for incident.
type Incident struct {
	// AcknowledgedAt Date of acknowledgment
	AcknowledgedAt *string `json:"acknowledged_at"`

	// CancellationMessage Why was the incident cancelled?
	CancellationMessage *string `json:"cancellation_message"`

	// CancelledAt Date of cancellation
	CancelledAt *string `json:"cancelled_at"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// DetectedAt Date of detection
	DetectedAt *string `json:"detected_at"`

	// Environments The Environments of the incident
	Environments *[]EnvironmentResponse `json:"environments"`

	// Functionalities The Functionalities of the incident
	Functionalities *[]FunctionalityResponse `json:"functionalities"`

	// Groups The Teams of to the incident
	Groups *[]TeamResponse `json:"groups"`

	// InTriageAt Date of triage
	InTriageAt *string `json:"in_triage_at"`

	// IncidentTypes The Incident Types of the incident
	IncidentTypes *[]IncidentTypeResponse `json:"incident_types"`

	// Kind The kind of the incident
	Kind *string `json:"kind,omitempty"`

	// Labels Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
	Labels *map[string]interface{} `json:"labels"`

	// MitigatedAt Date of mitigation
	MitigatedAt *string `json:"mitigated_at"`

	// MitigationMessage How was the incident mitigated?
	MitigationMessage *string `json:"mitigation_message"`

	// ParentIncidentId ID of parent incident
	ParentIncidentId *string `json:"parent_incident_id"`

	// Private Create an incident as private
	Private *bool `json:"private"`

	// ResolutionMessage How was the incident resolved?
	ResolutionMessage *string `json:"resolution_message"`

	// ResolvedAt Date of resolution
	ResolvedAt *string `json:"resolved_at"`

	// RetrospectiveProgressStatus The status of the retrospective progress
	RetrospectiveProgressStatus *IncidentRetrospectiveProgressStatus `json:"retrospective_progress_status"`

	// ScheduledFor Date of when the maintenance begins
	ScheduledFor *string `json:"scheduled_for"`

	// ScheduledUntil Date of when the maintenance ends
	ScheduledUntil *string `json:"scheduled_until"`

	// Services The Services of the incident
	Services *[]ServiceResponse `json:"services"`

	// Severity The Severity of the incident
	Severity *SeverityResponse `json:"severity"`

	// SlackChannelId Slack channel id
	SlackChannelId *string `json:"slack_channel_id"`

	// SlackChannelName Slack channel name
	SlackChannelName *string `json:"slack_channel_name"`

	// SlackChannelUrl Slack channel url
	SlackChannelUrl *string `json:"slack_channel_url"`

	// Slug The slug of the incident
	Slug string `json:"slug"`

	// StartedAt Date of start
	StartedAt *string `json:"started_at"`

	// Summary The summary of the incident
	Summary *string `json:"summary"`

	// Title The title of the incident
	Title string `json:"title"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentRetrospectiveProgressStatus The status of the retrospective progress
type IncidentRetrospectiveProgressStatus string

// IncidentActionItem defines model for incident_action_item.
type IncidentActionItem struct {
	// AssignedToGroupIds IDs of groups you wish to assign this action item
	AssignedToGroupIds *[]string `json:"assigned_to_group_ids"`

	// AssignedToUserId ID of user you wish to assign this action item
	AssignedToUserId *int `json:"assigned_to_user_id"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Description The description of incident action item
	Description *string `json:"description"`

	// DueDate The due date of the action item
	DueDate *string `json:"due_date"`

	// Kind The kind of the action item
	Kind *IncidentActionItemKind `json:"kind,omitempty"`

	// Priority The priority of the action item
	Priority *IncidentActionItemPriority `json:"priority,omitempty"`

	// Status The status of the action item
	Status *IncidentActionItemStatus `json:"status,omitempty"`

	// Summary The summary of the action item
	Summary string `json:"summary"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentActionItemKind The kind of the action item
type IncidentActionItemKind string

// IncidentActionItemPriority The priority of the action item
type IncidentActionItemPriority string

// IncidentActionItemStatus The status of the action item
type IncidentActionItemStatus string

// IncidentActionItemList defines model for incident_action_item_list.
type IncidentActionItemList struct {
	Data []struct {
		Attributes IncidentActionItem `json:"attributes"`

		// Id Unique ID of the action item
		Id   string                         `json:"id"`
		Type IncidentActionItemListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// IncidentActionItemListDataType defines model for IncidentActionItemList.Data.Type.
type IncidentActionItemListDataType string

// IncidentActionItemResponse defines model for incident_action_item_response.
type IncidentActionItemResponse struct {
	Data struct {
		Attributes IncidentActionItem `json:"attributes"`

		// Id Unique ID of the action item
		Id   string                             `json:"id"`
		Type IncidentActionItemResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentActionItemResponseDataType defines model for IncidentActionItemResponse.Data.Type.
type IncidentActionItemResponseDataType string

// IncidentCustomFieldSelection defines model for incident_custom_field_selection.
type IncidentCustomFieldSelection struct {
	CustomFieldId     *int    `json:"custom_field_id,omitempty"`
	IncidentId        *string `json:"incident_id,omitempty"`
	SelectedOptionIds []int   `json:"selected_option_ids"`

	// Value The value of the incident_custom_field_selection
	Value *string `json:"value"`
}

// IncidentCustomFieldSelectionList defines model for incident_custom_field_selection_list.
type IncidentCustomFieldSelectionList struct {
	Data []struct {
		Attributes IncidentCustomFieldSelection `json:"attributes"`

		// Id Unique ID of the incident_custom_field_selection
		Id   string                                   `json:"id"`
		Type IncidentCustomFieldSelectionListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// IncidentCustomFieldSelectionListDataType defines model for IncidentCustomFieldSelectionList.Data.Type.
type IncidentCustomFieldSelectionListDataType string

// IncidentCustomFieldSelectionResponse defines model for incident_custom_field_selection_response.
type IncidentCustomFieldSelectionResponse struct {
	Data struct {
		Attributes IncidentCustomFieldSelection `json:"attributes"`

		// Id Unique ID of the incident_custom_field_selection
		Id   string                                       `json:"id"`
		Type IncidentCustomFieldSelectionResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentCustomFieldSelectionResponseDataType defines model for IncidentCustomFieldSelectionResponse.Data.Type.
type IncidentCustomFieldSelectionResponseDataType string

// IncidentEvent defines model for incident_event.
type IncidentEvent struct {
	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Event The summary of the incident event
	Event string `json:"event"`

	// OccurredAt Date of occurence
	OccurredAt string `json:"occurred_at"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`

	// Visibility The visibility of the incident action item
	Visibility *IncidentEventVisibility `json:"visibility,omitempty"`
}

// IncidentEventVisibility The visibility of the incident action item
type IncidentEventVisibility string

// IncidentEventFunctionality defines model for incident_event_functionality.
type IncidentEventFunctionality struct {
	// FunctionalityId The ID of the functionality.
	FunctionalityId string `json:"functionality_id"`

	// IncidentEventId The ID of the incident event.
	IncidentEventId string `json:"incident_event_id"`

	// Status The status of the affected functionality
	Status IncidentEventFunctionalityStatus `json:"status"`
}

// IncidentEventFunctionalityStatus The status of the affected functionality
type IncidentEventFunctionalityStatus string

// IncidentEventFunctionalityList defines model for incident_event_functionality_list.
type IncidentEventFunctionalityList struct {
	Data []struct {
		Attributes IncidentEventFunctionality `json:"attributes"`

		// Id Unique ID of the incident event functionality
		Id   string                                 `json:"id"`
		Type IncidentEventFunctionalityListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// IncidentEventFunctionalityListDataType defines model for IncidentEventFunctionalityList.Data.Type.
type IncidentEventFunctionalityListDataType string

// IncidentEventFunctionalityResponse defines model for incident_event_functionality_response.
type IncidentEventFunctionalityResponse struct {
	Data struct {
		Attributes IncidentEventFunctionality `json:"attributes"`

		// Id Unique ID of the incident event functionality
		Id   string                                     `json:"id"`
		Type IncidentEventFunctionalityResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentEventFunctionalityResponseDataType defines model for IncidentEventFunctionalityResponse.Data.Type.
type IncidentEventFunctionalityResponseDataType string

// IncidentEventList defines model for incident_event_list.
type IncidentEventList struct {
	Data []struct {
		Attributes IncidentEvent `json:"attributes"`

		// Id Unique ID of the incident event
		Id   string                    `json:"id"`
		Type IncidentEventListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// IncidentEventListDataType defines model for IncidentEventList.Data.Type.
type IncidentEventListDataType string

// IncidentEventResponse defines model for incident_event_response.
type IncidentEventResponse struct {
	Data struct {
		Attributes IncidentEvent `json:"attributes"`

		// Id Unique ID of the incident event
		Id   string                        `json:"id"`
		Type IncidentEventResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentEventResponseDataType defines model for IncidentEventResponse.Data.Type.
type IncidentEventResponseDataType string

// IncidentEventService defines model for incident_event_service.
type IncidentEventService struct {
	// IncidentEventId The ID of the incident event.
	IncidentEventId string `json:"incident_event_id"`

	// ServiceId The ID of the service.
	ServiceId string `json:"service_id"`

	// Status The status of the affected service
	Status IncidentEventServiceStatus `json:"status"`
}

// IncidentEventServiceStatus The status of the affected service
type IncidentEventServiceStatus string

// IncidentEventServiceList defines model for incident_event_service_list.
type IncidentEventServiceList struct {
	Data []struct {
		Attributes IncidentEventService `json:"attributes"`

		// Id Unique ID of the incident event service
		Id   string                           `json:"id"`
		Type IncidentEventServiceListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// IncidentEventServiceListDataType defines model for IncidentEventServiceList.Data.Type.
type IncidentEventServiceListDataType string

// IncidentEventServiceResponse defines model for incident_event_service_response.
type IncidentEventServiceResponse struct {
	Data struct {
		Attributes IncidentEventService `json:"attributes"`

		// Id Unique ID of the incident event service
		Id   string                               `json:"id"`
		Type IncidentEventServiceResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentEventServiceResponseDataType defines model for IncidentEventServiceResponse.Data.Type.
type IncidentEventServiceResponseDataType string

// IncidentFeedback defines model for incident_feedback.
type IncidentFeedback struct {
	// Anonymous Is the feedback anonymous?
	Anonymous bool `json:"anonymous"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Feedback The feedback of the incident feedback
	Feedback string `json:"feedback"`

	// Rating The rating of the incident feedback
	Rating IncidentFeedbackRating `json:"rating"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentFeedbackRating The rating of the incident feedback
type IncidentFeedbackRating int

// IncidentFeedbackList defines model for incident_feedback_list.
type IncidentFeedbackList struct {
	Data []struct {
		Attributes IncidentFeedback `json:"attributes"`

		// Id Unique ID of the incident feedback
		Id   string                       `json:"id"`
		Type IncidentFeedbackListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// IncidentFeedbackListDataType defines model for IncidentFeedbackList.Data.Type.
type IncidentFeedbackListDataType string

// IncidentFeedbackResponse defines model for incident_feedback_response.
type IncidentFeedbackResponse struct {
	Data struct {
		Attributes IncidentFeedback `json:"attributes"`

		// Id Unique ID of the incident feedback
		Id   string                           `json:"id"`
		Type IncidentFeedbackResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentFeedbackResponseDataType defines model for IncidentFeedbackResponse.Data.Type.
type IncidentFeedbackResponseDataType string

// IncidentFormFieldSelection defines model for incident_form_field_selection.
type IncidentFormFieldSelection struct {
	// FormFieldId The custom field for this selection
	FormFieldId              string    `json:"form_field_id"`
	IncidentId               string    `json:"incident_id"`
	SelectedCatalogEntityIds *[]string `json:"selected_catalog_entity_ids,omitempty"`
	SelectedFunctionalityIds *[]string `json:"selected_functionality_ids,omitempty"`
	SelectedGroupIds         *[]string `json:"selected_group_ids,omitempty"`
	SelectedOptionIds        *[]string `json:"selected_option_ids,omitempty"`
	SelectedServiceIds       *[]string `json:"selected_service_ids,omitempty"`
	SelectedUserIds          *[]int    `json:"selected_user_ids,omitempty"`

	// Value The selected value for text kind custom fields
	Value *string `json:"value"`
}

// IncidentFormFieldSelectionList defines model for incident_form_field_selection_list.
type IncidentFormFieldSelectionList struct {
	Data []struct {
		Attributes IncidentFormFieldSelection `json:"attributes"`

		// Id Unique ID of the incident_form_field_selection
		Id   string                                 `json:"id"`
		Type IncidentFormFieldSelectionListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// IncidentFormFieldSelectionListDataType defines model for IncidentFormFieldSelectionList.Data.Type.
type IncidentFormFieldSelectionListDataType string

// IncidentFormFieldSelectionResponse defines model for incident_form_field_selection_response.
type IncidentFormFieldSelectionResponse struct {
	Data struct {
		Attributes IncidentFormFieldSelection `json:"attributes"`

		// Id Unique ID of the incident_form_field_selection
		Id   string                                     `json:"id"`
		Type IncidentFormFieldSelectionResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentFormFieldSelectionResponseDataType defines model for IncidentFormFieldSelectionResponse.Data.Type.
type IncidentFormFieldSelectionResponseDataType string

// IncidentList defines model for incident_list.
type IncidentList struct {
	Data []struct {
		Attributes Incident `json:"attributes"`

		// Id Unique ID of the incident
		Id   string               `json:"id"`
		Type IncidentListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// IncidentListDataType defines model for IncidentList.Data.Type.
type IncidentListDataType string

// IncidentPermissionSet defines model for incident_permission_set.
type IncidentPermissionSet struct {
	CreatedAt string `json:"created_at"`

	// Description The incident permission set description.
	Description *string `json:"description"`

	// Name The incident permission set name.
	Name                       string                                             `json:"name"`
	PrivateIncidentPermissions *[]IncidentPermissionSetPrivateIncidentPermissions `json:"private_incident_permissions,omitempty"`
	PublicIncidentPermissions  *[]IncidentPermissionSetPublicIncidentPermissions  `json:"public_incident_permissions,omitempty"`

	// Slug The incident permission set slug.
	Slug      string `json:"slug"`
	UpdatedAt string `json:"updated_at"`
}

// IncidentPermissionSetPrivateIncidentPermissions defines model for IncidentPermissionSet.PrivateIncidentPermissions.
type IncidentPermissionSetPrivateIncidentPermissions string

// IncidentPermissionSetPublicIncidentPermissions defines model for IncidentPermissionSet.PublicIncidentPermissions.
type IncidentPermissionSetPublicIncidentPermissions string

// IncidentPermissionSetBoolean defines model for incident_permission_set_boolean.
type IncidentPermissionSetBoolean struct {
	CreatedAt               string                           `json:"created_at"`
	Enabled                 *bool                            `json:"enabled,omitempty"`
	IncidentPermissionSetId *string                          `json:"incident_permission_set_id,omitempty"`
	Kind                    IncidentPermissionSetBooleanKind `json:"kind"`
	Private                 *bool                            `json:"private,omitempty"`
	UpdatedAt               string                           `json:"updated_at"`
}

// IncidentPermissionSetBooleanKind defines model for IncidentPermissionSetBoolean.Kind.
type IncidentPermissionSetBooleanKind string

// IncidentPermissionSetBooleanList defines model for incident_permission_set_boolean_list.
type IncidentPermissionSetBooleanList struct {
	Data []struct {
		Attributes IncidentPermissionSetBoolean `json:"attributes"`

		// Id Unique ID of the incident permission set boolean
		Id   string                                   `json:"id"`
		Type IncidentPermissionSetBooleanListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// IncidentPermissionSetBooleanListDataType defines model for IncidentPermissionSetBooleanList.Data.Type.
type IncidentPermissionSetBooleanListDataType string

// IncidentPermissionSetBooleanResponse defines model for incident_permission_set_boolean_response.
type IncidentPermissionSetBooleanResponse struct {
	Data struct {
		Attributes IncidentPermissionSetBoolean `json:"attributes"`

		// Id Unique ID of the incident permission set boolean
		Id   string                                       `json:"id"`
		Type IncidentPermissionSetBooleanResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentPermissionSetBooleanResponseDataType defines model for IncidentPermissionSetBooleanResponse.Data.Type.
type IncidentPermissionSetBooleanResponseDataType string

// IncidentPermissionSetList defines model for incident_permission_set_list.
type IncidentPermissionSetList struct {
	Data []struct {
		Attributes IncidentPermissionSet `json:"attributes"`

		// Id Unique ID of the incident permission set
		Id   string                            `json:"id"`
		Type IncidentPermissionSetListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// IncidentPermissionSetListDataType defines model for IncidentPermissionSetList.Data.Type.
type IncidentPermissionSetListDataType string

// IncidentPermissionSetResource defines model for incident_permission_set_resource.
type IncidentPermissionSetResource struct {
	CreatedAt               string                            `json:"created_at"`
	IncidentPermissionSetId string                            `json:"incident_permission_set_id"`
	Kind                    IncidentPermissionSetResourceKind `json:"kind"`
	Private                 *bool                             `json:"private,omitempty"`
	ResourceId              *string                           `json:"resource_id,omitempty"`
	ResourceType            *string                           `json:"resource_type,omitempty"`
	UpdatedAt               string                            `json:"updated_at"`
}

// IncidentPermissionSetResourceKind defines model for IncidentPermissionSetResource.Kind.
type IncidentPermissionSetResourceKind string

// IncidentPermissionSetResourceList defines model for incident_permission_set_resource_list.
type IncidentPermissionSetResourceList struct {
	Data []struct {
		Attributes IncidentPermissionSetResource `json:"attributes"`

		// Id Unique ID of the incident permission set resource
		Id   string                                    `json:"id"`
		Type IncidentPermissionSetResourceListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// IncidentPermissionSetResourceListDataType defines model for IncidentPermissionSetResourceList.Data.Type.
type IncidentPermissionSetResourceListDataType string

// IncidentPermissionSetResourceResponse defines model for incident_permission_set_resource_response.
type IncidentPermissionSetResourceResponse struct {
	Data struct {
		Attributes IncidentPermissionSetResource `json:"attributes"`

		// Id Unique ID of the incident permission set resource
		Id   string                                        `json:"id"`
		Type IncidentPermissionSetResourceResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentPermissionSetResourceResponseDataType defines model for IncidentPermissionSetResourceResponse.Data.Type.
type IncidentPermissionSetResourceResponseDataType string

// IncidentPermissionSetResponse defines model for incident_permission_set_response.
type IncidentPermissionSetResponse struct {
	Data struct {
		Attributes IncidentPermissionSet `json:"attributes"`

		// Id Unique ID of the incident permission set
		Id   string                                `json:"id"`
		Type IncidentPermissionSetResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentPermissionSetResponseDataType defines model for IncidentPermissionSetResponse.Data.Type.
type IncidentPermissionSetResponseDataType string

// IncidentPostMortem defines model for incident_post_mortem.
type IncidentPostMortem struct {
	// Content The content of the incident retrospective (Only if internal)
	Content *string `json:"content"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// MitigatedAt Date of mitigation
	MitigatedAt *string `json:"mitigated_at"`

	// ResolvedAt Date of resolution
	ResolvedAt *string `json:"resolved_at"`

	// ShowAlertsAttached Show alerts attached to the incident
	ShowAlertsAttached *bool `json:"show_alerts_attached,omitempty"`

	// ShowFunctionalitiesImpacted Show services impacted of the incident retrospective
	ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

	// ShowGroupsImpacted Show groups impacted of the incident retrospective
	ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

	// ShowServicesImpacted Show functionalities impacted of the incident retrospective
	ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

	// ShowTimeline Show events timeline of the incident retrospective
	ShowTimeline *bool `json:"show_timeline,omitempty"`

	// ShowTimelineActionItems Show action items in the timeline of the incident retrospective
	ShowTimelineActionItems *bool `json:"show_timeline_action_items,omitempty"`

	// ShowTimelineGenius Show workflow events in the timeline of the incident retrospective
	ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

	// ShowTimelineOrder The order of the incident retrospective timeline
	ShowTimelineOrder *IncidentPostMortemShowTimelineOrder `json:"show_timeline_order,omitempty"`

	// ShowTimelineTasks Show tasks in the timeline of the incident retrospective
	ShowTimelineTasks *bool `json:"show_timeline_tasks,omitempty"`

	// ShowTimelineTrail Show trail events in the timeline of the incident retrospective
	ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

	// StartedAt Date of started at
	StartedAt *string `json:"started_at"`

	// Status The status of the incident retrospective
	Status *IncidentPostMortemStatus `json:"status,omitempty"`

	// Title The title of the incident retrospective
	Title string `json:"title"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`

	// Url The url to the incident retrospective
	Url *string `json:"url,omitempty"`
}

// IncidentPostMortemShowTimelineOrder The order of the incident retrospective timeline
type IncidentPostMortemShowTimelineOrder string

// IncidentPostMortemStatus The status of the incident retrospective
type IncidentPostMortemStatus string

// IncidentPostMortemList defines model for incident_post_mortem_list.
type IncidentPostMortemList struct {
	Data []struct {
		Attributes IncidentPostMortem `json:"attributes"`

		// Id Unique ID of the incident retrospective
		Id   string                         `json:"id"`
		Type IncidentPostMortemListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// IncidentPostMortemListDataType defines model for IncidentPostMortemList.Data.Type.
type IncidentPostMortemListDataType string

// IncidentPostMortemResponse defines model for incident_post_mortem_response.
type IncidentPostMortemResponse struct {
	Data struct {
		Attributes IncidentPostMortem `json:"attributes"`

		// Id Unique ID of the incident retrospective
		Id   string                             `json:"id"`
		Type IncidentPostMortemResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentPostMortemResponseDataType defines model for IncidentPostMortemResponse.Data.Type.
type IncidentPostMortemResponseDataType string

// IncidentResponse defines model for incident_response.
type IncidentResponse struct {
	Data struct {
		Attributes Incident `json:"attributes"`

		// Id Unique ID of the incident
		Id   string                   `json:"id"`
		Type IncidentResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentResponseDataType defines model for IncidentResponse.Data.Type.
type IncidentResponseDataType string

// IncidentRetrospectiveStep defines model for incident_retrospective_step.
type IncidentRetrospectiveStep struct {
	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Description The description of the step
	Description *string `json:"description"`

	// DueDate Due date
	DueDate    *string `json:"due_date"`
	IncidentId string  `json:"incident_id"`

	// Kind Due date
	Kind *string `json:"kind"`

	// Position Position of the step
	Position            *int   `json:"position,omitempty"`
	RetrospectiveStepId string `json:"retrospective_step_id"`

	// Skippable Is the step skippable?
	Skippable *bool `json:"skippable,omitempty"`

	// Status Status of the incident retrospective step
	Status *IncidentRetrospectiveStepStatus `json:"status,omitempty"`

	// Title The name of the step
	Title string `json:"title"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentRetrospectiveStepStatus Status of the incident retrospective step
type IncidentRetrospectiveStepStatus string

// IncidentRetrospectiveStepResponse defines model for incident_retrospective_step_response.
type IncidentRetrospectiveStepResponse struct {
	Data struct {
		Attributes IncidentRetrospectiveStep `json:"attributes"`

		// Id Unique ID of the step
		Id   string                                    `json:"id"`
		Type IncidentRetrospectiveStepResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentRetrospectiveStepResponseDataType defines model for IncidentRetrospectiveStepResponse.Data.Type.
type IncidentRetrospectiveStepResponseDataType string

// IncidentRole defines model for incident_role.
type IncidentRole struct {
	AllowMultiUserAssignment *bool `json:"allow_multi_user_assignment,omitempty"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Description The description of the incident role
	Description *string `json:"description"`
	Enabled     *bool   `json:"enabled,omitempty"`

	// Name The name of the incident role
	Name     string `json:"name"`
	Optional *bool  `json:"optional,omitempty"`

	// Position Position of the incident role
	Position *int `json:"position"`

	// Slug The slug of the incident role
	Slug *string `json:"slug,omitempty"`

	// Summary The summary of the incident role
	Summary *string `json:"summary"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentRoleList defines model for incident_role_list.
type IncidentRoleList struct {
	Data []struct {
		Attributes IncidentRole `json:"attributes"`

		// Id Unique ID of the incident role
		Id   string                   `json:"id"`
		Type IncidentRoleListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// IncidentRoleListDataType defines model for IncidentRoleList.Data.Type.
type IncidentRoleListDataType string

// IncidentRoleResponse defines model for incident_role_response.
type IncidentRoleResponse struct {
	Data struct {
		Attributes IncidentRole `json:"attributes"`

		// Id Unique ID of the incident role
		Id   string                       `json:"id"`
		Type IncidentRoleResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentRoleResponseDataType defines model for IncidentRoleResponse.Data.Type.
type IncidentRoleResponseDataType string

// IncidentRoleTask defines model for incident_role_task.
type IncidentRoleTask struct {
	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Description The description of incident task
	Description    *string `json:"description"`
	IncidentRoleId *string `json:"incident_role_id,omitempty"`

	// Priority The priority of the incident task
	Priority *IncidentRoleTaskPriority `json:"priority,omitempty"`

	// Task The task of the incident task
	Task string `json:"task"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentRoleTaskPriority The priority of the incident task
type IncidentRoleTaskPriority string

// IncidentRoleTaskList defines model for incident_role_task_list.
type IncidentRoleTaskList struct {
	Data []struct {
		Attributes IncidentRoleTask `json:"attributes"`

		// Id Unique ID of the incident task
		Id   string                       `json:"id"`
		Type IncidentRoleTaskListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// IncidentRoleTaskListDataType defines model for IncidentRoleTaskList.Data.Type.
type IncidentRoleTaskListDataType string

// IncidentRoleTaskResponse defines model for incident_role_task_response.
type IncidentRoleTaskResponse struct {
	Data struct {
		Attributes IncidentRoleTask `json:"attributes"`

		// Id Unique ID of the incident task
		Id   string                           `json:"id"`
		Type IncidentRoleTaskResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentRoleTaskResponseDataType defines model for IncidentRoleTaskResponse.Data.Type.
type IncidentRoleTaskResponseDataType string

// IncidentStatusPageEvent defines model for incident_status_page_event.
type IncidentStatusPageEvent struct {
	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Event The summary of the incident event
	Event string `json:"event"`

	// NotifySubscribers Notify all status pages subscribers
	NotifySubscribers *bool `json:"notify_subscribers,omitempty"`

	// ShouldTweet For Statuspage.io integrated pages auto publishes a tweet for your update
	ShouldTweet *bool `json:"should_tweet,omitempty"`

	// StartedAt Date of start
	StartedAt string `json:"started_at"`

	// Status The status of the incident event
	Status *IncidentStatusPageEventStatus `json:"status,omitempty"`

	// StatusPageId Unique ID of the status page you wish to post the event to
	StatusPageId *string `json:"status_page_id,omitempty"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentStatusPageEventStatus The status of the incident event
type IncidentStatusPageEventStatus string

// IncidentStatusPageEventList defines model for incident_status_page_event_list.
type IncidentStatusPageEventList struct {
	Data []struct {
		Attributes IncidentStatusPageEvent `json:"attributes"`

		// Id Unique ID of the incident event
		Id   string                              `json:"id"`
		Type IncidentStatusPageEventListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// IncidentStatusPageEventListDataType defines model for IncidentStatusPageEventList.Data.Type.
type IncidentStatusPageEventListDataType string

// IncidentStatusPageEventResponse defines model for incident_status_page_event_response.
type IncidentStatusPageEventResponse struct {
	Data struct {
		Attributes IncidentStatusPageEvent `json:"attributes"`

		// Id Unique ID of the incident event
		Id   string                                  `json:"id"`
		Type IncidentStatusPageEventResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentStatusPageEventResponseDataType defines model for IncidentStatusPageEventResponse.Data.Type.
type IncidentStatusPageEventResponseDataType string

// IncidentSubStatus defines model for incident_sub_status.
type IncidentSubStatus struct {
	AssignedAt       string `json:"assigned_at"`
	AssignedByUserId *int   `json:"assigned_by_user_id"`
	IncidentId       string `json:"incident_id"`

	// SubStatusId Note: To change an incident's sub-status, use the PATCH /incidents/:id endpoint and set the sub_status_id attribute. This endpoint is for modifying the timestamp of when an incident's sub-status was assigned.
	SubStatusId string `json:"sub_status_id"`
}

// IncidentSubStatusList defines model for incident_sub_status_list.
type IncidentSubStatusList struct {
	Data []struct {
		Attributes IncidentSubStatus `json:"attributes"`

		// Id Unique ID of the incident_sub_status
		Id   string                        `json:"id"`
		Type IncidentSubStatusListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// IncidentSubStatusListDataType defines model for IncidentSubStatusList.Data.Type.
type IncidentSubStatusListDataType string

// IncidentSubStatusResponse defines model for incident_sub_status_response.
type IncidentSubStatusResponse struct {
	Data struct {
		Attributes IncidentSubStatus `json:"attributes"`

		// Id Unique ID of the incident_sub_status
		Id   string                            `json:"id"`
		Type IncidentSubStatusResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentSubStatusResponseDataType defines model for IncidentSubStatusResponse.Data.Type.
type IncidentSubStatusResponseDataType string

// IncidentTriggerParams defines model for incident_trigger_params.
type IncidentTriggerParams struct {
	IncidentCondition               *IncidentTriggerParamsIncidentCondition                `json:"incident_condition,omitempty"`
	IncidentConditionAcknowledgedAt *IncidentTriggerParams_IncidentConditionAcknowledgedAt `json:"incident_condition_acknowledged_at,omitempty"`
	IncidentConditionCause          *IncidentTriggerParamsIncidentConditionCause           `json:"incident_condition_cause,omitempty"`
	IncidentConditionDetectedAt     *IncidentTriggerParams_IncidentConditionDetectedAt     `json:"incident_condition_detected_at,omitempty"`
	IncidentConditionEnvironment    *IncidentTriggerParamsIncidentConditionEnvironment     `json:"incident_condition_environment,omitempty"`
	IncidentConditionFunctionality  *IncidentTriggerParamsIncidentConditionFunctionality   `json:"incident_condition_functionality,omitempty"`
	IncidentConditionGroup          *IncidentTriggerParamsIncidentConditionGroup           `json:"incident_condition_group,omitempty"`
	IncidentConditionIncidentRoles  *IncidentTriggerParamsIncidentConditionIncidentRoles   `json:"incident_condition_incident_roles,omitempty"`
	IncidentConditionIncidentType   *IncidentTriggerParamsIncidentConditionIncidentType    `json:"incident_condition_incident_type,omitempty"`
	IncidentConditionKind           *IncidentTriggerParamsIncidentConditionKind            `json:"incident_condition_kind,omitempty"`
	IncidentConditionMitigatedAt    *IncidentTriggerParams_IncidentConditionMitigatedAt    `json:"incident_condition_mitigated_at,omitempty"`
	IncidentConditionResolvedAt     *IncidentTriggerParams_IncidentConditionResolvedAt     `json:"incident_condition_resolved_at,omitempty"`
	IncidentConditionService        *IncidentTriggerParamsIncidentConditionService         `json:"incident_condition_service,omitempty"`
	IncidentConditionSeverity       *IncidentTriggerParamsIncidentConditionSeverity        `json:"incident_condition_severity,omitempty"`
	IncidentConditionStartedAt      *IncidentTriggerParams_IncidentConditionStartedAt      `json:"incident_condition_started_at,omitempty"`
	IncidentConditionStatus         *IncidentTriggerParamsIncidentConditionStatus          `json:"incident_condition_status,omitempty"`
	IncidentConditionSummary        *IncidentTriggerParams_IncidentConditionSummary        `json:"incident_condition_summary,omitempty"`
	IncidentConditionVisibility     *IncidentTriggerParamsIncidentConditionVisibility      `json:"incident_condition_visibility,omitempty"`
	IncidentConditionalInactivity   *IncidentTriggerParams_IncidentConditionalInactivity   `json:"incident_conditional_inactivity,omitempty"`
	IncidentInactivityDuration      *IncidentTriggerParams_IncidentInactivityDuration      `json:"incident_inactivity_duration,omitempty"`
	IncidentKinds                   *[]IncidentTriggerParamsIncidentKinds                  `json:"incident_kinds,omitempty"`

	// IncidentPostMortemConditionCause [DEPRECATED] Use incident_condition_cause instead
	IncidentPostMortemConditionCause *IncidentTriggerParamsIncidentPostMortemConditionCause `json:"incident_post_mortem_condition_cause,omitempty"`
	IncidentStatuses                 *[]IncidentTriggerParamsIncidentStatuses               `json:"incident_statuses,omitempty"`
	IncidentVisibilities             *[]bool                                                `json:"incident_visibilities,omitempty"`
	TriggerType                      IncidentTriggerParamsTriggerType                       `json:"trigger_type"`
	Triggers                         *[]string                                              `json:"triggers,omitempty"`
}

// IncidentTriggerParamsIncidentCondition defines model for IncidentTriggerParams.IncidentCondition.
type IncidentTriggerParamsIncidentCondition string

// IncidentTriggerParamsIncidentConditionAcknowledgedAt0 defines model for .
type IncidentTriggerParamsIncidentConditionAcknowledgedAt0 = interface{}

// IncidentTriggerParamsIncidentConditionAcknowledgedAt1 defines model for IncidentTriggerParams.IncidentConditionAcknowledgedAt.1.
type IncidentTriggerParamsIncidentConditionAcknowledgedAt1 string

// IncidentTriggerParams_IncidentConditionAcknowledgedAt defines model for IncidentTriggerParams.IncidentConditionAcknowledgedAt.
type IncidentTriggerParams_IncidentConditionAcknowledgedAt struct {
	union json.RawMessage
}

// IncidentTriggerParamsIncidentConditionCause defines model for IncidentTriggerParams.IncidentConditionCause.
type IncidentTriggerParamsIncidentConditionCause string

// IncidentTriggerParamsIncidentConditionDetectedAt0 defines model for .
type IncidentTriggerParamsIncidentConditionDetectedAt0 = interface{}

// IncidentTriggerParamsIncidentConditionDetectedAt1 defines model for IncidentTriggerParams.IncidentConditionDetectedAt.1.
type IncidentTriggerParamsIncidentConditionDetectedAt1 string

// IncidentTriggerParams_IncidentConditionDetectedAt defines model for IncidentTriggerParams.IncidentConditionDetectedAt.
type IncidentTriggerParams_IncidentConditionDetectedAt struct {
	union json.RawMessage
}

// IncidentTriggerParamsIncidentConditionEnvironment defines model for IncidentTriggerParams.IncidentConditionEnvironment.
type IncidentTriggerParamsIncidentConditionEnvironment string

// IncidentTriggerParamsIncidentConditionFunctionality defines model for IncidentTriggerParams.IncidentConditionFunctionality.
type IncidentTriggerParamsIncidentConditionFunctionality string

// IncidentTriggerParamsIncidentConditionGroup defines model for IncidentTriggerParams.IncidentConditionGroup.
type IncidentTriggerParamsIncidentConditionGroup string

// IncidentTriggerParamsIncidentConditionIncidentRoles defines model for IncidentTriggerParams.IncidentConditionIncidentRoles.
type IncidentTriggerParamsIncidentConditionIncidentRoles string

// IncidentTriggerParamsIncidentConditionIncidentType defines model for IncidentTriggerParams.IncidentConditionIncidentType.
type IncidentTriggerParamsIncidentConditionIncidentType string

// IncidentTriggerParamsIncidentConditionKind defines model for IncidentTriggerParams.IncidentConditionKind.
type IncidentTriggerParamsIncidentConditionKind string

// IncidentTriggerParamsIncidentConditionMitigatedAt0 defines model for .
type IncidentTriggerParamsIncidentConditionMitigatedAt0 = interface{}

// IncidentTriggerParamsIncidentConditionMitigatedAt1 defines model for IncidentTriggerParams.IncidentConditionMitigatedAt.1.
type IncidentTriggerParamsIncidentConditionMitigatedAt1 string

// IncidentTriggerParams_IncidentConditionMitigatedAt defines model for IncidentTriggerParams.IncidentConditionMitigatedAt.
type IncidentTriggerParams_IncidentConditionMitigatedAt struct {
	union json.RawMessage
}

// IncidentTriggerParamsIncidentConditionResolvedAt0 defines model for .
type IncidentTriggerParamsIncidentConditionResolvedAt0 = interface{}

// IncidentTriggerParamsIncidentConditionResolvedAt1 defines model for IncidentTriggerParams.IncidentConditionResolvedAt.1.
type IncidentTriggerParamsIncidentConditionResolvedAt1 string

// IncidentTriggerParams_IncidentConditionResolvedAt defines model for IncidentTriggerParams.IncidentConditionResolvedAt.
type IncidentTriggerParams_IncidentConditionResolvedAt struct {
	union json.RawMessage
}

// IncidentTriggerParamsIncidentConditionService defines model for IncidentTriggerParams.IncidentConditionService.
type IncidentTriggerParamsIncidentConditionService string

// IncidentTriggerParamsIncidentConditionSeverity defines model for IncidentTriggerParams.IncidentConditionSeverity.
type IncidentTriggerParamsIncidentConditionSeverity string

// IncidentTriggerParamsIncidentConditionStartedAt0 defines model for .
type IncidentTriggerParamsIncidentConditionStartedAt0 = interface{}

// IncidentTriggerParamsIncidentConditionStartedAt1 defines model for IncidentTriggerParams.IncidentConditionStartedAt.1.
type IncidentTriggerParamsIncidentConditionStartedAt1 string

// IncidentTriggerParams_IncidentConditionStartedAt defines model for IncidentTriggerParams.IncidentConditionStartedAt.
type IncidentTriggerParams_IncidentConditionStartedAt struct {
	union json.RawMessage
}

// IncidentTriggerParamsIncidentConditionStatus defines model for IncidentTriggerParams.IncidentConditionStatus.
type IncidentTriggerParamsIncidentConditionStatus string

// IncidentTriggerParamsIncidentConditionSummary0 defines model for .
type IncidentTriggerParamsIncidentConditionSummary0 = interface{}

// IncidentTriggerParamsIncidentConditionSummary1 defines model for IncidentTriggerParams.IncidentConditionSummary.1.
type IncidentTriggerParamsIncidentConditionSummary1 string

// IncidentTriggerParams_IncidentConditionSummary defines model for IncidentTriggerParams.IncidentConditionSummary.
type IncidentTriggerParams_IncidentConditionSummary struct {
	union json.RawMessage
}

// IncidentTriggerParamsIncidentConditionVisibility defines model for IncidentTriggerParams.IncidentConditionVisibility.
type IncidentTriggerParamsIncidentConditionVisibility string

// IncidentTriggerParamsIncidentConditionalInactivity0 defines model for .
type IncidentTriggerParamsIncidentConditionalInactivity0 = interface{}

// IncidentTriggerParamsIncidentConditionalInactivity1 defines model for IncidentTriggerParams.IncidentConditionalInactivity.1.
type IncidentTriggerParamsIncidentConditionalInactivity1 string

// IncidentTriggerParams_IncidentConditionalInactivity defines model for IncidentTriggerParams.IncidentConditionalInactivity.
type IncidentTriggerParams_IncidentConditionalInactivity struct {
	union json.RawMessage
}

// IncidentTriggerParamsIncidentInactivityDuration0 defines model for .
type IncidentTriggerParamsIncidentInactivityDuration0 = interface{}

// IncidentTriggerParamsIncidentInactivityDuration1 ex. 10 min, 1h, 3 days, 2 weeks
type IncidentTriggerParamsIncidentInactivityDuration1 = string

// IncidentTriggerParams_IncidentInactivityDuration defines model for IncidentTriggerParams.IncidentInactivityDuration.
type IncidentTriggerParams_IncidentInactivityDuration struct {
	union json.RawMessage
}

// IncidentTriggerParamsIncidentKinds defines model for IncidentTriggerParams.IncidentKinds.
type IncidentTriggerParamsIncidentKinds string

// IncidentTriggerParamsIncidentPostMortemConditionCause [DEPRECATED] Use incident_condition_cause instead
type IncidentTriggerParamsIncidentPostMortemConditionCause string

// IncidentTriggerParamsIncidentStatuses defines model for IncidentTriggerParams.IncidentStatuses.
type IncidentTriggerParamsIncidentStatuses string

// IncidentTriggerParamsTriggerType defines model for IncidentTriggerParams.TriggerType.
type IncidentTriggerParamsTriggerType string

// IncidentType defines model for incident_type.
type IncidentType struct {
	// Color The hex color of the incident type
	Color *string `json:"color"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Description The description of the incident type
	Description *string `json:"description"`

	// Name The name of the incident type
	Name string `json:"name"`

	// NotifyEmails Emails to attach to the incident type
	NotifyEmails *[]string `json:"notify_emails"`

	// Position Position of the incident type
	Position *int `json:"position"`

	// SlackAliases Slack Aliases associated with this incident type
	SlackAliases *[]struct {
		// Id Slack alias ID
		Id string `json:"id"`

		// Name Slack alias name
		Name string `json:"name"`
	} `json:"slack_aliases"`

	// SlackChannels Slack Channels associated with this incident type
	SlackChannels *[]struct {
		// Id Slack channel ID
		Id string `json:"id"`

		// Name Slack channel name
		Name string `json:"name"`
	} `json:"slack_channels"`

	// Slug The slug of the incident type
	Slug *string `json:"slug,omitempty"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentTypeList defines model for incident_type_list.
type IncidentTypeList struct {
	Data []struct {
		Attributes IncidentType `json:"attributes"`

		// Id Unique ID of the incident type
		Id   string                   `json:"id"`
		Type IncidentTypeListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// IncidentTypeListDataType defines model for IncidentTypeList.Data.Type.
type IncidentTypeListDataType string

// IncidentTypeResponse defines model for incident_type_response.
type IncidentTypeResponse struct {
	Data struct {
		Attributes IncidentType `json:"attributes"`

		// Id Unique ID of the incident type
		Id   string                       `json:"id"`
		Type IncidentTypeResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentTypeResponseDataType defines model for IncidentTypeResponse.Data.Type.
type IncidentTypeResponseDataType string

// IncidentsChartResponse defines model for incidents_chart_response.
type IncidentsChartResponse = map[string]interface{}

// InviteToMicrosoftTeamsChannelTaskParams defines model for invite_to_microsoft_teams_channel_task_params.
type InviteToMicrosoftTeamsChannelTaskParams struct {
	Channel struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channel"`

	// Emails Comma separated list of emails to invite
	Emails   string                                           `json:"emails"`
	TaskType *InviteToMicrosoftTeamsChannelTaskParamsTaskType `json:"task_type,omitempty"`
	Team     *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"team,omitempty"`
}

// InviteToMicrosoftTeamsChannelTaskParamsTaskType defines model for InviteToMicrosoftTeamsChannelTaskParams.TaskType.
type InviteToMicrosoftTeamsChannelTaskParamsTaskType string

// InviteToSlackChannelOpsgenieTaskParams defines model for invite_to_slack_channel_opsgenie_task_params.
type InviteToSlackChannelOpsgenieTaskParams struct {
	Channels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channels,omitempty"`
	Schedule struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule"`
	TaskType *InviteToSlackChannelOpsgenieTaskParamsTaskType `json:"task_type,omitempty"`
}

// InviteToSlackChannelOpsgenieTaskParamsTaskType defines model for InviteToSlackChannelOpsgenieTaskParams.TaskType.
type InviteToSlackChannelOpsgenieTaskParamsTaskType string

// InviteToSlackChannelPagerdutyTaskParams defines model for invite_to_slack_channel_pagerduty_task_params.
type InviteToSlackChannelPagerdutyTaskParams struct {
	Channels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channels,omitempty"`
	EscalationPolicy *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"escalation_policy,omitempty"`
	Schedule *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule,omitempty"`
	Service *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"service,omitempty"`
	TaskType *InviteToSlackChannelPagerdutyTaskParamsTaskType `json:"task_type,omitempty"`
	union    json.RawMessage
}

// InviteToSlackChannelPagerdutyTaskParamsTaskType defines model for InviteToSlackChannelPagerdutyTaskParams.TaskType.
type InviteToSlackChannelPagerdutyTaskParamsTaskType string

// InviteToSlackChannelPagerdutyTaskParams0 defines model for .
type InviteToSlackChannelPagerdutyTaskParams0 = interface{}

// InviteToSlackChannelPagerdutyTaskParams1 defines model for .
type InviteToSlackChannelPagerdutyTaskParams1 = interface{}

// InviteToSlackChannelRootlyTaskParams defines model for invite_to_slack_channel_rootly_task_params.
type InviteToSlackChannelRootlyTaskParams struct {
	Channels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channels,omitempty"`
	EscalationPolicyTarget *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"escalation_policy_target,omitempty"`
	GroupTarget *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"group_target,omitempty"`
	ScheduleTarget *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule_target,omitempty"`
	ServiceTarget *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"service_target,omitempty"`
	TaskType   *InviteToSlackChannelRootlyTaskParamsTaskType `json:"task_type,omitempty"`
	UserTarget *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"user_target,omitempty"`
}

// InviteToSlackChannelRootlyTaskParamsTaskType defines model for InviteToSlackChannelRootlyTaskParams.TaskType.
type InviteToSlackChannelRootlyTaskParamsTaskType string

// InviteToSlackChannelTaskParams defines model for invite_to_slack_channel_task_params.
type InviteToSlackChannelTaskParams struct {
	Channel struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channel"`
	SlackUserGroups *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"slack_user_groups,omitempty"`
	SlackUsers *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"slack_users,omitempty"`
	TaskType *InviteToSlackChannelTaskParamsTaskType `json:"task_type,omitempty"`
	union    json.RawMessage
}

// InviteToSlackChannelTaskParamsTaskType defines model for InviteToSlackChannelTaskParams.TaskType.
type InviteToSlackChannelTaskParamsTaskType string

// InviteToSlackChannelTaskParams0 defines model for .
type InviteToSlackChannelTaskParams0 = interface{}

// InviteToSlackChannelTaskParams1 defines model for .
type InviteToSlackChannelTaskParams1 = interface{}

// InviteToSlackChannelVictorOpsTaskParams defines model for invite_to_slack_channel_victor_ops_task_params.
type InviteToSlackChannelVictorOpsTaskParams struct {
	Channels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channels,omitempty"`
	TaskType *InviteToSlackChannelVictorOpsTaskParamsTaskType `json:"task_type,omitempty"`
	Team     struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"team"`
}

// InviteToSlackChannelVictorOpsTaskParamsTaskType defines model for InviteToSlackChannelVictorOpsTaskParams.TaskType.
type InviteToSlackChannelVictorOpsTaskParamsTaskType string

// IpRanges defines model for ip_ranges.
type IpRanges struct {
	// IntegrationsIpv4 IPv4 addresses associated with Rootly integrations.
	IntegrationsIpv4 []string `json:"integrations_ipv4"`

	// IntegrationsIpv6 IPv6 addresses associated with Rootly integrations.
	IntegrationsIpv6 []string `json:"integrations_ipv6"`

	// WebhooksIpv4 IPv4 addresses associated with Rootly webhooks.
	WebhooksIpv4 []string `json:"webhooks_ipv4"`

	// WebhooksIpv6 IPv6 addresses associated with Rootly webhooks.
	WebhooksIpv6 []string `json:"webhooks_ipv6"`
}

// IpRangesResponse defines model for ip_ranges_response.
type IpRangesResponse struct {
	Data struct {
		Attributes IpRanges `json:"attributes"`

		// Id Unique ID of the ip_ranges
		Id   string                   `json:"id"`
		Type IpRangesResponseDataType `json:"type"`
	} `json:"data"`
}

// IpRangesResponseDataType defines model for IpRangesResponse.Data.Type.
type IpRangesResponseDataType string

// Links defines model for links.
type Links struct {
	First string  `json:"first"`
	Last  string  `json:"last"`
	Next  *string `json:"next"`
	Prev  *string `json:"prev"`
	Self  string  `json:"self"`
}

// LiveCallRouter defines model for live_call_router.
type LiveCallRouter struct {
	// AlertUrgencyId This is used in escalation paths to determine who to page
	AlertUrgencyId *string `json:"alert_urgency_id,omitempty"`

	// CallerGreeting The caller greeting message of the live_call_router
	CallerGreeting *string `json:"caller_greeting,omitempty"`

	// CountryCode The country code of the live_call_router
	CountryCode *LiveCallRouterCountryCode `json:"country_code,omitempty"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Enabled Whether the live_call_router is enabled
	Enabled *bool `json:"enabled,omitempty"`

	// EscalationLevelDelayInSeconds This overrides the delay (seconds) in escalation levels
	EscalationLevelDelayInSeconds *int `json:"escalation_level_delay_in_seconds,omitempty"`
	EscalationPolicyTriggerParams *struct {
		// Id The ID of notification target
		Id string `json:"id"`

		// Type The type of the notification target
		Type LiveCallRouterEscalationPolicyTriggerParamsType `json:"type"`
	} `json:"escalation_policy_trigger_params"`

	// Kind The kind of the live_call_router
	Kind *LiveCallRouterKind `json:"kind,omitempty"`

	// Name The name of the live_call_router
	Name string `json:"name"`

	// PhoneNumber You can select a phone number using [generate_phone_number](#//api/v1/live_call_routers/generate_phone_number) API and pass that phone number here to register
	PhoneNumber *string `json:"phone_number,omitempty"`

	// PhoneType The phone type of the live_call_router
	PhoneType *LiveCallRouterPhoneType `json:"phone_type,omitempty"`

	// SentToVoicemailDelay The delay (seconds) after which the caller in redirected to voicemail
	SentToVoicemailDelay *int `json:"sent_to_voicemail_delay,omitempty"`

	// ShouldAutoResolveAlertOnCallEnd This overrides the delay (seconds) in escalation levels
	ShouldAutoResolveAlertOnCallEnd *bool `json:"should_auto_resolve_alert_on_call_end,omitempty"`

	// ShouldRedirectToVoicemailOnNoAnswer This prompts the caller to choose voicemail or connect live
	ShouldRedirectToVoicemailOnNoAnswer *bool `json:"should_redirect_to_voicemail_on_no_answer,omitempty"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`

	// VoicemailGreeting The voicemail greeting of the live_call_router
	VoicemailGreeting *string `json:"voicemail_greeting,omitempty"`

	// WaitingMusicUrl The waiting music URL of the live_call_router
	WaitingMusicUrl *string `json:"waiting_music_url,omitempty"`
}

// LiveCallRouterCountryCode The country code of the live_call_router
type LiveCallRouterCountryCode string

// LiveCallRouterEscalationPolicyTriggerParamsType The type of the notification target
type LiveCallRouterEscalationPolicyTriggerParamsType string

// LiveCallRouterKind The kind of the live_call_router
type LiveCallRouterKind string

// LiveCallRouterPhoneType The phone type of the live_call_router
type LiveCallRouterPhoneType string

// LiveCallRouterList defines model for live_call_router_list.
type LiveCallRouterList struct {
	Data []struct {
		Attributes LiveCallRouter `json:"attributes"`

		// Id Unique ID of the live_call_router
		Id   string                     `json:"id"`
		Type LiveCallRouterListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// LiveCallRouterListDataType defines model for LiveCallRouterList.Data.Type.
type LiveCallRouterListDataType string

// LiveCallRouterResponse defines model for live_call_router_response.
type LiveCallRouterResponse struct {
	Data struct {
		Attributes LiveCallRouter `json:"attributes"`

		// Id Unique ID of the live_call_router
		Id   string                         `json:"id"`
		Type LiveCallRouterResponseDataType `json:"type"`
	} `json:"data"`
}

// LiveCallRouterResponseDataType defines model for LiveCallRouterResponse.Data.Type.
type LiveCallRouterResponseDataType string

// MitigateIncident defines model for mitigate_incident.
type MitigateIncident struct {
	Data struct {
		Attributes struct {
			// MitigationMessage How was the incident mitigated?
			MitigationMessage *string `json:"mitigation_message"`
		} `json:"attributes"`
		Type MitigateIncidentDataType `json:"type"`
	} `json:"data"`
}

// MitigateIncidentDataType defines model for MitigateIncident.Data.Type.
type MitigateIncidentDataType string

// NewAlert defines model for new_alert.
type NewAlert struct {
	Data struct {
		Attributes struct {
			// AlertUrgencyId The ID of the alert urgency
			AlertUrgencyId *string `json:"alert_urgency_id"`

			// Data Additional data
			Data *map[string]interface{} `json:"data"`

			// Description The description of the alert
			Description *string `json:"description"`

			// EndedAt Alert end datetime
			EndedAt *time.Time `json:"ended_at"`

			// EnvironmentIds The Environment ID's to attach to the alert
			EnvironmentIds *[]string `json:"environment_ids"`

			// ExternalId External ID
			ExternalId *string `json:"external_id"`

			// ExternalUrl External Url
			ExternalUrl *string `json:"external_url"`

			// GroupIds The Group ID's to attach to the alert. If your organization has On-Call enabled and your notification target is a Group. This field will be automatically set for you.
			GroupIds *[]string `json:"group_ids"`
			Labels   *[]struct {
				// Key Key of the tag
				Key string `json:"key"`

				// Value Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`

			// NotificationTargetId Only available for organizations with Rootly On-Call enabled. The _identifier_ of the notification target object.
			NotificationTargetId *string `json:"notification_target_id"`

			// NotificationTargetType Only available for organizations with Rootly On-Call enabled. Can be one of Group, Service, EscalationPolicy, User.
			NotificationTargetType *NewAlertDataAttributesNotificationTargetType `json:"notification_target_type"`

			// ServiceIds The Service ID's to attach to the alert. If your organization has On-Call enabled and your notification target is a Service. This field will be automatically set for you.
			ServiceIds *[]string `json:"service_ids"`

			// Source The source of the alert
			Source NewAlertDataAttributesSource `json:"source"`

			// StartedAt Alert start datetime
			StartedAt *time.Time `json:"started_at"`

			// Status Only available for organizations with Rootly On-Call enabled. Can be one of open, triggered, acknowledged or resolved.
			Status *NewAlertDataAttributesStatus `json:"status,omitempty"`

			// Summary The summary of the alert
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type NewAlertDataType `json:"type"`
	} `json:"data"`
}

// NewAlertDataAttributesNotificationTargetType Only available for organizations with Rootly On-Call enabled. Can be one of Group, Service, EscalationPolicy, User.
type NewAlertDataAttributesNotificationTargetType string

// NewAlertDataAttributesSource The source of the alert
type NewAlertDataAttributesSource string

// NewAlertDataAttributesStatus Only available for organizations with Rootly On-Call enabled. Can be one of open, triggered, acknowledged or resolved.
type NewAlertDataAttributesStatus string

// NewAlertDataType defines model for NewAlert.Data.Type.
type NewAlertDataType string

// NewAlertGroup defines model for new_alert_group.
type NewAlertGroup struct {
	Data struct {
		Attributes struct {
			// AlertGroupTargetsAttributes Attributes for alert group targets
			AlertGroupTargetsAttributes struct {
				// TargetId id for the Group, Service or EscalationPolicy
				TargetId *openapi_types.UUID `json:"target_id,omitempty"`

				// TargetType The type of the target.
				TargetType *NewAlertGroupDataAttributesAlertGroupTargetsAttributesTargetType `json:"target_type,omitempty"`
			} `json:"alert_group_targets_attributes"`

			// ConditionType Group alerts when ANY or ALL of the fields are matching.
			ConditionType *NewAlertGroupDataAttributesConditionType `json:"condition_type,omitempty"`

			// Description The description of the alert urgency
			Description *string `json:"description"`

			// GroupByAlertTitle Whether the alerts should be grouped by titles.
			GroupByAlertTitle *NewAlertGroupDataAttributesGroupByAlertTitle `json:"group_by_alert_title,omitempty"`

			// GroupByAlertUrgency Whether the alerts should be grouped by urgencies.
			GroupByAlertUrgency *NewAlertGroupDataAttributesGroupByAlertUrgency `json:"group_by_alert_urgency,omitempty"`

			// Name The name of the alert group
			Name string `json:"name"`

			// TimeWindow The length of time an Alert Group should stay open and accept new alerts
			TimeWindow *int `json:"time_window,omitempty"`
		} `json:"attributes"`
		Type NewAlertGroupDataType `json:"type"`
	} `json:"data"`
}

// NewAlertGroupDataAttributesAlertGroupTargetsAttributesTargetType The type of the target.
type NewAlertGroupDataAttributesAlertGroupTargetsAttributesTargetType string

// NewAlertGroupDataAttributesConditionType Group alerts when ANY or ALL of the fields are matching.
type NewAlertGroupDataAttributesConditionType string

// NewAlertGroupDataAttributesGroupByAlertTitle Whether the alerts should be grouped by titles.
type NewAlertGroupDataAttributesGroupByAlertTitle int

// NewAlertGroupDataAttributesGroupByAlertUrgency Whether the alerts should be grouped by urgencies.
type NewAlertGroupDataAttributesGroupByAlertUrgency int

// NewAlertGroupDataType defines model for NewAlertGroup.Data.Type.
type NewAlertGroupDataType string

// NewAlertUrgency defines model for new_alert_urgency.
type NewAlertUrgency struct {
	Data struct {
		Attributes struct {
			// Description The description of the alert urgency
			Description string `json:"description"`

			// Name The name of the alert urgency
			Name string `json:"name"`

			// Position Position of the alert urgency
			Position *int `json:"position"`
		} `json:"attributes"`
		Type NewAlertUrgencyDataType `json:"type"`
	} `json:"data"`
}

// NewAlertUrgencyDataType defines model for NewAlertUrgency.Data.Type.
type NewAlertUrgencyDataType string

// NewAlertsSource defines model for new_alerts_source.
type NewAlertsSource struct {
	Data struct {
		Attributes struct {
			// AlertSourceUrgencyRulesAttributes List of rules that define the conditions under which the alert urgency will be set automatically based on the alert payload
			AlertSourceUrgencyRulesAttributes *[]struct {
				// JsonPath JSON path expression to extract a specific value from the alert's payload for evaluation
				JsonPath *string `json:"json_path,omitempty"`

				// Operator Comparison operator used to evaluate the extracted value against the specified condition
				Operator *NewAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperator `json:"operator,omitempty"`

				// Value Value that the extracted payload data is compared to using the specified operator to determine a match
				Value *string `json:"value,omitempty"`
			} `json:"alert_source_urgency_rules_attributes,omitempty"`

			// AlertUrgencyId ID for the default alert urgency assigned to this alert source
			AlertUrgencyId *string `json:"alert_urgency_id,omitempty"`

			// Name The name of the alert source
			Name string `json:"name"`

			// SourceType The alert source type
			SourceType *NewAlertsSourceDataAttributesSourceType `json:"source_type,omitempty"`

			// SourceableAttributes Provide additional attributes for generic_webhook alerts source
			SourceableAttributes *struct {
				// AutoResolve Set this to true to auto-resolve alerts based on field_mappings_attributes conditions
				AutoResolve *bool `json:"auto_resolve,omitempty"`

				// FieldMappingsAttributes Specify rules to auto resolve alerts
				FieldMappingsAttributes *[]struct {
					// Field Select the field on which the condition to be evaluated
					Field *NewAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesField `json:"field,omitempty"`

					// JsonPath JSON path expression to extract a specific value from the alert's payload for evaluation
					JsonPath *string `json:"json_path,omitempty"`
				} `json:"field_mappings_attributes,omitempty"`

				// ResolveState This value is matched with the value extracted from alerts payload using JSON path in field_mappings_attributes
				ResolveState *string `json:"resolve_state,omitempty"`
			} `json:"sourceable_attributes,omitempty"`
		} `json:"attributes"`
		Type NewAlertsSourceDataType `json:"type"`
	} `json:"data"`
}

// NewAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperator Comparison operator used to evaluate the extracted value against the specified condition
type NewAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperator string

// NewAlertsSourceDataAttributesSourceType The alert source type
type NewAlertsSourceDataAttributesSourceType string

// NewAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesField Select the field on which the condition to be evaluated
type NewAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesField string

// NewAlertsSourceDataType defines model for NewAlertsSource.Data.Type.
type NewAlertsSourceDataType string

// NewAuthorization defines model for new_authorization.
type NewAuthorization struct {
	Data struct {
		Attributes struct {
			// AuthorizableId The id of the resource being accessed.
			AuthorizableId string `json:"authorizable_id"`

			// AuthorizableType The type of resource being accessed.
			AuthorizableType NewAuthorizationDataAttributesAuthorizableType `json:"authorizable_type"`

			// GranteeId The resource id granted access.
			GranteeId string `json:"grantee_id"`

			// GranteeType The type of resource granted access.
			GranteeType NewAuthorizationDataAttributesGranteeType   `json:"grantee_type"`
			Permissions []NewAuthorizationDataAttributesPermissions `json:"permissions"`
		} `json:"attributes"`
		Type NewAuthorizationDataType `json:"type"`
	} `json:"data"`
}

// NewAuthorizationDataAttributesAuthorizableType The type of resource being accessed.
type NewAuthorizationDataAttributesAuthorizableType string

// NewAuthorizationDataAttributesGranteeType The type of resource granted access.
type NewAuthorizationDataAttributesGranteeType string

// NewAuthorizationDataAttributesPermissions defines model for NewAuthorization.Data.Attributes.Permissions.
type NewAuthorizationDataAttributesPermissions string

// NewAuthorizationDataType defines model for NewAuthorization.Data.Type.
type NewAuthorizationDataType string

// NewCatalog defines model for new_catalog.
type NewCatalog struct {
	Data struct {
		Attributes struct {
			Description *string                       `json:"description"`
			Icon        *NewCatalogDataAttributesIcon `json:"icon,omitempty"`
			Name        string                        `json:"name"`

			// Position Default position of the catalog when displayed in a list.
			Position *int `json:"position"`
		} `json:"attributes"`
		Type NewCatalogDataType `json:"type"`
	} `json:"data"`
}

// NewCatalogDataAttributesIcon defines model for NewCatalog.Data.Attributes.Icon.
type NewCatalogDataAttributesIcon string

// NewCatalogDataType defines model for NewCatalog.Data.Type.
type NewCatalogDataType string

// NewCatalogEntity defines model for new_catalog_entity.
type NewCatalogEntity struct {
	Data struct {
		Attributes struct {
			Description *string `json:"description"`
			Name        string  `json:"name"`

			// Position Default position of the item when displayed in a list.
			Position *int `json:"position"`
		} `json:"attributes"`
		Type NewCatalogEntityDataType `json:"type"`
	} `json:"data"`
}

// NewCatalogEntityDataType defines model for NewCatalogEntity.Data.Type.
type NewCatalogEntityDataType string

// NewCatalogEntityProperty defines model for new_catalog_entity_property.
type NewCatalogEntityProperty struct {
	Data struct {
		Attributes struct {
			CatalogEntityId *string                                   `json:"catalog_entity_id,omitempty"`
			CatalogFieldId  string                                    `json:"catalog_field_id"`
			Key             NewCatalogEntityPropertyDataAttributesKey `json:"key"`
			Value           string                                    `json:"value"`
		} `json:"attributes"`
		Type NewCatalogEntityPropertyDataType `json:"type"`
	} `json:"data"`
}

// NewCatalogEntityPropertyDataAttributesKey defines model for NewCatalogEntityProperty.Data.Attributes.Key.
type NewCatalogEntityPropertyDataAttributesKey string

// NewCatalogEntityPropertyDataType defines model for NewCatalogEntityProperty.Data.Type.
type NewCatalogEntityPropertyDataType string

// NewCatalogField defines model for new_catalog_field.
type NewCatalogField struct {
	Data struct {
		Attributes struct {
			Kind NewCatalogFieldDataAttributesKind `json:"kind"`

			// KindCatalogId Restricts values to items of specified catalog.
			KindCatalogId *string `json:"kind_catalog_id"`

			// Multiple Whether the attribute accepts multiple values.
			Multiple *bool  `json:"multiple,omitempty"`
			Name     string `json:"name"`

			// Position Default position of the item when displayed in a list.
			Position *int `json:"position"`
		} `json:"attributes"`
		Type NewCatalogFieldDataType `json:"type"`
	} `json:"data"`
}

// NewCatalogFieldDataAttributesKind defines model for NewCatalogField.Data.Attributes.Kind.
type NewCatalogFieldDataAttributesKind string

// NewCatalogFieldDataType defines model for NewCatalogField.Data.Type.
type NewCatalogFieldDataType string

// NewCause defines model for new_cause.
type NewCause struct {
	Data struct {
		Attributes struct {
			// Description The description of the cause
			Description *string `json:"description"`

			// Name The name of the cause
			Name string `json:"name"`

			// Position Position of the cause
			Position *int `json:"position"`
		} `json:"attributes"`
		Type NewCauseDataType `json:"type"`
	} `json:"data"`
}

// NewCauseDataType defines model for NewCause.Data.Type.
type NewCauseDataType string

// NewCustomField defines model for new_custom_field.
type NewCustomField struct {
	Data struct {
		Attributes struct {
			// Default The default value for text field kinds
			Default *string `json:"default"`

			// Description The description of the custom_field
			Description *string `json:"description"`

			// Label The name of the custom_field
			Label string `json:"label"`

			// Position The position of the custom_field
			Position *int                                    `json:"position,omitempty"`
			Required *[]NewCustomFieldDataAttributesRequired `json:"required"`
			Shown    *[]NewCustomFieldDataAttributesShown    `json:"shown,omitempty"`
		} `json:"attributes"`
		Type NewCustomFieldDataType `json:"type"`
	} `json:"data"`
}

// NewCustomFieldDataAttributesRequired Where the custom_field is required
type NewCustomFieldDataAttributesRequired string

// NewCustomFieldDataAttributesShown Where the custom_field is shown
type NewCustomFieldDataAttributesShown string

// NewCustomFieldDataType defines model for NewCustomField.Data.Type.
type NewCustomFieldDataType string

// NewCustomFieldOption defines model for new_custom_field_option.
type NewCustomFieldOption struct {
	Data struct {
		Attributes struct {
			// Color The hex color of the custom_field_option
			Color   *string `json:"color,omitempty"`
			Default *bool   `json:"default,omitempty"`

			// Position The position of the custom_field_option
			Position *int `json:"position,omitempty"`

			// Value The value of the custom_field_option
			Value string `json:"value"`
		} `json:"attributes"`
		Type NewCustomFieldOptionDataType `json:"type"`
	} `json:"data"`
}

// NewCustomFieldOptionDataType defines model for NewCustomFieldOption.Data.Type.
type NewCustomFieldOptionDataType string

// NewCustomForm defines model for new_custom_form.
type NewCustomForm struct {
	Data struct {
		Attributes struct {
			// Command The Slack command used to trigger this form.
			Command     string  `json:"command"`
			Description *string `json:"description"`
			Enabled     *bool   `json:"enabled,omitempty"`

			// Name The name of the custom form.
			Name string `json:"name"`

			// Slug The custom form slug. Add this to form_field.shown or form_field.required to associate form fields with custom forms.
			Slug *string `json:"slug,omitempty"`
		} `json:"attributes"`
		Type NewCustomFormDataType `json:"type"`
	} `json:"data"`
}

// NewCustomFormDataType defines model for NewCustomForm.Data.Type.
type NewCustomFormDataType string

// NewDashboard defines model for new_dashboard.
type NewDashboard struct {
	Data struct {
		Attributes struct {
			// AutoRefresh Whether the dashboard auto-updates the UI with new data.
			AutoRefresh *bool `json:"auto_refresh,omitempty"`

			// Color The hex color of the dashboard
			Color *NewDashboardDataAttributesColor `json:"color"`

			// Description The description of the dashboard
			Description *string `json:"description"`

			// Icon The emoji icon of the dashboard
			Icon *string `json:"icon,omitempty"`

			// Name The name of the dashboard
			Name string `json:"name"`

			// Owner The owner type of the dashboard
			Owner NewDashboardDataAttributesOwner `json:"owner"`

			// Period The grouping period for dashboard panel data
			Period *NewDashboardDataAttributesPeriod `json:"period"`

			// Public Whether the dashboard is public
			Public *bool `json:"public,omitempty"`

			// Range The date range for dashboard panel data
			Range *string `json:"range"`
		} `json:"attributes"`
		Type NewDashboardDataType `json:"type"`
	} `json:"data"`
}

// NewDashboardDataAttributesColor The hex color of the dashboard
type NewDashboardDataAttributesColor string

// NewDashboardDataAttributesOwner The owner type of the dashboard
type NewDashboardDataAttributesOwner string

// NewDashboardDataAttributesPeriod The grouping period for dashboard panel data
type NewDashboardDataAttributesPeriod string

// NewDashboardDataType defines model for NewDashboard.Data.Type.
type NewDashboardDataType string

// NewEnvironment defines model for new_environment.
type NewEnvironment struct {
	Data struct {
		Attributes struct {
			// Color The hex color of the environment
			Color *string `json:"color"`

			// Description The description of the environment
			Description *string `json:"description"`

			// Name The name of the environment
			Name string `json:"name"`

			// NotifyEmails Emails to attach to the environment
			NotifyEmails *[]string `json:"notify_emails"`

			// Position Position of the environment
			Position *int `json:"position"`

			// SlackAliases Slack Aliases associated with this environment
			SlackAliases *[]struct {
				// Id Slack alias ID
				Id string `json:"id"`

				// Name Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// SlackChannels Slack Channels associated with this environment
			SlackChannels *[]struct {
				// Id Slack channel ID
				Id string `json:"id"`

				// Name Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type NewEnvironmentDataType `json:"type"`
	} `json:"data"`
}

// NewEnvironmentDataType defines model for NewEnvironment.Data.Type.
type NewEnvironmentDataType string

// NewEscalationLevel defines model for new_escalation_level.
type NewEscalationLevel struct {
	Data struct {
		Attributes struct {
			// Delay Delay before notification targets will be alerted.
			Delay *int `json:"delay,omitempty"`

			// EscalationPathId The ID of the dynamic escalation policy path the level will belong to. If nothing is specified it will add the level to your default path.
			EscalationPathId *string `json:"escalation_path_id"`

			// NotificationTargetParams Escalation level's notification targets
			NotificationTargetParams []struct {
				// Id The ID of notification target. If Slack channel, then id of the slack channel (eg. C06Q2JK7RQW)
				Id string `json:"id"`

				// Type The type of the notification target
				Type NewEscalationLevelDataAttributesNotificationTargetParamsType `json:"type"`
			} `json:"notification_target_params"`

			// Position Position of the escalation policy level
			Position int `json:"position"`
		} `json:"attributes"`
		Type NewEscalationLevelDataType `json:"type"`
	} `json:"data"`
}

// NewEscalationLevelDataAttributesNotificationTargetParamsType The type of the notification target
type NewEscalationLevelDataAttributesNotificationTargetParamsType string

// NewEscalationLevelDataType defines model for NewEscalationLevel.Data.Type.
type NewEscalationLevelDataType string

// NewEscalationPath defines model for new_escalation_path.
type NewEscalationPath struct {
	Data struct {
		Attributes struct {
			// Name The name of the escalation path
			Name string `json:"name"`

			// NotificationType Notification rule type to be used
			NotificationType *NewEscalationPathDataAttributesNotificationType `json:"notification_type,omitempty"`

			// Repeat Whether this path should be repeated until someone acknowledges the alert
			Repeat *bool `json:"repeat"`

			// RepeatCount The number of times this path will be executed until someone acknowledges the alert
			RepeatCount *int `json:"repeat_count"`

			// Rules Escalation path conditions
			Rules []struct {
				// JsonPath JSON path to extract value from payload
				JsonPath *string `json:"json_path,omitempty"`

				// Operator How JSON path value should be matched
				Operator *NewEscalationPathDataAttributesRulesOperator `json:"operator,omitempty"`

				// RuleType The type of the escalation path rule
				RuleType *NewEscalationPathDataAttributesRulesRuleType `json:"rule_type,omitempty"`

				// UrgencyIds Alert urgency ids for which this escalation path should be used
				UrgencyIds *[]interface{} `json:"urgency_ids,omitempty"`

				// Value Value with which JSON path value should be matched
				Value *string `json:"value,omitempty"`

				// WithinWorkingHour Whether the escalation path should be used within working hours
				WithinWorkingHour *bool `json:"within_working_hour,omitempty"`
			} `json:"rules"`
		} `json:"attributes"`
		Type NewEscalationPathDataType `json:"type"`
	} `json:"data"`
}

// NewEscalationPathDataAttributesNotificationType Notification rule type to be used
type NewEscalationPathDataAttributesNotificationType string

// NewEscalationPathDataAttributesRulesOperator How JSON path value should be matched
type NewEscalationPathDataAttributesRulesOperator string

// NewEscalationPathDataAttributesRulesRuleType The type of the escalation path rule
type NewEscalationPathDataAttributesRulesRuleType string

// NewEscalationPathDataType defines model for NewEscalationPath.Data.Type.
type NewEscalationPathDataType string

// NewEscalationPolicy defines model for new_escalation_policy.
type NewEscalationPolicy struct {
	Data struct {
		Attributes struct {
			// Description The description of the escalation policy
			Description *string `json:"description"`

			// GroupIds Associated groups (alerting the group will trigger escalation policy)
			GroupIds *[]string `json:"group_ids,omitempty"`

			// Name The name of the escalation policy
			Name string `json:"name"`

			// RepeatCount The number of times this policy will be executed until someone acknowledges the alert
			RepeatCount *int `json:"repeat_count,omitempty"`

			// ServiceIds Associated services (alerting the service will trigger escalation policy)
			ServiceIds *[]string `json:"service_ids,omitempty"`
		} `json:"attributes"`
		Type NewEscalationPolicyDataType `json:"type"`
	} `json:"data"`
}

// NewEscalationPolicyDataType defines model for NewEscalationPolicy.Data.Type.
type NewEscalationPolicyDataType string

// NewFormField defines model for new_form_field.
type NewFormField struct {
	Data struct {
		Attributes struct {
			DefaultValues *[]string `json:"default_values,omitempty"`

			// Description The description of the form field
			Description *string `json:"description"`

			// Enabled Whether the form field is enabled
			Enabled *bool `json:"enabled,omitempty"`

			// InputKind The input kind of the form field
			InputKind *NewFormFieldDataAttributesInputKind `json:"input_kind,omitempty"`

			// Kind The kind of the form field
			Kind NewFormFieldDataAttributesKind `json:"kind"`

			// Name The name of the form field
			Name     string    `json:"name"`
			Required *[]string `json:"required,omitempty"`

			// ShowOnIncidentDetails Whether the form field is shown on the incident details panel
			ShowOnIncidentDetails *bool     `json:"show_on_incident_details,omitempty"`
			Shown                 *[]string `json:"shown,omitempty"`

			// ValueKind The value kind of the form field
			ValueKind *NewFormFieldDataAttributesValueKind `json:"value_kind,omitempty"`

			// ValueKindCatalogId The ID of the catalog used when value_kind is `catalog_entity`
			ValueKindCatalogId *string `json:"value_kind_catalog_id"`
		} `json:"attributes"`
		Type NewFormFieldDataType `json:"type"`
	} `json:"data"`
}

// NewFormFieldDataAttributesInputKind The input kind of the form field
type NewFormFieldDataAttributesInputKind string

// NewFormFieldDataAttributesKind The kind of the form field
type NewFormFieldDataAttributesKind string

// NewFormFieldDataAttributesValueKind The value kind of the form field
type NewFormFieldDataAttributesValueKind string

// NewFormFieldDataType defines model for NewFormField.Data.Type.
type NewFormFieldDataType string

// NewFormFieldOption defines model for new_form_field_option.
type NewFormFieldOption struct {
	Data struct {
		Attributes struct {
			// Color The hex color of the form_field_option
			Color   *string `json:"color,omitempty"`
			Default *bool   `json:"default,omitempty"`

			// FormFieldId The ID of the form field
			FormFieldId string `json:"form_field_id"`

			// Position The position of the form_field_option
			Position *int `json:"position,omitempty"`

			// Value The value of the form_field_option
			Value string `json:"value"`
		} `json:"attributes"`
		Type NewFormFieldOptionDataType `json:"type"`
	} `json:"data"`
}

// NewFormFieldOptionDataType defines model for NewFormFieldOption.Data.Type.
type NewFormFieldOptionDataType string

// NewFormFieldPlacement defines model for new_form_field_placement.
type NewFormFieldPlacement struct {
	Data struct {
		Attributes struct {
			// Form The form this field is placed on.
			Form string `json:"form"`

			// FormSetId The form set this field is placed in.
			FormSetId string `json:"form_set_id"`

			// PlacementOperator Logical operator when evaluating multiple form_field_placement_conditions with conditioned=placement
			PlacementOperator *NewFormFieldPlacementDataAttributesPlacementOperator `json:"placement_operator,omitempty"`

			// Position The position of the field placement.
			Position *int `json:"position,omitempty"`

			// Required Whether the field is unconditionally required on this form.
			Required *bool `json:"required,omitempty"`

			// RequiredOperator Logical operator when evaluating multiple form_field_placement_conditions with conditioned=required
			RequiredOperator *NewFormFieldPlacementDataAttributesRequiredOperator `json:"required_operator,omitempty"`
		} `json:"attributes"`
		Type NewFormFieldPlacementDataType `json:"type"`
	} `json:"data"`
}

// NewFormFieldPlacementDataAttributesPlacementOperator Logical operator when evaluating multiple form_field_placement_conditions with conditioned=placement
type NewFormFieldPlacementDataAttributesPlacementOperator string

// NewFormFieldPlacementDataAttributesRequiredOperator Logical operator when evaluating multiple form_field_placement_conditions with conditioned=required
type NewFormFieldPlacementDataAttributesRequiredOperator string

// NewFormFieldPlacementDataType defines model for NewFormFieldPlacement.Data.Type.
type NewFormFieldPlacementDataType string

// NewFormFieldPlacementCondition defines model for new_form_field_placement_condition.
type NewFormFieldPlacementCondition struct {
	Data struct {
		Attributes struct {
			// Comparison The condition comparison.
			Comparison NewFormFieldPlacementConditionDataAttributesComparison `json:"comparison"`

			// Conditioned The resource or attribute the condition applies.
			Conditioned NewFormFieldPlacementConditionDataAttributesConditioned `json:"conditioned"`

			// FormFieldId The condition field.
			FormFieldId string `json:"form_field_id"`

			// Position The condition position.
			Position *int `json:"position,omitempty"`

			// Values The values for comparison.
			Values []string `json:"values"`
		} `json:"attributes"`
		Type NewFormFieldPlacementConditionDataType `json:"type"`
	} `json:"data"`
}

// NewFormFieldPlacementConditionDataAttributesComparison The condition comparison.
type NewFormFieldPlacementConditionDataAttributesComparison string

// NewFormFieldPlacementConditionDataAttributesConditioned The resource or attribute the condition applies.
type NewFormFieldPlacementConditionDataAttributesConditioned string

// NewFormFieldPlacementConditionDataType defines model for NewFormFieldPlacementCondition.Data.Type.
type NewFormFieldPlacementConditionDataType string

// NewFormFieldPosition defines model for new_form_field_position.
type NewFormFieldPosition struct {
	Data struct {
		Attributes struct {
			// Form The form for the position
			Form NewFormFieldPositionDataAttributesForm `json:"form"`

			// FormFieldId The ID of the form field.
			FormFieldId string `json:"form_field_id"`

			// Position The position of the form_field_position
			Position int `json:"position"`
		} `json:"attributes"`
		Type NewFormFieldPositionDataType `json:"type"`
	} `json:"data"`
}

// NewFormFieldPositionDataAttributesForm The form for the position
type NewFormFieldPositionDataAttributesForm string

// NewFormFieldPositionDataType defines model for NewFormFieldPosition.Data.Type.
type NewFormFieldPositionDataType string

// NewFormSet defines model for new_form_set.
type NewFormSet struct {
	Data struct {
		Attributes struct {
			// Forms The forms included in the form set. Add custom forms using the custom form's `slug` field. Or choose a built-in form: `web_new_incident_form`, `web_update_incident_form`, `web_incident_post_mortem_form`, `web_incident_mitigation_form`, `web_incident_resolution_form`, `web_incident_cancellation_form`, `web_scheduled_incident_form`, `web_update_scheduled_incident_form`, `slack_new_incident_form`, `slack_update_incident_form`, `slack_update_incident_status_form`, `slack_incident_mitigation_form`, `slack_incident_resolution_form`, `slack_incident_cancellation_form`, `slack_scheduled_incident_form`, `slack_update_scheduled_incident_form`
			Forms []string `json:"forms"`

			// Name The name of the form set
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewFormSetDataType `json:"type"`
	} `json:"data"`
}

// NewFormSetDataType defines model for NewFormSet.Data.Type.
type NewFormSetDataType string

// NewFormSetCondition defines model for new_form_set_condition.
type NewFormSetCondition struct {
	Data struct {
		Attributes struct {
			// Comparison The condition comparison.
			Comparison NewFormSetConditionDataAttributesComparison `json:"comparison"`

			// FormFieldId The form field this condition applies.
			FormFieldId string `json:"form_field_id"`

			// Values The values for comparison.
			Values []string `json:"values"`
		} `json:"attributes"`
		Type NewFormSetConditionDataType `json:"type"`
	} `json:"data"`
}

// NewFormSetConditionDataAttributesComparison The condition comparison.
type NewFormSetConditionDataAttributesComparison string

// NewFormSetConditionDataType defines model for NewFormSetCondition.Data.Type.
type NewFormSetConditionDataType string

// NewFunctionality defines model for new_functionality.
type NewFunctionality struct {
	Data struct {
		Attributes struct {
			// BackstageId The Backstage entity id associated to this functionality. eg: :namespace/:kind/:entity_name
			BackstageId *string `json:"backstage_id"`

			// Color The hex color of the functionality
			Color *string `json:"color"`

			// CortexId The Cortex group id associated to this functionality
			CortexId *string `json:"cortex_id"`

			// Description The description of the functionality
			Description *string `json:"description"`

			// EnvironmentIds Environments associated with this functionality
			EnvironmentIds *[]string `json:"environment_ids"`

			// ExternalId The external id associated to this functionality
			ExternalId *string `json:"external_id"`

			// Name The name of the functionality
			Name string `json:"name"`

			// NotifyEmails Emails to attach to the functionality
			NotifyEmails *[]string `json:"notify_emails"`

			// OpsgenieId The Opsgenie service id associated to this functionality
			OpsgenieId *string `json:"opsgenie_id"`

			// OpsgenieTeamId The Opsgenie team id associated to this functionality
			OpsgenieTeamId *string `json:"opsgenie_team_id"`

			// OwnersGroupIds Owner Teams associated with this functionality
			OwnersGroupIds *[]string `json:"owners_group_ids"`

			// OwnersUserIds Owner Users associated with this functionality
			OwnersUserIds *[]int `json:"owners_user_ids"`

			// PagerdutyId The PagerDuty service id associated to this functionality
			PagerdutyId *string `json:"pagerduty_id"`

			// Position Position of the functionality
			Position *int `json:"position"`

			// PublicDescription The public description of the functionality
			PublicDescription *string `json:"public_description"`

			// ServiceIds Services associated with this functionality
			ServiceIds *[]string `json:"service_ids"`

			// ServiceNowCiSysId The Service Now CI sys id associated to this functionality
			ServiceNowCiSysId *string `json:"service_now_ci_sys_id"`

			// ShowUptime Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// ShowUptimeLastDays Show uptime over x days
			ShowUptimeLastDays *NewFunctionalityDataAttributesShowUptimeLastDays `json:"show_uptime_last_days"`

			// SlackAliases Slack Aliases associated with this functionality
			SlackAliases *[]struct {
				// Id Slack alias ID
				Id string `json:"id"`

				// Name Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// SlackChannels Slack Channels associated with this functionality
			SlackChannels *[]struct {
				// Id Slack channel ID
				Id string `json:"id"`

				// Name Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type NewFunctionalityDataType `json:"type"`
	} `json:"data"`
}

// NewFunctionalityDataAttributesShowUptimeLastDays Show uptime over x days
type NewFunctionalityDataAttributesShowUptimeLastDays int

// NewFunctionalityDataType defines model for NewFunctionality.Data.Type.
type NewFunctionalityDataType string

// NewHeartbeat defines model for new_heartbeat.
type NewHeartbeat struct {
	Data struct {
		Attributes struct {
			// AlertSummary Summary of alerts triggered when heartbeat expires.
			AlertSummary string `json:"alert_summary"`

			// AlertUrgencyId Urgency of alerts triggered when heartbeat expires.
			AlertUrgencyId *string `json:"alert_urgency_id"`

			// Description The description of the heartbeat
			Description *string `json:"description"`

			// Enabled Whether to trigger alerts when heartbeat is expired.
			Enabled      *bool                                  `json:"enabled,omitempty"`
			Interval     int                                    `json:"interval"`
			IntervalUnit NewHeartbeatDataAttributesIntervalUnit `json:"interval_unit"`

			// Name The name of the heartbeat
			Name                   string                                           `json:"name"`
			NotificationTargetId   string                                           `json:"notification_target_id"`
			NotificationTargetType NewHeartbeatDataAttributesNotificationTargetType `json:"notification_target_type"`
		} `json:"attributes"`
		Type NewHeartbeatDataType `json:"type"`
	} `json:"data"`
}

// NewHeartbeatDataAttributesIntervalUnit defines model for NewHeartbeat.Data.Attributes.IntervalUnit.
type NewHeartbeatDataAttributesIntervalUnit string

// NewHeartbeatDataAttributesNotificationTargetType defines model for NewHeartbeat.Data.Attributes.NotificationTargetType.
type NewHeartbeatDataAttributesNotificationTargetType string

// NewHeartbeatDataType defines model for NewHeartbeat.Data.Type.
type NewHeartbeatDataType string

// NewIncident defines model for new_incident.
type NewIncident struct {
	Data struct {
		Attributes struct {
			// AcknowledgedAt Date of acknowledgment
			AcknowledgedAt *string `json:"acknowledged_at"`

			// CancelledAt Date of cancellation
			CancelledAt *string `json:"cancelled_at"`

			// CauseIds The Cause ID's to attach to the incident
			CauseIds *[]string `json:"cause_ids"`

			// DetectedAt Date of detection
			DetectedAt *string `json:"detected_at"`

			// EnvironmentIds The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// FunctionalityIds The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// GroupIds The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// InTriageAt Date of triage
			InTriageAt *string `json:"in_triage_at"`

			// IncidentTypeIds The Incident Type ID's to attach to the incident
			IncidentTypeIds *[]string `json:"incident_type_ids"`

			// Kind The kind of the incident
			Kind *NewIncidentDataAttributesKind `json:"kind"`

			// Labels Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// MitigatedAt Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// NotifyEmails Emails you want to notify
			NotifyEmails *[]string `json:"notify_emails"`

			// ParentIncidentId ID of parent incident
			ParentIncidentId *string `json:"parent_incident_id"`

			// Private Create an incident as private. Once an incident is made as private it cannot be undone
			Private *bool `json:"private"`

			// ResolvedAt Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// ScheduledFor Date of when the maintenance begins
			ScheduledFor *string `json:"scheduled_for"`

			// ScheduledUntil Date of when the maintenance ends
			ScheduledUntil *string `json:"scheduled_until"`

			// ServiceIds The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// SeverityId The Severity ID to attach to the incident
			SeverityId *string `json:"severity_id"`

			// SlackChannelName Slack channel name
			SlackChannelName *string `json:"slack_channel_name"`

			// StartedAt Date of start
			StartedAt *string `json:"started_at"`

			// Status The status of the incident
			Status *NewIncidentDataAttributesStatus `json:"status,omitempty"`

			// Summary The summary of the incident
			Summary *string `json:"summary"`

			// Title The title of the incident. We will autogenerate one if null
			Title *string `json:"title"`

			// Url The url to the incident
			Url *string `json:"url,omitempty"`

			// UserId User ID of the creator of the incident. Default to the user attached to the Api Key
			UserId *string `json:"user_id"`
		} `json:"attributes"`
		Type NewIncidentDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentDataAttributesKind The kind of the incident
type NewIncidentDataAttributesKind string

// NewIncidentDataAttributesStatus The status of the incident
type NewIncidentDataAttributesStatus string

// NewIncidentDataType defines model for NewIncident.Data.Type.
type NewIncidentDataType string

// NewIncidentActionItem defines model for new_incident_action_item.
type NewIncidentActionItem struct {
	Data struct {
		Attributes struct {
			// AssignedToGroupIds IDs of groups you wish to assign this action item
			AssignedToGroupIds *[]string `json:"assigned_to_group_ids,omitempty"`

			// AssignedToUserId ID of user you wish to assign this action item
			AssignedToUserId *int `json:"assigned_to_user_id"`

			// Description The description of the action item
			Description *string `json:"description"`

			// DueDate The due date of the action item
			DueDate *string `json:"due_date"`

			// Kind The kind of the action item
			Kind *NewIncidentActionItemDataAttributesKind `json:"kind,omitempty"`

			// Priority The priority of the action item
			Priority *NewIncidentActionItemDataAttributesPriority `json:"priority,omitempty"`

			// Status The status of the action item
			Status *NewIncidentActionItemDataAttributesStatus `json:"status,omitempty"`

			// Summary The summary of the action item
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type NewIncidentActionItemDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentActionItemDataAttributesKind The kind of the action item
type NewIncidentActionItemDataAttributesKind string

// NewIncidentActionItemDataAttributesPriority The priority of the action item
type NewIncidentActionItemDataAttributesPriority string

// NewIncidentActionItemDataAttributesStatus The status of the action item
type NewIncidentActionItemDataAttributesStatus string

// NewIncidentActionItemDataType defines model for NewIncidentActionItem.Data.Type.
type NewIncidentActionItemDataType string

// NewIncidentCustomFieldSelection defines model for new_incident_custom_field_selection.
type NewIncidentCustomFieldSelection struct {
	Data struct {
		Attributes struct {
			// CustomFieldId The custom field for this selection
			CustomFieldId     int    `json:"custom_field_id"`
			SelectedOptionIds *[]int `json:"selected_option_ids,omitempty"`

			// Value The selected value for text kind custom fields
			Value *string `json:"value"`
		} `json:"attributes"`
		Type NewIncidentCustomFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentCustomFieldSelectionDataType defines model for NewIncidentCustomFieldSelection.Data.Type.
type NewIncidentCustomFieldSelectionDataType string

// NewIncidentEvent defines model for new_incident_event.
type NewIncidentEvent struct {
	Data struct {
		Attributes struct {
			// Event The summary of the incident event
			Event string `json:"event"`

			// Visibility The visibility of the incident action item
			Visibility *NewIncidentEventDataAttributesVisibility `json:"visibility,omitempty"`
		} `json:"attributes"`
		Type NewIncidentEventDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentEventDataAttributesVisibility The visibility of the incident action item
type NewIncidentEventDataAttributesVisibility string

// NewIncidentEventDataType defines model for NewIncidentEvent.Data.Type.
type NewIncidentEventDataType string

// NewIncidentEventFunctionality defines model for new_incident_event_functionality.
type NewIncidentEventFunctionality struct {
	Data struct {
		Attributes struct {
			// FunctionalityId The ID of the functionality.
			FunctionalityId string `json:"functionality_id"`

			// IncidentEventId The ID of the incident event.
			IncidentEventId string `json:"incident_event_id"`

			// Status The status of the affected functionality
			Status NewIncidentEventFunctionalityDataAttributesStatus `json:"status"`
		} `json:"attributes"`
		Type NewIncidentEventFunctionalityDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentEventFunctionalityDataAttributesStatus The status of the affected functionality
type NewIncidentEventFunctionalityDataAttributesStatus string

// NewIncidentEventFunctionalityDataType defines model for NewIncidentEventFunctionality.Data.Type.
type NewIncidentEventFunctionalityDataType string

// NewIncidentEventService defines model for new_incident_event_service.
type NewIncidentEventService struct {
	Data struct {
		Attributes struct {
			// IncidentEventId The ID of the incident event.
			IncidentEventId string `json:"incident_event_id"`

			// ServiceId The ID of the service.
			ServiceId string `json:"service_id"`

			// Status The status of the affected service
			Status NewIncidentEventServiceDataAttributesStatus `json:"status"`
		} `json:"attributes"`
		Type NewIncidentEventServiceDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentEventServiceDataAttributesStatus The status of the affected service
type NewIncidentEventServiceDataAttributesStatus string

// NewIncidentEventServiceDataType defines model for NewIncidentEventService.Data.Type.
type NewIncidentEventServiceDataType string

// NewIncidentFeedback defines model for new_incident_feedback.
type NewIncidentFeedback struct {
	Data struct {
		Attributes struct {
			// Anonymous Is the feedback anonymous?
			Anonymous *bool `json:"anonymous,omitempty"`

			// Feedback The feedback of the incident feedback
			Feedback string `json:"feedback"`

			// Rating The rating of the incident feedback
			Rating NewIncidentFeedbackDataAttributesRating `json:"rating"`
		} `json:"attributes"`
		Type NewIncidentFeedbackDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentFeedbackDataAttributesRating The rating of the incident feedback
type NewIncidentFeedbackDataAttributesRating int

// NewIncidentFeedbackDataType defines model for NewIncidentFeedback.Data.Type.
type NewIncidentFeedbackDataType string

// NewIncidentFormFieldSelection defines model for new_incident_form_field_selection.
type NewIncidentFormFieldSelection struct {
	Data struct {
		Attributes struct {
			// FormFieldId The custom field for this selection
			FormFieldId              string    `json:"form_field_id"`
			IncidentId               string    `json:"incident_id"`
			SelectedCatalogEntityIds *[]string `json:"selected_catalog_entity_ids,omitempty"`
			SelectedFunctionalityIds *[]string `json:"selected_functionality_ids,omitempty"`
			SelectedGroupIds         *[]string `json:"selected_group_ids,omitempty"`
			SelectedOptionIds        *[]string `json:"selected_option_ids,omitempty"`
			SelectedServiceIds       *[]string `json:"selected_service_ids,omitempty"`
			SelectedUserIds          *[]int    `json:"selected_user_ids,omitempty"`

			// Value The selected value for text kind custom fields
			Value *string `json:"value"`
		} `json:"attributes"`
		Type NewIncidentFormFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentFormFieldSelectionDataType defines model for NewIncidentFormFieldSelection.Data.Type.
type NewIncidentFormFieldSelectionDataType string

// NewIncidentPermissionSet defines model for new_incident_permission_set.
type NewIncidentPermissionSet struct {
	Data struct {
		Attributes struct {
			// Description The incident permission set description.
			Description *string `json:"description"`

			// Name The incident permission set name.
			Name                       string                                                              `json:"name"`
			PrivateIncidentPermissions *[]NewIncidentPermissionSetDataAttributesPrivateIncidentPermissions `json:"private_incident_permissions,omitempty"`
			PublicIncidentPermissions  *[]NewIncidentPermissionSetDataAttributesPublicIncidentPermissions  `json:"public_incident_permissions,omitempty"`

			// Slug The incident permission set slug.
			Slug *string `json:"slug,omitempty"`
		} `json:"attributes"`
		Type NewIncidentPermissionSetDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentPermissionSetDataAttributesPrivateIncidentPermissions defines model for NewIncidentPermissionSet.Data.Attributes.PrivateIncidentPermissions.
type NewIncidentPermissionSetDataAttributesPrivateIncidentPermissions string

// NewIncidentPermissionSetDataAttributesPublicIncidentPermissions defines model for NewIncidentPermissionSet.Data.Attributes.PublicIncidentPermissions.
type NewIncidentPermissionSetDataAttributesPublicIncidentPermissions string

// NewIncidentPermissionSetDataType defines model for NewIncidentPermissionSet.Data.Type.
type NewIncidentPermissionSetDataType string

// NewIncidentPermissionSetBoolean defines model for new_incident_permission_set_boolean.
type NewIncidentPermissionSetBoolean struct {
	Data struct {
		Attributes struct {
			Enabled                 *bool                                             `json:"enabled,omitempty"`
			IncidentPermissionSetId string                                            `json:"incident_permission_set_id"`
			Kind                    NewIncidentPermissionSetBooleanDataAttributesKind `json:"kind"`
			Private                 *bool                                             `json:"private,omitempty"`
			SeverityParams          *struct {
				// AppliesToUnassigned Whether permissions are enabled for incident without severity
				AppliesToUnassigned *bool `json:"applies_to_unassigned,omitempty"`

				// CreateEnabled Whether permissions are enabled when creating incident
				CreateEnabled *bool `json:"create_enabled,omitempty"`

				// FullyEnabled Whether permissions are enabled for any severity incident
				FullyEnabled *bool `json:"fully_enabled,omitempty"`

				// SeverityIds Severity ids that determine if an incident is permitted based on matching severity
				SeverityIds *[]string `json:"severity_ids"`
			} `json:"severity_params,omitempty"`
		} `json:"attributes"`
		Type NewIncidentPermissionSetBooleanDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentPermissionSetBooleanDataAttributesKind defines model for NewIncidentPermissionSetBoolean.Data.Attributes.Kind.
type NewIncidentPermissionSetBooleanDataAttributesKind string

// NewIncidentPermissionSetBooleanDataType defines model for NewIncidentPermissionSetBoolean.Data.Type.
type NewIncidentPermissionSetBooleanDataType string

// NewIncidentPermissionSetResource defines model for new_incident_permission_set_resource.
type NewIncidentPermissionSetResource struct {
	Data struct {
		Attributes struct {
			IncidentPermissionSetId string                                             `json:"incident_permission_set_id"`
			Kind                    NewIncidentPermissionSetResourceDataAttributesKind `json:"kind"`
			Private                 *bool                                              `json:"private,omitempty"`
			ResourceId              *string                                            `json:"resource_id,omitempty"`
			ResourceType            *string                                            `json:"resource_type,omitempty"`
			SeverityParams          *struct {
				// AppliesToUnassigned Whether permissions are enabled for incident without severity
				AppliesToUnassigned *bool `json:"applies_to_unassigned,omitempty"`

				// CreateEnabled Whether permissions are enabled when creating incident
				CreateEnabled *bool `json:"create_enabled,omitempty"`

				// FullyEnabled Whether permissions are enabled for any severity incident
				FullyEnabled *bool `json:"fully_enabled,omitempty"`

				// SeverityIds Severity ids that determine if an incident is permitted based on matching severity
				SeverityIds *[]string `json:"severity_ids"`
			} `json:"severity_params,omitempty"`
		} `json:"attributes"`
		Type NewIncidentPermissionSetResourceDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentPermissionSetResourceDataAttributesKind defines model for NewIncidentPermissionSetResource.Data.Attributes.Kind.
type NewIncidentPermissionSetResourceDataAttributesKind string

// NewIncidentPermissionSetResourceDataType defines model for NewIncidentPermissionSetResource.Data.Type.
type NewIncidentPermissionSetResourceDataType string

// NewIncidentRole defines model for new_incident_role.
type NewIncidentRole struct {
	Data struct {
		Attributes struct {
			AllowMultiUserAssignment *bool `json:"allow_multi_user_assignment,omitempty"`

			// Description The description of the incident role
			Description *string `json:"description"`
			Enabled     *bool   `json:"enabled,omitempty"`

			// Name The name of the incident role
			Name     string `json:"name"`
			Optional *bool  `json:"optional,omitempty"`

			// Position Position of the incident role
			Position *int `json:"position"`

			// Summary The summary of the incident role
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type NewIncidentRoleDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentRoleDataType defines model for NewIncidentRole.Data.Type.
type NewIncidentRoleDataType string

// NewIncidentRoleTask defines model for new_incident_role_task.
type NewIncidentRoleTask struct {
	Data struct {
		Attributes struct {
			// Description The description of the incident task
			Description    *string `json:"description"`
			IncidentRoleId *string `json:"incident_role_id,omitempty"`

			// Priority The priority of the incident task
			Priority *NewIncidentRoleTaskDataAttributesPriority `json:"priority,omitempty"`

			// Task The task of the incident task
			Task string `json:"task"`
		} `json:"attributes"`
		Type NewIncidentRoleTaskDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentRoleTaskDataAttributesPriority The priority of the incident task
type NewIncidentRoleTaskDataAttributesPriority string

// NewIncidentRoleTaskDataType defines model for NewIncidentRoleTask.Data.Type.
type NewIncidentRoleTaskDataType string

// NewIncidentStatusPageEvent defines model for new_incident_status_page_event.
type NewIncidentStatusPageEvent struct {
	Data struct {
		Attributes struct {
			// Event The summary of the incident event
			Event string `json:"event"`

			// NotifySubscribers Notify all status pages subscribers
			NotifySubscribers *bool `json:"notify_subscribers"`

			// ShouldTweet For Statuspage.io integrated pages auto publishes a tweet for your update
			ShouldTweet *bool `json:"should_tweet"`

			// Status The status of the incident event
			Status *NewIncidentStatusPageEventDataAttributesStatus `json:"status,omitempty"`

			// StatusPageId Unique ID of the status page you wish to post the event to
			StatusPageId *string `json:"status_page_id,omitempty"`
		} `json:"attributes"`
		Type NewIncidentStatusPageEventDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentStatusPageEventDataAttributesStatus The status of the incident event
type NewIncidentStatusPageEventDataAttributesStatus string

// NewIncidentStatusPageEventDataType defines model for NewIncidentStatusPageEvent.Data.Type.
type NewIncidentStatusPageEventDataType string

// NewIncidentSubStatus defines model for new_incident_sub_status.
type NewIncidentSubStatus struct {
	Data struct {
		Attributes struct {
			AssignedAt       string `json:"assigned_at"`
			AssignedByUserId *int   `json:"assigned_by_user_id"`

			// SubStatusId Note: To change an incident's sub-status, use the PATCH /incidents/:id endpoint and set the sub_status_id attribute. This endpoint is for modifying the timestamp of when an incident's sub-status was assigned.
			SubStatusId string `json:"sub_status_id"`
		} `json:"attributes"`
		Type NewIncidentSubStatusDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentSubStatusDataType defines model for NewIncidentSubStatus.Data.Type.
type NewIncidentSubStatusDataType string

// NewIncidentType defines model for new_incident_type.
type NewIncidentType struct {
	Data struct {
		Attributes struct {
			// Color The hex color of the incident type
			Color *string `json:"color"`

			// Description The description of the incident type
			Description *string `json:"description"`

			// Name The name of the incident type
			Name string `json:"name"`

			// NotifyEmails Emails to attach to the incident type
			NotifyEmails *[]string `json:"notify_emails"`

			// Position Position of the incident type
			Position *int `json:"position"`

			// SlackAliases Slack Aliases associated with this incident type
			SlackAliases *[]struct {
				// Id Slack alias ID
				Id string `json:"id"`

				// Name Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// SlackChannels Slack Channels associated with this incident type
			SlackChannels *[]struct {
				// Id Slack channel ID
				Id string `json:"id"`

				// Name Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type NewIncidentTypeDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentTypeDataType defines model for NewIncidentType.Data.Type.
type NewIncidentTypeDataType string

// NewLiveCallRouter defines model for new_live_call_router.
type NewLiveCallRouter struct {
	Data struct {
		Attributes struct {
			// AlertUrgencyId This is used in escalation paths to determine who to page
			AlertUrgencyId *string `json:"alert_urgency_id,omitempty"`

			// CallerGreeting The caller greeting message of the live_call_router
			CallerGreeting *string `json:"caller_greeting,omitempty"`

			// CountryCode The country code of the live_call_router
			CountryCode NewLiveCallRouterDataAttributesCountryCode `json:"country_code"`

			// Enabled Whether the live_call_router is enabled
			Enabled *bool `json:"enabled,omitempty"`

			// EscalationLevelDelayInSeconds This overrides the delay (seconds) in escalation levels
			EscalationLevelDelayInSeconds *int `json:"escalation_level_delay_in_seconds,omitempty"`
			EscalationPolicyTriggerParams struct {
				// Id The ID of notification target
				Id string `json:"id"`

				// Type The type of the notification target
				Type NewLiveCallRouterDataAttributesEscalationPolicyTriggerParamsType `json:"type"`
			} `json:"escalation_policy_trigger_params"`

			// Kind The kind of the live_call_router
			Kind NewLiveCallRouterDataAttributesKind `json:"kind"`

			// Name The name of the live_call_router
			Name string `json:"name"`

			// PhoneNumber You can select a phone number using [generate_phone_number](#//api/v1/live_call_routers/generate_phone_number) API and pass that phone number here to register
			PhoneNumber string `json:"phone_number"`

			// PhoneType The phone type of the live_call_router
			PhoneType NewLiveCallRouterDataAttributesPhoneType `json:"phone_type"`

			// SentToVoicemailDelay The delay (seconds) after which the caller in redirected to voicemail
			SentToVoicemailDelay *int `json:"sent_to_voicemail_delay,omitempty"`

			// ShouldAutoResolveAlertOnCallEnd This overrides the delay (seconds) in escalation levels
			ShouldAutoResolveAlertOnCallEnd *bool `json:"should_auto_resolve_alert_on_call_end,omitempty"`

			// ShouldRedirectToVoicemailOnNoAnswer This prompts the caller to choose voicemail or connect live
			ShouldRedirectToVoicemailOnNoAnswer *bool `json:"should_redirect_to_voicemail_on_no_answer,omitempty"`

			// VoicemailGreeting The voicemail greeting of the live_call_router
			VoicemailGreeting *string `json:"voicemail_greeting,omitempty"`

			// WaitingMusicUrl The waiting music URL of the live_call_router
			WaitingMusicUrl *string `json:"waiting_music_url,omitempty"`
		} `json:"attributes"`
		Type NewLiveCallRouterDataType `json:"type"`
	} `json:"data"`
}

// NewLiveCallRouterDataAttributesCountryCode The country code of the live_call_router
type NewLiveCallRouterDataAttributesCountryCode string

// NewLiveCallRouterDataAttributesEscalationPolicyTriggerParamsType The type of the notification target
type NewLiveCallRouterDataAttributesEscalationPolicyTriggerParamsType string

// NewLiveCallRouterDataAttributesKind The kind of the live_call_router
type NewLiveCallRouterDataAttributesKind string

// NewLiveCallRouterDataAttributesPhoneType The phone type of the live_call_router
type NewLiveCallRouterDataAttributesPhoneType string

// NewLiveCallRouterDataType defines model for NewLiveCallRouter.Data.Type.
type NewLiveCallRouterDataType string

// NewOnCallRole defines model for new_on_call_role.
type NewOnCallRole struct {
	Data struct {
		Attributes struct {
			AlertSourcesPermissions       *[]NewOnCallRoleDataAttributesAlertSourcesPermissions       `json:"alert_sources_permissions,omitempty"`
			AlertUrgencyPermissions       *[]NewOnCallRoleDataAttributesAlertUrgencyPermissions       `json:"alert_urgency_permissions,omitempty"`
			AlertsPermissions             *[]NewOnCallRoleDataAttributesAlertsPermissions             `json:"alerts_permissions,omitempty"`
			ApiKeysPermissions            *[]NewOnCallRoleDataAttributesApiKeysPermissions            `json:"api_keys_permissions,omitempty"`
			AuditsPermissions             *[]NewOnCallRoleDataAttributesAuditsPermissions             `json:"audits_permissions,omitempty"`
			ContactsPermissions           *[]NewOnCallRoleDataAttributesContactsPermissions           `json:"contacts_permissions,omitempty"`
			EscalationPoliciesPermissions *[]NewOnCallRoleDataAttributesEscalationPoliciesPermissions `json:"escalation_policies_permissions,omitempty"`
			GroupsPermissions             *[]NewOnCallRoleDataAttributesGroupsPermissions             `json:"groups_permissions,omitempty"`
			HeartbeatsPermissions         *[]NewOnCallRoleDataAttributesHeartbeatsPermissions         `json:"heartbeats_permissions,omitempty"`
			IntegrationsPermissions       *[]NewOnCallRoleDataAttributesIntegrationsPermissions       `json:"integrations_permissions,omitempty"`
			InvitationsPermissions        *[]NewOnCallRoleDataAttributesInvitationsPermissions        `json:"invitations_permissions,omitempty"`
			LiveCallRoutingPermissions    *[]NewOnCallRoleDataAttributesLiveCallRoutingPermissions    `json:"live_call_routing_permissions,omitempty"`

			// Name The role name.
			Name                        string                                                    `json:"name"`
			ScheduleOverridePermissions *[]NewOnCallRoleDataAttributesScheduleOverridePermissions `json:"schedule_override_permissions,omitempty"`
			SchedulesPermissions        *[]NewOnCallRoleDataAttributesSchedulesPermissions        `json:"schedules_permissions,omitempty"`
			ServicesPermissions         *[]NewOnCallRoleDataAttributesServicesPermissions         `json:"services_permissions,omitempty"`

			// Slug The role slug.
			Slug *string `json:"slug,omitempty"`

			// SystemRole The kind of role (user and custom type roles are only editable)
			SystemRole           string                                             `json:"system_role"`
			WebhooksPermissions  *[]NewOnCallRoleDataAttributesWebhooksPermissions  `json:"webhooks_permissions,omitempty"`
			WorkflowsPermissions *[]NewOnCallRoleDataAttributesWorkflowsPermissions `json:"workflows_permissions,omitempty"`
		} `json:"attributes"`
		Type NewOnCallRoleDataType `json:"type"`
	} `json:"data"`
}

// NewOnCallRoleDataAttributesAlertSourcesPermissions defines model for NewOnCallRole.Data.Attributes.AlertSourcesPermissions.
type NewOnCallRoleDataAttributesAlertSourcesPermissions string

// NewOnCallRoleDataAttributesAlertUrgencyPermissions defines model for NewOnCallRole.Data.Attributes.AlertUrgencyPermissions.
type NewOnCallRoleDataAttributesAlertUrgencyPermissions string

// NewOnCallRoleDataAttributesAlertsPermissions defines model for NewOnCallRole.Data.Attributes.AlertsPermissions.
type NewOnCallRoleDataAttributesAlertsPermissions string

// NewOnCallRoleDataAttributesApiKeysPermissions defines model for NewOnCallRole.Data.Attributes.ApiKeysPermissions.
type NewOnCallRoleDataAttributesApiKeysPermissions string

// NewOnCallRoleDataAttributesAuditsPermissions defines model for NewOnCallRole.Data.Attributes.AuditsPermissions.
type NewOnCallRoleDataAttributesAuditsPermissions string

// NewOnCallRoleDataAttributesContactsPermissions defines model for NewOnCallRole.Data.Attributes.ContactsPermissions.
type NewOnCallRoleDataAttributesContactsPermissions string

// NewOnCallRoleDataAttributesEscalationPoliciesPermissions defines model for NewOnCallRole.Data.Attributes.EscalationPoliciesPermissions.
type NewOnCallRoleDataAttributesEscalationPoliciesPermissions string

// NewOnCallRoleDataAttributesGroupsPermissions defines model for NewOnCallRole.Data.Attributes.GroupsPermissions.
type NewOnCallRoleDataAttributesGroupsPermissions string

// NewOnCallRoleDataAttributesHeartbeatsPermissions defines model for NewOnCallRole.Data.Attributes.HeartbeatsPermissions.
type NewOnCallRoleDataAttributesHeartbeatsPermissions string

// NewOnCallRoleDataAttributesIntegrationsPermissions defines model for NewOnCallRole.Data.Attributes.IntegrationsPermissions.
type NewOnCallRoleDataAttributesIntegrationsPermissions string

// NewOnCallRoleDataAttributesInvitationsPermissions defines model for NewOnCallRole.Data.Attributes.InvitationsPermissions.
type NewOnCallRoleDataAttributesInvitationsPermissions string

// NewOnCallRoleDataAttributesLiveCallRoutingPermissions defines model for NewOnCallRole.Data.Attributes.LiveCallRoutingPermissions.
type NewOnCallRoleDataAttributesLiveCallRoutingPermissions string

// NewOnCallRoleDataAttributesScheduleOverridePermissions defines model for NewOnCallRole.Data.Attributes.ScheduleOverridePermissions.
type NewOnCallRoleDataAttributesScheduleOverridePermissions string

// NewOnCallRoleDataAttributesSchedulesPermissions defines model for NewOnCallRole.Data.Attributes.SchedulesPermissions.
type NewOnCallRoleDataAttributesSchedulesPermissions string

// NewOnCallRoleDataAttributesServicesPermissions defines model for NewOnCallRole.Data.Attributes.ServicesPermissions.
type NewOnCallRoleDataAttributesServicesPermissions string

// NewOnCallRoleDataAttributesWebhooksPermissions defines model for NewOnCallRole.Data.Attributes.WebhooksPermissions.
type NewOnCallRoleDataAttributesWebhooksPermissions string

// NewOnCallRoleDataAttributesWorkflowsPermissions defines model for NewOnCallRole.Data.Attributes.WorkflowsPermissions.
type NewOnCallRoleDataAttributesWorkflowsPermissions string

// NewOnCallRoleDataType defines model for NewOnCallRole.Data.Type.
type NewOnCallRoleDataType string

// NewOnCallShadow defines model for new_on_call_shadow.
type NewOnCallShadow struct {
	Data struct {
		Attributes struct {
			// EndsAt End datetime for shadow shift
			EndsAt time.Time `json:"ends_at"`

			// ShadowUserId Which user the shadow shift belongs to.
			ShadowUserId int `json:"shadow_user_id"`

			// ShadowableId ID of schedule or user the shadow user is shadowing
			ShadowableId   string                                      `json:"shadowable_id"`
			ShadowableType NewOnCallShadowDataAttributesShadowableType `json:"shadowable_type"`

			// StartsAt Start datetime of shadow shift
			StartsAt time.Time `json:"starts_at"`
		} `json:"attributes"`
		Type NewOnCallShadowDataType `json:"type"`
	} `json:"data"`
}

// NewOnCallShadowDataAttributesShadowableType defines model for NewOnCallShadow.Data.Attributes.ShadowableType.
type NewOnCallShadowDataAttributesShadowableType string

// NewOnCallShadowDataType defines model for NewOnCallShadow.Data.Type.
type NewOnCallShadowDataType string

// NewOverrideShift defines model for new_override_shift.
type NewOverrideShift struct {
	Data struct {
		Attributes struct {
			// EndsAt End datetime of override shift
			EndsAt time.Time `json:"ends_at"`

			// StartsAt Start datetime of override shift
			StartsAt time.Time `json:"starts_at"`

			// UserId Override shift user
			UserId int `json:"user_id"`
		} `json:"attributes"`
		Type NewOverrideShiftDataType `json:"type"`
	} `json:"data"`
}

// NewOverrideShiftDataType defines model for NewOverrideShift.Data.Type.
type NewOverrideShiftDataType string

// NewPlaybook defines model for new_playbook.
type NewPlaybook struct {
	Data struct {
		Attributes struct {
			// EnvironmentIds The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// ExternalUrl The external url of the playbook
			ExternalUrl *string `json:"external_url"`

			// FunctionalityIds The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// GroupIds The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// IncidentTypeIds The Incident Type ID's to attach to the incident
			IncidentTypeIds *[]string `json:"incident_type_ids"`

			// ServiceIds The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// SeverityIds The Severity ID's to attach to the incident
			SeverityIds *[]string `json:"severity_ids"`

			// Summary The summary of the playbook
			Summary *string `json:"summary"`

			// Title The title of the playbook
			Title string `json:"title"`
		} `json:"attributes"`
		Type NewPlaybookDataType `json:"type"`
	} `json:"data"`
}

// NewPlaybookDataType defines model for NewPlaybook.Data.Type.
type NewPlaybookDataType string

// NewPlaybookTask defines model for new_playbook_task.
type NewPlaybookTask struct {
	Data struct {
		Attributes struct {
			// Description The description of the task
			Description *string `json:"description"`

			// Position The position of the task
			Position *int `json:"position"`

			// Task The task of the task
			Task string `json:"task"`
		} `json:"attributes"`
		Type NewPlaybookTaskDataType `json:"type"`
	} `json:"data"`
}

// NewPlaybookTaskDataType defines model for NewPlaybookTask.Data.Type.
type NewPlaybookTaskDataType string

// NewPostMortemTemplate defines model for new_post_mortem_template.
type NewPostMortemTemplate struct {
	Data struct {
		Attributes struct {
			// Content The postmortem template. Liquid syntax is supported
			Content string `json:"content"`

			// Default Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// Format The format of the input
			Format *NewPostMortemTemplateDataAttributesFormat `json:"format"`

			// Name The name of the postmortem template
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewPostMortemTemplateDataType `json:"type"`
	} `json:"data"`
}

// NewPostMortemTemplateDataAttributesFormat The format of the input
type NewPostMortemTemplateDataAttributesFormat string

// NewPostMortemTemplateDataType defines model for NewPostMortemTemplate.Data.Type.
type NewPostMortemTemplateDataType string

// NewPulse defines model for new_pulse.
type NewPulse struct {
	Data struct {
		Attributes struct {
			// Data Additional data
			Data *map[string]interface{} `json:"data"`

			// EndedAt Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// EnvironmentIds The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`

			// ExternalUrl The external url of the pulse
			ExternalUrl *string `json:"external_url"`
			Labels      *[]struct {
				// Key Key of the tag
				Key string `json:"key"`

				// Value Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`
			Refs *[]struct {
				// Key Key of the ref
				Key string `json:"key"`

				// Value Value of the ref
				Value string `json:"value"`
			} `json:"refs,omitempty"`

			// ServiceIds The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// Source The source of the pulse (eg: k8s)
			Source *string `json:"source"`

			// StartedAt Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// Summary The summary of the pulse
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type NewPulseDataType `json:"type"`
	} `json:"data"`
}

// NewPulseDataType defines model for NewPulse.Data.Type.
type NewPulseDataType string

// NewRetrospectiveProcess defines model for new_retrospective_process.
type NewRetrospectiveProcess struct {
	Data struct {
		Attributes struct {
			// CopyFrom Retrospective process ID from which retrospective steps have to be copied. To use starter template for retrospective steps provide value: 'starter_template'
			CopyFrom string `json:"copy_from"`

			// Description The description of the retrospective process
			Description *string `json:"description"`

			// Name The name of the retrospective process
			Name                                 string `json:"name"`
			RetrospectiveProcessMatchingCriteria *struct {
				// GroupIds Team ID's for retrospective process matching criteria
				GroupIds *[]string `json:"group_ids,omitempty"`

				// IncidentTypeIds Incident type ID's for retrospective process matching criteria
				IncidentTypeIds *[]string `json:"incident_type_ids,omitempty"`

				// SeverityIds Severity ID's for retrospective process matching criteria
				SeverityIds *[]string `json:"severity_ids,omitempty"`
			} `json:"retrospective_process_matching_criteria,omitempty"`
		} `json:"attributes"`
		Type NewRetrospectiveProcessDataType `json:"type"`
	} `json:"data"`
}

// NewRetrospectiveProcessDataType defines model for NewRetrospectiveProcess.Data.Type.
type NewRetrospectiveProcessDataType string

// NewRetrospectiveProcessGroup defines model for new_retrospective_process_group.
type NewRetrospectiveProcessGroup struct {
	Data struct {
		Attributes struct {
			Position    *int   `json:"position,omitempty"`
			SubStatusId string `json:"sub_status_id"`
		} `json:"attributes"`
		Type NewRetrospectiveProcessGroupDataType `json:"type"`
	} `json:"data"`
}

// NewRetrospectiveProcessGroupDataType defines model for NewRetrospectiveProcessGroup.Data.Type.
type NewRetrospectiveProcessGroupDataType string

// NewRetrospectiveProcessGroupStep defines model for new_retrospective_process_group_step.
type NewRetrospectiveProcessGroupStep struct {
	Data struct {
		Attributes struct {
			Position            *int   `json:"position,omitempty"`
			RetrospectiveStepId string `json:"retrospective_step_id"`
		} `json:"attributes"`
		Type NewRetrospectiveProcessGroupStepDataType `json:"type"`
	} `json:"data"`
}

// NewRetrospectiveProcessGroupStepDataType defines model for NewRetrospectiveProcessGroupStep.Data.Type.
type NewRetrospectiveProcessGroupStepDataType string

// NewRetrospectiveStep defines model for new_retrospective_step.
type NewRetrospectiveStep struct {
	Data struct {
		Attributes struct {
			// Description The description of the step
			Description *string `json:"description"`

			// DueAfterDays Due date in days
			DueAfterDays *int `json:"due_after_days"`

			// IncidentRoleId Users assigned to the selected incident role will be the default owners for this step
			IncidentRoleId *string `json:"incident_role_id"`

			// Position Position of the step
			Position *int `json:"position"`

			// Skippable Is the step skippable?
			Skippable *bool `json:"skippable,omitempty"`

			// Title The name of the step
			Title string `json:"title"`
		} `json:"attributes"`
		Type NewRetrospectiveStepDataType `json:"type"`
	} `json:"data"`
}

// NewRetrospectiveStepDataType defines model for NewRetrospectiveStep.Data.Type.
type NewRetrospectiveStepDataType string

// NewRole defines model for new_role.
type NewRole struct {
	Data struct {
		Attributes struct {
			AlertsPermissions            *[]NewRoleDataAttributesAlertsPermissions            `json:"alerts_permissions,omitempty"`
			ApiKeysPermissions           *[]NewRoleDataAttributesApiKeysPermissions           `json:"api_keys_permissions,omitempty"`
			AuditsPermissions            *[]NewRoleDataAttributesAuditsPermissions            `json:"audits_permissions,omitempty"`
			BillingPermissions           *[]NewRoleDataAttributesBillingPermissions           `json:"billing_permissions,omitempty"`
			EnvironmentsPermissions      *[]NewRoleDataAttributesEnvironmentsPermissions      `json:"environments_permissions,omitempty"`
			FormFieldsPermissions        *[]NewRoleDataAttributesFormFieldsPermissions        `json:"form_fields_permissions,omitempty"`
			FunctionalitiesPermissions   *[]NewRoleDataAttributesFunctionalitiesPermissions   `json:"functionalities_permissions,omitempty"`
			GroupsPermissions            *[]NewRoleDataAttributesGroupsPermissions            `json:"groups_permissions,omitempty"`
			IncidentCausesPermissions    *[]NewRoleDataAttributesIncidentCausesPermissions    `json:"incident_causes_permissions,omitempty"`
			IncidentFeedbacksPermissions *[]NewRoleDataAttributesIncidentFeedbacksPermissions `json:"incident_feedbacks_permissions,omitempty"`

			// IncidentPermissionSetId Associated incident permissions set.
			IncidentPermissionSetId  *string                                          `json:"incident_permission_set_id"`
			IncidentRolesPermissions *[]NewRoleDataAttributesIncidentRolesPermissions `json:"incident_roles_permissions,omitempty"`
			IncidentTypesPermissions *[]NewRoleDataAttributesIncidentTypesPermissions `json:"incident_types_permissions,omitempty"`
			IncidentsPermissions     *[]NewRoleDataAttributesIncidentsPermissions     `json:"incidents_permissions,omitempty"`
			InvitationsPermissions   *[]NewRoleDataAttributesInvitationsPermissions   `json:"invitations_permissions,omitempty"`

			// Name The role name.
			Name                        string                                              `json:"name"`
			PlaybooksPermissions        *[]NewRoleDataAttributesPlaybooksPermissions        `json:"playbooks_permissions,omitempty"`
			PrivateIncidentsPermissions *[]NewRoleDataAttributesPrivateIncidentsPermissions `json:"private_incidents_permissions,omitempty"`
			PulsesPermissions           *[]NewRoleDataAttributesPulsesPermissions           `json:"pulses_permissions,omitempty"`
			RetrospectivePermissions    *[]NewRoleDataAttributesRetrospectivePermissions    `json:"retrospective_permissions,omitempty"`
			RolesPermissions            *[]NewRoleDataAttributesRolesPermissions            `json:"roles_permissions,omitempty"`
			SecretsPermissions          *[]NewRoleDataAttributesSecretsPermissions          `json:"secrets_permissions,omitempty"`
			ServicesPermissions         *[]NewRoleDataAttributesServicesPermissions         `json:"services_permissions,omitempty"`
			SeveritiesPermissions       *[]NewRoleDataAttributesSeveritiesPermissions       `json:"severities_permissions,omitempty"`

			// Slug The role slug.
			Slug                   *string                                        `json:"slug,omitempty"`
			StatusPagesPermissions *[]NewRoleDataAttributesStatusPagesPermissions `json:"status_pages_permissions,omitempty"`
			WebhooksPermissions    *[]NewRoleDataAttributesWebhooksPermissions    `json:"webhooks_permissions,omitempty"`
			WorkflowsPermissions   *[]NewRoleDataAttributesWorkflowsPermissions   `json:"workflows_permissions,omitempty"`
		} `json:"attributes"`
		Type NewRoleDataType `json:"type"`
	} `json:"data"`
}

// NewRoleDataAttributesAlertsPermissions defines model for NewRole.Data.Attributes.AlertsPermissions.
type NewRoleDataAttributesAlertsPermissions string

// NewRoleDataAttributesApiKeysPermissions defines model for NewRole.Data.Attributes.ApiKeysPermissions.
type NewRoleDataAttributesApiKeysPermissions string

// NewRoleDataAttributesAuditsPermissions defines model for NewRole.Data.Attributes.AuditsPermissions.
type NewRoleDataAttributesAuditsPermissions string

// NewRoleDataAttributesBillingPermissions defines model for NewRole.Data.Attributes.BillingPermissions.
type NewRoleDataAttributesBillingPermissions string

// NewRoleDataAttributesEnvironmentsPermissions defines model for NewRole.Data.Attributes.EnvironmentsPermissions.
type NewRoleDataAttributesEnvironmentsPermissions string

// NewRoleDataAttributesFormFieldsPermissions defines model for NewRole.Data.Attributes.FormFieldsPermissions.
type NewRoleDataAttributesFormFieldsPermissions string

// NewRoleDataAttributesFunctionalitiesPermissions defines model for NewRole.Data.Attributes.FunctionalitiesPermissions.
type NewRoleDataAttributesFunctionalitiesPermissions string

// NewRoleDataAttributesGroupsPermissions defines model for NewRole.Data.Attributes.GroupsPermissions.
type NewRoleDataAttributesGroupsPermissions string

// NewRoleDataAttributesIncidentCausesPermissions defines model for NewRole.Data.Attributes.IncidentCausesPermissions.
type NewRoleDataAttributesIncidentCausesPermissions string

// NewRoleDataAttributesIncidentFeedbacksPermissions defines model for NewRole.Data.Attributes.IncidentFeedbacksPermissions.
type NewRoleDataAttributesIncidentFeedbacksPermissions string

// NewRoleDataAttributesIncidentRolesPermissions defines model for NewRole.Data.Attributes.IncidentRolesPermissions.
type NewRoleDataAttributesIncidentRolesPermissions string

// NewRoleDataAttributesIncidentTypesPermissions defines model for NewRole.Data.Attributes.IncidentTypesPermissions.
type NewRoleDataAttributesIncidentTypesPermissions string

// NewRoleDataAttributesIncidentsPermissions defines model for NewRole.Data.Attributes.IncidentsPermissions.
type NewRoleDataAttributesIncidentsPermissions string

// NewRoleDataAttributesInvitationsPermissions defines model for NewRole.Data.Attributes.InvitationsPermissions.
type NewRoleDataAttributesInvitationsPermissions string

// NewRoleDataAttributesPlaybooksPermissions defines model for NewRole.Data.Attributes.PlaybooksPermissions.
type NewRoleDataAttributesPlaybooksPermissions string

// NewRoleDataAttributesPrivateIncidentsPermissions defines model for NewRole.Data.Attributes.PrivateIncidentsPermissions.
type NewRoleDataAttributesPrivateIncidentsPermissions string

// NewRoleDataAttributesPulsesPermissions defines model for NewRole.Data.Attributes.PulsesPermissions.
type NewRoleDataAttributesPulsesPermissions string

// NewRoleDataAttributesRetrospectivePermissions defines model for NewRole.Data.Attributes.RetrospectivePermissions.
type NewRoleDataAttributesRetrospectivePermissions string

// NewRoleDataAttributesRolesPermissions defines model for NewRole.Data.Attributes.RolesPermissions.
type NewRoleDataAttributesRolesPermissions string

// NewRoleDataAttributesSecretsPermissions defines model for NewRole.Data.Attributes.SecretsPermissions.
type NewRoleDataAttributesSecretsPermissions string

// NewRoleDataAttributesServicesPermissions defines model for NewRole.Data.Attributes.ServicesPermissions.
type NewRoleDataAttributesServicesPermissions string

// NewRoleDataAttributesSeveritiesPermissions defines model for NewRole.Data.Attributes.SeveritiesPermissions.
type NewRoleDataAttributesSeveritiesPermissions string

// NewRoleDataAttributesStatusPagesPermissions defines model for NewRole.Data.Attributes.StatusPagesPermissions.
type NewRoleDataAttributesStatusPagesPermissions string

// NewRoleDataAttributesWebhooksPermissions defines model for NewRole.Data.Attributes.WebhooksPermissions.
type NewRoleDataAttributesWebhooksPermissions string

// NewRoleDataAttributesWorkflowsPermissions defines model for NewRole.Data.Attributes.WorkflowsPermissions.
type NewRoleDataAttributesWorkflowsPermissions string

// NewRoleDataType defines model for NewRole.Data.Type.
type NewRoleDataType string

// NewSchedule defines model for new_schedule.
type NewSchedule struct {
	Data struct {
		Attributes struct {
			// AllTimeCoverage 24/7 coverage of the schedule
			AllTimeCoverage *bool `json:"all_time_coverage"`

			// Description The description of the schedule
			Description *string `json:"description"`

			// Name The name of the schedule
			Name string `json:"name"`

			// OwnerUserId ID of the owner of the schedule
			OwnerUserId *int `json:"owner_user_id"`
		} `json:"attributes"`
		Type NewScheduleDataType `json:"type"`
	} `json:"data"`
}

// NewScheduleDataType defines model for NewSchedule.Data.Type.
type NewScheduleDataType string

// NewScheduleRotation defines model for new_schedule_rotation.
type NewScheduleRotation struct {
	Data struct {
		Attributes struct {
			// ActiveAllWeek Schedule rotation active all week?
			ActiveAllWeek *bool                                          `json:"active_all_week,omitempty"`
			ActiveDays    *[]NewScheduleRotationDataAttributesActiveDays `json:"active_days,omitempty"`

			// ActiveTimeAttributes Schedule rotation's active times
			ActiveTimeAttributes *[]struct {
				// EndTime End time for schedule rotation active time
				EndTime string `json:"end_time"`

				// StartTime Start time for schedule rotation active time
				StartTime string `json:"start_time"`
			} `json:"active_time_attributes,omitempty"`
			ActiveTimeType *string `json:"active_time_type,omitempty"`

			// Name The name of the schedule rotation
			Name string `json:"name"`

			// Position Position of the schedule rotation
			Position                       *int `json:"position,omitempty"`
			ScheduleRotationableAttributes struct {
				// HandoffDay Hand off day for monthly rotation
				HandoffDay *NewScheduleRotationDataAttributesScheduleRotationableAttributesHandoffDay `json:"handoff_day,omitempty"`

				// HandoffTime Hand off time for custom rotation
				HandoffTime *string `json:"handoff_time,omitempty"`

				// ShiftLength Shift length for custom rotation
				ShiftLength *int `json:"shift_length,omitempty"`

				// ShiftLengthUnit Shift length unit for custom rotation
				ShiftLengthUnit *NewScheduleRotationDataAttributesScheduleRotationableAttributesShiftLengthUnit `json:"shift_length_unit,omitempty"`
			} `json:"schedule_rotationable_attributes"`

			// ScheduleRotationableType Schedule rotation type
			ScheduleRotationableType NewScheduleRotationDataAttributesScheduleRotationableType `json:"schedule_rotationable_type"`

			// TimeZone A valid IANA time zone name.
			TimeZone *string `json:"time_zone,omitempty"`
		} `json:"attributes"`
		Type NewScheduleRotationDataType `json:"type"`
	} `json:"data"`
}

// NewScheduleRotationDataAttributesActiveDays Schedule rotation active days
type NewScheduleRotationDataAttributesActiveDays string

// NewScheduleRotationDataAttributesScheduleRotationableAttributesHandoffDay Hand off day for monthly rotation
type NewScheduleRotationDataAttributesScheduleRotationableAttributesHandoffDay string

// NewScheduleRotationDataAttributesScheduleRotationableAttributesShiftLengthUnit Shift length unit for custom rotation
type NewScheduleRotationDataAttributesScheduleRotationableAttributesShiftLengthUnit string

// NewScheduleRotationDataAttributesScheduleRotationableType Schedule rotation type
type NewScheduleRotationDataAttributesScheduleRotationableType string

// NewScheduleRotationDataType defines model for NewScheduleRotation.Data.Type.
type NewScheduleRotationDataType string

// NewScheduleRotationActiveDay defines model for new_schedule_rotation_active_day.
type NewScheduleRotationActiveDay struct {
	Data struct {
		Attributes struct {
			// ActiveTimeAttributes Schedule rotation active times per day
			ActiveTimeAttributes []struct {
				// EndTime End time for schedule rotation active time
				EndTime *string `json:"end_time,omitempty"`

				// StartTime Start time for schedule rotation active time
				StartTime *string `json:"start_time,omitempty"`
			} `json:"active_time_attributes"`

			// DayName Schedule rotation day name for which active times to be created
			DayName NewScheduleRotationActiveDayDataAttributesDayName `json:"day_name"`
		} `json:"attributes"`
		Type NewScheduleRotationActiveDayDataType `json:"type"`
	} `json:"data"`
}

// NewScheduleRotationActiveDayDataAttributesDayName Schedule rotation day name for which active times to be created
type NewScheduleRotationActiveDayDataAttributesDayName string

// NewScheduleRotationActiveDayDataType defines model for NewScheduleRotationActiveDay.Data.Type.
type NewScheduleRotationActiveDayDataType string

// NewScheduleRotationUser defines model for new_schedule_rotation_user.
type NewScheduleRotationUser struct {
	Data *struct {
		Attributes *struct {
			// Position Position of the user inside rotation
			Position *int `json:"position,omitempty"`

			// UserId Schedule rotation user
			UserId int `json:"user_id"`
		} `json:"attributes,omitempty"`
		Type *NewScheduleRotationUserDataType `json:"type,omitempty"`
	} `json:"data,omitempty"`
}

// NewScheduleRotationUserDataType defines model for NewScheduleRotationUser.Data.Type.
type NewScheduleRotationUserDataType string

// NewSecret defines model for new_secret.
type NewSecret struct {
	Data struct {
		Attributes struct {
			// HashicorpVaultMount The HashiCorp Vault secret mount path
			HashicorpVaultMount *string `json:"hashicorp_vault_mount"`

			// HashicorpVaultPath The HashiCorp Vault secret path
			HashicorpVaultPath *string `json:"hashicorp_vault_path"`

			// HashicorpVaultVersion The HashiCorp Vault secret version
			HashicorpVaultVersion *string `json:"hashicorp_vault_version"`

			// Kind The kind of the secret
			Kind *NewSecretDataAttributesKind `json:"kind,omitempty"`

			// Name The name of the secret
			Name string `json:"name"`

			// Secret The secret
			Secret string `json:"secret"`
		} `json:"attributes"`
		Type NewSecretDataType `json:"type"`
	} `json:"data"`
}

// NewSecretDataAttributesKind The kind of the secret
type NewSecretDataAttributesKind string

// NewSecretDataType defines model for NewSecret.Data.Type.
type NewSecretDataType string

// NewService defines model for new_service.
type NewService struct {
	Data struct {
		Attributes struct {
			// BackstageId The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
			BackstageId *string `json:"backstage_id"`

			// Color The hex color of the service
			Color *string `json:"color"`

			// CortexId The Cortex group id associated to this service
			CortexId *string `json:"cortex_id"`

			// Description The description of the service
			Description *string `json:"description"`

			// EnvironmentIds Environments associated with this service
			EnvironmentIds *[]string `json:"environment_ids"`

			// ExternalId The external id associated to this service
			ExternalId *string `json:"external_id"`

			// GithubRepositoryBranch The GitHub repository branch associated to this service. eg: main
			GithubRepositoryBranch *string `json:"github_repository_branch"`

			// GithubRepositoryName The GitHub repository name associated to this service. eg: rootlyhq/my-service
			GithubRepositoryName *string `json:"github_repository_name"`

			// GitlabRepositoryBranch The Gitlab repository branch associated to this service. eg: main
			GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

			// GitlabRepositoryName The Gitlab repository name associated to this service. eg: rootlyhq/my-service
			GitlabRepositoryName *string `json:"gitlab_repository_name"`

			// Name The name of the service
			Name string `json:"name"`

			// NotifyEmails Emails to attach to the service
			NotifyEmails *[]string `json:"notify_emails"`

			// OpsgenieId The Opsgenie service id associated to this service
			OpsgenieId *string `json:"opsgenie_id"`

			// OpsgenieTeamId The Opsgenie team id associated to this service
			OpsgenieTeamId *string `json:"opsgenie_team_id"`

			// OwnersGroupIds Owner Teams associated with this service
			OwnersGroupIds *[]string `json:"owners_group_ids"`

			// OwnersUserIds Owner Users associated with this service
			OwnersUserIds *[]int `json:"owners_user_ids"`

			// PagerdutyId The PagerDuty service id associated to this service
			PagerdutyId *string `json:"pagerduty_id"`

			// Position Position of the service
			Position *int `json:"position"`

			// PublicDescription The public description of the service
			PublicDescription *string `json:"public_description"`

			// ServiceIds Services dependent on this service
			ServiceIds *[]string `json:"service_ids"`

			// ServiceNowCiSysId The Service Now CI sys id associated to this service
			ServiceNowCiSysId *string `json:"service_now_ci_sys_id"`

			// ShowUptime Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// ShowUptimeLastDays Show uptime over x days
			ShowUptimeLastDays *NewServiceDataAttributesShowUptimeLastDays `json:"show_uptime_last_days"`

			// SlackAliases Slack Aliases associated with this service
			SlackAliases *[]struct {
				// Id Slack alias ID
				Id string `json:"id"`

				// Name Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// SlackChannels Slack Channels associated with this service
			SlackChannels *[]struct {
				// Id Slack channel ID
				Id string `json:"id"`

				// Name Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type NewServiceDataType `json:"type"`
	} `json:"data"`
}

// NewServiceDataAttributesShowUptimeLastDays Show uptime over x days
type NewServiceDataAttributesShowUptimeLastDays int

// NewServiceDataType defines model for NewService.Data.Type.
type NewServiceDataType string

// NewSeverity defines model for new_severity.
type NewSeverity struct {
	Data struct {
		Attributes struct {
			// Color The hex color of the severity
			Color *string `json:"color"`

			// Description The description of the severity
			Description *string `json:"description"`

			// Name The name of the severity
			Name string `json:"name"`

			// NotifyEmails Emails to attach to the severity
			NotifyEmails *[]string `json:"notify_emails"`

			// Position Position of the severity
			Position *int `json:"position"`

			// Severity The severity of the severity
			Severity *NewSeverityDataAttributesSeverity `json:"severity,omitempty"`

			// SlackAliases Slack Aliases associated with this severity
			SlackAliases *[]struct {
				// Id Slack alias ID
				Id string `json:"id"`

				// Name Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// SlackChannels Slack Channels associated with this severity
			SlackChannels *[]struct {
				// Id Slack channel ID
				Id string `json:"id"`

				// Name Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type NewSeverityDataType `json:"type"`
	} `json:"data"`
}

// NewSeverityDataAttributesSeverity The severity of the severity
type NewSeverityDataAttributesSeverity string

// NewSeverityDataType defines model for NewSeverity.Data.Type.
type NewSeverityDataType string

// NewStatusPage defines model for new_status_page.
type NewStatusPage struct {
	Data struct {
		Attributes struct {
			// AllowSearchEngineIndex Allow search engines to include your public status page in search results
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// AuthenticationEnabled Enable authentication
			AuthenticationEnabled *bool `json:"authentication_enabled"`

			// AuthenticationPassword Authentication password
			AuthenticationPassword *string `json:"authentication_password"`

			// Description The description of the status page
			Description *string `json:"description"`

			// Enabled Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// FailureMessage Message showing when at least one component is not operational
			FailureMessage *string `json:"failure_message"`

			// FooterColor The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// FunctionalityIds Functionalities attached to the status page
			FunctionalityIds *[]string `json:"functionality_ids,omitempty"`

			// GaTrackingId Google Analytics tracking ID
			GaTrackingId *string `json:"ga_tracking_id"`

			// HeaderColor The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Public Make the status page accessible to the public
			Public *bool `json:"public"`

			// PublicDescription The public description of the status page
			PublicDescription *string `json:"public_description"`

			// PublicTitle The public title of the status page
			PublicTitle *string `json:"public_title"`

			// ServiceIds Services attached to the status page
			ServiceIds *[]string `json:"service_ids,omitempty"`

			// ShowUptime Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// ShowUptimeLastDays Show uptime over x days
			ShowUptimeLastDays *NewStatusPageDataAttributesShowUptimeLastDays `json:"show_uptime_last_days"`

			// SuccessMessage Message showing when all components are operational
			SuccessMessage *string `json:"success_message"`

			// TimeZone A valid IANA time zone name.
			TimeZone *string `json:"time_zone"`

			// Title The title of the status page
			Title string `json:"title"`

			// WebsitePrivacyUrl Website Privacy URL
			WebsitePrivacyUrl *string `json:"website_privacy_url"`

			// WebsiteSupportUrl Website Support URL
			WebsiteSupportUrl *string `json:"website_support_url"`

			// WebsiteUrl Website URL
			WebsiteUrl *string `json:"website_url"`
		} `json:"attributes"`
		Type NewStatusPageDataType `json:"type"`
	} `json:"data"`
}

// NewStatusPageDataAttributesShowUptimeLastDays Show uptime over x days
type NewStatusPageDataAttributesShowUptimeLastDays int

// NewStatusPageDataType defines model for NewStatusPage.Data.Type.
type NewStatusPageDataType string

// NewSubStatus defines model for new_sub_status.
type NewSubStatus struct {
	Data struct {
		Attributes struct {
			Description  *string                                `json:"description"`
			Name         string                                 `json:"name"`
			ParentStatus NewSubStatusDataAttributesParentStatus `json:"parent_status"`
			Position     *int                                   `json:"position"`
			Slug         *string                                `json:"slug,omitempty"`
		} `json:"attributes"`
		Type NewSubStatusDataType `json:"type"`
	} `json:"data"`
}

// NewSubStatusDataAttributesParentStatus defines model for NewSubStatus.Data.Attributes.ParentStatus.
type NewSubStatusDataAttributesParentStatus string

// NewSubStatusDataType defines model for NewSubStatus.Data.Type.
type NewSubStatusDataType string

// NewTeam defines model for new_team.
type NewTeam struct {
	Data struct {
		Attributes struct {
			// BackstageId The Backstage entity id associated to this team. eg: :namespace/:kind/:entity_name
			BackstageId *string `json:"backstage_id"`

			// Color The hex color of the team
			Color *string `json:"color"`

			// CortexId The Cortex group id associated to this team
			CortexId *string `json:"cortex_id"`

			// Description The description of the team
			Description *string `json:"description"`

			// ExternalId The external id associated to this team
			ExternalId *string `json:"external_id"`

			// Name The name of the team
			Name string `json:"name"`

			// NotifyEmails Emails to attach to the team
			NotifyEmails *[]string `json:"notify_emails"`

			// OpsgenieId The Opsgenie group id associated to this team
			OpsgenieId *string `json:"opsgenie_id"`

			// OpsgenieTeamId The Opsgenie team id associated to this team
			OpsgenieTeamId *string `json:"opsgenie_team_id"`

			// PagerdutyId The PagerDuty group id associated to this team
			PagerdutyId *string `json:"pagerduty_id"`

			// PagerdutyServiceId The PagerDuty service id associated to this team
			PagerdutyServiceId *string `json:"pagerduty_service_id"`

			// PagertreeId The PagerTree group id associated to this team
			PagertreeId *string `json:"pagertree_id"`

			// Position Position of the team
			Position *int `json:"position"`

			// ServiceNowCiSysId The Service Now CI sys id associated to this team
			ServiceNowCiSysId *string `json:"service_now_ci_sys_id"`

			// SlackAliases Slack Aliases associated with this team
			SlackAliases *[]struct {
				// Id Slack alias ID
				Id string `json:"id"`

				// Name Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// SlackChannels Slack Channels associated with this team
			SlackChannels *[]struct {
				// Id Slack channel ID
				Id string `json:"id"`

				// Name Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`

			// UserIds The User ID's members of this team
			UserIds *[]int `json:"user_ids"`

			// VictorOpsId The VictorOps group id associated to this team
			VictorOpsId *string `json:"victor_ops_id"`
		} `json:"attributes"`
		Type NewTeamDataType `json:"type"`
	} `json:"data"`
}

// NewTeamDataType defines model for NewTeam.Data.Type.
type NewTeamDataType string

// NewUserNotificationRule defines model for new_user_notification_rule.
type NewUserNotificationRule struct {
	Data struct {
		Attributes struct {
			// Delay Delay after which rule gets triggered
			Delay *int `json:"delay"`

			// EnabledContactTypes Contact types for which notification needs to be enabled
			EnabledContactTypes []NewUserNotificationRuleDataAttributesEnabledContactTypes `json:"enabled_contact_types"`

			// Position Position of the rule
			Position *int `json:"position"`

			// UserCallNumberId User phone number to which notification to be sent
			UserCallNumberId *string `json:"user_call_number_id"`

			// UserDeviceId User device to which notification to be sent
			UserDeviceId *string `json:"user_device_id"`

			// UserEmailAddressId User email address to which notification to be sent
			UserEmailAddressId *string `json:"user_email_address_id"`

			// UserSmsNumberId User sms number to which notification to be sent
			UserSmsNumberId *string `json:"user_sms_number_id"`
		} `json:"attributes"`
		Type NewUserNotificationRuleDataType `json:"type"`
	} `json:"data"`
}

// NewUserNotificationRuleDataAttributesEnabledContactTypes defines model for NewUserNotificationRule.Data.Attributes.EnabledContactTypes.
type NewUserNotificationRuleDataAttributesEnabledContactTypes string

// NewUserNotificationRuleDataType defines model for NewUserNotificationRule.Data.Type.
type NewUserNotificationRuleDataType string

// NewWebhooksEndpoint defines model for new_webhooks_endpoint.
type NewWebhooksEndpoint struct {
	Data struct {
		Attributes struct {
			Enabled    *bool                                          `json:"enabled,omitempty"`
			EventTypes *[]NewWebhooksEndpointDataAttributesEventTypes `json:"event_types,omitempty"`

			// Name The name of the endpoint
			Name string `json:"name"`

			// Secret The webhook signing secret used to verify webhook requests.
			Secret *string `json:"secret,omitempty"`

			// Url The URL of the endpoint.
			Url string `json:"url"`
		} `json:"attributes"`
		Type NewWebhooksEndpointDataType `json:"type"`
	} `json:"data"`
}

// NewWebhooksEndpointDataAttributesEventTypes defines model for NewWebhooksEndpoint.Data.Attributes.EventTypes.
type NewWebhooksEndpointDataAttributesEventTypes string

// NewWebhooksEndpointDataType defines model for NewWebhooksEndpoint.Data.Type.
type NewWebhooksEndpointDataType string

// NewWorkflow defines model for new_workflow.
type NewWorkflow struct {
	Data struct {
		Attributes struct {
			CauseIds *[]string `json:"cause_ids,omitempty"`

			// Command Workflow command
			Command *string `json:"command"`

			// CommandFeedbackEnabled This will notify you back when the workflow is starting
			CommandFeedbackEnabled *bool `json:"command_feedback_enabled"`

			// Description The description of the workflow
			Description      *string   `json:"description"`
			Enabled          *bool     `json:"enabled,omitempty"`
			EnvironmentIds   *[]string `json:"environment_ids,omitempty"`
			FunctionalityIds *[]string `json:"functionality_ids,omitempty"`
			GroupIds         *[]string `json:"group_ids,omitempty"`
			IncidentRoleIds  *[]string `json:"incident_role_ids,omitempty"`
			IncidentTypeIds  *[]string `json:"incident_type_ids,omitempty"`

			// Locked Restricts workflow edits to admins when turned on. Only admins can set this field.
			Locked *bool `json:"locked,omitempty"`

			// Name The title of the workflow
			Name string `json:"name"`

			// Position The order which the workflow should run with other workflows.
			Position *int `json:"position,omitempty"`

			// Priority Priority
			Priority *NewWorkflowDataAttributesPriority `json:"priority"`

			// RepeatEveryDuration Repeat workflow every duration
			RepeatEveryDuration *string                              `json:"repeat_every_duration"`
			RepeatOn            *[]NewWorkflowDataAttributesRepeatOn `json:"repeat_on,omitempty"`
			ServiceIds          *[]string                            `json:"service_ids,omitempty"`
			SeverityIds         *[]string                            `json:"severity_ids,omitempty"`

			// Slug The slug of the workflow
			Slug          *string                                    `json:"slug,omitempty"`
			TriggerParams *NewWorkflow_Data_Attributes_TriggerParams `json:"trigger_params,omitempty"`

			// Wait Wait this duration before executing
			Wait *string `json:"wait"`

			// WorkflowGroupId The group this workflow belongs to.
			WorkflowGroupId *string `json:"workflow_group_id"`
		} `json:"attributes"`
		Type NewWorkflowDataType `json:"type"`
	} `json:"data"`
}

// NewWorkflowDataAttributesPriority Priority
type NewWorkflowDataAttributesPriority string

// NewWorkflowDataAttributesRepeatOn Repeat on weekdays
type NewWorkflowDataAttributesRepeatOn string

// NewWorkflow_Data_Attributes_TriggerParams defines model for NewWorkflow.Data.Attributes.TriggerParams.
type NewWorkflow_Data_Attributes_TriggerParams struct {
	union json.RawMessage
}

// NewWorkflowDataType defines model for NewWorkflow.Data.Type.
type NewWorkflowDataType string

// NewWorkflowCustomFieldSelection defines model for new_workflow_custom_field_selection.
type NewWorkflowCustomFieldSelection struct {
	Data struct {
		Attributes struct {
			// CustomFieldId The custom field for this selection
			CustomFieldId int `json:"custom_field_id"`

			// IncidentCondition The trigger condition
			IncidentCondition NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition `json:"incident_condition"`
			SelectedOptionIds *[]int                                                         `json:"selected_option_ids,omitempty"`
			Values            *[]string                                                      `json:"values,omitempty"`

			// WorkflowId The workflow for this selection
			WorkflowId *string `json:"workflow_id,omitempty"`
		} `json:"attributes"`
		Type NewWorkflowCustomFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition The trigger condition
type NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition string

// NewWorkflowCustomFieldSelectionDataType defines model for NewWorkflowCustomFieldSelection.Data.Type.
type NewWorkflowCustomFieldSelectionDataType string

// NewWorkflowFormFieldCondition defines model for new_workflow_form_field_condition.
type NewWorkflowFormFieldCondition struct {
	Data struct {
		Attributes struct {
			// FormFieldId The custom field for this condition
			FormFieldId string `json:"form_field_id"`

			// IncidentCondition The trigger condition
			IncidentCondition        NewWorkflowFormFieldConditionDataAttributesIncidentCondition `json:"incident_condition"`
			SelectedCatalogEntityIds *[]string                                                    `json:"selected_catalog_entity_ids,omitempty"`
			SelectedFunctionalityIds *[]string                                                    `json:"selected_functionality_ids,omitempty"`
			SelectedGroupIds         *[]string                                                    `json:"selected_group_ids,omitempty"`
			SelectedOptionIds        *[]string                                                    `json:"selected_option_ids,omitempty"`
			SelectedServiceIds       *[]string                                                    `json:"selected_service_ids,omitempty"`
			SelectedUserIds          *[]int                                                       `json:"selected_user_ids,omitempty"`
			Values                   *[]string                                                    `json:"values,omitempty"`

			// WorkflowId The workflow for this condition
			WorkflowId *string `json:"workflow_id,omitempty"`
		} `json:"attributes"`
		Type NewWorkflowFormFieldConditionDataType `json:"type"`
	} `json:"data"`
}

// NewWorkflowFormFieldConditionDataAttributesIncidentCondition The trigger condition
type NewWorkflowFormFieldConditionDataAttributesIncidentCondition string

// NewWorkflowFormFieldConditionDataType defines model for NewWorkflowFormFieldCondition.Data.Type.
type NewWorkflowFormFieldConditionDataType string

// NewWorkflowGroup defines model for new_workflow_group.
type NewWorkflowGroup struct {
	Data struct {
		Attributes struct {
			// Description A description of the workflow group.
			Description *string `json:"description"`

			// Expanded Whether the group is expanded or collapsed.
			Expanded *bool `json:"expanded,omitempty"`

			// Icon An emoji icon displayed next to the workflow group.
			Icon *string `json:"icon,omitempty"`

			// Kind The kind of the workflow group
			Kind *NewWorkflowGroupDataAttributesKind `json:"kind"`

			// Name The name of the workflow group.
			Name string `json:"name"`

			// Position The position of the workflow group
			Position *int `json:"position,omitempty"`
		} `json:"attributes"`
		Type NewWorkflowGroupDataType `json:"type"`
	} `json:"data"`
}

// NewWorkflowGroupDataAttributesKind The kind of the workflow group
type NewWorkflowGroupDataAttributesKind string

// NewWorkflowGroupDataType defines model for NewWorkflowGroup.Data.Type.
type NewWorkflowGroupDataType string

// NewWorkflowRun defines model for new_workflow_run.
type NewWorkflowRun struct {
	Data struct {
		Attributes NewWorkflowRun_Data_Attributes `json:"attributes"`
		Type       NewWorkflowRunDataType         `json:"type"`
	} `json:"data"`
}

// NewWorkflowRunDataAttributes0 defines model for .
type NewWorkflowRunDataAttributes0 struct {
	// CheckConditions If true, this will check conditions. If conditions are not satisfied the run will not be created.
	CheckConditions *bool `json:"check_conditions"`

	// Immediate If false, this will respect wait time configured on the workflow.
	Immediate *bool `json:"immediate"`
}

// NewWorkflowRunDataAttributes1 defines model for .
type NewWorkflowRunDataAttributes1 struct {
	// CheckConditions If true, this will check conditions. If conditions are not satisfied the run will not be created
	CheckConditions *bool `json:"check_conditions"`

	// Immediate If false, this will respect wait time configured on the workflow
	Immediate  *bool  `json:"immediate"`
	IncidentId string `json:"incident_id"`
}

// NewWorkflowRunDataAttributes2 defines model for .
type NewWorkflowRunDataAttributes2 struct {
	// CheckConditions If true, this will check conditions. If conditions are not satisfied the run will not be created
	CheckConditions *bool `json:"check_conditions"`

	// Immediate If false, this will respect wait time configured on the workflow
	Immediate    *bool  `json:"immediate"`
	PostMortemId string `json:"post_mortem_id"`
}

// NewWorkflowRunDataAttributes3 defines model for .
type NewWorkflowRunDataAttributes3 struct {
	ActionItemId string `json:"action_item_id"`

	// CheckConditions If true, this will check conditions. If conditions are not satisfied the run will not be created
	CheckConditions *bool `json:"check_conditions"`

	// Immediate If false, this will respect wait time configured on the workflow
	Immediate *bool `json:"immediate"`
}

// NewWorkflowRunDataAttributes4 defines model for .
type NewWorkflowRunDataAttributes4 struct {
	AlertId string `json:"alert_id"`

	// CheckConditions If true, this will check conditions. If conditions are not satisfied the run will not be created
	CheckConditions *bool `json:"check_conditions"`

	// Immediate If false, this will respect wait time configured on the workflow
	Immediate *bool `json:"immediate"`
}

// NewWorkflowRunDataAttributes5 defines model for .
type NewWorkflowRunDataAttributes5 struct {
	// CheckConditions If true, this will check conditions. If conditions are not satisfied the run will not be created
	CheckConditions *bool `json:"check_conditions"`

	// Immediate If false, this will respect wait time configured on the workflow
	Immediate *bool  `json:"immediate"`
	PulseId   string `json:"pulse_id"`
}

// NewWorkflowRun_Data_Attributes defines model for NewWorkflowRun.Data.Attributes.
type NewWorkflowRun_Data_Attributes struct {
	union json.RawMessage
}

// NewWorkflowRunDataType defines model for NewWorkflowRun.Data.Type.
type NewWorkflowRunDataType string

// NewWorkflowTask defines model for new_workflow_task.
type NewWorkflowTask struct {
	Data struct {
		Attributes struct {
			// Enabled Enable/disable workflow task
			Enabled *bool `json:"enabled,omitempty"`

			// Name Name of the workflow task
			Name *string `json:"name,omitempty"`

			// Position The position of the workflow task
			Position *int `json:"position,omitempty"`

			// SkipOnFailure Skip workflow task if any failures
			SkipOnFailure *bool                                      `json:"skip_on_failure,omitempty"`
			TaskParams    NewWorkflowTask_Data_Attributes_TaskParams `json:"task_params"`
		} `json:"attributes"`
		Type NewWorkflowTaskDataType `json:"type"`
	} `json:"data"`
}

// NewWorkflowTask_Data_Attributes_TaskParams defines model for NewWorkflowTask.Data.Attributes.TaskParams.
type NewWorkflowTask_Data_Attributes_TaskParams struct {
	union json.RawMessage
}

// NewWorkflowTaskDataType defines model for NewWorkflowTask.Data.Type.
type NewWorkflowTaskDataType string

// OnCallRole defines model for on_call_role.
type OnCallRole struct {
	AlertSourcesPermissions       *[]OnCallRoleAlertSourcesPermissions       `json:"alert_sources_permissions,omitempty"`
	AlertUrgencyPermissions       *[]OnCallRoleAlertUrgencyPermissions       `json:"alert_urgency_permissions,omitempty"`
	AlertsPermissions             *[]OnCallRoleAlertsPermissions             `json:"alerts_permissions,omitempty"`
	ApiKeysPermissions            *[]OnCallRoleApiKeysPermissions            `json:"api_keys_permissions,omitempty"`
	AuditsPermissions             *[]OnCallRoleAuditsPermissions             `json:"audits_permissions,omitempty"`
	ContactsPermissions           *[]OnCallRoleContactsPermissions           `json:"contacts_permissions,omitempty"`
	CreatedAt                     string                                     `json:"created_at"`
	EscalationPoliciesPermissions *[]OnCallRoleEscalationPoliciesPermissions `json:"escalation_policies_permissions,omitempty"`
	GroupsPermissions             *[]OnCallRoleGroupsPermissions             `json:"groups_permissions,omitempty"`
	HeartbeatsPermissions         *[]OnCallRoleHeartbeatsPermissions         `json:"heartbeats_permissions,omitempty"`
	IntegrationsPermissions       *[]OnCallRoleIntegrationsPermissions       `json:"integrations_permissions,omitempty"`
	InvitationsPermissions        *[]OnCallRoleInvitationsPermissions        `json:"invitations_permissions,omitempty"`
	LiveCallRoutingPermissions    *[]OnCallRoleLiveCallRoutingPermissions    `json:"live_call_routing_permissions,omitempty"`

	// Name The role name.
	Name                        string                                   `json:"name"`
	ScheduleOverridePermissions *[]OnCallRoleScheduleOverridePermissions `json:"schedule_override_permissions,omitempty"`
	SchedulesPermissions        *[]OnCallRoleSchedulesPermissions        `json:"schedules_permissions,omitempty"`
	ServicesPermissions         *[]OnCallRoleServicesPermissions         `json:"services_permissions,omitempty"`

	// Slug The role slug.
	Slug string `json:"slug"`

	// SystemRole The kind of role
	SystemRole           string                            `json:"system_role"`
	UpdatedAt            string                            `json:"updated_at"`
	WebhooksPermissions  *[]OnCallRoleWebhooksPermissions  `json:"webhooks_permissions,omitempty"`
	WorkflowsPermissions *[]OnCallRoleWorkflowsPermissions `json:"workflows_permissions,omitempty"`
}

// OnCallRoleAlertSourcesPermissions defines model for OnCallRole.AlertSourcesPermissions.
type OnCallRoleAlertSourcesPermissions string

// OnCallRoleAlertUrgencyPermissions defines model for OnCallRole.AlertUrgencyPermissions.
type OnCallRoleAlertUrgencyPermissions string

// OnCallRoleAlertsPermissions defines model for OnCallRole.AlertsPermissions.
type OnCallRoleAlertsPermissions string

// OnCallRoleApiKeysPermissions defines model for OnCallRole.ApiKeysPermissions.
type OnCallRoleApiKeysPermissions string

// OnCallRoleAuditsPermissions defines model for OnCallRole.AuditsPermissions.
type OnCallRoleAuditsPermissions string

// OnCallRoleContactsPermissions defines model for OnCallRole.ContactsPermissions.
type OnCallRoleContactsPermissions string

// OnCallRoleEscalationPoliciesPermissions defines model for OnCallRole.EscalationPoliciesPermissions.
type OnCallRoleEscalationPoliciesPermissions string

// OnCallRoleGroupsPermissions defines model for OnCallRole.GroupsPermissions.
type OnCallRoleGroupsPermissions string

// OnCallRoleHeartbeatsPermissions defines model for OnCallRole.HeartbeatsPermissions.
type OnCallRoleHeartbeatsPermissions string

// OnCallRoleIntegrationsPermissions defines model for OnCallRole.IntegrationsPermissions.
type OnCallRoleIntegrationsPermissions string

// OnCallRoleInvitationsPermissions defines model for OnCallRole.InvitationsPermissions.
type OnCallRoleInvitationsPermissions string

// OnCallRoleLiveCallRoutingPermissions defines model for OnCallRole.LiveCallRoutingPermissions.
type OnCallRoleLiveCallRoutingPermissions string

// OnCallRoleScheduleOverridePermissions defines model for OnCallRole.ScheduleOverridePermissions.
type OnCallRoleScheduleOverridePermissions string

// OnCallRoleSchedulesPermissions defines model for OnCallRole.SchedulesPermissions.
type OnCallRoleSchedulesPermissions string

// OnCallRoleServicesPermissions defines model for OnCallRole.ServicesPermissions.
type OnCallRoleServicesPermissions string

// OnCallRoleWebhooksPermissions defines model for OnCallRole.WebhooksPermissions.
type OnCallRoleWebhooksPermissions string

// OnCallRoleWorkflowsPermissions defines model for OnCallRole.WorkflowsPermissions.
type OnCallRoleWorkflowsPermissions string

// OnCallRoleList defines model for on_call_role_list.
type OnCallRoleList struct {
	Data []struct {
		Attributes OnCallRole `json:"attributes"`

		// Id Unique ID of the on_call_role
		Id   string                 `json:"id"`
		Type OnCallRoleListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// OnCallRoleListDataType defines model for OnCallRoleList.Data.Type.
type OnCallRoleListDataType string

// OnCallRoleResponse defines model for on_call_role_response.
type OnCallRoleResponse struct {
	Data struct {
		Attributes OnCallRole `json:"attributes"`

		// Id Unique ID of the on_call_role
		Id   string                     `json:"id"`
		Type OnCallRoleResponseDataType `json:"type"`
	} `json:"data"`
}

// OnCallRoleResponseDataType defines model for OnCallRoleResponse.Data.Type.
type OnCallRoleResponseDataType string

// OnCallShadow defines model for on_call_shadow.
type OnCallShadow struct {
	// CreatedAt Date of creation
	CreatedAt *string `json:"created_at,omitempty"`

	// EndsAt End datetime for shadow shift
	EndsAt time.Time `json:"ends_at"`

	// ScheduleId ID of schedule the shadow shift belongs to
	ScheduleId string `json:"schedule_id"`

	// ShadowUserId Which user the shadow shift belongs to.
	ShadowUserId int `json:"shadow_user_id"`

	// ShadowableId ID of schedule or user the shadow user is shadowing
	ShadowableId   string                     `json:"shadowable_id"`
	ShadowableType OnCallShadowShadowableType `json:"shadowable_type"`

	// StartsAt Start datetime of shadow shift
	StartsAt time.Time `json:"starts_at"`

	// UpdatedAt Date of last update
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// OnCallShadowShadowableType defines model for OnCallShadow.ShadowableType.
type OnCallShadowShadowableType string

// OnCallShadowResponse defines model for on_call_shadow_response.
type OnCallShadowResponse struct {
	Data struct {
		Attributes OnCallShadow `json:"attributes"`

		// Id Unique ID of shadow shift
		Id   string                       `json:"id"`
		Type OnCallShadowResponseDataType `json:"type"`
	} `json:"data"`
}

// OnCallShadowResponseDataType defines model for OnCallShadowResponse.Data.Type.
type OnCallShadowResponseDataType string

// OnCallShadowsList defines model for on_call_shadows_list.
type OnCallShadowsList struct {
	Data []struct {
		Attributes OnCallShadow `json:"attributes"`

		// Id Unique id of the on call shadow shift
		Id   string                    `json:"id"`
		Type OnCallShadowsListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// OnCallShadowsListDataType defines model for OnCallShadowsList.Data.Type.
type OnCallShadowsListDataType string

// OverrideShift defines model for override_shift.
type OverrideShift struct {
	// CreatedAt Date of creation
	CreatedAt *string `json:"created_at,omitempty"`

	// EndsAt End datetime of shift
	EndsAt string `json:"ends_at"`

	// IsOverride Denotes shift is an override shift
	IsOverride bool `json:"is_override"`

	// RotationId ID of rotation
	RotationId *string `json:"rotation_id"`

	// ScheduleId ID of schedule
	ScheduleId string `json:"schedule_id"`

	// ShiftOverride Override metadata
	ShiftOverride *ShiftOverrideResponse `json:"shift_override"`

	// StartsAt Start datetime of shift
	StartsAt string `json:"starts_at"`

	// UpdatedAt Date of last update
	UpdatedAt *string `json:"updated_at,omitempty"`

	// User User metadata
	User *UserResponse `json:"user,omitempty"`
}

// OverrideShiftList defines model for override_shift_list.
type OverrideShiftList struct {
	Data []struct {
		Attributes OverrideShift `json:"attributes"`

		// Id Unique ID of the shift
		Id   string                    `json:"id"`
		Type OverrideShiftListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// OverrideShiftListDataType defines model for OverrideShiftList.Data.Type.
type OverrideShiftListDataType string

// OverrideShiftResponse defines model for override_shift_response.
type OverrideShiftResponse struct {
	Data struct {
		Attributes OverrideShift `json:"attributes"`

		// Id Unique ID of the shift
		Id   string                        `json:"id"`
		Type OverrideShiftResponseDataType `json:"type"`
	} `json:"data"`
}

// OverrideShiftResponseDataType defines model for OverrideShiftResponse.Data.Type.
type OverrideShiftResponseDataType string

// PageOpsgenieOnCallRespondersTaskParams defines model for page_opsgenie_on_call_responders_task_params.
type PageOpsgenieOnCallRespondersTaskParams struct {
	// Description Description field of the incident that is generally used to provide a detailed information about the incident
	Description *string `json:"description,omitempty"`

	// Message Message of the incident
	Message  *string                                         `json:"message,omitempty"`
	Priority *PageOpsgenieOnCallRespondersTaskParamsPriority `json:"priority,omitempty"`
	TaskType *PageOpsgenieOnCallRespondersTaskParamsTaskType `json:"task_type,omitempty"`
	Teams    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"teams,omitempty"`

	// Title Incident title.
	Title *string `json:"title"`
	Users *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"users,omitempty"`
}

// PageOpsgenieOnCallRespondersTaskParamsPriority defines model for PageOpsgenieOnCallRespondersTaskParams.Priority.
type PageOpsgenieOnCallRespondersTaskParamsPriority string

// PageOpsgenieOnCallRespondersTaskParamsTaskType defines model for PageOpsgenieOnCallRespondersTaskParams.TaskType.
type PageOpsgenieOnCallRespondersTaskParamsTaskType string

// PagePagerdutyOnCallRespondersTaskParams defines model for page_pagerduty_on_call_responders_task_params.
type PagePagerdutyOnCallRespondersTaskParams struct {
	// CreateNewIncidentOnConflict Rootly only supports linking to a single PagerDuty incident. If this feature is disabled Rootly will add responders from any additional pages to the existing PagerDuty incident that is linked to the Rootly incident. If enabled, Rootly will create a new PagerDuty incident that is not linked to any Rootly incidents
	CreateNewIncidentOnConflict *bool `json:"create_new_incident_on_conflict,omitempty"`
	EscalationPolicies          *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"escalation_policies,omitempty"`
	Message *string `json:"message,omitempty"`

	// Priority PagerDuty incident priority, selecting auto will let Rootly auto map our incident severity
	Priority *string `json:"priority,omitempty"`
	Service  struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"service"`
	TaskType *PagePagerdutyOnCallRespondersTaskParamsTaskType `json:"task_type,omitempty"`

	// Title Incident title.
	Title   *string                                         `json:"title"`
	Urgency *PagePagerdutyOnCallRespondersTaskParamsUrgency `json:"urgency,omitempty"`
	Users   *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"users,omitempty"`
}

// PagePagerdutyOnCallRespondersTaskParamsTaskType defines model for PagePagerdutyOnCallRespondersTaskParams.TaskType.
type PagePagerdutyOnCallRespondersTaskParamsTaskType string

// PagePagerdutyOnCallRespondersTaskParamsUrgency defines model for PagePagerdutyOnCallRespondersTaskParams.Urgency.
type PagePagerdutyOnCallRespondersTaskParamsUrgency string

// PageRootlyOnCallRespondersTaskParams defines model for page_rootly_on_call_responders_task_params.
type PageRootlyOnCallRespondersTaskParams struct {
	// AlertUrgencyId Alert urgency ID
	AlertUrgencyId *string `json:"alert_urgency_id,omitempty"`

	// Description Alert description
	Description            *string `json:"description,omitempty"`
	EscalationNote         *string `json:"escalation_note,omitempty"`
	EscalationPolicyTarget *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"escalation_policy_target,omitempty"`
	GroupTarget *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"group_target,omitempty"`
	ServiceTarget *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"service_target,omitempty"`

	// Summary Alert title
	Summary    string                                        `json:"summary"`
	TaskType   *PageRootlyOnCallRespondersTaskParamsTaskType `json:"task_type,omitempty"`
	UserTarget *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"user_target,omitempty"`
}

// PageRootlyOnCallRespondersTaskParamsTaskType defines model for PageRootlyOnCallRespondersTaskParams.TaskType.
type PageRootlyOnCallRespondersTaskParamsTaskType string

// PageVictorOpsOnCallRespondersTaskParams defines model for page_victor_ops_on_call_responders_task_params.
type PageVictorOpsOnCallRespondersTaskParams struct {
	EscalationPolicies *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"escalation_policies,omitempty"`
	TaskType *PageVictorOpsOnCallRespondersTaskParamsTaskType `json:"task_type,omitempty"`

	// Title Alert title.
	Title *string `json:"title"`
	Users *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"users,omitempty"`
	union json.RawMessage
}

// PageVictorOpsOnCallRespondersTaskParamsTaskType defines model for PageVictorOpsOnCallRespondersTaskParams.TaskType.
type PageVictorOpsOnCallRespondersTaskParamsTaskType string

// PageVictorOpsOnCallRespondersTaskParams0 defines model for .
type PageVictorOpsOnCallRespondersTaskParams0 = interface{}

// PageVictorOpsOnCallRespondersTaskParams1 defines model for .
type PageVictorOpsOnCallRespondersTaskParams1 = interface{}

// Playbook defines model for playbook.
type Playbook struct {
	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// EnvironmentIds The Environment ID's to attach to the incident
	EnvironmentIds *[]string `json:"environment_ids"`

	// ExternalUrl The external url of the playbook
	ExternalUrl *string `json:"external_url"`

	// FunctionalityIds The Functionality ID's to attach to the incident
	FunctionalityIds *[]string `json:"functionality_ids"`

	// GroupIds The Team ID's to attach to the incident
	GroupIds *[]string `json:"group_ids"`

	// IncidentTypeIds The Incident Type ID's to attach to the incident
	IncidentTypeIds *[]string `json:"incident_type_ids"`

	// ServiceIds The Service ID's to attach to the incident
	ServiceIds *[]string `json:"service_ids"`

	// SeverityIds The Severity ID's to attach to the incident
	SeverityIds *[]string `json:"severity_ids"`

	// Summary The summary of the playbook
	Summary *string `json:"summary"`

	// Title The title of the playbook
	Title string `json:"title"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PlaybookList defines model for playbook_list.
type PlaybookList struct {
	Data []struct {
		Attributes Playbook `json:"attributes"`

		// Id Unique ID of the playbook
		Id   string               `json:"id"`
		Type PlaybookListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// PlaybookListDataType defines model for PlaybookList.Data.Type.
type PlaybookListDataType string

// PlaybookResponse defines model for playbook_response.
type PlaybookResponse struct {
	Data struct {
		Attributes Playbook `json:"attributes"`

		// Id Unique ID of the playbook
		Id   string                   `json:"id"`
		Type PlaybookResponseDataType `json:"type"`
	} `json:"data"`
}

// PlaybookResponseDataType defines model for PlaybookResponse.Data.Type.
type PlaybookResponseDataType string

// PlaybookTask defines model for playbook_task.
type PlaybookTask struct {
	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Description The description of task
	Description *string `json:"description"`
	PlaybookId  *string `json:"playbook_id,omitempty"`

	// Position The position of the task
	Position *int `json:"position"`

	// Task The task of the task
	Task string `json:"task"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PlaybookTaskList defines model for playbook_task_list.
type PlaybookTaskList struct {
	Data []struct {
		Attributes PlaybookTask `json:"attributes"`

		// Id Unique ID of the task
		Id   string                   `json:"id"`
		Type PlaybookTaskListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// PlaybookTaskListDataType defines model for PlaybookTaskList.Data.Type.
type PlaybookTaskListDataType string

// PlaybookTaskResponse defines model for playbook_task_response.
type PlaybookTaskResponse struct {
	Data struct {
		Attributes PlaybookTask `json:"attributes"`

		// Id Unique ID of the task
		Id   string                       `json:"id"`
		Type PlaybookTaskResponseDataType `json:"type"`
	} `json:"data"`
}

// PlaybookTaskResponseDataType defines model for PlaybookTaskResponse.Data.Type.
type PlaybookTaskResponseDataType string

// PostMortemTemplate defines model for post_mortem_template.
type PostMortemTemplate struct {
	// Content The postmortem template. Liquid syntax and markdown are supported
	Content *string `json:"content,omitempty"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Default Default selected template when editing a postmortem
	Default *bool `json:"default"`

	// Format The format of the input
	Format *PostMortemTemplateFormat `json:"format,omitempty"`

	// Name The name of the postmortem template
	Name string `json:"name"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PostMortemTemplateFormat The format of the input
type PostMortemTemplateFormat string

// PostMortemTemplateList defines model for post_mortem_template_list.
type PostMortemTemplateList struct {
	Data []struct {
		Attributes PostMortemTemplate `json:"attributes"`

		// Id Unique ID of the post_mortem_template
		Id   string                         `json:"id"`
		Type PostMortemTemplateListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// PostMortemTemplateListDataType defines model for PostMortemTemplateList.Data.Type.
type PostMortemTemplateListDataType string

// PostMortemTemplateResponse defines model for post_mortem_template_response.
type PostMortemTemplateResponse struct {
	Data struct {
		Attributes PostMortemTemplate `json:"attributes"`

		// Id Unique ID of the post_mortem_template
		Id   string                             `json:"id"`
		Type PostMortemTemplateResponseDataType `json:"type"`
	} `json:"data"`
}

// PostMortemTemplateResponseDataType defines model for PostMortemTemplateResponse.Data.Type.
type PostMortemTemplateResponseDataType string

// PrintTaskParams defines model for print_task_params.
type PrintTaskParams struct {
	// Message The message to print
	Message  string                   `json:"message"`
	TaskType *PrintTaskParamsTaskType `json:"task_type,omitempty"`
}

// PrintTaskParamsTaskType defines model for PrintTaskParams.TaskType.
type PrintTaskParamsTaskType string

// PublishIncidentTaskParams defines model for publish_incident_task_params.
type PublishIncidentTaskParams struct {
	// Event Incident event description
	Event    *string `json:"event,omitempty"`
	Incident struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"incident"`

	// IntegrationPayload Additional API Payload you can pass to statuspage.io for example. Can contain liquid markup and need to be valid JSON
	IntegrationPayload *string `json:"integration_payload"`

	// NotifySubscribers When true notifies subscribers of the status page by email/text
	NotifySubscribers *bool  `json:"notify_subscribers,omitempty"`
	PublicTitle       string `json:"public_title"`

	// ShouldTweet For Statuspage.io integrated pages auto publishes a tweet for your update
	ShouldTweet        *bool                           `json:"should_tweet,omitempty"`
	Status             PublishIncidentTaskParamsStatus `json:"status"`
	StatusPageId       string                          `json:"status_page_id"`
	StatusPageTemplate *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"status_page_template,omitempty"`
	TaskType *PublishIncidentTaskParamsTaskType `json:"task_type,omitempty"`
}

// PublishIncidentTaskParamsStatus defines model for PublishIncidentTaskParams.Status.
type PublishIncidentTaskParamsStatus string

// PublishIncidentTaskParamsTaskType defines model for PublishIncidentTaskParams.TaskType.
type PublishIncidentTaskParamsTaskType string

// Pulse defines model for pulse.
type Pulse struct {
	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Data Additional data
	Data *map[string]interface{} `json:"data"`

	// Environments Environments attached to the pulse
	Environments *[]Environment `json:"environments,omitempty"`

	// ExternalUrl The external url of the pulse
	ExternalUrl *string `json:"external_url"`
	Labels      *[]struct {
		// Key Key of the tag
		Key string `json:"key"`

		// Value Value of the tag
		Value string `json:"value"`
	} `json:"labels,omitempty"`
	Refs *[]struct {
		// Key Key of the ref
		Key string `json:"key"`

		// Value Value of the ref
		Value string `json:"value"`
	} `json:"refs,omitempty"`

	// Services Services attached to the pulse
	Services *[]Service `json:"services,omitempty"`

	// Source The source of the pulse (eg: k8s)
	Source *string `json:"source"`

	// Summary The summary of the pulse
	Summary string `json:"summary"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PulseList defines model for pulse_list.
type PulseList struct {
	Data []struct {
		Attributes Pulse `json:"attributes"`

		// Id Unique ID of the pulse
		Id   string            `json:"id"`
		Type PulseListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// PulseListDataType defines model for PulseList.Data.Type.
type PulseListDataType string

// PulseResponse defines model for pulse_response.
type PulseResponse struct {
	Data struct {
		Attributes Pulse `json:"attributes"`

		// Id Unique ID of the pulse
		Id   string                `json:"id"`
		Type PulseResponseDataType `json:"type"`
	} `json:"data"`
}

// PulseResponseDataType defines model for PulseResponse.Data.Type.
type PulseResponseDataType string

// PulseTriggerParams defines model for pulse_trigger_params.
type PulseTriggerParams struct {
	PulseCondition                 *PulseTriggerParamsPulseCondition        `json:"pulse_condition,omitempty"`
	PulseConditionLabel            *PulseTriggerParamsPulseConditionLabel   `json:"pulse_condition_label,omitempty"`
	PulseConditionLabelUseRegexp   *bool                                    `json:"pulse_condition_label_use_regexp,omitempty"`
	PulseConditionPayload          *PulseTriggerParamsPulseConditionPayload `json:"pulse_condition_payload,omitempty"`
	PulseConditionPayloadUseRegexp *bool                                    `json:"pulse_condition_payload_use_regexp,omitempty"`
	PulseConditionSource           *PulseTriggerParamsPulseConditionSource  `json:"pulse_condition_source,omitempty"`
	PulseConditionSourceUseRegexp  *bool                                    `json:"pulse_condition_source_use_regexp,omitempty"`
	PulseLabels                    *[]string                                `json:"pulse_labels,omitempty"`
	PulsePayload                   *[]string                                `json:"pulse_payload,omitempty"`

	// PulseQueryPayload You can use jsonpath syntax. eg: $.incident.teams[*]
	PulseQueryPayload *string                       `json:"pulse_query_payload"`
	PulseSources      *[]string                     `json:"pulse_sources,omitempty"`
	TriggerType       PulseTriggerParamsTriggerType `json:"trigger_type"`
	Triggers          *[]PulseTriggerParamsTriggers `json:"triggers,omitempty"`
}

// PulseTriggerParamsPulseCondition defines model for PulseTriggerParams.PulseCondition.
type PulseTriggerParamsPulseCondition string

// PulseTriggerParamsPulseConditionLabel defines model for PulseTriggerParams.PulseConditionLabel.
type PulseTriggerParamsPulseConditionLabel string

// PulseTriggerParamsPulseConditionPayload defines model for PulseTriggerParams.PulseConditionPayload.
type PulseTriggerParamsPulseConditionPayload string

// PulseTriggerParamsPulseConditionSource defines model for PulseTriggerParams.PulseConditionSource.
type PulseTriggerParamsPulseConditionSource string

// PulseTriggerParamsTriggerType defines model for PulseTriggerParams.TriggerType.
type PulseTriggerParamsTriggerType string

// PulseTriggerParamsTriggers Actions that trigger the workflow
type PulseTriggerParamsTriggers string

// RedisClientTaskParams defines model for redis_client_task_params.
type RedisClientTaskParams struct {
	Commands               string  `json:"commands"`
	EventMessage           *string `json:"event_message,omitempty"`
	EventUrl               *string `json:"event_url,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *RedisClientTaskParamsTaskType `json:"task_type,omitempty"`
	Url      string                         `json:"url"`
}

// RedisClientTaskParamsTaskType defines model for RedisClientTaskParams.TaskType.
type RedisClientTaskParamsTaskType string

// RemoveGoogleDocsPermissionsTaskParams defines model for remove_google_docs_permissions_task_params.
type RemoveGoogleDocsPermissionsTaskParams struct {
	AttributeToQueryBy RemoveGoogleDocsPermissionsTaskParamsAttributeToQueryBy `json:"attribute_to_query_by"`

	// FileId The Google Doc file ID
	FileId   string                                         `json:"file_id"`
	TaskType *RemoveGoogleDocsPermissionsTaskParamsTaskType `json:"task_type,omitempty"`
	Value    string                                         `json:"value"`
}

// RemoveGoogleDocsPermissionsTaskParamsAttributeToQueryBy defines model for RemoveGoogleDocsPermissionsTaskParams.AttributeToQueryBy.
type RemoveGoogleDocsPermissionsTaskParamsAttributeToQueryBy string

// RemoveGoogleDocsPermissionsTaskParamsTaskType defines model for RemoveGoogleDocsPermissionsTaskParams.TaskType.
type RemoveGoogleDocsPermissionsTaskParamsTaskType string

// RemoveSubscribers defines model for remove_subscribers.
type RemoveSubscribers struct {
	Data struct {
		Attributes struct {
			// RemoveUsersWithNoPrivateIncidentAccess Users without read permissions for private incidents will be removed from the subscriber list of this incident
			RemoveUsersWithNoPrivateIncidentAccess *bool `json:"remove_users_with_no_private_incident_access"`

			// UserIds IDs of users you wish to remove from the list of subscribers for this incident
			UserIds *[]string `json:"user_ids"`
		} `json:"attributes"`
		Type RemoveSubscribersDataType `json:"type"`
	} `json:"data"`
}

// RemoveSubscribersDataType defines model for RemoveSubscribers.Data.Type.
type RemoveSubscribersDataType string

// RenameMicrosoftTeamsChannelTaskParams defines model for rename_microsoft_teams_channel_task_params.
type RenameMicrosoftTeamsChannelTaskParams struct {
	Channel struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channel"`
	TaskType *RenameMicrosoftTeamsChannelTaskParamsTaskType `json:"task_type,omitempty"`
	Team     struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"team"`
	Title string `json:"title"`
}

// RenameMicrosoftTeamsChannelTaskParamsTaskType defines model for RenameMicrosoftTeamsChannelTaskParams.TaskType.
type RenameMicrosoftTeamsChannelTaskParamsTaskType string

// RenameSlackChannelTaskParams defines model for rename_slack_channel_task_params.
type RenameSlackChannelTaskParams struct {
	Channel struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channel"`
	TaskType *RenameSlackChannelTaskParamsTaskType `json:"task_type,omitempty"`
	Title    string                                `json:"title"`
}

// RenameSlackChannelTaskParamsTaskType defines model for RenameSlackChannelTaskParams.TaskType.
type RenameSlackChannelTaskParamsTaskType string

// ResolveAlert defines model for resolve_alert.
type ResolveAlert struct {
	Data *struct {
		Attributes *struct {
			// ResolutionMessage How was the alert resolved?
			ResolutionMessage *string `json:"resolution_message"`

			// ResolveRelatedIncidents Resolve all associated incidents
			ResolveRelatedIncidents *bool `json:"resolve_related_incidents"`
		} `json:"attributes,omitempty"`
		Type *ResolveAlertDataType `json:"type,omitempty"`
	} `json:"data,omitempty"`
}

// ResolveAlertDataType defines model for ResolveAlert.Data.Type.
type ResolveAlertDataType string

// ResolveIncident defines model for resolve_incident.
type ResolveIncident struct {
	Data struct {
		Attributes struct {
			// ResolutionMessage How was the incident resolved?
			ResolutionMessage *string `json:"resolution_message"`
		} `json:"attributes"`
		Type ResolveIncidentDataType `json:"type"`
	} `json:"data"`
}

// ResolveIncidentDataType defines model for ResolveIncident.Data.Type.
type ResolveIncidentDataType string

// RestartIncident defines model for restart_incident.
type RestartIncident struct {
	Data struct {
		Attributes *map[string]interface{} `json:"attributes,omitempty"`
		Type       RestartIncidentDataType `json:"type"`
	} `json:"data"`
}

// RestartIncidentDataType defines model for RestartIncident.Data.Type.
type RestartIncidentDataType string

// RetrospectiveConfiguration defines model for retrospective_configuration.
type RetrospectiveConfiguration struct {
	// CreatedAt Date of creation
	CreatedAt *string `json:"created_at,omitempty"`

	// GroupIds The Team ID's to attach to the retrospective configuration
	GroupIds *[]string `json:"group_ids"`

	// IncidentTypeIds The Incident Type ID's to attach to the retrospective configuration
	IncidentTypeIds *[]string `json:"incident_type_ids"`

	// Kind The kind of the configuration.
	Kind *RetrospectiveConfigurationKind `json:"kind,omitempty"`

	// SeverityIds The Severity ID's to attach to the retrospective configuration
	SeverityIds *[]string `json:"severity_ids"`

	// UpdatedAt Date of last update
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// RetrospectiveConfigurationKind The kind of the configuration.
type RetrospectiveConfigurationKind string

// RetrospectiveConfigurationList defines model for retrospective_configuration_list.
type RetrospectiveConfigurationList struct {
	Data []struct {
		Attributes RetrospectiveConfiguration `json:"attributes"`

		// Id Unique ID of the configuration
		Id   string                                 `json:"id"`
		Type RetrospectiveConfigurationListDataType `json:"type"`
	} `json:"data"`
}

// RetrospectiveConfigurationListDataType defines model for RetrospectiveConfigurationList.Data.Type.
type RetrospectiveConfigurationListDataType string

// RetrospectiveConfigurationResponse defines model for retrospective_configuration_response.
type RetrospectiveConfigurationResponse struct {
	Data struct {
		Attributes RetrospectiveConfiguration `json:"attributes"`

		// Id Unique ID of the retrospective configuration
		Id   string                                     `json:"id"`
		Type RetrospectiveConfigurationResponseDataType `json:"type"`
	} `json:"data"`
}

// RetrospectiveConfigurationResponseDataType defines model for RetrospectiveConfigurationResponse.Data.Type.
type RetrospectiveConfigurationResponseDataType string

// RetrospectiveProcess defines model for retrospective_process.
type RetrospectiveProcess struct {
	// CreatedAt Date of creation
	CreatedAt *string `json:"created_at,omitempty"`

	// Description The description of the retrospective process
	Description *string `json:"description"`

	// IsDefault Indicates the default process that Rootly created. This will be used as a fallback if no processes match the incident's conditions. The default process cannot have conditions and cannot be changed.
	IsDefault *bool `json:"is_default"`

	// Name The name of the retrospective process
	Name                                 *string `json:"name,omitempty"`
	RetrospectiveProcessMatchingCriteria *struct {
		// GroupIds Team ID's for retrospective process matching criteria
		GroupIds *[]string `json:"group_ids,omitempty"`

		// IncidentTypeIds Incident type ID's for retrospective process matching criteria
		IncidentTypeIds *[]string `json:"incident_type_ids,omitempty"`

		// SeverityIds Severity ID's for retrospective process matching criteria
		SeverityIds *[]string `json:"severity_ids,omitempty"`
	} `json:"retrospective_process_matching_criteria,omitempty"`

	// UpdatedAt Date of last update
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// RetrospectiveProcessGroup defines model for retrospective_process_group.
type RetrospectiveProcessGroup struct {
	Position               int    `json:"position"`
	RetrospectiveProcessId string `json:"retrospective_process_id"`
	SubStatusId            string `json:"sub_status_id"`
}

// RetrospectiveProcessGroupList defines model for retrospective_process_group_list.
type RetrospectiveProcessGroupList struct {
	Data []struct {
		Attributes RetrospectiveProcessGroup `json:"attributes"`

		// Id Unique ID of the retrospective_process_group
		Id   string                                `json:"id"`
		Type RetrospectiveProcessGroupListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// RetrospectiveProcessGroupListDataType defines model for RetrospectiveProcessGroupList.Data.Type.
type RetrospectiveProcessGroupListDataType string

// RetrospectiveProcessGroupResponse defines model for retrospective_process_group_response.
type RetrospectiveProcessGroupResponse struct {
	Data struct {
		Attributes RetrospectiveProcessGroup `json:"attributes"`

		// Id Unique ID of the retrospective_process_group
		Id   string                                    `json:"id"`
		Type RetrospectiveProcessGroupResponseDataType `json:"type"`
	} `json:"data"`
}

// RetrospectiveProcessGroupResponseDataType defines model for RetrospectiveProcessGroupResponse.Data.Type.
type RetrospectiveProcessGroupResponseDataType string

// RetrospectiveProcessGroupStep defines model for retrospective_process_group_step.
type RetrospectiveProcessGroupStep struct {
	Position                    int    `json:"position"`
	RetrospectiveProcessGroupId string `json:"retrospective_process_group_id"`
	RetrospectiveStepId         string `json:"retrospective_step_id"`
}

// RetrospectiveProcessGroupStepList defines model for retrospective_process_group_step_list.
type RetrospectiveProcessGroupStepList struct {
	Data []struct {
		Attributes RetrospectiveProcessGroupStep `json:"attributes"`

		// Id Unique ID of the retrospective_process_group_step
		Id   string                                    `json:"id"`
		Type RetrospectiveProcessGroupStepListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// RetrospectiveProcessGroupStepListDataType defines model for RetrospectiveProcessGroupStepList.Data.Type.
type RetrospectiveProcessGroupStepListDataType string

// RetrospectiveProcessGroupStepResponse defines model for retrospective_process_group_step_response.
type RetrospectiveProcessGroupStepResponse struct {
	Data struct {
		Attributes RetrospectiveProcessGroupStep `json:"attributes"`

		// Id Unique ID of the retrospective_process_group_step
		Id   string                                        `json:"id"`
		Type RetrospectiveProcessGroupStepResponseDataType `json:"type"`
	} `json:"data"`
}

// RetrospectiveProcessGroupStepResponseDataType defines model for RetrospectiveProcessGroupStepResponse.Data.Type.
type RetrospectiveProcessGroupStepResponseDataType string

// RetrospectiveProcessList defines model for retrospective_process_list.
type RetrospectiveProcessList struct {
	Data []struct {
		Attributes RetrospectiveProcess `json:"attributes"`

		// Id Unique ID of the retrospective process
		Id   string                           `json:"id"`
		Type RetrospectiveProcessListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// RetrospectiveProcessListDataType defines model for RetrospectiveProcessList.Data.Type.
type RetrospectiveProcessListDataType string

// RetrospectiveProcessResponse defines model for retrospective_process_response.
type RetrospectiveProcessResponse struct {
	Data struct {
		Attributes RetrospectiveProcess `json:"attributes"`

		// Id Unique id of retrospective process
		Id   string                               `json:"id"`
		Type RetrospectiveProcessResponseDataType `json:"type"`
	} `json:"data"`
}

// RetrospectiveProcessResponseDataType defines model for RetrospectiveProcessResponse.Data.Type.
type RetrospectiveProcessResponseDataType string

// RetrospectiveStep defines model for retrospective_step.
type RetrospectiveStep struct {
	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Description The description of the step
	Description *string `json:"description"`

	// DueAfterDays Due date in days
	DueAfterDays *int `json:"due_after_days"`

	// IncidentRoleId Users assigned to the selected incident role will be the default owners for this step
	IncidentRoleId *string `json:"incident_role_id"`

	// Position Position of the step
	Position               *int   `json:"position,omitempty"`
	RetrospectiveProcessId string `json:"retrospective_process_id"`

	// Skippable Is the step skippable?
	Skippable *bool `json:"skippable,omitempty"`

	// Slug The slug of the step
	Slug *string `json:"slug,omitempty"`

	// Title The name of the step
	Title string `json:"title"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// RetrospectiveStepList defines model for retrospective_step_list.
type RetrospectiveStepList struct {
	Data []struct {
		Attributes RetrospectiveStep `json:"attributes"`

		// Id Unique ID of the step
		Id   string                        `json:"id"`
		Type RetrospectiveStepListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// RetrospectiveStepListDataType defines model for RetrospectiveStepList.Data.Type.
type RetrospectiveStepListDataType string

// RetrospectiveStepResponse defines model for retrospective_step_response.
type RetrospectiveStepResponse struct {
	Data struct {
		Attributes RetrospectiveStep `json:"attributes"`

		// Id Unique ID of the step
		Id   string                            `json:"id"`
		Type RetrospectiveStepResponseDataType `json:"type"`
	} `json:"data"`
}

// RetrospectiveStepResponseDataType defines model for RetrospectiveStepResponse.Data.Type.
type RetrospectiveStepResponseDataType string

// Role defines model for role.
type Role struct {
	AlertsPermissions            *[]RoleAlertsPermissions            `json:"alerts_permissions,omitempty"`
	ApiKeysPermissions           *[]RoleApiKeysPermissions           `json:"api_keys_permissions,omitempty"`
	AuditsPermissions            *[]RoleAuditsPermissions            `json:"audits_permissions,omitempty"`
	BillingPermissions           *[]RoleBillingPermissions           `json:"billing_permissions,omitempty"`
	CreatedAt                    string                              `json:"created_at"`
	EnvironmentsPermissions      *[]RoleEnvironmentsPermissions      `json:"environments_permissions,omitempty"`
	FormFieldsPermissions        *[]RoleFormFieldsPermissions        `json:"form_fields_permissions,omitempty"`
	FunctionalitiesPermissions   *[]RoleFunctionalitiesPermissions   `json:"functionalities_permissions,omitempty"`
	GroupsPermissions            *[]RoleGroupsPermissions            `json:"groups_permissions,omitempty"`
	IncidentCausesPermissions    *[]RoleIncidentCausesPermissions    `json:"incident_causes_permissions,omitempty"`
	IncidentFeedbacksPermissions *[]RoleIncidentFeedbacksPermissions `json:"incident_feedbacks_permissions,omitempty"`

	// IncidentPermissionSetId Associated incident permissions set.
	IncidentPermissionSetId  *string                         `json:"incident_permission_set_id"`
	IncidentRolesPermissions *[]RoleIncidentRolesPermissions `json:"incident_roles_permissions,omitempty"`
	IncidentTypesPermissions *[]RoleIncidentTypesPermissions `json:"incident_types_permissions,omitempty"`
	IncidentsPermissions     *[]RoleIncidentsPermissions     `json:"incidents_permissions,omitempty"`
	InvitationsPermissions   *[]RoleInvitationsPermissions   `json:"invitations_permissions,omitempty"`

	// IsDeletable Whether the role can be deleted.
	IsDeletable *bool `json:"is_deletable,omitempty"`

	// IsEditable Whether the role can be edited.
	IsEditable *bool `json:"is_editable,omitempty"`

	// Name The role name.
	Name                        string                             `json:"name"`
	PlaybooksPermissions        *[]RolePlaybooksPermissions        `json:"playbooks_permissions,omitempty"`
	PrivateIncidentsPermissions *[]RolePrivateIncidentsPermissions `json:"private_incidents_permissions,omitempty"`
	PulsesPermissions           *[]RolePulsesPermissions           `json:"pulses_permissions,omitempty"`
	RetrospectivePermissions    *[]RoleRetrospectivePermissions    `json:"retrospective_permissions,omitempty"`
	RolesPermissions            *[]RoleRolesPermissions            `json:"roles_permissions,omitempty"`
	SecretsPermissions          *[]RoleSecretsPermissions          `json:"secrets_permissions,omitempty"`
	ServicesPermissions         *[]RoleServicesPermissions         `json:"services_permissions,omitempty"`
	SeveritiesPermissions       *[]RoleSeveritiesPermissions       `json:"severities_permissions,omitempty"`

	// Slug The role slug.
	Slug                   string                        `json:"slug"`
	StatusPagesPermissions *[]RoleStatusPagesPermissions `json:"status_pages_permissions,omitempty"`
	UpdatedAt              string                        `json:"updated_at"`
	WebhooksPermissions    *[]RoleWebhooksPermissions    `json:"webhooks_permissions,omitempty"`
	WorkflowsPermissions   *[]RoleWorkflowsPermissions   `json:"workflows_permissions,omitempty"`
}

// RoleAlertsPermissions defines model for Role.AlertsPermissions.
type RoleAlertsPermissions string

// RoleApiKeysPermissions defines model for Role.ApiKeysPermissions.
type RoleApiKeysPermissions string

// RoleAuditsPermissions defines model for Role.AuditsPermissions.
type RoleAuditsPermissions string

// RoleBillingPermissions defines model for Role.BillingPermissions.
type RoleBillingPermissions string

// RoleEnvironmentsPermissions defines model for Role.EnvironmentsPermissions.
type RoleEnvironmentsPermissions string

// RoleFormFieldsPermissions defines model for Role.FormFieldsPermissions.
type RoleFormFieldsPermissions string

// RoleFunctionalitiesPermissions defines model for Role.FunctionalitiesPermissions.
type RoleFunctionalitiesPermissions string

// RoleGroupsPermissions defines model for Role.GroupsPermissions.
type RoleGroupsPermissions string

// RoleIncidentCausesPermissions defines model for Role.IncidentCausesPermissions.
type RoleIncidentCausesPermissions string

// RoleIncidentFeedbacksPermissions defines model for Role.IncidentFeedbacksPermissions.
type RoleIncidentFeedbacksPermissions string

// RoleIncidentRolesPermissions defines model for Role.IncidentRolesPermissions.
type RoleIncidentRolesPermissions string

// RoleIncidentTypesPermissions defines model for Role.IncidentTypesPermissions.
type RoleIncidentTypesPermissions string

// RoleIncidentsPermissions defines model for Role.IncidentsPermissions.
type RoleIncidentsPermissions string

// RoleInvitationsPermissions defines model for Role.InvitationsPermissions.
type RoleInvitationsPermissions string

// RolePlaybooksPermissions defines model for Role.PlaybooksPermissions.
type RolePlaybooksPermissions string

// RolePrivateIncidentsPermissions defines model for Role.PrivateIncidentsPermissions.
type RolePrivateIncidentsPermissions string

// RolePulsesPermissions defines model for Role.PulsesPermissions.
type RolePulsesPermissions string

// RoleRetrospectivePermissions defines model for Role.RetrospectivePermissions.
type RoleRetrospectivePermissions string

// RoleRolesPermissions defines model for Role.RolesPermissions.
type RoleRolesPermissions string

// RoleSecretsPermissions defines model for Role.SecretsPermissions.
type RoleSecretsPermissions string

// RoleServicesPermissions defines model for Role.ServicesPermissions.
type RoleServicesPermissions string

// RoleSeveritiesPermissions defines model for Role.SeveritiesPermissions.
type RoleSeveritiesPermissions string

// RoleStatusPagesPermissions defines model for Role.StatusPagesPermissions.
type RoleStatusPagesPermissions string

// RoleWebhooksPermissions defines model for Role.WebhooksPermissions.
type RoleWebhooksPermissions string

// RoleWorkflowsPermissions defines model for Role.WorkflowsPermissions.
type RoleWorkflowsPermissions string

// RoleList defines model for role_list.
type RoleList struct {
	Data []struct {
		Attributes Role `json:"attributes"`

		// Id Unique ID of the role
		Id   string           `json:"id"`
		Type RoleListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// RoleListDataType defines model for RoleList.Data.Type.
type RoleListDataType string

// RoleResponse defines model for role_response.
type RoleResponse struct {
	Data struct {
		Attributes Role `json:"attributes"`

		// Id Unique ID of the role
		Id   string               `json:"id"`
		Type RoleResponseDataType `json:"type"`
	} `json:"data"`
}

// RoleResponseDataType defines model for RoleResponse.Data.Type.
type RoleResponseDataType string

// RunCommandHerokuTaskParams defines model for run_command_heroku_task_params.
type RunCommandHerokuTaskParams struct {
	AppName                string `json:"app_name"`
	Command                string `json:"command"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	Size     RunCommandHerokuTaskParamsSize      `json:"size"`
	TaskType *RunCommandHerokuTaskParamsTaskType `json:"task_type,omitempty"`
}

// RunCommandHerokuTaskParamsSize defines model for RunCommandHerokuTaskParams.Size.
type RunCommandHerokuTaskParamsSize string

// RunCommandHerokuTaskParamsTaskType defines model for RunCommandHerokuTaskParams.TaskType.
type RunCommandHerokuTaskParamsTaskType string

// Schedule defines model for schedule.
type Schedule struct {
	// AllTimeCoverage 24/7 coverage of the schedule
	AllTimeCoverage *bool `json:"all_time_coverage"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Description The description of the schedule
	Description *string `json:"description"`

	// Name The name of the schedule
	Name string `json:"name"`

	// OwnerUserId ID of user assigned as owner of the schedule
	OwnerUserId *int `json:"owner_user_id"`

	// SlackUserGroup Synced slack group of the schedule
	SlackUserGroup *string `json:"slack_user_group"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// ScheduleList defines model for schedule_list.
type ScheduleList struct {
	Data []struct {
		Attributes Schedule `json:"attributes"`

		// Id Unique ID of the schedule
		Id   string               `json:"id"`
		Type ScheduleListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// ScheduleListDataType defines model for ScheduleList.Data.Type.
type ScheduleListDataType string

// ScheduleResponse defines model for schedule_response.
type ScheduleResponse struct {
	Data struct {
		Attributes Schedule `json:"attributes"`

		// Id Unique id of schedule
		Id   string                   `json:"id"`
		Type ScheduleResponseDataType `json:"type"`
	} `json:"data"`
}

// ScheduleResponseDataType defines model for ScheduleResponse.Data.Type.
type ScheduleResponseDataType string

// ScheduleRotation defines model for schedule_rotation.
type ScheduleRotation struct {
	// ActiveAllWeek Schedule rotation active all week?
	ActiveAllWeek *bool                         `json:"active_all_week,omitempty"`
	ActiveDays    *[]ScheduleRotationActiveDays `json:"active_days,omitempty"`

	// ActiveTimeAttributes Schedule rotation's active times
	ActiveTimeAttributes *[]struct {
		// EndTime End time for schedule rotation active time
		EndTime string `json:"end_time"`

		// StartTime Start time for schedule rotation active time
		StartTime string `json:"start_time"`
	} `json:"active_time_attributes,omitempty"`
	ActiveTimeType *string `json:"active_time_type,omitempty"`

	// Name The name of the schedule rotation
	Name string `json:"name"`

	// Position Position of the schedule rotation
	Position *int `json:"position,omitempty"`

	// ScheduleId The ID of parent schedule
	ScheduleId                     string `json:"schedule_id"`
	ScheduleRotationableAttributes struct {
		// HandoffDay Hand off day for monthly rotation
		HandoffDay *ScheduleRotationScheduleRotationableAttributesHandoffDay `json:"handoff_day,omitempty"`

		// HandoffTime Hand off time for custom rotation
		HandoffTime *string `json:"handoff_time,omitempty"`

		// ShiftLength Shift length for custom rotation
		ShiftLength *int `json:"shift_length,omitempty"`

		// ShiftLengthUnit Shift length unit for custom rotation
		ShiftLengthUnit *ScheduleRotationScheduleRotationableAttributesShiftLengthUnit `json:"shift_length_unit,omitempty"`
	} `json:"schedule_rotationable_attributes"`

	// ScheduleRotationableType Schedule rotation type
	ScheduleRotationableType ScheduleRotationScheduleRotationableType `json:"schedule_rotationable_type"`

	// TimeZone A valid IANA time zone name.
	TimeZone *string `json:"time_zone,omitempty"`
}

// ScheduleRotationActiveDays Schedule rotation active days
type ScheduleRotationActiveDays string

// ScheduleRotationScheduleRotationableAttributesHandoffDay Hand off day for monthly rotation
type ScheduleRotationScheduleRotationableAttributesHandoffDay string

// ScheduleRotationScheduleRotationableAttributesShiftLengthUnit Shift length unit for custom rotation
type ScheduleRotationScheduleRotationableAttributesShiftLengthUnit string

// ScheduleRotationScheduleRotationableType Schedule rotation type
type ScheduleRotationScheduleRotationableType string

// ScheduleRotationActiveDay defines model for schedule_rotation_active_day.
type ScheduleRotationActiveDay struct {
	// ActiveTimeAttributes Schedule rotation active times per day
	ActiveTimeAttributes []struct {
		// EndTime End time for schedule rotation active time
		EndTime *string `json:"end_time,omitempty"`

		// StartTime Start time for schedule rotation active time
		StartTime *string `json:"start_time,omitempty"`
	} `json:"active_time_attributes"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// DayName Schedule rotation day name for which active times to be created
	DayName            ScheduleRotationActiveDayDayName `json:"day_name"`
	ScheduleRotationId string                           `json:"schedule_rotation_id"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// ScheduleRotationActiveDayDayName Schedule rotation day name for which active times to be created
type ScheduleRotationActiveDayDayName string

// ScheduleRotationActiveDayList defines model for schedule_rotation_active_day_list.
type ScheduleRotationActiveDayList struct {
	Data []struct {
		Attributes ScheduleRotationActiveDay `json:"attributes"`

		// Id Unique ID of the schedule rotation active time
		Id   string                                `json:"id"`
		Type ScheduleRotationActiveDayListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// ScheduleRotationActiveDayListDataType defines model for ScheduleRotationActiveDayList.Data.Type.
type ScheduleRotationActiveDayListDataType string

// ScheduleRotationActiveDayResponse defines model for schedule_rotation_active_day_response.
type ScheduleRotationActiveDayResponse struct {
	Data *struct {
		Attributes *ScheduleRotationActiveDay `json:"attributes,omitempty"`

		// Id Unique ID of the schedule rotation active time
		Id   *string                                    `json:"id,omitempty"`
		Type *ScheduleRotationActiveDayResponseDataType `json:"type,omitempty"`
	} `json:"data,omitempty"`
}

// ScheduleRotationActiveDayResponseDataType defines model for ScheduleRotationActiveDayResponse.Data.Type.
type ScheduleRotationActiveDayResponseDataType string

// ScheduleRotationList defines model for schedule_rotation_list.
type ScheduleRotationList struct {
	Data []struct {
		Attributes ScheduleRotation `json:"attributes"`

		// Id Unique ID of the schedule rotation
		Id   string                       `json:"id"`
		Type ScheduleRotationListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// ScheduleRotationListDataType defines model for ScheduleRotationList.Data.Type.
type ScheduleRotationListDataType string

// ScheduleRotationResponse defines model for schedule_rotation_response.
type ScheduleRotationResponse struct {
	Data struct {
		Attributes ScheduleRotation `json:"attributes"`

		// Id Unique ID of the schedule rotation
		Id   string                           `json:"id"`
		Type ScheduleRotationResponseDataType `json:"type"`
	} `json:"data"`
}

// ScheduleRotationResponseDataType defines model for ScheduleRotationResponse.Data.Type.
type ScheduleRotationResponseDataType string

// ScheduleRotationUser defines model for schedule_rotation_user.
type ScheduleRotationUser struct {
	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Position Position of the user inside rotation
	Position           int    `json:"position"`
	ScheduleRotationId string `json:"schedule_rotation_id"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`

	// UserId Schedule rotation user
	UserId int `json:"user_id"`
}

// ScheduleRotationUserList defines model for schedule_rotation_user_list.
type ScheduleRotationUserList struct {
	Data []struct {
		Attributes ScheduleRotationUser `json:"attributes"`

		// Id Unique ID of the schedule rotation user
		Id   string                           `json:"id"`
		Type ScheduleRotationUserListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// ScheduleRotationUserListDataType defines model for ScheduleRotationUserList.Data.Type.
type ScheduleRotationUserListDataType string

// ScheduleRotationUserResponse defines model for schedule_rotation_user_response.
type ScheduleRotationUserResponse struct {
	Data struct {
		Attributes ScheduleRotationUser `json:"attributes"`

		// Id Unique ID of the schedule rotation user
		Id   string                               `json:"id"`
		Type ScheduleRotationUserResponseDataType `json:"type"`
	} `json:"data"`
}

// ScheduleRotationUserResponseDataType defines model for ScheduleRotationUserResponse.Data.Type.
type ScheduleRotationUserResponseDataType string

// Secret defines model for secret.
type Secret struct {
	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// HashicorpVaultMount The HashiCorp Vault secret mount path
	HashicorpVaultMount *string `json:"hashicorp_vault_mount,omitempty"`

	// HashicorpVaultPath The HashiCorp Vault secret path
	HashicorpVaultPath *string `json:"hashicorp_vault_path"`

	// HashicorpVaultVersion The HashiCorp Vault secret version
	HashicorpVaultVersion *int `json:"hashicorp_vault_version,omitempty"`

	// Name The name of the secret
	Name string `json:"name"`

	// Secret The redacted secret
	Secret *string `json:"secret,omitempty"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// SecretList defines model for secret_list.
type SecretList struct {
	Data []struct {
		Attributes Secret `json:"attributes"`

		// Id Unique ID of the secret
		Id   string             `json:"id"`
		Type SecretListDataType `json:"type"`
	} `json:"data"`
	Links *Links `json:"links,omitempty"`
}

// SecretListDataType defines model for SecretList.Data.Type.
type SecretListDataType string

// SecretResponse defines model for secret_response.
type SecretResponse struct {
	Data struct {
		Attributes Secret `json:"attributes"`

		// Id Unique ID of the secret
		Id   string                 `json:"id"`
		Type SecretResponseDataType `json:"type"`
	} `json:"data"`
}

// SecretResponseDataType defines model for SecretResponse.Data.Type.
type SecretResponseDataType string

// SendDashboardReportTaskParams defines model for send_dashboard_report_task_params.
type SendDashboardReportTaskParams struct {
	// Body The email body
	Body         *string  `json:"body"`
	DashboardIds []string `json:"dashboard_ids"`

	// From The from email address. Need to use SMTP integration if different than rootly.com
	From *string `json:"from,omitempty"`

	// Preheader The preheader
	Preheader *string `json:"preheader"`

	// Subject The subject
	Subject  string                                 `json:"subject"`
	TaskType *SendDashboardReportTaskParamsTaskType `json:"task_type,omitempty"`
	To       []string                               `json:"to"`
}

// SendDashboardReportTaskParamsTaskType defines model for SendDashboardReportTaskParams.TaskType.
type SendDashboardReportTaskParamsTaskType string

// SendEmailTaskParams defines model for send_email_task_params.
type SendEmailTaskParams struct {
	Bcc *[]string `json:"bcc,omitempty"`

	// Body The email body
	Body *string   `json:"body"`
	Cc   *[]string `json:"cc,omitempty"`

	// CustomLogoUrl URL to your custom email logo
	CustomLogoUrl *string `json:"custom_logo_url"`

	// From The from email address. Need to use SMTP integration if different than rootly.com
	From          *string `json:"from,omitempty"`
	IncludeFooter *bool   `json:"include_footer,omitempty"`
	IncludeHeader *bool   `json:"include_header,omitempty"`

	// Preheader The preheader
	Preheader *string `json:"preheader"`

	// Subject The subject
	Subject  string                       `json:"subject"`
	TaskType *SendEmailTaskParamsTaskType `json:"task_type,omitempty"`
	To       []string                     `json:"to"`
}

// SendEmailTaskParamsTaskType defines model for SendEmailTaskParams.TaskType.
type SendEmailTaskParamsTaskType string

// SendMicrosoftTeamsBlocksTaskParams defines model for send_microsoft_teams_blocks_task_params.
type SendMicrosoftTeamsBlocksTaskParams struct {
	// Attachments Support liquid markup. Needs to be a valid JSON string after liquid is parsed
	Attachments string                                      `json:"attachments"`
	TaskType    *SendMicrosoftTeamsBlocksTaskParamsTaskType `json:"task_type,omitempty"`
	union       json.RawMessage
}

// SendMicrosoftTeamsBlocksTaskParamsTaskType defines model for SendMicrosoftTeamsBlocksTaskParams.TaskType.
type SendMicrosoftTeamsBlocksTaskParamsTaskType string

// SendMicrosoftTeamsBlocksTaskParams0 defines model for .
type SendMicrosoftTeamsBlocksTaskParams0 = interface{}

// SendMicrosoftTeamsMessageTaskParams defines model for send_microsoft_teams_message_task_params.
type SendMicrosoftTeamsMessageTaskParams struct {
	Channels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channels,omitempty"`
	TaskType *SendMicrosoftTeamsMessageTaskParamsTaskType `json:"task_type,omitempty"`

	// Text The message text
	Text  string `json:"text"`
	union json.RawMessage
}

// SendMicrosoftTeamsMessageTaskParamsTaskType defines model for SendMicrosoftTeamsMessageTaskParams.TaskType.
type SendMicrosoftTeamsMessageTaskParamsTaskType string

// SendMicrosoftTeamsMessageTaskParams0 defines model for .
type SendMicrosoftTeamsMessageTaskParams0 = interface{}

// SendSlackBlocksTaskParams defines model for send_slack_blocks_task_params.
type SendSlackBlocksTaskParams struct {
	// Attachments Support liquid markup. Needs to be a valid JSON string after liquid is parsed
	Attachments *string `json:"attachments,omitempty"`

	// Blocks Support liquid markup. Needs to be a valid JSON string after liquid is parsed
	Blocks                        string `json:"blocks"`
	BroadcastThreadReplyToChannel *bool  `json:"broadcast_thread_reply_to_channel,omitempty"`
	Channels                      *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channels,omitempty"`
	Message *string `json:"message,omitempty"`

	// ParentMessageThreadTask A hash where [id] is the task id of the parent task that sent a message, and [name] is the name of the parent task
	ParentMessageThreadTask *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_message_thread_task,omitempty"`
	PinToChannel    *bool `json:"pin_to_channel,omitempty"`
	SendAsEphemeral *bool `json:"send_as_ephemeral,omitempty"`

	// SendOnlyAsThreadedMessage When set to true, if the parent for this threaded message cannot be found the message will be skipped.
	SendOnlyAsThreadedMessage *bool `json:"send_only_as_threaded_message,omitempty"`
	SlackUserGroups           *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"slack_user_groups,omitempty"`
	SlackUsers *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"slack_users,omitempty"`
	TaskType            *SendSlackBlocksTaskParamsTaskType `json:"task_type,omitempty"`
	UpdateParentMessage *bool                              `json:"update_parent_message,omitempty"`
	union               json.RawMessage
}

// SendSlackBlocksTaskParamsTaskType defines model for SendSlackBlocksTaskParams.TaskType.
type SendSlackBlocksTaskParamsTaskType string

// SendSlackBlocksTaskParams0 defines model for .
type SendSlackBlocksTaskParams0 = interface{}

// SendSlackBlocksTaskParams1 defines model for .
type SendSlackBlocksTaskParams1 = interface{}

// SendSlackBlocksTaskParams2 defines model for .
type SendSlackBlocksTaskParams2 = interface{}

// SendSlackMessageTaskParams defines model for send_slack_message_task_params.
type SendSlackMessageTaskParams struct {
	Actionables                   *[]SendSlackMessageTaskParamsActionables `json:"actionables,omitempty"`
	BroadcastThreadReplyToChannel *bool                                    `json:"broadcast_thread_reply_to_channel,omitempty"`
	Channels                      *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channels,omitempty"`

	// Color A hex color ex. #FFFFFF
	Color *string `json:"color,omitempty"`

	// ParentMessageThreadTask A hash where [id] is the task id of the parent task that sent a message, and [name] is the name of the parent task
	ParentMessageThreadTask *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_message_thread_task,omitempty"`
	PinToChannel    *bool `json:"pin_to_channel,omitempty"`
	SendAsEphemeral *bool `json:"send_as_ephemeral,omitempty"`

	// SendOnlyAsThreadedMessage When set to true, if the parent for this threaded message cannot be found the message will be skipped.
	SendOnlyAsThreadedMessage *bool `json:"send_only_as_threaded_message,omitempty"`
	SlackUserGroups           *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"slack_user_groups,omitempty"`
	SlackUsers *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"slack_users,omitempty"`
	TaskType *SendSlackMessageTaskParamsTaskType `json:"task_type,omitempty"`

	// Text The message text
	Text                string `json:"text"`
	UpdateParentMessage *bool  `json:"update_parent_message,omitempty"`
	union               json.RawMessage
}

// SendSlackMessageTaskParamsActionables defines model for SendSlackMessageTaskParams.Actionables.
type SendSlackMessageTaskParamsActionables string

// SendSlackMessageTaskParamsTaskType defines model for SendSlackMessageTaskParams.TaskType.
type SendSlackMessageTaskParamsTaskType string

// SendSlackMessageTaskParams0 defines model for .
type SendSlackMessageTaskParams0 = interface{}

// SendSlackMessageTaskParams1 defines model for .
type SendSlackMessageTaskParams1 = interface{}

// SendSlackMessageTaskParams2 defines model for .
type SendSlackMessageTaskParams2 = interface{}

// SendSmsTaskParams defines model for send_sms_task_params.
type SendSmsTaskParams struct {
	// Content The SMS message
	Content string `json:"content"`

	// Name The name
	Name         string                     `json:"name"`
	PhoneNumbers []string                   `json:"phone_numbers"`
	TaskType     *SendSmsTaskParamsTaskType `json:"task_type,omitempty"`
}

// SendSmsTaskParamsTaskType defines model for SendSmsTaskParams.TaskType.
type SendSmsTaskParamsTaskType string

// SendWhatsappMessageTaskParams defines model for send_whatsapp_message_task_params.
type SendWhatsappMessageTaskParams struct {
	// Content The WhatsApp message
	Content string `json:"content"`

	// Name The name
	Name         string                                 `json:"name"`
	PhoneNumbers []string                               `json:"phone_numbers"`
	TaskType     *SendWhatsappMessageTaskParamsTaskType `json:"task_type,omitempty"`
}

// SendWhatsappMessageTaskParamsTaskType defines model for SendWhatsappMessageTaskParams.TaskType.
type SendWhatsappMessageTaskParamsTaskType string

// Service defines model for service.
type Service struct {
	// AlertUrgencyId The alert urgency id of the service
	AlertUrgencyId *string `json:"alert_urgency_id"`

	// BackstageId The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
	BackstageId *string `json:"backstage_id"`

	// Color The hex color of the service
	Color *string `json:"color"`

	// CortexId The Cortex group id associated to this service
	CortexId *string `json:"cortex_id"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Description The description of the service
	Description *string `json:"description"`

	// EnvironmentIds Environments associated with this service
	EnvironmentIds *[]string `json:"environment_ids"`

	// ExternalId The external id associated to this service
	ExternalId *string `json:"external_id"`

	// GithubRepositoryBranch The GitHub repository branch associated to this service. eg: main
	GithubRepositoryBranch *string `json:"github_repository_branch"`

	// GithubRepositoryName The GitHub repository name associated to this service. eg: rootlyhq/my-service
	GithubRepositoryName *string `json:"github_repository_name"`

	// GitlabRepositoryBranch The Gitlab repository branch associated to this service. eg: main
	GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

	// GitlabRepositoryName The Gitlab repository name associated to this service. eg: rootlyhq/my-service
	GitlabRepositoryName *string `json:"gitlab_repository_name"`

	// Name The name of the service
	Name string `json:"name"`

	// NotifyEmails Emails attached to the service
	NotifyEmails *[]string `json:"notify_emails"`

	// OpsgenieId The Opsgenie service id associated to this service
	OpsgenieId *string `json:"opsgenie_id"`

	// OwnersGroupIds Owner Teams associated with this service
	OwnersGroupIds *[]string `json:"owners_group_ids"`

	// OwnersUserIds Owner Users associated with this service
	OwnersUserIds *[]int `json:"owners_user_ids"`

	// PagerdutyId The PagerDuty service id associated to this service
	PagerdutyId *string `json:"pagerduty_id"`

	// Position Position of the service
	Position *int `json:"position"`

	// PublicDescription The public description of the service
	PublicDescription *string `json:"public_description"`

	// ServiceIds Services dependent on this service
	ServiceIds *[]string `json:"service_ids"`

	// ServiceNowCiSysId The Service Now CI sys id associated to this service
	ServiceNowCiSysId *string `json:"service_now_ci_sys_id"`

	// SlackAliases Slack Aliases associated with this service
	SlackAliases *[]struct {
		// Id Slack alias ID
		Id string `json:"id"`

		// Name Slack alias name
		Name string `json:"name"`
	} `json:"slack_aliases"`

	// SlackChannels Slack Channels associated with this service
	SlackChannels *[]struct {
		// Id Slack channel ID
		Id string `json:"id"`

		// Name Slack channel name
		Name string `json:"name"`
	} `json:"slack_channels"`

	// Slug The slug of the service
	Slug *string `json:"slug,omitempty"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// ServiceList defines model for service_list.
type ServiceList struct {
	Data []struct {
		Attributes Service `json:"attributes"`

		// Id Unique ID of the service
		Id   string              `json:"id"`
		Type ServiceListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// ServiceListDataType defines model for ServiceList.Data.Type.
type ServiceListDataType string

// ServiceResponse defines model for service_response.
type ServiceResponse struct {
	Data struct {
		Attributes Service `json:"attributes"`

		// Id Unique ID of the service
		Id   string                  `json:"id"`
		Type ServiceResponseDataType `json:"type"`
	} `json:"data"`
}

// ServiceResponseDataType defines model for ServiceResponse.Data.Type.
type ServiceResponseDataType string

// Severity defines model for severity.
type Severity struct {
	// Color The hex color of the severity
	Color *string `json:"color"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Description The description of the severity
	Description *string `json:"description"`

	// Name The name of the severity
	Name string `json:"name"`

	// NotifyEmails Emails to attach to the severity
	NotifyEmails *[]string `json:"notify_emails"`

	// Position Position of the severity
	Position *int `json:"position"`

	// Severity The severity of the severity
	Severity *SeveritySeverity `json:"severity,omitempty"`

	// SlackAliases Slack Aliases associated with this severity
	SlackAliases *[]struct {
		// Id Slack alias ID
		Id string `json:"id"`

		// Name Slack alias name
		Name string `json:"name"`
	} `json:"slack_aliases"`

	// SlackChannels Slack Channels associated with this severity
	SlackChannels *[]struct {
		// Id Slack channel ID
		Id string `json:"id"`

		// Name Slack channel name
		Name string `json:"name"`
	} `json:"slack_channels"`

	// Slug The slug of the severity
	Slug *string `json:"slug,omitempty"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// SeveritySeverity The severity of the severity
type SeveritySeverity string

// SeverityList defines model for severity_list.
type SeverityList struct {
	Data []struct {
		Attributes Severity `json:"attributes"`

		// Id Unique ID of the severity
		Id   string               `json:"id"`
		Type SeverityListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// SeverityListDataType defines model for SeverityList.Data.Type.
type SeverityListDataType string

// SeverityResponse defines model for severity_response.
type SeverityResponse struct {
	Data struct {
		Attributes Severity `json:"attributes"`

		// Id Unique ID of the severity
		Id   string                   `json:"id"`
		Type SeverityResponseDataType `json:"type"`
	} `json:"data"`
}

// SeverityResponseDataType defines model for SeverityResponse.Data.Type.
type SeverityResponseDataType string

// Shift defines model for shift.
type Shift struct {
	// EndsAt End datetime of shift
	EndsAt string `json:"ends_at"`

	// IsOverride Denotes shift is an override shift
	IsOverride bool `json:"is_override"`

	// RotationId ID of rotation
	RotationId *string `json:"rotation_id"`

	// ScheduleId ID of schedule
	ScheduleId string `json:"schedule_id"`

	// ShiftOverride Override metadata
	ShiftOverride *ShiftOverrideResponse `json:"shift_override"`

	// StartsAt Start datetime of shift
	StartsAt string `json:"starts_at"`

	// User User metadata
	User *UserResponse `json:"user,omitempty"`
}

// ShiftList defines model for shift_list.
type ShiftList struct {
	Data []struct {
		Attributes Shift `json:"attributes"`

		// Id Unique ID of the shift
		Id   string            `json:"id"`
		Type ShiftListDataType `json:"type"`
	} `json:"data"`
}

// ShiftListDataType defines model for ShiftList.Data.Type.
type ShiftListDataType string

// ShiftOverride defines model for shift_override.
type ShiftOverride struct {
	// CreatedAt Date of creation
	CreatedAt *string `json:"created_at,omitempty"`

	// CreatedByUserId User who created the override
	CreatedByUserId int `json:"created_by_user_id"`

	// ShiftId ID of shift
	ShiftId string `json:"shift_id"`

	// UpdatedAt Date of last update
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// ShiftOverrideResponse defines model for shift_override_response.
type ShiftOverrideResponse struct {
	Data struct {
		Attributes ShiftOverride `json:"attributes"`

		// Id Unique ID of the shift override
		Id   string                        `json:"id"`
		Type ShiftOverrideResponseDataType `json:"type"`
	} `json:"data"`
}

// ShiftOverrideResponseDataType defines model for ShiftOverrideResponse.Data.Type.
type ShiftOverrideResponseDataType string

// SimpleTriggerParams defines model for simple_trigger_params.
type SimpleTriggerParams struct {
	TriggerType SimpleTriggerParamsTriggerType `json:"trigger_type"`
	Triggers    *[]SimpleTriggerParamsTriggers `json:"triggers,omitempty"`
}

// SimpleTriggerParamsTriggerType defines model for SimpleTriggerParams.TriggerType.
type SimpleTriggerParamsTriggerType string

// SimpleTriggerParamsTriggers Actions that trigger the workflow
type SimpleTriggerParamsTriggers string

// SnapshotDatadogGraphTaskParams defines model for snapshot_datadog_graph_task_params.
type SnapshotDatadogGraphTaskParams struct {
	Dashboards *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"dashboards,omitempty"`
	MetricQueries *[]string `json:"metric_queries,omitempty"`

	// PastDuration in format '1 minute', '30 days', '3 months', etc
	PastDuration           string `json:"past_duration"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *SnapshotDatadogGraphTaskParamsTaskType `json:"task_type,omitempty"`
}

// SnapshotDatadogGraphTaskParamsTaskType defines model for SnapshotDatadogGraphTaskParams.TaskType.
type SnapshotDatadogGraphTaskParamsTaskType string

// SnapshotGrafanaDashboardTaskParams defines model for snapshot_grafana_dashboard_task_params.
type SnapshotGrafanaDashboardTaskParams struct {
	Dashboards []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"dashboards"`
	PostToIncidentTimeline *bool `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *SnapshotGrafanaDashboardTaskParamsTaskType `json:"task_type,omitempty"`
}

// SnapshotGrafanaDashboardTaskParamsTaskType defines model for SnapshotGrafanaDashboardTaskParams.TaskType.
type SnapshotGrafanaDashboardTaskParamsTaskType string

// SnapshotLookerLookTaskParams defines model for snapshot_looker_look_task_params.
type SnapshotLookerLookTaskParams struct {
	Dashboards []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"dashboards"`
	PostToIncidentTimeline *bool `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *SnapshotLookerLookTaskParamsTaskType `json:"task_type,omitempty"`
}

// SnapshotLookerLookTaskParamsTaskType defines model for SnapshotLookerLookTaskParams.TaskType.
type SnapshotLookerLookTaskParamsTaskType string

// SnapshotNewRelicGraphTaskParams defines model for snapshot_new_relic_graph_task_params.
type SnapshotNewRelicGraphTaskParams struct {
	MetricQuery            string                                    `json:"metric_query"`
	MetricType             SnapshotNewRelicGraphTaskParamsMetricType `json:"metric_type"`
	PostToIncidentTimeline *bool                                     `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *SnapshotNewRelicGraphTaskParamsTaskType `json:"task_type,omitempty"`
}

// SnapshotNewRelicGraphTaskParamsMetricType defines model for SnapshotNewRelicGraphTaskParams.MetricType.
type SnapshotNewRelicGraphTaskParamsMetricType string

// SnapshotNewRelicGraphTaskParamsTaskType defines model for SnapshotNewRelicGraphTaskParams.TaskType.
type SnapshotNewRelicGraphTaskParamsTaskType string

// StatusPage defines model for status_page.
type StatusPage struct {
	// AllowSearchEngineIndex Allow search engines to include your public status page in search results
	AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

	// AuthenticationEnabled Enable authentication
	AuthenticationEnabled *bool `json:"authentication_enabled"`

	// AuthenticationPassword Authentication password
	AuthenticationPassword *string `json:"authentication_password"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Description The description of the status page
	Description *string `json:"description"`

	// Enabled Enabled / Disable the status page
	Enabled *bool `json:"enabled"`

	// FailureMessage Message showing when at least one component is not operational
	FailureMessage *string `json:"failure_message"`

	// FooterColor The color of the footer. Eg. "#1F2F41"
	FooterColor *string `json:"footer_color"`

	// FunctionalityIds Functionalities attached to the status page
	FunctionalityIds *[]string `json:"functionality_ids,omitempty"`

	// GaTrackingId Google Analytics tracking ID
	GaTrackingId *string `json:"ga_tracking_id"`

	// HeaderColor The color of the header. Eg. "#0061F2"
	HeaderColor *string `json:"header_color"`

	// Public Make the status page accessible to the public
	Public *bool `json:"public"`

	// PublicDescription The public description of the status page
	PublicDescription *string `json:"public_description"`

	// PublicTitle The public title of the status page
	PublicTitle *string `json:"public_title"`

	// ServiceIds Services attached to the status page
	ServiceIds *[]string `json:"service_ids,omitempty"`

	// ShowUptime Show uptime
	ShowUptime *bool `json:"show_uptime"`

	// ShowUptimeLastDays Show uptime over x days
	ShowUptimeLastDays *StatusPageShowUptimeLastDays `json:"show_uptime_last_days"`

	// SuccessMessage Message showing when all components are operational
	SuccessMessage *string `json:"success_message"`

	// TimeZone A valid IANA time zone name.
	TimeZone *string `json:"time_zone"`

	// Title The title of the status page
	Title string `json:"title"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`

	// WebsitePrivacyUrl Website Privacy URL
	WebsitePrivacyUrl *string `json:"website_privacy_url"`

	// WebsiteSupportUrl Website Support URL
	WebsiteSupportUrl *string `json:"website_support_url"`

	// WebsiteUrl Website URL
	WebsiteUrl *string `json:"website_url"`
}

// StatusPageShowUptimeLastDays Show uptime over x days
type StatusPageShowUptimeLastDays int

// StatusPageList defines model for status_page_list.
type StatusPageList struct {
	Data []struct {
		Attributes StatusPage `json:"attributes"`

		// Id Unique ID of the status page
		Id   string                 `json:"id"`
		Type StatusPageListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// StatusPageListDataType defines model for StatusPageList.Data.Type.
type StatusPageListDataType string

// StatusPageResponse defines model for status_page_response.
type StatusPageResponse struct {
	Data struct {
		Attributes StatusPage `json:"attributes"`

		// Id Unique ID of the status page
		Id   string                     `json:"id"`
		Type StatusPageResponseDataType `json:"type"`
	} `json:"data"`
}

// StatusPageResponseDataType defines model for StatusPageResponse.Data.Type.
type StatusPageResponseDataType string

// StatusPageTemplate defines model for status_page_template.
type StatusPageTemplate struct {
	// Body Description of the event the template will populate
	Body string `json:"body"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Enabled Enable / Disable the status page template
	Enabled *bool `json:"enabled"`

	// Kind The kind of the status page template
	Kind *StatusPageTemplateKind `json:"kind,omitempty"`

	// Position Position of the workflow task
	Position *int `json:"position,omitempty"`

	// ShouldNotifySubscribers Controls if incident subscribers should be notified
	ShouldNotifySubscribers *bool  `json:"should_notify_subscribers"`
	StatusPageId            string `json:"status_page_id"`

	// Title Title of the template
	Title string `json:"title"`

	// UpdateStatus Status of the event the template will populate
	UpdateStatus *string `json:"update_status"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// StatusPageTemplateKind The kind of the status page template
type StatusPageTemplateKind string

// StatusPageTemplateList defines model for status_page_template_list.
type StatusPageTemplateList struct {
	Data []struct {
		Attributes StatusPageTemplate `json:"attributes"`

		// Id Unique ID of the template
		Id   string                         `json:"id"`
		Type StatusPageTemplateListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// StatusPageTemplateListDataType defines model for StatusPageTemplateList.Data.Type.
type StatusPageTemplateListDataType string

// StatusPageTemplateResponse defines model for status_page_template_response.
type StatusPageTemplateResponse struct {
	Data struct {
		Attributes StatusPageTemplate `json:"attributes"`

		// Id Unique ID of the status page template
		Id   string                             `json:"id"`
		Type StatusPageTemplateResponseDataType `json:"type"`
	} `json:"data"`
}

// StatusPageTemplateResponseDataType defines model for StatusPageTemplateResponse.Data.Type.
type StatusPageTemplateResponseDataType string

// SubStatus defines model for sub_status.
type SubStatus struct {
	CreatedAt    string                `json:"created_at"`
	Description  *string               `json:"description"`
	Name         string                `json:"name"`
	ParentStatus SubStatusParentStatus `json:"parent_status"`
	Position     *int                  `json:"position"`
	Slug         *string               `json:"slug,omitempty"`
	UpdatedAt    string                `json:"updated_at"`
}

// SubStatusParentStatus defines model for SubStatus.ParentStatus.
type SubStatusParentStatus string

// SubStatusList defines model for sub_status_list.
type SubStatusList struct {
	Data []struct {
		Attributes SubStatus `json:"attributes"`

		// Id Unique ID of the sub_status
		Id   string                `json:"id"`
		Type SubStatusListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// SubStatusListDataType defines model for SubStatusList.Data.Type.
type SubStatusListDataType string

// SubStatusResponse defines model for sub_status_response.
type SubStatusResponse struct {
	Data struct {
		Attributes SubStatus `json:"attributes"`

		// Id Unique ID of the sub_status
		Id   string                    `json:"id"`
		Type SubStatusResponseDataType `json:"type"`
	} `json:"data"`
}

// SubStatusResponseDataType defines model for SubStatusResponse.Data.Type.
type SubStatusResponseDataType string

// Team defines model for team.
type Team struct {
	// AlertUrgencyId The alert urgency id of the team
	AlertUrgencyId *string `json:"alert_urgency_id"`

	// BackstageId The Backstage entity id associated to this team. eg: :namespace/:kind/:entity_name
	BackstageId *string `json:"backstage_id"`

	// Color The hex color of the team
	Color *string `json:"color"`

	// CortexId The Cortex group id associated to this team
	CortexId *string `json:"cortex_id"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Description The description of the team
	Description *string `json:"description"`

	// ExternalId The external id associated to this team
	ExternalId *string `json:"external_id"`

	// Name The name of the team
	Name string `json:"name"`

	// NotifyEmails Emails to attach to the team
	NotifyEmails *[]string `json:"notify_emails"`

	// OpsgenieId The Opsgenie group id associated to this team
	OpsgenieId *string `json:"opsgenie_id"`

	// PagerdutyId The PagerDuty group id associated to this team
	PagerdutyId *string `json:"pagerduty_id"`

	// PagerdutyServiceId The PagerDuty service id associated to this team
	PagerdutyServiceId *string `json:"pagerduty_service_id"`

	// PagertreeId The PagerTree group id associated to this team
	PagertreeId *string `json:"pagertree_id"`

	// Position Position of the team
	Position *int `json:"position"`

	// ServiceNowCiSysId The Service Now CI sys id associated to this team
	ServiceNowCiSysId *string `json:"service_now_ci_sys_id"`

	// SlackAliases Slack Aliases associated with this team
	SlackAliases *[]struct {
		// Id Slack alias ID
		Id string `json:"id"`

		// Name Slack alias name
		Name string `json:"name"`
	} `json:"slack_aliases"`

	// SlackChannels Slack Channels associated with this team
	SlackChannels *[]struct {
		// Id Slack channel ID
		Id string `json:"id"`

		// Name Slack channel name
		Name string `json:"name"`
	} `json:"slack_channels"`
	Slug *string `json:"slug,omitempty"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`

	// UserIds The User ID's members of this team
	UserIds *[]int `json:"user_ids"`

	// VictorOpsId The VictorOps group id associated to this team
	VictorOpsId *string `json:"victor_ops_id"`
}

// TeamList defines model for team_list.
type TeamList struct {
	Data []struct {
		Attributes Team `json:"attributes"`

		// Id Unique ID of the team
		Id   string           `json:"id"`
		Type TeamListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// TeamListDataType defines model for TeamList.Data.Type.
type TeamListDataType string

// TeamResponse defines model for team_response.
type TeamResponse struct {
	Data struct {
		Attributes Team `json:"attributes"`

		// Id Unique ID of the team
		Id   string               `json:"id"`
		Type TeamResponseDataType `json:"type"`
	} `json:"data"`
}

// TeamResponseDataType defines model for TeamResponse.Data.Type.
type TeamResponseDataType string

// TriggerWorkflowTaskParams defines model for trigger_workflow_task_params.
type TriggerWorkflowTaskParams struct {
	// AttributeToQueryBy ["(incident) kind can only match [:id, :slug, :sequential_id, :pagerduty_incident_id, :opsgenie_incident_id, :victor_ops_incident_id, :jira_issue_id, :asana_task_id, :shortcut_task_id, :linear_issue_id, :zendesk_ticket_id, :motion_task_id, :trello_card_id, :airtable_record_id, :shortcut_story_id, :github_issue_id, :freshservice_ticket_id, :freshservice_task_id, :clickup_task_id]", "(post_mortem) kind can only match [:id]", "(action_item) kind can only match [:id, :jira_issue_id, :asana_task_id, :shortcut_task_id, :linear_issue_id, :zendesk_ticket_id, :motion_task_id, :trello_card_id, :airtable_record_id, :shortcut_story_id, :github_issue_id, :freshservice_ticket_id, :freshservice_task_id, :clickup_task_id]", "(pulse) kind can only match [:id]", "(alert) kind can only match [:id]"]
	AttributeToQueryBy      TriggerWorkflowTaskParamsAttributeToQueryBy `json:"attribute_to_query_by"`
	CheckWorkflowConditions *bool                                       `json:"check_workflow_conditions,omitempty"`
	Kind                    TriggerWorkflowTaskParamsKind               `json:"kind"`
	Resource                struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"resource"`
	TaskType *TriggerWorkflowTaskParamsTaskType `json:"task_type,omitempty"`
	Workflow struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"workflow"`
}

// TriggerWorkflowTaskParamsAttributeToQueryBy ["(incident) kind can only match [:id, :slug, :sequential_id, :pagerduty_incident_id, :opsgenie_incident_id, :victor_ops_incident_id, :jira_issue_id, :asana_task_id, :shortcut_task_id, :linear_issue_id, :zendesk_ticket_id, :motion_task_id, :trello_card_id, :airtable_record_id, :shortcut_story_id, :github_issue_id, :freshservice_ticket_id, :freshservice_task_id, :clickup_task_id]", "(post_mortem) kind can only match [:id]", "(action_item) kind can only match [:id, :jira_issue_id, :asana_task_id, :shortcut_task_id, :linear_issue_id, :zendesk_ticket_id, :motion_task_id, :trello_card_id, :airtable_record_id, :shortcut_story_id, :github_issue_id, :freshservice_ticket_id, :freshservice_task_id, :clickup_task_id]", "(pulse) kind can only match [:id]", "(alert) kind can only match [:id]"]
type TriggerWorkflowTaskParamsAttributeToQueryBy string

// TriggerWorkflowTaskParamsKind defines model for TriggerWorkflowTaskParams.Kind.
type TriggerWorkflowTaskParamsKind string

// TriggerWorkflowTaskParamsTaskType defines model for TriggerWorkflowTaskParams.TaskType.
type TriggerWorkflowTaskParamsTaskType string

// TweetTwitterMessageTaskParams defines model for tweet_twitter_message_task_params.
type TweetTwitterMessageTaskParams struct {
	Message  string                                 `json:"message"`
	TaskType *TweetTwitterMessageTaskParamsTaskType `json:"task_type,omitempty"`
}

// TweetTwitterMessageTaskParamsTaskType defines model for TweetTwitterMessageTaskParams.TaskType.
type TweetTwitterMessageTaskParamsTaskType string

// UnassignRoleFromUser defines model for unassign_role_from_user.
type UnassignRoleFromUser struct {
	Data struct {
		Attributes struct {
			// IncidentRoleId ID of the incident role
			IncidentRoleId *string `json:"incident_role_id,omitempty"`

			// UserId ID of user you wish to remove as assigned user from this incident
			UserId *string `json:"user_id,omitempty"`
		} `json:"attributes"`
		Type UnassignRoleFromUserDataType `json:"type"`
	} `json:"data"`
}

// UnassignRoleFromUserDataType defines model for UnassignRoleFromUser.Data.Type.
type UnassignRoleFromUserDataType string

// UpdateActionItemTaskParams defines model for update_action_item_task_params.
type UpdateActionItemTaskParams struct {
	// AssignedToUser  The user this action item is assigned to
	AssignedToUser *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"assigned_to_user,omitempty"`

	// AssignedToUserId [DEPRECATED] Use assigned_to_user attribute instead. The user id this action item is assigned to
	AssignedToUserId *string `json:"assigned_to_user_id,omitempty"`

	// AttributeToQueryBy Attribute of the action item to match against
	AttributeToQueryBy UpdateActionItemTaskParamsAttributeToQueryBy `json:"attribute_to_query_by"`

	// CustomFieldsMapping Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// Description The action item description
	Description            *string   `json:"description,omitempty"`
	GroupIds               *[]string `json:"group_ids"`
	PostToIncidentTimeline *bool     `json:"post_to_incident_timeline,omitempty"`

	// Priority The action item priority
	Priority *UpdateActionItemTaskParamsPriority `json:"priority,omitempty"`

	// QueryValue Value that attribute_to_query_by to uses to match against
	QueryValue string `json:"query_value"`

	// Status The action item status
	Status *UpdateActionItemTaskParamsStatus `json:"status,omitempty"`

	// Summary Brief description of the action item
	Summary  *string                             `json:"summary,omitempty"`
	TaskType *UpdateActionItemTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateActionItemTaskParamsAttributeToQueryBy Attribute of the action item to match against
type UpdateActionItemTaskParamsAttributeToQueryBy string

// UpdateActionItemTaskParamsPriority The action item priority
type UpdateActionItemTaskParamsPriority string

// UpdateActionItemTaskParamsStatus The action item status
type UpdateActionItemTaskParamsStatus string

// UpdateActionItemTaskParamsTaskType defines model for UpdateActionItemTaskParams.TaskType.
type UpdateActionItemTaskParamsTaskType string

// UpdateAirtableTableRecordTaskParams defines model for update_airtable_table_record_task_params.
type UpdateAirtableTableRecordTaskParams struct {
	// BaseKey The base key
	BaseKey string `json:"base_key"`

	// CustomFieldsMapping Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// RecordId The record id
	RecordId string `json:"record_id"`

	// TableName The table name
	TableName string                                       `json:"table_name"`
	TaskType  *UpdateAirtableTableRecordTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateAirtableTableRecordTaskParamsTaskType defines model for UpdateAirtableTableRecordTaskParams.TaskType.
type UpdateAirtableTableRecordTaskParamsTaskType string

// UpdateAlertGroup defines model for update_alert_group.
type UpdateAlertGroup struct {
	Data struct {
		Attributes struct {
			// AlertGroupTargetsAttributes Attributes for alert group targets
			AlertGroupTargetsAttributes *struct {
				// TargetId id for the Group, Service or EscalationPolicy
				TargetId *openapi_types.UUID `json:"target_id,omitempty"`

				// TargetType The type of the target.
				TargetType *UpdateAlertGroupDataAttributesAlertGroupTargetsAttributesTargetType `json:"target_type,omitempty"`
			} `json:"alert_group_targets_attributes,omitempty"`

			// ConditionType Group alerts when ANY or ALL of the fields are matching.
			ConditionType *UpdateAlertGroupDataAttributesConditionType `json:"condition_type,omitempty"`

			// Description The description of the alert group
			Description *string `json:"description"`

			// GroupByAlertTitle Whether the alerts should be grouped by titles.
			GroupByAlertTitle *UpdateAlertGroupDataAttributesGroupByAlertTitle `json:"group_by_alert_title,omitempty"`

			// GroupByAlertUrgency Whether the alerts should be grouped by urgencies.
			GroupByAlertUrgency *UpdateAlertGroupDataAttributesGroupByAlertUrgency `json:"group_by_alert_urgency,omitempty"`

			// Name The name of the alert group
			Name *string `json:"name,omitempty"`

			// TimeWindow The length of time an Alert Group should stay open and accept new alerts
			TimeWindow *int `json:"time_window,omitempty"`
		} `json:"attributes"`
		Type UpdateAlertGroupDataType `json:"type"`
	} `json:"data"`
}

// UpdateAlertGroupDataAttributesAlertGroupTargetsAttributesTargetType The type of the target.
type UpdateAlertGroupDataAttributesAlertGroupTargetsAttributesTargetType string

// UpdateAlertGroupDataAttributesConditionType Group alerts when ANY or ALL of the fields are matching.
type UpdateAlertGroupDataAttributesConditionType string

// UpdateAlertGroupDataAttributesGroupByAlertTitle Whether the alerts should be grouped by titles.
type UpdateAlertGroupDataAttributesGroupByAlertTitle int

// UpdateAlertGroupDataAttributesGroupByAlertUrgency Whether the alerts should be grouped by urgencies.
type UpdateAlertGroupDataAttributesGroupByAlertUrgency int

// UpdateAlertGroupDataType defines model for UpdateAlertGroup.Data.Type.
type UpdateAlertGroupDataType string

// UpdateAlertUrgency defines model for update_alert_urgency.
type UpdateAlertUrgency struct {
	Data struct {
		Attributes struct {
			// Description The description of the alert urgency
			Description *string `json:"description,omitempty"`

			// Name The name of the alert urgency
			Name *string `json:"name,omitempty"`

			// Position Position of the alert urgency
			Position *int `json:"position"`
		} `json:"attributes"`
		Type UpdateAlertUrgencyDataType `json:"type"`
	} `json:"data"`
}

// UpdateAlertUrgencyDataType defines model for UpdateAlertUrgency.Data.Type.
type UpdateAlertUrgencyDataType string

// UpdateAlertsSource defines model for update_alerts_source.
type UpdateAlertsSource struct {
	Data struct {
		Attributes struct {
			// AlertSourceUrgencyRulesAttributes List of rules that define the conditions under which the alert urgency will be set automatically based on the alert payload
			AlertSourceUrgencyRulesAttributes *[]struct {
				// JsonPath JSON path expression to extract a specific value from the alert's payload for evaluation
				JsonPath *string `json:"json_path,omitempty"`

				// Operator Comparison operator used to evaluate the extracted value against the specified condition
				Operator *UpdateAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperator `json:"operator,omitempty"`

				// Value Value that the extracted payload data is compared to using the specified operator to determine a match
				Value *string `json:"value,omitempty"`
			} `json:"alert_source_urgency_rules_attributes,omitempty"`

			// AlertUrgencyId ID for the default alert urgency assigned to this alert source
			AlertUrgencyId *string `json:"alert_urgency_id,omitempty"`

			// Name The name of the alert source
			Name *string `json:"name,omitempty"`

			// SourceType The alert source type
			SourceType *UpdateAlertsSourceDataAttributesSourceType `json:"source_type,omitempty"`

			// SourceableAttributes Provide additional attributes for generic_webhook alerts source
			SourceableAttributes *struct {
				// AutoResolve Set this to true to auto-resolve alerts based on field_mappings_attributes conditions
				AutoResolve *bool `json:"auto_resolve,omitempty"`

				// FieldMappingsAttributes Specify rules to auto resolve alerts
				FieldMappingsAttributes *[]struct {
					// Field Select the field on which the condition to be evaluated
					Field *UpdateAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesField `json:"field,omitempty"`

					// JsonPath JSON path expression to extract a specific value from the alert's payload for evaluation
					JsonPath *string `json:"json_path,omitempty"`
				} `json:"field_mappings_attributes,omitempty"`

				// ResolveState This value is matched with the value extracted from alerts payload using JSON path in field_mappings_attributes
				ResolveState *string `json:"resolve_state,omitempty"`
			} `json:"sourceable_attributes,omitempty"`
		} `json:"attributes"`
		Type UpdateAlertsSourceDataType `json:"type"`
	} `json:"data"`
}

// UpdateAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperator Comparison operator used to evaluate the extracted value against the specified condition
type UpdateAlertsSourceDataAttributesAlertSourceUrgencyRulesAttributesOperator string

// UpdateAlertsSourceDataAttributesSourceType The alert source type
type UpdateAlertsSourceDataAttributesSourceType string

// UpdateAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesField Select the field on which the condition to be evaluated
type UpdateAlertsSourceDataAttributesSourceableAttributesFieldMappingsAttributesField string

// UpdateAlertsSourceDataType defines model for UpdateAlertsSource.Data.Type.
type UpdateAlertsSourceDataType string

// UpdateAsanaTaskTaskParams defines model for update_asana_task_task_params.
type UpdateAsanaTaskTaskParams struct {
	// AssignUserEmail The assigned user's email
	AssignUserEmail *string `json:"assign_user_email,omitempty"`
	Completion      struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// CustomFieldsMapping Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string                                       `json:"custom_fields_mapping"`
	DependencyDirection *UpdateAsanaTaskTaskParamsDependencyDirection `json:"dependency_direction,omitempty"`

	// DependentTaskIds Dependent task ids. Supports liquid syntax
	DependentTaskIds *[]string `json:"dependent_task_ids"`

	// DueDate The due date
	DueDate *string `json:"due_date,omitempty"`
	Notes   *string `json:"notes,omitempty"`

	// TaskId The task id
	TaskId   string                             `json:"task_id"`
	TaskType *UpdateAsanaTaskTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The task title
	Title *string `json:"title,omitempty"`
}

// UpdateAsanaTaskTaskParamsDependencyDirection defines model for UpdateAsanaTaskTaskParams.DependencyDirection.
type UpdateAsanaTaskTaskParamsDependencyDirection string

// UpdateAsanaTaskTaskParamsTaskType defines model for UpdateAsanaTaskTaskParams.TaskType.
type UpdateAsanaTaskTaskParamsTaskType string

// UpdateAttachedAlertsTaskParams defines model for update_attached_alerts_task_params.
type UpdateAttachedAlertsTaskParams struct {
	Status   UpdateAttachedAlertsTaskParamsStatus    `json:"status"`
	TaskType *UpdateAttachedAlertsTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateAttachedAlertsTaskParamsStatus defines model for UpdateAttachedAlertsTaskParams.Status.
type UpdateAttachedAlertsTaskParamsStatus string

// UpdateAttachedAlertsTaskParamsTaskType defines model for UpdateAttachedAlertsTaskParams.TaskType.
type UpdateAttachedAlertsTaskParamsTaskType string

// UpdateAuthorization defines model for update_authorization.
type UpdateAuthorization struct {
	Data struct {
		Attributes struct {
			Permissions *[]UpdateAuthorizationDataAttributesPermissions `json:"permissions,omitempty"`
		} `json:"attributes"`
		Type UpdateAuthorizationDataType `json:"type"`
	} `json:"data"`
}

// UpdateAuthorizationDataAttributesPermissions defines model for UpdateAuthorization.Data.Attributes.Permissions.
type UpdateAuthorizationDataAttributesPermissions string

// UpdateAuthorizationDataType defines model for UpdateAuthorization.Data.Type.
type UpdateAuthorizationDataType string

// UpdateCatalog defines model for update_catalog.
type UpdateCatalog struct {
	Data struct {
		Attributes struct {
			Description *string                          `json:"description"`
			Icon        *UpdateCatalogDataAttributesIcon `json:"icon,omitempty"`
			Name        *string                          `json:"name,omitempty"`

			// Position Default position of the catalog when displayed in a list.
			Position *int `json:"position"`
		} `json:"attributes"`
		Type UpdateCatalogDataType `json:"type"`
	} `json:"data"`
}

// UpdateCatalogDataAttributesIcon defines model for UpdateCatalog.Data.Attributes.Icon.
type UpdateCatalogDataAttributesIcon string

// UpdateCatalogDataType defines model for UpdateCatalog.Data.Type.
type UpdateCatalogDataType string

// UpdateCatalogEntity defines model for update_catalog_entity.
type UpdateCatalogEntity struct {
	Data struct {
		Attributes struct {
			Description *string `json:"description"`
			Name        *string `json:"name,omitempty"`

			// Position Default position of the item when displayed in a list.
			Position *int `json:"position"`
		} `json:"attributes"`
		Type UpdateCatalogEntityDataType `json:"type"`
	} `json:"data"`
}

// UpdateCatalogEntityDataType defines model for UpdateCatalogEntity.Data.Type.
type UpdateCatalogEntityDataType string

// UpdateCatalogEntityProperty defines model for update_catalog_entity_property.
type UpdateCatalogEntityProperty struct {
	Data struct {
		Attributes struct {
			Key   *UpdateCatalogEntityPropertyDataAttributesKey `json:"key,omitempty"`
			Value *string                                       `json:"value,omitempty"`
		} `json:"attributes"`
		Type UpdateCatalogEntityPropertyDataType `json:"type"`
	} `json:"data"`
}

// UpdateCatalogEntityPropertyDataAttributesKey defines model for UpdateCatalogEntityProperty.Data.Attributes.Key.
type UpdateCatalogEntityPropertyDataAttributesKey string

// UpdateCatalogEntityPropertyDataType defines model for UpdateCatalogEntityProperty.Data.Type.
type UpdateCatalogEntityPropertyDataType string

// UpdateCatalogField defines model for update_catalog_field.
type UpdateCatalogField struct {
	Data struct {
		Attributes struct {
			Kind *UpdateCatalogFieldDataAttributesKind `json:"kind,omitempty"`

			// KindCatalogId Restricts values to items of specified catalog.
			KindCatalogId *string `json:"kind_catalog_id"`
			Name          *string `json:"name,omitempty"`

			// Position Default position of the item when displayed in a list.
			Position *int    `json:"position"`
			Slug     *string `json:"slug,omitempty"`
		} `json:"attributes"`
		Type UpdateCatalogFieldDataType `json:"type"`
	} `json:"data"`
}

// UpdateCatalogFieldDataAttributesKind defines model for UpdateCatalogField.Data.Attributes.Kind.
type UpdateCatalogFieldDataAttributesKind string

// UpdateCatalogFieldDataType defines model for UpdateCatalogField.Data.Type.
type UpdateCatalogFieldDataType string

// UpdateCause defines model for update_cause.
type UpdateCause struct {
	Data struct {
		Attributes struct {
			// Description The description of the cause
			Description *string `json:"description"`

			// Name The name of the cause
			Name *string `json:"name,omitempty"`

			// Position Position of the cause
			Position *int `json:"position"`
		} `json:"attributes"`
		Type UpdateCauseDataType `json:"type"`
	} `json:"data"`
}

// UpdateCauseDataType defines model for UpdateCause.Data.Type.
type UpdateCauseDataType string

// UpdateClickupTaskTaskParams defines model for update_clickup_task_task_params.
type UpdateClickupTaskTaskParams struct {
	// CustomFieldsMapping Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// Description The task description
	Description *string `json:"description,omitempty"`

	// DueDate The due date
	DueDate *string `json:"due_date,omitempty"`

	// Priority The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// Tags The task tags
	Tags *string `json:"tags,omitempty"`

	// TaskId The task id
	TaskId string `json:"task_id"`

	// TaskPayload Additional ClickUp task attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON
	TaskPayload *string                              `json:"task_payload"`
	TaskType    *UpdateClickupTaskTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The task title
	Title *string `json:"title,omitempty"`
}

// UpdateClickupTaskTaskParamsTaskType defines model for UpdateClickupTaskTaskParams.TaskType.
type UpdateClickupTaskTaskParamsTaskType string

// UpdateCustomField defines model for update_custom_field.
type UpdateCustomField struct {
	Data struct {
		Attributes struct {
			// Default The default value for text field kinds
			Default *string `json:"default"`

			// Description The description of the custom_field
			Description *string `json:"description"`

			// Label The name of the custom_field
			Label *string `json:"label,omitempty"`

			// Position The position of the custom_field
			Position *int                                       `json:"position,omitempty"`
			Required *[]UpdateCustomFieldDataAttributesRequired `json:"required"`
			Shown    *[]UpdateCustomFieldDataAttributesShown    `json:"shown,omitempty"`

			// Slug The slug of the custom_field
			Slug *string `json:"slug,omitempty"`
		} `json:"attributes"`
		Type UpdateCustomFieldDataType `json:"type"`
	} `json:"data"`
}

// UpdateCustomFieldDataAttributesRequired Where the custom_field is required
type UpdateCustomFieldDataAttributesRequired string

// UpdateCustomFieldDataAttributesShown Where the custom_field is shown
type UpdateCustomFieldDataAttributesShown string

// UpdateCustomFieldDataType defines model for UpdateCustomField.Data.Type.
type UpdateCustomFieldDataType string

// UpdateCustomFieldOption defines model for update_custom_field_option.
type UpdateCustomFieldOption struct {
	Data struct {
		Attributes struct {
			// Color The hex color of the custom_field_option
			Color   *string `json:"color,omitempty"`
			Default *bool   `json:"default,omitempty"`

			// Position The position of the custom_field_option
			Position *int `json:"position,omitempty"`

			// Value The value of the custom_field_option
			Value *string `json:"value,omitempty"`
		} `json:"attributes"`
		Type UpdateCustomFieldOptionDataType `json:"type"`
	} `json:"data"`
}

// UpdateCustomFieldOptionDataType defines model for UpdateCustomFieldOption.Data.Type.
type UpdateCustomFieldOptionDataType string

// UpdateCustomForm defines model for update_custom_form.
type UpdateCustomForm struct {
	Data struct {
		Attributes struct {
			// Command The Slack command used to trigger this form.
			Command     *string `json:"command,omitempty"`
			Description *string `json:"description"`
			Enabled     *bool   `json:"enabled,omitempty"`

			// Name The name of the custom form.
			Name *string `json:"name,omitempty"`

			// Slug The custom form slug. Add this to form_field.shown or form_field.required to associate form fields with custom forms.
			Slug *string `json:"slug,omitempty"`
		} `json:"attributes"`
		Type UpdateCustomFormDataType `json:"type"`
	} `json:"data"`
}

// UpdateCustomFormDataType defines model for UpdateCustomForm.Data.Type.
type UpdateCustomFormDataType string

// UpdateDashboard defines model for update_dashboard.
type UpdateDashboard struct {
	Data struct {
		Attributes *struct {
			// AutoRefresh Whether the dashboard auto-updates the UI with new data.
			AutoRefresh *bool `json:"auto_refresh,omitempty"`

			// Color The hex color of the dashboard
			Color *UpdateDashboardDataAttributesColor `json:"color"`

			// Description The description of the dashboard
			Description *string `json:"description"`

			// Icon The emoji icon of the dashboard
			Icon *string `json:"icon,omitempty"`

			// Name The name of the dashboard
			Name *string `json:"name,omitempty"`

			// Owner The owner type of the dashboard
			Owner *UpdateDashboardDataAttributesOwner `json:"owner,omitempty"`

			// Period The grouping period for dashboard panel data
			Period *UpdateDashboardDataAttributesPeriod `json:"period"`

			// Public Whether the dashboard is public
			Public *bool `json:"public,omitempty"`

			// Range The date range for dashboard panel data
			Range *string `json:"range"`
		} `json:"attributes,omitempty"`
		Type *UpdateDashboardDataType `json:"type,omitempty"`
	} `json:"data"`
}

// UpdateDashboardDataAttributesColor The hex color of the dashboard
type UpdateDashboardDataAttributesColor string

// UpdateDashboardDataAttributesOwner The owner type of the dashboard
type UpdateDashboardDataAttributesOwner string

// UpdateDashboardDataAttributesPeriod The grouping period for dashboard panel data
type UpdateDashboardDataAttributesPeriod string

// UpdateDashboardDataType defines model for UpdateDashboard.Data.Type.
type UpdateDashboardDataType string

// UpdateEnvironment defines model for update_environment.
type UpdateEnvironment struct {
	Data struct {
		Attributes struct {
			// Color The hex color of the environment
			Color *string `json:"color"`

			// Description The description of the environment
			Description *string `json:"description"`

			// Name The name of the environment
			Name *string `json:"name,omitempty"`

			// NotifyEmails Emails to attach to the environment
			NotifyEmails *[]string `json:"notify_emails"`

			// Position Position of the environment
			Position *int `json:"position"`

			// SlackAliases Slack Aliases associated with this environment
			SlackAliases *[]struct {
				// Id Slack alias ID
				Id string `json:"id"`

				// Name Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// SlackChannels Slack Channels associated with this environment
			SlackChannels *[]struct {
				// Id Slack channel ID
				Id string `json:"id"`

				// Name Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type UpdateEnvironmentDataType `json:"type"`
	} `json:"data"`
}

// UpdateEnvironmentDataType defines model for UpdateEnvironment.Data.Type.
type UpdateEnvironmentDataType string

// UpdateEscalationLevel defines model for update_escalation_level.
type UpdateEscalationLevel struct {
	Data struct {
		Attributes struct {
			// Delay Delay before notification targets will be alerted.
			Delay *int `json:"delay,omitempty"`

			// NotificationTargetParams Escalation level's notification targets
			NotificationTargetParams *[]struct {
				// Id The ID of notification target
				Id string `json:"id"`

				// Type The type of the notification target
				Type UpdateEscalationLevelDataAttributesNotificationTargetParamsType `json:"type"`
			} `json:"notification_target_params,omitempty"`

			// Position Position of the escalation policy level
			Position *int `json:"position,omitempty"`
		} `json:"attributes"`
		Type UpdateEscalationLevelDataType `json:"type"`
	} `json:"data"`
}

// UpdateEscalationLevelDataAttributesNotificationTargetParamsType The type of the notification target
type UpdateEscalationLevelDataAttributesNotificationTargetParamsType string

// UpdateEscalationLevelDataType defines model for UpdateEscalationLevel.Data.Type.
type UpdateEscalationLevelDataType string

// UpdateEscalationPath defines model for update_escalation_path.
type UpdateEscalationPath struct {
	Data struct {
		Attributes struct {
			// Name The name of the escalation path
			Name *string `json:"name,omitempty"`

			// NotificationType Position of the escalation policy level
			NotificationType *UpdateEscalationPathDataAttributesNotificationType `json:"notification_type,omitempty"`

			// Repeat Whether this path should be repeated until someone acknowledges the alert
			Repeat *bool `json:"repeat"`

			// RepeatCount The number of times this path will be executed until someone acknowledges the alert
			RepeatCount *int `json:"repeat_count"`

			// Rules Escalation path conditions
			Rules *[]struct {
				// JsonPath JSON path to extract value from payload
				JsonPath *string `json:"json_path,omitempty"`

				// Operator How JSON path value should be matched
				Operator *UpdateEscalationPathDataAttributesRulesOperator `json:"operator,omitempty"`

				// RuleType The type of the escalation path rule
				RuleType *UpdateEscalationPathDataAttributesRulesRuleType `json:"rule_type,omitempty"`

				// UrgencyIds Alert urgency ids for which this escalation path should be used
				UrgencyIds *[]interface{} `json:"urgency_ids,omitempty"`

				// Value Value with which JSON path value should be matched
				Value *string `json:"value,omitempty"`

				// WithinWorkingHour Whether the escalation path should be used within working hours
				WithinWorkingHour *bool `json:"within_working_hour,omitempty"`
			} `json:"rules,omitempty"`
		} `json:"attributes"`
		Type UpdateEscalationPathDataType `json:"type"`
	} `json:"data"`
}

// UpdateEscalationPathDataAttributesNotificationType Position of the escalation policy level
type UpdateEscalationPathDataAttributesNotificationType string

// UpdateEscalationPathDataAttributesRulesOperator How JSON path value should be matched
type UpdateEscalationPathDataAttributesRulesOperator string

// UpdateEscalationPathDataAttributesRulesRuleType The type of the escalation path rule
type UpdateEscalationPathDataAttributesRulesRuleType string

// UpdateEscalationPathDataType defines model for UpdateEscalationPath.Data.Type.
type UpdateEscalationPathDataType string

// UpdateEscalationPolicy defines model for update_escalation_policy.
type UpdateEscalationPolicy struct {
	Data struct {
		Attributes struct {
			// Description The description of the escalation policy
			Description *string `json:"description"`

			// GroupIds Associated groups (alerting the group will trigger escalation policy)
			GroupIds *[]string `json:"group_ids,omitempty"`

			// Name The name of the escalation policy
			Name *string `json:"name,omitempty"`

			// RepeatCount The number of times this policy will be executed until someone acknowledges the alert
			RepeatCount *int `json:"repeat_count,omitempty"`

			// ServiceIds Associated services (alerting the service will trigger escalation policy)
			ServiceIds *[]string `json:"service_ids,omitempty"`
		} `json:"attributes"`
		Type UpdateEscalationPolicyDataType `json:"type"`
	} `json:"data"`
}

// UpdateEscalationPolicyDataType defines model for UpdateEscalationPolicy.Data.Type.
type UpdateEscalationPolicyDataType string

// UpdateFormField defines model for update_form_field.
type UpdateFormField struct {
	Data struct {
		Attributes struct {
			DefaultValues *[]string `json:"default_values,omitempty"`

			// Description The description of the form field
			Description *string `json:"description"`

			// Enabled Whether the form field is enabled
			Enabled *bool `json:"enabled,omitempty"`

			// InputKind The input kind of the form field
			InputKind *UpdateFormFieldDataAttributesInputKind `json:"input_kind,omitempty"`

			// Kind The kind of the form field
			Kind *UpdateFormFieldDataAttributesKind `json:"kind,omitempty"`

			// Name The name of the form field
			Name     *string   `json:"name,omitempty"`
			Required *[]string `json:"required,omitempty"`

			// ShowOnIncidentDetails Whether the form field is shown on the incident details panel
			ShowOnIncidentDetails *bool     `json:"show_on_incident_details,omitempty"`
			Shown                 *[]string `json:"shown,omitempty"`

			// ValueKind The value kind of the form field
			ValueKind *UpdateFormFieldDataAttributesValueKind `json:"value_kind,omitempty"`

			// ValueKindCatalogId The ID of the catalog used when value_kind is `catalog_entity`
			ValueKindCatalogId *string `json:"value_kind_catalog_id"`
		} `json:"attributes"`
		Type UpdateFormFieldDataType `json:"type"`
	} `json:"data"`
}

// UpdateFormFieldDataAttributesInputKind The input kind of the form field
type UpdateFormFieldDataAttributesInputKind string

// UpdateFormFieldDataAttributesKind The kind of the form field
type UpdateFormFieldDataAttributesKind string

// UpdateFormFieldDataAttributesValueKind The value kind of the form field
type UpdateFormFieldDataAttributesValueKind string

// UpdateFormFieldDataType defines model for UpdateFormField.Data.Type.
type UpdateFormFieldDataType string

// UpdateFormFieldOption defines model for update_form_field_option.
type UpdateFormFieldOption struct {
	Data struct {
		Attributes struct {
			// Color The hex color of the form_field_option
			Color   *string `json:"color,omitempty"`
			Default *bool   `json:"default,omitempty"`

			// Position The position of the form_field_option
			Position *int `json:"position,omitempty"`

			// Value The value of the form_field_option
			Value *string `json:"value,omitempty"`
		} `json:"attributes"`
		Type UpdateFormFieldOptionDataType `json:"type"`
	} `json:"data"`
}

// UpdateFormFieldOptionDataType defines model for UpdateFormFieldOption.Data.Type.
type UpdateFormFieldOptionDataType string

// UpdateFormFieldPlacement defines model for update_form_field_placement.
type UpdateFormFieldPlacement struct {
	Data struct {
		Attributes struct {
			// Form The form this field is placed on.
			Form *string `json:"form,omitempty"`

			// FormSetId The form set this field is placed in.
			FormSetId *string `json:"form_set_id,omitempty"`

			// PlacementOperator Logical operator when evaluating multiple form_field_placement_conditions with conditioned=placement
			PlacementOperator *UpdateFormFieldPlacementDataAttributesPlacementOperator `json:"placement_operator,omitempty"`

			// Position The position of the field placement.
			Position *int `json:"position,omitempty"`

			// Required Whether the field is unconditionally required on this form.
			Required *bool `json:"required,omitempty"`

			// RequiredOperator Logical operator when evaluating multiple form_field_placement_conditions with conditioned=required
			RequiredOperator *UpdateFormFieldPlacementDataAttributesRequiredOperator `json:"required_operator,omitempty"`
		} `json:"attributes"`
		Type UpdateFormFieldPlacementDataType `json:"type"`
	} `json:"data"`
}

// UpdateFormFieldPlacementDataAttributesPlacementOperator Logical operator when evaluating multiple form_field_placement_conditions with conditioned=placement
type UpdateFormFieldPlacementDataAttributesPlacementOperator string

// UpdateFormFieldPlacementDataAttributesRequiredOperator Logical operator when evaluating multiple form_field_placement_conditions with conditioned=required
type UpdateFormFieldPlacementDataAttributesRequiredOperator string

// UpdateFormFieldPlacementDataType defines model for UpdateFormFieldPlacement.Data.Type.
type UpdateFormFieldPlacementDataType string

// UpdateFormFieldPlacementCondition defines model for update_form_field_placement_condition.
type UpdateFormFieldPlacementCondition struct {
	Data struct {
		Attributes struct {
			// Comparison The condition comparison.
			Comparison *UpdateFormFieldPlacementConditionDataAttributesComparison `json:"comparison,omitempty"`

			// Conditioned The resource or attribute the condition applies.
			Conditioned *UpdateFormFieldPlacementConditionDataAttributesConditioned `json:"conditioned,omitempty"`

			// FormFieldId The condition field.
			FormFieldId *string `json:"form_field_id,omitempty"`

			// Position The condition position.
			Position *int `json:"position,omitempty"`

			// Values The values for comparison.
			Values *[]string `json:"values,omitempty"`
		} `json:"attributes"`
		Type UpdateFormFieldPlacementConditionDataType `json:"type"`
	} `json:"data"`
}

// UpdateFormFieldPlacementConditionDataAttributesComparison The condition comparison.
type UpdateFormFieldPlacementConditionDataAttributesComparison string

// UpdateFormFieldPlacementConditionDataAttributesConditioned The resource or attribute the condition applies.
type UpdateFormFieldPlacementConditionDataAttributesConditioned string

// UpdateFormFieldPlacementConditionDataType defines model for UpdateFormFieldPlacementCondition.Data.Type.
type UpdateFormFieldPlacementConditionDataType string

// UpdateFormFieldPosition defines model for update_form_field_position.
type UpdateFormFieldPosition struct {
	Data struct {
		Attributes struct {
			// Form The form for the position
			Form *UpdateFormFieldPositionDataAttributesForm `json:"form,omitempty"`

			// FormFieldId The ID of the form field.
			FormFieldId *string `json:"form_field_id,omitempty"`

			// Position The position of the form_field_position
			Position *int `json:"position,omitempty"`
		} `json:"attributes"`
		Type UpdateFormFieldPositionDataType `json:"type"`
	} `json:"data"`
}

// UpdateFormFieldPositionDataAttributesForm The form for the position
type UpdateFormFieldPositionDataAttributesForm string

// UpdateFormFieldPositionDataType defines model for UpdateFormFieldPosition.Data.Type.
type UpdateFormFieldPositionDataType string

// UpdateFormSet defines model for update_form_set.
type UpdateFormSet struct {
	Data struct {
		Attributes struct {
			// Forms The forms included in the form set. Add custom forms using the custom form's `slug` field. Or choose a built-in form: `web_new_incident_form`, `web_update_incident_form`, `web_incident_post_mortem_form`, `web_incident_mitigation_form`, `web_incident_resolution_form`, `web_incident_cancellation_form`, `web_scheduled_incident_form`, `web_update_scheduled_incident_form`, `slack_new_incident_form`, `slack_update_incident_form`, `slack_update_incident_status_form`, `slack_incident_mitigation_form`, `slack_incident_resolution_form`, `slack_incident_cancellation_form`, `slack_scheduled_incident_form`, `slack_update_scheduled_incident_form`
			Forms *[]string `json:"forms,omitempty"`

			// Name The name of the form set
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdateFormSetDataType `json:"type"`
	} `json:"data"`
}

// UpdateFormSetDataType defines model for UpdateFormSet.Data.Type.
type UpdateFormSetDataType string

// UpdateFormSetCondition defines model for update_form_set_condition.
type UpdateFormSetCondition struct {
	Data struct {
		Attributes struct {
			// Comparison The condition comparison.
			Comparison *UpdateFormSetConditionDataAttributesComparison `json:"comparison,omitempty"`

			// FormFieldId The form field this condition applies.
			FormFieldId *string `json:"form_field_id,omitempty"`

			// Values The values for comparison.
			Values *[]string `json:"values,omitempty"`
		} `json:"attributes"`
		Type UpdateFormSetConditionDataType `json:"type"`
	} `json:"data"`
}

// UpdateFormSetConditionDataAttributesComparison The condition comparison.
type UpdateFormSetConditionDataAttributesComparison string

// UpdateFormSetConditionDataType defines model for UpdateFormSetCondition.Data.Type.
type UpdateFormSetConditionDataType string

// UpdateFunctionality defines model for update_functionality.
type UpdateFunctionality struct {
	Data struct {
		Attributes struct {
			// BackstageId The Backstage entity id associated to this functionality. eg: :namespace/:kind/:entity_name
			BackstageId *string `json:"backstage_id"`

			// Color The hex color of the functionality
			Color *string `json:"color"`

			// CortexId The Cortex group id associated to this functionality
			CortexId *string `json:"cortex_id"`

			// Description The description of the functionality
			Description *string `json:"description"`

			// EnvironmentIds Environments associated with this functionality
			EnvironmentIds *[]string `json:"environment_ids"`

			// ExternalId The external id associated to this functionality
			ExternalId *string `json:"external_id"`

			// Name The name of the functionality
			Name *string `json:"name,omitempty"`

			// NotifyEmails Emails to attach to the functionality
			NotifyEmails *[]string `json:"notify_emails"`

			// OpsgenieId The Opsgenie service id associated to this functionality
			OpsgenieId *string `json:"opsgenie_id"`

			// OpsgenieTeamId The Opsgenie team id associated to this functionality
			OpsgenieTeamId *string `json:"opsgenie_team_id"`

			// OwnersGroupIds Owner Teams associated with this functionality
			OwnersGroupIds *[]string `json:"owners_group_ids"`

			// OwnersUserIds Owner Users associated with this functionality
			OwnersUserIds *[]int `json:"owners_user_ids"`

			// PagerdutyId The PagerDuty service id associated to this functionality
			PagerdutyId *string `json:"pagerduty_id"`

			// Position Position of the functionality
			Position *int `json:"position"`

			// PublicDescription The public description of the functionality
			PublicDescription *string `json:"public_description"`

			// ServiceIds Services associated with this functionality
			ServiceIds *[]string `json:"service_ids"`

			// ServiceNowCiSysId The Service Now CI sys id associated to this functionality
			ServiceNowCiSysId *string `json:"service_now_ci_sys_id"`

			// SlackAliases Slack Aliases associated with this functionality
			SlackAliases *[]struct {
				// Id Slack alias ID
				Id string `json:"id"`

				// Name Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// SlackChannels Slack Channels associated with this functionality
			SlackChannels *[]struct {
				// Id Slack channel ID
				Id string `json:"id"`

				// Name Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type UpdateFunctionalityDataType `json:"type"`
	} `json:"data"`
}

// UpdateFunctionalityDataType defines model for UpdateFunctionality.Data.Type.
type UpdateFunctionalityDataType string

// UpdateGithubIssueTaskParams defines model for update_github_issue_task_params.
type UpdateGithubIssueTaskParams struct {
	// Body The issue body
	Body       *string `json:"body,omitempty"`
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// IssueId The issue id
	IssueId  string                               `json:"issue_id"`
	TaskType *UpdateGithubIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The issue title
	Title *string `json:"title,omitempty"`
}

// UpdateGithubIssueTaskParamsTaskType defines model for UpdateGithubIssueTaskParams.TaskType.
type UpdateGithubIssueTaskParamsTaskType string

// UpdateGitlabIssueTaskParams defines model for update_gitlab_issue_task_params.
type UpdateGitlabIssueTaskParams struct {
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// Description The issue description
	Description *string `json:"description,omitempty"`

	// DueDate The due date
	DueDate *string `json:"due_date,omitempty"`

	// IssueId The issue id
	IssueId string `json:"issue_id"`

	// IssueType The issue type
	IssueType *UpdateGitlabIssueTaskParamsIssueType `json:"issue_type,omitempty"`

	// Labels The issue labels
	Labels   *string                              `json:"labels,omitempty"`
	TaskType *UpdateGitlabIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The issue title
	Title *string `json:"title,omitempty"`
}

// UpdateGitlabIssueTaskParamsIssueType The issue type
type UpdateGitlabIssueTaskParamsIssueType string

// UpdateGitlabIssueTaskParamsTaskType defines model for UpdateGitlabIssueTaskParams.TaskType.
type UpdateGitlabIssueTaskParamsTaskType string

// UpdateGoogleCalendarEventTaskParams defines model for update_google_calendar_event_task_params.
type UpdateGoogleCalendarEventTaskParams struct {
	// AdjustmentDays Days to adjust meeting by
	AdjustmentDays *int `json:"adjustment_days,omitempty"`

	// Attendees Emails of attendees
	Attendees               *[]string `json:"attendees,omitempty"`
	CanGuestsInviteOthers   *bool     `json:"can_guests_invite_others,omitempty"`
	CanGuestsModifyEvent    *bool     `json:"can_guests_modify_event,omitempty"`
	CanGuestsSeeOtherGuests *bool     `json:"can_guests_see_other_guests,omitempty"`

	// ConferenceSolutionKey Sets the video conference type attached to the meeting
	ConferenceSolutionKey *UpdateGoogleCalendarEventTaskParamsConferenceSolutionKey `json:"conference_solution_key"`

	// Description The event description
	Description *string `json:"description,omitempty"`

	// EventId The event ID
	EventId string `json:"event_id"`

	// MeetingDuration Meeting duration in format like '1 hour', '30 minutes'
	MeetingDuration        *string `json:"meeting_duration,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	ReplaceAttendees *bool `json:"replace_attendees,omitempty"`

	// SendUpdates Send an email to the attendees notifying them of the event
	SendUpdates *bool `json:"send_updates,omitempty"`

	// Summary The event summary
	Summary  *string                                      `json:"summary,omitempty"`
	TaskType *UpdateGoogleCalendarEventTaskParamsTaskType `json:"task_type,omitempty"`

	// TimeOfMeeting Time of meeting in format HH:MM
	TimeOfMeeting *string `json:"time_of_meeting,omitempty"`
}

// UpdateGoogleCalendarEventTaskParamsConferenceSolutionKey Sets the video conference type attached to the meeting
type UpdateGoogleCalendarEventTaskParamsConferenceSolutionKey string

// UpdateGoogleCalendarEventTaskParamsTaskType defines model for UpdateGoogleCalendarEventTaskParams.TaskType.
type UpdateGoogleCalendarEventTaskParamsTaskType string

// UpdateGoogleDocsPageTaskParams defines model for update_google_docs_page_task_params.
type UpdateGoogleDocsPageTaskParams struct {
	// Content The Google Doc content
	Content *string `json:"content,omitempty"`

	// FileId The Google Doc file ID
	FileId string `json:"file_id"`

	// PostMortemTemplateId Retrospective template to use when updating page, if desired
	PostMortemTemplateId *string                                 `json:"post_mortem_template_id,omitempty"`
	TaskType             *UpdateGoogleDocsPageTaskParamsTaskType `json:"task_type,omitempty"`

	// TemplateId The Google Doc file ID to use as a template.
	TemplateId *string `json:"template_id,omitempty"`

	// Title The Google Doc title
	Title *string `json:"title,omitempty"`
}

// UpdateGoogleDocsPageTaskParamsTaskType defines model for UpdateGoogleDocsPageTaskParams.TaskType.
type UpdateGoogleDocsPageTaskParamsTaskType string

// UpdateHeartbeat defines model for update_heartbeat.
type UpdateHeartbeat struct {
	Data struct {
		Attributes struct {
			// AlertSummary Summary of alerts triggered when heartbeat expires.
			AlertSummary *string `json:"alert_summary,omitempty"`

			// AlertUrgencyId Urgency of alerts triggered when heartbeat expires.
			AlertUrgencyId *string `json:"alert_urgency_id"`

			// Description The description of the heartbeat
			Description *string `json:"description"`

			// Enabled Whether to trigger alerts when heartbeat is expired.
			Enabled      *bool                                      `json:"enabled,omitempty"`
			Interval     *int                                       `json:"interval,omitempty"`
			IntervalUnit *UpdateHeartbeatDataAttributesIntervalUnit `json:"interval_unit,omitempty"`

			// Name The name of the heartbeat
			Name                   *string                                              `json:"name,omitempty"`
			NotificationTargetId   *string                                              `json:"notification_target_id,omitempty"`
			NotificationTargetType *UpdateHeartbeatDataAttributesNotificationTargetType `json:"notification_target_type,omitempty"`
		} `json:"attributes"`
		Type UpdateHeartbeatDataType `json:"type"`
	} `json:"data"`
}

// UpdateHeartbeatDataAttributesIntervalUnit defines model for UpdateHeartbeat.Data.Attributes.IntervalUnit.
type UpdateHeartbeatDataAttributesIntervalUnit string

// UpdateHeartbeatDataAttributesNotificationTargetType defines model for UpdateHeartbeat.Data.Attributes.NotificationTargetType.
type UpdateHeartbeatDataAttributesNotificationTargetType string

// UpdateHeartbeatDataType defines model for UpdateHeartbeat.Data.Type.
type UpdateHeartbeatDataType string

// UpdateIncident defines model for update_incident.
type UpdateIncident struct {
	Data struct {
		Attributes struct {
			// AcknowledgedAt Date of acknowledgment
			AcknowledgedAt *string `json:"acknowledged_at"`

			// CancelledAt Date of cancellation
			CancelledAt *string `json:"cancelled_at"`

			// CauseIds The Cause ID's to attach to the incident
			CauseIds *[]string `json:"cause_ids"`

			// DetectedAt Date of detection
			DetectedAt *string `json:"detected_at"`

			// EnvironmentIds The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// FunctionalityIds The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// GroupIds The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// InTriageAt Date of triage
			InTriageAt *string `json:"in_triage_at"`

			// IncidentTypeIds The Incident Type ID's to attach to the incident
			IncidentTypeIds *[]string `json:"incident_type_ids"`

			// Kind The kind of the incident
			Kind *UpdateIncidentDataAttributesKind `json:"kind"`

			// Labels Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// MitigatedAt Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// ParentIncidentId ID of parent incident
			ParentIncidentId *string `json:"parent_incident_id"`

			// Private Convert the incident as private. Once an incident is updated as private it cannot be undone
			Private *bool `json:"private"`

			// ResolvedAt Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// ScheduledFor Date of when the maintenance begins
			ScheduledFor *string `json:"scheduled_for"`

			// ScheduledUntil Date of when the maintenance ends
			ScheduledUntil *string `json:"scheduled_until"`

			// ServiceIds The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// SeverityId The Severity ID to attach to the incident
			SeverityId *string `json:"severity_id"`

			// SlackChannelId Slack channel id
			SlackChannelId *string `json:"slack_channel_id"`

			// SlackChannelName Slack channel name
			SlackChannelName *string `json:"slack_channel_name"`

			// SlackChannelUrl Slack channel url
			SlackChannelUrl *string `json:"slack_channel_url"`

			// StartedAt Date of start
			StartedAt *string `json:"started_at"`

			// Status The status of the incident
			Status *UpdateIncidentDataAttributesStatus `json:"status"`

			// Summary The summary of the incident
			Summary *string `json:"summary"`

			// Title The title of the incident
			Title *string `json:"title"`
		} `json:"attributes"`
		Type UpdateIncidentDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentDataAttributesKind The kind of the incident
type UpdateIncidentDataAttributesKind string

// UpdateIncidentDataAttributesStatus The status of the incident
type UpdateIncidentDataAttributesStatus string

// UpdateIncidentDataType defines model for UpdateIncident.Data.Type.
type UpdateIncidentDataType string

// UpdateIncidentActionItem defines model for update_incident_action_item.
type UpdateIncidentActionItem struct {
	Data struct {
		Attributes struct {
			// AssignedToGroupIds IDs of groups you wish to assign this action item
			AssignedToGroupIds *[]string `json:"assigned_to_group_ids"`

			// AssignedToUserId ID of user you wish to assign this action item
			AssignedToUserId *int `json:"assigned_to_user_id"`

			// Description The description of the action item
			Description *string `json:"description"`

			// DueDate The due date of the action item
			DueDate *string `json:"due_date"`

			// Kind The kind of the action item
			Kind *UpdateIncidentActionItemDataAttributesKind `json:"kind,omitempty"`

			// Priority The priority of the action item
			Priority *UpdateIncidentActionItemDataAttributesPriority `json:"priority,omitempty"`

			// Status The status of the action item
			Status *UpdateIncidentActionItemDataAttributesStatus `json:"status,omitempty"`

			// Summary The summary of the action item
			Summary *string `json:"summary,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentActionItemDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentActionItemDataAttributesKind The kind of the action item
type UpdateIncidentActionItemDataAttributesKind string

// UpdateIncidentActionItemDataAttributesPriority The priority of the action item
type UpdateIncidentActionItemDataAttributesPriority string

// UpdateIncidentActionItemDataAttributesStatus The status of the action item
type UpdateIncidentActionItemDataAttributesStatus string

// UpdateIncidentActionItemDataType defines model for UpdateIncidentActionItem.Data.Type.
type UpdateIncidentActionItemDataType string

// UpdateIncidentCustomFieldSelection defines model for update_incident_custom_field_selection.
type UpdateIncidentCustomFieldSelection struct {
	Data struct {
		Attributes struct {
			SelectedOptionIds *[]int `json:"selected_option_ids,omitempty"`

			// Value The selected value for text kind custom fields
			Value *string `json:"value"`
		} `json:"attributes"`
		Type UpdateIncidentCustomFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentCustomFieldSelectionDataType defines model for UpdateIncidentCustomFieldSelection.Data.Type.
type UpdateIncidentCustomFieldSelectionDataType string

// UpdateIncidentEvent defines model for update_incident_event.
type UpdateIncidentEvent struct {
	Data struct {
		Attributes struct {
			// Event The summary of the incident event
			Event *string `json:"event,omitempty"`

			// Visibility The visibility of the incident action item
			Visibility *UpdateIncidentEventDataAttributesVisibility `json:"visibility,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentEventDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentEventDataAttributesVisibility The visibility of the incident action item
type UpdateIncidentEventDataAttributesVisibility string

// UpdateIncidentEventDataType defines model for UpdateIncidentEvent.Data.Type.
type UpdateIncidentEventDataType string

// UpdateIncidentEventFunctionality defines model for update_incident_event_functionality.
type UpdateIncidentEventFunctionality struct {
	Data struct {
		Attributes struct {
			// Status The status of the affected functionality
			Status UpdateIncidentEventFunctionalityDataAttributesStatus `json:"status"`
		} `json:"attributes"`
		Type UpdateIncidentEventFunctionalityDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentEventFunctionalityDataAttributesStatus The status of the affected functionality
type UpdateIncidentEventFunctionalityDataAttributesStatus string

// UpdateIncidentEventFunctionalityDataType defines model for UpdateIncidentEventFunctionality.Data.Type.
type UpdateIncidentEventFunctionalityDataType string

// UpdateIncidentEventService defines model for update_incident_event_service.
type UpdateIncidentEventService struct {
	Data struct {
		Attributes struct {
			// Status The status of the affected service
			Status UpdateIncidentEventServiceDataAttributesStatus `json:"status"`
		} `json:"attributes"`
		Type UpdateIncidentEventServiceDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentEventServiceDataAttributesStatus The status of the affected service
type UpdateIncidentEventServiceDataAttributesStatus string

// UpdateIncidentEventServiceDataType defines model for UpdateIncidentEventService.Data.Type.
type UpdateIncidentEventServiceDataType string

// UpdateIncidentFeedback defines model for update_incident_feedback.
type UpdateIncidentFeedback struct {
	Data struct {
		Attributes struct {
			// Anonymous Is the feedback anonymous?
			Anonymous *bool `json:"anonymous,omitempty"`

			// Feedback The feedback of the incident feedback
			Feedback *string `json:"feedback,omitempty"`

			// Rating The rating of the incident feedback
			Rating *UpdateIncidentFeedbackDataAttributesRating `json:"rating,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentFeedbackDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentFeedbackDataAttributesRating The rating of the incident feedback
type UpdateIncidentFeedbackDataAttributesRating int

// UpdateIncidentFeedbackDataType defines model for UpdateIncidentFeedback.Data.Type.
type UpdateIncidentFeedbackDataType string

// UpdateIncidentFormFieldSelection defines model for update_incident_form_field_selection.
type UpdateIncidentFormFieldSelection struct {
	Data struct {
		Attributes struct {
			SelectedCatalogEntityIds *[]string `json:"selected_catalog_entity_ids,omitempty"`
			SelectedFunctionalityIds *[]string `json:"selected_functionality_ids,omitempty"`
			SelectedGroupIds         *[]string `json:"selected_group_ids,omitempty"`
			SelectedOptionIds        *[]string `json:"selected_option_ids,omitempty"`
			SelectedServiceIds       *[]string `json:"selected_service_ids,omitempty"`
			SelectedUserIds          *[]int    `json:"selected_user_ids,omitempty"`

			// Value The selected value for text kind custom fields
			Value *string `json:"value"`
		} `json:"attributes"`
		Type UpdateIncidentFormFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentFormFieldSelectionDataType defines model for UpdateIncidentFormFieldSelection.Data.Type.
type UpdateIncidentFormFieldSelectionDataType string

// UpdateIncidentPermissionSet defines model for update_incident_permission_set.
type UpdateIncidentPermissionSet struct {
	Data struct {
		Attributes struct {
			// Description The incident permission set description.
			Description *string `json:"description"`

			// Name The incident permission set name.
			Name                       *string                                                                `json:"name,omitempty"`
			PrivateIncidentPermissions *[]UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissions `json:"private_incident_permissions,omitempty"`
			PublicIncidentPermissions  *[]UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissions  `json:"public_incident_permissions,omitempty"`

			// Slug The incident permission set slug.
			Slug *string `json:"slug,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentPermissionSetDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissions defines model for UpdateIncidentPermissionSet.Data.Attributes.PrivateIncidentPermissions.
type UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissions string

// UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissions defines model for UpdateIncidentPermissionSet.Data.Attributes.PublicIncidentPermissions.
type UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissions string

// UpdateIncidentPermissionSetDataType defines model for UpdateIncidentPermissionSet.Data.Type.
type UpdateIncidentPermissionSetDataType string

// UpdateIncidentPermissionSetBoolean defines model for update_incident_permission_set_boolean.
type UpdateIncidentPermissionSetBoolean struct {
	Data struct {
		Attributes struct {
			Enabled        *bool                                                 `json:"enabled,omitempty"`
			Kind           *UpdateIncidentPermissionSetBooleanDataAttributesKind `json:"kind,omitempty"`
			Private        *bool                                                 `json:"private,omitempty"`
			SeverityParams *struct {
				// AppliesToUnassigned Whether permissions are enabled for incident without severity
				AppliesToUnassigned *bool `json:"applies_to_unassigned,omitempty"`

				// CreateEnabled Whether permissions are enabled when creating incident
				CreateEnabled *bool `json:"create_enabled,omitempty"`

				// FullyEnabled Whether permissions are enabled for any severity incident
				FullyEnabled *bool `json:"fully_enabled,omitempty"`

				// SeverityIds Severity ids that determine if an incident is permitted based on matching severity
				SeverityIds *[]string `json:"severity_ids"`
			} `json:"severity_params,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentPermissionSetBooleanDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentPermissionSetBooleanDataAttributesKind defines model for UpdateIncidentPermissionSetBoolean.Data.Attributes.Kind.
type UpdateIncidentPermissionSetBooleanDataAttributesKind string

// UpdateIncidentPermissionSetBooleanDataType defines model for UpdateIncidentPermissionSetBoolean.Data.Type.
type UpdateIncidentPermissionSetBooleanDataType string

// UpdateIncidentPermissionSetResource defines model for update_incident_permission_set_resource.
type UpdateIncidentPermissionSetResource struct {
	Data struct {
		Attributes struct {
			Kind           *UpdateIncidentPermissionSetResourceDataAttributesKind `json:"kind,omitempty"`
			Private        *bool                                                  `json:"private,omitempty"`
			ResourceId     *string                                                `json:"resource_id,omitempty"`
			ResourceType   *string                                                `json:"resource_type,omitempty"`
			SeverityParams *struct {
				// AppliesToUnassigned Whether permissions are enabled for incident without severity
				AppliesToUnassigned *bool `json:"applies_to_unassigned,omitempty"`

				// CreateEnabled Whether permissions are enabled when creating incident
				CreateEnabled *bool `json:"create_enabled,omitempty"`

				// FullyEnabled Whether permissions are enabled for any severity incident
				FullyEnabled *bool `json:"fully_enabled,omitempty"`

				// SeverityIds Severity ids that determine if an incident is permitted based on matching severity
				SeverityIds *[]string `json:"severity_ids"`
			} `json:"severity_params,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentPermissionSetResourceDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentPermissionSetResourceDataAttributesKind defines model for UpdateIncidentPermissionSetResource.Data.Attributes.Kind.
type UpdateIncidentPermissionSetResourceDataAttributesKind string

// UpdateIncidentPermissionSetResourceDataType defines model for UpdateIncidentPermissionSetResource.Data.Type.
type UpdateIncidentPermissionSetResourceDataType string

// UpdateIncidentPostMortem defines model for update_incident_post_mortem.
type UpdateIncidentPostMortem struct {
	Data struct {
		Attributes struct {
			// CauseIds The Cause ID's to attach to the incident retrospective
			CauseIds *[]string `json:"cause_ids"`

			// MitigatedAt Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// ResolvedAt Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// ShowActionItems Show action items (follow-ups) in the incident retrospective
			ShowActionItems *bool `json:"show_action_items,omitempty"`

			// ShowAlertsAttached Show alerts attached to the incident
			ShowAlertsAttached *bool `json:"show_alerts_attached,omitempty"`

			// ShowFunctionalitiesImpacted Show services impacted of the incident retrospective
			ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

			// ShowGroupsImpacted Show groups impacted of the incident retrospective
			ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

			// ShowServicesImpacted Show functionalities impacted of the incident retrospective
			ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

			// ShowTimeline Show events timeline of the incident retrospective
			ShowTimeline *bool `json:"show_timeline,omitempty"`

			// ShowTimelineActionItems Show action items in the timeline of the incident retrospective
			ShowTimelineActionItems *bool `json:"show_timeline_action_items,omitempty"`

			// ShowTimelineGenius Show workflow events in the timeline of the incident retrospective
			ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

			// ShowTimelineTasks Show tasks in the timeline of the incident retrospective
			ShowTimelineTasks *bool `json:"show_timeline_tasks,omitempty"`

			// ShowTimelineTrail Show trail events in the timeline of the incident retrospective
			ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

			// StartedAt Date of started at
			StartedAt *string `json:"started_at"`

			// Status The status of the incident retrospective
			Status *UpdateIncidentPostMortemDataAttributesStatus `json:"status,omitempty"`

			// Title The title of the incident retrospective
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentPostMortemDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentPostMortemDataAttributesStatus The status of the incident retrospective
type UpdateIncidentPostMortemDataAttributesStatus string

// UpdateIncidentPostMortemDataType defines model for UpdateIncidentPostMortem.Data.Type.
type UpdateIncidentPostMortemDataType string

// UpdateIncidentPostmortemTaskParams defines model for update_incident_postmortem_task_params.
type UpdateIncidentPostmortemTaskParams struct {
	// PostmortemId UUID of the retrospective that needs to be updated
	PostmortemId string                                      `json:"postmortem_id"`
	Status       *string                                     `json:"status"`
	TaskType     *UpdateIncidentPostmortemTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The incident title
	Title *string `json:"title"`
}

// UpdateIncidentPostmortemTaskParamsTaskType defines model for UpdateIncidentPostmortemTaskParams.TaskType.
type UpdateIncidentPostmortemTaskParamsTaskType string

// UpdateIncidentRetrospectiveStep defines model for update_incident_retrospective_step.
type UpdateIncidentRetrospectiveStep struct {
	Data struct {
		Attributes struct {
			// Description The description of the incident retrospective step
			Description *string `json:"description"`

			// DueDate Due date
			DueDate *string `json:"due_date"`

			// Position Position of the step
			Position *int `json:"position"`

			// Skippable Is the step skippable?
			Skippable *bool `json:"skippable,omitempty"`

			// Status Status of the incident retrospective step
			Status *UpdateIncidentRetrospectiveStepDataAttributesStatus `json:"status,omitempty"`

			// Title The name of the incident retrospective step
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentRetrospectiveStepDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentRetrospectiveStepDataAttributesStatus Status of the incident retrospective step
type UpdateIncidentRetrospectiveStepDataAttributesStatus string

// UpdateIncidentRetrospectiveStepDataType defines model for UpdateIncidentRetrospectiveStep.Data.Type.
type UpdateIncidentRetrospectiveStepDataType string

// UpdateIncidentRole defines model for update_incident_role.
type UpdateIncidentRole struct {
	Data struct {
		Attributes struct {
			AllowMultiUserAssignment *bool `json:"allow_multi_user_assignment,omitempty"`

			// Description The description of the incident role
			Description *string `json:"description"`
			Enabled     *bool   `json:"enabled,omitempty"`

			// Name The name of the incident role
			Name     *string `json:"name,omitempty"`
			Optional *bool   `json:"optional,omitempty"`

			// Position Position of the incident role
			Position *int `json:"position"`

			// Summary The summary of the incident role
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type UpdateIncidentRoleDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentRoleDataType defines model for UpdateIncidentRole.Data.Type.
type UpdateIncidentRoleDataType string

// UpdateIncidentRoleTask defines model for update_incident_role_task.
type UpdateIncidentRoleTask struct {
	Data struct {
		Attributes struct {
			// Description The description of the incident task
			Description *string `json:"description"`

			// Priority The priority of the incident task
			Priority *UpdateIncidentRoleTaskDataAttributesPriority `json:"priority,omitempty"`

			// Task The task of the incident task
			Task *string `json:"task,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentRoleTaskDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentRoleTaskDataAttributesPriority The priority of the incident task
type UpdateIncidentRoleTaskDataAttributesPriority string

// UpdateIncidentRoleTaskDataType defines model for UpdateIncidentRoleTask.Data.Type.
type UpdateIncidentRoleTaskDataType string

// UpdateIncidentStatusPageEvent defines model for update_incident_status_page_event.
type UpdateIncidentStatusPageEvent struct {
	Data struct {
		Attributes struct {
			// Event The summary of the incident event
			Event *string `json:"event,omitempty"`

			// NotifySubscribers Notify all status pages subscribers
			NotifySubscribers *bool `json:"notify_subscribers"`

			// ShouldTweet For Statuspage.io integrated pages auto publishes a tweet for your update
			ShouldTweet *bool `json:"should_tweet"`

			// Status The status of the incident event
			Status *UpdateIncidentStatusPageEventDataAttributesStatus `json:"status,omitempty"`

			// StatusPageId Unique ID of the status page you wish to post the event to
			StatusPageId *string `json:"status_page_id,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentStatusPageEventDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentStatusPageEventDataAttributesStatus The status of the incident event
type UpdateIncidentStatusPageEventDataAttributesStatus string

// UpdateIncidentStatusPageEventDataType defines model for UpdateIncidentStatusPageEvent.Data.Type.
type UpdateIncidentStatusPageEventDataType string

// UpdateIncidentStatusTimestampTaskParams defines model for update_incident_status_timestamp_task_params.
type UpdateIncidentStatusTimestampTaskParams struct {
	// AssignedAt Timestamp of when the sub-status was assigned
	AssignedAt string `json:"assigned_at"`

	// SubStatusId Sub-status to update timestamp for
	SubStatusId string                                           `json:"sub_status_id"`
	TaskType    *UpdateIncidentStatusTimestampTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateIncidentStatusTimestampTaskParamsTaskType defines model for UpdateIncidentStatusTimestampTaskParams.TaskType.
type UpdateIncidentStatusTimestampTaskParamsTaskType string

// UpdateIncidentSubStatus defines model for update_incident_sub_status.
type UpdateIncidentSubStatus struct {
	Data struct {
		Attributes struct {
			AssignedAt       *string `json:"assigned_at,omitempty"`
			AssignedByUserId *int    `json:"assigned_by_user_id"`

			// SubStatusId Note: To change an incident's sub-status, use the PATCH /incidents/:id endpoint and set the sub_status_id attribute. This endpoint is for modifying the timestamp of when an incident's sub-status was assigned.
			SubStatusId *string `json:"sub_status_id,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentSubStatusDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentSubStatusDataType defines model for UpdateIncidentSubStatus.Data.Type.
type UpdateIncidentSubStatusDataType string

// UpdateIncidentTaskParams defines model for update_incident_task_params.
type UpdateIncidentTaskParams struct {
	AcknowledgedAt     *string                                     `json:"acknowledged_at"`
	AttributeToQueryBy *UpdateIncidentTaskParamsAttributeToQueryBy `json:"attribute_to_query_by,omitempty"`

	// CustomFieldsMapping Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string   `json:"custom_fields_mapping"`
	DetectedAt          *string   `json:"detected_at"`
	EnvironmentIds      *[]string `json:"environment_ids"`
	FunctionalityIds    *[]string `json:"functionality_ids"`
	GroupIds            *[]string `json:"group_ids"`

	// IncidentId The incident id to update or id of any attribute on the incident
	IncidentId      string    `json:"incident_id"`
	IncidentTypeIds *[]string `json:"incident_type_ids"`
	MitigatedAt     *string   `json:"mitigated_at"`
	Private         *bool     `json:"private,omitempty"`
	ResolvedAt      *string   `json:"resolved_at"`
	ServiceIds      *[]string `json:"service_ids"`
	SeverityId      *string   `json:"severity_id"`
	StartedAt       *string   `json:"started_at"`
	Status          *string   `json:"status"`

	// Summary The incident summary
	Summary  *string                           `json:"summary"`
	TaskType *UpdateIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The incident title
	Title *string `json:"title"`
}

// UpdateIncidentTaskParamsAttributeToQueryBy defines model for UpdateIncidentTaskParams.AttributeToQueryBy.
type UpdateIncidentTaskParamsAttributeToQueryBy string

// UpdateIncidentTaskParamsTaskType defines model for UpdateIncidentTaskParams.TaskType.
type UpdateIncidentTaskParamsTaskType string

// UpdateIncidentType defines model for update_incident_type.
type UpdateIncidentType struct {
	Data struct {
		Attributes struct {
			// Color The hex color of the incident type
			Color *string `json:"color"`

			// Description The description of the incident type
			Description *string `json:"description"`

			// Name The name of the incident type
			Name *string `json:"name,omitempty"`

			// NotifyEmails Emails to attach to the incident type
			NotifyEmails *[]string `json:"notify_emails"`

			// Position Position of the incident type
			Position *int `json:"position"`

			// SlackAliases Slack Aliases associated with this incident type
			SlackAliases *[]struct {
				// Id Slack alias ID
				Id string `json:"id"`

				// Name Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// SlackChannels Slack Channels associated with this incident type
			SlackChannels *[]struct {
				// Id Slack channel ID
				Id string `json:"id"`

				// Name Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type UpdateIncidentTypeDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentTypeDataType defines model for UpdateIncidentType.Data.Type.
type UpdateIncidentTypeDataType string

// UpdateJiraIssueTaskParams defines model for update_jira_issue_task_params.
type UpdateJiraIssueTaskParams struct {
	// AssignUserEmail The assigned user's email
	AssignUserEmail *string `json:"assign_user_email,omitempty"`

	// CustomFieldsMapping Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// Description The issue description
	Description *string `json:"description,omitempty"`

	// DueDate The due date
	DueDate *string `json:"due_date,omitempty"`

	// IssueId The issue id
	IssueId string `json:"issue_id"`

	// Labels The issue labels
	Labels *string `json:"labels,omitempty"`

	// Priority The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// ProjectKey The project key
	ProjectKey string `json:"project_key"`

	// ReporterUserEmail The reporter user's email
	ReporterUserEmail *string `json:"reporter_user_email,omitempty"`

	// Status The status id and display name
	Status *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"status,omitempty"`
	TaskType *UpdateJiraIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The issue title
	Title *string `json:"title,omitempty"`

	// UpdatePayload Update payload. Can contain liquid markup and need to be valid JSON
	UpdatePayload *string `json:"update_payload"`
}

// UpdateJiraIssueTaskParamsTaskType defines model for UpdateJiraIssueTaskParams.TaskType.
type UpdateJiraIssueTaskParamsTaskType string

// UpdateLinearIssueTaskParams defines model for update_linear_issue_task_params.
type UpdateLinearIssueTaskParams struct {
	// AssignUserEmail The assigned user's email
	AssignUserEmail *string `json:"assign_user_email,omitempty"`

	// Description The issue description
	Description *string `json:"description,omitempty"`

	// IssueId The issue id
	IssueId string `json:"issue_id"`
	Labels  *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"labels,omitempty"`

	// Priority The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// Project The project id and display name
	Project *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"project,omitempty"`

	// State The state id and display name
	State *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"state,omitempty"`
	TaskType *UpdateLinearIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The issue title
	Title *string `json:"title,omitempty"`
}

// UpdateLinearIssueTaskParamsTaskType defines model for UpdateLinearIssueTaskParams.TaskType.
type UpdateLinearIssueTaskParamsTaskType string

// UpdateLiveCallRouter defines model for update_live_call_router.
type UpdateLiveCallRouter struct {
	Data struct {
		Attributes struct {
			// AlertUrgencyId This is used in escalation paths to determine who to page
			AlertUrgencyId *string `json:"alert_urgency_id,omitempty"`

			// CallerGreeting The caller greeting message of the live_call_router
			CallerGreeting *string `json:"caller_greeting,omitempty"`

			// CountryCode The country code of the live_call_router
			CountryCode *UpdateLiveCallRouterDataAttributesCountryCode `json:"country_code,omitempty"`

			// Enabled Whether the live_call_router is enabled
			Enabled *bool `json:"enabled,omitempty"`

			// EscalationLevelDelayInSeconds This overrides the delay (seconds) in escalation levels
			EscalationLevelDelayInSeconds *int `json:"escalation_level_delay_in_seconds,omitempty"`
			EscalationPolicyTriggerParams *struct {
				// Id The ID of notification target
				Id string `json:"id"`

				// Type The type of the notification target
				Type UpdateLiveCallRouterDataAttributesEscalationPolicyTriggerParamsType `json:"type"`
			} `json:"escalation_policy_trigger_params"`

			// Kind The kind of the live_call_router
			Kind *UpdateLiveCallRouterDataAttributesKind `json:"kind,omitempty"`

			// Name The name of the live_call_router
			Name *string `json:"name,omitempty"`

			// PhoneType The phone type of the live_call_router
			PhoneType *UpdateLiveCallRouterDataAttributesPhoneType `json:"phone_type,omitempty"`

			// SentToVoicemailDelay The delay (seconds) after which the caller in redirected to voicemail
			SentToVoicemailDelay *int `json:"sent_to_voicemail_delay,omitempty"`

			// ShouldAutoResolveAlertOnCallEnd This overrides the delay (seconds) in escalation levels
			ShouldAutoResolveAlertOnCallEnd *bool `json:"should_auto_resolve_alert_on_call_end,omitempty"`

			// ShouldRedirectToVoicemailOnNoAnswer This prompts the caller to choose voicemail or connect live
			ShouldRedirectToVoicemailOnNoAnswer *bool `json:"should_redirect_to_voicemail_on_no_answer,omitempty"`

			// VoicemailGreeting The voicemail greeting of the live_call_router
			VoicemailGreeting *string `json:"voicemail_greeting,omitempty"`

			// WaitingMusicUrl The waiting music URL of the live_call_router
			WaitingMusicUrl *string `json:"waiting_music_url,omitempty"`
		} `json:"attributes"`
		Type UpdateLiveCallRouterDataType `json:"type"`
	} `json:"data"`
}

// UpdateLiveCallRouterDataAttributesCountryCode The country code of the live_call_router
type UpdateLiveCallRouterDataAttributesCountryCode string

// UpdateLiveCallRouterDataAttributesEscalationPolicyTriggerParamsType The type of the notification target
type UpdateLiveCallRouterDataAttributesEscalationPolicyTriggerParamsType string

// UpdateLiveCallRouterDataAttributesKind The kind of the live_call_router
type UpdateLiveCallRouterDataAttributesKind string

// UpdateLiveCallRouterDataAttributesPhoneType The phone type of the live_call_router
type UpdateLiveCallRouterDataAttributesPhoneType string

// UpdateLiveCallRouterDataType defines model for UpdateLiveCallRouter.Data.Type.
type UpdateLiveCallRouterDataType string

// UpdateMotionTaskTaskParams defines model for update_motion_task_task_params.
type UpdateMotionTaskTaskParams struct {
	// Description The task description
	Description *string `json:"description,omitempty"`

	// DueDate The due date
	DueDate *string `json:"due_date,omitempty"`

	// Duration The duration. Eg.  "NONE", "REMINDER", or a integer greater than 0.
	Duration *string   `json:"duration,omitempty"`
	Labels   *[]string `json:"labels,omitempty"`

	// Priority The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// TaskId The task id
	TaskId   string                              `json:"task_id"`
	TaskType *UpdateMotionTaskTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The task title
	Title *string `json:"title,omitempty"`
}

// UpdateMotionTaskTaskParamsTaskType defines model for UpdateMotionTaskTaskParams.TaskType.
type UpdateMotionTaskTaskParamsTaskType string

// UpdateNotionPageTaskParams defines model for update_notion_page_task_params.
type UpdateNotionPageTaskParams struct {
	// FileId The Notion page ID
	FileId string `json:"file_id"`

	// PostMortemTemplateId Retrospective template to use when creating page task, if desired
	PostMortemTemplateId   *string                             `json:"post_mortem_template_id,omitempty"`
	ShowActionItemsAsTable *bool                               `json:"show_action_items_as_table,omitempty"`
	ShowTimelineAsTable    *bool                               `json:"show_timeline_as_table,omitempty"`
	TaskType               *UpdateNotionPageTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The Notion page title
	Title *string `json:"title,omitempty"`
}

// UpdateNotionPageTaskParamsTaskType defines model for UpdateNotionPageTaskParams.TaskType.
type UpdateNotionPageTaskParamsTaskType string

// UpdateOnCallRole defines model for update_on_call_role.
type UpdateOnCallRole struct {
	Data struct {
		Attributes struct {
			AlertSourcesPermissions       *[]UpdateOnCallRoleDataAttributesAlertSourcesPermissions       `json:"alert_sources_permissions,omitempty"`
			AlertUrgencyPermissions       *[]UpdateOnCallRoleDataAttributesAlertUrgencyPermissions       `json:"alert_urgency_permissions,omitempty"`
			AlertsPermissions             *[]UpdateOnCallRoleDataAttributesAlertsPermissions             `json:"alerts_permissions,omitempty"`
			ApiKeysPermissions            *[]UpdateOnCallRoleDataAttributesApiKeysPermissions            `json:"api_keys_permissions,omitempty"`
			AuditsPermissions             *[]UpdateOnCallRoleDataAttributesAuditsPermissions             `json:"audits_permissions,omitempty"`
			ContactsPermissions           *[]UpdateOnCallRoleDataAttributesContactsPermissions           `json:"contacts_permissions,omitempty"`
			EscalationPoliciesPermissions *[]UpdateOnCallRoleDataAttributesEscalationPoliciesPermissions `json:"escalation_policies_permissions,omitempty"`
			GroupsPermissions             *[]UpdateOnCallRoleDataAttributesGroupsPermissions             `json:"groups_permissions,omitempty"`
			HeartbeatsPermissions         *[]UpdateOnCallRoleDataAttributesHeartbeatsPermissions         `json:"heartbeats_permissions,omitempty"`
			IntegrationsPermissions       *[]UpdateOnCallRoleDataAttributesIntegrationsPermissions       `json:"integrations_permissions,omitempty"`
			InvitationsPermissions        *[]UpdateOnCallRoleDataAttributesInvitationsPermissions        `json:"invitations_permissions,omitempty"`
			LiveCallRoutingPermissions    *[]UpdateOnCallRoleDataAttributesLiveCallRoutingPermissions    `json:"live_call_routing_permissions,omitempty"`

			// Name The role name.
			Name                        *string                                                      `json:"name,omitempty"`
			ScheduleOverridePermissions *[]UpdateOnCallRoleDataAttributesScheduleOverridePermissions `json:"schedule_override_permissions,omitempty"`
			SchedulesPermissions        *[]UpdateOnCallRoleDataAttributesSchedulesPermissions        `json:"schedules_permissions,omitempty"`
			ServicesPermissions         *[]UpdateOnCallRoleDataAttributesServicesPermissions         `json:"services_permissions,omitempty"`

			// Slug The role slug.
			Slug *string `json:"slug,omitempty"`

			// SystemRole The kind of role (user and custom type roles are only editable)
			SystemRole           *string                                               `json:"system_role,omitempty"`
			WebhooksPermissions  *[]UpdateOnCallRoleDataAttributesWebhooksPermissions  `json:"webhooks_permissions,omitempty"`
			WorkflowsPermissions *[]UpdateOnCallRoleDataAttributesWorkflowsPermissions `json:"workflows_permissions,omitempty"`
		} `json:"attributes"`
		Type UpdateOnCallRoleDataType `json:"type"`
	} `json:"data"`
}

// UpdateOnCallRoleDataAttributesAlertSourcesPermissions defines model for UpdateOnCallRole.Data.Attributes.AlertSourcesPermissions.
type UpdateOnCallRoleDataAttributesAlertSourcesPermissions string

// UpdateOnCallRoleDataAttributesAlertUrgencyPermissions defines model for UpdateOnCallRole.Data.Attributes.AlertUrgencyPermissions.
type UpdateOnCallRoleDataAttributesAlertUrgencyPermissions string

// UpdateOnCallRoleDataAttributesAlertsPermissions defines model for UpdateOnCallRole.Data.Attributes.AlertsPermissions.
type UpdateOnCallRoleDataAttributesAlertsPermissions string

// UpdateOnCallRoleDataAttributesApiKeysPermissions defines model for UpdateOnCallRole.Data.Attributes.ApiKeysPermissions.
type UpdateOnCallRoleDataAttributesApiKeysPermissions string

// UpdateOnCallRoleDataAttributesAuditsPermissions defines model for UpdateOnCallRole.Data.Attributes.AuditsPermissions.
type UpdateOnCallRoleDataAttributesAuditsPermissions string

// UpdateOnCallRoleDataAttributesContactsPermissions defines model for UpdateOnCallRole.Data.Attributes.ContactsPermissions.
type UpdateOnCallRoleDataAttributesContactsPermissions string

// UpdateOnCallRoleDataAttributesEscalationPoliciesPermissions defines model for UpdateOnCallRole.Data.Attributes.EscalationPoliciesPermissions.
type UpdateOnCallRoleDataAttributesEscalationPoliciesPermissions string

// UpdateOnCallRoleDataAttributesGroupsPermissions defines model for UpdateOnCallRole.Data.Attributes.GroupsPermissions.
type UpdateOnCallRoleDataAttributesGroupsPermissions string

// UpdateOnCallRoleDataAttributesHeartbeatsPermissions defines model for UpdateOnCallRole.Data.Attributes.HeartbeatsPermissions.
type UpdateOnCallRoleDataAttributesHeartbeatsPermissions string

// UpdateOnCallRoleDataAttributesIntegrationsPermissions defines model for UpdateOnCallRole.Data.Attributes.IntegrationsPermissions.
type UpdateOnCallRoleDataAttributesIntegrationsPermissions string

// UpdateOnCallRoleDataAttributesInvitationsPermissions defines model for UpdateOnCallRole.Data.Attributes.InvitationsPermissions.
type UpdateOnCallRoleDataAttributesInvitationsPermissions string

// UpdateOnCallRoleDataAttributesLiveCallRoutingPermissions defines model for UpdateOnCallRole.Data.Attributes.LiveCallRoutingPermissions.
type UpdateOnCallRoleDataAttributesLiveCallRoutingPermissions string

// UpdateOnCallRoleDataAttributesScheduleOverridePermissions defines model for UpdateOnCallRole.Data.Attributes.ScheduleOverridePermissions.
type UpdateOnCallRoleDataAttributesScheduleOverridePermissions string

// UpdateOnCallRoleDataAttributesSchedulesPermissions defines model for UpdateOnCallRole.Data.Attributes.SchedulesPermissions.
type UpdateOnCallRoleDataAttributesSchedulesPermissions string

// UpdateOnCallRoleDataAttributesServicesPermissions defines model for UpdateOnCallRole.Data.Attributes.ServicesPermissions.
type UpdateOnCallRoleDataAttributesServicesPermissions string

// UpdateOnCallRoleDataAttributesWebhooksPermissions defines model for UpdateOnCallRole.Data.Attributes.WebhooksPermissions.
type UpdateOnCallRoleDataAttributesWebhooksPermissions string

// UpdateOnCallRoleDataAttributesWorkflowsPermissions defines model for UpdateOnCallRole.Data.Attributes.WorkflowsPermissions.
type UpdateOnCallRoleDataAttributesWorkflowsPermissions string

// UpdateOnCallRoleDataType defines model for UpdateOnCallRole.Data.Type.
type UpdateOnCallRoleDataType string

// UpdateOnCallShadow defines model for update_on_call_shadow.
type UpdateOnCallShadow struct {
	Data struct {
		Attributes struct {
			// EndsAt End datetime for shadow shift
			EndsAt *time.Time `json:"ends_at,omitempty"`

			// ScheduleId ID of schedule the shadow shift belongs to
			ScheduleId *string `json:"schedule_id,omitempty"`

			// ShadowUserId Which user the shadow shift belongs to.
			ShadowUserId *int `json:"shadow_user_id,omitempty"`

			// ShadowableId ID of schedule or user the shadow user is shadowing
			ShadowableId   *string                                         `json:"shadowable_id,omitempty"`
			ShadowableType *UpdateOnCallShadowDataAttributesShadowableType `json:"shadowable_type,omitempty"`

			// StartsAt Start datetime of shadow shift
			StartsAt *time.Time `json:"starts_at,omitempty"`
		} `json:"attributes"`
		Type UpdateOnCallShadowDataType `json:"type"`
	} `json:"data"`
}

// UpdateOnCallShadowDataAttributesShadowableType defines model for UpdateOnCallShadow.Data.Attributes.ShadowableType.
type UpdateOnCallShadowDataAttributesShadowableType string

// UpdateOnCallShadowDataType defines model for UpdateOnCallShadow.Data.Type.
type UpdateOnCallShadowDataType string

// UpdateOpsgenieAlertTaskParams defines model for update_opsgenie_alert_task_params.
type UpdateOpsgenieAlertTaskParams struct {
	// AlertId Opsgenie Alert ID
	AlertId    string `json:"alert_id"`
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// Description Description field of the alert that is generally used to provide a detailed information about the alert
	Description *string `json:"description,omitempty"`

	// Message Message of the alert
	Message  *string                                `json:"message,omitempty"`
	Priority UpdateOpsgenieAlertTaskParamsPriority  `json:"priority"`
	TaskType *UpdateOpsgenieAlertTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateOpsgenieAlertTaskParamsPriority defines model for UpdateOpsgenieAlertTaskParams.Priority.
type UpdateOpsgenieAlertTaskParamsPriority string

// UpdateOpsgenieAlertTaskParamsTaskType defines model for UpdateOpsgenieAlertTaskParams.TaskType.
type UpdateOpsgenieAlertTaskParamsTaskType string

// UpdateOpsgenieIncidentTaskParams defines model for update_opsgenie_incident_task_params.
type UpdateOpsgenieIncidentTaskParams struct {
	// Description Description field of the alert that is generally used to provide a detailed information about the alert
	Description *string `json:"description,omitempty"`

	// Message Message of the alert
	Message *string `json:"message,omitempty"`

	// OpsgenieIncidentId The Opsgenie incident ID, this can also be a Rootly incident variable ex. {{ incident.opsgenie_incident_id }}
	OpsgenieIncidentId string                                    `json:"opsgenie_incident_id"`
	Priority           *UpdateOpsgenieIncidentTaskParamsPriority `json:"priority,omitempty"`
	Status             *UpdateOpsgenieIncidentTaskParamsStatus   `json:"status,omitempty"`
	TaskType           *UpdateOpsgenieIncidentTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateOpsgenieIncidentTaskParamsPriority defines model for UpdateOpsgenieIncidentTaskParams.Priority.
type UpdateOpsgenieIncidentTaskParamsPriority string

// UpdateOpsgenieIncidentTaskParamsStatus defines model for UpdateOpsgenieIncidentTaskParams.Status.
type UpdateOpsgenieIncidentTaskParamsStatus string

// UpdateOpsgenieIncidentTaskParamsTaskType defines model for UpdateOpsgenieIncidentTaskParams.TaskType.
type UpdateOpsgenieIncidentTaskParamsTaskType string

// UpdateOverrideShift defines model for update_override_shift.
type UpdateOverrideShift struct {
	Data struct {
		Attributes struct {
			// UserId Override shift user
			UserId int `json:"user_id"`
		} `json:"attributes"`
		Type UpdateOverrideShiftDataType `json:"type"`
	} `json:"data"`
}

// UpdateOverrideShiftDataType defines model for UpdateOverrideShift.Data.Type.
type UpdateOverrideShiftDataType string

// UpdatePagerdutyIncidentTaskParams defines model for update_pagerduty_incident_task_params.
type UpdatePagerdutyIncidentTaskParams struct {
	// EscalationLevel Escalation level of policy attached to incident
	EscalationLevel *int `json:"escalation_level,omitempty"`

	// PagerdutyIncidentId Pagerduty incident id
	PagerdutyIncidentId string `json:"pagerduty_incident_id"`

	// Priority PagerDuty incident priority, selecting auto will let Rootly auto map our incident severity
	Priority *string `json:"priority,omitempty"`

	// Resolution A message outlining the incident's resolution in PagerDuty
	Resolution *string                                    `json:"resolution,omitempty"`
	Status     *UpdatePagerdutyIncidentTaskParamsStatus   `json:"status,omitempty"`
	TaskType   *UpdatePagerdutyIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// Title Title to update to
	Title *string `json:"title,omitempty"`

	// Urgency PagerDuty incident urgency, selecting auto will let Rootly auto map our incident severity
	Urgency *UpdatePagerdutyIncidentTaskParamsUrgency `json:"urgency,omitempty"`
}

// UpdatePagerdutyIncidentTaskParamsStatus defines model for UpdatePagerdutyIncidentTaskParams.Status.
type UpdatePagerdutyIncidentTaskParamsStatus string

// UpdatePagerdutyIncidentTaskParamsTaskType defines model for UpdatePagerdutyIncidentTaskParams.TaskType.
type UpdatePagerdutyIncidentTaskParamsTaskType string

// UpdatePagerdutyIncidentTaskParamsUrgency PagerDuty incident urgency, selecting auto will let Rootly auto map our incident severity
type UpdatePagerdutyIncidentTaskParamsUrgency string

// UpdatePagertreeAlertTaskParams defines model for update_pagertree_alert_task_params.
type UpdatePagertreeAlertTaskParams struct {
	// Description Description of alert as text
	Description *string `json:"description,omitempty"`

	// Incident Setting to true makes an alert a Pagertree incident
	Incident *bool `json:"incident,omitempty"`

	// PagertreeAlertId The prefix ID of the Pagertree alert
	PagertreeAlertId *string                                 `json:"pagertree_alert_id,omitempty"`
	Severity         *UpdatePagertreeAlertTaskParamsSeverity `json:"severity,omitempty"`
	TaskType         *UpdatePagertreeAlertTaskParamsTaskType `json:"task_type,omitempty"`
	Teams            *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"teams,omitempty"`

	// Title Title of alert as text
	Title   *string                                `json:"title,omitempty"`
	Urgency *UpdatePagertreeAlertTaskParamsUrgency `json:"urgency,omitempty"`
	Users   *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"users,omitempty"`
}

// UpdatePagertreeAlertTaskParamsSeverity defines model for UpdatePagertreeAlertTaskParams.Severity.
type UpdatePagertreeAlertTaskParamsSeverity string

// UpdatePagertreeAlertTaskParamsTaskType defines model for UpdatePagertreeAlertTaskParams.TaskType.
type UpdatePagertreeAlertTaskParamsTaskType string

// UpdatePagertreeAlertTaskParamsUrgency defines model for UpdatePagertreeAlertTaskParams.Urgency.
type UpdatePagertreeAlertTaskParamsUrgency string

// UpdatePlaybook defines model for update_playbook.
type UpdatePlaybook struct {
	Data struct {
		Attributes struct {
			// EnvironmentIds The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// ExternalUrl The external url of the playbook
			ExternalUrl *string `json:"external_url"`

			// FunctionalityIds The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// GroupIds The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// IncidentTypeIds The Incident Type ID's to attach to the incident
			IncidentTypeIds *[]string `json:"incident_type_ids"`

			// ServiceIds The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// SeverityIds The Severity ID's to attach to the incident
			SeverityIds *[]string `json:"severity_ids"`

			// Summary The summary of the playbook
			Summary *string `json:"summary"`

			// Title The title of the playbook
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdatePlaybookDataType `json:"type"`
	} `json:"data"`
}

// UpdatePlaybookDataType defines model for UpdatePlaybook.Data.Type.
type UpdatePlaybookDataType string

// UpdatePlaybookTask defines model for update_playbook_task.
type UpdatePlaybookTask struct {
	Data struct {
		Attributes struct {
			// Description The description of the task
			Description *string `json:"description"`

			// Position The position of the task
			Position *int `json:"position"`

			// Task The task of the task
			Task *string `json:"task,omitempty"`
		} `json:"attributes"`
		Type UpdatePlaybookTaskDataType `json:"type"`
	} `json:"data"`
}

// UpdatePlaybookTaskDataType defines model for UpdatePlaybookTask.Data.Type.
type UpdatePlaybookTaskDataType string

// UpdatePostMortemTemplate defines model for update_post_mortem_template.
type UpdatePostMortemTemplate struct {
	Data struct {
		Attributes struct {
			// Content The postmortem template. Liquid syntax is supported
			Content *string `json:"content,omitempty"`

			// Default Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// Format The format of the input
			Format *UpdatePostMortemTemplateDataAttributesFormat `json:"format"`

			// Name The name of the postmortem template
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdatePostMortemTemplateDataType `json:"type"`
	} `json:"data"`
}

// UpdatePostMortemTemplateDataAttributesFormat The format of the input
type UpdatePostMortemTemplateDataAttributesFormat string

// UpdatePostMortemTemplateDataType defines model for UpdatePostMortemTemplate.Data.Type.
type UpdatePostMortemTemplateDataType string

// UpdatePulse defines model for update_pulse.
type UpdatePulse struct {
	Data struct {
		Attributes struct {
			// Data Additional data
			Data *map[string]interface{} `json:"data"`

			// EndedAt Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// EnvironmentIds The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`

			// ExternalUrl The external url of the pulse
			ExternalUrl *string `json:"external_url"`
			Labels      *[]struct {
				// Key Key of the tag
				Key string `json:"key"`

				// Value Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`
			Refs *[]struct {
				// Key Key of the ref
				Key string `json:"key"`

				// Value Value of the ref
				Value string `json:"value"`
			} `json:"refs,omitempty"`

			// ServiceIds The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// Source The source of the pulse (eg: k8s)
			Source *string `json:"source"`

			// StartedAt Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// Summary The summary of the pulse
			Summary *string `json:"summary,omitempty"`
		} `json:"attributes"`
		Type *UpdatePulseDataType `json:"type,omitempty"`
	} `json:"data"`
}

// UpdatePulseDataType defines model for UpdatePulse.Data.Type.
type UpdatePulseDataType string

// UpdateRetrospectiveConfiguration defines model for update_retrospective_configuration.
type UpdateRetrospectiveConfiguration struct {
	Data struct {
		Attributes struct {
			// GroupIds The Team ID's to attach to the retrospective configuration
			GroupIds *[]string `json:"group_ids"`

			// IncidentTypeIds The Incident Type ID's to attach to the retrospective configuration
			IncidentTypeIds *[]string `json:"incident_type_ids"`

			// SeverityIds The Severity ID's to attach to the retrospective configuration
			SeverityIds *[]string `json:"severity_ids"`
		} `json:"attributes"`
		Type UpdateRetrospectiveConfigurationDataType `json:"type"`
	} `json:"data"`
}

// UpdateRetrospectiveConfigurationDataType defines model for UpdateRetrospectiveConfiguration.Data.Type.
type UpdateRetrospectiveConfigurationDataType string

// UpdateRetrospectiveProcess defines model for update_retrospective_process.
type UpdateRetrospectiveProcess struct {
	Data struct {
		Attributes struct {
			// Description The description of the retrospective process
			Description *string `json:"description"`

			// Name The name of the retrospective process
			Name                                 *string `json:"name,omitempty"`
			RetrospectiveProcessMatchingCriteria *struct {
				// GroupIds Team ID's for retrospective process matching criteria
				GroupIds *[]string `json:"group_ids,omitempty"`

				// IncidentTypeIds Incident type ID's for retrospective process matching criteria
				IncidentTypeIds *[]string `json:"incident_type_ids,omitempty"`

				// SeverityIds Severity ID's for retrospective process matching criteria
				SeverityIds *[]string `json:"severity_ids,omitempty"`
			} `json:"retrospective_process_matching_criteria,omitempty"`
		} `json:"attributes"`
		Type UpdateRetrospectiveProcessDataType `json:"type"`
	} `json:"data"`
}

// UpdateRetrospectiveProcessDataType defines model for UpdateRetrospectiveProcess.Data.Type.
type UpdateRetrospectiveProcessDataType string

// UpdateRetrospectiveProcessGroup defines model for update_retrospective_process_group.
type UpdateRetrospectiveProcessGroup struct {
	Data struct {
		Attributes struct {
			Position    *int    `json:"position,omitempty"`
			SubStatusId *string `json:"sub_status_id,omitempty"`
		} `json:"attributes"`
		Type UpdateRetrospectiveProcessGroupDataType `json:"type"`
	} `json:"data"`
}

// UpdateRetrospectiveProcessGroupDataType defines model for UpdateRetrospectiveProcessGroup.Data.Type.
type UpdateRetrospectiveProcessGroupDataType string

// UpdateRetrospectiveProcessGroupStep defines model for update_retrospective_process_group_step.
type UpdateRetrospectiveProcessGroupStep struct {
	Data struct {
		Attributes struct {
			Position *int `json:"position,omitempty"`
		} `json:"attributes"`
		Type UpdateRetrospectiveProcessGroupStepDataType `json:"type"`
	} `json:"data"`
}

// UpdateRetrospectiveProcessGroupStepDataType defines model for UpdateRetrospectiveProcessGroupStep.Data.Type.
type UpdateRetrospectiveProcessGroupStepDataType string

// UpdateRetrospectiveStep defines model for update_retrospective_step.
type UpdateRetrospectiveStep struct {
	Data struct {
		Attributes struct {
			// Description The description of the step
			Description *string `json:"description"`

			// DueAfterDays Due date in days
			DueAfterDays *int `json:"due_after_days"`

			// IncidentRoleId Users assigned to the selected incident role will be the default owners for this step
			IncidentRoleId *string `json:"incident_role_id"`

			// Position Position of the step
			Position *int `json:"position"`

			// Skippable Is the step skippable?
			Skippable *bool `json:"skippable,omitempty"`

			// Title The name of the step
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdateRetrospectiveStepDataType `json:"type"`
	} `json:"data"`
}

// UpdateRetrospectiveStepDataType defines model for UpdateRetrospectiveStep.Data.Type.
type UpdateRetrospectiveStepDataType string

// UpdateRole defines model for update_role.
type UpdateRole struct {
	Data struct {
		Attributes struct {
			ApiKeysPermissions           *[]UpdateRoleDataAttributesApiKeysPermissions           `json:"api_keys_permissions,omitempty"`
			AuditsPermissions            *[]UpdateRoleDataAttributesAuditsPermissions            `json:"audits_permissions,omitempty"`
			BillingPermissions           *[]UpdateRoleDataAttributesBillingPermissions           `json:"billing_permissions,omitempty"`
			EnvironmentsPermissions      *[]UpdateRoleDataAttributesEnvironmentsPermissions      `json:"environments_permissions,omitempty"`
			FormFieldsPermissions        *[]UpdateRoleDataAttributesFormFieldsPermissions        `json:"form_fields_permissions,omitempty"`
			FunctionalitiesPermissions   *[]UpdateRoleDataAttributesFunctionalitiesPermissions   `json:"functionalities_permissions,omitempty"`
			GroupsPermissions            *[]UpdateRoleDataAttributesGroupsPermissions            `json:"groups_permissions,omitempty"`
			IncidentCausesPermissions    *[]UpdateRoleDataAttributesIncidentCausesPermissions    `json:"incident_causes_permissions,omitempty"`
			IncidentFeedbacksPermissions *[]UpdateRoleDataAttributesIncidentFeedbacksPermissions `json:"incident_feedbacks_permissions,omitempty"`

			// IncidentPermissionSetId Associated incident permissions set.
			IncidentPermissionSetId  *string                                             `json:"incident_permission_set_id"`
			IncidentRolesPermissions *[]UpdateRoleDataAttributesIncidentRolesPermissions `json:"incident_roles_permissions,omitempty"`
			IncidentTypesPermissions *[]UpdateRoleDataAttributesIncidentTypesPermissions `json:"incident_types_permissions,omitempty"`
			IncidentsPermissions     *[]UpdateRoleDataAttributesIncidentsPermissions     `json:"incidents_permissions,omitempty"`
			InvitationsPermissions   *[]UpdateRoleDataAttributesInvitationsPermissions   `json:"invitations_permissions,omitempty"`

			// Name The role name.
			Name                        *string                                                `json:"name,omitempty"`
			PlaybooksPermissions        *[]UpdateRoleDataAttributesPlaybooksPermissions        `json:"playbooks_permissions,omitempty"`
			PrivateIncidentsPermissions *[]UpdateRoleDataAttributesPrivateIncidentsPermissions `json:"private_incidents_permissions,omitempty"`
			RetrospectivePermissions    *[]UpdateRoleDataAttributesRetrospectivePermissions    `json:"retrospective_permissions,omitempty"`
			RolesPermissions            *[]UpdateRoleDataAttributesRolesPermissions            `json:"roles_permissions,omitempty"`
			SecretsPermissions          *[]UpdateRoleDataAttributesSecretsPermissions          `json:"secrets_permissions,omitempty"`
			ServicesPermissions         *[]UpdateRoleDataAttributesServicesPermissions         `json:"services_permissions,omitempty"`
			SeveritiesPermissions       *[]UpdateRoleDataAttributesSeveritiesPermissions       `json:"severities_permissions,omitempty"`

			// Slug The role slug.
			Slug                   *string                                           `json:"slug,omitempty"`
			StatusPagesPermissions *[]UpdateRoleDataAttributesStatusPagesPermissions `json:"status_pages_permissions,omitempty"`
			WebhooksPermissions    *[]UpdateRoleDataAttributesWebhooksPermissions    `json:"webhooks_permissions,omitempty"`
			WorkflowsPermissions   *[]UpdateRoleDataAttributesWorkflowsPermissions   `json:"workflows_permissions,omitempty"`
		} `json:"attributes"`
		Type UpdateRoleDataType `json:"type"`
	} `json:"data"`
}

// UpdateRoleDataAttributesApiKeysPermissions defines model for UpdateRole.Data.Attributes.ApiKeysPermissions.
type UpdateRoleDataAttributesApiKeysPermissions string

// UpdateRoleDataAttributesAuditsPermissions defines model for UpdateRole.Data.Attributes.AuditsPermissions.
type UpdateRoleDataAttributesAuditsPermissions string

// UpdateRoleDataAttributesBillingPermissions defines model for UpdateRole.Data.Attributes.BillingPermissions.
type UpdateRoleDataAttributesBillingPermissions string

// UpdateRoleDataAttributesEnvironmentsPermissions defines model for UpdateRole.Data.Attributes.EnvironmentsPermissions.
type UpdateRoleDataAttributesEnvironmentsPermissions string

// UpdateRoleDataAttributesFormFieldsPermissions defines model for UpdateRole.Data.Attributes.FormFieldsPermissions.
type UpdateRoleDataAttributesFormFieldsPermissions string

// UpdateRoleDataAttributesFunctionalitiesPermissions defines model for UpdateRole.Data.Attributes.FunctionalitiesPermissions.
type UpdateRoleDataAttributesFunctionalitiesPermissions string

// UpdateRoleDataAttributesGroupsPermissions defines model for UpdateRole.Data.Attributes.GroupsPermissions.
type UpdateRoleDataAttributesGroupsPermissions string

// UpdateRoleDataAttributesIncidentCausesPermissions defines model for UpdateRole.Data.Attributes.IncidentCausesPermissions.
type UpdateRoleDataAttributesIncidentCausesPermissions string

// UpdateRoleDataAttributesIncidentFeedbacksPermissions defines model for UpdateRole.Data.Attributes.IncidentFeedbacksPermissions.
type UpdateRoleDataAttributesIncidentFeedbacksPermissions string

// UpdateRoleDataAttributesIncidentRolesPermissions defines model for UpdateRole.Data.Attributes.IncidentRolesPermissions.
type UpdateRoleDataAttributesIncidentRolesPermissions string

// UpdateRoleDataAttributesIncidentTypesPermissions defines model for UpdateRole.Data.Attributes.IncidentTypesPermissions.
type UpdateRoleDataAttributesIncidentTypesPermissions string

// UpdateRoleDataAttributesIncidentsPermissions defines model for UpdateRole.Data.Attributes.IncidentsPermissions.
type UpdateRoleDataAttributesIncidentsPermissions string

// UpdateRoleDataAttributesInvitationsPermissions defines model for UpdateRole.Data.Attributes.InvitationsPermissions.
type UpdateRoleDataAttributesInvitationsPermissions string

// UpdateRoleDataAttributesPlaybooksPermissions defines model for UpdateRole.Data.Attributes.PlaybooksPermissions.
type UpdateRoleDataAttributesPlaybooksPermissions string

// UpdateRoleDataAttributesPrivateIncidentsPermissions defines model for UpdateRole.Data.Attributes.PrivateIncidentsPermissions.
type UpdateRoleDataAttributesPrivateIncidentsPermissions string

// UpdateRoleDataAttributesRetrospectivePermissions defines model for UpdateRole.Data.Attributes.RetrospectivePermissions.
type UpdateRoleDataAttributesRetrospectivePermissions string

// UpdateRoleDataAttributesRolesPermissions defines model for UpdateRole.Data.Attributes.RolesPermissions.
type UpdateRoleDataAttributesRolesPermissions string

// UpdateRoleDataAttributesSecretsPermissions defines model for UpdateRole.Data.Attributes.SecretsPermissions.
type UpdateRoleDataAttributesSecretsPermissions string

// UpdateRoleDataAttributesServicesPermissions defines model for UpdateRole.Data.Attributes.ServicesPermissions.
type UpdateRoleDataAttributesServicesPermissions string

// UpdateRoleDataAttributesSeveritiesPermissions defines model for UpdateRole.Data.Attributes.SeveritiesPermissions.
type UpdateRoleDataAttributesSeveritiesPermissions string

// UpdateRoleDataAttributesStatusPagesPermissions defines model for UpdateRole.Data.Attributes.StatusPagesPermissions.
type UpdateRoleDataAttributesStatusPagesPermissions string

// UpdateRoleDataAttributesWebhooksPermissions defines model for UpdateRole.Data.Attributes.WebhooksPermissions.
type UpdateRoleDataAttributesWebhooksPermissions string

// UpdateRoleDataAttributesWorkflowsPermissions defines model for UpdateRole.Data.Attributes.WorkflowsPermissions.
type UpdateRoleDataAttributesWorkflowsPermissions string

// UpdateRoleDataType defines model for UpdateRole.Data.Type.
type UpdateRoleDataType string

// UpdateSchedule defines model for update_schedule.
type UpdateSchedule struct {
	Data struct {
		Attributes struct {
			// AllTimeCoverage 24/7 coverage of the schedule
			AllTimeCoverage *bool `json:"all_time_coverage"`

			// Description The description of the schedule
			Description *string `json:"description"`

			// Name The name of the schedule
			Name *string `json:"name,omitempty"`

			// OwnerUserId ID of the owner of the schedule
			OwnerUserId *int `json:"owner_user_id"`
		} `json:"attributes"`
		Type UpdateScheduleDataType `json:"type"`
	} `json:"data"`
}

// UpdateScheduleDataType defines model for UpdateSchedule.Data.Type.
type UpdateScheduleDataType string

// UpdateScheduleRotation defines model for update_schedule_rotation.
type UpdateScheduleRotation struct {
	Data struct {
		Attributes struct {
			// ActiveAllWeek Schedule rotation active all week?
			ActiveAllWeek *bool                                             `json:"active_all_week,omitempty"`
			ActiveDays    *[]UpdateScheduleRotationDataAttributesActiveDays `json:"active_days,omitempty"`

			// ActiveTimeAttributes Schedule rotation's active times
			ActiveTimeAttributes *[]struct {
				// EndTime End time for schedule rotation active time
				EndTime string `json:"end_time"`

				// StartTime Start time for schedule rotation active time
				StartTime string `json:"start_time"`
			} `json:"active_time_attributes,omitempty"`
			ActiveTimeType *string `json:"active_time_type,omitempty"`

			// Name The name of the schedule rotation
			Name *string `json:"name,omitempty"`

			// Position Position of the schedule rotation
			Position                       *int `json:"position,omitempty"`
			ScheduleRotationableAttributes *struct {
				// HandoffDay Hand off day for monthly rotation
				HandoffDay *UpdateScheduleRotationDataAttributesScheduleRotationableAttributesHandoffDay `json:"handoff_day,omitempty"`

				// HandoffTime Hand off time for custom rotation
				HandoffTime *string `json:"handoff_time,omitempty"`

				// ShiftLength Shift length for custom rotation
				ShiftLength *int `json:"shift_length,omitempty"`

				// ShiftLengthUnit Shift length unit for custom rotation
				ShiftLengthUnit *UpdateScheduleRotationDataAttributesScheduleRotationableAttributesShiftLengthUnit `json:"shift_length_unit,omitempty"`
			} `json:"schedule_rotationable_attributes,omitempty"`

			// ScheduleRotationableType Schedule rotation type
			ScheduleRotationableType UpdateScheduleRotationDataAttributesScheduleRotationableType `json:"schedule_rotationable_type"`

			// TimeZone A valid IANA time zone name.
			TimeZone *string `json:"time_zone,omitempty"`
		} `json:"attributes"`
		Type UpdateScheduleRotationDataType `json:"type"`
	} `json:"data"`
}

// UpdateScheduleRotationDataAttributesActiveDays Schedule rotation active days
type UpdateScheduleRotationDataAttributesActiveDays string

// UpdateScheduleRotationDataAttributesScheduleRotationableAttributesHandoffDay Hand off day for monthly rotation
type UpdateScheduleRotationDataAttributesScheduleRotationableAttributesHandoffDay string

// UpdateScheduleRotationDataAttributesScheduleRotationableAttributesShiftLengthUnit Shift length unit for custom rotation
type UpdateScheduleRotationDataAttributesScheduleRotationableAttributesShiftLengthUnit string

// UpdateScheduleRotationDataAttributesScheduleRotationableType Schedule rotation type
type UpdateScheduleRotationDataAttributesScheduleRotationableType string

// UpdateScheduleRotationDataType defines model for UpdateScheduleRotation.Data.Type.
type UpdateScheduleRotationDataType string

// UpdateScheduleRotationActiveDay defines model for update_schedule_rotation_active_day.
type UpdateScheduleRotationActiveDay struct {
	Data struct {
		Attributes struct {
			// ActiveTimeAttributes Schedule rotation active times per day
			ActiveTimeAttributes *[]struct {
				// EndTime End time for schedule rotation active time
				EndTime *string `json:"end_time,omitempty"`

				// StartTime Start time for schedule rotation active time
				StartTime *string `json:"start_time,omitempty"`
			} `json:"active_time_attributes,omitempty"`

			// DayName Schedule rotation day name for which active times to be created
			DayName *UpdateScheduleRotationActiveDayDataAttributesDayName `json:"day_name,omitempty"`
		} `json:"attributes"`
		Type UpdateScheduleRotationActiveDayDataType `json:"type"`
	} `json:"data"`
}

// UpdateScheduleRotationActiveDayDataAttributesDayName Schedule rotation day name for which active times to be created
type UpdateScheduleRotationActiveDayDataAttributesDayName string

// UpdateScheduleRotationActiveDayDataType defines model for UpdateScheduleRotationActiveDay.Data.Type.
type UpdateScheduleRotationActiveDayDataType string

// UpdateScheduleRotationUser defines model for update_schedule_rotation_user.
type UpdateScheduleRotationUser struct {
	Data struct {
		Attributes struct {
			// Position Position of the user inside rotation
			Position *int `json:"position,omitempty"`

			// UserId Schedule rotation user
			UserId *int `json:"user_id,omitempty"`
		} `json:"attributes"`
		Type UpdateScheduleRotationUserDataType `json:"type"`
	} `json:"data"`
}

// UpdateScheduleRotationUserDataType defines model for UpdateScheduleRotationUser.Data.Type.
type UpdateScheduleRotationUserDataType string

// UpdateSecret defines model for update_secret.
type UpdateSecret struct {
	Data struct {
		Attributes struct {
			// HashicorpVaultMount The HashiCorp Vault secret mount path
			HashicorpVaultMount *string `json:"hashicorp_vault_mount"`

			// HashicorpVaultPath The HashiCorp Vault secret path
			HashicorpVaultPath *string `json:"hashicorp_vault_path"`

			// HashicorpVaultVersion The HashiCorp Vault secret version
			HashicorpVaultVersion *int `json:"hashicorp_vault_version"`

			// Name The name of the secret
			Name string `json:"name"`

			// Secret The secret
			Secret *string `json:"secret,omitempty"`
		} `json:"attributes"`
		Type UpdateSecretDataType `json:"type"`
	} `json:"data"`
}

// UpdateSecretDataType defines model for UpdateSecret.Data.Type.
type UpdateSecretDataType string

// UpdateService defines model for update_service.
type UpdateService struct {
	Data struct {
		Attributes struct {
			// BackstageId The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
			BackstageId *string `json:"backstage_id"`

			// Color The hex color of the service
			Color *string `json:"color"`

			// CortexId The Cortex group id associated to this service
			CortexId *string `json:"cortex_id"`

			// Description The description of the service
			Description *string `json:"description"`

			// EnvironmentIds Environments associated with this service
			EnvironmentIds *[]string `json:"environment_ids"`

			// ExternalId The external id associated to this service
			ExternalId *string `json:"external_id"`

			// GithubRepositoryBranch The GitHub repository branch associated to this service. eg: main
			GithubRepositoryBranch *string `json:"github_repository_branch"`

			// GithubRepositoryName The GitHub repository name associated to this service. eg: rootlyhq/my-service
			GithubRepositoryName *string `json:"github_repository_name"`

			// GitlabRepositoryBranch The Gitlab repository branch associated to this service. eg: main
			GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

			// GitlabRepositoryName The Gitlab repository name associated to this service. eg: rootlyhq/my-service
			GitlabRepositoryName *string `json:"gitlab_repository_name"`

			// Name The name of the service
			Name *string `json:"name,omitempty"`

			// NotifyEmails Emails to attach to the service
			NotifyEmails *[]string `json:"notify_emails"`

			// OpsgenieId The Opsgenie service id associated to this service
			OpsgenieId *string `json:"opsgenie_id"`

			// OwnersGroupIds Owner Teams associated with this service
			OwnersGroupIds *[]string `json:"owners_group_ids"`

			// OwnersUserIds Owner Users associated with this service
			OwnersUserIds *[]int `json:"owners_user_ids"`

			// PagerdutyId The PagerDuty service id associated to this service
			PagerdutyId *string `json:"pagerduty_id"`

			// Position Position of the service
			Position *int `json:"position"`

			// PublicDescription The public description of the service
			PublicDescription *string `json:"public_description"`

			// ServiceIds Services dependent on this service
			ServiceIds *[]string `json:"service_ids"`

			// ServiceNowCiSysId The Service Now CI sys id associated to this service
			ServiceNowCiSysId *string `json:"service_now_ci_sys_id"`

			// SlackAliases Slack Aliases associated with this service
			SlackAliases *[]struct {
				// Id Slack alias ID
				Id string `json:"id"`

				// Name Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// SlackChannels Slack Channels associated with this service
			SlackChannels *[]struct {
				// Id Slack channel ID
				Id string `json:"id"`

				// Name Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type UpdateServiceDataType `json:"type"`
	} `json:"data"`
}

// UpdateServiceDataType defines model for UpdateService.Data.Type.
type UpdateServiceDataType string

// UpdateServiceNowIncidentTaskParams defines model for update_service_now_incident_task_params.
type UpdateServiceNowIncidentTaskParams struct {
	// Completion The completion id and display name
	Completion *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion,omitempty"`

	// CustomFieldsMapping Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// Description The incident description
	Description *string `json:"description,omitempty"`

	// IncidentId The incident id
	IncidentId string `json:"incident_id"`

	// Priority The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`
	TaskType *UpdateServiceNowIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The incident title
	Title *string `json:"title,omitempty"`
}

// UpdateServiceNowIncidentTaskParamsTaskType defines model for UpdateServiceNowIncidentTaskParams.TaskType.
type UpdateServiceNowIncidentTaskParamsTaskType string

// UpdateSeverity defines model for update_severity.
type UpdateSeverity struct {
	Data struct {
		Attributes struct {
			// Color The hex color of the severity
			Color *string `json:"color"`

			// Description The description of the severity
			Description *string `json:"description"`

			// Name The name of the severity
			Name *string `json:"name,omitempty"`

			// NotifyEmails Emails to attach to the severity
			NotifyEmails *[]string `json:"notify_emails"`

			// Position Position of the severity
			Position *int `json:"position"`

			// Severity The severity of the severity
			Severity *UpdateSeverityDataAttributesSeverity `json:"severity,omitempty"`

			// SlackAliases Slack Aliases associated with this severity
			SlackAliases *[]struct {
				// Id Slack alias ID
				Id string `json:"id"`

				// Name Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// SlackChannels Slack Channels associated with this severity
			SlackChannels *[]struct {
				// Id Slack channel ID
				Id string `json:"id"`

				// Name Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type UpdateSeverityDataType `json:"type"`
	} `json:"data"`
}

// UpdateSeverityDataAttributesSeverity The severity of the severity
type UpdateSeverityDataAttributesSeverity string

// UpdateSeverityDataType defines model for UpdateSeverity.Data.Type.
type UpdateSeverityDataType string

// UpdateShortcutStoryTaskParams defines model for update_shortcut_story_task_params.
type UpdateShortcutStoryTaskParams struct {
	// Archivation The archivation id and display name
	Archivation struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"archivation"`

	// Description The incident description
	Description *string `json:"description,omitempty"`

	// DueDate The due date
	DueDate *string `json:"due_date,omitempty"`

	// Labels The story labels
	Labels *string `json:"labels,omitempty"`

	// StoryId The story id
	StoryId  string                                 `json:"story_id"`
	TaskType *UpdateShortcutStoryTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The incident title
	Title *string `json:"title,omitempty"`
}

// UpdateShortcutStoryTaskParamsTaskType defines model for UpdateShortcutStoryTaskParams.TaskType.
type UpdateShortcutStoryTaskParamsTaskType string

// UpdateShortcutTaskTaskParams defines model for update_shortcut_task_task_params.
type UpdateShortcutTaskTaskParams struct {
	// Completion The completion id and display name
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// Description The task description
	Description *string `json:"description,omitempty"`

	// ParentStoryId The parent story
	ParentStoryId string `json:"parent_story_id"`

	// TaskId The task id
	TaskId   string                                `json:"task_id"`
	TaskType *UpdateShortcutTaskTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateShortcutTaskTaskParamsTaskType defines model for UpdateShortcutTaskTaskParams.TaskType.
type UpdateShortcutTaskTaskParamsTaskType string

// UpdateSlackChannelTopicTaskParams defines model for update_slack_channel_topic_task_params.
type UpdateSlackChannelTopicTaskParams struct {
	Channel struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channel"`
	TaskType *UpdateSlackChannelTopicTaskParamsTaskType `json:"task_type,omitempty"`
	Topic    string                                     `json:"topic"`
}

// UpdateSlackChannelTopicTaskParamsTaskType defines model for UpdateSlackChannelTopicTaskParams.TaskType.
type UpdateSlackChannelTopicTaskParamsTaskType string

// UpdateStatusPage defines model for update_status_page.
type UpdateStatusPage struct {
	Data struct {
		Attributes struct {
			// AllowSearchEngineIndex Allow search engines to include your public status page in search results
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// AuthenticationEnabled Enable authentication
			AuthenticationEnabled *bool `json:"authentication_enabled"`

			// AuthenticationPassword Authentication password
			AuthenticationPassword *string `json:"authentication_password"`

			// Description The description of the status page
			Description *string `json:"description"`

			// Enabled Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// FailureMessage Message showing when at least one component is not operational
			FailureMessage *string `json:"failure_message"`

			// FooterColor The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// FunctionalityIds Functionalities attached to the status page
			FunctionalityIds *[]string `json:"functionality_ids,omitempty"`

			// GaTrackingId Google Analytics tracking ID
			GaTrackingId *string `json:"ga_tracking_id"`

			// HeaderColor The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Public Make the status page accessible to the public
			Public *bool `json:"public"`

			// PublicDescription The public description of the status page
			PublicDescription *string `json:"public_description"`

			// PublicTitle The public title of the status page
			PublicTitle *string `json:"public_title"`

			// ServiceIds Services attached to the status page
			ServiceIds *[]string `json:"service_ids,omitempty"`

			// ShowUptime Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// ShowUptimeLastDays Show uptime over x days
			ShowUptimeLastDays *UpdateStatusPageDataAttributesShowUptimeLastDays `json:"show_uptime_last_days"`

			// SuccessMessage Message showing when all components are operational
			SuccessMessage *string `json:"success_message"`

			// TimeZone A valid IANA time zone name.
			TimeZone *string `json:"time_zone"`

			// Title The title of the status page
			Title *string `json:"title,omitempty"`

			// WebsitePrivacyUrl Website Privacy URL
			WebsitePrivacyUrl *string `json:"website_privacy_url"`

			// WebsiteSupportUrl Website Support URL
			WebsiteSupportUrl *string `json:"website_support_url"`

			// WebsiteUrl Website URL
			WebsiteUrl *string `json:"website_url"`
		} `json:"attributes"`
		Type UpdateStatusPageDataType `json:"type"`
	} `json:"data"`
}

// UpdateStatusPageDataAttributesShowUptimeLastDays Show uptime over x days
type UpdateStatusPageDataAttributesShowUptimeLastDays int

// UpdateStatusPageDataType defines model for UpdateStatusPage.Data.Type.
type UpdateStatusPageDataType string

// UpdateStatusTaskParams defines model for update_status_task_params.
type UpdateStatusTaskParams struct {
	// InactivityTimeout In format '1 hour', '1 day', etc
	InactivityTimeout *string                         `json:"inactivity_timeout,omitempty"`
	Status            UpdateStatusTaskParamsStatus    `json:"status"`
	TaskType          *UpdateStatusTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateStatusTaskParamsStatus defines model for UpdateStatusTaskParams.Status.
type UpdateStatusTaskParamsStatus string

// UpdateStatusTaskParamsTaskType defines model for UpdateStatusTaskParams.TaskType.
type UpdateStatusTaskParamsTaskType string

// UpdateSubStatus defines model for update_sub_status.
type UpdateSubStatus struct {
	Data struct {
		Attributes struct {
			Description *string `json:"description"`
			Name        *string `json:"name,omitempty"`
			Position    *int    `json:"position"`
			Slug        *string `json:"slug,omitempty"`
		} `json:"attributes"`
		Type UpdateSubStatusDataType `json:"type"`
	} `json:"data"`
}

// UpdateSubStatusDataType defines model for UpdateSubStatus.Data.Type.
type UpdateSubStatusDataType string

// UpdateTeam defines model for update_team.
type UpdateTeam struct {
	Data struct {
		Attributes struct {
			// BackstageId The Backstage entity id associated to this team. eg: :namespace/:kind/:entity_name
			BackstageId *string `json:"backstage_id"`

			// Color The hex color of the team
			Color *string `json:"color"`

			// CortexId The Cortex group id associated to this team
			CortexId *string `json:"cortex_id"`

			// Description The description of the team
			Description *string `json:"description"`

			// ExternalId The external id associated to this team
			ExternalId *string `json:"external_id"`

			// Name The name of the team
			Name *string `json:"name,omitempty"`

			// NotifyEmails Emails to attach to the team
			NotifyEmails *[]string `json:"notify_emails"`

			// OpsgenieId The Opsgenie group id associated to this team
			OpsgenieId *string `json:"opsgenie_id"`

			// PagerdutyId The PagerDuty group id associated to this team
			PagerdutyId *string `json:"pagerduty_id"`

			// PagerdutyServiceId The PagerDuty service id associated to this team
			PagerdutyServiceId *string `json:"pagerduty_service_id"`

			// PagertreeId The PagerTree group id associated to this team
			PagertreeId *string `json:"pagertree_id"`

			// Position Position of the team
			Position *int `json:"position"`

			// ServiceNowCiSysId The Service Now CI sys id associated to this team
			ServiceNowCiSysId *string `json:"service_now_ci_sys_id"`

			// SlackAliases Slack Aliases associated with this team
			SlackAliases *[]struct {
				// Id Slack alias ID
				Id string `json:"id"`

				// Name Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// SlackChannels Slack Channels associated with this team
			SlackChannels *[]struct {
				// Id Slack channel ID
				Id string `json:"id"`

				// Name Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`

			// UserIds The User ID's members of this team
			UserIds *[]int `json:"user_ids"`

			// VictorOpsId The VictorOps group id associated to this team
			VictorOpsId *string `json:"victor_ops_id"`
		} `json:"attributes"`
		Type UpdateTeamDataType `json:"type"`
	} `json:"data"`
}

// UpdateTeamDataType defines model for UpdateTeam.Data.Type.
type UpdateTeamDataType string

// UpdateTrelloCardTaskParams defines model for update_trello_card_task_params.
type UpdateTrelloCardTaskParams struct {
	// Archivation The archivation id and display name
	Archivation struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"archivation"`

	// Board The board id and display name
	Board *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"board,omitempty"`

	// CardId The card id
	CardId string `json:"card_id"`

	// Description The card description
	Description *string `json:"description,omitempty"`

	// DueDate The due date
	DueDate *string `json:"due_date,omitempty"`
	Labels  *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"labels,omitempty"`

	// List The list id and display name
	List *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"list,omitempty"`
	TaskType *UpdateTrelloCardTaskParamsTaskType `json:"task_type,omitempty"`

	// Title The card title
	Title *string `json:"title,omitempty"`
}

// UpdateTrelloCardTaskParamsTaskType defines model for UpdateTrelloCardTaskParams.TaskType.
type UpdateTrelloCardTaskParamsTaskType string

// UpdateUserNotificationRule defines model for update_user_notification_rule.
type UpdateUserNotificationRule struct {
	Data struct {
		Attributes struct {
			// Delay Delay after which rule gets triggered
			Delay *int `json:"delay"`

			// EnabledContactTypes Contact types for which notification needs to be enabled
			EnabledContactTypes *[]UpdateUserNotificationRuleDataAttributesEnabledContactTypes `json:"enabled_contact_types,omitempty"`

			// Position Position of the rule
			Position *int `json:"position"`

			// UserCallNumberId User phone number to which notification to be sent
			UserCallNumberId *string `json:"user_call_number_id"`

			// UserDeviceId User device to which notification to be sent
			UserDeviceId *string `json:"user_device_id"`

			// UserEmailAddressId User email address to which notification to be sent
			UserEmailAddressId *string `json:"user_email_address_id"`

			// UserSmsNumberId User sms number to which notification to be sent
			UserSmsNumberId *string `json:"user_sms_number_id"`
		} `json:"attributes"`
		Type UpdateUserNotificationRuleDataType `json:"type"`
	} `json:"data"`
}

// UpdateUserNotificationRuleDataAttributesEnabledContactTypes defines model for UpdateUserNotificationRule.Data.Attributes.EnabledContactTypes.
type UpdateUserNotificationRuleDataAttributesEnabledContactTypes string

// UpdateUserNotificationRuleDataType defines model for UpdateUserNotificationRule.Data.Type.
type UpdateUserNotificationRuleDataType string

// UpdateVictorOpsIncidentTaskParams defines model for update_victor_ops_incident_task_params.
type UpdateVictorOpsIncidentTaskParams struct {
	// ResolutionMessage Resolution message
	ResolutionMessage *string                                    `json:"resolution_message,omitempty"`
	Status            UpdateVictorOpsIncidentTaskParamsStatus    `json:"status"`
	TaskType          *UpdateVictorOpsIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// VictorOpsIncidentId The victor_ops incident ID, this can also be a Rootly incident variable ex. {{ incident.victor_ops_incident_id }}
	VictorOpsIncidentId string `json:"victor_ops_incident_id"`
}

// UpdateVictorOpsIncidentTaskParamsStatus defines model for UpdateVictorOpsIncidentTaskParams.Status.
type UpdateVictorOpsIncidentTaskParamsStatus string

// UpdateVictorOpsIncidentTaskParamsTaskType defines model for UpdateVictorOpsIncidentTaskParams.TaskType.
type UpdateVictorOpsIncidentTaskParamsTaskType string

// UpdateWebhooksEndpoint defines model for update_webhooks_endpoint.
type UpdateWebhooksEndpoint struct {
	Data struct {
		Attributes struct {
			Enabled    *bool                                             `json:"enabled,omitempty"`
			EventTypes *[]UpdateWebhooksEndpointDataAttributesEventTypes `json:"event_types,omitempty"`

			// Name The name of the endpoint
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdateWebhooksEndpointDataType `json:"type"`
	} `json:"data"`
}

// UpdateWebhooksEndpointDataAttributesEventTypes defines model for UpdateWebhooksEndpoint.Data.Attributes.EventTypes.
type UpdateWebhooksEndpointDataAttributesEventTypes string

// UpdateWebhooksEndpointDataType defines model for UpdateWebhooksEndpoint.Data.Type.
type UpdateWebhooksEndpointDataType string

// UpdateWorkflow defines model for update_workflow.
type UpdateWorkflow struct {
	Data struct {
		Attributes struct {
			CauseIds *[]string `json:"cause_ids,omitempty"`

			// Command Workflow command
			Command *string `json:"command"`

			// CommandFeedbackEnabled This will notify you back when the workflow is starting
			CommandFeedbackEnabled *bool `json:"command_feedback_enabled"`

			// Description The description of the workflow
			Description      *string   `json:"description"`
			Enabled          *bool     `json:"enabled,omitempty"`
			EnvironmentIds   *[]string `json:"environment_ids,omitempty"`
			FunctionalityIds *[]string `json:"functionality_ids,omitempty"`
			GroupIds         *[]string `json:"group_ids,omitempty"`
			IncidentRoleIds  *[]string `json:"incident_role_ids,omitempty"`
			IncidentTypeIds  *[]string `json:"incident_type_ids,omitempty"`

			// Locked Restricts workflow edits to admins when turned on. Only admins can set this field.
			Locked *bool `json:"locked,omitempty"`

			// Name The title of the workflow
			Name *string `json:"name,omitempty"`

			// Position The order which the workflow should run with other workflows.
			Position *int `json:"position,omitempty"`

			// RepeatEveryDuration Repeat workflow every duration
			RepeatEveryDuration *string   `json:"repeat_every_duration"`
			ServiceIds          *[]string `json:"service_ids,omitempty"`
			SeverityIds         *[]string `json:"severity_ids,omitempty"`

			// Slug The slug of the workflow
			Slug          *string                                       `json:"slug,omitempty"`
			TriggerParams *UpdateWorkflow_Data_Attributes_TriggerParams `json:"trigger_params,omitempty"`

			// Wait Wait this duration before executing
			Wait *string `json:"wait"`

			// WorkflowGroupId The group this workflow belongs to.
			WorkflowGroupId *string `json:"workflow_group_id"`
		} `json:"attributes"`
		Type UpdateWorkflowDataType `json:"type"`
	} `json:"data"`
}

// UpdateWorkflow_Data_Attributes_TriggerParams defines model for UpdateWorkflow.Data.Attributes.TriggerParams.
type UpdateWorkflow_Data_Attributes_TriggerParams struct {
	union json.RawMessage
}

// UpdateWorkflowDataType defines model for UpdateWorkflow.Data.Type.
type UpdateWorkflowDataType string

// UpdateWorkflowCustomFieldSelection defines model for update_workflow_custom_field_selection.
type UpdateWorkflowCustomFieldSelection struct {
	Data struct {
		Attributes struct {
			// IncidentCondition The trigger condition
			IncidentCondition *UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition `json:"incident_condition,omitempty"`
			SelectedOptionIds *[]int                                                             `json:"selected_option_ids,omitempty"`
			Values            *[]string                                                          `json:"values,omitempty"`
		} `json:"attributes"`
		Type UpdateWorkflowCustomFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition The trigger condition
type UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition string

// UpdateWorkflowCustomFieldSelectionDataType defines model for UpdateWorkflowCustomFieldSelection.Data.Type.
type UpdateWorkflowCustomFieldSelectionDataType string

// UpdateWorkflowFormFieldCondition defines model for update_workflow_form_field_condition.
type UpdateWorkflowFormFieldCondition struct {
	Data struct {
		Attributes struct {
			// IncidentCondition The trigger condition
			IncidentCondition        *UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition `json:"incident_condition,omitempty"`
			SelectedCatalogEntityIds *[]string                                                        `json:"selected_catalog_entity_ids,omitempty"`
			SelectedFunctionalityIds *[]string                                                        `json:"selected_functionality_ids,omitempty"`
			SelectedGroupIds         *[]string                                                        `json:"selected_group_ids,omitempty"`
			SelectedOptionIds        *[]string                                                        `json:"selected_option_ids,omitempty"`
			SelectedServiceIds       *[]string                                                        `json:"selected_service_ids,omitempty"`
			SelectedUserIds          *[]int                                                           `json:"selected_user_ids,omitempty"`
			Values                   *[]string                                                        `json:"values,omitempty"`
		} `json:"attributes"`
		Type UpdateWorkflowFormFieldConditionDataType `json:"type"`
	} `json:"data"`
}

// UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition The trigger condition
type UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition string

// UpdateWorkflowFormFieldConditionDataType defines model for UpdateWorkflowFormFieldCondition.Data.Type.
type UpdateWorkflowFormFieldConditionDataType string

// UpdateWorkflowGroup defines model for update_workflow_group.
type UpdateWorkflowGroup struct {
	Data struct {
		Attributes struct {
			// Description A description of the workflow group.
			Description *string `json:"description"`

			// Expanded Whether the group is expanded or collapsed.
			Expanded *bool `json:"expanded,omitempty"`

			// Icon An emoji icon displayed next to the workflow group.
			Icon *string `json:"icon,omitempty"`

			// Kind The kind of the workflow group
			Kind *UpdateWorkflowGroupDataAttributesKind `json:"kind"`

			// Name The name of the workflow group.
			Name *string `json:"name,omitempty"`

			// Position The position of the workflow group
			Position *int `json:"position,omitempty"`
		} `json:"attributes"`
		Type UpdateWorkflowGroupDataType `json:"type"`
	} `json:"data"`
}

// UpdateWorkflowGroupDataAttributesKind The kind of the workflow group
type UpdateWorkflowGroupDataAttributesKind string

// UpdateWorkflowGroupDataType defines model for UpdateWorkflowGroup.Data.Type.
type UpdateWorkflowGroupDataType string

// UpdateWorkflowTask defines model for update_workflow_task.
type UpdateWorkflowTask struct {
	Data struct {
		Attributes struct {
			// Enabled Enable/disable workflow task
			Enabled *bool `json:"enabled,omitempty"`

			// Name Name of the workflow task
			Name *string `json:"name,omitempty"`

			// Position The position of the workflow task
			Position *int `json:"position,omitempty"`

			// SkipOnFailure Skip workflow task if any failures
			SkipOnFailure *bool                                          `json:"skip_on_failure,omitempty"`
			TaskParams    *UpdateWorkflowTask_Data_Attributes_TaskParams `json:"task_params,omitempty"`
		} `json:"attributes"`
		Type UpdateWorkflowTaskDataType `json:"type"`
	} `json:"data"`
}

// UpdateWorkflowTask_Data_Attributes_TaskParams defines model for UpdateWorkflowTask.Data.Attributes.TaskParams.
type UpdateWorkflowTask_Data_Attributes_TaskParams struct {
	union json.RawMessage
}

// UpdateWorkflowTaskDataType defines model for UpdateWorkflowTask.Data.Type.
type UpdateWorkflowTaskDataType string

// UpdateZendeskTicketTaskParams defines model for update_zendesk_ticket_task_params.
type UpdateZendeskTicketTaskParams struct {
	// Completion The completion id and display name
	Completion *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion,omitempty"`

	// CustomFieldsMapping Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// Priority The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// Subject The ticket subject
	Subject *string `json:"subject,omitempty"`

	// Tags The ticket tags
	Tags     *string                                `json:"tags,omitempty"`
	TaskType *UpdateZendeskTicketTaskParamsTaskType `json:"task_type,omitempty"`

	// TicketId The ticket id
	TicketId string `json:"ticket_id"`

	// TicketPayload Additional Zendesk ticket attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON
	TicketPayload *string `json:"ticket_payload"`
}

// UpdateZendeskTicketTaskParamsTaskType defines model for UpdateZendeskTicketTaskParams.TaskType.
type UpdateZendeskTicketTaskParamsTaskType string

// UptimeChartResponse defines model for uptime_chart_response.
type UptimeChartResponse = map[string]interface{}

// User defines model for user.
type User struct {
	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Email The email of the user
	Email string `json:"email"`

	// FullName The full name of the user
	FullName *string `json:"full_name"`

	// FullNameWithTeam The full name with team of the user
	FullNameWithTeam *string `json:"full_name_with_team"`

	// TimeZone Configured time zone
	TimeZone *string `json:"time_zone"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// UserList defines model for user_list.
type UserList struct {
	Data []struct {
		Attributes User `json:"attributes"`

		// Id Unique ID of the user
		Id   string           `json:"id"`
		Type UserListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// UserListDataType defines model for UserList.Data.Type.
type UserListDataType string

// UserNotificationRule defines model for user_notification_rule.
type UserNotificationRule struct {
	// CreatedAt Date of creation
	CreatedAt *string `json:"created_at,omitempty"`

	// Delay Delay after which rule gets triggered
	Delay *int `json:"delay"`

	// EnabledContactTypes Contact types for which notification needs to be enabled
	EnabledContactTypes *[]UserNotificationRuleEnabledContactTypes `json:"enabled_contact_types,omitempty"`

	// Position Position of the rule
	Position *int `json:"position"`

	// UpdatedAt Date of last update
	UpdatedAt *string `json:"updated_at,omitempty"`

	// UserCallNumberId User phone number to which notification to be sent
	UserCallNumberId *string `json:"user_call_number_id"`

	// UserDeviceId User device to which notification to be sent
	UserDeviceId *string `json:"user_device_id"`

	// UserEmailAddressId User email address to which notification to be sent
	UserEmailAddressId *string `json:"user_email_address_id"`
	UserId             *int    `json:"user_id,omitempty"`

	// UserSmsNumberId User sms number to which notification to be sent
	UserSmsNumberId *string `json:"user_sms_number_id"`
}

// UserNotificationRuleEnabledContactTypes defines model for UserNotificationRule.EnabledContactTypes.
type UserNotificationRuleEnabledContactTypes string

// UserNotificationRuleList defines model for user_notification_rule_list.
type UserNotificationRuleList struct {
	Data []struct {
		Attributes UserNotificationRule `json:"attributes"`

		// Id Unique ID of the rule
		Id   string                           `json:"id"`
		Type UserNotificationRuleListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// UserNotificationRuleListDataType defines model for UserNotificationRuleList.Data.Type.
type UserNotificationRuleListDataType string

// UserNotificationRuleResponse defines model for user_notification_rule_response.
type UserNotificationRuleResponse struct {
	Data struct {
		Attributes UserNotificationRule `json:"attributes"`

		// Id Unique ID of the rule
		Id   string                               `json:"id"`
		Type UserNotificationRuleResponseDataType `json:"type"`
	} `json:"data"`
}

// UserNotificationRuleResponseDataType defines model for UserNotificationRuleResponse.Data.Type.
type UserNotificationRuleResponseDataType string

// UserResponse defines model for user_response.
type UserResponse struct {
	Data struct {
		Attributes User `json:"attributes"`

		// Id Unique ID of the user
		Id   string               `json:"id"`
		Type UserResponseDataType `json:"type"`
	} `json:"data"`
}

// UserResponseDataType defines model for UserResponse.Data.Type.
type UserResponseDataType string

// WebhooksDelivery defines model for webhooks_delivery.
type WebhooksDelivery struct {
	// CreatedAt Date of creation
	CreatedAt   string  `json:"created_at"`
	DeliveredAt *string `json:"delivered_at"`
	EndpointId  string  `json:"endpoint_id"`
	Payload     string  `json:"payload"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`
}

// WebhooksDeliveryList defines model for webhooks_delivery_list.
type WebhooksDeliveryList struct {
	Data []struct {
		Attributes WebhooksDelivery `json:"attributes"`

		// Id Unique ID of the webhooks_delivery
		Id   string                       `json:"id"`
		Type WebhooksDeliveryListDataType `json:"type"`
	} `json:"data"`
	Links *Links `json:"links,omitempty"`
}

// WebhooksDeliveryListDataType defines model for WebhooksDeliveryList.Data.Type.
type WebhooksDeliveryListDataType string

// WebhooksDeliveryResponse defines model for webhooks_delivery_response.
type WebhooksDeliveryResponse struct {
	Data struct {
		Attributes WebhooksDelivery `json:"attributes"`

		// Id Unique ID of the webhooks_delivery
		Id   string                           `json:"id"`
		Type WebhooksDeliveryResponseDataType `json:"type"`
	} `json:"data"`
}

// WebhooksDeliveryResponseDataType defines model for WebhooksDeliveryResponse.Data.Type.
type WebhooksDeliveryResponseDataType string

// WebhooksEndpoint defines model for webhooks_endpoint.
type WebhooksEndpoint struct {
	// CreatedAt Date of creation
	CreatedAt  string                       `json:"created_at"`
	Enabled    bool                         `json:"enabled"`
	EventTypes []WebhooksEndpointEventTypes `json:"event_types"`

	// Name The name of the endpoint
	Name string `json:"name"`

	// Secret The webhook signing secret used to verify webhook requests.
	Secret string `json:"secret"`

	// Slug The slug of the endpoint
	Slug string `json:"slug"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`

	// Url The URL of the endpoint.
	Url string `json:"url"`
}

// WebhooksEndpointEventTypes defines model for WebhooksEndpoint.EventTypes.
type WebhooksEndpointEventTypes string

// WebhooksEndpointList defines model for webhooks_endpoint_list.
type WebhooksEndpointList struct {
	Data []struct {
		Attributes WebhooksEndpoint `json:"attributes"`

		// Id Unique ID of the webhooks_endpoint
		Id   string                       `json:"id"`
		Type WebhooksEndpointListDataType `json:"type"`
	} `json:"data"`
	Links *Links `json:"links,omitempty"`
}

// WebhooksEndpointListDataType defines model for WebhooksEndpointList.Data.Type.
type WebhooksEndpointListDataType string

// WebhooksEndpointResponse defines model for webhooks_endpoint_response.
type WebhooksEndpointResponse struct {
	Data struct {
		Attributes WebhooksEndpoint `json:"attributes"`

		// Id Unique ID of the webhooks_endpoint
		Id   string                           `json:"id"`
		Type WebhooksEndpointResponseDataType `json:"type"`
	} `json:"data"`
}

// WebhooksEndpointResponseDataType defines model for WebhooksEndpointResponse.Data.Type.
type WebhooksEndpointResponseDataType string

// Workflow defines model for workflow.
type Workflow struct {
	CauseIds *[]string `json:"cause_ids,omitempty"`

	// Command Workflow command
	Command *string `json:"command"`

	// CommandFeedbackEnabled This will notify you back when the workflow is starting
	CommandFeedbackEnabled *bool `json:"command_feedback_enabled"`

	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Description The description of the workflow
	Description      *string   `json:"description"`
	Enabled          *bool     `json:"enabled,omitempty"`
	EnvironmentIds   *[]string `json:"environment_ids,omitempty"`
	FunctionalityIds *[]string `json:"functionality_ids,omitempty"`
	GroupIds         *[]string `json:"group_ids,omitempty"`
	IncidentRoleIds  *[]string `json:"incident_role_ids,omitempty"`
	IncidentTypeIds  *[]string `json:"incident_type_ids,omitempty"`

	// Locked Restricts workflow edits to admins when turned on. Only admins can set this field.
	Locked *bool `json:"locked,omitempty"`

	// Name The title of the workflow
	Name string `json:"name"`

	// Position The order which the workflow should run with other workflows.
	Position *int `json:"position,omitempty"`

	// RepeatEveryDuration Repeat workflow every duration
	RepeatEveryDuration *string             `json:"repeat_every_duration"`
	RepeatOn            *[]WorkflowRepeatOn `json:"repeat_on"`
	ServiceIds          *[]string           `json:"service_ids,omitempty"`
	SeverityIds         *[]string           `json:"severity_ids,omitempty"`

	// Slug The slug of the workflow
	Slug          *string                 `json:"slug,omitempty"`
	TriggerParams *Workflow_TriggerParams `json:"trigger_params,omitempty"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`

	// Wait Wait this duration before executing
	Wait *string `json:"wait"`

	// WorkflowGroupId The group this workflow belongs to.
	WorkflowGroupId *string `json:"workflow_group_id"`
}

// WorkflowRepeatOn Repeat on weekdays
type WorkflowRepeatOn string

// Workflow_TriggerParams defines model for Workflow.TriggerParams.
type Workflow_TriggerParams struct {
	union json.RawMessage
}

// WorkflowCustomFieldSelection defines model for workflow_custom_field_selection.
type WorkflowCustomFieldSelection struct {
	// CustomFieldId The custom field for this selection
	CustomFieldId int `json:"custom_field_id"`

	// IncidentCondition The trigger condition
	IncidentCondition WorkflowCustomFieldSelectionIncidentCondition `json:"incident_condition"`
	SelectedOptionIds []int                                         `json:"selected_option_ids"`
	Values            *[]string                                     `json:"values,omitempty"`

	// WorkflowId The workflow for this selection
	WorkflowId string `json:"workflow_id"`
}

// WorkflowCustomFieldSelectionIncidentCondition The trigger condition
type WorkflowCustomFieldSelectionIncidentCondition string

// WorkflowCustomFieldSelectionList defines model for workflow_custom_field_selection_list.
type WorkflowCustomFieldSelectionList struct {
	Data []struct {
		Attributes WorkflowCustomFieldSelection `json:"attributes"`

		// Id Unique ID of the workflow_custom_field_selection
		Id   string                                   `json:"id"`
		Type WorkflowCustomFieldSelectionListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// WorkflowCustomFieldSelectionListDataType defines model for WorkflowCustomFieldSelectionList.Data.Type.
type WorkflowCustomFieldSelectionListDataType string

// WorkflowCustomFieldSelectionResponse defines model for workflow_custom_field_selection_response.
type WorkflowCustomFieldSelectionResponse struct {
	Data struct {
		Attributes WorkflowCustomFieldSelection `json:"attributes"`

		// Id Unique ID of the workflow_custom_field_selection
		Id   string                                       `json:"id"`
		Type WorkflowCustomFieldSelectionResponseDataType `json:"type"`
	} `json:"data"`
}

// WorkflowCustomFieldSelectionResponseDataType defines model for WorkflowCustomFieldSelectionResponse.Data.Type.
type WorkflowCustomFieldSelectionResponseDataType string

// WorkflowFormFieldCondition defines model for workflow_form_field_condition.
type WorkflowFormFieldCondition struct {
	// FormFieldId The custom field for this condition
	FormFieldId string `json:"form_field_id"`

	// IncidentCondition The trigger condition
	IncidentCondition        WorkflowFormFieldConditionIncidentCondition `json:"incident_condition"`
	SelectedCatalogEntityIds []string                                    `json:"selected_catalog_entity_ids"`
	SelectedFunctionalityIds *[]string                                   `json:"selected_functionality_ids,omitempty"`
	SelectedGroupIds         *[]string                                   `json:"selected_group_ids,omitempty"`
	SelectedOptionIds        []string                                    `json:"selected_option_ids"`
	SelectedServiceIds       *[]string                                   `json:"selected_service_ids,omitempty"`
	SelectedUserIds          []int                                       `json:"selected_user_ids"`
	Values                   *[]string                                   `json:"values,omitempty"`

	// WorkflowId The workflow for this condition
	WorkflowId string `json:"workflow_id"`
}

// WorkflowFormFieldConditionIncidentCondition The trigger condition
type WorkflowFormFieldConditionIncidentCondition string

// WorkflowFormFieldConditionList defines model for workflow_form_field_condition_list.
type WorkflowFormFieldConditionList struct {
	Data []struct {
		Attributes WorkflowFormFieldCondition `json:"attributes"`

		// Id Unique ID of the workflow_form_field_condition
		Id   string                                 `json:"id"`
		Type WorkflowFormFieldConditionListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// WorkflowFormFieldConditionListDataType defines model for WorkflowFormFieldConditionList.Data.Type.
type WorkflowFormFieldConditionListDataType string

// WorkflowFormFieldConditionResponse defines model for workflow_form_field_condition_response.
type WorkflowFormFieldConditionResponse struct {
	Data struct {
		Attributes WorkflowFormFieldCondition `json:"attributes"`

		// Id Unique ID of the workflow_form_field_condition
		Id   string                                     `json:"id"`
		Type WorkflowFormFieldConditionResponseDataType `json:"type"`
	} `json:"data"`
}

// WorkflowFormFieldConditionResponseDataType defines model for WorkflowFormFieldConditionResponse.Data.Type.
type WorkflowFormFieldConditionResponseDataType string

// WorkflowGroup defines model for workflow_group.
type WorkflowGroup struct {
	// Description A description of the workflow group.
	Description *string `json:"description"`

	// Expanded Whether the group is expanded or collapsed.
	Expanded *bool `json:"expanded,omitempty"`

	// Icon An emoji icon displayed next to the workflow group.
	Icon *string `json:"icon,omitempty"`

	// Kind The kind of the workflow group
	Kind *WorkflowGroupKind `json:"kind"`

	// Name The name of the workflow group.
	Name string `json:"name"`

	// Position The position of the workflow group
	Position int `json:"position"`

	// Slug The slug of the workflow group.
	Slug *string `json:"slug,omitempty"`
}

// WorkflowGroupKind The kind of the workflow group
type WorkflowGroupKind string

// WorkflowGroupList defines model for workflow_group_list.
type WorkflowGroupList struct {
	Data []struct {
		Attributes WorkflowGroup `json:"attributes"`

		// Id Unique ID of the workflow group
		Id   string                    `json:"id"`
		Type WorkflowGroupListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// WorkflowGroupListDataType defines model for WorkflowGroupList.Data.Type.
type WorkflowGroupListDataType string

// WorkflowGroupResponse defines model for workflow_group_response.
type WorkflowGroupResponse struct {
	Data struct {
		Attributes WorkflowGroup `json:"attributes"`

		// Id Unique ID of the workflow group
		Id   string                        `json:"id"`
		Type WorkflowGroupResponseDataType `json:"type"`
	} `json:"data"`
}

// WorkflowGroupResponseDataType defines model for WorkflowGroupResponse.Data.Type.
type WorkflowGroupResponseDataType string

// WorkflowList defines model for workflow_list.
type WorkflowList struct {
	Data []struct {
		Attributes Workflow `json:"attributes"`

		// Id Unique ID of the workflow
		Id   string               `json:"id"`
		Type WorkflowListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// WorkflowListDataType defines model for WorkflowList.Data.Type.
type WorkflowListDataType string

// WorkflowResponse defines model for workflow_response.
type WorkflowResponse struct {
	Data struct {
		Attributes Workflow `json:"attributes"`

		// Id Unique ID of the workflow
		Id   string                   `json:"id"`
		Type WorkflowResponseDataType `json:"type"`
	} `json:"data"`
}

// WorkflowResponseDataType defines model for WorkflowResponse.Data.Type.
type WorkflowResponseDataType string

// WorkflowRun defines model for workflow_run.
type WorkflowRun struct {
	ActionItemId  *string                 `json:"action_item_id"`
	AlertId       *string                 `json:"alert_id"`
	CanceledAt    *string                 `json:"canceled_at"`
	CompletedAt   *string                 `json:"completed_at"`
	Context       *map[string]interface{} `json:"context,omitempty"`
	FailedAt      *string                 `json:"failed_at"`
	IncidentId    *string                 `json:"incident_id"`
	PostMortemId  *string                 `json:"post_mortem_id"`
	PulseId       *string                 `json:"pulse_id"`
	StartedAt     *string                 `json:"started_at"`
	Status        WorkflowRunStatus       `json:"status"`
	StatusMessage *string                 `json:"status_message"`
	TriggeredBy   WorkflowRunTriggeredBy  `json:"triggered_by"`
	WorkflowId    string                  `json:"workflow_id"`
}

// WorkflowRunStatus defines model for WorkflowRun.Status.
type WorkflowRunStatus string

// WorkflowRunTriggeredBy defines model for WorkflowRun.TriggeredBy.
type WorkflowRunTriggeredBy string

// WorkflowRunResponse defines model for workflow_run_response.
type WorkflowRunResponse struct {
	Data struct {
		Attributes WorkflowRun `json:"attributes"`

		// Id Unique ID of the workflow run
		Id   string                      `json:"id"`
		Type WorkflowRunResponseDataType `json:"type"`
	} `json:"data"`
}

// WorkflowRunResponseDataType defines model for WorkflowRunResponse.Data.Type.
type WorkflowRunResponseDataType string

// WorkflowRunsList defines model for workflow_runs_list.
type WorkflowRunsList struct {
	Data []struct {
		Attributes WorkflowRun `json:"attributes"`

		// Id Unique ID of the workflow run
		Id   string                   `json:"id"`
		Type WorkflowRunsListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// WorkflowRunsListDataType defines model for WorkflowRunsList.Data.Type.
type WorkflowRunsListDataType string

// WorkflowTask defines model for workflow_task.
type WorkflowTask struct {
	// CreatedAt Date of creation
	CreatedAt string `json:"created_at"`

	// Enabled Enable/disable workflow task
	Enabled bool `json:"enabled"`

	// Name Name of the workflow task
	Name *string `json:"name,omitempty"`

	// Position The position of the workflow task
	Position int `json:"position"`

	// SkipOnFailure Skip workflow task if any failures
	SkipOnFailure bool                    `json:"skip_on_failure"`
	TaskParams    WorkflowTask_TaskParams `json:"task_params"`

	// UpdatedAt Date of last update
	UpdatedAt string `json:"updated_at"`

	// WorkflowId The ID of the parent workflow
	WorkflowId string `json:"workflow_id"`
}

// WorkflowTask_TaskParams defines model for WorkflowTask.TaskParams.
type WorkflowTask_TaskParams struct {
	union json.RawMessage
}

// WorkflowTaskList defines model for workflow_task_list.
type WorkflowTaskList struct {
	Data []struct {
		Attributes WorkflowTask `json:"attributes"`

		// Id Unique ID of the workflow task
		Id   string                   `json:"id"`
		Type WorkflowTaskListDataType `json:"type"`
	} `json:"data"`
	Links Links `json:"links"`
}

// WorkflowTaskListDataType defines model for WorkflowTaskList.Data.Type.
type WorkflowTaskListDataType string

// WorkflowTaskResponse defines model for workflow_task_response.
type WorkflowTaskResponse struct {
	Data struct {
		Attributes WorkflowTask `json:"attributes"`

		// Id Unique ID of the workflow task
		Id   string                       `json:"id"`
		Type WorkflowTaskResponseDataType `json:"type"`
	} `json:"data"`
}

// WorkflowTaskResponseDataType defines model for WorkflowTaskResponse.Data.Type.
type WorkflowTaskResponseDataType string

// ListAllIncidentActionItemsParams defines parameters for ListAllIncidentActionItems.
type ListAllIncidentActionItemsParams struct {
	Include                    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber                 *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize                   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterKind                 *string `form:"filter[kind],omitempty" json:"filter[kind],omitempty"`
	FilterPriority             *string `form:"filter[priority],omitempty" json:"filter[priority],omitempty"`
	FilterStatus               *string `form:"filter[status],omitempty" json:"filter[status],omitempty"`
	FilterIncidentStatus       *string `form:"filter[incident_status],omitempty" json:"filter[incident_status],omitempty"`
	FilterIncidentCreatedAtGt  *string `form:"filter[incident_created_at][gt],omitempty" json:"filter[incident_created_at][gt],omitempty"`
	FilterIncidentCreatedAtGte *string `form:"filter[incident_created_at][gte],omitempty" json:"filter[incident_created_at][gte],omitempty"`
	FilterIncidentCreatedAtLt  *string `form:"filter[incident_created_at][lt],omitempty" json:"filter[incident_created_at][lt],omitempty"`
	FilterIncidentCreatedAtLte *string `form:"filter[incident_created_at][lte],omitempty" json:"filter[incident_created_at][lte],omitempty"`
	FilterDueDateGt            *string `form:"filter[due_date][gt],omitempty" json:"filter[due_date][gt],omitempty"`
	FilterDueDateGte           *string `form:"filter[due_date][gte],omitempty" json:"filter[due_date][gte],omitempty"`
	FilterDueDateLt            *string `form:"filter[due_date][lt],omitempty" json:"filter[due_date][lt],omitempty"`
	FilterDueDateLte           *string `form:"filter[due_date][lte],omitempty" json:"filter[due_date][lte],omitempty"`
	FilterCreatedAtGt          *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte         *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt          *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte         *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort                       *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListAlertGroupsParams defines parameters for ListAlertGroups.
type ListAlertGroupsParams struct {
	Include *string `form:"include,omitempty" json:"include,omitempty"`
}

// ListAlertSourcesParams defines parameters for ListAlertSources.
type ListAlertSourcesParams struct {
	Include           *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber        *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize          *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch      *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterStatuses    *string `form:"filter[statuses],omitempty" json:"filter[statuses],omitempty"`
	FilterSourceTypes *string `form:"filter[source_types],omitempty" json:"filter[source_types],omitempty"`
	Sort              *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListAlertUrgenciesParams defines parameters for ListAlertUrgencies.
type ListAlertUrgenciesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListAlertsParams defines parameters for ListAlerts.
type ListAlertsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListAuditsParams defines parameters for ListAudits.
type ListAuditsParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	FilterUserId       *string `form:"filter[user_id],omitempty" json:"filter[user_id],omitempty"`
	FilterApiKeyId     *string `form:"filter[api_key_id],omitempty" json:"filter[api_key_id],omitempty"`
	FilterSource       *string `form:"filter[source],omitempty" json:"filter[source],omitempty"`
	FilterItemType     *string `form:"filter[item_type],omitempty" json:"filter[item_type],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListAuthorizationsParams defines parameters for ListAuthorizations.
type ListAuthorizationsParams struct {
	Include                *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber             *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize               *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterAuthorizableId   *string `form:"filter[authorizable_id],omitempty" json:"filter[authorizable_id],omitempty"`
	FilterAuthorizableType *string `form:"filter[authorizable_type],omitempty" json:"filter[authorizable_type],omitempty"`
	FilterGranteeId        *string `form:"filter[grantee_id],omitempty" json:"filter[grantee_id],omitempty"`
	FilterGranteeType      *string `form:"filter[grantee_type],omitempty" json:"filter[grantee_type],omitempty"`
	FilterCreatedAtGt      *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte     *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt      *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte     *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort                   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListCatalogEntityPropertiesParams defines parameters for ListCatalogEntityProperties.
type ListCatalogEntityPropertiesParams struct {
	// Include comma separated if needed. eg: catalog_entity,catalog_field
	Include *ListCatalogEntityPropertiesParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Sort comma separated if needed. eg: created_at,updated_at
	Sort                 *ListCatalogEntityPropertiesParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
	PageNumber           *int                                   `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize             *int                                   `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterCatalogFieldId *string                                `form:"filter[catalog_field_id],omitempty" json:"filter[catalog_field_id],omitempty"`
	FilterKey            *string                                `form:"filter[key],omitempty" json:"filter[key],omitempty"`
	FilterCreatedAtGt    *string                                `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte   *string                                `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt    *string                                `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte   *string                                `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
}

// ListCatalogEntityPropertiesParamsInclude defines parameters for ListCatalogEntityProperties.
type ListCatalogEntityPropertiesParamsInclude string

// ListCatalogEntityPropertiesParamsSort defines parameters for ListCatalogEntityProperties.
type ListCatalogEntityPropertiesParamsSort string

// GetCatalogEntityParams defines parameters for GetCatalogEntity.
type GetCatalogEntityParams struct {
	// Include comma separated if needed. eg: catalog,properties
	Include *GetCatalogEntityParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetCatalogEntityParamsInclude defines parameters for GetCatalogEntity.
type GetCatalogEntityParamsInclude string

// GetCatalogEntityPropertyParams defines parameters for GetCatalogEntityProperty.
type GetCatalogEntityPropertyParams struct {
	// Include comma separated if needed. eg: catalog_entity,catalog_field
	Include *GetCatalogEntityPropertyParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetCatalogEntityPropertyParamsInclude defines parameters for GetCatalogEntityProperty.
type GetCatalogEntityPropertyParamsInclude string

// GetCatalogFieldParams defines parameters for GetCatalogField.
type GetCatalogFieldParams struct {
	// Include comma separated if needed. eg: catalog
	Include *GetCatalogFieldParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetCatalogFieldParamsInclude defines parameters for GetCatalogField.
type GetCatalogFieldParamsInclude string

// ListCatalogsParams defines parameters for ListCatalogs.
type ListCatalogsParams struct {
	// Include comma separated if needed. eg: fields,entities
	Include *ListCatalogsParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Sort comma separated if needed. eg: created_at,updated_at
	Sort               *ListCatalogsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
	PageNumber         *int                    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int                    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSlug         *string                 `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string                 `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterCreatedAtGt  *string                 `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string                 `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string                 `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string                 `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
}

// ListCatalogsParamsInclude defines parameters for ListCatalogs.
type ListCatalogsParamsInclude string

// ListCatalogsParamsSort defines parameters for ListCatalogs.
type ListCatalogsParamsSort string

// ListCatalogEntitiesParams defines parameters for ListCatalogEntities.
type ListCatalogEntitiesParams struct {
	// Include comma separated if needed. eg: catalog,properties
	Include *ListCatalogEntitiesParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Sort comma separated if needed. eg: created_at,updated_at
	Sort               *ListCatalogEntitiesParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
	PageNumber         *int                           `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int                           `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSlug         *string                        `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string                        `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterCreatedAtGt  *string                        `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string                        `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string                        `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string                        `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
}

// ListCatalogEntitiesParamsInclude defines parameters for ListCatalogEntities.
type ListCatalogEntitiesParamsInclude string

// ListCatalogEntitiesParamsSort defines parameters for ListCatalogEntities.
type ListCatalogEntitiesParamsSort string

// ListCatalogFieldsParams defines parameters for ListCatalogFields.
type ListCatalogFieldsParams struct {
	// Include comma separated if needed. eg: catalog
	Include *ListCatalogFieldsParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Sort comma separated if needed. eg: created_at,updated_at
	Sort               *ListCatalogFieldsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
	PageNumber         *int                         `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int                         `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSlug         *string                      `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string                      `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterKind         *string                      `form:"filter[kind],omitempty" json:"filter[kind],omitempty"`
	FilterCreatedAtGt  *string                      `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string                      `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string                      `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string                      `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
}

// ListCatalogFieldsParamsInclude defines parameters for ListCatalogFields.
type ListCatalogFieldsParamsInclude string

// ListCatalogFieldsParamsSort defines parameters for ListCatalogFields.
type ListCatalogFieldsParamsSort string

// ListCausesParams defines parameters for ListCauses.
type ListCausesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
}

// ListCustomFieldsParams defines parameters for ListCustomFields.
type ListCustomFieldsParams struct {
	// Include comma separated if needed. eg: options
	Include *ListCustomFieldsParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Sort comma separated if needed. eg: created_at,updated_at
	Sort               *ListCustomFieldsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
	PageNumber         *int                        `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int                        `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSlug         *string                     `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterLabel        *string                     `form:"filter[label],omitempty" json:"filter[label],omitempty"`
	FilterKind         *string                     `form:"filter[kind],omitempty" json:"filter[kind],omitempty"`
	FilterEnabled      *bool                       `form:"filter[enabled],omitempty" json:"filter[enabled],omitempty"`
	FilterCreatedAtGt  *string                     `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string                     `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string                     `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string                     `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
}

// ListCustomFieldsParamsInclude defines parameters for ListCustomFields.
type ListCustomFieldsParamsInclude string

// ListCustomFieldsParamsSort defines parameters for ListCustomFields.
type ListCustomFieldsParamsSort string

// ListCustomFieldOptionsParams defines parameters for ListCustomFieldOptions.
type ListCustomFieldOptionsParams struct {
	Include     *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber  *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize    *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterValue *string `form:"filter[value],omitempty" json:"filter[value],omitempty"`
	FilterColor *string `form:"filter[color],omitempty" json:"filter[color],omitempty"`
}

// GetCustomFieldParams defines parameters for GetCustomField.
type GetCustomFieldParams struct {
	// Include comma separated if needed. eg: options
	Include *GetCustomFieldParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetCustomFieldParamsInclude defines parameters for GetCustomField.
type GetCustomFieldParamsInclude string

// ListCustomFormsParams defines parameters for ListCustomForms.
type ListCustomFormsParams struct {
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterCommand      *string `form:"filter[command],omitempty" json:"filter[command],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetDashboardPanelParams defines parameters for GetDashboardPanel.
type GetDashboardPanelParams struct {
	// Range Date range for panel data, ISO8601 timestamps separated by the word 'to'. Ex: '2022-06-19T11:28:46.029Z to 2022-07-18T21:58:46.029Z'.
	Range *string `form:"range,omitempty" json:"range,omitempty"`

	// Period The time period to group data by. Accepts 'day', 'week', and 'month'
	Period *string `form:"period,omitempty" json:"period,omitempty"`

	// TimeZone The time zone to use for period
	TimeZone *string `form:"time_zone,omitempty" json:"time_zone,omitempty"`
}

// ListDashboardsParams defines parameters for ListDashboards.
type ListDashboardsParams struct {
	// Include comma separated if needed. eg: panels
	Include    *ListDashboardsParamsInclude `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int                         `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int                         `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListDashboardsParamsInclude defines parameters for ListDashboards.
type ListDashboardsParamsInclude string

// ListDashboardPanelsParams defines parameters for ListDashboardPanels.
type ListDashboardPanelsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// GetDashboardParams defines parameters for GetDashboard.
type GetDashboardParams struct {
	// Include comma separated if needed. eg: panels
	Include *GetDashboardParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetDashboardParamsInclude defines parameters for GetDashboard.
type GetDashboardParamsInclude string

// ListEnvironmentsParams defines parameters for ListEnvironments.
type ListEnvironmentsParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterColor        *string `form:"filter[color],omitempty" json:"filter[color],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListEscalationLevelsPathsParams defines parameters for ListEscalationLevelsPaths.
type ListEscalationLevelsPathsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// GetEscalationPathParams defines parameters for GetEscalationPath.
type GetEscalationPathParams struct {
	// Include comma separated if needed. eg: escalation_policy_levels
	Include *GetEscalationPathParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetEscalationPathParamsInclude defines parameters for GetEscalationPath.
type GetEscalationPathParamsInclude string

// ListEscalationPoliciesParams defines parameters for ListEscalationPolicies.
type ListEscalationPoliciesParams struct {
	// Include comma separated if needed. eg: escalation_policy_levels,escalation_paths
	Include    *ListEscalationPoliciesParamsInclude `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int                                 `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int                                 `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListEscalationPoliciesParamsInclude defines parameters for ListEscalationPolicies.
type ListEscalationPoliciesParamsInclude string

// ListEscalationLevelsPoliciesParams defines parameters for ListEscalationLevelsPolicies.
type ListEscalationLevelsPoliciesParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListEscalationPathsParams defines parameters for ListEscalationPaths.
type ListEscalationPathsParams struct {
	// Include comma separated if needed. eg: escalation_policy_levels
	Include    *ListEscalationPathsParamsInclude `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int                              `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int                              `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListEscalationPathsParamsInclude defines parameters for ListEscalationPaths.
type ListEscalationPathsParamsInclude string

// GetEscalationPolicyParams defines parameters for GetEscalationPolicy.
type GetEscalationPolicyParams struct {
	// Include comma separated if needed. eg: escalation_policy_levels,escalation_paths
	Include *GetEscalationPolicyParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetEscalationPolicyParamsInclude defines parameters for GetEscalationPolicy.
type GetEscalationPolicyParamsInclude string

// ListIncidentEventFunctionalitiesParams defines parameters for ListIncidentEventFunctionalities.
type ListIncidentEventFunctionalitiesParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListIncidentEventServicesParams defines parameters for ListIncidentEventServices.
type ListIncidentEventServicesParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListFormFieldPlacementConditionsParams defines parameters for ListFormFieldPlacementConditions.
type ListFormFieldPlacementConditionsParams struct {
	Include           *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber        *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize          *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterFormFieldId *string `form:"filter[form_field_id],omitempty" json:"filter[form_field_id],omitempty"`
}

// ListFormFieldsParams defines parameters for ListFormFields.
type ListFormFieldsParams struct {
	// Include comma separated if needed. eg: options,positions
	Include            *ListFormFieldsParamsInclude `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int                         `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int                         `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string                      `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterSlug         *string                      `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string                      `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterKind         *string                      `form:"filter[kind],omitempty" json:"filter[kind],omitempty"`
	FilterEnabled      *bool                        `form:"filter[enabled],omitempty" json:"filter[enabled],omitempty"`
	FilterCreatedAtGt  *string                      `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string                      `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string                      `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string                      `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
}

// ListFormFieldsParamsInclude defines parameters for ListFormFields.
type ListFormFieldsParamsInclude string

// ListFormFieldOptionsParams defines parameters for ListFormFieldOptions.
type ListFormFieldOptionsParams struct {
	Include     *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber  *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize    *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterValue *string `form:"filter[value],omitempty" json:"filter[value],omitempty"`
	FilterColor *string `form:"filter[color],omitempty" json:"filter[color],omitempty"`
}

// ListFormFieldPlacementsParams defines parameters for ListFormFieldPlacements.
type ListFormFieldPlacementsParams struct {
	Include           *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber        *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize          *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterFormFieldId *string `form:"filter[form_field_id],omitempty" json:"filter[form_field_id],omitempty"`
}

// ListFormFieldPositionsParams defines parameters for ListFormFieldPositions.
type ListFormFieldPositionsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterForm *string `form:"filter[form],omitempty" json:"filter[form],omitempty"`
}

// GetFormFieldParams defines parameters for GetFormField.
type GetFormFieldParams struct {
	// Include comma separated if needed. eg: options,positions
	Include *GetFormFieldParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetFormFieldParamsInclude defines parameters for GetFormField.
type GetFormFieldParamsInclude string

// ListFormSetsParams defines parameters for ListFormSets.
type ListFormSetsParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterIsDefault    *bool   `form:"filter[is_default],omitempty" json:"filter[is_default],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
}

// ListFormSetConditionsParams defines parameters for ListFormSetConditions.
type ListFormSetConditionsParams struct {
	Include           *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber        *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize          *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterFormFieldId *string `form:"filter[form_field_id],omitempty" json:"filter[form_field_id],omitempty"`
}

// ListFunctionalitiesParams defines parameters for ListFunctionalities.
type ListFunctionalitiesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterBackstageId  *string `form:"filter[backstage_id],omitempty" json:"filter[backstage_id],omitempty"`
	FilterExternalId   *string `form:"filter[external_id],omitempty" json:"filter[external_id],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetFunctionalityIncidentsChartParams defines parameters for GetFunctionalityIncidentsChart.
type GetFunctionalityIncidentsChartParams struct {
	Period string `form:"period" json:"period"`
}

// GetFunctionalityUptimeChartParams defines parameters for GetFunctionalityUptimeChart.
type GetFunctionalityUptimeChartParams struct {
	Period *string `form:"period,omitempty" json:"period,omitempty"`
}

// ListHeartbeatsParams defines parameters for ListHeartbeats.
type ListHeartbeatsParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
}

// ListIncidentPermissionSetsParams defines parameters for ListIncidentPermissionSets.
type ListIncidentPermissionSetsParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListIncidentPermissionSetBooleansParams defines parameters for ListIncidentPermissionSetBooleans.
type ListIncidentPermissionSetBooleansParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterKind         *string `form:"filter[kind],omitempty" json:"filter[kind],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListIncidentPermissionSetResourcesParams defines parameters for ListIncidentPermissionSetResources.
type ListIncidentPermissionSetResourcesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterKind         *string `form:"filter[kind],omitempty" json:"filter[kind],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListIncidentRolesParams defines parameters for ListIncidentRoles.
type ListIncidentRolesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterEnabled      *bool   `form:"filter[enabled],omitempty" json:"filter[enabled],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListIncidentRoleTasksParams defines parameters for ListIncidentRoleTasks.
type ListIncidentRoleTasksParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// GetIncidentSubStatusParams defines parameters for GetIncidentSubStatus.
type GetIncidentSubStatusParams struct {
	// Include comma separated if needed. eg: sub_status,assigned_by_user
	Include *GetIncidentSubStatusParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetIncidentSubStatusParamsInclude defines parameters for GetIncidentSubStatus.
type GetIncidentSubStatusParamsInclude string

// ListIncidentTypesParams defines parameters for ListIncidentTypes.
type ListIncidentTypesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterColor        *string `form:"filter[color],omitempty" json:"filter[color],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListIncidentsParams defines parameters for ListIncidents.
type ListIncidentsParams struct {
	PageNumber                         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize                           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch                       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterKind                         *string `form:"filter[kind],omitempty" json:"filter[kind],omitempty"`
	FilterStatus                       *string `form:"filter[status],omitempty" json:"filter[status],omitempty"`
	FilterPrivate                      *bool   `form:"filter[private],omitempty" json:"filter[private],omitempty"`
	FilterUserId                       *int    `form:"filter[user_id],omitempty" json:"filter[user_id],omitempty"`
	FilterSeverity                     *string `form:"filter[severity],omitempty" json:"filter[severity],omitempty"`
	FilterSeverityId                   *string `form:"filter[severity_id],omitempty" json:"filter[severity_id],omitempty"`
	FilterLabels                       *string `form:"filter[labels],omitempty" json:"filter[labels],omitempty"`
	FilterTypes                        *string `form:"filter[types],omitempty" json:"filter[types],omitempty"`
	FilterTypeIds                      *string `form:"filter[type_ids],omitempty" json:"filter[type_ids],omitempty"`
	FilterEnvironments                 *string `form:"filter[environments],omitempty" json:"filter[environments],omitempty"`
	FilterEnvironmentIds               *string `form:"filter[environment_ids],omitempty" json:"filter[environment_ids],omitempty"`
	FilterFunctionalities              *string `form:"filter[functionalities],omitempty" json:"filter[functionalities],omitempty"`
	FilterFunctionalityIds             *string `form:"filter[functionality_ids],omitempty" json:"filter[functionality_ids],omitempty"`
	FilterServices                     *string `form:"filter[services],omitempty" json:"filter[services],omitempty"`
	FilterServiceIds                   *string `form:"filter[service_ids],omitempty" json:"filter[service_ids],omitempty"`
	FilterTeams                        *string `form:"filter[teams],omitempty" json:"filter[teams],omitempty"`
	FilterTeamIds                      *string `form:"filter[team_ids],omitempty" json:"filter[team_ids],omitempty"`
	FilterCause                        *string `form:"filter[cause],omitempty" json:"filter[cause],omitempty"`
	FilterCauseIds                     *string `form:"filter[cause_ids],omitempty" json:"filter[cause_ids],omitempty"`
	FilterCustomFieldSelectedOptionIds *string `form:"filter[custom_field_selected_option_ids],omitempty" json:"filter[custom_field_selected_option_ids],omitempty"`
	FilterCreatedAtGt                  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte                 *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt                  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte                 *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	FilterUpdatedAtGt                  *string `form:"filter[updated_at][gt],omitempty" json:"filter[updated_at][gt],omitempty"`
	FilterUpdatedAtGte                 *string `form:"filter[updated_at][gte],omitempty" json:"filter[updated_at][gte],omitempty"`
	FilterUpdatedAtLt                  *string `form:"filter[updated_at][lt],omitempty" json:"filter[updated_at][lt],omitempty"`
	FilterUpdatedAtLte                 *string `form:"filter[updated_at][lte],omitempty" json:"filter[updated_at][lte],omitempty"`
	FilterStartedAtGt                  *string `form:"filter[started_at][gt],omitempty" json:"filter[started_at][gt],omitempty"`
	FilterStartedAtGte                 *string `form:"filter[started_at][gte],omitempty" json:"filter[started_at][gte],omitempty"`
	FilterStartedAtLt                  *string `form:"filter[started_at][lt],omitempty" json:"filter[started_at][lt],omitempty"`
	FilterStartedAtLte                 *string `form:"filter[started_at][lte],omitempty" json:"filter[started_at][lte],omitempty"`
	FilterDetectedAtGt                 *string `form:"filter[detected_at][gt],omitempty" json:"filter[detected_at][gt],omitempty"`
	FilterDetectedAtGte                *string `form:"filter[detected_at][gte],omitempty" json:"filter[detected_at][gte],omitempty"`
	FilterDetectedAtLt                 *string `form:"filter[detected_at][lt],omitempty" json:"filter[detected_at][lt],omitempty"`
	FilterDetectedAtLte                *string `form:"filter[detected_at][lte],omitempty" json:"filter[detected_at][lte],omitempty"`
	FilterAcknowledgedAtGt             *string `form:"filter[acknowledged_at][gt],omitempty" json:"filter[acknowledged_at][gt],omitempty"`
	FilterAcknowledgedAtGte            *string `form:"filter[acknowledged_at][gte],omitempty" json:"filter[acknowledged_at][gte],omitempty"`
	FilterAcknowledgedAtLt             *string `form:"filter[acknowledged_at][lt],omitempty" json:"filter[acknowledged_at][lt],omitempty"`
	FilterAcknowledgedAtLte            *string `form:"filter[acknowledged_at][lte],omitempty" json:"filter[acknowledged_at][lte],omitempty"`
	FilterMitigatedAtGt                *string `form:"filter[mitigated_at][gt],omitempty" json:"filter[mitigated_at][gt],omitempty"`
	FilterMitigatedAtGte               *string `form:"filter[mitigated_at][gte],omitempty" json:"filter[mitigated_at][gte],omitempty"`
	FilterMitigatedAtLt                *string `form:"filter[mitigated_at][lt],omitempty" json:"filter[mitigated_at][lt],omitempty"`
	FilterMitigatedAtLte               *string `form:"filter[mitigated_at][lte],omitempty" json:"filter[mitigated_at][lte],omitempty"`
	FilterResolvedAtGt                 *string `form:"filter[resolved_at][gt],omitempty" json:"filter[resolved_at][gt],omitempty"`
	FilterResolvedAtGte                *string `form:"filter[resolved_at][gte],omitempty" json:"filter[resolved_at][gte],omitempty"`
	FilterResolvedAtLt                 *string `form:"filter[resolved_at][lt],omitempty" json:"filter[resolved_at][lt],omitempty"`
	FilterResolvedAtLte                *string `form:"filter[resolved_at][lte],omitempty" json:"filter[resolved_at][lte],omitempty"`
	FilterInTriageAtGt                 *string `form:"filter[in_triage_at][gt],omitempty" json:"filter[in_triage_at][gt],omitempty"`
	FilterInTriageAtGte                *string `form:"filter[in_triage_at][gte],omitempty" json:"filter[in_triage_at][gte],omitempty"`
	FilterInTriageAtLt                 *string `form:"filter[in_triage_at][lt],omitempty" json:"filter[in_triage_at][lt],omitempty"`
	FilterInTriageAtLte                *string `form:"filter[in_triage_at][lte],omitempty" json:"filter[in_triage_at][lte],omitempty"`

	// Sort comma separated if needed. eg: created_at,updated_at
	Sort *ListIncidentsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Include comma separated if needed. eg: sub_statuses,causes,subscribers
	Include *ListIncidentsParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// ListIncidentsParamsSort defines parameters for ListIncidents.
type ListIncidentsParamsSort string

// ListIncidentsParamsInclude defines parameters for ListIncidents.
type ListIncidentsParamsInclude string

// GetIncidentParams defines parameters for GetIncident.
type GetIncidentParams struct {
	// Include comma separated if needed. eg: sub_statuses,causes,subscribers
	Include *GetIncidentParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetIncidentParamsInclude defines parameters for GetIncident.
type GetIncidentParamsInclude string

// ListIncidentActionItemsParams defines parameters for ListIncidentActionItems.
type ListIncidentActionItemsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListIncidentAlertsParams defines parameters for ListIncidentAlerts.
type ListIncidentAlertsParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	FilterSource       *string `form:"filter[source],omitempty" json:"filter[source],omitempty"`
	FilterServices     *string `form:"filter[services],omitempty" json:"filter[services],omitempty"`
	FilterEnvironments *string `form:"filter[environments],omitempty" json:"filter[environments],omitempty"`
	FilterGroups       *string `form:"filter[groups],omitempty" json:"filter[groups],omitempty"`
	FilterLabels       *string `form:"filter[labels],omitempty" json:"filter[labels],omitempty"`
	FilterStartedAtGt  *string `form:"filter[started_at][gt],omitempty" json:"filter[started_at][gt],omitempty"`
	FilterStartedAtGte *string `form:"filter[started_at][gte],omitempty" json:"filter[started_at][gte],omitempty"`
	FilterStartedAtLt  *string `form:"filter[started_at][lt],omitempty" json:"filter[started_at][lt],omitempty"`
	FilterStartedAtLte *string `form:"filter[started_at][lte],omitempty" json:"filter[started_at][lte],omitempty"`
	FilterEndedAtGt    *string `form:"filter[ended_at][gt],omitempty" json:"filter[ended_at][gt],omitempty"`
	FilterEndedAtGte   *string `form:"filter[ended_at][gte],omitempty" json:"filter[ended_at][gte],omitempty"`
	FilterEndedAtLt    *string `form:"filter[ended_at][lt],omitempty" json:"filter[ended_at][lt],omitempty"`
	FilterEndedAtLte   *string `form:"filter[ended_at][lte],omitempty" json:"filter[ended_at][lte],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListIncidentCustomFieldSelectionsParams defines parameters for ListIncidentCustomFieldSelections.
type ListIncidentCustomFieldSelectionsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListIncidentEventsParams defines parameters for ListIncidentEvents.
type ListIncidentEventsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListIncidentFeedbacksParams defines parameters for ListIncidentFeedbacks.
type ListIncidentFeedbacksParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListIncidentFormFieldSelectionsParams defines parameters for ListIncidentFormFieldSelections.
type ListIncidentFormFieldSelectionsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListIncidentStatusPagesParams defines parameters for ListIncidentStatusPages.
type ListIncidentStatusPagesParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListIncidentSubStatusesParams defines parameters for ListIncidentSubStatuses.
type ListIncidentSubStatusesParams struct {
	// Include comma separated if needed. eg: sub_status,assigned_by_user
	Include *ListIncidentSubStatusesParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Sort comma separated if needed. eg: created_at,updated_at
	Sort                *ListIncidentSubStatusesParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
	PageNumber          *int                               `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize            *int                               `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSubStatusId   *string                            `form:"filter[sub_status_id],omitempty" json:"filter[sub_status_id],omitempty"`
	FilterAssignedAtGt  *string                            `form:"filter[assigned_at][gt],omitempty" json:"filter[assigned_at][gt],omitempty"`
	FilterAssignedAtGte *string                            `form:"filter[assigned_at][gte],omitempty" json:"filter[assigned_at][gte],omitempty"`
	FilterAssignedAtLt  *string                            `form:"filter[assigned_at][lt],omitempty" json:"filter[assigned_at][lt],omitempty"`
	FilterAssignedAtLte *string                            `form:"filter[assigned_at][lte],omitempty" json:"filter[assigned_at][lte],omitempty"`
}

// ListIncidentSubStatusesParamsInclude defines parameters for ListIncidentSubStatuses.
type ListIncidentSubStatusesParamsInclude string

// ListIncidentSubStatusesParamsSort defines parameters for ListIncidentSubStatuses.
type ListIncidentSubStatusesParamsSort string

// ListLiveCallRoutersParams defines parameters for ListLiveCallRouters.
type ListLiveCallRoutersParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GeneratePhoneNumberLiveCallRouterParams defines parameters for GeneratePhoneNumberLiveCallRouter.
type GeneratePhoneNumberLiveCallRouterParams struct {
	CountryCode GeneratePhoneNumberLiveCallRouterParamsCountryCode `form:"country_code" json:"country_code"`
	PhoneType   GeneratePhoneNumberLiveCallRouterParamsPhoneType   `form:"phone_type" json:"phone_type"`
}

// GeneratePhoneNumberLiveCallRouterParamsCountryCode defines parameters for GeneratePhoneNumberLiveCallRouter.
type GeneratePhoneNumberLiveCallRouterParamsCountryCode string

// GeneratePhoneNumberLiveCallRouterParamsPhoneType defines parameters for GeneratePhoneNumberLiveCallRouter.
type GeneratePhoneNumberLiveCallRouterParamsPhoneType string

// ListOnCallRolesParams defines parameters for ListOnCallRoles.
type ListOnCallRolesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListPlaybooksParams defines parameters for ListPlaybooks.
type ListPlaybooksParams struct {
	// Include comma separated if needed. eg: severities,environments,services
	Include    *ListPlaybooksParamsInclude `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int                        `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int                        `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListPlaybooksParamsInclude defines parameters for ListPlaybooks.
type ListPlaybooksParamsInclude string

// GetPlaybookParams defines parameters for GetPlaybook.
type GetPlaybookParams struct {
	// Include comma separated if needed. eg: severities,environments,services
	Include *GetPlaybookParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetPlaybookParamsInclude defines parameters for GetPlaybook.
type GetPlaybookParamsInclude string

// ListPlaybookTasksParams defines parameters for ListPlaybookTasks.
type ListPlaybookTasksParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListPostmortemTemplatesParams defines parameters for ListPostmortemTemplates.
type ListPostmortemTemplatesParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListIncidentPostMortemsParams defines parameters for ListIncidentPostMortems.
type ListIncidentPostMortemsParams struct {
	Include               *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber            *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize              *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch          *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterStatus          *string `form:"filter[status],omitempty" json:"filter[status],omitempty"`
	FilterSeverity        *string `form:"filter[severity],omitempty" json:"filter[severity],omitempty"`
	FilterType            *string `form:"filter[type],omitempty" json:"filter[type],omitempty"`
	FilterUserId          *int    `form:"filter[user_id],omitempty" json:"filter[user_id],omitempty"`
	FilterEnvironments    *string `form:"filter[environments],omitempty" json:"filter[environments],omitempty"`
	FilterFunctionalities *string `form:"filter[functionalities],omitempty" json:"filter[functionalities],omitempty"`
	FilterServices        *string `form:"filter[services],omitempty" json:"filter[services],omitempty"`
	FilterTeams           *string `form:"filter[teams],omitempty" json:"filter[teams],omitempty"`
	FilterCreatedAtGt     *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte    *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt     *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte    *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	FilterStartedAtGt     *string `form:"filter[started_at][gt],omitempty" json:"filter[started_at][gt],omitempty"`
	FilterStartedAtGte    *string `form:"filter[started_at][gte],omitempty" json:"filter[started_at][gte],omitempty"`
	FilterStartedAtLt     *string `form:"filter[started_at][lt],omitempty" json:"filter[started_at][lt],omitempty"`
	FilterStartedAtLte    *string `form:"filter[started_at][lte],omitempty" json:"filter[started_at][lte],omitempty"`
	FilterMitigatedAtGt   *string `form:"filter[mitigated_at][gt],omitempty" json:"filter[mitigated_at][gt],omitempty"`
	FilterMitigatedAtGte  *string `form:"filter[mitigated_at][gte],omitempty" json:"filter[mitigated_at][gte],omitempty"`
	FilterMitigatedAtLt   *string `form:"filter[mitigated_at][lt],omitempty" json:"filter[mitigated_at][lt],omitempty"`
	FilterMitigatedAtLte  *string `form:"filter[mitigated_at][lte],omitempty" json:"filter[mitigated_at][lte],omitempty"`
	FilterResolvedAtGt    *string `form:"filter[resolved_at][gt],omitempty" json:"filter[resolved_at][gt],omitempty"`
	FilterResolvedAtGte   *string `form:"filter[resolved_at][gte],omitempty" json:"filter[resolved_at][gte],omitempty"`
	FilterResolvedAtLt    *string `form:"filter[resolved_at][lt],omitempty" json:"filter[resolved_at][lt],omitempty"`
	FilterResolvedAtLte   *string `form:"filter[resolved_at][lte],omitempty" json:"filter[resolved_at][lte],omitempty"`
	Sort                  *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListPulsesParams defines parameters for ListPulses.
type ListPulsesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	FilterSource       *string `form:"filter[source],omitempty" json:"filter[source],omitempty"`
	FilterServices     *string `form:"filter[services],omitempty" json:"filter[services],omitempty"`
	FilterEnvironments *string `form:"filter[environments],omitempty" json:"filter[environments],omitempty"`
	FilterLabels       *string `form:"filter[labels],omitempty" json:"filter[labels],omitempty"`
	FilterRefs         *string `form:"filter[refs],omitempty" json:"filter[refs],omitempty"`
	FilterStartedAtGt  *string `form:"filter[started_at][gt],omitempty" json:"filter[started_at][gt],omitempty"`
	FilterStartedAtGte *string `form:"filter[started_at][gte],omitempty" json:"filter[started_at][gte],omitempty"`
	FilterStartedAtLt  *string `form:"filter[started_at][lt],omitempty" json:"filter[started_at][lt],omitempty"`
	FilterStartedAtLte *string `form:"filter[started_at][lte],omitempty" json:"filter[started_at][lte],omitempty"`
	FilterEndedAtGt    *string `form:"filter[ended_at][gt],omitempty" json:"filter[ended_at][gt],omitempty"`
	FilterEndedAtGte   *string `form:"filter[ended_at][gte],omitempty" json:"filter[ended_at][gte],omitempty"`
	FilterEndedAtLt    *string `form:"filter[ended_at][lt],omitempty" json:"filter[ended_at][lt],omitempty"`
	FilterEndedAtLte   *string `form:"filter[ended_at][lte],omitempty" json:"filter[ended_at][lte],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListRetrospectiveConfigurationsParams defines parameters for ListRetrospectiveConfigurations.
type ListRetrospectiveConfigurationsParams struct {
	// Include comma separated if needed. eg: severities,groups
	Include    *ListRetrospectiveConfigurationsParamsInclude `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int                                          `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int                                          `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterKind *string                                       `form:"filter[kind],omitempty" json:"filter[kind],omitempty"`
}

// ListRetrospectiveConfigurationsParamsInclude defines parameters for ListRetrospectiveConfigurations.
type ListRetrospectiveConfigurationsParamsInclude string

// GetRetrospectiveConfigurationParams defines parameters for GetRetrospectiveConfiguration.
type GetRetrospectiveConfigurationParams struct {
	// Include comma separated if needed. eg: severities,groups
	Include *GetRetrospectiveConfigurationParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetRetrospectiveConfigurationParamsInclude defines parameters for GetRetrospectiveConfiguration.
type GetRetrospectiveConfigurationParamsInclude string

// GetRetrospectiveProcessGroupParams defines parameters for GetRetrospectiveProcessGroup.
type GetRetrospectiveProcessGroupParams struct {
	// Include comma separated if needed. eg: retrospective_process_group_steps
	Include *GetRetrospectiveProcessGroupParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetRetrospectiveProcessGroupParamsInclude defines parameters for GetRetrospectiveProcessGroup.
type GetRetrospectiveProcessGroupParamsInclude string

// ListRetrospectiveProcessGroupStepsParams defines parameters for ListRetrospectiveProcessGroupSteps.
type ListRetrospectiveProcessGroupStepsParams struct {
	Include                   *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber                *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize                  *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterRetrospectiveStepId *string `form:"filter[retrospective_step_id],omitempty" json:"filter[retrospective_step_id],omitempty"`
	FilterCreatedAtGt         *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte        *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt         *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte        *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
}

// ListRetrospectiveProcessesParams defines parameters for ListRetrospectiveProcesses.
type ListRetrospectiveProcessesParams struct {
	// Include comma separated if needed. eg: retrospective_steps,severities
	Include    *ListRetrospectiveProcessesParamsInclude `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int                                     `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int                                     `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListRetrospectiveProcessesParamsInclude defines parameters for ListRetrospectiveProcesses.
type ListRetrospectiveProcessesParamsInclude string

// GetRetrospectiveProcessParams defines parameters for GetRetrospectiveProcess.
type GetRetrospectiveProcessParams struct {
	// Include comma separated if needed. eg: retrospective_steps,severities
	Include *GetRetrospectiveProcessParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetRetrospectiveProcessParamsInclude defines parameters for GetRetrospectiveProcess.
type GetRetrospectiveProcessParamsInclude string

// ListRetrospectiveProcessGroupsParams defines parameters for ListRetrospectiveProcessGroups.
type ListRetrospectiveProcessGroupsParams struct {
	// Include comma separated if needed. eg: retrospective_process_group_steps
	Include *ListRetrospectiveProcessGroupsParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Sort comma separated if needed. eg: created_at,updated_at
	Sort               *ListRetrospectiveProcessGroupsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
	PageNumber         *int                                      `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int                                      `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSubStatusId  *string                                   `form:"filter[sub_status_id],omitempty" json:"filter[sub_status_id],omitempty"`
	FilterCreatedAtGt  *string                                   `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string                                   `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string                                   `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string                                   `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
}

// ListRetrospectiveProcessGroupsParamsInclude defines parameters for ListRetrospectiveProcessGroups.
type ListRetrospectiveProcessGroupsParamsInclude string

// ListRetrospectiveProcessGroupsParamsSort defines parameters for ListRetrospectiveProcessGroups.
type ListRetrospectiveProcessGroupsParamsSort string

// ListRetrospectiveStepsParams defines parameters for ListRetrospectiveSteps.
type ListRetrospectiveStepsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	Sort       *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListRolesParams defines parameters for ListRoles.
type ListRolesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListScheduleRotationActiveDaysParams defines parameters for ListScheduleRotationActiveDays.
type ListScheduleRotationActiveDaysParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListScheduleRotationUsersParams defines parameters for ListScheduleRotationUsers.
type ListScheduleRotationUsersParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListSchedulesParams defines parameters for ListSchedules.
type ListSchedulesParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// GetScheduleShiftsParams defines parameters for GetScheduleShifts.
type GetScheduleShiftsParams struct {
	To   *string `form:"to,omitempty" json:"to,omitempty"`
	From *string `form:"from,omitempty" json:"from,omitempty"`
}

// ListOnCallShadowsParams defines parameters for ListOnCallShadows.
type ListOnCallShadowsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListOverrideShiftsParams defines parameters for ListOverrideShifts.
type ListOverrideShiftsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListScheduleRotationsParams defines parameters for ListScheduleRotations.
type ListScheduleRotationsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	Sort       *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListSecretsParams defines parameters for ListSecrets.
type ListSecretsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListServicesParams defines parameters for ListServices.
type ListServicesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterBackstageId  *string `form:"filter[backstage_id],omitempty" json:"filter[backstage_id],omitempty"`
	FilterExternalId   *string `form:"filter[external_id],omitempty" json:"filter[external_id],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetServiceIncidentsChartParams defines parameters for GetServiceIncidentsChart.
type GetServiceIncidentsChartParams struct {
	Period string `form:"period" json:"period"`
}

// GetServiceUptimeChartParams defines parameters for GetServiceUptimeChart.
type GetServiceUptimeChartParams struct {
	Period *string `form:"period,omitempty" json:"period,omitempty"`
}

// ListSeveritiesParams defines parameters for ListSeverities.
type ListSeveritiesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterSeverity     *string `form:"filter[severity],omitempty" json:"filter[severity],omitempty"`
	FilterColor        *string `form:"filter[color],omitempty" json:"filter[color],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListShiftsParams defines parameters for ListShifts.
type ListShiftsParams struct {
	// Include comma separated if needed. eg: shift_override,user
	Include *ListShiftsParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// To Start range for shifts
	To *string `form:"to,omitempty" json:"to,omitempty"`

	// From End range for shifts
	From        *string   `form:"from,omitempty" json:"from,omitempty"`
	UserIds     *[]int    `form:"user_ids[],omitempty" json:"user_ids[],omitempty"`
	ScheduleIds *[]string `form:"schedule_ids[],omitempty" json:"schedule_ids[],omitempty"`
}

// ListShiftsParamsInclude defines parameters for ListShifts.
type ListShiftsParamsInclude string

// ListStatusPagesParams defines parameters for ListStatusPages.
type ListStatusPagesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListStatusPageTemplatesParams defines parameters for ListStatusPageTemplates.
type ListStatusPageTemplatesParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListSubStatusesParams defines parameters for ListSubStatuses.
type ListSubStatusesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterParentStatus *string `form:"filter[parent_status],omitempty" json:"filter[parent_status],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
}

// ListTeamsParams defines parameters for ListTeams.
type ListTeamsParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterBackstageId  *string `form:"filter[backstage_id],omitempty" json:"filter[backstage_id],omitempty"`
	FilterExternalId   *string `form:"filter[external_id],omitempty" json:"filter[external_id],omitempty"`
	FilterColor        *string `form:"filter[color],omitempty" json:"filter[color],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetTeamIncidentsChartParams defines parameters for GetTeamIncidentsChart.
type GetTeamIncidentsChartParams struct {
	Period string `form:"period" json:"period"`
}

// ListUsersParams defines parameters for ListUsers.
type ListUsersParams struct {
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterEmail        *string `form:"filter[email],omitempty" json:"filter[email],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`

	// Sort comma separated if needed. eg: created_at,updated_at
	Sort *ListUsersParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Include comma separated if needed. eg: email_addresses,phone_numbers
	Include *ListUsersParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// ListUsersParamsSort defines parameters for ListUsers.
type ListUsersParamsSort string

// ListUsersParamsInclude defines parameters for ListUsers.
type ListUsersParamsInclude string

// GetUserParams defines parameters for GetUser.
type GetUserParams struct {
	// Include comma separated if needed. eg: email_addresses,phone_numbers
	Include *GetUserParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetUserParamsInclude defines parameters for GetUser.
type GetUserParamsInclude string

// ListUserNotificationRulesParams defines parameters for ListUserNotificationRules.
type ListUserNotificationRulesParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	Sort       *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListWebhooksEndpointsParams defines parameters for ListWebhooksEndpoints.
type ListWebhooksEndpointsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSlug *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
}

// ListWebhooksDeliveriesParams defines parameters for ListWebhooksDeliveries.
type ListWebhooksDeliveriesParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListWorkflowGroupsParams defines parameters for ListWorkflowGroups.
type ListWorkflowGroupsParams struct {
	Include        *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber     *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize       *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch   *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterName     *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterSlug     *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterKind     *string `form:"filter[kind],omitempty" json:"filter[kind],omitempty"`
	FilterExpanded *bool   `form:"filter[expanded],omitempty" json:"filter[expanded],omitempty"`
	FilterPosition *int    `form:"filter[position],omitempty" json:"filter[position],omitempty"`
}

// ListWorkflowsParams defines parameters for ListWorkflows.
type ListWorkflowsParams struct {
	// Include comma separated if needed. eg: form_field_conditions,genius_tasks
	Include *ListWorkflowsParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Sort comma separated if needed. eg: created_at,updated_at
	Sort               *ListWorkflowsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
	PageNumber         *int                     `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int                     `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string                  `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterName         *string                  `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterSlug         *string                  `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterCreatedAtGt  *string                  `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string                  `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string                  `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string                  `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
}

// ListWorkflowsParamsInclude defines parameters for ListWorkflows.
type ListWorkflowsParamsInclude string

// ListWorkflowsParamsSort defines parameters for ListWorkflows.
type ListWorkflowsParamsSort string

// GetWorkflowParams defines parameters for GetWorkflow.
type GetWorkflowParams struct {
	// Include comma separated if needed. eg: form_field_conditions,genius_tasks
	Include *GetWorkflowParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetWorkflowParamsInclude defines parameters for GetWorkflow.
type GetWorkflowParamsInclude string

// ListWorkflowCustomFieldSelectionsParams defines parameters for ListWorkflowCustomFieldSelections.
type ListWorkflowCustomFieldSelectionsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListWorkflowFormFieldConditionsParams defines parameters for ListWorkflowFormFieldConditions.
type ListWorkflowFormFieldConditionsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListWorkflowRunsParams defines parameters for ListWorkflowRuns.
type ListWorkflowRunsParams struct {
	// Include comma separated if needed. eg: genius_task_runs
	Include            *ListWorkflowRunsParamsInclude `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int                           `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int                           `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterCreatedAtGt  *string                        `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string                        `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string                        `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string                        `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
}

// ListWorkflowRunsParamsInclude defines parameters for ListWorkflowRuns.
type ListWorkflowRunsParamsInclude string

// ListWorkflowTasksParams defines parameters for ListWorkflowTasks.
type ListWorkflowTasksParams struct {
	Include      *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber   *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize     *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterName   *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterSlug   *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
}

// UpdateIncidentActionItemApplicationVndAPIPlusJSONRequestBody defines body for UpdateIncidentActionItem for application/vnd.api+json ContentType.
type UpdateIncidentActionItemApplicationVndAPIPlusJSONRequestBody = UpdateIncidentActionItem

// CreateAlertGroupApplicationVndAPIPlusJSONRequestBody defines body for CreateAlertGroup for application/vnd.api+json ContentType.
type CreateAlertGroupApplicationVndAPIPlusJSONRequestBody = NewAlertGroup

// UpdateAlertGroupApplicationVndAPIPlusJSONRequestBody defines body for UpdateAlertGroup for application/vnd.api+json ContentType.
type UpdateAlertGroupApplicationVndAPIPlusJSONRequestBody = UpdateAlertGroup

// CreateAlertSourceApplicationVndAPIPlusJSONRequestBody defines body for CreateAlertSource for application/vnd.api+json ContentType.
type CreateAlertSourceApplicationVndAPIPlusJSONRequestBody = NewAlertsSource

// UpdateAlertSourceApplicationVndAPIPlusJSONRequestBody defines body for UpdateAlertSource for application/vnd.api+json ContentType.
type UpdateAlertSourceApplicationVndAPIPlusJSONRequestBody = UpdateAlertsSource

// CreateAlertUrgencyApplicationVndAPIPlusJSONRequestBody defines body for CreateAlertUrgency for application/vnd.api+json ContentType.
type CreateAlertUrgencyApplicationVndAPIPlusJSONRequestBody = NewAlertUrgency

// UpdateAlertUrgencyApplicationVndAPIPlusJSONRequestBody defines body for UpdateAlertUrgency for application/vnd.api+json ContentType.
type UpdateAlertUrgencyApplicationVndAPIPlusJSONRequestBody = UpdateAlertUrgency

// CreateAlertApplicationVndAPIPlusJSONRequestBody defines body for CreateAlert for application/vnd.api+json ContentType.
type CreateAlertApplicationVndAPIPlusJSONRequestBody = NewAlert

// ResolveAlertApplicationVndAPIPlusJSONRequestBody defines body for ResolveAlert for application/vnd.api+json ContentType.
type ResolveAlertApplicationVndAPIPlusJSONRequestBody = ResolveAlert

// CreateAuthorizationApplicationVndAPIPlusJSONRequestBody defines body for CreateAuthorization for application/vnd.api+json ContentType.
type CreateAuthorizationApplicationVndAPIPlusJSONRequestBody = NewAuthorization

// UpdateAuthorizationApplicationVndAPIPlusJSONRequestBody defines body for UpdateAuthorization for application/vnd.api+json ContentType.
type UpdateAuthorizationApplicationVndAPIPlusJSONRequestBody = UpdateAuthorization

// CreateCatalogEntityPropertyApplicationVndAPIPlusJSONRequestBody defines body for CreateCatalogEntityProperty for application/vnd.api+json ContentType.
type CreateCatalogEntityPropertyApplicationVndAPIPlusJSONRequestBody = NewCatalogEntityProperty

// UpdateCatalogEntityApplicationVndAPIPlusJSONRequestBody defines body for UpdateCatalogEntity for application/vnd.api+json ContentType.
type UpdateCatalogEntityApplicationVndAPIPlusJSONRequestBody = UpdateCatalogEntity

// UpdateCatalogEntityPropertyApplicationVndAPIPlusJSONRequestBody defines body for UpdateCatalogEntityProperty for application/vnd.api+json ContentType.
type UpdateCatalogEntityPropertyApplicationVndAPIPlusJSONRequestBody = UpdateCatalogEntityProperty

// UpdateCatalogFieldApplicationVndAPIPlusJSONRequestBody defines body for UpdateCatalogField for application/vnd.api+json ContentType.
type UpdateCatalogFieldApplicationVndAPIPlusJSONRequestBody = UpdateCatalogField

// CreateCatalogApplicationVndAPIPlusJSONRequestBody defines body for CreateCatalog for application/vnd.api+json ContentType.
type CreateCatalogApplicationVndAPIPlusJSONRequestBody = NewCatalog

// CreateCatalogEntityApplicationVndAPIPlusJSONRequestBody defines body for CreateCatalogEntity for application/vnd.api+json ContentType.
type CreateCatalogEntityApplicationVndAPIPlusJSONRequestBody = NewCatalogEntity

// CreateCatalogFieldApplicationVndAPIPlusJSONRequestBody defines body for CreateCatalogField for application/vnd.api+json ContentType.
type CreateCatalogFieldApplicationVndAPIPlusJSONRequestBody = NewCatalogField

// UpdateCatalogApplicationVndAPIPlusJSONRequestBody defines body for UpdateCatalog for application/vnd.api+json ContentType.
type UpdateCatalogApplicationVndAPIPlusJSONRequestBody = UpdateCatalog

// CreateCauseApplicationVndAPIPlusJSONRequestBody defines body for CreateCause for application/vnd.api+json ContentType.
type CreateCauseApplicationVndAPIPlusJSONRequestBody = NewCause

// UpdateCauseApplicationVndAPIPlusJSONRequestBody defines body for UpdateCause for application/vnd.api+json ContentType.
type UpdateCauseApplicationVndAPIPlusJSONRequestBody = UpdateCause

// UpdateCustomFieldOptionApplicationVndAPIPlusJSONRequestBody defines body for UpdateCustomFieldOption for application/vnd.api+json ContentType.
type UpdateCustomFieldOptionApplicationVndAPIPlusJSONRequestBody = UpdateCustomFieldOption

// CreateCustomFieldApplicationVndAPIPlusJSONRequestBody defines body for CreateCustomField for application/vnd.api+json ContentType.
type CreateCustomFieldApplicationVndAPIPlusJSONRequestBody = NewCustomField

// CreateCustomFieldOptionApplicationVndAPIPlusJSONRequestBody defines body for CreateCustomFieldOption for application/vnd.api+json ContentType.
type CreateCustomFieldOptionApplicationVndAPIPlusJSONRequestBody = NewCustomFieldOption

// UpdateCustomFieldApplicationVndAPIPlusJSONRequestBody defines body for UpdateCustomField for application/vnd.api+json ContentType.
type UpdateCustomFieldApplicationVndAPIPlusJSONRequestBody = UpdateCustomField

// CreateCustomFormApplicationVndAPIPlusJSONRequestBody defines body for CreateCustomForm for application/vnd.api+json ContentType.
type CreateCustomFormApplicationVndAPIPlusJSONRequestBody = NewCustomForm

// UpdateCustomFormApplicationVndAPIPlusJSONRequestBody defines body for UpdateCustomForm for application/vnd.api+json ContentType.
type UpdateCustomFormApplicationVndAPIPlusJSONRequestBody = UpdateCustomForm

// UpdateDashboardPanelApplicationVndAPIPlusJSONRequestBody defines body for UpdateDashboardPanel for application/vnd.api+json ContentType.
type UpdateDashboardPanelApplicationVndAPIPlusJSONRequestBody = UpdateDashboardPanel

// CreateDashboardApplicationVndAPIPlusJSONRequestBody defines body for CreateDashboard for application/vnd.api+json ContentType.
type CreateDashboardApplicationVndAPIPlusJSONRequestBody = NewDashboard

// CreateDashboardPanelApplicationVndAPIPlusJSONRequestBody defines body for CreateDashboardPanel for application/vnd.api+json ContentType.
type CreateDashboardPanelApplicationVndAPIPlusJSONRequestBody = NewDashboardPanel

// UpdateDashboardApplicationVndAPIPlusJSONRequestBody defines body for UpdateDashboard for application/vnd.api+json ContentType.
type UpdateDashboardApplicationVndAPIPlusJSONRequestBody = UpdateDashboard

// CreateEnvironmentApplicationVndAPIPlusJSONRequestBody defines body for CreateEnvironment for application/vnd.api+json ContentType.
type CreateEnvironmentApplicationVndAPIPlusJSONRequestBody = NewEnvironment

// UpdateEnvironmentApplicationVndAPIPlusJSONRequestBody defines body for UpdateEnvironment for application/vnd.api+json ContentType.
type UpdateEnvironmentApplicationVndAPIPlusJSONRequestBody = UpdateEnvironment

// UpdateEscalationLevelApplicationVndAPIPlusJSONRequestBody defines body for UpdateEscalationLevel for application/vnd.api+json ContentType.
type UpdateEscalationLevelApplicationVndAPIPlusJSONRequestBody = UpdateEscalationLevel

// CreateEscalationLevelPathsApplicationVndAPIPlusJSONRequestBody defines body for CreateEscalationLevelPaths for application/vnd.api+json ContentType.
type CreateEscalationLevelPathsApplicationVndAPIPlusJSONRequestBody = NewEscalationLevel

// UpdateEscalationPathApplicationVndAPIPlusJSONRequestBody defines body for UpdateEscalationPath for application/vnd.api+json ContentType.
type UpdateEscalationPathApplicationVndAPIPlusJSONRequestBody = UpdateEscalationPath

// CreateEscalationPolicyApplicationVndAPIPlusJSONRequestBody defines body for CreateEscalationPolicy for application/vnd.api+json ContentType.
type CreateEscalationPolicyApplicationVndAPIPlusJSONRequestBody = NewEscalationPolicy

// CreateEscalationLevelPoliciesApplicationVndAPIPlusJSONRequestBody defines body for CreateEscalationLevelPolicies for application/vnd.api+json ContentType.
type CreateEscalationLevelPoliciesApplicationVndAPIPlusJSONRequestBody = NewEscalationLevel

// CreateEscalationPathApplicationVndAPIPlusJSONRequestBody defines body for CreateEscalationPath for application/vnd.api+json ContentType.
type CreateEscalationPathApplicationVndAPIPlusJSONRequestBody = NewEscalationPath

// UpdateEscalationPolicyApplicationVndAPIPlusJSONRequestBody defines body for UpdateEscalationPolicy for application/vnd.api+json ContentType.
type UpdateEscalationPolicyApplicationVndAPIPlusJSONRequestBody = UpdateEscalationPolicy

// UpdateIncidentEventApplicationVndAPIPlusJSONRequestBody defines body for UpdateIncidentEvent for application/vnd.api+json ContentType.
type UpdateIncidentEventApplicationVndAPIPlusJSONRequestBody = UpdateIncidentEvent

// CreateIncidentEventFunctionalityApplicationVndAPIPlusJSONRequestBody defines body for CreateIncidentEventFunctionality for application/vnd.api+json ContentType.
type CreateIncidentEventFunctionalityApplicationVndAPIPlusJSONRequestBody = NewIncidentEventFunctionality

// CreateIncidentEventServiceApplicationVndAPIPlusJSONRequestBody defines body for CreateIncidentEventService for application/vnd.api+json ContentType.
type CreateIncidentEventServiceApplicationVndAPIPlusJSONRequestBody = NewIncidentEventService

// UpdateIncidentFeedbackApplicationVndAPIPlusJSONRequestBody defines body for UpdateIncidentFeedback for application/vnd.api+json ContentType.
type UpdateIncidentFeedbackApplicationVndAPIPlusJSONRequestBody = UpdateIncidentFeedback

// UpdateFormFieldOptionApplicationVndAPIPlusJSONRequestBody defines body for UpdateFormFieldOption for application/vnd.api+json ContentType.
type UpdateFormFieldOptionApplicationVndAPIPlusJSONRequestBody = UpdateFormFieldOption

// UpdateFormFieldPlacementConditionApplicationVndAPIPlusJSONRequestBody defines body for UpdateFormFieldPlacementCondition for application/vnd.api+json ContentType.
type UpdateFormFieldPlacementConditionApplicationVndAPIPlusJSONRequestBody = UpdateFormFieldPlacementCondition

// CreateFormFieldPlacementConditionApplicationVndAPIPlusJSONRequestBody defines body for CreateFormFieldPlacementCondition for application/vnd.api+json ContentType.
type CreateFormFieldPlacementConditionApplicationVndAPIPlusJSONRequestBody = NewFormFieldPlacementCondition

// UpdateFormFieldPlacementApplicationVndAPIPlusJSONRequestBody defines body for UpdateFormFieldPlacement for application/vnd.api+json ContentType.
type UpdateFormFieldPlacementApplicationVndAPIPlusJSONRequestBody = UpdateFormFieldPlacement

// UpdateFormFieldPositionApplicationVndAPIPlusJSONRequestBody defines body for UpdateFormFieldPosition for application/vnd.api+json ContentType.
type UpdateFormFieldPositionApplicationVndAPIPlusJSONRequestBody = UpdateFormFieldPosition

// CreateFormFieldApplicationVndAPIPlusJSONRequestBody defines body for CreateFormField for application/vnd.api+json ContentType.
type CreateFormFieldApplicationVndAPIPlusJSONRequestBody = NewFormField

// CreateFormFieldOptionApplicationVndAPIPlusJSONRequestBody defines body for CreateFormFieldOption for application/vnd.api+json ContentType.
type CreateFormFieldOptionApplicationVndAPIPlusJSONRequestBody = NewFormFieldOption

// CreateFormFieldPlacementApplicationVndAPIPlusJSONRequestBody defines body for CreateFormFieldPlacement for application/vnd.api+json ContentType.
type CreateFormFieldPlacementApplicationVndAPIPlusJSONRequestBody = NewFormFieldPlacement

// CreateFormFieldPositionApplicationVndAPIPlusJSONRequestBody defines body for CreateFormFieldPosition for application/vnd.api+json ContentType.
type CreateFormFieldPositionApplicationVndAPIPlusJSONRequestBody = NewFormFieldPosition

// UpdateFormFieldApplicationVndAPIPlusJSONRequestBody defines body for UpdateFormField for application/vnd.api+json ContentType.
type UpdateFormFieldApplicationVndAPIPlusJSONRequestBody = UpdateFormField

// UpdateFormSetConditionApplicationVndAPIPlusJSONRequestBody defines body for UpdateFormSetCondition for application/vnd.api+json ContentType.
type UpdateFormSetConditionApplicationVndAPIPlusJSONRequestBody = UpdateFormSetCondition

// CreateFormSetApplicationVndAPIPlusJSONRequestBody defines body for CreateFormSet for application/vnd.api+json ContentType.
type CreateFormSetApplicationVndAPIPlusJSONRequestBody = NewFormSet

// CreateFormSetConditionApplicationVndAPIPlusJSONRequestBody defines body for CreateFormSetCondition for application/vnd.api+json ContentType.
type CreateFormSetConditionApplicationVndAPIPlusJSONRequestBody = NewFormSetCondition

// UpdateFormSetApplicationVndAPIPlusJSONRequestBody defines body for UpdateFormSet for application/vnd.api+json ContentType.
type UpdateFormSetApplicationVndAPIPlusJSONRequestBody = UpdateFormSet

// CreateFunctionalityApplicationVndAPIPlusJSONRequestBody defines body for CreateFunctionality for application/vnd.api+json ContentType.
type CreateFunctionalityApplicationVndAPIPlusJSONRequestBody = NewFunctionality

// UpdateFunctionalityApplicationVndAPIPlusJSONRequestBody defines body for UpdateFunctionality for application/vnd.api+json ContentType.
type UpdateFunctionalityApplicationVndAPIPlusJSONRequestBody = UpdateFunctionality

// CreateHeartbeatApplicationVndAPIPlusJSONRequestBody defines body for CreateHeartbeat for application/vnd.api+json ContentType.
type CreateHeartbeatApplicationVndAPIPlusJSONRequestBody = NewHeartbeat

// UpdateHeartbeatApplicationVndAPIPlusJSONRequestBody defines body for UpdateHeartbeat for application/vnd.api+json ContentType.
type UpdateHeartbeatApplicationVndAPIPlusJSONRequestBody = UpdateHeartbeat

// UpdateIncidentCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody defines body for UpdateIncidentCustomFieldSelection for application/vnd.api+json ContentType.
type UpdateIncidentCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody = UpdateIncidentCustomFieldSelection

// UpdateIncidentEventFunctionalityApplicationVndAPIPlusJSONRequestBody defines body for UpdateIncidentEventFunctionality for application/vnd.api+json ContentType.
type UpdateIncidentEventFunctionalityApplicationVndAPIPlusJSONRequestBody = UpdateIncidentEventFunctionality

// UpdateIncidentEventServiceApplicationVndAPIPlusJSONRequestBody defines body for UpdateIncidentEventService for application/vnd.api+json ContentType.
type UpdateIncidentEventServiceApplicationVndAPIPlusJSONRequestBody = UpdateIncidentEventService

// UpdateIncidentFormFieldSelectionApplicationVndAPIPlusJSONRequestBody defines body for UpdateIncidentFormFieldSelection for application/vnd.api+json ContentType.
type UpdateIncidentFormFieldSelectionApplicationVndAPIPlusJSONRequestBody = UpdateIncidentFormFieldSelection

// UpdateIncidentPermissionSetBooleanApplicationVndAPIPlusJSONRequestBody defines body for UpdateIncidentPermissionSetBoolean for application/vnd.api+json ContentType.
type UpdateIncidentPermissionSetBooleanApplicationVndAPIPlusJSONRequestBody = UpdateIncidentPermissionSetBoolean

// UpdateIncidentPermissionSetResourceApplicationVndAPIPlusJSONRequestBody defines body for UpdateIncidentPermissionSetResource for application/vnd.api+json ContentType.
type UpdateIncidentPermissionSetResourceApplicationVndAPIPlusJSONRequestBody = UpdateIncidentPermissionSetResource

// CreateIncidentPermissionSetApplicationVndAPIPlusJSONRequestBody defines body for CreateIncidentPermissionSet for application/vnd.api+json ContentType.
type CreateIncidentPermissionSetApplicationVndAPIPlusJSONRequestBody = NewIncidentPermissionSet

// UpdateIncidentPermissionSetApplicationVndAPIPlusJSONRequestBody defines body for UpdateIncidentPermissionSet for application/vnd.api+json ContentType.
type UpdateIncidentPermissionSetApplicationVndAPIPlusJSONRequestBody = UpdateIncidentPermissionSet

// CreateIncidentPermissionSetBooleanApplicationVndAPIPlusJSONRequestBody defines body for CreateIncidentPermissionSetBoolean for application/vnd.api+json ContentType.
type CreateIncidentPermissionSetBooleanApplicationVndAPIPlusJSONRequestBody = NewIncidentPermissionSetBoolean

// CreateIncidentPermissionSetResourceApplicationVndAPIPlusJSONRequestBody defines body for CreateIncidentPermissionSetResource for application/vnd.api+json ContentType.
type CreateIncidentPermissionSetResourceApplicationVndAPIPlusJSONRequestBody = NewIncidentPermissionSetResource

// UpdateIncidentRetrospectiveStepApplicationVndAPIPlusJSONRequestBody defines body for UpdateIncidentRetrospectiveStep for application/vnd.api+json ContentType.
type UpdateIncidentRetrospectiveStepApplicationVndAPIPlusJSONRequestBody = UpdateIncidentRetrospectiveStep

// UpdateIncidentRoleTaskApplicationVndAPIPlusJSONRequestBody defines body for UpdateIncidentRoleTask for application/vnd.api+json ContentType.
type UpdateIncidentRoleTaskApplicationVndAPIPlusJSONRequestBody = UpdateIncidentRoleTask

// CreateIncidentRoleApplicationVndAPIPlusJSONRequestBody defines body for CreateIncidentRole for application/vnd.api+json ContentType.
type CreateIncidentRoleApplicationVndAPIPlusJSONRequestBody = NewIncidentRole

// UpdateIncidentRoleApplicationVndAPIPlusJSONRequestBody defines body for UpdateIncidentRole for application/vnd.api+json ContentType.
type UpdateIncidentRoleApplicationVndAPIPlusJSONRequestBody = UpdateIncidentRole

// CreateIncidentRoleTaskApplicationVndAPIPlusJSONRequestBody defines body for CreateIncidentRoleTask for application/vnd.api+json ContentType.
type CreateIncidentRoleTaskApplicationVndAPIPlusJSONRequestBody = NewIncidentRoleTask

// UpdateIncidentSubStatusApplicationVndAPIPlusJSONRequestBody defines body for UpdateIncidentSubStatus for application/vnd.api+json ContentType.
type UpdateIncidentSubStatusApplicationVndAPIPlusJSONRequestBody = UpdateIncidentSubStatus

// CreateIncidentTypeApplicationVndAPIPlusJSONRequestBody defines body for CreateIncidentType for application/vnd.api+json ContentType.
type CreateIncidentTypeApplicationVndAPIPlusJSONRequestBody = NewIncidentType

// UpdateIncidentTypeApplicationVndAPIPlusJSONRequestBody defines body for UpdateIncidentType for application/vnd.api+json ContentType.
type UpdateIncidentTypeApplicationVndAPIPlusJSONRequestBody = UpdateIncidentType

// CreateIncidentApplicationVndAPIPlusJSONRequestBody defines body for CreateIncident for application/vnd.api+json ContentType.
type CreateIncidentApplicationVndAPIPlusJSONRequestBody = NewIncident

// UpdateIncidentApplicationVndAPIPlusJSONRequestBody defines body for UpdateIncident for application/vnd.api+json ContentType.
type UpdateIncidentApplicationVndAPIPlusJSONRequestBody = UpdateIncident

// AddSubscribersToIncidentApplicationVndAPIPlusJSONRequestBody defines body for AddSubscribersToIncident for application/vnd.api+json ContentType.
type AddSubscribersToIncidentApplicationVndAPIPlusJSONRequestBody = AddSubscribers

// AssignUserToIncidentApplicationVndAPIPlusJSONRequestBody defines body for AssignUserToIncident for application/vnd.api+json ContentType.
type AssignUserToIncidentApplicationVndAPIPlusJSONRequestBody = AssignRoleToUser

// CancelIncidentApplicationVndAPIPlusJSONRequestBody defines body for CancelIncident for application/vnd.api+json ContentType.
type CancelIncidentApplicationVndAPIPlusJSONRequestBody = CancelIncident

// MarkAsDuplicateIncidentApplicationVndAPIPlusJSONRequestBody defines body for MarkAsDuplicateIncident for application/vnd.api+json ContentType.
type MarkAsDuplicateIncidentApplicationVndAPIPlusJSONRequestBody = ResolveIncident

// TriageIncidentApplicationVndAPIPlusJSONRequestBody defines body for TriageIncident for application/vnd.api+json ContentType.
type TriageIncidentApplicationVndAPIPlusJSONRequestBody = InTriageIncident

// MitigateIncidentApplicationVndAPIPlusJSONRequestBody defines body for MitigateIncident for application/vnd.api+json ContentType.
type MitigateIncidentApplicationVndAPIPlusJSONRequestBody = MitigateIncident

// RemoveSubscribersToIncidentApplicationVndAPIPlusJSONRequestBody defines body for RemoveSubscribersToIncident for application/vnd.api+json ContentType.
type RemoveSubscribersToIncidentApplicationVndAPIPlusJSONRequestBody = RemoveSubscribers

// ResolveIncidentApplicationVndAPIPlusJSONRequestBody defines body for ResolveIncident for application/vnd.api+json ContentType.
type ResolveIncidentApplicationVndAPIPlusJSONRequestBody = ResolveIncident

// RestartIncidentApplicationVndAPIPlusJSONRequestBody defines body for RestartIncident for application/vnd.api+json ContentType.
type RestartIncidentApplicationVndAPIPlusJSONRequestBody = RestartIncident

// RemoveAssignedUserFromIncidentApplicationVndAPIPlusJSONRequestBody defines body for RemoveAssignedUserFromIncident for application/vnd.api+json ContentType.
type RemoveAssignedUserFromIncidentApplicationVndAPIPlusJSONRequestBody = UnassignRoleFromUser

// CreateIncidentActionItemApplicationVndAPIPlusJSONRequestBody defines body for CreateIncidentActionItem for application/vnd.api+json ContentType.
type CreateIncidentActionItemApplicationVndAPIPlusJSONRequestBody = NewIncidentActionItem

// AttachAlertApplicationVndAPIPlusJSONRequestBody defines body for AttachAlert for application/vnd.api+json ContentType.
type AttachAlertApplicationVndAPIPlusJSONRequestBody = AttachAlert

// CreateIncidentCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody defines body for CreateIncidentCustomFieldSelection for application/vnd.api+json ContentType.
type CreateIncidentCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody = NewIncidentCustomFieldSelection

// CreateIncidentEventApplicationVndAPIPlusJSONRequestBody defines body for CreateIncidentEvent for application/vnd.api+json ContentType.
type CreateIncidentEventApplicationVndAPIPlusJSONRequestBody = NewIncidentEvent

// CreateIncidentFeedbackApplicationVndAPIPlusJSONRequestBody defines body for CreateIncidentFeedback for application/vnd.api+json ContentType.
type CreateIncidentFeedbackApplicationVndAPIPlusJSONRequestBody = NewIncidentFeedback

// CreateIncidentFormFieldSelectionApplicationVndAPIPlusJSONRequestBody defines body for CreateIncidentFormFieldSelection for application/vnd.api+json ContentType.
type CreateIncidentFormFieldSelectionApplicationVndAPIPlusJSONRequestBody = NewIncidentFormFieldSelection

// CreateIncidentStatusPageApplicationVndAPIPlusJSONRequestBody defines body for CreateIncidentStatusPage for application/vnd.api+json ContentType.
type CreateIncidentStatusPageApplicationVndAPIPlusJSONRequestBody = NewIncidentStatusPageEvent

// CreateIncidentSubStatusApplicationVndAPIPlusJSONRequestBody defines body for CreateIncidentSubStatus for application/vnd.api+json ContentType.
type CreateIncidentSubStatusApplicationVndAPIPlusJSONRequestBody = NewIncidentSubStatus

// CreateLiveCallRouterApplicationVndAPIPlusJSONRequestBody defines body for CreateLiveCallRouter for application/vnd.api+json ContentType.
type CreateLiveCallRouterApplicationVndAPIPlusJSONRequestBody = NewLiveCallRouter

// UpdateLiveCallRouterApplicationVndAPIPlusJSONRequestBody defines body for UpdateLiveCallRouter for application/vnd.api+json ContentType.
type UpdateLiveCallRouterApplicationVndAPIPlusJSONRequestBody = UpdateLiveCallRouter

// UpdateUserNotificationRuleApplicationVndAPIPlusJSONRequestBody defines body for UpdateUserNotificationRule for application/vnd.api+json ContentType.
type UpdateUserNotificationRuleApplicationVndAPIPlusJSONRequestBody = UpdateUserNotificationRule

// CreateOnCallRoleApplicationVndAPIPlusJSONRequestBody defines body for CreateOnCallRole for application/vnd.api+json ContentType.
type CreateOnCallRoleApplicationVndAPIPlusJSONRequestBody = NewOnCallRole

// UpdateOnCallRoleApplicationVndAPIPlusJSONRequestBody defines body for UpdateOnCallRole for application/vnd.api+json ContentType.
type UpdateOnCallRoleApplicationVndAPIPlusJSONRequestBody = UpdateOnCallRole

// UpdateOnCallShadowApplicationVndAPIPlusJSONRequestBody defines body for UpdateOnCallShadow for application/vnd.api+json ContentType.
type UpdateOnCallShadowApplicationVndAPIPlusJSONRequestBody = UpdateOnCallShadow

// UpdateOverrideShiftApplicationVndAPIPlusJSONRequestBody defines body for UpdateOverrideShift for application/vnd.api+json ContentType.
type UpdateOverrideShiftApplicationVndAPIPlusJSONRequestBody = UpdateOverrideShift

// UpdatePlaybookTaskApplicationVndAPIPlusJSONRequestBody defines body for UpdatePlaybookTask for application/vnd.api+json ContentType.
type UpdatePlaybookTaskApplicationVndAPIPlusJSONRequestBody = UpdatePlaybookTask

// CreatePlaybookApplicationVndAPIPlusJSONRequestBody defines body for CreatePlaybook for application/vnd.api+json ContentType.
type CreatePlaybookApplicationVndAPIPlusJSONRequestBody = NewPlaybook

// UpdatePlaybookApplicationVndAPIPlusJSONRequestBody defines body for UpdatePlaybook for application/vnd.api+json ContentType.
type UpdatePlaybookApplicationVndAPIPlusJSONRequestBody = UpdatePlaybook

// CreatePlaybookTaskApplicationVndAPIPlusJSONRequestBody defines body for CreatePlaybookTask for application/vnd.api+json ContentType.
type CreatePlaybookTaskApplicationVndAPIPlusJSONRequestBody = NewPlaybookTask

// CreatePostmortemTemplateApplicationVndAPIPlusJSONRequestBody defines body for CreatePostmortemTemplate for application/vnd.api+json ContentType.
type CreatePostmortemTemplateApplicationVndAPIPlusJSONRequestBody = NewPostMortemTemplate

// UpdatePostmortemTemplateApplicationVndAPIPlusJSONRequestBody defines body for UpdatePostmortemTemplate for application/vnd.api+json ContentType.
type UpdatePostmortemTemplateApplicationVndAPIPlusJSONRequestBody = UpdatePostMortemTemplate

// UpdateIncidentPostmortemApplicationVndAPIPlusJSONRequestBody defines body for UpdateIncidentPostmortem for application/vnd.api+json ContentType.
type UpdateIncidentPostmortemApplicationVndAPIPlusJSONRequestBody = UpdateIncidentPostMortem

// CreatePulseApplicationVndAPIPlusJSONRequestBody defines body for CreatePulse for application/vnd.api+json ContentType.
type CreatePulseApplicationVndAPIPlusJSONRequestBody = NewPulse

// UpdatePulseApplicationVndAPIPlusJSONRequestBody defines body for UpdatePulse for application/vnd.api+json ContentType.
type UpdatePulseApplicationVndAPIPlusJSONRequestBody = UpdatePulse

// UpdateRetrospectiveConfigurationApplicationVndAPIPlusJSONRequestBody defines body for UpdateRetrospectiveConfiguration for application/vnd.api+json ContentType.
type UpdateRetrospectiveConfigurationApplicationVndAPIPlusJSONRequestBody = UpdateRetrospectiveConfiguration

// UpdateRetrospectiveProcessGroupStepApplicationVndAPIPlusJSONRequestBody defines body for UpdateRetrospectiveProcessGroupStep for application/vnd.api+json ContentType.
type UpdateRetrospectiveProcessGroupStepApplicationVndAPIPlusJSONRequestBody = UpdateRetrospectiveProcessGroupStep

// UpdateRetrospectiveProcessGroupApplicationVndAPIPlusJSONRequestBody defines body for UpdateRetrospectiveProcessGroup for application/vnd.api+json ContentType.
type UpdateRetrospectiveProcessGroupApplicationVndAPIPlusJSONRequestBody = UpdateRetrospectiveProcessGroup

// CreateRetrospectiveProcessGroupStepApplicationVndAPIPlusJSONRequestBody defines body for CreateRetrospectiveProcessGroupStep for application/vnd.api+json ContentType.
type CreateRetrospectiveProcessGroupStepApplicationVndAPIPlusJSONRequestBody = NewRetrospectiveProcessGroupStep

// CreateRetrospectiveProcessApplicationVndAPIPlusJSONRequestBody defines body for CreateRetrospectiveProcess for application/vnd.api+json ContentType.
type CreateRetrospectiveProcessApplicationVndAPIPlusJSONRequestBody = NewRetrospectiveProcess

// UpdateRetrospectiveProcessApplicationVndAPIPlusJSONRequestBody defines body for UpdateRetrospectiveProcess for application/vnd.api+json ContentType.
type UpdateRetrospectiveProcessApplicationVndAPIPlusJSONRequestBody = UpdateRetrospectiveProcess

// CreateRetrospectiveProcessGroupApplicationVndAPIPlusJSONRequestBody defines body for CreateRetrospectiveProcessGroup for application/vnd.api+json ContentType.
type CreateRetrospectiveProcessGroupApplicationVndAPIPlusJSONRequestBody = NewRetrospectiveProcessGroup

// CreateRetrospectiveStepApplicationVndAPIPlusJSONRequestBody defines body for CreateRetrospectiveStep for application/vnd.api+json ContentType.
type CreateRetrospectiveStepApplicationVndAPIPlusJSONRequestBody = NewRetrospectiveStep

// UpdateRetrospectiveStepApplicationVndAPIPlusJSONRequestBody defines body for UpdateRetrospectiveStep for application/vnd.api+json ContentType.
type UpdateRetrospectiveStepApplicationVndAPIPlusJSONRequestBody = UpdateRetrospectiveStep

// CreateRoleApplicationVndAPIPlusJSONRequestBody defines body for CreateRole for application/vnd.api+json ContentType.
type CreateRoleApplicationVndAPIPlusJSONRequestBody = NewRole

// UpdateRoleApplicationVndAPIPlusJSONRequestBody defines body for UpdateRole for application/vnd.api+json ContentType.
type UpdateRoleApplicationVndAPIPlusJSONRequestBody = UpdateRole

// UpdateScheduleRotationActiveDayApplicationVndAPIPlusJSONRequestBody defines body for UpdateScheduleRotationActiveDay for application/vnd.api+json ContentType.
type UpdateScheduleRotationActiveDayApplicationVndAPIPlusJSONRequestBody = UpdateScheduleRotationActiveDay

// UpdateScheduleRotationUserApplicationVndAPIPlusJSONRequestBody defines body for UpdateScheduleRotationUser for application/vnd.api+json ContentType.
type UpdateScheduleRotationUserApplicationVndAPIPlusJSONRequestBody = UpdateScheduleRotationUser

// UpdateScheduleRotationApplicationVndAPIPlusJSONRequestBody defines body for UpdateScheduleRotation for application/vnd.api+json ContentType.
type UpdateScheduleRotationApplicationVndAPIPlusJSONRequestBody = UpdateScheduleRotation

// CreateScheduleRotationActiveDayApplicationVndAPIPlusJSONRequestBody defines body for CreateScheduleRotationActiveDay for application/vnd.api+json ContentType.
type CreateScheduleRotationActiveDayApplicationVndAPIPlusJSONRequestBody = NewScheduleRotationActiveDay

// CreateScheduleRotationUserApplicationVndAPIPlusJSONRequestBody defines body for CreateScheduleRotationUser for application/vnd.api+json ContentType.
type CreateScheduleRotationUserApplicationVndAPIPlusJSONRequestBody = NewScheduleRotationUser

// CreateScheduleApplicationVndAPIPlusJSONRequestBody defines body for CreateSchedule for application/vnd.api+json ContentType.
type CreateScheduleApplicationVndAPIPlusJSONRequestBody = NewSchedule

// UpdateScheduleApplicationVndAPIPlusJSONRequestBody defines body for UpdateSchedule for application/vnd.api+json ContentType.
type UpdateScheduleApplicationVndAPIPlusJSONRequestBody = UpdateSchedule

// CreateOnCallShadowApplicationVndAPIPlusJSONRequestBody defines body for CreateOnCallShadow for application/vnd.api+json ContentType.
type CreateOnCallShadowApplicationVndAPIPlusJSONRequestBody = NewOnCallShadow

// CreateOverrideShiftApplicationVndAPIPlusJSONRequestBody defines body for CreateOverrideShift for application/vnd.api+json ContentType.
type CreateOverrideShiftApplicationVndAPIPlusJSONRequestBody = NewOverrideShift

// CreateScheduleRotationApplicationVndAPIPlusJSONRequestBody defines body for CreateScheduleRotation for application/vnd.api+json ContentType.
type CreateScheduleRotationApplicationVndAPIPlusJSONRequestBody = NewScheduleRotation

// CreateSecretApplicationVndAPIPlusJSONRequestBody defines body for CreateSecret for application/vnd.api+json ContentType.
type CreateSecretApplicationVndAPIPlusJSONRequestBody = NewSecret

// UpdateSecretApplicationVndAPIPlusJSONRequestBody defines body for UpdateSecret for application/vnd.api+json ContentType.
type UpdateSecretApplicationVndAPIPlusJSONRequestBody = UpdateSecret

// CreateServiceApplicationVndAPIPlusJSONRequestBody defines body for CreateService for application/vnd.api+json ContentType.
type CreateServiceApplicationVndAPIPlusJSONRequestBody = NewService

// UpdateServiceApplicationVndAPIPlusJSONRequestBody defines body for UpdateService for application/vnd.api+json ContentType.
type UpdateServiceApplicationVndAPIPlusJSONRequestBody = UpdateService

// CreateSeverityApplicationVndAPIPlusJSONRequestBody defines body for CreateSeverity for application/vnd.api+json ContentType.
type CreateSeverityApplicationVndAPIPlusJSONRequestBody = NewSeverity

// UpdateSeverityApplicationVndAPIPlusJSONRequestBody defines body for UpdateSeverity for application/vnd.api+json ContentType.
type UpdateSeverityApplicationVndAPIPlusJSONRequestBody = UpdateSeverity

// UpdateIncidentStatusPageApplicationVndAPIPlusJSONRequestBody defines body for UpdateIncidentStatusPage for application/vnd.api+json ContentType.
type UpdateIncidentStatusPageApplicationVndAPIPlusJSONRequestBody = UpdateIncidentStatusPageEvent

// CreateStatusPageApplicationVndAPIPlusJSONRequestBody defines body for CreateStatusPage for application/vnd.api+json ContentType.
type CreateStatusPageApplicationVndAPIPlusJSONRequestBody = NewStatusPage

// UpdateStatusPageApplicationVndAPIPlusJSONRequestBody defines body for UpdateStatusPage for application/vnd.api+json ContentType.
type UpdateStatusPageApplicationVndAPIPlusJSONRequestBody = UpdateStatusPage

// CreateStatusPageTemplateApplicationVndAPIPlusJSONRequestBody defines body for CreateStatusPageTemplate for application/vnd.api+json ContentType.
type CreateStatusPageTemplateApplicationVndAPIPlusJSONRequestBody = StatusPageTemplate

// CreateSubStatusApplicationVndAPIPlusJSONRequestBody defines body for CreateSubStatus for application/vnd.api+json ContentType.
type CreateSubStatusApplicationVndAPIPlusJSONRequestBody = NewSubStatus

// UpdateSubStatusApplicationVndAPIPlusJSONRequestBody defines body for UpdateSubStatus for application/vnd.api+json ContentType.
type UpdateSubStatusApplicationVndAPIPlusJSONRequestBody = UpdateSubStatus

// CreateTeamApplicationVndAPIPlusJSONRequestBody defines body for CreateTeam for application/vnd.api+json ContentType.
type CreateTeamApplicationVndAPIPlusJSONRequestBody = NewTeam

// UpdateTeamApplicationVndAPIPlusJSONRequestBody defines body for UpdateTeam for application/vnd.api+json ContentType.
type UpdateTeamApplicationVndAPIPlusJSONRequestBody = UpdateTeam

// UpdateStatusPageTemplateApplicationVndAPIPlusJSONRequestBody defines body for UpdateStatusPageTemplate for application/vnd.api+json ContentType.
type UpdateStatusPageTemplateApplicationVndAPIPlusJSONRequestBody = StatusPageTemplate

// CreateUserNotificationRuleApplicationVndAPIPlusJSONRequestBody defines body for CreateUserNotificationRule for application/vnd.api+json ContentType.
type CreateUserNotificationRuleApplicationVndAPIPlusJSONRequestBody = NewUserNotificationRule

// CreateWebhooksEndpointApplicationVndAPIPlusJSONRequestBody defines body for CreateWebhooksEndpoint for application/vnd.api+json ContentType.
type CreateWebhooksEndpointApplicationVndAPIPlusJSONRequestBody = NewWebhooksEndpoint

// UpdateWebhooksEndpointApplicationVndAPIPlusJSONRequestBody defines body for UpdateWebhooksEndpoint for application/vnd.api+json ContentType.
type UpdateWebhooksEndpointApplicationVndAPIPlusJSONRequestBody = UpdateWebhooksEndpoint

// UpdateWorkflowCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody defines body for UpdateWorkflowCustomFieldSelection for application/vnd.api+json ContentType.
type UpdateWorkflowCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody = UpdateWorkflowCustomFieldSelection

// UpdateWorkflowFormFieldConditionApplicationVndAPIPlusJSONRequestBody defines body for UpdateWorkflowFormFieldCondition for application/vnd.api+json ContentType.
type UpdateWorkflowFormFieldConditionApplicationVndAPIPlusJSONRequestBody = UpdateWorkflowFormFieldCondition

// CreateWorkflowGroupApplicationVndAPIPlusJSONRequestBody defines body for CreateWorkflowGroup for application/vnd.api+json ContentType.
type CreateWorkflowGroupApplicationVndAPIPlusJSONRequestBody = NewWorkflowGroup

// UpdateWorkflowGroupApplicationVndAPIPlusJSONRequestBody defines body for UpdateWorkflowGroup for application/vnd.api+json ContentType.
type UpdateWorkflowGroupApplicationVndAPIPlusJSONRequestBody = UpdateWorkflowGroup

// UpdateWorkflowTaskApplicationVndAPIPlusJSONRequestBody defines body for UpdateWorkflowTask for application/vnd.api+json ContentType.
type UpdateWorkflowTaskApplicationVndAPIPlusJSONRequestBody = UpdateWorkflowTask

// CreateWorkflowApplicationVndAPIPlusJSONRequestBody defines body for CreateWorkflow for application/vnd.api+json ContentType.
type CreateWorkflowApplicationVndAPIPlusJSONRequestBody = NewWorkflow

// UpdateWorkflowApplicationVndAPIPlusJSONRequestBody defines body for UpdateWorkflow for application/vnd.api+json ContentType.
type UpdateWorkflowApplicationVndAPIPlusJSONRequestBody = UpdateWorkflow

// CreateWorkflowCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody defines body for CreateWorkflowCustomFieldSelection for application/vnd.api+json ContentType.
type CreateWorkflowCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody = NewWorkflowCustomFieldSelection

// CreateWorkflowFormFieldConditionApplicationVndAPIPlusJSONRequestBody defines body for CreateWorkflowFormFieldCondition for application/vnd.api+json ContentType.
type CreateWorkflowFormFieldConditionApplicationVndAPIPlusJSONRequestBody = NewWorkflowFormFieldCondition

// CreateWorkflowRunApplicationVndAPIPlusJSONRequestBody defines body for CreateWorkflowRun for application/vnd.api+json ContentType.
type CreateWorkflowRunApplicationVndAPIPlusJSONRequestBody = NewWorkflowRun

// CreateWorkflowTaskApplicationVndAPIPlusJSONRequestBody defines body for CreateWorkflowTask for application/vnd.api+json ContentType.
type CreateWorkflowTaskApplicationVndAPIPlusJSONRequestBody = NewWorkflowTask

// AsActionItemTriggerParamsIncidentConditionAcknowledgedAt0 returns the union data inside the ActionItemTriggerParams_IncidentConditionAcknowledgedAt as a ActionItemTriggerParamsIncidentConditionAcknowledgedAt0
func (t ActionItemTriggerParams_IncidentConditionAcknowledgedAt) AsActionItemTriggerParamsIncidentConditionAcknowledgedAt0() (ActionItemTriggerParamsIncidentConditionAcknowledgedAt0, error) {
	var body ActionItemTriggerParamsIncidentConditionAcknowledgedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionItemTriggerParamsIncidentConditionAcknowledgedAt0 overwrites any union data inside the ActionItemTriggerParams_IncidentConditionAcknowledgedAt as the provided ActionItemTriggerParamsIncidentConditionAcknowledgedAt0
func (t *ActionItemTriggerParams_IncidentConditionAcknowledgedAt) FromActionItemTriggerParamsIncidentConditionAcknowledgedAt0(v ActionItemTriggerParamsIncidentConditionAcknowledgedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionItemTriggerParamsIncidentConditionAcknowledgedAt0 performs a merge with any union data inside the ActionItemTriggerParams_IncidentConditionAcknowledgedAt, using the provided ActionItemTriggerParamsIncidentConditionAcknowledgedAt0
func (t *ActionItemTriggerParams_IncidentConditionAcknowledgedAt) MergeActionItemTriggerParamsIncidentConditionAcknowledgedAt0(v ActionItemTriggerParamsIncidentConditionAcknowledgedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionItemTriggerParamsIncidentConditionAcknowledgedAt1 returns the union data inside the ActionItemTriggerParams_IncidentConditionAcknowledgedAt as a ActionItemTriggerParamsIncidentConditionAcknowledgedAt1
func (t ActionItemTriggerParams_IncidentConditionAcknowledgedAt) AsActionItemTriggerParamsIncidentConditionAcknowledgedAt1() (ActionItemTriggerParamsIncidentConditionAcknowledgedAt1, error) {
	var body ActionItemTriggerParamsIncidentConditionAcknowledgedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionItemTriggerParamsIncidentConditionAcknowledgedAt1 overwrites any union data inside the ActionItemTriggerParams_IncidentConditionAcknowledgedAt as the provided ActionItemTriggerParamsIncidentConditionAcknowledgedAt1
func (t *ActionItemTriggerParams_IncidentConditionAcknowledgedAt) FromActionItemTriggerParamsIncidentConditionAcknowledgedAt1(v ActionItemTriggerParamsIncidentConditionAcknowledgedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionItemTriggerParamsIncidentConditionAcknowledgedAt1 performs a merge with any union data inside the ActionItemTriggerParams_IncidentConditionAcknowledgedAt, using the provided ActionItemTriggerParamsIncidentConditionAcknowledgedAt1
func (t *ActionItemTriggerParams_IncidentConditionAcknowledgedAt) MergeActionItemTriggerParamsIncidentConditionAcknowledgedAt1(v ActionItemTriggerParamsIncidentConditionAcknowledgedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ActionItemTriggerParams_IncidentConditionAcknowledgedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ActionItemTriggerParams_IncidentConditionAcknowledgedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsActionItemTriggerParamsIncidentConditionDetectedAt0 returns the union data inside the ActionItemTriggerParams_IncidentConditionDetectedAt as a ActionItemTriggerParamsIncidentConditionDetectedAt0
func (t ActionItemTriggerParams_IncidentConditionDetectedAt) AsActionItemTriggerParamsIncidentConditionDetectedAt0() (ActionItemTriggerParamsIncidentConditionDetectedAt0, error) {
	var body ActionItemTriggerParamsIncidentConditionDetectedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionItemTriggerParamsIncidentConditionDetectedAt0 overwrites any union data inside the ActionItemTriggerParams_IncidentConditionDetectedAt as the provided ActionItemTriggerParamsIncidentConditionDetectedAt0
func (t *ActionItemTriggerParams_IncidentConditionDetectedAt) FromActionItemTriggerParamsIncidentConditionDetectedAt0(v ActionItemTriggerParamsIncidentConditionDetectedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionItemTriggerParamsIncidentConditionDetectedAt0 performs a merge with any union data inside the ActionItemTriggerParams_IncidentConditionDetectedAt, using the provided ActionItemTriggerParamsIncidentConditionDetectedAt0
func (t *ActionItemTriggerParams_IncidentConditionDetectedAt) MergeActionItemTriggerParamsIncidentConditionDetectedAt0(v ActionItemTriggerParamsIncidentConditionDetectedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionItemTriggerParamsIncidentConditionDetectedAt1 returns the union data inside the ActionItemTriggerParams_IncidentConditionDetectedAt as a ActionItemTriggerParamsIncidentConditionDetectedAt1
func (t ActionItemTriggerParams_IncidentConditionDetectedAt) AsActionItemTriggerParamsIncidentConditionDetectedAt1() (ActionItemTriggerParamsIncidentConditionDetectedAt1, error) {
	var body ActionItemTriggerParamsIncidentConditionDetectedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionItemTriggerParamsIncidentConditionDetectedAt1 overwrites any union data inside the ActionItemTriggerParams_IncidentConditionDetectedAt as the provided ActionItemTriggerParamsIncidentConditionDetectedAt1
func (t *ActionItemTriggerParams_IncidentConditionDetectedAt) FromActionItemTriggerParamsIncidentConditionDetectedAt1(v ActionItemTriggerParamsIncidentConditionDetectedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionItemTriggerParamsIncidentConditionDetectedAt1 performs a merge with any union data inside the ActionItemTriggerParams_IncidentConditionDetectedAt, using the provided ActionItemTriggerParamsIncidentConditionDetectedAt1
func (t *ActionItemTriggerParams_IncidentConditionDetectedAt) MergeActionItemTriggerParamsIncidentConditionDetectedAt1(v ActionItemTriggerParamsIncidentConditionDetectedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ActionItemTriggerParams_IncidentConditionDetectedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ActionItemTriggerParams_IncidentConditionDetectedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsActionItemTriggerParamsIncidentConditionMitigatedAt0 returns the union data inside the ActionItemTriggerParams_IncidentConditionMitigatedAt as a ActionItemTriggerParamsIncidentConditionMitigatedAt0
func (t ActionItemTriggerParams_IncidentConditionMitigatedAt) AsActionItemTriggerParamsIncidentConditionMitigatedAt0() (ActionItemTriggerParamsIncidentConditionMitigatedAt0, error) {
	var body ActionItemTriggerParamsIncidentConditionMitigatedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionItemTriggerParamsIncidentConditionMitigatedAt0 overwrites any union data inside the ActionItemTriggerParams_IncidentConditionMitigatedAt as the provided ActionItemTriggerParamsIncidentConditionMitigatedAt0
func (t *ActionItemTriggerParams_IncidentConditionMitigatedAt) FromActionItemTriggerParamsIncidentConditionMitigatedAt0(v ActionItemTriggerParamsIncidentConditionMitigatedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionItemTriggerParamsIncidentConditionMitigatedAt0 performs a merge with any union data inside the ActionItemTriggerParams_IncidentConditionMitigatedAt, using the provided ActionItemTriggerParamsIncidentConditionMitigatedAt0
func (t *ActionItemTriggerParams_IncidentConditionMitigatedAt) MergeActionItemTriggerParamsIncidentConditionMitigatedAt0(v ActionItemTriggerParamsIncidentConditionMitigatedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionItemTriggerParamsIncidentConditionMitigatedAt1 returns the union data inside the ActionItemTriggerParams_IncidentConditionMitigatedAt as a ActionItemTriggerParamsIncidentConditionMitigatedAt1
func (t ActionItemTriggerParams_IncidentConditionMitigatedAt) AsActionItemTriggerParamsIncidentConditionMitigatedAt1() (ActionItemTriggerParamsIncidentConditionMitigatedAt1, error) {
	var body ActionItemTriggerParamsIncidentConditionMitigatedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionItemTriggerParamsIncidentConditionMitigatedAt1 overwrites any union data inside the ActionItemTriggerParams_IncidentConditionMitigatedAt as the provided ActionItemTriggerParamsIncidentConditionMitigatedAt1
func (t *ActionItemTriggerParams_IncidentConditionMitigatedAt) FromActionItemTriggerParamsIncidentConditionMitigatedAt1(v ActionItemTriggerParamsIncidentConditionMitigatedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionItemTriggerParamsIncidentConditionMitigatedAt1 performs a merge with any union data inside the ActionItemTriggerParams_IncidentConditionMitigatedAt, using the provided ActionItemTriggerParamsIncidentConditionMitigatedAt1
func (t *ActionItemTriggerParams_IncidentConditionMitigatedAt) MergeActionItemTriggerParamsIncidentConditionMitigatedAt1(v ActionItemTriggerParamsIncidentConditionMitigatedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ActionItemTriggerParams_IncidentConditionMitigatedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ActionItemTriggerParams_IncidentConditionMitigatedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsActionItemTriggerParamsIncidentConditionResolvedAt0 returns the union data inside the ActionItemTriggerParams_IncidentConditionResolvedAt as a ActionItemTriggerParamsIncidentConditionResolvedAt0
func (t ActionItemTriggerParams_IncidentConditionResolvedAt) AsActionItemTriggerParamsIncidentConditionResolvedAt0() (ActionItemTriggerParamsIncidentConditionResolvedAt0, error) {
	var body ActionItemTriggerParamsIncidentConditionResolvedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionItemTriggerParamsIncidentConditionResolvedAt0 overwrites any union data inside the ActionItemTriggerParams_IncidentConditionResolvedAt as the provided ActionItemTriggerParamsIncidentConditionResolvedAt0
func (t *ActionItemTriggerParams_IncidentConditionResolvedAt) FromActionItemTriggerParamsIncidentConditionResolvedAt0(v ActionItemTriggerParamsIncidentConditionResolvedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionItemTriggerParamsIncidentConditionResolvedAt0 performs a merge with any union data inside the ActionItemTriggerParams_IncidentConditionResolvedAt, using the provided ActionItemTriggerParamsIncidentConditionResolvedAt0
func (t *ActionItemTriggerParams_IncidentConditionResolvedAt) MergeActionItemTriggerParamsIncidentConditionResolvedAt0(v ActionItemTriggerParamsIncidentConditionResolvedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionItemTriggerParamsIncidentConditionResolvedAt1 returns the union data inside the ActionItemTriggerParams_IncidentConditionResolvedAt as a ActionItemTriggerParamsIncidentConditionResolvedAt1
func (t ActionItemTriggerParams_IncidentConditionResolvedAt) AsActionItemTriggerParamsIncidentConditionResolvedAt1() (ActionItemTriggerParamsIncidentConditionResolvedAt1, error) {
	var body ActionItemTriggerParamsIncidentConditionResolvedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionItemTriggerParamsIncidentConditionResolvedAt1 overwrites any union data inside the ActionItemTriggerParams_IncidentConditionResolvedAt as the provided ActionItemTriggerParamsIncidentConditionResolvedAt1
func (t *ActionItemTriggerParams_IncidentConditionResolvedAt) FromActionItemTriggerParamsIncidentConditionResolvedAt1(v ActionItemTriggerParamsIncidentConditionResolvedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionItemTriggerParamsIncidentConditionResolvedAt1 performs a merge with any union data inside the ActionItemTriggerParams_IncidentConditionResolvedAt, using the provided ActionItemTriggerParamsIncidentConditionResolvedAt1
func (t *ActionItemTriggerParams_IncidentConditionResolvedAt) MergeActionItemTriggerParamsIncidentConditionResolvedAt1(v ActionItemTriggerParamsIncidentConditionResolvedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ActionItemTriggerParams_IncidentConditionResolvedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ActionItemTriggerParams_IncidentConditionResolvedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsActionItemTriggerParamsIncidentConditionStartedAt0 returns the union data inside the ActionItemTriggerParams_IncidentConditionStartedAt as a ActionItemTriggerParamsIncidentConditionStartedAt0
func (t ActionItemTriggerParams_IncidentConditionStartedAt) AsActionItemTriggerParamsIncidentConditionStartedAt0() (ActionItemTriggerParamsIncidentConditionStartedAt0, error) {
	var body ActionItemTriggerParamsIncidentConditionStartedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionItemTriggerParamsIncidentConditionStartedAt0 overwrites any union data inside the ActionItemTriggerParams_IncidentConditionStartedAt as the provided ActionItemTriggerParamsIncidentConditionStartedAt0
func (t *ActionItemTriggerParams_IncidentConditionStartedAt) FromActionItemTriggerParamsIncidentConditionStartedAt0(v ActionItemTriggerParamsIncidentConditionStartedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionItemTriggerParamsIncidentConditionStartedAt0 performs a merge with any union data inside the ActionItemTriggerParams_IncidentConditionStartedAt, using the provided ActionItemTriggerParamsIncidentConditionStartedAt0
func (t *ActionItemTriggerParams_IncidentConditionStartedAt) MergeActionItemTriggerParamsIncidentConditionStartedAt0(v ActionItemTriggerParamsIncidentConditionStartedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionItemTriggerParamsIncidentConditionStartedAt1 returns the union data inside the ActionItemTriggerParams_IncidentConditionStartedAt as a ActionItemTriggerParamsIncidentConditionStartedAt1
func (t ActionItemTriggerParams_IncidentConditionStartedAt) AsActionItemTriggerParamsIncidentConditionStartedAt1() (ActionItemTriggerParamsIncidentConditionStartedAt1, error) {
	var body ActionItemTriggerParamsIncidentConditionStartedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionItemTriggerParamsIncidentConditionStartedAt1 overwrites any union data inside the ActionItemTriggerParams_IncidentConditionStartedAt as the provided ActionItemTriggerParamsIncidentConditionStartedAt1
func (t *ActionItemTriggerParams_IncidentConditionStartedAt) FromActionItemTriggerParamsIncidentConditionStartedAt1(v ActionItemTriggerParamsIncidentConditionStartedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionItemTriggerParamsIncidentConditionStartedAt1 performs a merge with any union data inside the ActionItemTriggerParams_IncidentConditionStartedAt, using the provided ActionItemTriggerParamsIncidentConditionStartedAt1
func (t *ActionItemTriggerParams_IncidentConditionStartedAt) MergeActionItemTriggerParamsIncidentConditionStartedAt1(v ActionItemTriggerParamsIncidentConditionStartedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ActionItemTriggerParams_IncidentConditionStartedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ActionItemTriggerParams_IncidentConditionStartedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsActionItemTriggerParamsIncidentConditionSummary0 returns the union data inside the ActionItemTriggerParams_IncidentConditionSummary as a ActionItemTriggerParamsIncidentConditionSummary0
func (t ActionItemTriggerParams_IncidentConditionSummary) AsActionItemTriggerParamsIncidentConditionSummary0() (ActionItemTriggerParamsIncidentConditionSummary0, error) {
	var body ActionItemTriggerParamsIncidentConditionSummary0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionItemTriggerParamsIncidentConditionSummary0 overwrites any union data inside the ActionItemTriggerParams_IncidentConditionSummary as the provided ActionItemTriggerParamsIncidentConditionSummary0
func (t *ActionItemTriggerParams_IncidentConditionSummary) FromActionItemTriggerParamsIncidentConditionSummary0(v ActionItemTriggerParamsIncidentConditionSummary0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionItemTriggerParamsIncidentConditionSummary0 performs a merge with any union data inside the ActionItemTriggerParams_IncidentConditionSummary, using the provided ActionItemTriggerParamsIncidentConditionSummary0
func (t *ActionItemTriggerParams_IncidentConditionSummary) MergeActionItemTriggerParamsIncidentConditionSummary0(v ActionItemTriggerParamsIncidentConditionSummary0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionItemTriggerParamsIncidentConditionSummary1 returns the union data inside the ActionItemTriggerParams_IncidentConditionSummary as a ActionItemTriggerParamsIncidentConditionSummary1
func (t ActionItemTriggerParams_IncidentConditionSummary) AsActionItemTriggerParamsIncidentConditionSummary1() (ActionItemTriggerParamsIncidentConditionSummary1, error) {
	var body ActionItemTriggerParamsIncidentConditionSummary1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionItemTriggerParamsIncidentConditionSummary1 overwrites any union data inside the ActionItemTriggerParams_IncidentConditionSummary as the provided ActionItemTriggerParamsIncidentConditionSummary1
func (t *ActionItemTriggerParams_IncidentConditionSummary) FromActionItemTriggerParamsIncidentConditionSummary1(v ActionItemTriggerParamsIncidentConditionSummary1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionItemTriggerParamsIncidentConditionSummary1 performs a merge with any union data inside the ActionItemTriggerParams_IncidentConditionSummary, using the provided ActionItemTriggerParamsIncidentConditionSummary1
func (t *ActionItemTriggerParams_IncidentConditionSummary) MergeActionItemTriggerParamsIncidentConditionSummary1(v ActionItemTriggerParamsIncidentConditionSummary1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ActionItemTriggerParams_IncidentConditionSummary) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ActionItemTriggerParams_IncidentConditionSummary) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsActionItemTriggerParamsIncidentConditionalInactivity0 returns the union data inside the ActionItemTriggerParams_IncidentConditionalInactivity as a ActionItemTriggerParamsIncidentConditionalInactivity0
func (t ActionItemTriggerParams_IncidentConditionalInactivity) AsActionItemTriggerParamsIncidentConditionalInactivity0() (ActionItemTriggerParamsIncidentConditionalInactivity0, error) {
	var body ActionItemTriggerParamsIncidentConditionalInactivity0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionItemTriggerParamsIncidentConditionalInactivity0 overwrites any union data inside the ActionItemTriggerParams_IncidentConditionalInactivity as the provided ActionItemTriggerParamsIncidentConditionalInactivity0
func (t *ActionItemTriggerParams_IncidentConditionalInactivity) FromActionItemTriggerParamsIncidentConditionalInactivity0(v ActionItemTriggerParamsIncidentConditionalInactivity0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionItemTriggerParamsIncidentConditionalInactivity0 performs a merge with any union data inside the ActionItemTriggerParams_IncidentConditionalInactivity, using the provided ActionItemTriggerParamsIncidentConditionalInactivity0
func (t *ActionItemTriggerParams_IncidentConditionalInactivity) MergeActionItemTriggerParamsIncidentConditionalInactivity0(v ActionItemTriggerParamsIncidentConditionalInactivity0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionItemTriggerParamsIncidentConditionalInactivity1 returns the union data inside the ActionItemTriggerParams_IncidentConditionalInactivity as a ActionItemTriggerParamsIncidentConditionalInactivity1
func (t ActionItemTriggerParams_IncidentConditionalInactivity) AsActionItemTriggerParamsIncidentConditionalInactivity1() (ActionItemTriggerParamsIncidentConditionalInactivity1, error) {
	var body ActionItemTriggerParamsIncidentConditionalInactivity1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionItemTriggerParamsIncidentConditionalInactivity1 overwrites any union data inside the ActionItemTriggerParams_IncidentConditionalInactivity as the provided ActionItemTriggerParamsIncidentConditionalInactivity1
func (t *ActionItemTriggerParams_IncidentConditionalInactivity) FromActionItemTriggerParamsIncidentConditionalInactivity1(v ActionItemTriggerParamsIncidentConditionalInactivity1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionItemTriggerParamsIncidentConditionalInactivity1 performs a merge with any union data inside the ActionItemTriggerParams_IncidentConditionalInactivity, using the provided ActionItemTriggerParamsIncidentConditionalInactivity1
func (t *ActionItemTriggerParams_IncidentConditionalInactivity) MergeActionItemTriggerParamsIncidentConditionalInactivity1(v ActionItemTriggerParamsIncidentConditionalInactivity1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ActionItemTriggerParams_IncidentConditionalInactivity) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ActionItemTriggerParams_IncidentConditionalInactivity) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsActionItemTriggerParamsIncidentInactivityDuration0 returns the union data inside the ActionItemTriggerParams_IncidentInactivityDuration as a ActionItemTriggerParamsIncidentInactivityDuration0
func (t ActionItemTriggerParams_IncidentInactivityDuration) AsActionItemTriggerParamsIncidentInactivityDuration0() (ActionItemTriggerParamsIncidentInactivityDuration0, error) {
	var body ActionItemTriggerParamsIncidentInactivityDuration0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionItemTriggerParamsIncidentInactivityDuration0 overwrites any union data inside the ActionItemTriggerParams_IncidentInactivityDuration as the provided ActionItemTriggerParamsIncidentInactivityDuration0
func (t *ActionItemTriggerParams_IncidentInactivityDuration) FromActionItemTriggerParamsIncidentInactivityDuration0(v ActionItemTriggerParamsIncidentInactivityDuration0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionItemTriggerParamsIncidentInactivityDuration0 performs a merge with any union data inside the ActionItemTriggerParams_IncidentInactivityDuration, using the provided ActionItemTriggerParamsIncidentInactivityDuration0
func (t *ActionItemTriggerParams_IncidentInactivityDuration) MergeActionItemTriggerParamsIncidentInactivityDuration0(v ActionItemTriggerParamsIncidentInactivityDuration0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionItemTriggerParamsIncidentInactivityDuration1 returns the union data inside the ActionItemTriggerParams_IncidentInactivityDuration as a ActionItemTriggerParamsIncidentInactivityDuration1
func (t ActionItemTriggerParams_IncidentInactivityDuration) AsActionItemTriggerParamsIncidentInactivityDuration1() (ActionItemTriggerParamsIncidentInactivityDuration1, error) {
	var body ActionItemTriggerParamsIncidentInactivityDuration1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionItemTriggerParamsIncidentInactivityDuration1 overwrites any union data inside the ActionItemTriggerParams_IncidentInactivityDuration as the provided ActionItemTriggerParamsIncidentInactivityDuration1
func (t *ActionItemTriggerParams_IncidentInactivityDuration) FromActionItemTriggerParamsIncidentInactivityDuration1(v ActionItemTriggerParamsIncidentInactivityDuration1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionItemTriggerParamsIncidentInactivityDuration1 performs a merge with any union data inside the ActionItemTriggerParams_IncidentInactivityDuration, using the provided ActionItemTriggerParamsIncidentInactivityDuration1
func (t *ActionItemTriggerParams_IncidentInactivityDuration) MergeActionItemTriggerParamsIncidentInactivityDuration1(v ActionItemTriggerParamsIncidentInactivityDuration1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ActionItemTriggerParams_IncidentInactivityDuration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ActionItemTriggerParams_IncidentInactivityDuration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAddMicrosoftTeamsTabTaskParams0 returns the union data inside the AddMicrosoftTeamsTabTaskParams as a AddMicrosoftTeamsTabTaskParams0
func (t AddMicrosoftTeamsTabTaskParams) AsAddMicrosoftTeamsTabTaskParams0() (AddMicrosoftTeamsTabTaskParams0, error) {
	var body AddMicrosoftTeamsTabTaskParams0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddMicrosoftTeamsTabTaskParams0 overwrites any union data inside the AddMicrosoftTeamsTabTaskParams as the provided AddMicrosoftTeamsTabTaskParams0
func (t *AddMicrosoftTeamsTabTaskParams) FromAddMicrosoftTeamsTabTaskParams0(v AddMicrosoftTeamsTabTaskParams0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddMicrosoftTeamsTabTaskParams0 performs a merge with any union data inside the AddMicrosoftTeamsTabTaskParams, using the provided AddMicrosoftTeamsTabTaskParams0
func (t *AddMicrosoftTeamsTabTaskParams) MergeAddMicrosoftTeamsTabTaskParams0(v AddMicrosoftTeamsTabTaskParams0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAddMicrosoftTeamsTabTaskParams1 returns the union data inside the AddMicrosoftTeamsTabTaskParams as a AddMicrosoftTeamsTabTaskParams1
func (t AddMicrosoftTeamsTabTaskParams) AsAddMicrosoftTeamsTabTaskParams1() (AddMicrosoftTeamsTabTaskParams1, error) {
	var body AddMicrosoftTeamsTabTaskParams1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddMicrosoftTeamsTabTaskParams1 overwrites any union data inside the AddMicrosoftTeamsTabTaskParams as the provided AddMicrosoftTeamsTabTaskParams1
func (t *AddMicrosoftTeamsTabTaskParams) FromAddMicrosoftTeamsTabTaskParams1(v AddMicrosoftTeamsTabTaskParams1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddMicrosoftTeamsTabTaskParams1 performs a merge with any union data inside the AddMicrosoftTeamsTabTaskParams, using the provided AddMicrosoftTeamsTabTaskParams1
func (t *AddMicrosoftTeamsTabTaskParams) MergeAddMicrosoftTeamsTabTaskParams1(v AddMicrosoftTeamsTabTaskParams1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AddMicrosoftTeamsTabTaskParams) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["channel"], err = json.Marshal(t.Channel)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'channel': %w", err)
	}

	if t.Link != nil {
		object["link"], err = json.Marshal(t.Link)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'link': %w", err)
		}
	}

	if t.PlaybookId != nil {
		object["playbook_id"], err = json.Marshal(t.PlaybookId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'playbook_id': %w", err)
		}
	}

	if t.TaskType != nil {
		object["task_type"], err = json.Marshal(t.TaskType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'task_type': %w", err)
		}
	}

	object["team"], err = json.Marshal(t.Team)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'team': %w", err)
	}

	if t.Title != nil {
		object["title"], err = json.Marshal(t.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *AddMicrosoftTeamsTabTaskParams) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["channel"]; found {
		err = json.Unmarshal(raw, &t.Channel)
		if err != nil {
			return fmt.Errorf("error reading 'channel': %w", err)
		}
	}

	if raw, found := object["link"]; found {
		err = json.Unmarshal(raw, &t.Link)
		if err != nil {
			return fmt.Errorf("error reading 'link': %w", err)
		}
	}

	if raw, found := object["playbook_id"]; found {
		err = json.Unmarshal(raw, &t.PlaybookId)
		if err != nil {
			return fmt.Errorf("error reading 'playbook_id': %w", err)
		}
	}

	if raw, found := object["task_type"]; found {
		err = json.Unmarshal(raw, &t.TaskType)
		if err != nil {
			return fmt.Errorf("error reading 'task_type': %w", err)
		}
	}

	if raw, found := object["team"]; found {
		err = json.Unmarshal(raw, &t.Team)
		if err != nil {
			return fmt.Errorf("error reading 'team': %w", err)
		}
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &t.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
	}

	return err
}

// AsAddSlackBookmarkTaskParams0 returns the union data inside the AddSlackBookmarkTaskParams as a AddSlackBookmarkTaskParams0
func (t AddSlackBookmarkTaskParams) AsAddSlackBookmarkTaskParams0() (AddSlackBookmarkTaskParams0, error) {
	var body AddSlackBookmarkTaskParams0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddSlackBookmarkTaskParams0 overwrites any union data inside the AddSlackBookmarkTaskParams as the provided AddSlackBookmarkTaskParams0
func (t *AddSlackBookmarkTaskParams) FromAddSlackBookmarkTaskParams0(v AddSlackBookmarkTaskParams0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddSlackBookmarkTaskParams0 performs a merge with any union data inside the AddSlackBookmarkTaskParams, using the provided AddSlackBookmarkTaskParams0
func (t *AddSlackBookmarkTaskParams) MergeAddSlackBookmarkTaskParams0(v AddSlackBookmarkTaskParams0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAddSlackBookmarkTaskParams1 returns the union data inside the AddSlackBookmarkTaskParams as a AddSlackBookmarkTaskParams1
func (t AddSlackBookmarkTaskParams) AsAddSlackBookmarkTaskParams1() (AddSlackBookmarkTaskParams1, error) {
	var body AddSlackBookmarkTaskParams1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddSlackBookmarkTaskParams1 overwrites any union data inside the AddSlackBookmarkTaskParams as the provided AddSlackBookmarkTaskParams1
func (t *AddSlackBookmarkTaskParams) FromAddSlackBookmarkTaskParams1(v AddSlackBookmarkTaskParams1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddSlackBookmarkTaskParams1 performs a merge with any union data inside the AddSlackBookmarkTaskParams, using the provided AddSlackBookmarkTaskParams1
func (t *AddSlackBookmarkTaskParams) MergeAddSlackBookmarkTaskParams1(v AddSlackBookmarkTaskParams1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AddSlackBookmarkTaskParams) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["channel"], err = json.Marshal(t.Channel)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'channel': %w", err)
	}

	if t.Emoji != nil {
		object["emoji"], err = json.Marshal(t.Emoji)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'emoji': %w", err)
		}
	}

	if t.Link != nil {
		object["link"], err = json.Marshal(t.Link)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'link': %w", err)
		}
	}

	if t.PlaybookId != nil {
		object["playbook_id"], err = json.Marshal(t.PlaybookId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'playbook_id': %w", err)
		}
	}

	if t.TaskType != nil {
		object["task_type"], err = json.Marshal(t.TaskType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'task_type': %w", err)
		}
	}

	if t.Title != nil {
		object["title"], err = json.Marshal(t.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *AddSlackBookmarkTaskParams) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["channel"]; found {
		err = json.Unmarshal(raw, &t.Channel)
		if err != nil {
			return fmt.Errorf("error reading 'channel': %w", err)
		}
	}

	if raw, found := object["emoji"]; found {
		err = json.Unmarshal(raw, &t.Emoji)
		if err != nil {
			return fmt.Errorf("error reading 'emoji': %w", err)
		}
	}

	if raw, found := object["link"]; found {
		err = json.Unmarshal(raw, &t.Link)
		if err != nil {
			return fmt.Errorf("error reading 'link': %w", err)
		}
	}

	if raw, found := object["playbook_id"]; found {
		err = json.Unmarshal(raw, &t.PlaybookId)
		if err != nil {
			return fmt.Errorf("error reading 'playbook_id': %w", err)
		}
	}

	if raw, found := object["task_type"]; found {
		err = json.Unmarshal(raw, &t.TaskType)
		if err != nil {
			return fmt.Errorf("error reading 'task_type': %w", err)
		}
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &t.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
	}

	return err
}

// AsAutoAssignRolePagerdutyTaskParams0 returns the union data inside the AutoAssignRolePagerdutyTaskParams as a AutoAssignRolePagerdutyTaskParams0
func (t AutoAssignRolePagerdutyTaskParams) AsAutoAssignRolePagerdutyTaskParams0() (AutoAssignRolePagerdutyTaskParams0, error) {
	var body AutoAssignRolePagerdutyTaskParams0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAutoAssignRolePagerdutyTaskParams0 overwrites any union data inside the AutoAssignRolePagerdutyTaskParams as the provided AutoAssignRolePagerdutyTaskParams0
func (t *AutoAssignRolePagerdutyTaskParams) FromAutoAssignRolePagerdutyTaskParams0(v AutoAssignRolePagerdutyTaskParams0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAutoAssignRolePagerdutyTaskParams0 performs a merge with any union data inside the AutoAssignRolePagerdutyTaskParams, using the provided AutoAssignRolePagerdutyTaskParams0
func (t *AutoAssignRolePagerdutyTaskParams) MergeAutoAssignRolePagerdutyTaskParams0(v AutoAssignRolePagerdutyTaskParams0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAutoAssignRolePagerdutyTaskParams1 returns the union data inside the AutoAssignRolePagerdutyTaskParams as a AutoAssignRolePagerdutyTaskParams1
func (t AutoAssignRolePagerdutyTaskParams) AsAutoAssignRolePagerdutyTaskParams1() (AutoAssignRolePagerdutyTaskParams1, error) {
	var body AutoAssignRolePagerdutyTaskParams1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAutoAssignRolePagerdutyTaskParams1 overwrites any union data inside the AutoAssignRolePagerdutyTaskParams as the provided AutoAssignRolePagerdutyTaskParams1
func (t *AutoAssignRolePagerdutyTaskParams) FromAutoAssignRolePagerdutyTaskParams1(v AutoAssignRolePagerdutyTaskParams1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAutoAssignRolePagerdutyTaskParams1 performs a merge with any union data inside the AutoAssignRolePagerdutyTaskParams, using the provided AutoAssignRolePagerdutyTaskParams1
func (t *AutoAssignRolePagerdutyTaskParams) MergeAutoAssignRolePagerdutyTaskParams1(v AutoAssignRolePagerdutyTaskParams1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AutoAssignRolePagerdutyTaskParams) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.EscalationPolicy != nil {
		object["escalation_policy"], err = json.Marshal(t.EscalationPolicy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'escalation_policy': %w", err)
		}
	}

	object["incident_role_id"], err = json.Marshal(t.IncidentRoleId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'incident_role_id': %w", err)
	}

	if t.Schedule != nil {
		object["schedule"], err = json.Marshal(t.Schedule)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'schedule': %w", err)
		}
	}

	if t.Service != nil {
		object["service"], err = json.Marshal(t.Service)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'service': %w", err)
		}
	}

	if t.TaskType != nil {
		object["task_type"], err = json.Marshal(t.TaskType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'task_type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *AutoAssignRolePagerdutyTaskParams) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["escalation_policy"]; found {
		err = json.Unmarshal(raw, &t.EscalationPolicy)
		if err != nil {
			return fmt.Errorf("error reading 'escalation_policy': %w", err)
		}
	}

	if raw, found := object["incident_role_id"]; found {
		err = json.Unmarshal(raw, &t.IncidentRoleId)
		if err != nil {
			return fmt.Errorf("error reading 'incident_role_id': %w", err)
		}
	}

	if raw, found := object["schedule"]; found {
		err = json.Unmarshal(raw, &t.Schedule)
		if err != nil {
			return fmt.Errorf("error reading 'schedule': %w", err)
		}
	}

	if raw, found := object["service"]; found {
		err = json.Unmarshal(raw, &t.Service)
		if err != nil {
			return fmt.Errorf("error reading 'service': %w", err)
		}
	}

	if raw, found := object["task_type"]; found {
		err = json.Unmarshal(raw, &t.TaskType)
		if err != nil {
			return fmt.Errorf("error reading 'task_type': %w", err)
		}
	}

	return err
}

// AsGetGithubCommitsTaskParams0 returns the union data inside the GetGithubCommitsTaskParams as a GetGithubCommitsTaskParams0
func (t GetGithubCommitsTaskParams) AsGetGithubCommitsTaskParams0() (GetGithubCommitsTaskParams0, error) {
	var body GetGithubCommitsTaskParams0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetGithubCommitsTaskParams0 overwrites any union data inside the GetGithubCommitsTaskParams as the provided GetGithubCommitsTaskParams0
func (t *GetGithubCommitsTaskParams) FromGetGithubCommitsTaskParams0(v GetGithubCommitsTaskParams0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetGithubCommitsTaskParams0 performs a merge with any union data inside the GetGithubCommitsTaskParams, using the provided GetGithubCommitsTaskParams0
func (t *GetGithubCommitsTaskParams) MergeGetGithubCommitsTaskParams0(v GetGithubCommitsTaskParams0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetGithubCommitsTaskParams1 returns the union data inside the GetGithubCommitsTaskParams as a GetGithubCommitsTaskParams1
func (t GetGithubCommitsTaskParams) AsGetGithubCommitsTaskParams1() (GetGithubCommitsTaskParams1, error) {
	var body GetGithubCommitsTaskParams1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetGithubCommitsTaskParams1 overwrites any union data inside the GetGithubCommitsTaskParams as the provided GetGithubCommitsTaskParams1
func (t *GetGithubCommitsTaskParams) FromGetGithubCommitsTaskParams1(v GetGithubCommitsTaskParams1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetGithubCommitsTaskParams1 performs a merge with any union data inside the GetGithubCommitsTaskParams, using the provided GetGithubCommitsTaskParams1
func (t *GetGithubCommitsTaskParams) MergeGetGithubCommitsTaskParams1(v GetGithubCommitsTaskParams1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetGithubCommitsTaskParams) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["branch"], err = json.Marshal(t.Branch)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'branch': %w", err)
	}

	if t.GithubRepositoryNames != nil {
		object["github_repository_names"], err = json.Marshal(t.GithubRepositoryNames)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'github_repository_names': %w", err)
		}
	}

	object["past_duration"], err = json.Marshal(t.PastDuration)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'past_duration': %w", err)
	}

	if t.PostToIncidentTimeline != nil {
		object["post_to_incident_timeline"], err = json.Marshal(t.PostToIncidentTimeline)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'post_to_incident_timeline': %w", err)
		}
	}

	if t.PostToSlackChannels != nil {
		object["post_to_slack_channels"], err = json.Marshal(t.PostToSlackChannels)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'post_to_slack_channels': %w", err)
		}
	}

	if t.ServiceIds != nil {
		object["service_ids"], err = json.Marshal(t.ServiceIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'service_ids': %w", err)
		}
	}

	if t.ServicesImpactedByIncident != nil {
		object["services_impacted_by_incident"], err = json.Marshal(t.ServicesImpactedByIncident)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'services_impacted_by_incident': %w", err)
		}
	}

	if t.TaskType != nil {
		object["task_type"], err = json.Marshal(t.TaskType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'task_type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *GetGithubCommitsTaskParams) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["branch"]; found {
		err = json.Unmarshal(raw, &t.Branch)
		if err != nil {
			return fmt.Errorf("error reading 'branch': %w", err)
		}
	}

	if raw, found := object["github_repository_names"]; found {
		err = json.Unmarshal(raw, &t.GithubRepositoryNames)
		if err != nil {
			return fmt.Errorf("error reading 'github_repository_names': %w", err)
		}
	}

	if raw, found := object["past_duration"]; found {
		err = json.Unmarshal(raw, &t.PastDuration)
		if err != nil {
			return fmt.Errorf("error reading 'past_duration': %w", err)
		}
	}

	if raw, found := object["post_to_incident_timeline"]; found {
		err = json.Unmarshal(raw, &t.PostToIncidentTimeline)
		if err != nil {
			return fmt.Errorf("error reading 'post_to_incident_timeline': %w", err)
		}
	}

	if raw, found := object["post_to_slack_channels"]; found {
		err = json.Unmarshal(raw, &t.PostToSlackChannels)
		if err != nil {
			return fmt.Errorf("error reading 'post_to_slack_channels': %w", err)
		}
	}

	if raw, found := object["service_ids"]; found {
		err = json.Unmarshal(raw, &t.ServiceIds)
		if err != nil {
			return fmt.Errorf("error reading 'service_ids': %w", err)
		}
	}

	if raw, found := object["services_impacted_by_incident"]; found {
		err = json.Unmarshal(raw, &t.ServicesImpactedByIncident)
		if err != nil {
			return fmt.Errorf("error reading 'services_impacted_by_incident': %w", err)
		}
	}

	if raw, found := object["task_type"]; found {
		err = json.Unmarshal(raw, &t.TaskType)
		if err != nil {
			return fmt.Errorf("error reading 'task_type': %w", err)
		}
	}

	return err
}

// AsGetGitlabCommitsTaskParams0 returns the union data inside the GetGitlabCommitsTaskParams as a GetGitlabCommitsTaskParams0
func (t GetGitlabCommitsTaskParams) AsGetGitlabCommitsTaskParams0() (GetGitlabCommitsTaskParams0, error) {
	var body GetGitlabCommitsTaskParams0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetGitlabCommitsTaskParams0 overwrites any union data inside the GetGitlabCommitsTaskParams as the provided GetGitlabCommitsTaskParams0
func (t *GetGitlabCommitsTaskParams) FromGetGitlabCommitsTaskParams0(v GetGitlabCommitsTaskParams0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetGitlabCommitsTaskParams0 performs a merge with any union data inside the GetGitlabCommitsTaskParams, using the provided GetGitlabCommitsTaskParams0
func (t *GetGitlabCommitsTaskParams) MergeGetGitlabCommitsTaskParams0(v GetGitlabCommitsTaskParams0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetGitlabCommitsTaskParams1 returns the union data inside the GetGitlabCommitsTaskParams as a GetGitlabCommitsTaskParams1
func (t GetGitlabCommitsTaskParams) AsGetGitlabCommitsTaskParams1() (GetGitlabCommitsTaskParams1, error) {
	var body GetGitlabCommitsTaskParams1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetGitlabCommitsTaskParams1 overwrites any union data inside the GetGitlabCommitsTaskParams as the provided GetGitlabCommitsTaskParams1
func (t *GetGitlabCommitsTaskParams) FromGetGitlabCommitsTaskParams1(v GetGitlabCommitsTaskParams1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetGitlabCommitsTaskParams1 performs a merge with any union data inside the GetGitlabCommitsTaskParams, using the provided GetGitlabCommitsTaskParams1
func (t *GetGitlabCommitsTaskParams) MergeGetGitlabCommitsTaskParams1(v GetGitlabCommitsTaskParams1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetGitlabCommitsTaskParams) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["branch"], err = json.Marshal(t.Branch)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'branch': %w", err)
	}

	if t.GitlabRepositoryNames != nil {
		object["gitlab_repository_names"], err = json.Marshal(t.GitlabRepositoryNames)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gitlab_repository_names': %w", err)
		}
	}

	object["past_duration"], err = json.Marshal(t.PastDuration)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'past_duration': %w", err)
	}

	if t.PostToIncidentTimeline != nil {
		object["post_to_incident_timeline"], err = json.Marshal(t.PostToIncidentTimeline)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'post_to_incident_timeline': %w", err)
		}
	}

	if t.PostToSlackChannels != nil {
		object["post_to_slack_channels"], err = json.Marshal(t.PostToSlackChannels)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'post_to_slack_channels': %w", err)
		}
	}

	if t.ServiceIds != nil {
		object["service_ids"], err = json.Marshal(t.ServiceIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'service_ids': %w", err)
		}
	}

	if t.ServicesImpactedByIncident != nil {
		object["services_impacted_by_incident"], err = json.Marshal(t.ServicesImpactedByIncident)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'services_impacted_by_incident': %w", err)
		}
	}

	if t.TaskType != nil {
		object["task_type"], err = json.Marshal(t.TaskType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'task_type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *GetGitlabCommitsTaskParams) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["branch"]; found {
		err = json.Unmarshal(raw, &t.Branch)
		if err != nil {
			return fmt.Errorf("error reading 'branch': %w", err)
		}
	}

	if raw, found := object["gitlab_repository_names"]; found {
		err = json.Unmarshal(raw, &t.GitlabRepositoryNames)
		if err != nil {
			return fmt.Errorf("error reading 'gitlab_repository_names': %w", err)
		}
	}

	if raw, found := object["past_duration"]; found {
		err = json.Unmarshal(raw, &t.PastDuration)
		if err != nil {
			return fmt.Errorf("error reading 'past_duration': %w", err)
		}
	}

	if raw, found := object["post_to_incident_timeline"]; found {
		err = json.Unmarshal(raw, &t.PostToIncidentTimeline)
		if err != nil {
			return fmt.Errorf("error reading 'post_to_incident_timeline': %w", err)
		}
	}

	if raw, found := object["post_to_slack_channels"]; found {
		err = json.Unmarshal(raw, &t.PostToSlackChannels)
		if err != nil {
			return fmt.Errorf("error reading 'post_to_slack_channels': %w", err)
		}
	}

	if raw, found := object["service_ids"]; found {
		err = json.Unmarshal(raw, &t.ServiceIds)
		if err != nil {
			return fmt.Errorf("error reading 'service_ids': %w", err)
		}
	}

	if raw, found := object["services_impacted_by_incident"]; found {
		err = json.Unmarshal(raw, &t.ServicesImpactedByIncident)
		if err != nil {
			return fmt.Errorf("error reading 'services_impacted_by_incident': %w", err)
		}
	}

	if raw, found := object["task_type"]; found {
		err = json.Unmarshal(raw, &t.TaskType)
		if err != nil {
			return fmt.Errorf("error reading 'task_type': %w", err)
		}
	}

	return err
}

// AsIncidentTriggerParamsIncidentConditionAcknowledgedAt0 returns the union data inside the IncidentTriggerParams_IncidentConditionAcknowledgedAt as a IncidentTriggerParamsIncidentConditionAcknowledgedAt0
func (t IncidentTriggerParams_IncidentConditionAcknowledgedAt) AsIncidentTriggerParamsIncidentConditionAcknowledgedAt0() (IncidentTriggerParamsIncidentConditionAcknowledgedAt0, error) {
	var body IncidentTriggerParamsIncidentConditionAcknowledgedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentTriggerParamsIncidentConditionAcknowledgedAt0 overwrites any union data inside the IncidentTriggerParams_IncidentConditionAcknowledgedAt as the provided IncidentTriggerParamsIncidentConditionAcknowledgedAt0
func (t *IncidentTriggerParams_IncidentConditionAcknowledgedAt) FromIncidentTriggerParamsIncidentConditionAcknowledgedAt0(v IncidentTriggerParamsIncidentConditionAcknowledgedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentTriggerParamsIncidentConditionAcknowledgedAt0 performs a merge with any union data inside the IncidentTriggerParams_IncidentConditionAcknowledgedAt, using the provided IncidentTriggerParamsIncidentConditionAcknowledgedAt0
func (t *IncidentTriggerParams_IncidentConditionAcknowledgedAt) MergeIncidentTriggerParamsIncidentConditionAcknowledgedAt0(v IncidentTriggerParamsIncidentConditionAcknowledgedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIncidentTriggerParamsIncidentConditionAcknowledgedAt1 returns the union data inside the IncidentTriggerParams_IncidentConditionAcknowledgedAt as a IncidentTriggerParamsIncidentConditionAcknowledgedAt1
func (t IncidentTriggerParams_IncidentConditionAcknowledgedAt) AsIncidentTriggerParamsIncidentConditionAcknowledgedAt1() (IncidentTriggerParamsIncidentConditionAcknowledgedAt1, error) {
	var body IncidentTriggerParamsIncidentConditionAcknowledgedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentTriggerParamsIncidentConditionAcknowledgedAt1 overwrites any union data inside the IncidentTriggerParams_IncidentConditionAcknowledgedAt as the provided IncidentTriggerParamsIncidentConditionAcknowledgedAt1
func (t *IncidentTriggerParams_IncidentConditionAcknowledgedAt) FromIncidentTriggerParamsIncidentConditionAcknowledgedAt1(v IncidentTriggerParamsIncidentConditionAcknowledgedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentTriggerParamsIncidentConditionAcknowledgedAt1 performs a merge with any union data inside the IncidentTriggerParams_IncidentConditionAcknowledgedAt, using the provided IncidentTriggerParamsIncidentConditionAcknowledgedAt1
func (t *IncidentTriggerParams_IncidentConditionAcknowledgedAt) MergeIncidentTriggerParamsIncidentConditionAcknowledgedAt1(v IncidentTriggerParamsIncidentConditionAcknowledgedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IncidentTriggerParams_IncidentConditionAcknowledgedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IncidentTriggerParams_IncidentConditionAcknowledgedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIncidentTriggerParamsIncidentConditionDetectedAt0 returns the union data inside the IncidentTriggerParams_IncidentConditionDetectedAt as a IncidentTriggerParamsIncidentConditionDetectedAt0
func (t IncidentTriggerParams_IncidentConditionDetectedAt) AsIncidentTriggerParamsIncidentConditionDetectedAt0() (IncidentTriggerParamsIncidentConditionDetectedAt0, error) {
	var body IncidentTriggerParamsIncidentConditionDetectedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentTriggerParamsIncidentConditionDetectedAt0 overwrites any union data inside the IncidentTriggerParams_IncidentConditionDetectedAt as the provided IncidentTriggerParamsIncidentConditionDetectedAt0
func (t *IncidentTriggerParams_IncidentConditionDetectedAt) FromIncidentTriggerParamsIncidentConditionDetectedAt0(v IncidentTriggerParamsIncidentConditionDetectedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentTriggerParamsIncidentConditionDetectedAt0 performs a merge with any union data inside the IncidentTriggerParams_IncidentConditionDetectedAt, using the provided IncidentTriggerParamsIncidentConditionDetectedAt0
func (t *IncidentTriggerParams_IncidentConditionDetectedAt) MergeIncidentTriggerParamsIncidentConditionDetectedAt0(v IncidentTriggerParamsIncidentConditionDetectedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIncidentTriggerParamsIncidentConditionDetectedAt1 returns the union data inside the IncidentTriggerParams_IncidentConditionDetectedAt as a IncidentTriggerParamsIncidentConditionDetectedAt1
func (t IncidentTriggerParams_IncidentConditionDetectedAt) AsIncidentTriggerParamsIncidentConditionDetectedAt1() (IncidentTriggerParamsIncidentConditionDetectedAt1, error) {
	var body IncidentTriggerParamsIncidentConditionDetectedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentTriggerParamsIncidentConditionDetectedAt1 overwrites any union data inside the IncidentTriggerParams_IncidentConditionDetectedAt as the provided IncidentTriggerParamsIncidentConditionDetectedAt1
func (t *IncidentTriggerParams_IncidentConditionDetectedAt) FromIncidentTriggerParamsIncidentConditionDetectedAt1(v IncidentTriggerParamsIncidentConditionDetectedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentTriggerParamsIncidentConditionDetectedAt1 performs a merge with any union data inside the IncidentTriggerParams_IncidentConditionDetectedAt, using the provided IncidentTriggerParamsIncidentConditionDetectedAt1
func (t *IncidentTriggerParams_IncidentConditionDetectedAt) MergeIncidentTriggerParamsIncidentConditionDetectedAt1(v IncidentTriggerParamsIncidentConditionDetectedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IncidentTriggerParams_IncidentConditionDetectedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IncidentTriggerParams_IncidentConditionDetectedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIncidentTriggerParamsIncidentConditionMitigatedAt0 returns the union data inside the IncidentTriggerParams_IncidentConditionMitigatedAt as a IncidentTriggerParamsIncidentConditionMitigatedAt0
func (t IncidentTriggerParams_IncidentConditionMitigatedAt) AsIncidentTriggerParamsIncidentConditionMitigatedAt0() (IncidentTriggerParamsIncidentConditionMitigatedAt0, error) {
	var body IncidentTriggerParamsIncidentConditionMitigatedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentTriggerParamsIncidentConditionMitigatedAt0 overwrites any union data inside the IncidentTriggerParams_IncidentConditionMitigatedAt as the provided IncidentTriggerParamsIncidentConditionMitigatedAt0
func (t *IncidentTriggerParams_IncidentConditionMitigatedAt) FromIncidentTriggerParamsIncidentConditionMitigatedAt0(v IncidentTriggerParamsIncidentConditionMitigatedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentTriggerParamsIncidentConditionMitigatedAt0 performs a merge with any union data inside the IncidentTriggerParams_IncidentConditionMitigatedAt, using the provided IncidentTriggerParamsIncidentConditionMitigatedAt0
func (t *IncidentTriggerParams_IncidentConditionMitigatedAt) MergeIncidentTriggerParamsIncidentConditionMitigatedAt0(v IncidentTriggerParamsIncidentConditionMitigatedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIncidentTriggerParamsIncidentConditionMitigatedAt1 returns the union data inside the IncidentTriggerParams_IncidentConditionMitigatedAt as a IncidentTriggerParamsIncidentConditionMitigatedAt1
func (t IncidentTriggerParams_IncidentConditionMitigatedAt) AsIncidentTriggerParamsIncidentConditionMitigatedAt1() (IncidentTriggerParamsIncidentConditionMitigatedAt1, error) {
	var body IncidentTriggerParamsIncidentConditionMitigatedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentTriggerParamsIncidentConditionMitigatedAt1 overwrites any union data inside the IncidentTriggerParams_IncidentConditionMitigatedAt as the provided IncidentTriggerParamsIncidentConditionMitigatedAt1
func (t *IncidentTriggerParams_IncidentConditionMitigatedAt) FromIncidentTriggerParamsIncidentConditionMitigatedAt1(v IncidentTriggerParamsIncidentConditionMitigatedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentTriggerParamsIncidentConditionMitigatedAt1 performs a merge with any union data inside the IncidentTriggerParams_IncidentConditionMitigatedAt, using the provided IncidentTriggerParamsIncidentConditionMitigatedAt1
func (t *IncidentTriggerParams_IncidentConditionMitigatedAt) MergeIncidentTriggerParamsIncidentConditionMitigatedAt1(v IncidentTriggerParamsIncidentConditionMitigatedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IncidentTriggerParams_IncidentConditionMitigatedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IncidentTriggerParams_IncidentConditionMitigatedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIncidentTriggerParamsIncidentConditionResolvedAt0 returns the union data inside the IncidentTriggerParams_IncidentConditionResolvedAt as a IncidentTriggerParamsIncidentConditionResolvedAt0
func (t IncidentTriggerParams_IncidentConditionResolvedAt) AsIncidentTriggerParamsIncidentConditionResolvedAt0() (IncidentTriggerParamsIncidentConditionResolvedAt0, error) {
	var body IncidentTriggerParamsIncidentConditionResolvedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentTriggerParamsIncidentConditionResolvedAt0 overwrites any union data inside the IncidentTriggerParams_IncidentConditionResolvedAt as the provided IncidentTriggerParamsIncidentConditionResolvedAt0
func (t *IncidentTriggerParams_IncidentConditionResolvedAt) FromIncidentTriggerParamsIncidentConditionResolvedAt0(v IncidentTriggerParamsIncidentConditionResolvedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentTriggerParamsIncidentConditionResolvedAt0 performs a merge with any union data inside the IncidentTriggerParams_IncidentConditionResolvedAt, using the provided IncidentTriggerParamsIncidentConditionResolvedAt0
func (t *IncidentTriggerParams_IncidentConditionResolvedAt) MergeIncidentTriggerParamsIncidentConditionResolvedAt0(v IncidentTriggerParamsIncidentConditionResolvedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIncidentTriggerParamsIncidentConditionResolvedAt1 returns the union data inside the IncidentTriggerParams_IncidentConditionResolvedAt as a IncidentTriggerParamsIncidentConditionResolvedAt1
func (t IncidentTriggerParams_IncidentConditionResolvedAt) AsIncidentTriggerParamsIncidentConditionResolvedAt1() (IncidentTriggerParamsIncidentConditionResolvedAt1, error) {
	var body IncidentTriggerParamsIncidentConditionResolvedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentTriggerParamsIncidentConditionResolvedAt1 overwrites any union data inside the IncidentTriggerParams_IncidentConditionResolvedAt as the provided IncidentTriggerParamsIncidentConditionResolvedAt1
func (t *IncidentTriggerParams_IncidentConditionResolvedAt) FromIncidentTriggerParamsIncidentConditionResolvedAt1(v IncidentTriggerParamsIncidentConditionResolvedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentTriggerParamsIncidentConditionResolvedAt1 performs a merge with any union data inside the IncidentTriggerParams_IncidentConditionResolvedAt, using the provided IncidentTriggerParamsIncidentConditionResolvedAt1
func (t *IncidentTriggerParams_IncidentConditionResolvedAt) MergeIncidentTriggerParamsIncidentConditionResolvedAt1(v IncidentTriggerParamsIncidentConditionResolvedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IncidentTriggerParams_IncidentConditionResolvedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IncidentTriggerParams_IncidentConditionResolvedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIncidentTriggerParamsIncidentConditionStartedAt0 returns the union data inside the IncidentTriggerParams_IncidentConditionStartedAt as a IncidentTriggerParamsIncidentConditionStartedAt0
func (t IncidentTriggerParams_IncidentConditionStartedAt) AsIncidentTriggerParamsIncidentConditionStartedAt0() (IncidentTriggerParamsIncidentConditionStartedAt0, error) {
	var body IncidentTriggerParamsIncidentConditionStartedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentTriggerParamsIncidentConditionStartedAt0 overwrites any union data inside the IncidentTriggerParams_IncidentConditionStartedAt as the provided IncidentTriggerParamsIncidentConditionStartedAt0
func (t *IncidentTriggerParams_IncidentConditionStartedAt) FromIncidentTriggerParamsIncidentConditionStartedAt0(v IncidentTriggerParamsIncidentConditionStartedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentTriggerParamsIncidentConditionStartedAt0 performs a merge with any union data inside the IncidentTriggerParams_IncidentConditionStartedAt, using the provided IncidentTriggerParamsIncidentConditionStartedAt0
func (t *IncidentTriggerParams_IncidentConditionStartedAt) MergeIncidentTriggerParamsIncidentConditionStartedAt0(v IncidentTriggerParamsIncidentConditionStartedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIncidentTriggerParamsIncidentConditionStartedAt1 returns the union data inside the IncidentTriggerParams_IncidentConditionStartedAt as a IncidentTriggerParamsIncidentConditionStartedAt1
func (t IncidentTriggerParams_IncidentConditionStartedAt) AsIncidentTriggerParamsIncidentConditionStartedAt1() (IncidentTriggerParamsIncidentConditionStartedAt1, error) {
	var body IncidentTriggerParamsIncidentConditionStartedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentTriggerParamsIncidentConditionStartedAt1 overwrites any union data inside the IncidentTriggerParams_IncidentConditionStartedAt as the provided IncidentTriggerParamsIncidentConditionStartedAt1
func (t *IncidentTriggerParams_IncidentConditionStartedAt) FromIncidentTriggerParamsIncidentConditionStartedAt1(v IncidentTriggerParamsIncidentConditionStartedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentTriggerParamsIncidentConditionStartedAt1 performs a merge with any union data inside the IncidentTriggerParams_IncidentConditionStartedAt, using the provided IncidentTriggerParamsIncidentConditionStartedAt1
func (t *IncidentTriggerParams_IncidentConditionStartedAt) MergeIncidentTriggerParamsIncidentConditionStartedAt1(v IncidentTriggerParamsIncidentConditionStartedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IncidentTriggerParams_IncidentConditionStartedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IncidentTriggerParams_IncidentConditionStartedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIncidentTriggerParamsIncidentConditionSummary0 returns the union data inside the IncidentTriggerParams_IncidentConditionSummary as a IncidentTriggerParamsIncidentConditionSummary0
func (t IncidentTriggerParams_IncidentConditionSummary) AsIncidentTriggerParamsIncidentConditionSummary0() (IncidentTriggerParamsIncidentConditionSummary0, error) {
	var body IncidentTriggerParamsIncidentConditionSummary0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentTriggerParamsIncidentConditionSummary0 overwrites any union data inside the IncidentTriggerParams_IncidentConditionSummary as the provided IncidentTriggerParamsIncidentConditionSummary0
func (t *IncidentTriggerParams_IncidentConditionSummary) FromIncidentTriggerParamsIncidentConditionSummary0(v IncidentTriggerParamsIncidentConditionSummary0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentTriggerParamsIncidentConditionSummary0 performs a merge with any union data inside the IncidentTriggerParams_IncidentConditionSummary, using the provided IncidentTriggerParamsIncidentConditionSummary0
func (t *IncidentTriggerParams_IncidentConditionSummary) MergeIncidentTriggerParamsIncidentConditionSummary0(v IncidentTriggerParamsIncidentConditionSummary0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIncidentTriggerParamsIncidentConditionSummary1 returns the union data inside the IncidentTriggerParams_IncidentConditionSummary as a IncidentTriggerParamsIncidentConditionSummary1
func (t IncidentTriggerParams_IncidentConditionSummary) AsIncidentTriggerParamsIncidentConditionSummary1() (IncidentTriggerParamsIncidentConditionSummary1, error) {
	var body IncidentTriggerParamsIncidentConditionSummary1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentTriggerParamsIncidentConditionSummary1 overwrites any union data inside the IncidentTriggerParams_IncidentConditionSummary as the provided IncidentTriggerParamsIncidentConditionSummary1
func (t *IncidentTriggerParams_IncidentConditionSummary) FromIncidentTriggerParamsIncidentConditionSummary1(v IncidentTriggerParamsIncidentConditionSummary1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentTriggerParamsIncidentConditionSummary1 performs a merge with any union data inside the IncidentTriggerParams_IncidentConditionSummary, using the provided IncidentTriggerParamsIncidentConditionSummary1
func (t *IncidentTriggerParams_IncidentConditionSummary) MergeIncidentTriggerParamsIncidentConditionSummary1(v IncidentTriggerParamsIncidentConditionSummary1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IncidentTriggerParams_IncidentConditionSummary) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IncidentTriggerParams_IncidentConditionSummary) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIncidentTriggerParamsIncidentConditionalInactivity0 returns the union data inside the IncidentTriggerParams_IncidentConditionalInactivity as a IncidentTriggerParamsIncidentConditionalInactivity0
func (t IncidentTriggerParams_IncidentConditionalInactivity) AsIncidentTriggerParamsIncidentConditionalInactivity0() (IncidentTriggerParamsIncidentConditionalInactivity0, error) {
	var body IncidentTriggerParamsIncidentConditionalInactivity0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentTriggerParamsIncidentConditionalInactivity0 overwrites any union data inside the IncidentTriggerParams_IncidentConditionalInactivity as the provided IncidentTriggerParamsIncidentConditionalInactivity0
func (t *IncidentTriggerParams_IncidentConditionalInactivity) FromIncidentTriggerParamsIncidentConditionalInactivity0(v IncidentTriggerParamsIncidentConditionalInactivity0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentTriggerParamsIncidentConditionalInactivity0 performs a merge with any union data inside the IncidentTriggerParams_IncidentConditionalInactivity, using the provided IncidentTriggerParamsIncidentConditionalInactivity0
func (t *IncidentTriggerParams_IncidentConditionalInactivity) MergeIncidentTriggerParamsIncidentConditionalInactivity0(v IncidentTriggerParamsIncidentConditionalInactivity0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIncidentTriggerParamsIncidentConditionalInactivity1 returns the union data inside the IncidentTriggerParams_IncidentConditionalInactivity as a IncidentTriggerParamsIncidentConditionalInactivity1
func (t IncidentTriggerParams_IncidentConditionalInactivity) AsIncidentTriggerParamsIncidentConditionalInactivity1() (IncidentTriggerParamsIncidentConditionalInactivity1, error) {
	var body IncidentTriggerParamsIncidentConditionalInactivity1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentTriggerParamsIncidentConditionalInactivity1 overwrites any union data inside the IncidentTriggerParams_IncidentConditionalInactivity as the provided IncidentTriggerParamsIncidentConditionalInactivity1
func (t *IncidentTriggerParams_IncidentConditionalInactivity) FromIncidentTriggerParamsIncidentConditionalInactivity1(v IncidentTriggerParamsIncidentConditionalInactivity1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentTriggerParamsIncidentConditionalInactivity1 performs a merge with any union data inside the IncidentTriggerParams_IncidentConditionalInactivity, using the provided IncidentTriggerParamsIncidentConditionalInactivity1
func (t *IncidentTriggerParams_IncidentConditionalInactivity) MergeIncidentTriggerParamsIncidentConditionalInactivity1(v IncidentTriggerParamsIncidentConditionalInactivity1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IncidentTriggerParams_IncidentConditionalInactivity) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IncidentTriggerParams_IncidentConditionalInactivity) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIncidentTriggerParamsIncidentInactivityDuration0 returns the union data inside the IncidentTriggerParams_IncidentInactivityDuration as a IncidentTriggerParamsIncidentInactivityDuration0
func (t IncidentTriggerParams_IncidentInactivityDuration) AsIncidentTriggerParamsIncidentInactivityDuration0() (IncidentTriggerParamsIncidentInactivityDuration0, error) {
	var body IncidentTriggerParamsIncidentInactivityDuration0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentTriggerParamsIncidentInactivityDuration0 overwrites any union data inside the IncidentTriggerParams_IncidentInactivityDuration as the provided IncidentTriggerParamsIncidentInactivityDuration0
func (t *IncidentTriggerParams_IncidentInactivityDuration) FromIncidentTriggerParamsIncidentInactivityDuration0(v IncidentTriggerParamsIncidentInactivityDuration0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentTriggerParamsIncidentInactivityDuration0 performs a merge with any union data inside the IncidentTriggerParams_IncidentInactivityDuration, using the provided IncidentTriggerParamsIncidentInactivityDuration0
func (t *IncidentTriggerParams_IncidentInactivityDuration) MergeIncidentTriggerParamsIncidentInactivityDuration0(v IncidentTriggerParamsIncidentInactivityDuration0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIncidentTriggerParamsIncidentInactivityDuration1 returns the union data inside the IncidentTriggerParams_IncidentInactivityDuration as a IncidentTriggerParamsIncidentInactivityDuration1
func (t IncidentTriggerParams_IncidentInactivityDuration) AsIncidentTriggerParamsIncidentInactivityDuration1() (IncidentTriggerParamsIncidentInactivityDuration1, error) {
	var body IncidentTriggerParamsIncidentInactivityDuration1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentTriggerParamsIncidentInactivityDuration1 overwrites any union data inside the IncidentTriggerParams_IncidentInactivityDuration as the provided IncidentTriggerParamsIncidentInactivityDuration1
func (t *IncidentTriggerParams_IncidentInactivityDuration) FromIncidentTriggerParamsIncidentInactivityDuration1(v IncidentTriggerParamsIncidentInactivityDuration1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentTriggerParamsIncidentInactivityDuration1 performs a merge with any union data inside the IncidentTriggerParams_IncidentInactivityDuration, using the provided IncidentTriggerParamsIncidentInactivityDuration1
func (t *IncidentTriggerParams_IncidentInactivityDuration) MergeIncidentTriggerParamsIncidentInactivityDuration1(v IncidentTriggerParamsIncidentInactivityDuration1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IncidentTriggerParams_IncidentInactivityDuration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IncidentTriggerParams_IncidentInactivityDuration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInviteToSlackChannelPagerdutyTaskParams0 returns the union data inside the InviteToSlackChannelPagerdutyTaskParams as a InviteToSlackChannelPagerdutyTaskParams0
func (t InviteToSlackChannelPagerdutyTaskParams) AsInviteToSlackChannelPagerdutyTaskParams0() (InviteToSlackChannelPagerdutyTaskParams0, error) {
	var body InviteToSlackChannelPagerdutyTaskParams0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToSlackChannelPagerdutyTaskParams0 overwrites any union data inside the InviteToSlackChannelPagerdutyTaskParams as the provided InviteToSlackChannelPagerdutyTaskParams0
func (t *InviteToSlackChannelPagerdutyTaskParams) FromInviteToSlackChannelPagerdutyTaskParams0(v InviteToSlackChannelPagerdutyTaskParams0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToSlackChannelPagerdutyTaskParams0 performs a merge with any union data inside the InviteToSlackChannelPagerdutyTaskParams, using the provided InviteToSlackChannelPagerdutyTaskParams0
func (t *InviteToSlackChannelPagerdutyTaskParams) MergeInviteToSlackChannelPagerdutyTaskParams0(v InviteToSlackChannelPagerdutyTaskParams0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInviteToSlackChannelPagerdutyTaskParams1 returns the union data inside the InviteToSlackChannelPagerdutyTaskParams as a InviteToSlackChannelPagerdutyTaskParams1
func (t InviteToSlackChannelPagerdutyTaskParams) AsInviteToSlackChannelPagerdutyTaskParams1() (InviteToSlackChannelPagerdutyTaskParams1, error) {
	var body InviteToSlackChannelPagerdutyTaskParams1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToSlackChannelPagerdutyTaskParams1 overwrites any union data inside the InviteToSlackChannelPagerdutyTaskParams as the provided InviteToSlackChannelPagerdutyTaskParams1
func (t *InviteToSlackChannelPagerdutyTaskParams) FromInviteToSlackChannelPagerdutyTaskParams1(v InviteToSlackChannelPagerdutyTaskParams1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToSlackChannelPagerdutyTaskParams1 performs a merge with any union data inside the InviteToSlackChannelPagerdutyTaskParams, using the provided InviteToSlackChannelPagerdutyTaskParams1
func (t *InviteToSlackChannelPagerdutyTaskParams) MergeInviteToSlackChannelPagerdutyTaskParams1(v InviteToSlackChannelPagerdutyTaskParams1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InviteToSlackChannelPagerdutyTaskParams) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Channels != nil {
		object["channels"], err = json.Marshal(t.Channels)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'channels': %w", err)
		}
	}

	if t.EscalationPolicy != nil {
		object["escalation_policy"], err = json.Marshal(t.EscalationPolicy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'escalation_policy': %w", err)
		}
	}

	if t.Schedule != nil {
		object["schedule"], err = json.Marshal(t.Schedule)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'schedule': %w", err)
		}
	}

	if t.Service != nil {
		object["service"], err = json.Marshal(t.Service)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'service': %w", err)
		}
	}

	if t.TaskType != nil {
		object["task_type"], err = json.Marshal(t.TaskType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'task_type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *InviteToSlackChannelPagerdutyTaskParams) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["channels"]; found {
		err = json.Unmarshal(raw, &t.Channels)
		if err != nil {
			return fmt.Errorf("error reading 'channels': %w", err)
		}
	}

	if raw, found := object["escalation_policy"]; found {
		err = json.Unmarshal(raw, &t.EscalationPolicy)
		if err != nil {
			return fmt.Errorf("error reading 'escalation_policy': %w", err)
		}
	}

	if raw, found := object["schedule"]; found {
		err = json.Unmarshal(raw, &t.Schedule)
		if err != nil {
			return fmt.Errorf("error reading 'schedule': %w", err)
		}
	}

	if raw, found := object["service"]; found {
		err = json.Unmarshal(raw, &t.Service)
		if err != nil {
			return fmt.Errorf("error reading 'service': %w", err)
		}
	}

	if raw, found := object["task_type"]; found {
		err = json.Unmarshal(raw, &t.TaskType)
		if err != nil {
			return fmt.Errorf("error reading 'task_type': %w", err)
		}
	}

	return err
}

// AsInviteToSlackChannelTaskParams0 returns the union data inside the InviteToSlackChannelTaskParams as a InviteToSlackChannelTaskParams0
func (t InviteToSlackChannelTaskParams) AsInviteToSlackChannelTaskParams0() (InviteToSlackChannelTaskParams0, error) {
	var body InviteToSlackChannelTaskParams0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToSlackChannelTaskParams0 overwrites any union data inside the InviteToSlackChannelTaskParams as the provided InviteToSlackChannelTaskParams0
func (t *InviteToSlackChannelTaskParams) FromInviteToSlackChannelTaskParams0(v InviteToSlackChannelTaskParams0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToSlackChannelTaskParams0 performs a merge with any union data inside the InviteToSlackChannelTaskParams, using the provided InviteToSlackChannelTaskParams0
func (t *InviteToSlackChannelTaskParams) MergeInviteToSlackChannelTaskParams0(v InviteToSlackChannelTaskParams0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInviteToSlackChannelTaskParams1 returns the union data inside the InviteToSlackChannelTaskParams as a InviteToSlackChannelTaskParams1
func (t InviteToSlackChannelTaskParams) AsInviteToSlackChannelTaskParams1() (InviteToSlackChannelTaskParams1, error) {
	var body InviteToSlackChannelTaskParams1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToSlackChannelTaskParams1 overwrites any union data inside the InviteToSlackChannelTaskParams as the provided InviteToSlackChannelTaskParams1
func (t *InviteToSlackChannelTaskParams) FromInviteToSlackChannelTaskParams1(v InviteToSlackChannelTaskParams1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToSlackChannelTaskParams1 performs a merge with any union data inside the InviteToSlackChannelTaskParams, using the provided InviteToSlackChannelTaskParams1
func (t *InviteToSlackChannelTaskParams) MergeInviteToSlackChannelTaskParams1(v InviteToSlackChannelTaskParams1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InviteToSlackChannelTaskParams) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["channel"], err = json.Marshal(t.Channel)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'channel': %w", err)
	}

	if t.SlackUserGroups != nil {
		object["slack_user_groups"], err = json.Marshal(t.SlackUserGroups)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'slack_user_groups': %w", err)
		}
	}

	if t.SlackUsers != nil {
		object["slack_users"], err = json.Marshal(t.SlackUsers)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'slack_users': %w", err)
		}
	}

	if t.TaskType != nil {
		object["task_type"], err = json.Marshal(t.TaskType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'task_type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *InviteToSlackChannelTaskParams) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["channel"]; found {
		err = json.Unmarshal(raw, &t.Channel)
		if err != nil {
			return fmt.Errorf("error reading 'channel': %w", err)
		}
	}

	if raw, found := object["slack_user_groups"]; found {
		err = json.Unmarshal(raw, &t.SlackUserGroups)
		if err != nil {
			return fmt.Errorf("error reading 'slack_user_groups': %w", err)
		}
	}

	if raw, found := object["slack_users"]; found {
		err = json.Unmarshal(raw, &t.SlackUsers)
		if err != nil {
			return fmt.Errorf("error reading 'slack_users': %w", err)
		}
	}

	if raw, found := object["task_type"]; found {
		err = json.Unmarshal(raw, &t.TaskType)
		if err != nil {
			return fmt.Errorf("error reading 'task_type': %w", err)
		}
	}

	return err
}

// AsIncidentTriggerParams returns the union data inside the NewWorkflow_Data_Attributes_TriggerParams as a IncidentTriggerParams
func (t NewWorkflow_Data_Attributes_TriggerParams) AsIncidentTriggerParams() (IncidentTriggerParams, error) {
	var body IncidentTriggerParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentTriggerParams overwrites any union data inside the NewWorkflow_Data_Attributes_TriggerParams as the provided IncidentTriggerParams
func (t *NewWorkflow_Data_Attributes_TriggerParams) FromIncidentTriggerParams(v IncidentTriggerParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentTriggerParams performs a merge with any union data inside the NewWorkflow_Data_Attributes_TriggerParams, using the provided IncidentTriggerParams
func (t *NewWorkflow_Data_Attributes_TriggerParams) MergeIncidentTriggerParams(v IncidentTriggerParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionItemTriggerParams returns the union data inside the NewWorkflow_Data_Attributes_TriggerParams as a ActionItemTriggerParams
func (t NewWorkflow_Data_Attributes_TriggerParams) AsActionItemTriggerParams() (ActionItemTriggerParams, error) {
	var body ActionItemTriggerParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionItemTriggerParams overwrites any union data inside the NewWorkflow_Data_Attributes_TriggerParams as the provided ActionItemTriggerParams
func (t *NewWorkflow_Data_Attributes_TriggerParams) FromActionItemTriggerParams(v ActionItemTriggerParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionItemTriggerParams performs a merge with any union data inside the NewWorkflow_Data_Attributes_TriggerParams, using the provided ActionItemTriggerParams
func (t *NewWorkflow_Data_Attributes_TriggerParams) MergeActionItemTriggerParams(v ActionItemTriggerParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAlertTriggerParams returns the union data inside the NewWorkflow_Data_Attributes_TriggerParams as a AlertTriggerParams
func (t NewWorkflow_Data_Attributes_TriggerParams) AsAlertTriggerParams() (AlertTriggerParams, error) {
	var body AlertTriggerParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAlertTriggerParams overwrites any union data inside the NewWorkflow_Data_Attributes_TriggerParams as the provided AlertTriggerParams
func (t *NewWorkflow_Data_Attributes_TriggerParams) FromAlertTriggerParams(v AlertTriggerParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAlertTriggerParams performs a merge with any union data inside the NewWorkflow_Data_Attributes_TriggerParams, using the provided AlertTriggerParams
func (t *NewWorkflow_Data_Attributes_TriggerParams) MergeAlertTriggerParams(v AlertTriggerParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPulseTriggerParams returns the union data inside the NewWorkflow_Data_Attributes_TriggerParams as a PulseTriggerParams
func (t NewWorkflow_Data_Attributes_TriggerParams) AsPulseTriggerParams() (PulseTriggerParams, error) {
	var body PulseTriggerParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPulseTriggerParams overwrites any union data inside the NewWorkflow_Data_Attributes_TriggerParams as the provided PulseTriggerParams
func (t *NewWorkflow_Data_Attributes_TriggerParams) FromPulseTriggerParams(v PulseTriggerParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePulseTriggerParams performs a merge with any union data inside the NewWorkflow_Data_Attributes_TriggerParams, using the provided PulseTriggerParams
func (t *NewWorkflow_Data_Attributes_TriggerParams) MergePulseTriggerParams(v PulseTriggerParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSimpleTriggerParams returns the union data inside the NewWorkflow_Data_Attributes_TriggerParams as a SimpleTriggerParams
func (t NewWorkflow_Data_Attributes_TriggerParams) AsSimpleTriggerParams() (SimpleTriggerParams, error) {
	var body SimpleTriggerParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSimpleTriggerParams overwrites any union data inside the NewWorkflow_Data_Attributes_TriggerParams as the provided SimpleTriggerParams
func (t *NewWorkflow_Data_Attributes_TriggerParams) FromSimpleTriggerParams(v SimpleTriggerParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSimpleTriggerParams performs a merge with any union data inside the NewWorkflow_Data_Attributes_TriggerParams, using the provided SimpleTriggerParams
func (t *NewWorkflow_Data_Attributes_TriggerParams) MergeSimpleTriggerParams(v SimpleTriggerParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NewWorkflow_Data_Attributes_TriggerParams) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NewWorkflow_Data_Attributes_TriggerParams) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNewWorkflowRunDataAttributes0 returns the union data inside the NewWorkflowRun_Data_Attributes as a NewWorkflowRunDataAttributes0
func (t NewWorkflowRun_Data_Attributes) AsNewWorkflowRunDataAttributes0() (NewWorkflowRunDataAttributes0, error) {
	var body NewWorkflowRunDataAttributes0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewWorkflowRunDataAttributes0 overwrites any union data inside the NewWorkflowRun_Data_Attributes as the provided NewWorkflowRunDataAttributes0
func (t *NewWorkflowRun_Data_Attributes) FromNewWorkflowRunDataAttributes0(v NewWorkflowRunDataAttributes0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewWorkflowRunDataAttributes0 performs a merge with any union data inside the NewWorkflowRun_Data_Attributes, using the provided NewWorkflowRunDataAttributes0
func (t *NewWorkflowRun_Data_Attributes) MergeNewWorkflowRunDataAttributes0(v NewWorkflowRunDataAttributes0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewWorkflowRunDataAttributes1 returns the union data inside the NewWorkflowRun_Data_Attributes as a NewWorkflowRunDataAttributes1
func (t NewWorkflowRun_Data_Attributes) AsNewWorkflowRunDataAttributes1() (NewWorkflowRunDataAttributes1, error) {
	var body NewWorkflowRunDataAttributes1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewWorkflowRunDataAttributes1 overwrites any union data inside the NewWorkflowRun_Data_Attributes as the provided NewWorkflowRunDataAttributes1
func (t *NewWorkflowRun_Data_Attributes) FromNewWorkflowRunDataAttributes1(v NewWorkflowRunDataAttributes1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewWorkflowRunDataAttributes1 performs a merge with any union data inside the NewWorkflowRun_Data_Attributes, using the provided NewWorkflowRunDataAttributes1
func (t *NewWorkflowRun_Data_Attributes) MergeNewWorkflowRunDataAttributes1(v NewWorkflowRunDataAttributes1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewWorkflowRunDataAttributes2 returns the union data inside the NewWorkflowRun_Data_Attributes as a NewWorkflowRunDataAttributes2
func (t NewWorkflowRun_Data_Attributes) AsNewWorkflowRunDataAttributes2() (NewWorkflowRunDataAttributes2, error) {
	var body NewWorkflowRunDataAttributes2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewWorkflowRunDataAttributes2 overwrites any union data inside the NewWorkflowRun_Data_Attributes as the provided NewWorkflowRunDataAttributes2
func (t *NewWorkflowRun_Data_Attributes) FromNewWorkflowRunDataAttributes2(v NewWorkflowRunDataAttributes2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewWorkflowRunDataAttributes2 performs a merge with any union data inside the NewWorkflowRun_Data_Attributes, using the provided NewWorkflowRunDataAttributes2
func (t *NewWorkflowRun_Data_Attributes) MergeNewWorkflowRunDataAttributes2(v NewWorkflowRunDataAttributes2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewWorkflowRunDataAttributes3 returns the union data inside the NewWorkflowRun_Data_Attributes as a NewWorkflowRunDataAttributes3
func (t NewWorkflowRun_Data_Attributes) AsNewWorkflowRunDataAttributes3() (NewWorkflowRunDataAttributes3, error) {
	var body NewWorkflowRunDataAttributes3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewWorkflowRunDataAttributes3 overwrites any union data inside the NewWorkflowRun_Data_Attributes as the provided NewWorkflowRunDataAttributes3
func (t *NewWorkflowRun_Data_Attributes) FromNewWorkflowRunDataAttributes3(v NewWorkflowRunDataAttributes3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewWorkflowRunDataAttributes3 performs a merge with any union data inside the NewWorkflowRun_Data_Attributes, using the provided NewWorkflowRunDataAttributes3
func (t *NewWorkflowRun_Data_Attributes) MergeNewWorkflowRunDataAttributes3(v NewWorkflowRunDataAttributes3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewWorkflowRunDataAttributes4 returns the union data inside the NewWorkflowRun_Data_Attributes as a NewWorkflowRunDataAttributes4
func (t NewWorkflowRun_Data_Attributes) AsNewWorkflowRunDataAttributes4() (NewWorkflowRunDataAttributes4, error) {
	var body NewWorkflowRunDataAttributes4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewWorkflowRunDataAttributes4 overwrites any union data inside the NewWorkflowRun_Data_Attributes as the provided NewWorkflowRunDataAttributes4
func (t *NewWorkflowRun_Data_Attributes) FromNewWorkflowRunDataAttributes4(v NewWorkflowRunDataAttributes4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewWorkflowRunDataAttributes4 performs a merge with any union data inside the NewWorkflowRun_Data_Attributes, using the provided NewWorkflowRunDataAttributes4
func (t *NewWorkflowRun_Data_Attributes) MergeNewWorkflowRunDataAttributes4(v NewWorkflowRunDataAttributes4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewWorkflowRunDataAttributes5 returns the union data inside the NewWorkflowRun_Data_Attributes as a NewWorkflowRunDataAttributes5
func (t NewWorkflowRun_Data_Attributes) AsNewWorkflowRunDataAttributes5() (NewWorkflowRunDataAttributes5, error) {
	var body NewWorkflowRunDataAttributes5
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewWorkflowRunDataAttributes5 overwrites any union data inside the NewWorkflowRun_Data_Attributes as the provided NewWorkflowRunDataAttributes5
func (t *NewWorkflowRun_Data_Attributes) FromNewWorkflowRunDataAttributes5(v NewWorkflowRunDataAttributes5) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewWorkflowRunDataAttributes5 performs a merge with any union data inside the NewWorkflowRun_Data_Attributes, using the provided NewWorkflowRunDataAttributes5
func (t *NewWorkflowRun_Data_Attributes) MergeNewWorkflowRunDataAttributes5(v NewWorkflowRunDataAttributes5) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NewWorkflowRun_Data_Attributes) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NewWorkflowRun_Data_Attributes) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAddActionItemTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a AddActionItemTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsAddActionItemTaskParams() (AddActionItemTaskParams, error) {
	var body AddActionItemTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddActionItemTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided AddActionItemTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromAddActionItemTaskParams(v AddActionItemTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddActionItemTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided AddActionItemTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeAddActionItemTaskParams(v AddActionItemTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateActionItemTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateActionItemTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateActionItemTaskParams() (UpdateActionItemTaskParams, error) {
	var body UpdateActionItemTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateActionItemTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateActionItemTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateActionItemTaskParams(v UpdateActionItemTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateActionItemTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateActionItemTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateActionItemTaskParams(v UpdateActionItemTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAddRoleTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a AddRoleTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsAddRoleTaskParams() (AddRoleTaskParams, error) {
	var body AddRoleTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddRoleTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided AddRoleTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromAddRoleTaskParams(v AddRoleTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddRoleTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided AddRoleTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeAddRoleTaskParams(v AddRoleTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAddSlackBookmarkTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a AddSlackBookmarkTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsAddSlackBookmarkTaskParams() (AddSlackBookmarkTaskParams, error) {
	var body AddSlackBookmarkTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddSlackBookmarkTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided AddSlackBookmarkTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromAddSlackBookmarkTaskParams(v AddSlackBookmarkTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddSlackBookmarkTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided AddSlackBookmarkTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeAddSlackBookmarkTaskParams(v AddSlackBookmarkTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAddTeamTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a AddTeamTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsAddTeamTaskParams() (AddTeamTaskParams, error) {
	var body AddTeamTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddTeamTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided AddTeamTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromAddTeamTaskParams(v AddTeamTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddTeamTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided AddTeamTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeAddTeamTaskParams(v AddTeamTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAddToTimelineTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a AddToTimelineTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsAddToTimelineTaskParams() (AddToTimelineTaskParams, error) {
	var body AddToTimelineTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddToTimelineTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided AddToTimelineTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromAddToTimelineTaskParams(v AddToTimelineTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddToTimelineTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided AddToTimelineTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeAddToTimelineTaskParams(v AddToTimelineTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchiveSlackChannelsTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a ArchiveSlackChannelsTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsArchiveSlackChannelsTaskParams() (ArchiveSlackChannelsTaskParams, error) {
	var body ArchiveSlackChannelsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchiveSlackChannelsTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided ArchiveSlackChannelsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromArchiveSlackChannelsTaskParams(v ArchiveSlackChannelsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchiveSlackChannelsTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided ArchiveSlackChannelsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeArchiveSlackChannelsTaskParams(v ArchiveSlackChannelsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAttachDatadogDashboardsTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a AttachDatadogDashboardsTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsAttachDatadogDashboardsTaskParams() (AttachDatadogDashboardsTaskParams, error) {
	var body AttachDatadogDashboardsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAttachDatadogDashboardsTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided AttachDatadogDashboardsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromAttachDatadogDashboardsTaskParams(v AttachDatadogDashboardsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAttachDatadogDashboardsTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided AttachDatadogDashboardsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeAttachDatadogDashboardsTaskParams(v AttachDatadogDashboardsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAutoAssignRoleOpsgenieTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a AutoAssignRoleOpsgenieTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsAutoAssignRoleOpsgenieTaskParams() (AutoAssignRoleOpsgenieTaskParams, error) {
	var body AutoAssignRoleOpsgenieTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAutoAssignRoleOpsgenieTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided AutoAssignRoleOpsgenieTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromAutoAssignRoleOpsgenieTaskParams(v AutoAssignRoleOpsgenieTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAutoAssignRoleOpsgenieTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided AutoAssignRoleOpsgenieTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeAutoAssignRoleOpsgenieTaskParams(v AutoAssignRoleOpsgenieTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAutoAssignRoleRootlyTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a AutoAssignRoleRootlyTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsAutoAssignRoleRootlyTaskParams() (AutoAssignRoleRootlyTaskParams, error) {
	var body AutoAssignRoleRootlyTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAutoAssignRoleRootlyTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided AutoAssignRoleRootlyTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromAutoAssignRoleRootlyTaskParams(v AutoAssignRoleRootlyTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAutoAssignRoleRootlyTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided AutoAssignRoleRootlyTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeAutoAssignRoleRootlyTaskParams(v AutoAssignRoleRootlyTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAutoAssignRolePagerdutyTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a AutoAssignRolePagerdutyTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsAutoAssignRolePagerdutyTaskParams() (AutoAssignRolePagerdutyTaskParams, error) {
	var body AutoAssignRolePagerdutyTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAutoAssignRolePagerdutyTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided AutoAssignRolePagerdutyTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromAutoAssignRolePagerdutyTaskParams(v AutoAssignRolePagerdutyTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAutoAssignRolePagerdutyTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided AutoAssignRolePagerdutyTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeAutoAssignRolePagerdutyTaskParams(v AutoAssignRolePagerdutyTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdatePagerdutyIncidentTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdatePagerdutyIncidentTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdatePagerdutyIncidentTaskParams() (UpdatePagerdutyIncidentTaskParams, error) {
	var body UpdatePagerdutyIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdatePagerdutyIncidentTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdatePagerdutyIncidentTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdatePagerdutyIncidentTaskParams(v UpdatePagerdutyIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdatePagerdutyIncidentTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdatePagerdutyIncidentTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdatePagerdutyIncidentTaskParams(v UpdatePagerdutyIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreatePagerdutyStatusUpdateTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreatePagerdutyStatusUpdateTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreatePagerdutyStatusUpdateTaskParams() (CreatePagerdutyStatusUpdateTaskParams, error) {
	var body CreatePagerdutyStatusUpdateTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreatePagerdutyStatusUpdateTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreatePagerdutyStatusUpdateTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreatePagerdutyStatusUpdateTaskParams(v CreatePagerdutyStatusUpdateTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreatePagerdutyStatusUpdateTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreatePagerdutyStatusUpdateTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreatePagerdutyStatusUpdateTaskParams(v CreatePagerdutyStatusUpdateTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreatePagertreeAlertTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreatePagertreeAlertTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreatePagertreeAlertTaskParams() (CreatePagertreeAlertTaskParams, error) {
	var body CreatePagertreeAlertTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreatePagertreeAlertTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreatePagertreeAlertTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreatePagertreeAlertTaskParams(v CreatePagertreeAlertTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreatePagertreeAlertTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreatePagertreeAlertTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreatePagertreeAlertTaskParams(v CreatePagertreeAlertTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdatePagertreeAlertTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdatePagertreeAlertTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdatePagertreeAlertTaskParams() (UpdatePagertreeAlertTaskParams, error) {
	var body UpdatePagertreeAlertTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdatePagertreeAlertTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdatePagertreeAlertTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdatePagertreeAlertTaskParams(v UpdatePagertreeAlertTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdatePagertreeAlertTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdatePagertreeAlertTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdatePagertreeAlertTaskParams(v UpdatePagertreeAlertTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAutoAssignRoleVictorOpsTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a AutoAssignRoleVictorOpsTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsAutoAssignRoleVictorOpsTaskParams() (AutoAssignRoleVictorOpsTaskParams, error) {
	var body AutoAssignRoleVictorOpsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAutoAssignRoleVictorOpsTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided AutoAssignRoleVictorOpsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromAutoAssignRoleVictorOpsTaskParams(v AutoAssignRoleVictorOpsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAutoAssignRoleVictorOpsTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided AutoAssignRoleVictorOpsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeAutoAssignRoleVictorOpsTaskParams(v AutoAssignRoleVictorOpsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCallPeopleTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CallPeopleTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCallPeopleTaskParams() (CallPeopleTaskParams, error) {
	var body CallPeopleTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCallPeopleTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CallPeopleTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCallPeopleTaskParams(v CallPeopleTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCallPeopleTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CallPeopleTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCallPeopleTaskParams(v CallPeopleTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateAirtableTableRecordTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateAirtableTableRecordTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateAirtableTableRecordTaskParams() (CreateAirtableTableRecordTaskParams, error) {
	var body CreateAirtableTableRecordTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateAirtableTableRecordTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateAirtableTableRecordTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateAirtableTableRecordTaskParams(v CreateAirtableTableRecordTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateAirtableTableRecordTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateAirtableTableRecordTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateAirtableTableRecordTaskParams(v CreateAirtableTableRecordTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateAsanaSubtaskTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateAsanaSubtaskTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateAsanaSubtaskTaskParams() (CreateAsanaSubtaskTaskParams, error) {
	var body CreateAsanaSubtaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateAsanaSubtaskTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateAsanaSubtaskTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateAsanaSubtaskTaskParams(v CreateAsanaSubtaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateAsanaSubtaskTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateAsanaSubtaskTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateAsanaSubtaskTaskParams(v CreateAsanaSubtaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateAsanaTaskTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateAsanaTaskTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateAsanaTaskTaskParams() (CreateAsanaTaskTaskParams, error) {
	var body CreateAsanaTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateAsanaTaskTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateAsanaTaskTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateAsanaTaskTaskParams(v CreateAsanaTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateAsanaTaskTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateAsanaTaskTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateAsanaTaskTaskParams(v CreateAsanaTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateConfluencePageTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateConfluencePageTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateConfluencePageTaskParams() (CreateConfluencePageTaskParams, error) {
	var body CreateConfluencePageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateConfluencePageTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateConfluencePageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateConfluencePageTaskParams(v CreateConfluencePageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateConfluencePageTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateConfluencePageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateConfluencePageTaskParams(v CreateConfluencePageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateDatadogNotebookTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateDatadogNotebookTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateDatadogNotebookTaskParams() (CreateDatadogNotebookTaskParams, error) {
	var body CreateDatadogNotebookTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateDatadogNotebookTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateDatadogNotebookTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateDatadogNotebookTaskParams(v CreateDatadogNotebookTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateDatadogNotebookTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateDatadogNotebookTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateDatadogNotebookTaskParams(v CreateDatadogNotebookTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateDropboxPaperPageTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateDropboxPaperPageTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateDropboxPaperPageTaskParams() (CreateDropboxPaperPageTaskParams, error) {
	var body CreateDropboxPaperPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateDropboxPaperPageTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateDropboxPaperPageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateDropboxPaperPageTaskParams(v CreateDropboxPaperPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateDropboxPaperPageTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateDropboxPaperPageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateDropboxPaperPageTaskParams(v CreateDropboxPaperPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGithubIssueTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateGithubIssueTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateGithubIssueTaskParams() (CreateGithubIssueTaskParams, error) {
	var body CreateGithubIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGithubIssueTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateGithubIssueTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateGithubIssueTaskParams(v CreateGithubIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGithubIssueTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateGithubIssueTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateGithubIssueTaskParams(v CreateGithubIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGitlabIssueTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateGitlabIssueTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateGitlabIssueTaskParams() (CreateGitlabIssueTaskParams, error) {
	var body CreateGitlabIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGitlabIssueTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateGitlabIssueTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateGitlabIssueTaskParams(v CreateGitlabIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGitlabIssueTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateGitlabIssueTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateGitlabIssueTaskParams(v CreateGitlabIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateOutlookEventTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateOutlookEventTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateOutlookEventTaskParams() (CreateOutlookEventTaskParams, error) {
	var body CreateOutlookEventTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateOutlookEventTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateOutlookEventTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateOutlookEventTaskParams(v CreateOutlookEventTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateOutlookEventTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateOutlookEventTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateOutlookEventTaskParams(v CreateOutlookEventTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGoogleCalendarEventTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateGoogleCalendarEventTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateGoogleCalendarEventTaskParams() (CreateGoogleCalendarEventTaskParams, error) {
	var body CreateGoogleCalendarEventTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGoogleCalendarEventTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateGoogleCalendarEventTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateGoogleCalendarEventTaskParams(v CreateGoogleCalendarEventTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGoogleCalendarEventTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateGoogleCalendarEventTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateGoogleCalendarEventTaskParams(v CreateGoogleCalendarEventTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateGoogleDocsPageTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateGoogleDocsPageTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateGoogleDocsPageTaskParams() (UpdateGoogleDocsPageTaskParams, error) {
	var body UpdateGoogleDocsPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateGoogleDocsPageTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateGoogleDocsPageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateGoogleDocsPageTaskParams(v UpdateGoogleDocsPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateGoogleDocsPageTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateGoogleDocsPageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateGoogleDocsPageTaskParams(v UpdateGoogleDocsPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateGoogleCalendarEventTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateGoogleCalendarEventTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateGoogleCalendarEventTaskParams() (UpdateGoogleCalendarEventTaskParams, error) {
	var body UpdateGoogleCalendarEventTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateGoogleCalendarEventTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateGoogleCalendarEventTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateGoogleCalendarEventTaskParams(v UpdateGoogleCalendarEventTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateGoogleCalendarEventTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateGoogleCalendarEventTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateGoogleCalendarEventTaskParams(v UpdateGoogleCalendarEventTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateSharepointPageTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateSharepointPageTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateSharepointPageTaskParams() (CreateSharepointPageTaskParams, error) {
	var body CreateSharepointPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateSharepointPageTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateSharepointPageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateSharepointPageTaskParams(v CreateSharepointPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateSharepointPageTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateSharepointPageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateSharepointPageTaskParams(v CreateSharepointPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGoogleDocsPageTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateGoogleDocsPageTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateGoogleDocsPageTaskParams() (CreateGoogleDocsPageTaskParams, error) {
	var body CreateGoogleDocsPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGoogleDocsPageTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateGoogleDocsPageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateGoogleDocsPageTaskParams(v CreateGoogleDocsPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGoogleDocsPageTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateGoogleDocsPageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateGoogleDocsPageTaskParams(v CreateGoogleDocsPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGoogleDocsPermissionsTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateGoogleDocsPermissionsTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateGoogleDocsPermissionsTaskParams() (CreateGoogleDocsPermissionsTaskParams, error) {
	var body CreateGoogleDocsPermissionsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGoogleDocsPermissionsTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateGoogleDocsPermissionsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateGoogleDocsPermissionsTaskParams(v CreateGoogleDocsPermissionsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGoogleDocsPermissionsTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateGoogleDocsPermissionsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateGoogleDocsPermissionsTaskParams(v CreateGoogleDocsPermissionsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRemoveGoogleDocsPermissionsTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a RemoveGoogleDocsPermissionsTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsRemoveGoogleDocsPermissionsTaskParams() (RemoveGoogleDocsPermissionsTaskParams, error) {
	var body RemoveGoogleDocsPermissionsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRemoveGoogleDocsPermissionsTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided RemoveGoogleDocsPermissionsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromRemoveGoogleDocsPermissionsTaskParams(v RemoveGoogleDocsPermissionsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRemoveGoogleDocsPermissionsTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided RemoveGoogleDocsPermissionsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeRemoveGoogleDocsPermissionsTaskParams(v RemoveGoogleDocsPermissionsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateQuipPageTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateQuipPageTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateQuipPageTaskParams() (CreateQuipPageTaskParams, error) {
	var body CreateQuipPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateQuipPageTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateQuipPageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateQuipPageTaskParams(v CreateQuipPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateQuipPageTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateQuipPageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateQuipPageTaskParams(v CreateQuipPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGoogleMeetingTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateGoogleMeetingTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateGoogleMeetingTaskParams() (CreateGoogleMeetingTaskParams, error) {
	var body CreateGoogleMeetingTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGoogleMeetingTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateGoogleMeetingTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateGoogleMeetingTaskParams(v CreateGoogleMeetingTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGoogleMeetingTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateGoogleMeetingTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateGoogleMeetingTaskParams(v CreateGoogleMeetingTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGoToMeetingTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateGoToMeetingTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateGoToMeetingTaskParams() (CreateGoToMeetingTaskParams, error) {
	var body CreateGoToMeetingTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGoToMeetingTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateGoToMeetingTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateGoToMeetingTaskParams(v CreateGoToMeetingTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGoToMeetingTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateGoToMeetingTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateGoToMeetingTaskParams(v CreateGoToMeetingTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateIncidentTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateIncidentTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateIncidentTaskParams() (CreateIncidentTaskParams, error) {
	var body CreateIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateIncidentTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateIncidentTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateIncidentTaskParams(v CreateIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateIncidentTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateIncidentTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateIncidentTaskParams(v CreateIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateIncidentPostmortemTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateIncidentPostmortemTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateIncidentPostmortemTaskParams() (CreateIncidentPostmortemTaskParams, error) {
	var body CreateIncidentPostmortemTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateIncidentPostmortemTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateIncidentPostmortemTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateIncidentPostmortemTaskParams(v CreateIncidentPostmortemTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateIncidentPostmortemTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateIncidentPostmortemTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateIncidentPostmortemTaskParams(v CreateIncidentPostmortemTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateJiraIssueTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateJiraIssueTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateJiraIssueTaskParams() (CreateJiraIssueTaskParams, error) {
	var body CreateJiraIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateJiraIssueTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateJiraIssueTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateJiraIssueTaskParams(v CreateJiraIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateJiraIssueTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateJiraIssueTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateJiraIssueTaskParams(v CreateJiraIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateJiraSubtaskTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateJiraSubtaskTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateJiraSubtaskTaskParams() (CreateJiraSubtaskTaskParams, error) {
	var body CreateJiraSubtaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateJiraSubtaskTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateJiraSubtaskTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateJiraSubtaskTaskParams(v CreateJiraSubtaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateJiraSubtaskTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateJiraSubtaskTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateJiraSubtaskTaskParams(v CreateJiraSubtaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateLinearIssueTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateLinearIssueTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateLinearIssueTaskParams() (CreateLinearIssueTaskParams, error) {
	var body CreateLinearIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateLinearIssueTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateLinearIssueTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateLinearIssueTaskParams(v CreateLinearIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateLinearIssueTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateLinearIssueTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateLinearIssueTaskParams(v CreateLinearIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateLinearSubtaskIssueTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateLinearSubtaskIssueTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateLinearSubtaskIssueTaskParams() (CreateLinearSubtaskIssueTaskParams, error) {
	var body CreateLinearSubtaskIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateLinearSubtaskIssueTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateLinearSubtaskIssueTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateLinearSubtaskIssueTaskParams(v CreateLinearSubtaskIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateLinearSubtaskIssueTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateLinearSubtaskIssueTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateLinearSubtaskIssueTaskParams(v CreateLinearSubtaskIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateLinearIssueCommentTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateLinearIssueCommentTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateLinearIssueCommentTaskParams() (CreateLinearIssueCommentTaskParams, error) {
	var body CreateLinearIssueCommentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateLinearIssueCommentTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateLinearIssueCommentTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateLinearIssueCommentTaskParams(v CreateLinearIssueCommentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateLinearIssueCommentTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateLinearIssueCommentTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateLinearIssueCommentTaskParams(v CreateLinearIssueCommentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateMicrosoftTeamsMeetingTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateMicrosoftTeamsMeetingTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateMicrosoftTeamsMeetingTaskParams() (CreateMicrosoftTeamsMeetingTaskParams, error) {
	var body CreateMicrosoftTeamsMeetingTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateMicrosoftTeamsMeetingTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateMicrosoftTeamsMeetingTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateMicrosoftTeamsMeetingTaskParams(v CreateMicrosoftTeamsMeetingTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateMicrosoftTeamsMeetingTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateMicrosoftTeamsMeetingTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateMicrosoftTeamsMeetingTaskParams(v CreateMicrosoftTeamsMeetingTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateMicrosoftTeamsChannelTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateMicrosoftTeamsChannelTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateMicrosoftTeamsChannelTaskParams() (CreateMicrosoftTeamsChannelTaskParams, error) {
	var body CreateMicrosoftTeamsChannelTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateMicrosoftTeamsChannelTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateMicrosoftTeamsChannelTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateMicrosoftTeamsChannelTaskParams(v CreateMicrosoftTeamsChannelTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateMicrosoftTeamsChannelTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateMicrosoftTeamsChannelTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateMicrosoftTeamsChannelTaskParams(v CreateMicrosoftTeamsChannelTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAddMicrosoftTeamsTabTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a AddMicrosoftTeamsTabTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsAddMicrosoftTeamsTabTaskParams() (AddMicrosoftTeamsTabTaskParams, error) {
	var body AddMicrosoftTeamsTabTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddMicrosoftTeamsTabTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided AddMicrosoftTeamsTabTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromAddMicrosoftTeamsTabTaskParams(v AddMicrosoftTeamsTabTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddMicrosoftTeamsTabTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided AddMicrosoftTeamsTabTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeAddMicrosoftTeamsTabTaskParams(v AddMicrosoftTeamsTabTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchiveMicrosoftTeamsChannelsTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a ArchiveMicrosoftTeamsChannelsTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsArchiveMicrosoftTeamsChannelsTaskParams() (ArchiveMicrosoftTeamsChannelsTaskParams, error) {
	var body ArchiveMicrosoftTeamsChannelsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchiveMicrosoftTeamsChannelsTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided ArchiveMicrosoftTeamsChannelsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromArchiveMicrosoftTeamsChannelsTaskParams(v ArchiveMicrosoftTeamsChannelsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchiveMicrosoftTeamsChannelsTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided ArchiveMicrosoftTeamsChannelsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeArchiveMicrosoftTeamsChannelsTaskParams(v ArchiveMicrosoftTeamsChannelsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRenameMicrosoftTeamsChannelTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a RenameMicrosoftTeamsChannelTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsRenameMicrosoftTeamsChannelTaskParams() (RenameMicrosoftTeamsChannelTaskParams, error) {
	var body RenameMicrosoftTeamsChannelTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRenameMicrosoftTeamsChannelTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided RenameMicrosoftTeamsChannelTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromRenameMicrosoftTeamsChannelTaskParams(v RenameMicrosoftTeamsChannelTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRenameMicrosoftTeamsChannelTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided RenameMicrosoftTeamsChannelTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeRenameMicrosoftTeamsChannelTaskParams(v RenameMicrosoftTeamsChannelTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInviteToMicrosoftTeamsChannelTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a InviteToMicrosoftTeamsChannelTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsInviteToMicrosoftTeamsChannelTaskParams() (InviteToMicrosoftTeamsChannelTaskParams, error) {
	var body InviteToMicrosoftTeamsChannelTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToMicrosoftTeamsChannelTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided InviteToMicrosoftTeamsChannelTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromInviteToMicrosoftTeamsChannelTaskParams(v InviteToMicrosoftTeamsChannelTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToMicrosoftTeamsChannelTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided InviteToMicrosoftTeamsChannelTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeInviteToMicrosoftTeamsChannelTaskParams(v InviteToMicrosoftTeamsChannelTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateNotionPageTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateNotionPageTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateNotionPageTaskParams() (CreateNotionPageTaskParams, error) {
	var body CreateNotionPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateNotionPageTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateNotionPageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateNotionPageTaskParams(v CreateNotionPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateNotionPageTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateNotionPageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateNotionPageTaskParams(v CreateNotionPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendMicrosoftTeamsMessageTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a SendMicrosoftTeamsMessageTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsSendMicrosoftTeamsMessageTaskParams() (SendMicrosoftTeamsMessageTaskParams, error) {
	var body SendMicrosoftTeamsMessageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendMicrosoftTeamsMessageTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided SendMicrosoftTeamsMessageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromSendMicrosoftTeamsMessageTaskParams(v SendMicrosoftTeamsMessageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendMicrosoftTeamsMessageTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided SendMicrosoftTeamsMessageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeSendMicrosoftTeamsMessageTaskParams(v SendMicrosoftTeamsMessageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendMicrosoftTeamsBlocksTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a SendMicrosoftTeamsBlocksTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsSendMicrosoftTeamsBlocksTaskParams() (SendMicrosoftTeamsBlocksTaskParams, error) {
	var body SendMicrosoftTeamsBlocksTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendMicrosoftTeamsBlocksTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided SendMicrosoftTeamsBlocksTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromSendMicrosoftTeamsBlocksTaskParams(v SendMicrosoftTeamsBlocksTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendMicrosoftTeamsBlocksTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided SendMicrosoftTeamsBlocksTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeSendMicrosoftTeamsBlocksTaskParams(v SendMicrosoftTeamsBlocksTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateNotionPageTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateNotionPageTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateNotionPageTaskParams() (UpdateNotionPageTaskParams, error) {
	var body UpdateNotionPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateNotionPageTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateNotionPageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateNotionPageTaskParams(v UpdateNotionPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateNotionPageTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateNotionPageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateNotionPageTaskParams(v UpdateNotionPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateServiceNowIncidentTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateServiceNowIncidentTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateServiceNowIncidentTaskParams() (CreateServiceNowIncidentTaskParams, error) {
	var body CreateServiceNowIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateServiceNowIncidentTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateServiceNowIncidentTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateServiceNowIncidentTaskParams(v CreateServiceNowIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateServiceNowIncidentTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateServiceNowIncidentTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateServiceNowIncidentTaskParams(v CreateServiceNowIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateShortcutStoryTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateShortcutStoryTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateShortcutStoryTaskParams() (CreateShortcutStoryTaskParams, error) {
	var body CreateShortcutStoryTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateShortcutStoryTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateShortcutStoryTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateShortcutStoryTaskParams(v CreateShortcutStoryTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateShortcutStoryTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateShortcutStoryTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateShortcutStoryTaskParams(v CreateShortcutStoryTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateShortcutTaskTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateShortcutTaskTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateShortcutTaskTaskParams() (CreateShortcutTaskTaskParams, error) {
	var body CreateShortcutTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateShortcutTaskTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateShortcutTaskTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateShortcutTaskTaskParams(v CreateShortcutTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateShortcutTaskTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateShortcutTaskTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateShortcutTaskTaskParams(v CreateShortcutTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateTrelloCardTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateTrelloCardTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateTrelloCardTaskParams() (CreateTrelloCardTaskParams, error) {
	var body CreateTrelloCardTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateTrelloCardTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateTrelloCardTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateTrelloCardTaskParams(v CreateTrelloCardTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateTrelloCardTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateTrelloCardTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateTrelloCardTaskParams(v CreateTrelloCardTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateWebexMeetingTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateWebexMeetingTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateWebexMeetingTaskParams() (CreateWebexMeetingTaskParams, error) {
	var body CreateWebexMeetingTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateWebexMeetingTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateWebexMeetingTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateWebexMeetingTaskParams(v CreateWebexMeetingTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateWebexMeetingTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateWebexMeetingTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateWebexMeetingTaskParams(v CreateWebexMeetingTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateZendeskTicketTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateZendeskTicketTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateZendeskTicketTaskParams() (CreateZendeskTicketTaskParams, error) {
	var body CreateZendeskTicketTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateZendeskTicketTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateZendeskTicketTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateZendeskTicketTaskParams(v CreateZendeskTicketTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateZendeskTicketTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateZendeskTicketTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateZendeskTicketTaskParams(v CreateZendeskTicketTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateZendeskJiraLinkTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateZendeskJiraLinkTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateZendeskJiraLinkTaskParams() (CreateZendeskJiraLinkTaskParams, error) {
	var body CreateZendeskJiraLinkTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateZendeskJiraLinkTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateZendeskJiraLinkTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateZendeskJiraLinkTaskParams(v CreateZendeskJiraLinkTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateZendeskJiraLinkTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateZendeskJiraLinkTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateZendeskJiraLinkTaskParams(v CreateZendeskJiraLinkTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateClickupTaskTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateClickupTaskTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateClickupTaskTaskParams() (CreateClickupTaskTaskParams, error) {
	var body CreateClickupTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateClickupTaskTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateClickupTaskTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateClickupTaskTaskParams(v CreateClickupTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateClickupTaskTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateClickupTaskTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateClickupTaskTaskParams(v CreateClickupTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateMotionTaskTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateMotionTaskTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateMotionTaskTaskParams() (CreateMotionTaskTaskParams, error) {
	var body CreateMotionTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateMotionTaskTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateMotionTaskTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateMotionTaskTaskParams(v CreateMotionTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateMotionTaskTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateMotionTaskTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateMotionTaskTaskParams(v CreateMotionTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateZoomMeetingTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateZoomMeetingTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateZoomMeetingTaskParams() (CreateZoomMeetingTaskParams, error) {
	var body CreateZoomMeetingTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateZoomMeetingTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateZoomMeetingTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateZoomMeetingTaskParams(v CreateZoomMeetingTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateZoomMeetingTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateZoomMeetingTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateZoomMeetingTaskParams(v CreateZoomMeetingTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetGithubCommitsTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a GetGithubCommitsTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsGetGithubCommitsTaskParams() (GetGithubCommitsTaskParams, error) {
	var body GetGithubCommitsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetGithubCommitsTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided GetGithubCommitsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromGetGithubCommitsTaskParams(v GetGithubCommitsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetGithubCommitsTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided GetGithubCommitsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeGetGithubCommitsTaskParams(v GetGithubCommitsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetGitlabCommitsTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a GetGitlabCommitsTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsGetGitlabCommitsTaskParams() (GetGitlabCommitsTaskParams, error) {
	var body GetGitlabCommitsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetGitlabCommitsTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided GetGitlabCommitsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromGetGitlabCommitsTaskParams(v GetGitlabCommitsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetGitlabCommitsTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided GetGitlabCommitsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeGetGitlabCommitsTaskParams(v GetGitlabCommitsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetPulsesTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a GetPulsesTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsGetPulsesTaskParams() (GetPulsesTaskParams, error) {
	var body GetPulsesTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetPulsesTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided GetPulsesTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromGetPulsesTaskParams(v GetPulsesTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetPulsesTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided GetPulsesTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeGetPulsesTaskParams(v GetPulsesTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAlertsTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a GetAlertsTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsGetAlertsTaskParams() (GetAlertsTaskParams, error) {
	var body GetAlertsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAlertsTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided GetAlertsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromGetAlertsTaskParams(v GetAlertsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAlertsTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided GetAlertsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeGetAlertsTaskParams(v GetAlertsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHttpClientTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a HttpClientTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsHttpClientTaskParams() (HttpClientTaskParams, error) {
	var body HttpClientTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpClientTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided HttpClientTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromHttpClientTaskParams(v HttpClientTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpClientTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided HttpClientTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeHttpClientTaskParams(v HttpClientTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInviteToSlackChannelOpsgenieTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a InviteToSlackChannelOpsgenieTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsInviteToSlackChannelOpsgenieTaskParams() (InviteToSlackChannelOpsgenieTaskParams, error) {
	var body InviteToSlackChannelOpsgenieTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToSlackChannelOpsgenieTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided InviteToSlackChannelOpsgenieTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromInviteToSlackChannelOpsgenieTaskParams(v InviteToSlackChannelOpsgenieTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToSlackChannelOpsgenieTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided InviteToSlackChannelOpsgenieTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeInviteToSlackChannelOpsgenieTaskParams(v InviteToSlackChannelOpsgenieTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInviteToSlackChannelRootlyTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a InviteToSlackChannelRootlyTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsInviteToSlackChannelRootlyTaskParams() (InviteToSlackChannelRootlyTaskParams, error) {
	var body InviteToSlackChannelRootlyTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToSlackChannelRootlyTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided InviteToSlackChannelRootlyTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromInviteToSlackChannelRootlyTaskParams(v InviteToSlackChannelRootlyTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToSlackChannelRootlyTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided InviteToSlackChannelRootlyTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeInviteToSlackChannelRootlyTaskParams(v InviteToSlackChannelRootlyTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInviteToSlackChannelPagerdutyTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a InviteToSlackChannelPagerdutyTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsInviteToSlackChannelPagerdutyTaskParams() (InviteToSlackChannelPagerdutyTaskParams, error) {
	var body InviteToSlackChannelPagerdutyTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToSlackChannelPagerdutyTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided InviteToSlackChannelPagerdutyTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromInviteToSlackChannelPagerdutyTaskParams(v InviteToSlackChannelPagerdutyTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToSlackChannelPagerdutyTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided InviteToSlackChannelPagerdutyTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeInviteToSlackChannelPagerdutyTaskParams(v InviteToSlackChannelPagerdutyTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInviteToSlackChannelTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a InviteToSlackChannelTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsInviteToSlackChannelTaskParams() (InviteToSlackChannelTaskParams, error) {
	var body InviteToSlackChannelTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToSlackChannelTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided InviteToSlackChannelTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromInviteToSlackChannelTaskParams(v InviteToSlackChannelTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToSlackChannelTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided InviteToSlackChannelTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeInviteToSlackChannelTaskParams(v InviteToSlackChannelTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInviteToSlackChannelVictorOpsTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a InviteToSlackChannelVictorOpsTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsInviteToSlackChannelVictorOpsTaskParams() (InviteToSlackChannelVictorOpsTaskParams, error) {
	var body InviteToSlackChannelVictorOpsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToSlackChannelVictorOpsTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided InviteToSlackChannelVictorOpsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromInviteToSlackChannelVictorOpsTaskParams(v InviteToSlackChannelVictorOpsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToSlackChannelVictorOpsTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided InviteToSlackChannelVictorOpsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeInviteToSlackChannelVictorOpsTaskParams(v InviteToSlackChannelVictorOpsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPageOpsgenieOnCallRespondersTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a PageOpsgenieOnCallRespondersTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsPageOpsgenieOnCallRespondersTaskParams() (PageOpsgenieOnCallRespondersTaskParams, error) {
	var body PageOpsgenieOnCallRespondersTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPageOpsgenieOnCallRespondersTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided PageOpsgenieOnCallRespondersTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromPageOpsgenieOnCallRespondersTaskParams(v PageOpsgenieOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePageOpsgenieOnCallRespondersTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided PageOpsgenieOnCallRespondersTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergePageOpsgenieOnCallRespondersTaskParams(v PageOpsgenieOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateOpsgenieAlertTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateOpsgenieAlertTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateOpsgenieAlertTaskParams() (CreateOpsgenieAlertTaskParams, error) {
	var body CreateOpsgenieAlertTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateOpsgenieAlertTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateOpsgenieAlertTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateOpsgenieAlertTaskParams(v CreateOpsgenieAlertTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateOpsgenieAlertTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateOpsgenieAlertTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateOpsgenieAlertTaskParams(v CreateOpsgenieAlertTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateOpsgenieAlertTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateOpsgenieAlertTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateOpsgenieAlertTaskParams() (UpdateOpsgenieAlertTaskParams, error) {
	var body UpdateOpsgenieAlertTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateOpsgenieAlertTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateOpsgenieAlertTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateOpsgenieAlertTaskParams(v UpdateOpsgenieAlertTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateOpsgenieAlertTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateOpsgenieAlertTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateOpsgenieAlertTaskParams(v UpdateOpsgenieAlertTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateOpsgenieIncidentTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateOpsgenieIncidentTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateOpsgenieIncidentTaskParams() (UpdateOpsgenieIncidentTaskParams, error) {
	var body UpdateOpsgenieIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateOpsgenieIncidentTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateOpsgenieIncidentTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateOpsgenieIncidentTaskParams(v UpdateOpsgenieIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateOpsgenieIncidentTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateOpsgenieIncidentTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateOpsgenieIncidentTaskParams(v UpdateOpsgenieIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPageRootlyOnCallRespondersTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a PageRootlyOnCallRespondersTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsPageRootlyOnCallRespondersTaskParams() (PageRootlyOnCallRespondersTaskParams, error) {
	var body PageRootlyOnCallRespondersTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPageRootlyOnCallRespondersTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided PageRootlyOnCallRespondersTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromPageRootlyOnCallRespondersTaskParams(v PageRootlyOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePageRootlyOnCallRespondersTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided PageRootlyOnCallRespondersTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergePageRootlyOnCallRespondersTaskParams(v PageRootlyOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPagePagerdutyOnCallRespondersTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a PagePagerdutyOnCallRespondersTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsPagePagerdutyOnCallRespondersTaskParams() (PagePagerdutyOnCallRespondersTaskParams, error) {
	var body PagePagerdutyOnCallRespondersTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPagePagerdutyOnCallRespondersTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided PagePagerdutyOnCallRespondersTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromPagePagerdutyOnCallRespondersTaskParams(v PagePagerdutyOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePagePagerdutyOnCallRespondersTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided PagePagerdutyOnCallRespondersTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergePagePagerdutyOnCallRespondersTaskParams(v PagePagerdutyOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPageVictorOpsOnCallRespondersTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a PageVictorOpsOnCallRespondersTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsPageVictorOpsOnCallRespondersTaskParams() (PageVictorOpsOnCallRespondersTaskParams, error) {
	var body PageVictorOpsOnCallRespondersTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPageVictorOpsOnCallRespondersTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided PageVictorOpsOnCallRespondersTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromPageVictorOpsOnCallRespondersTaskParams(v PageVictorOpsOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePageVictorOpsOnCallRespondersTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided PageVictorOpsOnCallRespondersTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergePageVictorOpsOnCallRespondersTaskParams(v PageVictorOpsOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateVictorOpsIncidentTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateVictorOpsIncidentTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateVictorOpsIncidentTaskParams() (UpdateVictorOpsIncidentTaskParams, error) {
	var body UpdateVictorOpsIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateVictorOpsIncidentTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateVictorOpsIncidentTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateVictorOpsIncidentTaskParams(v UpdateVictorOpsIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateVictorOpsIncidentTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateVictorOpsIncidentTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateVictorOpsIncidentTaskParams(v UpdateVictorOpsIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPrintTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a PrintTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsPrintTaskParams() (PrintTaskParams, error) {
	var body PrintTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrintTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided PrintTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromPrintTaskParams(v PrintTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrintTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided PrintTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergePrintTaskParams(v PrintTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublishIncidentTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a PublishIncidentTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsPublishIncidentTaskParams() (PublishIncidentTaskParams, error) {
	var body PublishIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublishIncidentTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided PublishIncidentTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromPublishIncidentTaskParams(v PublishIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublishIncidentTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided PublishIncidentTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergePublishIncidentTaskParams(v PublishIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRedisClientTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a RedisClientTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsRedisClientTaskParams() (RedisClientTaskParams, error) {
	var body RedisClientTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRedisClientTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided RedisClientTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromRedisClientTaskParams(v RedisClientTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRedisClientTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided RedisClientTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeRedisClientTaskParams(v RedisClientTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRenameSlackChannelTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a RenameSlackChannelTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsRenameSlackChannelTaskParams() (RenameSlackChannelTaskParams, error) {
	var body RenameSlackChannelTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRenameSlackChannelTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided RenameSlackChannelTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromRenameSlackChannelTaskParams(v RenameSlackChannelTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRenameSlackChannelTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided RenameSlackChannelTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeRenameSlackChannelTaskParams(v RenameSlackChannelTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChangeSlackChannelPrivacyTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a ChangeSlackChannelPrivacyTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsChangeSlackChannelPrivacyTaskParams() (ChangeSlackChannelPrivacyTaskParams, error) {
	var body ChangeSlackChannelPrivacyTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChangeSlackChannelPrivacyTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided ChangeSlackChannelPrivacyTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromChangeSlackChannelPrivacyTaskParams(v ChangeSlackChannelPrivacyTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChangeSlackChannelPrivacyTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided ChangeSlackChannelPrivacyTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeChangeSlackChannelPrivacyTaskParams(v ChangeSlackChannelPrivacyTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunCommandHerokuTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a RunCommandHerokuTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsRunCommandHerokuTaskParams() (RunCommandHerokuTaskParams, error) {
	var body RunCommandHerokuTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunCommandHerokuTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided RunCommandHerokuTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromRunCommandHerokuTaskParams(v RunCommandHerokuTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunCommandHerokuTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided RunCommandHerokuTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeRunCommandHerokuTaskParams(v RunCommandHerokuTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendEmailTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a SendEmailTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsSendEmailTaskParams() (SendEmailTaskParams, error) {
	var body SendEmailTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendEmailTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided SendEmailTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromSendEmailTaskParams(v SendEmailTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendEmailTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided SendEmailTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeSendEmailTaskParams(v SendEmailTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendDashboardReportTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a SendDashboardReportTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsSendDashboardReportTaskParams() (SendDashboardReportTaskParams, error) {
	var body SendDashboardReportTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendDashboardReportTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided SendDashboardReportTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromSendDashboardReportTaskParams(v SendDashboardReportTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendDashboardReportTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided SendDashboardReportTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeSendDashboardReportTaskParams(v SendDashboardReportTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateSlackChannelTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a CreateSlackChannelTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsCreateSlackChannelTaskParams() (CreateSlackChannelTaskParams, error) {
	var body CreateSlackChannelTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateSlackChannelTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided CreateSlackChannelTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromCreateSlackChannelTaskParams(v CreateSlackChannelTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateSlackChannelTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided CreateSlackChannelTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeCreateSlackChannelTaskParams(v CreateSlackChannelTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendSlackMessageTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a SendSlackMessageTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsSendSlackMessageTaskParams() (SendSlackMessageTaskParams, error) {
	var body SendSlackMessageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendSlackMessageTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided SendSlackMessageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromSendSlackMessageTaskParams(v SendSlackMessageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendSlackMessageTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided SendSlackMessageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeSendSlackMessageTaskParams(v SendSlackMessageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendSmsTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a SendSmsTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsSendSmsTaskParams() (SendSmsTaskParams, error) {
	var body SendSmsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendSmsTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided SendSmsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromSendSmsTaskParams(v SendSmsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendSmsTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided SendSmsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeSendSmsTaskParams(v SendSmsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendWhatsappMessageTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a SendWhatsappMessageTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsSendWhatsappMessageTaskParams() (SendWhatsappMessageTaskParams, error) {
	var body SendWhatsappMessageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendWhatsappMessageTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided SendWhatsappMessageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromSendWhatsappMessageTaskParams(v SendWhatsappMessageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendWhatsappMessageTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided SendWhatsappMessageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeSendWhatsappMessageTaskParams(v SendWhatsappMessageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSnapshotDatadogGraphTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a SnapshotDatadogGraphTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsSnapshotDatadogGraphTaskParams() (SnapshotDatadogGraphTaskParams, error) {
	var body SnapshotDatadogGraphTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSnapshotDatadogGraphTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided SnapshotDatadogGraphTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromSnapshotDatadogGraphTaskParams(v SnapshotDatadogGraphTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSnapshotDatadogGraphTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided SnapshotDatadogGraphTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeSnapshotDatadogGraphTaskParams(v SnapshotDatadogGraphTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSnapshotGrafanaDashboardTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a SnapshotGrafanaDashboardTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsSnapshotGrafanaDashboardTaskParams() (SnapshotGrafanaDashboardTaskParams, error) {
	var body SnapshotGrafanaDashboardTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSnapshotGrafanaDashboardTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided SnapshotGrafanaDashboardTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromSnapshotGrafanaDashboardTaskParams(v SnapshotGrafanaDashboardTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSnapshotGrafanaDashboardTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided SnapshotGrafanaDashboardTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeSnapshotGrafanaDashboardTaskParams(v SnapshotGrafanaDashboardTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSnapshotLookerLookTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a SnapshotLookerLookTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsSnapshotLookerLookTaskParams() (SnapshotLookerLookTaskParams, error) {
	var body SnapshotLookerLookTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSnapshotLookerLookTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided SnapshotLookerLookTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromSnapshotLookerLookTaskParams(v SnapshotLookerLookTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSnapshotLookerLookTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided SnapshotLookerLookTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeSnapshotLookerLookTaskParams(v SnapshotLookerLookTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSnapshotNewRelicGraphTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a SnapshotNewRelicGraphTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsSnapshotNewRelicGraphTaskParams() (SnapshotNewRelicGraphTaskParams, error) {
	var body SnapshotNewRelicGraphTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSnapshotNewRelicGraphTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided SnapshotNewRelicGraphTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromSnapshotNewRelicGraphTaskParams(v SnapshotNewRelicGraphTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSnapshotNewRelicGraphTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided SnapshotNewRelicGraphTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeSnapshotNewRelicGraphTaskParams(v SnapshotNewRelicGraphTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTweetTwitterMessageTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a TweetTwitterMessageTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsTweetTwitterMessageTaskParams() (TweetTwitterMessageTaskParams, error) {
	var body TweetTwitterMessageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTweetTwitterMessageTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided TweetTwitterMessageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromTweetTwitterMessageTaskParams(v TweetTwitterMessageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTweetTwitterMessageTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided TweetTwitterMessageTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeTweetTwitterMessageTaskParams(v TweetTwitterMessageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateAirtableTableRecordTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateAirtableTableRecordTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateAirtableTableRecordTaskParams() (UpdateAirtableTableRecordTaskParams, error) {
	var body UpdateAirtableTableRecordTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateAirtableTableRecordTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateAirtableTableRecordTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateAirtableTableRecordTaskParams(v UpdateAirtableTableRecordTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateAirtableTableRecordTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateAirtableTableRecordTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateAirtableTableRecordTaskParams(v UpdateAirtableTableRecordTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateAsanaTaskTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateAsanaTaskTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateAsanaTaskTaskParams() (UpdateAsanaTaskTaskParams, error) {
	var body UpdateAsanaTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateAsanaTaskTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateAsanaTaskTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateAsanaTaskTaskParams(v UpdateAsanaTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateAsanaTaskTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateAsanaTaskTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateAsanaTaskTaskParams(v UpdateAsanaTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateGithubIssueTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateGithubIssueTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateGithubIssueTaskParams() (UpdateGithubIssueTaskParams, error) {
	var body UpdateGithubIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateGithubIssueTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateGithubIssueTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateGithubIssueTaskParams(v UpdateGithubIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateGithubIssueTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateGithubIssueTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateGithubIssueTaskParams(v UpdateGithubIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateGitlabIssueTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateGitlabIssueTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateGitlabIssueTaskParams() (UpdateGitlabIssueTaskParams, error) {
	var body UpdateGitlabIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateGitlabIssueTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateGitlabIssueTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateGitlabIssueTaskParams(v UpdateGitlabIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateGitlabIssueTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateGitlabIssueTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateGitlabIssueTaskParams(v UpdateGitlabIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateIncidentTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateIncidentTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateIncidentTaskParams() (UpdateIncidentTaskParams, error) {
	var body UpdateIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateIncidentTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateIncidentTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateIncidentTaskParams(v UpdateIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateIncidentTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateIncidentTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateIncidentTaskParams(v UpdateIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateIncidentPostmortemTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateIncidentPostmortemTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateIncidentPostmortemTaskParams() (UpdateIncidentPostmortemTaskParams, error) {
	var body UpdateIncidentPostmortemTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateIncidentPostmortemTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateIncidentPostmortemTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateIncidentPostmortemTaskParams(v UpdateIncidentPostmortemTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateIncidentPostmortemTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateIncidentPostmortemTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateIncidentPostmortemTaskParams(v UpdateIncidentPostmortemTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateJiraIssueTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateJiraIssueTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateJiraIssueTaskParams() (UpdateJiraIssueTaskParams, error) {
	var body UpdateJiraIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateJiraIssueTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateJiraIssueTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateJiraIssueTaskParams(v UpdateJiraIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateJiraIssueTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateJiraIssueTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateJiraIssueTaskParams(v UpdateJiraIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateLinearIssueTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateLinearIssueTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateLinearIssueTaskParams() (UpdateLinearIssueTaskParams, error) {
	var body UpdateLinearIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateLinearIssueTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateLinearIssueTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateLinearIssueTaskParams(v UpdateLinearIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateLinearIssueTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateLinearIssueTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateLinearIssueTaskParams(v UpdateLinearIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateServiceNowIncidentTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateServiceNowIncidentTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateServiceNowIncidentTaskParams() (UpdateServiceNowIncidentTaskParams, error) {
	var body UpdateServiceNowIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateServiceNowIncidentTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateServiceNowIncidentTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateServiceNowIncidentTaskParams(v UpdateServiceNowIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateServiceNowIncidentTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateServiceNowIncidentTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateServiceNowIncidentTaskParams(v UpdateServiceNowIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateShortcutStoryTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateShortcutStoryTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateShortcutStoryTaskParams() (UpdateShortcutStoryTaskParams, error) {
	var body UpdateShortcutStoryTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateShortcutStoryTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateShortcutStoryTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateShortcutStoryTaskParams(v UpdateShortcutStoryTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateShortcutStoryTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateShortcutStoryTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateShortcutStoryTaskParams(v UpdateShortcutStoryTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateShortcutTaskTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateShortcutTaskTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateShortcutTaskTaskParams() (UpdateShortcutTaskTaskParams, error) {
	var body UpdateShortcutTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateShortcutTaskTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateShortcutTaskTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateShortcutTaskTaskParams(v UpdateShortcutTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateShortcutTaskTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateShortcutTaskTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateShortcutTaskTaskParams(v UpdateShortcutTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateSlackChannelTopicTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateSlackChannelTopicTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateSlackChannelTopicTaskParams() (UpdateSlackChannelTopicTaskParams, error) {
	var body UpdateSlackChannelTopicTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateSlackChannelTopicTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateSlackChannelTopicTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateSlackChannelTopicTaskParams(v UpdateSlackChannelTopicTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateSlackChannelTopicTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateSlackChannelTopicTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateSlackChannelTopicTaskParams(v UpdateSlackChannelTopicTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateStatusTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateStatusTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateStatusTaskParams() (UpdateStatusTaskParams, error) {
	var body UpdateStatusTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateStatusTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateStatusTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateStatusTaskParams(v UpdateStatusTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateStatusTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateStatusTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateStatusTaskParams(v UpdateStatusTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateIncidentStatusTimestampTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateIncidentStatusTimestampTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateIncidentStatusTimestampTaskParams() (UpdateIncidentStatusTimestampTaskParams, error) {
	var body UpdateIncidentStatusTimestampTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateIncidentStatusTimestampTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateIncidentStatusTimestampTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateIncidentStatusTimestampTaskParams(v UpdateIncidentStatusTimestampTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateIncidentStatusTimestampTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateIncidentStatusTimestampTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateIncidentStatusTimestampTaskParams(v UpdateIncidentStatusTimestampTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateTrelloCardTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateTrelloCardTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateTrelloCardTaskParams() (UpdateTrelloCardTaskParams, error) {
	var body UpdateTrelloCardTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateTrelloCardTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateTrelloCardTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateTrelloCardTaskParams(v UpdateTrelloCardTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateTrelloCardTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateTrelloCardTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateTrelloCardTaskParams(v UpdateTrelloCardTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateClickupTaskTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateClickupTaskTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateClickupTaskTaskParams() (UpdateClickupTaskTaskParams, error) {
	var body UpdateClickupTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateClickupTaskTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateClickupTaskTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateClickupTaskTaskParams(v UpdateClickupTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateClickupTaskTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateClickupTaskTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateClickupTaskTaskParams(v UpdateClickupTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateMotionTaskTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateMotionTaskTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateMotionTaskTaskParams() (UpdateMotionTaskTaskParams, error) {
	var body UpdateMotionTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateMotionTaskTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateMotionTaskTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateMotionTaskTaskParams(v UpdateMotionTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateMotionTaskTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateMotionTaskTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateMotionTaskTaskParams(v UpdateMotionTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateZendeskTicketTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateZendeskTicketTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateZendeskTicketTaskParams() (UpdateZendeskTicketTaskParams, error) {
	var body UpdateZendeskTicketTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateZendeskTicketTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateZendeskTicketTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateZendeskTicketTaskParams(v UpdateZendeskTicketTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateZendeskTicketTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateZendeskTicketTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateZendeskTicketTaskParams(v UpdateZendeskTicketTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateAttachedAlertsTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a UpdateAttachedAlertsTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsUpdateAttachedAlertsTaskParams() (UpdateAttachedAlertsTaskParams, error) {
	var body UpdateAttachedAlertsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateAttachedAlertsTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided UpdateAttachedAlertsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromUpdateAttachedAlertsTaskParams(v UpdateAttachedAlertsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateAttachedAlertsTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateAttachedAlertsTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeUpdateAttachedAlertsTaskParams(v UpdateAttachedAlertsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTriggerWorkflowTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a TriggerWorkflowTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsTriggerWorkflowTaskParams() (TriggerWorkflowTaskParams, error) {
	var body TriggerWorkflowTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTriggerWorkflowTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided TriggerWorkflowTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromTriggerWorkflowTaskParams(v TriggerWorkflowTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTriggerWorkflowTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided TriggerWorkflowTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeTriggerWorkflowTaskParams(v TriggerWorkflowTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendSlackBlocksTaskParams returns the union data inside the NewWorkflowTask_Data_Attributes_TaskParams as a SendSlackBlocksTaskParams
func (t NewWorkflowTask_Data_Attributes_TaskParams) AsSendSlackBlocksTaskParams() (SendSlackBlocksTaskParams, error) {
	var body SendSlackBlocksTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendSlackBlocksTaskParams overwrites any union data inside the NewWorkflowTask_Data_Attributes_TaskParams as the provided SendSlackBlocksTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) FromSendSlackBlocksTaskParams(v SendSlackBlocksTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendSlackBlocksTaskParams performs a merge with any union data inside the NewWorkflowTask_Data_Attributes_TaskParams, using the provided SendSlackBlocksTaskParams
func (t *NewWorkflowTask_Data_Attributes_TaskParams) MergeSendSlackBlocksTaskParams(v SendSlackBlocksTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NewWorkflowTask_Data_Attributes_TaskParams) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NewWorkflowTask_Data_Attributes_TaskParams) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPageVictorOpsOnCallRespondersTaskParams0 returns the union data inside the PageVictorOpsOnCallRespondersTaskParams as a PageVictorOpsOnCallRespondersTaskParams0
func (t PageVictorOpsOnCallRespondersTaskParams) AsPageVictorOpsOnCallRespondersTaskParams0() (PageVictorOpsOnCallRespondersTaskParams0, error) {
	var body PageVictorOpsOnCallRespondersTaskParams0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPageVictorOpsOnCallRespondersTaskParams0 overwrites any union data inside the PageVictorOpsOnCallRespondersTaskParams as the provided PageVictorOpsOnCallRespondersTaskParams0
func (t *PageVictorOpsOnCallRespondersTaskParams) FromPageVictorOpsOnCallRespondersTaskParams0(v PageVictorOpsOnCallRespondersTaskParams0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePageVictorOpsOnCallRespondersTaskParams0 performs a merge with any union data inside the PageVictorOpsOnCallRespondersTaskParams, using the provided PageVictorOpsOnCallRespondersTaskParams0
func (t *PageVictorOpsOnCallRespondersTaskParams) MergePageVictorOpsOnCallRespondersTaskParams0(v PageVictorOpsOnCallRespondersTaskParams0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPageVictorOpsOnCallRespondersTaskParams1 returns the union data inside the PageVictorOpsOnCallRespondersTaskParams as a PageVictorOpsOnCallRespondersTaskParams1
func (t PageVictorOpsOnCallRespondersTaskParams) AsPageVictorOpsOnCallRespondersTaskParams1() (PageVictorOpsOnCallRespondersTaskParams1, error) {
	var body PageVictorOpsOnCallRespondersTaskParams1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPageVictorOpsOnCallRespondersTaskParams1 overwrites any union data inside the PageVictorOpsOnCallRespondersTaskParams as the provided PageVictorOpsOnCallRespondersTaskParams1
func (t *PageVictorOpsOnCallRespondersTaskParams) FromPageVictorOpsOnCallRespondersTaskParams1(v PageVictorOpsOnCallRespondersTaskParams1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePageVictorOpsOnCallRespondersTaskParams1 performs a merge with any union data inside the PageVictorOpsOnCallRespondersTaskParams, using the provided PageVictorOpsOnCallRespondersTaskParams1
func (t *PageVictorOpsOnCallRespondersTaskParams) MergePageVictorOpsOnCallRespondersTaskParams1(v PageVictorOpsOnCallRespondersTaskParams1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PageVictorOpsOnCallRespondersTaskParams) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.EscalationPolicies != nil {
		object["escalation_policies"], err = json.Marshal(t.EscalationPolicies)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'escalation_policies': %w", err)
		}
	}

	if t.TaskType != nil {
		object["task_type"], err = json.Marshal(t.TaskType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'task_type': %w", err)
		}
	}

	if t.Title != nil {
		object["title"], err = json.Marshal(t.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if t.Users != nil {
		object["users"], err = json.Marshal(t.Users)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'users': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *PageVictorOpsOnCallRespondersTaskParams) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["escalation_policies"]; found {
		err = json.Unmarshal(raw, &t.EscalationPolicies)
		if err != nil {
			return fmt.Errorf("error reading 'escalation_policies': %w", err)
		}
	}

	if raw, found := object["task_type"]; found {
		err = json.Unmarshal(raw, &t.TaskType)
		if err != nil {
			return fmt.Errorf("error reading 'task_type': %w", err)
		}
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &t.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
	}

	if raw, found := object["users"]; found {
		err = json.Unmarshal(raw, &t.Users)
		if err != nil {
			return fmt.Errorf("error reading 'users': %w", err)
		}
	}

	return err
}

// AsSendMicrosoftTeamsBlocksTaskParams0 returns the union data inside the SendMicrosoftTeamsBlocksTaskParams as a SendMicrosoftTeamsBlocksTaskParams0
func (t SendMicrosoftTeamsBlocksTaskParams) AsSendMicrosoftTeamsBlocksTaskParams0() (SendMicrosoftTeamsBlocksTaskParams0, error) {
	var body SendMicrosoftTeamsBlocksTaskParams0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendMicrosoftTeamsBlocksTaskParams0 overwrites any union data inside the SendMicrosoftTeamsBlocksTaskParams as the provided SendMicrosoftTeamsBlocksTaskParams0
func (t *SendMicrosoftTeamsBlocksTaskParams) FromSendMicrosoftTeamsBlocksTaskParams0(v SendMicrosoftTeamsBlocksTaskParams0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendMicrosoftTeamsBlocksTaskParams0 performs a merge with any union data inside the SendMicrosoftTeamsBlocksTaskParams, using the provided SendMicrosoftTeamsBlocksTaskParams0
func (t *SendMicrosoftTeamsBlocksTaskParams) MergeSendMicrosoftTeamsBlocksTaskParams0(v SendMicrosoftTeamsBlocksTaskParams0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SendMicrosoftTeamsBlocksTaskParams) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["attachments"], err = json.Marshal(t.Attachments)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'attachments': %w", err)
	}

	if t.TaskType != nil {
		object["task_type"], err = json.Marshal(t.TaskType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'task_type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *SendMicrosoftTeamsBlocksTaskParams) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["attachments"]; found {
		err = json.Unmarshal(raw, &t.Attachments)
		if err != nil {
			return fmt.Errorf("error reading 'attachments': %w", err)
		}
	}

	if raw, found := object["task_type"]; found {
		err = json.Unmarshal(raw, &t.TaskType)
		if err != nil {
			return fmt.Errorf("error reading 'task_type': %w", err)
		}
	}

	return err
}

// AsSendMicrosoftTeamsMessageTaskParams0 returns the union data inside the SendMicrosoftTeamsMessageTaskParams as a SendMicrosoftTeamsMessageTaskParams0
func (t SendMicrosoftTeamsMessageTaskParams) AsSendMicrosoftTeamsMessageTaskParams0() (SendMicrosoftTeamsMessageTaskParams0, error) {
	var body SendMicrosoftTeamsMessageTaskParams0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendMicrosoftTeamsMessageTaskParams0 overwrites any union data inside the SendMicrosoftTeamsMessageTaskParams as the provided SendMicrosoftTeamsMessageTaskParams0
func (t *SendMicrosoftTeamsMessageTaskParams) FromSendMicrosoftTeamsMessageTaskParams0(v SendMicrosoftTeamsMessageTaskParams0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendMicrosoftTeamsMessageTaskParams0 performs a merge with any union data inside the SendMicrosoftTeamsMessageTaskParams, using the provided SendMicrosoftTeamsMessageTaskParams0
func (t *SendMicrosoftTeamsMessageTaskParams) MergeSendMicrosoftTeamsMessageTaskParams0(v SendMicrosoftTeamsMessageTaskParams0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SendMicrosoftTeamsMessageTaskParams) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Channels != nil {
		object["channels"], err = json.Marshal(t.Channels)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'channels': %w", err)
		}
	}

	if t.TaskType != nil {
		object["task_type"], err = json.Marshal(t.TaskType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'task_type': %w", err)
		}
	}

	object["text"], err = json.Marshal(t.Text)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'text': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *SendMicrosoftTeamsMessageTaskParams) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["channels"]; found {
		err = json.Unmarshal(raw, &t.Channels)
		if err != nil {
			return fmt.Errorf("error reading 'channels': %w", err)
		}
	}

	if raw, found := object["task_type"]; found {
		err = json.Unmarshal(raw, &t.TaskType)
		if err != nil {
			return fmt.Errorf("error reading 'task_type': %w", err)
		}
	}

	if raw, found := object["text"]; found {
		err = json.Unmarshal(raw, &t.Text)
		if err != nil {
			return fmt.Errorf("error reading 'text': %w", err)
		}
	}

	return err
}

// AsSendSlackBlocksTaskParams0 returns the union data inside the SendSlackBlocksTaskParams as a SendSlackBlocksTaskParams0
func (t SendSlackBlocksTaskParams) AsSendSlackBlocksTaskParams0() (SendSlackBlocksTaskParams0, error) {
	var body SendSlackBlocksTaskParams0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendSlackBlocksTaskParams0 overwrites any union data inside the SendSlackBlocksTaskParams as the provided SendSlackBlocksTaskParams0
func (t *SendSlackBlocksTaskParams) FromSendSlackBlocksTaskParams0(v SendSlackBlocksTaskParams0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendSlackBlocksTaskParams0 performs a merge with any union data inside the SendSlackBlocksTaskParams, using the provided SendSlackBlocksTaskParams0
func (t *SendSlackBlocksTaskParams) MergeSendSlackBlocksTaskParams0(v SendSlackBlocksTaskParams0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendSlackBlocksTaskParams1 returns the union data inside the SendSlackBlocksTaskParams as a SendSlackBlocksTaskParams1
func (t SendSlackBlocksTaskParams) AsSendSlackBlocksTaskParams1() (SendSlackBlocksTaskParams1, error) {
	var body SendSlackBlocksTaskParams1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendSlackBlocksTaskParams1 overwrites any union data inside the SendSlackBlocksTaskParams as the provided SendSlackBlocksTaskParams1
func (t *SendSlackBlocksTaskParams) FromSendSlackBlocksTaskParams1(v SendSlackBlocksTaskParams1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendSlackBlocksTaskParams1 performs a merge with any union data inside the SendSlackBlocksTaskParams, using the provided SendSlackBlocksTaskParams1
func (t *SendSlackBlocksTaskParams) MergeSendSlackBlocksTaskParams1(v SendSlackBlocksTaskParams1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendSlackBlocksTaskParams2 returns the union data inside the SendSlackBlocksTaskParams as a SendSlackBlocksTaskParams2
func (t SendSlackBlocksTaskParams) AsSendSlackBlocksTaskParams2() (SendSlackBlocksTaskParams2, error) {
	var body SendSlackBlocksTaskParams2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendSlackBlocksTaskParams2 overwrites any union data inside the SendSlackBlocksTaskParams as the provided SendSlackBlocksTaskParams2
func (t *SendSlackBlocksTaskParams) FromSendSlackBlocksTaskParams2(v SendSlackBlocksTaskParams2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendSlackBlocksTaskParams2 performs a merge with any union data inside the SendSlackBlocksTaskParams, using the provided SendSlackBlocksTaskParams2
func (t *SendSlackBlocksTaskParams) MergeSendSlackBlocksTaskParams2(v SendSlackBlocksTaskParams2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SendSlackBlocksTaskParams) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Attachments != nil {
		object["attachments"], err = json.Marshal(t.Attachments)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'attachments': %w", err)
		}
	}

	object["blocks"], err = json.Marshal(t.Blocks)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'blocks': %w", err)
	}

	if t.BroadcastThreadReplyToChannel != nil {
		object["broadcast_thread_reply_to_channel"], err = json.Marshal(t.BroadcastThreadReplyToChannel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'broadcast_thread_reply_to_channel': %w", err)
		}
	}

	if t.Channels != nil {
		object["channels"], err = json.Marshal(t.Channels)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'channels': %w", err)
		}
	}

	if t.Message != nil {
		object["message"], err = json.Marshal(t.Message)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'message': %w", err)
		}
	}

	if t.ParentMessageThreadTask != nil {
		object["parent_message_thread_task"], err = json.Marshal(t.ParentMessageThreadTask)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'parent_message_thread_task': %w", err)
		}
	}

	if t.PinToChannel != nil {
		object["pin_to_channel"], err = json.Marshal(t.PinToChannel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pin_to_channel': %w", err)
		}
	}

	if t.SendAsEphemeral != nil {
		object["send_as_ephemeral"], err = json.Marshal(t.SendAsEphemeral)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'send_as_ephemeral': %w", err)
		}
	}

	if t.SendOnlyAsThreadedMessage != nil {
		object["send_only_as_threaded_message"], err = json.Marshal(t.SendOnlyAsThreadedMessage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'send_only_as_threaded_message': %w", err)
		}
	}

	if t.SlackUserGroups != nil {
		object["slack_user_groups"], err = json.Marshal(t.SlackUserGroups)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'slack_user_groups': %w", err)
		}
	}

	if t.SlackUsers != nil {
		object["slack_users"], err = json.Marshal(t.SlackUsers)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'slack_users': %w", err)
		}
	}

	if t.TaskType != nil {
		object["task_type"], err = json.Marshal(t.TaskType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'task_type': %w", err)
		}
	}

	if t.UpdateParentMessage != nil {
		object["update_parent_message"], err = json.Marshal(t.UpdateParentMessage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'update_parent_message': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *SendSlackBlocksTaskParams) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["attachments"]; found {
		err = json.Unmarshal(raw, &t.Attachments)
		if err != nil {
			return fmt.Errorf("error reading 'attachments': %w", err)
		}
	}

	if raw, found := object["blocks"]; found {
		err = json.Unmarshal(raw, &t.Blocks)
		if err != nil {
			return fmt.Errorf("error reading 'blocks': %w", err)
		}
	}

	if raw, found := object["broadcast_thread_reply_to_channel"]; found {
		err = json.Unmarshal(raw, &t.BroadcastThreadReplyToChannel)
		if err != nil {
			return fmt.Errorf("error reading 'broadcast_thread_reply_to_channel': %w", err)
		}
	}

	if raw, found := object["channels"]; found {
		err = json.Unmarshal(raw, &t.Channels)
		if err != nil {
			return fmt.Errorf("error reading 'channels': %w", err)
		}
	}

	if raw, found := object["message"]; found {
		err = json.Unmarshal(raw, &t.Message)
		if err != nil {
			return fmt.Errorf("error reading 'message': %w", err)
		}
	}

	if raw, found := object["parent_message_thread_task"]; found {
		err = json.Unmarshal(raw, &t.ParentMessageThreadTask)
		if err != nil {
			return fmt.Errorf("error reading 'parent_message_thread_task': %w", err)
		}
	}

	if raw, found := object["pin_to_channel"]; found {
		err = json.Unmarshal(raw, &t.PinToChannel)
		if err != nil {
			return fmt.Errorf("error reading 'pin_to_channel': %w", err)
		}
	}

	if raw, found := object["send_as_ephemeral"]; found {
		err = json.Unmarshal(raw, &t.SendAsEphemeral)
		if err != nil {
			return fmt.Errorf("error reading 'send_as_ephemeral': %w", err)
		}
	}

	if raw, found := object["send_only_as_threaded_message"]; found {
		err = json.Unmarshal(raw, &t.SendOnlyAsThreadedMessage)
		if err != nil {
			return fmt.Errorf("error reading 'send_only_as_threaded_message': %w", err)
		}
	}

	if raw, found := object["slack_user_groups"]; found {
		err = json.Unmarshal(raw, &t.SlackUserGroups)
		if err != nil {
			return fmt.Errorf("error reading 'slack_user_groups': %w", err)
		}
	}

	if raw, found := object["slack_users"]; found {
		err = json.Unmarshal(raw, &t.SlackUsers)
		if err != nil {
			return fmt.Errorf("error reading 'slack_users': %w", err)
		}
	}

	if raw, found := object["task_type"]; found {
		err = json.Unmarshal(raw, &t.TaskType)
		if err != nil {
			return fmt.Errorf("error reading 'task_type': %w", err)
		}
	}

	if raw, found := object["update_parent_message"]; found {
		err = json.Unmarshal(raw, &t.UpdateParentMessage)
		if err != nil {
			return fmt.Errorf("error reading 'update_parent_message': %w", err)
		}
	}

	return err
}

// AsSendSlackMessageTaskParams0 returns the union data inside the SendSlackMessageTaskParams as a SendSlackMessageTaskParams0
func (t SendSlackMessageTaskParams) AsSendSlackMessageTaskParams0() (SendSlackMessageTaskParams0, error) {
	var body SendSlackMessageTaskParams0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendSlackMessageTaskParams0 overwrites any union data inside the SendSlackMessageTaskParams as the provided SendSlackMessageTaskParams0
func (t *SendSlackMessageTaskParams) FromSendSlackMessageTaskParams0(v SendSlackMessageTaskParams0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendSlackMessageTaskParams0 performs a merge with any union data inside the SendSlackMessageTaskParams, using the provided SendSlackMessageTaskParams0
func (t *SendSlackMessageTaskParams) MergeSendSlackMessageTaskParams0(v SendSlackMessageTaskParams0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendSlackMessageTaskParams1 returns the union data inside the SendSlackMessageTaskParams as a SendSlackMessageTaskParams1
func (t SendSlackMessageTaskParams) AsSendSlackMessageTaskParams1() (SendSlackMessageTaskParams1, error) {
	var body SendSlackMessageTaskParams1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendSlackMessageTaskParams1 overwrites any union data inside the SendSlackMessageTaskParams as the provided SendSlackMessageTaskParams1
func (t *SendSlackMessageTaskParams) FromSendSlackMessageTaskParams1(v SendSlackMessageTaskParams1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendSlackMessageTaskParams1 performs a merge with any union data inside the SendSlackMessageTaskParams, using the provided SendSlackMessageTaskParams1
func (t *SendSlackMessageTaskParams) MergeSendSlackMessageTaskParams1(v SendSlackMessageTaskParams1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendSlackMessageTaskParams2 returns the union data inside the SendSlackMessageTaskParams as a SendSlackMessageTaskParams2
func (t SendSlackMessageTaskParams) AsSendSlackMessageTaskParams2() (SendSlackMessageTaskParams2, error) {
	var body SendSlackMessageTaskParams2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendSlackMessageTaskParams2 overwrites any union data inside the SendSlackMessageTaskParams as the provided SendSlackMessageTaskParams2
func (t *SendSlackMessageTaskParams) FromSendSlackMessageTaskParams2(v SendSlackMessageTaskParams2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendSlackMessageTaskParams2 performs a merge with any union data inside the SendSlackMessageTaskParams, using the provided SendSlackMessageTaskParams2
func (t *SendSlackMessageTaskParams) MergeSendSlackMessageTaskParams2(v SendSlackMessageTaskParams2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SendSlackMessageTaskParams) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Actionables != nil {
		object["actionables"], err = json.Marshal(t.Actionables)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'actionables': %w", err)
		}
	}

	if t.BroadcastThreadReplyToChannel != nil {
		object["broadcast_thread_reply_to_channel"], err = json.Marshal(t.BroadcastThreadReplyToChannel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'broadcast_thread_reply_to_channel': %w", err)
		}
	}

	if t.Channels != nil {
		object["channels"], err = json.Marshal(t.Channels)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'channels': %w", err)
		}
	}

	if t.Color != nil {
		object["color"], err = json.Marshal(t.Color)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'color': %w", err)
		}
	}

	if t.ParentMessageThreadTask != nil {
		object["parent_message_thread_task"], err = json.Marshal(t.ParentMessageThreadTask)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'parent_message_thread_task': %w", err)
		}
	}

	if t.PinToChannel != nil {
		object["pin_to_channel"], err = json.Marshal(t.PinToChannel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pin_to_channel': %w", err)
		}
	}

	if t.SendAsEphemeral != nil {
		object["send_as_ephemeral"], err = json.Marshal(t.SendAsEphemeral)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'send_as_ephemeral': %w", err)
		}
	}

	if t.SendOnlyAsThreadedMessage != nil {
		object["send_only_as_threaded_message"], err = json.Marshal(t.SendOnlyAsThreadedMessage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'send_only_as_threaded_message': %w", err)
		}
	}

	if t.SlackUserGroups != nil {
		object["slack_user_groups"], err = json.Marshal(t.SlackUserGroups)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'slack_user_groups': %w", err)
		}
	}

	if t.SlackUsers != nil {
		object["slack_users"], err = json.Marshal(t.SlackUsers)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'slack_users': %w", err)
		}
	}

	if t.TaskType != nil {
		object["task_type"], err = json.Marshal(t.TaskType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'task_type': %w", err)
		}
	}

	object["text"], err = json.Marshal(t.Text)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'text': %w", err)
	}

	if t.UpdateParentMessage != nil {
		object["update_parent_message"], err = json.Marshal(t.UpdateParentMessage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'update_parent_message': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *SendSlackMessageTaskParams) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["actionables"]; found {
		err = json.Unmarshal(raw, &t.Actionables)
		if err != nil {
			return fmt.Errorf("error reading 'actionables': %w", err)
		}
	}

	if raw, found := object["broadcast_thread_reply_to_channel"]; found {
		err = json.Unmarshal(raw, &t.BroadcastThreadReplyToChannel)
		if err != nil {
			return fmt.Errorf("error reading 'broadcast_thread_reply_to_channel': %w", err)
		}
	}

	if raw, found := object["channels"]; found {
		err = json.Unmarshal(raw, &t.Channels)
		if err != nil {
			return fmt.Errorf("error reading 'channels': %w", err)
		}
	}

	if raw, found := object["color"]; found {
		err = json.Unmarshal(raw, &t.Color)
		if err != nil {
			return fmt.Errorf("error reading 'color': %w", err)
		}
	}

	if raw, found := object["parent_message_thread_task"]; found {
		err = json.Unmarshal(raw, &t.ParentMessageThreadTask)
		if err != nil {
			return fmt.Errorf("error reading 'parent_message_thread_task': %w", err)
		}
	}

	if raw, found := object["pin_to_channel"]; found {
		err = json.Unmarshal(raw, &t.PinToChannel)
		if err != nil {
			return fmt.Errorf("error reading 'pin_to_channel': %w", err)
		}
	}

	if raw, found := object["send_as_ephemeral"]; found {
		err = json.Unmarshal(raw, &t.SendAsEphemeral)
		if err != nil {
			return fmt.Errorf("error reading 'send_as_ephemeral': %w", err)
		}
	}

	if raw, found := object["send_only_as_threaded_message"]; found {
		err = json.Unmarshal(raw, &t.SendOnlyAsThreadedMessage)
		if err != nil {
			return fmt.Errorf("error reading 'send_only_as_threaded_message': %w", err)
		}
	}

	if raw, found := object["slack_user_groups"]; found {
		err = json.Unmarshal(raw, &t.SlackUserGroups)
		if err != nil {
			return fmt.Errorf("error reading 'slack_user_groups': %w", err)
		}
	}

	if raw, found := object["slack_users"]; found {
		err = json.Unmarshal(raw, &t.SlackUsers)
		if err != nil {
			return fmt.Errorf("error reading 'slack_users': %w", err)
		}
	}

	if raw, found := object["task_type"]; found {
		err = json.Unmarshal(raw, &t.TaskType)
		if err != nil {
			return fmt.Errorf("error reading 'task_type': %w", err)
		}
	}

	if raw, found := object["text"]; found {
		err = json.Unmarshal(raw, &t.Text)
		if err != nil {
			return fmt.Errorf("error reading 'text': %w", err)
		}
	}

	if raw, found := object["update_parent_message"]; found {
		err = json.Unmarshal(raw, &t.UpdateParentMessage)
		if err != nil {
			return fmt.Errorf("error reading 'update_parent_message': %w", err)
		}
	}

	return err
}

// AsIncidentTriggerParams returns the union data inside the UpdateWorkflow_Data_Attributes_TriggerParams as a IncidentTriggerParams
func (t UpdateWorkflow_Data_Attributes_TriggerParams) AsIncidentTriggerParams() (IncidentTriggerParams, error) {
	var body IncidentTriggerParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentTriggerParams overwrites any union data inside the UpdateWorkflow_Data_Attributes_TriggerParams as the provided IncidentTriggerParams
func (t *UpdateWorkflow_Data_Attributes_TriggerParams) FromIncidentTriggerParams(v IncidentTriggerParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentTriggerParams performs a merge with any union data inside the UpdateWorkflow_Data_Attributes_TriggerParams, using the provided IncidentTriggerParams
func (t *UpdateWorkflow_Data_Attributes_TriggerParams) MergeIncidentTriggerParams(v IncidentTriggerParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionItemTriggerParams returns the union data inside the UpdateWorkflow_Data_Attributes_TriggerParams as a ActionItemTriggerParams
func (t UpdateWorkflow_Data_Attributes_TriggerParams) AsActionItemTriggerParams() (ActionItemTriggerParams, error) {
	var body ActionItemTriggerParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionItemTriggerParams overwrites any union data inside the UpdateWorkflow_Data_Attributes_TriggerParams as the provided ActionItemTriggerParams
func (t *UpdateWorkflow_Data_Attributes_TriggerParams) FromActionItemTriggerParams(v ActionItemTriggerParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionItemTriggerParams performs a merge with any union data inside the UpdateWorkflow_Data_Attributes_TriggerParams, using the provided ActionItemTriggerParams
func (t *UpdateWorkflow_Data_Attributes_TriggerParams) MergeActionItemTriggerParams(v ActionItemTriggerParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAlertTriggerParams returns the union data inside the UpdateWorkflow_Data_Attributes_TriggerParams as a AlertTriggerParams
func (t UpdateWorkflow_Data_Attributes_TriggerParams) AsAlertTriggerParams() (AlertTriggerParams, error) {
	var body AlertTriggerParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAlertTriggerParams overwrites any union data inside the UpdateWorkflow_Data_Attributes_TriggerParams as the provided AlertTriggerParams
func (t *UpdateWorkflow_Data_Attributes_TriggerParams) FromAlertTriggerParams(v AlertTriggerParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAlertTriggerParams performs a merge with any union data inside the UpdateWorkflow_Data_Attributes_TriggerParams, using the provided AlertTriggerParams
func (t *UpdateWorkflow_Data_Attributes_TriggerParams) MergeAlertTriggerParams(v AlertTriggerParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPulseTriggerParams returns the union data inside the UpdateWorkflow_Data_Attributes_TriggerParams as a PulseTriggerParams
func (t UpdateWorkflow_Data_Attributes_TriggerParams) AsPulseTriggerParams() (PulseTriggerParams, error) {
	var body PulseTriggerParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPulseTriggerParams overwrites any union data inside the UpdateWorkflow_Data_Attributes_TriggerParams as the provided PulseTriggerParams
func (t *UpdateWorkflow_Data_Attributes_TriggerParams) FromPulseTriggerParams(v PulseTriggerParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePulseTriggerParams performs a merge with any union data inside the UpdateWorkflow_Data_Attributes_TriggerParams, using the provided PulseTriggerParams
func (t *UpdateWorkflow_Data_Attributes_TriggerParams) MergePulseTriggerParams(v PulseTriggerParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSimpleTriggerParams returns the union data inside the UpdateWorkflow_Data_Attributes_TriggerParams as a SimpleTriggerParams
func (t UpdateWorkflow_Data_Attributes_TriggerParams) AsSimpleTriggerParams() (SimpleTriggerParams, error) {
	var body SimpleTriggerParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSimpleTriggerParams overwrites any union data inside the UpdateWorkflow_Data_Attributes_TriggerParams as the provided SimpleTriggerParams
func (t *UpdateWorkflow_Data_Attributes_TriggerParams) FromSimpleTriggerParams(v SimpleTriggerParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSimpleTriggerParams performs a merge with any union data inside the UpdateWorkflow_Data_Attributes_TriggerParams, using the provided SimpleTriggerParams
func (t *UpdateWorkflow_Data_Attributes_TriggerParams) MergeSimpleTriggerParams(v SimpleTriggerParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdateWorkflow_Data_Attributes_TriggerParams) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdateWorkflow_Data_Attributes_TriggerParams) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAddActionItemTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a AddActionItemTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsAddActionItemTaskParams() (AddActionItemTaskParams, error) {
	var body AddActionItemTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddActionItemTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided AddActionItemTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromAddActionItemTaskParams(v AddActionItemTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddActionItemTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided AddActionItemTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeAddActionItemTaskParams(v AddActionItemTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateActionItemTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateActionItemTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateActionItemTaskParams() (UpdateActionItemTaskParams, error) {
	var body UpdateActionItemTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateActionItemTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateActionItemTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateActionItemTaskParams(v UpdateActionItemTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateActionItemTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateActionItemTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateActionItemTaskParams(v UpdateActionItemTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAddRoleTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a AddRoleTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsAddRoleTaskParams() (AddRoleTaskParams, error) {
	var body AddRoleTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddRoleTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided AddRoleTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromAddRoleTaskParams(v AddRoleTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddRoleTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided AddRoleTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeAddRoleTaskParams(v AddRoleTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAddSlackBookmarkTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a AddSlackBookmarkTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsAddSlackBookmarkTaskParams() (AddSlackBookmarkTaskParams, error) {
	var body AddSlackBookmarkTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddSlackBookmarkTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided AddSlackBookmarkTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromAddSlackBookmarkTaskParams(v AddSlackBookmarkTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddSlackBookmarkTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided AddSlackBookmarkTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeAddSlackBookmarkTaskParams(v AddSlackBookmarkTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAddTeamTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a AddTeamTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsAddTeamTaskParams() (AddTeamTaskParams, error) {
	var body AddTeamTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddTeamTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided AddTeamTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromAddTeamTaskParams(v AddTeamTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddTeamTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided AddTeamTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeAddTeamTaskParams(v AddTeamTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAddToTimelineTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a AddToTimelineTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsAddToTimelineTaskParams() (AddToTimelineTaskParams, error) {
	var body AddToTimelineTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddToTimelineTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided AddToTimelineTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromAddToTimelineTaskParams(v AddToTimelineTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddToTimelineTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided AddToTimelineTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeAddToTimelineTaskParams(v AddToTimelineTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchiveSlackChannelsTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a ArchiveSlackChannelsTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsArchiveSlackChannelsTaskParams() (ArchiveSlackChannelsTaskParams, error) {
	var body ArchiveSlackChannelsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchiveSlackChannelsTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided ArchiveSlackChannelsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromArchiveSlackChannelsTaskParams(v ArchiveSlackChannelsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchiveSlackChannelsTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided ArchiveSlackChannelsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeArchiveSlackChannelsTaskParams(v ArchiveSlackChannelsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAttachDatadogDashboardsTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a AttachDatadogDashboardsTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsAttachDatadogDashboardsTaskParams() (AttachDatadogDashboardsTaskParams, error) {
	var body AttachDatadogDashboardsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAttachDatadogDashboardsTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided AttachDatadogDashboardsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromAttachDatadogDashboardsTaskParams(v AttachDatadogDashboardsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAttachDatadogDashboardsTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided AttachDatadogDashboardsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeAttachDatadogDashboardsTaskParams(v AttachDatadogDashboardsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAutoAssignRoleOpsgenieTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a AutoAssignRoleOpsgenieTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsAutoAssignRoleOpsgenieTaskParams() (AutoAssignRoleOpsgenieTaskParams, error) {
	var body AutoAssignRoleOpsgenieTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAutoAssignRoleOpsgenieTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided AutoAssignRoleOpsgenieTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromAutoAssignRoleOpsgenieTaskParams(v AutoAssignRoleOpsgenieTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAutoAssignRoleOpsgenieTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided AutoAssignRoleOpsgenieTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeAutoAssignRoleOpsgenieTaskParams(v AutoAssignRoleOpsgenieTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAutoAssignRoleRootlyTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a AutoAssignRoleRootlyTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsAutoAssignRoleRootlyTaskParams() (AutoAssignRoleRootlyTaskParams, error) {
	var body AutoAssignRoleRootlyTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAutoAssignRoleRootlyTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided AutoAssignRoleRootlyTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromAutoAssignRoleRootlyTaskParams(v AutoAssignRoleRootlyTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAutoAssignRoleRootlyTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided AutoAssignRoleRootlyTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeAutoAssignRoleRootlyTaskParams(v AutoAssignRoleRootlyTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAutoAssignRolePagerdutyTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a AutoAssignRolePagerdutyTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsAutoAssignRolePagerdutyTaskParams() (AutoAssignRolePagerdutyTaskParams, error) {
	var body AutoAssignRolePagerdutyTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAutoAssignRolePagerdutyTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided AutoAssignRolePagerdutyTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromAutoAssignRolePagerdutyTaskParams(v AutoAssignRolePagerdutyTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAutoAssignRolePagerdutyTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided AutoAssignRolePagerdutyTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeAutoAssignRolePagerdutyTaskParams(v AutoAssignRolePagerdutyTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdatePagerdutyIncidentTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdatePagerdutyIncidentTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdatePagerdutyIncidentTaskParams() (UpdatePagerdutyIncidentTaskParams, error) {
	var body UpdatePagerdutyIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdatePagerdutyIncidentTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdatePagerdutyIncidentTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdatePagerdutyIncidentTaskParams(v UpdatePagerdutyIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdatePagerdutyIncidentTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdatePagerdutyIncidentTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdatePagerdutyIncidentTaskParams(v UpdatePagerdutyIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreatePagerdutyStatusUpdateTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreatePagerdutyStatusUpdateTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreatePagerdutyStatusUpdateTaskParams() (CreatePagerdutyStatusUpdateTaskParams, error) {
	var body CreatePagerdutyStatusUpdateTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreatePagerdutyStatusUpdateTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreatePagerdutyStatusUpdateTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreatePagerdutyStatusUpdateTaskParams(v CreatePagerdutyStatusUpdateTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreatePagerdutyStatusUpdateTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreatePagerdutyStatusUpdateTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreatePagerdutyStatusUpdateTaskParams(v CreatePagerdutyStatusUpdateTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreatePagertreeAlertTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreatePagertreeAlertTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreatePagertreeAlertTaskParams() (CreatePagertreeAlertTaskParams, error) {
	var body CreatePagertreeAlertTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreatePagertreeAlertTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreatePagertreeAlertTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreatePagertreeAlertTaskParams(v CreatePagertreeAlertTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreatePagertreeAlertTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreatePagertreeAlertTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreatePagertreeAlertTaskParams(v CreatePagertreeAlertTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdatePagertreeAlertTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdatePagertreeAlertTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdatePagertreeAlertTaskParams() (UpdatePagertreeAlertTaskParams, error) {
	var body UpdatePagertreeAlertTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdatePagertreeAlertTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdatePagertreeAlertTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdatePagertreeAlertTaskParams(v UpdatePagertreeAlertTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdatePagertreeAlertTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdatePagertreeAlertTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdatePagertreeAlertTaskParams(v UpdatePagertreeAlertTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAutoAssignRoleVictorOpsTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a AutoAssignRoleVictorOpsTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsAutoAssignRoleVictorOpsTaskParams() (AutoAssignRoleVictorOpsTaskParams, error) {
	var body AutoAssignRoleVictorOpsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAutoAssignRoleVictorOpsTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided AutoAssignRoleVictorOpsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromAutoAssignRoleVictorOpsTaskParams(v AutoAssignRoleVictorOpsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAutoAssignRoleVictorOpsTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided AutoAssignRoleVictorOpsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeAutoAssignRoleVictorOpsTaskParams(v AutoAssignRoleVictorOpsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCallPeopleTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CallPeopleTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCallPeopleTaskParams() (CallPeopleTaskParams, error) {
	var body CallPeopleTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCallPeopleTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CallPeopleTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCallPeopleTaskParams(v CallPeopleTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCallPeopleTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CallPeopleTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCallPeopleTaskParams(v CallPeopleTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateAirtableTableRecordTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateAirtableTableRecordTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateAirtableTableRecordTaskParams() (CreateAirtableTableRecordTaskParams, error) {
	var body CreateAirtableTableRecordTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateAirtableTableRecordTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateAirtableTableRecordTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateAirtableTableRecordTaskParams(v CreateAirtableTableRecordTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateAirtableTableRecordTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateAirtableTableRecordTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateAirtableTableRecordTaskParams(v CreateAirtableTableRecordTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateAsanaSubtaskTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateAsanaSubtaskTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateAsanaSubtaskTaskParams() (CreateAsanaSubtaskTaskParams, error) {
	var body CreateAsanaSubtaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateAsanaSubtaskTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateAsanaSubtaskTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateAsanaSubtaskTaskParams(v CreateAsanaSubtaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateAsanaSubtaskTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateAsanaSubtaskTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateAsanaSubtaskTaskParams(v CreateAsanaSubtaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateAsanaTaskTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateAsanaTaskTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateAsanaTaskTaskParams() (CreateAsanaTaskTaskParams, error) {
	var body CreateAsanaTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateAsanaTaskTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateAsanaTaskTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateAsanaTaskTaskParams(v CreateAsanaTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateAsanaTaskTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateAsanaTaskTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateAsanaTaskTaskParams(v CreateAsanaTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateConfluencePageTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateConfluencePageTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateConfluencePageTaskParams() (CreateConfluencePageTaskParams, error) {
	var body CreateConfluencePageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateConfluencePageTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateConfluencePageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateConfluencePageTaskParams(v CreateConfluencePageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateConfluencePageTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateConfluencePageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateConfluencePageTaskParams(v CreateConfluencePageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateDatadogNotebookTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateDatadogNotebookTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateDatadogNotebookTaskParams() (CreateDatadogNotebookTaskParams, error) {
	var body CreateDatadogNotebookTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateDatadogNotebookTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateDatadogNotebookTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateDatadogNotebookTaskParams(v CreateDatadogNotebookTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateDatadogNotebookTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateDatadogNotebookTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateDatadogNotebookTaskParams(v CreateDatadogNotebookTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateDropboxPaperPageTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateDropboxPaperPageTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateDropboxPaperPageTaskParams() (CreateDropboxPaperPageTaskParams, error) {
	var body CreateDropboxPaperPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateDropboxPaperPageTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateDropboxPaperPageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateDropboxPaperPageTaskParams(v CreateDropboxPaperPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateDropboxPaperPageTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateDropboxPaperPageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateDropboxPaperPageTaskParams(v CreateDropboxPaperPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGithubIssueTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateGithubIssueTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateGithubIssueTaskParams() (CreateGithubIssueTaskParams, error) {
	var body CreateGithubIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGithubIssueTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateGithubIssueTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateGithubIssueTaskParams(v CreateGithubIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGithubIssueTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateGithubIssueTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateGithubIssueTaskParams(v CreateGithubIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGitlabIssueTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateGitlabIssueTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateGitlabIssueTaskParams() (CreateGitlabIssueTaskParams, error) {
	var body CreateGitlabIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGitlabIssueTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateGitlabIssueTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateGitlabIssueTaskParams(v CreateGitlabIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGitlabIssueTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateGitlabIssueTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateGitlabIssueTaskParams(v CreateGitlabIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateOutlookEventTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateOutlookEventTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateOutlookEventTaskParams() (CreateOutlookEventTaskParams, error) {
	var body CreateOutlookEventTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateOutlookEventTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateOutlookEventTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateOutlookEventTaskParams(v CreateOutlookEventTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateOutlookEventTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateOutlookEventTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateOutlookEventTaskParams(v CreateOutlookEventTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGoogleCalendarEventTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateGoogleCalendarEventTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateGoogleCalendarEventTaskParams() (CreateGoogleCalendarEventTaskParams, error) {
	var body CreateGoogleCalendarEventTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGoogleCalendarEventTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateGoogleCalendarEventTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateGoogleCalendarEventTaskParams(v CreateGoogleCalendarEventTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGoogleCalendarEventTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateGoogleCalendarEventTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateGoogleCalendarEventTaskParams(v CreateGoogleCalendarEventTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateGoogleDocsPageTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateGoogleDocsPageTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateGoogleDocsPageTaskParams() (UpdateGoogleDocsPageTaskParams, error) {
	var body UpdateGoogleDocsPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateGoogleDocsPageTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateGoogleDocsPageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateGoogleDocsPageTaskParams(v UpdateGoogleDocsPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateGoogleDocsPageTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateGoogleDocsPageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateGoogleDocsPageTaskParams(v UpdateGoogleDocsPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateGoogleCalendarEventTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateGoogleCalendarEventTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateGoogleCalendarEventTaskParams() (UpdateGoogleCalendarEventTaskParams, error) {
	var body UpdateGoogleCalendarEventTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateGoogleCalendarEventTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateGoogleCalendarEventTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateGoogleCalendarEventTaskParams(v UpdateGoogleCalendarEventTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateGoogleCalendarEventTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateGoogleCalendarEventTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateGoogleCalendarEventTaskParams(v UpdateGoogleCalendarEventTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateSharepointPageTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateSharepointPageTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateSharepointPageTaskParams() (CreateSharepointPageTaskParams, error) {
	var body CreateSharepointPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateSharepointPageTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateSharepointPageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateSharepointPageTaskParams(v CreateSharepointPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateSharepointPageTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateSharepointPageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateSharepointPageTaskParams(v CreateSharepointPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGoogleDocsPageTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateGoogleDocsPageTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateGoogleDocsPageTaskParams() (CreateGoogleDocsPageTaskParams, error) {
	var body CreateGoogleDocsPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGoogleDocsPageTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateGoogleDocsPageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateGoogleDocsPageTaskParams(v CreateGoogleDocsPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGoogleDocsPageTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateGoogleDocsPageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateGoogleDocsPageTaskParams(v CreateGoogleDocsPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGoogleDocsPermissionsTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateGoogleDocsPermissionsTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateGoogleDocsPermissionsTaskParams() (CreateGoogleDocsPermissionsTaskParams, error) {
	var body CreateGoogleDocsPermissionsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGoogleDocsPermissionsTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateGoogleDocsPermissionsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateGoogleDocsPermissionsTaskParams(v CreateGoogleDocsPermissionsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGoogleDocsPermissionsTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateGoogleDocsPermissionsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateGoogleDocsPermissionsTaskParams(v CreateGoogleDocsPermissionsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRemoveGoogleDocsPermissionsTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a RemoveGoogleDocsPermissionsTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsRemoveGoogleDocsPermissionsTaskParams() (RemoveGoogleDocsPermissionsTaskParams, error) {
	var body RemoveGoogleDocsPermissionsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRemoveGoogleDocsPermissionsTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided RemoveGoogleDocsPermissionsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromRemoveGoogleDocsPermissionsTaskParams(v RemoveGoogleDocsPermissionsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRemoveGoogleDocsPermissionsTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided RemoveGoogleDocsPermissionsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeRemoveGoogleDocsPermissionsTaskParams(v RemoveGoogleDocsPermissionsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateQuipPageTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateQuipPageTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateQuipPageTaskParams() (CreateQuipPageTaskParams, error) {
	var body CreateQuipPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateQuipPageTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateQuipPageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateQuipPageTaskParams(v CreateQuipPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateQuipPageTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateQuipPageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateQuipPageTaskParams(v CreateQuipPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGoogleMeetingTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateGoogleMeetingTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateGoogleMeetingTaskParams() (CreateGoogleMeetingTaskParams, error) {
	var body CreateGoogleMeetingTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGoogleMeetingTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateGoogleMeetingTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateGoogleMeetingTaskParams(v CreateGoogleMeetingTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGoogleMeetingTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateGoogleMeetingTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateGoogleMeetingTaskParams(v CreateGoogleMeetingTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGoToMeetingTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateGoToMeetingTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateGoToMeetingTaskParams() (CreateGoToMeetingTaskParams, error) {
	var body CreateGoToMeetingTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGoToMeetingTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateGoToMeetingTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateGoToMeetingTaskParams(v CreateGoToMeetingTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGoToMeetingTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateGoToMeetingTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateGoToMeetingTaskParams(v CreateGoToMeetingTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateIncidentTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateIncidentTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateIncidentTaskParams() (CreateIncidentTaskParams, error) {
	var body CreateIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateIncidentTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateIncidentTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateIncidentTaskParams(v CreateIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateIncidentTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateIncidentTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateIncidentTaskParams(v CreateIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateIncidentPostmortemTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateIncidentPostmortemTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateIncidentPostmortemTaskParams() (CreateIncidentPostmortemTaskParams, error) {
	var body CreateIncidentPostmortemTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateIncidentPostmortemTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateIncidentPostmortemTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateIncidentPostmortemTaskParams(v CreateIncidentPostmortemTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateIncidentPostmortemTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateIncidentPostmortemTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateIncidentPostmortemTaskParams(v CreateIncidentPostmortemTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateJiraIssueTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateJiraIssueTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateJiraIssueTaskParams() (CreateJiraIssueTaskParams, error) {
	var body CreateJiraIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateJiraIssueTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateJiraIssueTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateJiraIssueTaskParams(v CreateJiraIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateJiraIssueTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateJiraIssueTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateJiraIssueTaskParams(v CreateJiraIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateJiraSubtaskTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateJiraSubtaskTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateJiraSubtaskTaskParams() (CreateJiraSubtaskTaskParams, error) {
	var body CreateJiraSubtaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateJiraSubtaskTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateJiraSubtaskTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateJiraSubtaskTaskParams(v CreateJiraSubtaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateJiraSubtaskTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateJiraSubtaskTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateJiraSubtaskTaskParams(v CreateJiraSubtaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateLinearIssueTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateLinearIssueTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateLinearIssueTaskParams() (CreateLinearIssueTaskParams, error) {
	var body CreateLinearIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateLinearIssueTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateLinearIssueTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateLinearIssueTaskParams(v CreateLinearIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateLinearIssueTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateLinearIssueTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateLinearIssueTaskParams(v CreateLinearIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateLinearSubtaskIssueTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateLinearSubtaskIssueTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateLinearSubtaskIssueTaskParams() (CreateLinearSubtaskIssueTaskParams, error) {
	var body CreateLinearSubtaskIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateLinearSubtaskIssueTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateLinearSubtaskIssueTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateLinearSubtaskIssueTaskParams(v CreateLinearSubtaskIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateLinearSubtaskIssueTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateLinearSubtaskIssueTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateLinearSubtaskIssueTaskParams(v CreateLinearSubtaskIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateLinearIssueCommentTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateLinearIssueCommentTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateLinearIssueCommentTaskParams() (CreateLinearIssueCommentTaskParams, error) {
	var body CreateLinearIssueCommentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateLinearIssueCommentTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateLinearIssueCommentTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateLinearIssueCommentTaskParams(v CreateLinearIssueCommentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateLinearIssueCommentTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateLinearIssueCommentTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateLinearIssueCommentTaskParams(v CreateLinearIssueCommentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateMicrosoftTeamsMeetingTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateMicrosoftTeamsMeetingTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateMicrosoftTeamsMeetingTaskParams() (CreateMicrosoftTeamsMeetingTaskParams, error) {
	var body CreateMicrosoftTeamsMeetingTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateMicrosoftTeamsMeetingTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateMicrosoftTeamsMeetingTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateMicrosoftTeamsMeetingTaskParams(v CreateMicrosoftTeamsMeetingTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateMicrosoftTeamsMeetingTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateMicrosoftTeamsMeetingTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateMicrosoftTeamsMeetingTaskParams(v CreateMicrosoftTeamsMeetingTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateMicrosoftTeamsChannelTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateMicrosoftTeamsChannelTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateMicrosoftTeamsChannelTaskParams() (CreateMicrosoftTeamsChannelTaskParams, error) {
	var body CreateMicrosoftTeamsChannelTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateMicrosoftTeamsChannelTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateMicrosoftTeamsChannelTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateMicrosoftTeamsChannelTaskParams(v CreateMicrosoftTeamsChannelTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateMicrosoftTeamsChannelTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateMicrosoftTeamsChannelTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateMicrosoftTeamsChannelTaskParams(v CreateMicrosoftTeamsChannelTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAddMicrosoftTeamsTabTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a AddMicrosoftTeamsTabTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsAddMicrosoftTeamsTabTaskParams() (AddMicrosoftTeamsTabTaskParams, error) {
	var body AddMicrosoftTeamsTabTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddMicrosoftTeamsTabTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided AddMicrosoftTeamsTabTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromAddMicrosoftTeamsTabTaskParams(v AddMicrosoftTeamsTabTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddMicrosoftTeamsTabTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided AddMicrosoftTeamsTabTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeAddMicrosoftTeamsTabTaskParams(v AddMicrosoftTeamsTabTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchiveMicrosoftTeamsChannelsTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a ArchiveMicrosoftTeamsChannelsTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsArchiveMicrosoftTeamsChannelsTaskParams() (ArchiveMicrosoftTeamsChannelsTaskParams, error) {
	var body ArchiveMicrosoftTeamsChannelsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchiveMicrosoftTeamsChannelsTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided ArchiveMicrosoftTeamsChannelsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromArchiveMicrosoftTeamsChannelsTaskParams(v ArchiveMicrosoftTeamsChannelsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchiveMicrosoftTeamsChannelsTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided ArchiveMicrosoftTeamsChannelsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeArchiveMicrosoftTeamsChannelsTaskParams(v ArchiveMicrosoftTeamsChannelsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRenameMicrosoftTeamsChannelTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a RenameMicrosoftTeamsChannelTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsRenameMicrosoftTeamsChannelTaskParams() (RenameMicrosoftTeamsChannelTaskParams, error) {
	var body RenameMicrosoftTeamsChannelTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRenameMicrosoftTeamsChannelTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided RenameMicrosoftTeamsChannelTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromRenameMicrosoftTeamsChannelTaskParams(v RenameMicrosoftTeamsChannelTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRenameMicrosoftTeamsChannelTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided RenameMicrosoftTeamsChannelTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeRenameMicrosoftTeamsChannelTaskParams(v RenameMicrosoftTeamsChannelTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInviteToMicrosoftTeamsChannelTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a InviteToMicrosoftTeamsChannelTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsInviteToMicrosoftTeamsChannelTaskParams() (InviteToMicrosoftTeamsChannelTaskParams, error) {
	var body InviteToMicrosoftTeamsChannelTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToMicrosoftTeamsChannelTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided InviteToMicrosoftTeamsChannelTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromInviteToMicrosoftTeamsChannelTaskParams(v InviteToMicrosoftTeamsChannelTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToMicrosoftTeamsChannelTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided InviteToMicrosoftTeamsChannelTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeInviteToMicrosoftTeamsChannelTaskParams(v InviteToMicrosoftTeamsChannelTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateNotionPageTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateNotionPageTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateNotionPageTaskParams() (CreateNotionPageTaskParams, error) {
	var body CreateNotionPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateNotionPageTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateNotionPageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateNotionPageTaskParams(v CreateNotionPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateNotionPageTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateNotionPageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateNotionPageTaskParams(v CreateNotionPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendMicrosoftTeamsMessageTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a SendMicrosoftTeamsMessageTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsSendMicrosoftTeamsMessageTaskParams() (SendMicrosoftTeamsMessageTaskParams, error) {
	var body SendMicrosoftTeamsMessageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendMicrosoftTeamsMessageTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided SendMicrosoftTeamsMessageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromSendMicrosoftTeamsMessageTaskParams(v SendMicrosoftTeamsMessageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendMicrosoftTeamsMessageTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided SendMicrosoftTeamsMessageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeSendMicrosoftTeamsMessageTaskParams(v SendMicrosoftTeamsMessageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendMicrosoftTeamsBlocksTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a SendMicrosoftTeamsBlocksTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsSendMicrosoftTeamsBlocksTaskParams() (SendMicrosoftTeamsBlocksTaskParams, error) {
	var body SendMicrosoftTeamsBlocksTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendMicrosoftTeamsBlocksTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided SendMicrosoftTeamsBlocksTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromSendMicrosoftTeamsBlocksTaskParams(v SendMicrosoftTeamsBlocksTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendMicrosoftTeamsBlocksTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided SendMicrosoftTeamsBlocksTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeSendMicrosoftTeamsBlocksTaskParams(v SendMicrosoftTeamsBlocksTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateNotionPageTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateNotionPageTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateNotionPageTaskParams() (UpdateNotionPageTaskParams, error) {
	var body UpdateNotionPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateNotionPageTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateNotionPageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateNotionPageTaskParams(v UpdateNotionPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateNotionPageTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateNotionPageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateNotionPageTaskParams(v UpdateNotionPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateServiceNowIncidentTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateServiceNowIncidentTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateServiceNowIncidentTaskParams() (CreateServiceNowIncidentTaskParams, error) {
	var body CreateServiceNowIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateServiceNowIncidentTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateServiceNowIncidentTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateServiceNowIncidentTaskParams(v CreateServiceNowIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateServiceNowIncidentTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateServiceNowIncidentTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateServiceNowIncidentTaskParams(v CreateServiceNowIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateShortcutStoryTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateShortcutStoryTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateShortcutStoryTaskParams() (CreateShortcutStoryTaskParams, error) {
	var body CreateShortcutStoryTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateShortcutStoryTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateShortcutStoryTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateShortcutStoryTaskParams(v CreateShortcutStoryTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateShortcutStoryTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateShortcutStoryTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateShortcutStoryTaskParams(v CreateShortcutStoryTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateShortcutTaskTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateShortcutTaskTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateShortcutTaskTaskParams() (CreateShortcutTaskTaskParams, error) {
	var body CreateShortcutTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateShortcutTaskTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateShortcutTaskTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateShortcutTaskTaskParams(v CreateShortcutTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateShortcutTaskTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateShortcutTaskTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateShortcutTaskTaskParams(v CreateShortcutTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateTrelloCardTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateTrelloCardTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateTrelloCardTaskParams() (CreateTrelloCardTaskParams, error) {
	var body CreateTrelloCardTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateTrelloCardTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateTrelloCardTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateTrelloCardTaskParams(v CreateTrelloCardTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateTrelloCardTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateTrelloCardTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateTrelloCardTaskParams(v CreateTrelloCardTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateWebexMeetingTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateWebexMeetingTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateWebexMeetingTaskParams() (CreateWebexMeetingTaskParams, error) {
	var body CreateWebexMeetingTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateWebexMeetingTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateWebexMeetingTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateWebexMeetingTaskParams(v CreateWebexMeetingTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateWebexMeetingTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateWebexMeetingTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateWebexMeetingTaskParams(v CreateWebexMeetingTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateZendeskTicketTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateZendeskTicketTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateZendeskTicketTaskParams() (CreateZendeskTicketTaskParams, error) {
	var body CreateZendeskTicketTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateZendeskTicketTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateZendeskTicketTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateZendeskTicketTaskParams(v CreateZendeskTicketTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateZendeskTicketTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateZendeskTicketTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateZendeskTicketTaskParams(v CreateZendeskTicketTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateZendeskJiraLinkTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateZendeskJiraLinkTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateZendeskJiraLinkTaskParams() (CreateZendeskJiraLinkTaskParams, error) {
	var body CreateZendeskJiraLinkTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateZendeskJiraLinkTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateZendeskJiraLinkTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateZendeskJiraLinkTaskParams(v CreateZendeskJiraLinkTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateZendeskJiraLinkTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateZendeskJiraLinkTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateZendeskJiraLinkTaskParams(v CreateZendeskJiraLinkTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateClickupTaskTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateClickupTaskTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateClickupTaskTaskParams() (CreateClickupTaskTaskParams, error) {
	var body CreateClickupTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateClickupTaskTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateClickupTaskTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateClickupTaskTaskParams(v CreateClickupTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateClickupTaskTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateClickupTaskTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateClickupTaskTaskParams(v CreateClickupTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateMotionTaskTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateMotionTaskTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateMotionTaskTaskParams() (CreateMotionTaskTaskParams, error) {
	var body CreateMotionTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateMotionTaskTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateMotionTaskTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateMotionTaskTaskParams(v CreateMotionTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateMotionTaskTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateMotionTaskTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateMotionTaskTaskParams(v CreateMotionTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateZoomMeetingTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateZoomMeetingTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateZoomMeetingTaskParams() (CreateZoomMeetingTaskParams, error) {
	var body CreateZoomMeetingTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateZoomMeetingTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateZoomMeetingTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateZoomMeetingTaskParams(v CreateZoomMeetingTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateZoomMeetingTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateZoomMeetingTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateZoomMeetingTaskParams(v CreateZoomMeetingTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetGithubCommitsTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a GetGithubCommitsTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsGetGithubCommitsTaskParams() (GetGithubCommitsTaskParams, error) {
	var body GetGithubCommitsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetGithubCommitsTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided GetGithubCommitsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromGetGithubCommitsTaskParams(v GetGithubCommitsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetGithubCommitsTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided GetGithubCommitsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeGetGithubCommitsTaskParams(v GetGithubCommitsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetGitlabCommitsTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a GetGitlabCommitsTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsGetGitlabCommitsTaskParams() (GetGitlabCommitsTaskParams, error) {
	var body GetGitlabCommitsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetGitlabCommitsTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided GetGitlabCommitsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromGetGitlabCommitsTaskParams(v GetGitlabCommitsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetGitlabCommitsTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided GetGitlabCommitsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeGetGitlabCommitsTaskParams(v GetGitlabCommitsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetPulsesTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a GetPulsesTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsGetPulsesTaskParams() (GetPulsesTaskParams, error) {
	var body GetPulsesTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetPulsesTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided GetPulsesTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromGetPulsesTaskParams(v GetPulsesTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetPulsesTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided GetPulsesTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeGetPulsesTaskParams(v GetPulsesTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAlertsTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a GetAlertsTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsGetAlertsTaskParams() (GetAlertsTaskParams, error) {
	var body GetAlertsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAlertsTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided GetAlertsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromGetAlertsTaskParams(v GetAlertsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAlertsTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided GetAlertsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeGetAlertsTaskParams(v GetAlertsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHttpClientTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a HttpClientTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsHttpClientTaskParams() (HttpClientTaskParams, error) {
	var body HttpClientTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpClientTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided HttpClientTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromHttpClientTaskParams(v HttpClientTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpClientTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided HttpClientTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeHttpClientTaskParams(v HttpClientTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInviteToSlackChannelOpsgenieTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a InviteToSlackChannelOpsgenieTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsInviteToSlackChannelOpsgenieTaskParams() (InviteToSlackChannelOpsgenieTaskParams, error) {
	var body InviteToSlackChannelOpsgenieTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToSlackChannelOpsgenieTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided InviteToSlackChannelOpsgenieTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromInviteToSlackChannelOpsgenieTaskParams(v InviteToSlackChannelOpsgenieTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToSlackChannelOpsgenieTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided InviteToSlackChannelOpsgenieTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeInviteToSlackChannelOpsgenieTaskParams(v InviteToSlackChannelOpsgenieTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInviteToSlackChannelRootlyTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a InviteToSlackChannelRootlyTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsInviteToSlackChannelRootlyTaskParams() (InviteToSlackChannelRootlyTaskParams, error) {
	var body InviteToSlackChannelRootlyTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToSlackChannelRootlyTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided InviteToSlackChannelRootlyTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromInviteToSlackChannelRootlyTaskParams(v InviteToSlackChannelRootlyTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToSlackChannelRootlyTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided InviteToSlackChannelRootlyTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeInviteToSlackChannelRootlyTaskParams(v InviteToSlackChannelRootlyTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInviteToSlackChannelPagerdutyTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a InviteToSlackChannelPagerdutyTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsInviteToSlackChannelPagerdutyTaskParams() (InviteToSlackChannelPagerdutyTaskParams, error) {
	var body InviteToSlackChannelPagerdutyTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToSlackChannelPagerdutyTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided InviteToSlackChannelPagerdutyTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromInviteToSlackChannelPagerdutyTaskParams(v InviteToSlackChannelPagerdutyTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToSlackChannelPagerdutyTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided InviteToSlackChannelPagerdutyTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeInviteToSlackChannelPagerdutyTaskParams(v InviteToSlackChannelPagerdutyTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInviteToSlackChannelTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a InviteToSlackChannelTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsInviteToSlackChannelTaskParams() (InviteToSlackChannelTaskParams, error) {
	var body InviteToSlackChannelTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToSlackChannelTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided InviteToSlackChannelTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromInviteToSlackChannelTaskParams(v InviteToSlackChannelTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToSlackChannelTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided InviteToSlackChannelTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeInviteToSlackChannelTaskParams(v InviteToSlackChannelTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInviteToSlackChannelVictorOpsTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a InviteToSlackChannelVictorOpsTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsInviteToSlackChannelVictorOpsTaskParams() (InviteToSlackChannelVictorOpsTaskParams, error) {
	var body InviteToSlackChannelVictorOpsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToSlackChannelVictorOpsTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided InviteToSlackChannelVictorOpsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromInviteToSlackChannelVictorOpsTaskParams(v InviteToSlackChannelVictorOpsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToSlackChannelVictorOpsTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided InviteToSlackChannelVictorOpsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeInviteToSlackChannelVictorOpsTaskParams(v InviteToSlackChannelVictorOpsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPageOpsgenieOnCallRespondersTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a PageOpsgenieOnCallRespondersTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsPageOpsgenieOnCallRespondersTaskParams() (PageOpsgenieOnCallRespondersTaskParams, error) {
	var body PageOpsgenieOnCallRespondersTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPageOpsgenieOnCallRespondersTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided PageOpsgenieOnCallRespondersTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromPageOpsgenieOnCallRespondersTaskParams(v PageOpsgenieOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePageOpsgenieOnCallRespondersTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided PageOpsgenieOnCallRespondersTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergePageOpsgenieOnCallRespondersTaskParams(v PageOpsgenieOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateOpsgenieAlertTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateOpsgenieAlertTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateOpsgenieAlertTaskParams() (CreateOpsgenieAlertTaskParams, error) {
	var body CreateOpsgenieAlertTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateOpsgenieAlertTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateOpsgenieAlertTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateOpsgenieAlertTaskParams(v CreateOpsgenieAlertTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateOpsgenieAlertTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateOpsgenieAlertTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateOpsgenieAlertTaskParams(v CreateOpsgenieAlertTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateOpsgenieAlertTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateOpsgenieAlertTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateOpsgenieAlertTaskParams() (UpdateOpsgenieAlertTaskParams, error) {
	var body UpdateOpsgenieAlertTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateOpsgenieAlertTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateOpsgenieAlertTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateOpsgenieAlertTaskParams(v UpdateOpsgenieAlertTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateOpsgenieAlertTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateOpsgenieAlertTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateOpsgenieAlertTaskParams(v UpdateOpsgenieAlertTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateOpsgenieIncidentTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateOpsgenieIncidentTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateOpsgenieIncidentTaskParams() (UpdateOpsgenieIncidentTaskParams, error) {
	var body UpdateOpsgenieIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateOpsgenieIncidentTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateOpsgenieIncidentTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateOpsgenieIncidentTaskParams(v UpdateOpsgenieIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateOpsgenieIncidentTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateOpsgenieIncidentTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateOpsgenieIncidentTaskParams(v UpdateOpsgenieIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPageRootlyOnCallRespondersTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a PageRootlyOnCallRespondersTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsPageRootlyOnCallRespondersTaskParams() (PageRootlyOnCallRespondersTaskParams, error) {
	var body PageRootlyOnCallRespondersTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPageRootlyOnCallRespondersTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided PageRootlyOnCallRespondersTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromPageRootlyOnCallRespondersTaskParams(v PageRootlyOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePageRootlyOnCallRespondersTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided PageRootlyOnCallRespondersTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergePageRootlyOnCallRespondersTaskParams(v PageRootlyOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPagePagerdutyOnCallRespondersTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a PagePagerdutyOnCallRespondersTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsPagePagerdutyOnCallRespondersTaskParams() (PagePagerdutyOnCallRespondersTaskParams, error) {
	var body PagePagerdutyOnCallRespondersTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPagePagerdutyOnCallRespondersTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided PagePagerdutyOnCallRespondersTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromPagePagerdutyOnCallRespondersTaskParams(v PagePagerdutyOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePagePagerdutyOnCallRespondersTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided PagePagerdutyOnCallRespondersTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergePagePagerdutyOnCallRespondersTaskParams(v PagePagerdutyOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPageVictorOpsOnCallRespondersTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a PageVictorOpsOnCallRespondersTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsPageVictorOpsOnCallRespondersTaskParams() (PageVictorOpsOnCallRespondersTaskParams, error) {
	var body PageVictorOpsOnCallRespondersTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPageVictorOpsOnCallRespondersTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided PageVictorOpsOnCallRespondersTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromPageVictorOpsOnCallRespondersTaskParams(v PageVictorOpsOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePageVictorOpsOnCallRespondersTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided PageVictorOpsOnCallRespondersTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergePageVictorOpsOnCallRespondersTaskParams(v PageVictorOpsOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateVictorOpsIncidentTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateVictorOpsIncidentTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateVictorOpsIncidentTaskParams() (UpdateVictorOpsIncidentTaskParams, error) {
	var body UpdateVictorOpsIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateVictorOpsIncidentTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateVictorOpsIncidentTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateVictorOpsIncidentTaskParams(v UpdateVictorOpsIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateVictorOpsIncidentTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateVictorOpsIncidentTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateVictorOpsIncidentTaskParams(v UpdateVictorOpsIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPrintTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a PrintTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsPrintTaskParams() (PrintTaskParams, error) {
	var body PrintTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrintTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided PrintTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromPrintTaskParams(v PrintTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrintTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided PrintTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergePrintTaskParams(v PrintTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublishIncidentTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a PublishIncidentTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsPublishIncidentTaskParams() (PublishIncidentTaskParams, error) {
	var body PublishIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublishIncidentTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided PublishIncidentTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromPublishIncidentTaskParams(v PublishIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublishIncidentTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided PublishIncidentTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergePublishIncidentTaskParams(v PublishIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRedisClientTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a RedisClientTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsRedisClientTaskParams() (RedisClientTaskParams, error) {
	var body RedisClientTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRedisClientTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided RedisClientTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromRedisClientTaskParams(v RedisClientTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRedisClientTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided RedisClientTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeRedisClientTaskParams(v RedisClientTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRenameSlackChannelTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a RenameSlackChannelTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsRenameSlackChannelTaskParams() (RenameSlackChannelTaskParams, error) {
	var body RenameSlackChannelTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRenameSlackChannelTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided RenameSlackChannelTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromRenameSlackChannelTaskParams(v RenameSlackChannelTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRenameSlackChannelTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided RenameSlackChannelTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeRenameSlackChannelTaskParams(v RenameSlackChannelTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChangeSlackChannelPrivacyTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a ChangeSlackChannelPrivacyTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsChangeSlackChannelPrivacyTaskParams() (ChangeSlackChannelPrivacyTaskParams, error) {
	var body ChangeSlackChannelPrivacyTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChangeSlackChannelPrivacyTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided ChangeSlackChannelPrivacyTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromChangeSlackChannelPrivacyTaskParams(v ChangeSlackChannelPrivacyTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChangeSlackChannelPrivacyTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided ChangeSlackChannelPrivacyTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeChangeSlackChannelPrivacyTaskParams(v ChangeSlackChannelPrivacyTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunCommandHerokuTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a RunCommandHerokuTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsRunCommandHerokuTaskParams() (RunCommandHerokuTaskParams, error) {
	var body RunCommandHerokuTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunCommandHerokuTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided RunCommandHerokuTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromRunCommandHerokuTaskParams(v RunCommandHerokuTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunCommandHerokuTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided RunCommandHerokuTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeRunCommandHerokuTaskParams(v RunCommandHerokuTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendEmailTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a SendEmailTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsSendEmailTaskParams() (SendEmailTaskParams, error) {
	var body SendEmailTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendEmailTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided SendEmailTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromSendEmailTaskParams(v SendEmailTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendEmailTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided SendEmailTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeSendEmailTaskParams(v SendEmailTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendDashboardReportTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a SendDashboardReportTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsSendDashboardReportTaskParams() (SendDashboardReportTaskParams, error) {
	var body SendDashboardReportTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendDashboardReportTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided SendDashboardReportTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromSendDashboardReportTaskParams(v SendDashboardReportTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendDashboardReportTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided SendDashboardReportTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeSendDashboardReportTaskParams(v SendDashboardReportTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateSlackChannelTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a CreateSlackChannelTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsCreateSlackChannelTaskParams() (CreateSlackChannelTaskParams, error) {
	var body CreateSlackChannelTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateSlackChannelTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided CreateSlackChannelTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromCreateSlackChannelTaskParams(v CreateSlackChannelTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateSlackChannelTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided CreateSlackChannelTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeCreateSlackChannelTaskParams(v CreateSlackChannelTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendSlackMessageTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a SendSlackMessageTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsSendSlackMessageTaskParams() (SendSlackMessageTaskParams, error) {
	var body SendSlackMessageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendSlackMessageTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided SendSlackMessageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromSendSlackMessageTaskParams(v SendSlackMessageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendSlackMessageTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided SendSlackMessageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeSendSlackMessageTaskParams(v SendSlackMessageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendSmsTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a SendSmsTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsSendSmsTaskParams() (SendSmsTaskParams, error) {
	var body SendSmsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendSmsTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided SendSmsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromSendSmsTaskParams(v SendSmsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendSmsTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided SendSmsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeSendSmsTaskParams(v SendSmsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendWhatsappMessageTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a SendWhatsappMessageTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsSendWhatsappMessageTaskParams() (SendWhatsappMessageTaskParams, error) {
	var body SendWhatsappMessageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendWhatsappMessageTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided SendWhatsappMessageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromSendWhatsappMessageTaskParams(v SendWhatsappMessageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendWhatsappMessageTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided SendWhatsappMessageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeSendWhatsappMessageTaskParams(v SendWhatsappMessageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSnapshotDatadogGraphTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a SnapshotDatadogGraphTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsSnapshotDatadogGraphTaskParams() (SnapshotDatadogGraphTaskParams, error) {
	var body SnapshotDatadogGraphTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSnapshotDatadogGraphTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided SnapshotDatadogGraphTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromSnapshotDatadogGraphTaskParams(v SnapshotDatadogGraphTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSnapshotDatadogGraphTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided SnapshotDatadogGraphTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeSnapshotDatadogGraphTaskParams(v SnapshotDatadogGraphTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSnapshotGrafanaDashboardTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a SnapshotGrafanaDashboardTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsSnapshotGrafanaDashboardTaskParams() (SnapshotGrafanaDashboardTaskParams, error) {
	var body SnapshotGrafanaDashboardTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSnapshotGrafanaDashboardTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided SnapshotGrafanaDashboardTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromSnapshotGrafanaDashboardTaskParams(v SnapshotGrafanaDashboardTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSnapshotGrafanaDashboardTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided SnapshotGrafanaDashboardTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeSnapshotGrafanaDashboardTaskParams(v SnapshotGrafanaDashboardTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSnapshotLookerLookTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a SnapshotLookerLookTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsSnapshotLookerLookTaskParams() (SnapshotLookerLookTaskParams, error) {
	var body SnapshotLookerLookTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSnapshotLookerLookTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided SnapshotLookerLookTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromSnapshotLookerLookTaskParams(v SnapshotLookerLookTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSnapshotLookerLookTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided SnapshotLookerLookTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeSnapshotLookerLookTaskParams(v SnapshotLookerLookTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSnapshotNewRelicGraphTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a SnapshotNewRelicGraphTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsSnapshotNewRelicGraphTaskParams() (SnapshotNewRelicGraphTaskParams, error) {
	var body SnapshotNewRelicGraphTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSnapshotNewRelicGraphTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided SnapshotNewRelicGraphTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromSnapshotNewRelicGraphTaskParams(v SnapshotNewRelicGraphTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSnapshotNewRelicGraphTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided SnapshotNewRelicGraphTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeSnapshotNewRelicGraphTaskParams(v SnapshotNewRelicGraphTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTweetTwitterMessageTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a TweetTwitterMessageTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsTweetTwitterMessageTaskParams() (TweetTwitterMessageTaskParams, error) {
	var body TweetTwitterMessageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTweetTwitterMessageTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided TweetTwitterMessageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromTweetTwitterMessageTaskParams(v TweetTwitterMessageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTweetTwitterMessageTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided TweetTwitterMessageTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeTweetTwitterMessageTaskParams(v TweetTwitterMessageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateAirtableTableRecordTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateAirtableTableRecordTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateAirtableTableRecordTaskParams() (UpdateAirtableTableRecordTaskParams, error) {
	var body UpdateAirtableTableRecordTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateAirtableTableRecordTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateAirtableTableRecordTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateAirtableTableRecordTaskParams(v UpdateAirtableTableRecordTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateAirtableTableRecordTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateAirtableTableRecordTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateAirtableTableRecordTaskParams(v UpdateAirtableTableRecordTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateAsanaTaskTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateAsanaTaskTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateAsanaTaskTaskParams() (UpdateAsanaTaskTaskParams, error) {
	var body UpdateAsanaTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateAsanaTaskTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateAsanaTaskTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateAsanaTaskTaskParams(v UpdateAsanaTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateAsanaTaskTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateAsanaTaskTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateAsanaTaskTaskParams(v UpdateAsanaTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateGithubIssueTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateGithubIssueTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateGithubIssueTaskParams() (UpdateGithubIssueTaskParams, error) {
	var body UpdateGithubIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateGithubIssueTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateGithubIssueTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateGithubIssueTaskParams(v UpdateGithubIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateGithubIssueTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateGithubIssueTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateGithubIssueTaskParams(v UpdateGithubIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateGitlabIssueTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateGitlabIssueTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateGitlabIssueTaskParams() (UpdateGitlabIssueTaskParams, error) {
	var body UpdateGitlabIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateGitlabIssueTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateGitlabIssueTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateGitlabIssueTaskParams(v UpdateGitlabIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateGitlabIssueTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateGitlabIssueTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateGitlabIssueTaskParams(v UpdateGitlabIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateIncidentTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateIncidentTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateIncidentTaskParams() (UpdateIncidentTaskParams, error) {
	var body UpdateIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateIncidentTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateIncidentTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateIncidentTaskParams(v UpdateIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateIncidentTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateIncidentTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateIncidentTaskParams(v UpdateIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateIncidentPostmortemTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateIncidentPostmortemTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateIncidentPostmortemTaskParams() (UpdateIncidentPostmortemTaskParams, error) {
	var body UpdateIncidentPostmortemTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateIncidentPostmortemTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateIncidentPostmortemTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateIncidentPostmortemTaskParams(v UpdateIncidentPostmortemTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateIncidentPostmortemTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateIncidentPostmortemTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateIncidentPostmortemTaskParams(v UpdateIncidentPostmortemTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateJiraIssueTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateJiraIssueTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateJiraIssueTaskParams() (UpdateJiraIssueTaskParams, error) {
	var body UpdateJiraIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateJiraIssueTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateJiraIssueTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateJiraIssueTaskParams(v UpdateJiraIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateJiraIssueTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateJiraIssueTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateJiraIssueTaskParams(v UpdateJiraIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateLinearIssueTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateLinearIssueTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateLinearIssueTaskParams() (UpdateLinearIssueTaskParams, error) {
	var body UpdateLinearIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateLinearIssueTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateLinearIssueTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateLinearIssueTaskParams(v UpdateLinearIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateLinearIssueTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateLinearIssueTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateLinearIssueTaskParams(v UpdateLinearIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateServiceNowIncidentTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateServiceNowIncidentTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateServiceNowIncidentTaskParams() (UpdateServiceNowIncidentTaskParams, error) {
	var body UpdateServiceNowIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateServiceNowIncidentTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateServiceNowIncidentTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateServiceNowIncidentTaskParams(v UpdateServiceNowIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateServiceNowIncidentTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateServiceNowIncidentTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateServiceNowIncidentTaskParams(v UpdateServiceNowIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateShortcutStoryTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateShortcutStoryTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateShortcutStoryTaskParams() (UpdateShortcutStoryTaskParams, error) {
	var body UpdateShortcutStoryTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateShortcutStoryTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateShortcutStoryTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateShortcutStoryTaskParams(v UpdateShortcutStoryTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateShortcutStoryTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateShortcutStoryTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateShortcutStoryTaskParams(v UpdateShortcutStoryTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateShortcutTaskTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateShortcutTaskTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateShortcutTaskTaskParams() (UpdateShortcutTaskTaskParams, error) {
	var body UpdateShortcutTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateShortcutTaskTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateShortcutTaskTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateShortcutTaskTaskParams(v UpdateShortcutTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateShortcutTaskTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateShortcutTaskTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateShortcutTaskTaskParams(v UpdateShortcutTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateSlackChannelTopicTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateSlackChannelTopicTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateSlackChannelTopicTaskParams() (UpdateSlackChannelTopicTaskParams, error) {
	var body UpdateSlackChannelTopicTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateSlackChannelTopicTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateSlackChannelTopicTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateSlackChannelTopicTaskParams(v UpdateSlackChannelTopicTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateSlackChannelTopicTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateSlackChannelTopicTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateSlackChannelTopicTaskParams(v UpdateSlackChannelTopicTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateStatusTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateStatusTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateStatusTaskParams() (UpdateStatusTaskParams, error) {
	var body UpdateStatusTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateStatusTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateStatusTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateStatusTaskParams(v UpdateStatusTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateStatusTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateStatusTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateStatusTaskParams(v UpdateStatusTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateIncidentStatusTimestampTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateIncidentStatusTimestampTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateIncidentStatusTimestampTaskParams() (UpdateIncidentStatusTimestampTaskParams, error) {
	var body UpdateIncidentStatusTimestampTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateIncidentStatusTimestampTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateIncidentStatusTimestampTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateIncidentStatusTimestampTaskParams(v UpdateIncidentStatusTimestampTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateIncidentStatusTimestampTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateIncidentStatusTimestampTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateIncidentStatusTimestampTaskParams(v UpdateIncidentStatusTimestampTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateTrelloCardTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateTrelloCardTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateTrelloCardTaskParams() (UpdateTrelloCardTaskParams, error) {
	var body UpdateTrelloCardTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateTrelloCardTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateTrelloCardTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateTrelloCardTaskParams(v UpdateTrelloCardTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateTrelloCardTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateTrelloCardTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateTrelloCardTaskParams(v UpdateTrelloCardTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateClickupTaskTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateClickupTaskTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateClickupTaskTaskParams() (UpdateClickupTaskTaskParams, error) {
	var body UpdateClickupTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateClickupTaskTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateClickupTaskTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateClickupTaskTaskParams(v UpdateClickupTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateClickupTaskTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateClickupTaskTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateClickupTaskTaskParams(v UpdateClickupTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateMotionTaskTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateMotionTaskTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateMotionTaskTaskParams() (UpdateMotionTaskTaskParams, error) {
	var body UpdateMotionTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateMotionTaskTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateMotionTaskTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateMotionTaskTaskParams(v UpdateMotionTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateMotionTaskTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateMotionTaskTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateMotionTaskTaskParams(v UpdateMotionTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateZendeskTicketTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateZendeskTicketTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateZendeskTicketTaskParams() (UpdateZendeskTicketTaskParams, error) {
	var body UpdateZendeskTicketTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateZendeskTicketTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateZendeskTicketTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateZendeskTicketTaskParams(v UpdateZendeskTicketTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateZendeskTicketTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateZendeskTicketTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateZendeskTicketTaskParams(v UpdateZendeskTicketTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateAttachedAlertsTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a UpdateAttachedAlertsTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsUpdateAttachedAlertsTaskParams() (UpdateAttachedAlertsTaskParams, error) {
	var body UpdateAttachedAlertsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateAttachedAlertsTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided UpdateAttachedAlertsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromUpdateAttachedAlertsTaskParams(v UpdateAttachedAlertsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateAttachedAlertsTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided UpdateAttachedAlertsTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeUpdateAttachedAlertsTaskParams(v UpdateAttachedAlertsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTriggerWorkflowTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a TriggerWorkflowTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsTriggerWorkflowTaskParams() (TriggerWorkflowTaskParams, error) {
	var body TriggerWorkflowTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTriggerWorkflowTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided TriggerWorkflowTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromTriggerWorkflowTaskParams(v TriggerWorkflowTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTriggerWorkflowTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided TriggerWorkflowTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeTriggerWorkflowTaskParams(v TriggerWorkflowTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendSlackBlocksTaskParams returns the union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as a SendSlackBlocksTaskParams
func (t UpdateWorkflowTask_Data_Attributes_TaskParams) AsSendSlackBlocksTaskParams() (SendSlackBlocksTaskParams, error) {
	var body SendSlackBlocksTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendSlackBlocksTaskParams overwrites any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams as the provided SendSlackBlocksTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) FromSendSlackBlocksTaskParams(v SendSlackBlocksTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendSlackBlocksTaskParams performs a merge with any union data inside the UpdateWorkflowTask_Data_Attributes_TaskParams, using the provided SendSlackBlocksTaskParams
func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) MergeSendSlackBlocksTaskParams(v SendSlackBlocksTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdateWorkflowTask_Data_Attributes_TaskParams) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdateWorkflowTask_Data_Attributes_TaskParams) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIncidentTriggerParams returns the union data inside the Workflow_TriggerParams as a IncidentTriggerParams
func (t Workflow_TriggerParams) AsIncidentTriggerParams() (IncidentTriggerParams, error) {
	var body IncidentTriggerParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentTriggerParams overwrites any union data inside the Workflow_TriggerParams as the provided IncidentTriggerParams
func (t *Workflow_TriggerParams) FromIncidentTriggerParams(v IncidentTriggerParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentTriggerParams performs a merge with any union data inside the Workflow_TriggerParams, using the provided IncidentTriggerParams
func (t *Workflow_TriggerParams) MergeIncidentTriggerParams(v IncidentTriggerParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionItemTriggerParams returns the union data inside the Workflow_TriggerParams as a ActionItemTriggerParams
func (t Workflow_TriggerParams) AsActionItemTriggerParams() (ActionItemTriggerParams, error) {
	var body ActionItemTriggerParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionItemTriggerParams overwrites any union data inside the Workflow_TriggerParams as the provided ActionItemTriggerParams
func (t *Workflow_TriggerParams) FromActionItemTriggerParams(v ActionItemTriggerParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionItemTriggerParams performs a merge with any union data inside the Workflow_TriggerParams, using the provided ActionItemTriggerParams
func (t *Workflow_TriggerParams) MergeActionItemTriggerParams(v ActionItemTriggerParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAlertTriggerParams returns the union data inside the Workflow_TriggerParams as a AlertTriggerParams
func (t Workflow_TriggerParams) AsAlertTriggerParams() (AlertTriggerParams, error) {
	var body AlertTriggerParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAlertTriggerParams overwrites any union data inside the Workflow_TriggerParams as the provided AlertTriggerParams
func (t *Workflow_TriggerParams) FromAlertTriggerParams(v AlertTriggerParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAlertTriggerParams performs a merge with any union data inside the Workflow_TriggerParams, using the provided AlertTriggerParams
func (t *Workflow_TriggerParams) MergeAlertTriggerParams(v AlertTriggerParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPulseTriggerParams returns the union data inside the Workflow_TriggerParams as a PulseTriggerParams
func (t Workflow_TriggerParams) AsPulseTriggerParams() (PulseTriggerParams, error) {
	var body PulseTriggerParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPulseTriggerParams overwrites any union data inside the Workflow_TriggerParams as the provided PulseTriggerParams
func (t *Workflow_TriggerParams) FromPulseTriggerParams(v PulseTriggerParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePulseTriggerParams performs a merge with any union data inside the Workflow_TriggerParams, using the provided PulseTriggerParams
func (t *Workflow_TriggerParams) MergePulseTriggerParams(v PulseTriggerParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSimpleTriggerParams returns the union data inside the Workflow_TriggerParams as a SimpleTriggerParams
func (t Workflow_TriggerParams) AsSimpleTriggerParams() (SimpleTriggerParams, error) {
	var body SimpleTriggerParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSimpleTriggerParams overwrites any union data inside the Workflow_TriggerParams as the provided SimpleTriggerParams
func (t *Workflow_TriggerParams) FromSimpleTriggerParams(v SimpleTriggerParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSimpleTriggerParams performs a merge with any union data inside the Workflow_TriggerParams, using the provided SimpleTriggerParams
func (t *Workflow_TriggerParams) MergeSimpleTriggerParams(v SimpleTriggerParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Workflow_TriggerParams) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Workflow_TriggerParams) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAddActionItemTaskParams returns the union data inside the WorkflowTask_TaskParams as a AddActionItemTaskParams
func (t WorkflowTask_TaskParams) AsAddActionItemTaskParams() (AddActionItemTaskParams, error) {
	var body AddActionItemTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddActionItemTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided AddActionItemTaskParams
func (t *WorkflowTask_TaskParams) FromAddActionItemTaskParams(v AddActionItemTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddActionItemTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided AddActionItemTaskParams
func (t *WorkflowTask_TaskParams) MergeAddActionItemTaskParams(v AddActionItemTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateActionItemTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateActionItemTaskParams
func (t WorkflowTask_TaskParams) AsUpdateActionItemTaskParams() (UpdateActionItemTaskParams, error) {
	var body UpdateActionItemTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateActionItemTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateActionItemTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateActionItemTaskParams(v UpdateActionItemTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateActionItemTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateActionItemTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateActionItemTaskParams(v UpdateActionItemTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAddRoleTaskParams returns the union data inside the WorkflowTask_TaskParams as a AddRoleTaskParams
func (t WorkflowTask_TaskParams) AsAddRoleTaskParams() (AddRoleTaskParams, error) {
	var body AddRoleTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddRoleTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided AddRoleTaskParams
func (t *WorkflowTask_TaskParams) FromAddRoleTaskParams(v AddRoleTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddRoleTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided AddRoleTaskParams
func (t *WorkflowTask_TaskParams) MergeAddRoleTaskParams(v AddRoleTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAddSlackBookmarkTaskParams returns the union data inside the WorkflowTask_TaskParams as a AddSlackBookmarkTaskParams
func (t WorkflowTask_TaskParams) AsAddSlackBookmarkTaskParams() (AddSlackBookmarkTaskParams, error) {
	var body AddSlackBookmarkTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddSlackBookmarkTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided AddSlackBookmarkTaskParams
func (t *WorkflowTask_TaskParams) FromAddSlackBookmarkTaskParams(v AddSlackBookmarkTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddSlackBookmarkTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided AddSlackBookmarkTaskParams
func (t *WorkflowTask_TaskParams) MergeAddSlackBookmarkTaskParams(v AddSlackBookmarkTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAddTeamTaskParams returns the union data inside the WorkflowTask_TaskParams as a AddTeamTaskParams
func (t WorkflowTask_TaskParams) AsAddTeamTaskParams() (AddTeamTaskParams, error) {
	var body AddTeamTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddTeamTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided AddTeamTaskParams
func (t *WorkflowTask_TaskParams) FromAddTeamTaskParams(v AddTeamTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddTeamTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided AddTeamTaskParams
func (t *WorkflowTask_TaskParams) MergeAddTeamTaskParams(v AddTeamTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAddToTimelineTaskParams returns the union data inside the WorkflowTask_TaskParams as a AddToTimelineTaskParams
func (t WorkflowTask_TaskParams) AsAddToTimelineTaskParams() (AddToTimelineTaskParams, error) {
	var body AddToTimelineTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddToTimelineTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided AddToTimelineTaskParams
func (t *WorkflowTask_TaskParams) FromAddToTimelineTaskParams(v AddToTimelineTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddToTimelineTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided AddToTimelineTaskParams
func (t *WorkflowTask_TaskParams) MergeAddToTimelineTaskParams(v AddToTimelineTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchiveSlackChannelsTaskParams returns the union data inside the WorkflowTask_TaskParams as a ArchiveSlackChannelsTaskParams
func (t WorkflowTask_TaskParams) AsArchiveSlackChannelsTaskParams() (ArchiveSlackChannelsTaskParams, error) {
	var body ArchiveSlackChannelsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchiveSlackChannelsTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided ArchiveSlackChannelsTaskParams
func (t *WorkflowTask_TaskParams) FromArchiveSlackChannelsTaskParams(v ArchiveSlackChannelsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchiveSlackChannelsTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided ArchiveSlackChannelsTaskParams
func (t *WorkflowTask_TaskParams) MergeArchiveSlackChannelsTaskParams(v ArchiveSlackChannelsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAttachDatadogDashboardsTaskParams returns the union data inside the WorkflowTask_TaskParams as a AttachDatadogDashboardsTaskParams
func (t WorkflowTask_TaskParams) AsAttachDatadogDashboardsTaskParams() (AttachDatadogDashboardsTaskParams, error) {
	var body AttachDatadogDashboardsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAttachDatadogDashboardsTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided AttachDatadogDashboardsTaskParams
func (t *WorkflowTask_TaskParams) FromAttachDatadogDashboardsTaskParams(v AttachDatadogDashboardsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAttachDatadogDashboardsTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided AttachDatadogDashboardsTaskParams
func (t *WorkflowTask_TaskParams) MergeAttachDatadogDashboardsTaskParams(v AttachDatadogDashboardsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAutoAssignRoleOpsgenieTaskParams returns the union data inside the WorkflowTask_TaskParams as a AutoAssignRoleOpsgenieTaskParams
func (t WorkflowTask_TaskParams) AsAutoAssignRoleOpsgenieTaskParams() (AutoAssignRoleOpsgenieTaskParams, error) {
	var body AutoAssignRoleOpsgenieTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAutoAssignRoleOpsgenieTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided AutoAssignRoleOpsgenieTaskParams
func (t *WorkflowTask_TaskParams) FromAutoAssignRoleOpsgenieTaskParams(v AutoAssignRoleOpsgenieTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAutoAssignRoleOpsgenieTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided AutoAssignRoleOpsgenieTaskParams
func (t *WorkflowTask_TaskParams) MergeAutoAssignRoleOpsgenieTaskParams(v AutoAssignRoleOpsgenieTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAutoAssignRoleRootlyTaskParams returns the union data inside the WorkflowTask_TaskParams as a AutoAssignRoleRootlyTaskParams
func (t WorkflowTask_TaskParams) AsAutoAssignRoleRootlyTaskParams() (AutoAssignRoleRootlyTaskParams, error) {
	var body AutoAssignRoleRootlyTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAutoAssignRoleRootlyTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided AutoAssignRoleRootlyTaskParams
func (t *WorkflowTask_TaskParams) FromAutoAssignRoleRootlyTaskParams(v AutoAssignRoleRootlyTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAutoAssignRoleRootlyTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided AutoAssignRoleRootlyTaskParams
func (t *WorkflowTask_TaskParams) MergeAutoAssignRoleRootlyTaskParams(v AutoAssignRoleRootlyTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAutoAssignRolePagerdutyTaskParams returns the union data inside the WorkflowTask_TaskParams as a AutoAssignRolePagerdutyTaskParams
func (t WorkflowTask_TaskParams) AsAutoAssignRolePagerdutyTaskParams() (AutoAssignRolePagerdutyTaskParams, error) {
	var body AutoAssignRolePagerdutyTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAutoAssignRolePagerdutyTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided AutoAssignRolePagerdutyTaskParams
func (t *WorkflowTask_TaskParams) FromAutoAssignRolePagerdutyTaskParams(v AutoAssignRolePagerdutyTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAutoAssignRolePagerdutyTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided AutoAssignRolePagerdutyTaskParams
func (t *WorkflowTask_TaskParams) MergeAutoAssignRolePagerdutyTaskParams(v AutoAssignRolePagerdutyTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdatePagerdutyIncidentTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdatePagerdutyIncidentTaskParams
func (t WorkflowTask_TaskParams) AsUpdatePagerdutyIncidentTaskParams() (UpdatePagerdutyIncidentTaskParams, error) {
	var body UpdatePagerdutyIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdatePagerdutyIncidentTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdatePagerdutyIncidentTaskParams
func (t *WorkflowTask_TaskParams) FromUpdatePagerdutyIncidentTaskParams(v UpdatePagerdutyIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdatePagerdutyIncidentTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdatePagerdutyIncidentTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdatePagerdutyIncidentTaskParams(v UpdatePagerdutyIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreatePagerdutyStatusUpdateTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreatePagerdutyStatusUpdateTaskParams
func (t WorkflowTask_TaskParams) AsCreatePagerdutyStatusUpdateTaskParams() (CreatePagerdutyStatusUpdateTaskParams, error) {
	var body CreatePagerdutyStatusUpdateTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreatePagerdutyStatusUpdateTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreatePagerdutyStatusUpdateTaskParams
func (t *WorkflowTask_TaskParams) FromCreatePagerdutyStatusUpdateTaskParams(v CreatePagerdutyStatusUpdateTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreatePagerdutyStatusUpdateTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreatePagerdutyStatusUpdateTaskParams
func (t *WorkflowTask_TaskParams) MergeCreatePagerdutyStatusUpdateTaskParams(v CreatePagerdutyStatusUpdateTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreatePagertreeAlertTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreatePagertreeAlertTaskParams
func (t WorkflowTask_TaskParams) AsCreatePagertreeAlertTaskParams() (CreatePagertreeAlertTaskParams, error) {
	var body CreatePagertreeAlertTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreatePagertreeAlertTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreatePagertreeAlertTaskParams
func (t *WorkflowTask_TaskParams) FromCreatePagertreeAlertTaskParams(v CreatePagertreeAlertTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreatePagertreeAlertTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreatePagertreeAlertTaskParams
func (t *WorkflowTask_TaskParams) MergeCreatePagertreeAlertTaskParams(v CreatePagertreeAlertTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdatePagertreeAlertTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdatePagertreeAlertTaskParams
func (t WorkflowTask_TaskParams) AsUpdatePagertreeAlertTaskParams() (UpdatePagertreeAlertTaskParams, error) {
	var body UpdatePagertreeAlertTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdatePagertreeAlertTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdatePagertreeAlertTaskParams
func (t *WorkflowTask_TaskParams) FromUpdatePagertreeAlertTaskParams(v UpdatePagertreeAlertTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdatePagertreeAlertTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdatePagertreeAlertTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdatePagertreeAlertTaskParams(v UpdatePagertreeAlertTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAutoAssignRoleVictorOpsTaskParams returns the union data inside the WorkflowTask_TaskParams as a AutoAssignRoleVictorOpsTaskParams
func (t WorkflowTask_TaskParams) AsAutoAssignRoleVictorOpsTaskParams() (AutoAssignRoleVictorOpsTaskParams, error) {
	var body AutoAssignRoleVictorOpsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAutoAssignRoleVictorOpsTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided AutoAssignRoleVictorOpsTaskParams
func (t *WorkflowTask_TaskParams) FromAutoAssignRoleVictorOpsTaskParams(v AutoAssignRoleVictorOpsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAutoAssignRoleVictorOpsTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided AutoAssignRoleVictorOpsTaskParams
func (t *WorkflowTask_TaskParams) MergeAutoAssignRoleVictorOpsTaskParams(v AutoAssignRoleVictorOpsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCallPeopleTaskParams returns the union data inside the WorkflowTask_TaskParams as a CallPeopleTaskParams
func (t WorkflowTask_TaskParams) AsCallPeopleTaskParams() (CallPeopleTaskParams, error) {
	var body CallPeopleTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCallPeopleTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CallPeopleTaskParams
func (t *WorkflowTask_TaskParams) FromCallPeopleTaskParams(v CallPeopleTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCallPeopleTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CallPeopleTaskParams
func (t *WorkflowTask_TaskParams) MergeCallPeopleTaskParams(v CallPeopleTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateAirtableTableRecordTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateAirtableTableRecordTaskParams
func (t WorkflowTask_TaskParams) AsCreateAirtableTableRecordTaskParams() (CreateAirtableTableRecordTaskParams, error) {
	var body CreateAirtableTableRecordTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateAirtableTableRecordTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateAirtableTableRecordTaskParams
func (t *WorkflowTask_TaskParams) FromCreateAirtableTableRecordTaskParams(v CreateAirtableTableRecordTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateAirtableTableRecordTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateAirtableTableRecordTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateAirtableTableRecordTaskParams(v CreateAirtableTableRecordTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateAsanaSubtaskTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateAsanaSubtaskTaskParams
func (t WorkflowTask_TaskParams) AsCreateAsanaSubtaskTaskParams() (CreateAsanaSubtaskTaskParams, error) {
	var body CreateAsanaSubtaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateAsanaSubtaskTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateAsanaSubtaskTaskParams
func (t *WorkflowTask_TaskParams) FromCreateAsanaSubtaskTaskParams(v CreateAsanaSubtaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateAsanaSubtaskTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateAsanaSubtaskTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateAsanaSubtaskTaskParams(v CreateAsanaSubtaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateAsanaTaskTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateAsanaTaskTaskParams
func (t WorkflowTask_TaskParams) AsCreateAsanaTaskTaskParams() (CreateAsanaTaskTaskParams, error) {
	var body CreateAsanaTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateAsanaTaskTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateAsanaTaskTaskParams
func (t *WorkflowTask_TaskParams) FromCreateAsanaTaskTaskParams(v CreateAsanaTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateAsanaTaskTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateAsanaTaskTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateAsanaTaskTaskParams(v CreateAsanaTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateConfluencePageTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateConfluencePageTaskParams
func (t WorkflowTask_TaskParams) AsCreateConfluencePageTaskParams() (CreateConfluencePageTaskParams, error) {
	var body CreateConfluencePageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateConfluencePageTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateConfluencePageTaskParams
func (t *WorkflowTask_TaskParams) FromCreateConfluencePageTaskParams(v CreateConfluencePageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateConfluencePageTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateConfluencePageTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateConfluencePageTaskParams(v CreateConfluencePageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateDatadogNotebookTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateDatadogNotebookTaskParams
func (t WorkflowTask_TaskParams) AsCreateDatadogNotebookTaskParams() (CreateDatadogNotebookTaskParams, error) {
	var body CreateDatadogNotebookTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateDatadogNotebookTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateDatadogNotebookTaskParams
func (t *WorkflowTask_TaskParams) FromCreateDatadogNotebookTaskParams(v CreateDatadogNotebookTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateDatadogNotebookTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateDatadogNotebookTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateDatadogNotebookTaskParams(v CreateDatadogNotebookTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateDropboxPaperPageTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateDropboxPaperPageTaskParams
func (t WorkflowTask_TaskParams) AsCreateDropboxPaperPageTaskParams() (CreateDropboxPaperPageTaskParams, error) {
	var body CreateDropboxPaperPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateDropboxPaperPageTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateDropboxPaperPageTaskParams
func (t *WorkflowTask_TaskParams) FromCreateDropboxPaperPageTaskParams(v CreateDropboxPaperPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateDropboxPaperPageTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateDropboxPaperPageTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateDropboxPaperPageTaskParams(v CreateDropboxPaperPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGithubIssueTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateGithubIssueTaskParams
func (t WorkflowTask_TaskParams) AsCreateGithubIssueTaskParams() (CreateGithubIssueTaskParams, error) {
	var body CreateGithubIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGithubIssueTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateGithubIssueTaskParams
func (t *WorkflowTask_TaskParams) FromCreateGithubIssueTaskParams(v CreateGithubIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGithubIssueTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateGithubIssueTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateGithubIssueTaskParams(v CreateGithubIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGitlabIssueTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateGitlabIssueTaskParams
func (t WorkflowTask_TaskParams) AsCreateGitlabIssueTaskParams() (CreateGitlabIssueTaskParams, error) {
	var body CreateGitlabIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGitlabIssueTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateGitlabIssueTaskParams
func (t *WorkflowTask_TaskParams) FromCreateGitlabIssueTaskParams(v CreateGitlabIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGitlabIssueTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateGitlabIssueTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateGitlabIssueTaskParams(v CreateGitlabIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateOutlookEventTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateOutlookEventTaskParams
func (t WorkflowTask_TaskParams) AsCreateOutlookEventTaskParams() (CreateOutlookEventTaskParams, error) {
	var body CreateOutlookEventTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateOutlookEventTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateOutlookEventTaskParams
func (t *WorkflowTask_TaskParams) FromCreateOutlookEventTaskParams(v CreateOutlookEventTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateOutlookEventTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateOutlookEventTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateOutlookEventTaskParams(v CreateOutlookEventTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGoogleCalendarEventTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateGoogleCalendarEventTaskParams
func (t WorkflowTask_TaskParams) AsCreateGoogleCalendarEventTaskParams() (CreateGoogleCalendarEventTaskParams, error) {
	var body CreateGoogleCalendarEventTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGoogleCalendarEventTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateGoogleCalendarEventTaskParams
func (t *WorkflowTask_TaskParams) FromCreateGoogleCalendarEventTaskParams(v CreateGoogleCalendarEventTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGoogleCalendarEventTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateGoogleCalendarEventTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateGoogleCalendarEventTaskParams(v CreateGoogleCalendarEventTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateGoogleDocsPageTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateGoogleDocsPageTaskParams
func (t WorkflowTask_TaskParams) AsUpdateGoogleDocsPageTaskParams() (UpdateGoogleDocsPageTaskParams, error) {
	var body UpdateGoogleDocsPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateGoogleDocsPageTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateGoogleDocsPageTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateGoogleDocsPageTaskParams(v UpdateGoogleDocsPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateGoogleDocsPageTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateGoogleDocsPageTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateGoogleDocsPageTaskParams(v UpdateGoogleDocsPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateGoogleCalendarEventTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateGoogleCalendarEventTaskParams
func (t WorkflowTask_TaskParams) AsUpdateGoogleCalendarEventTaskParams() (UpdateGoogleCalendarEventTaskParams, error) {
	var body UpdateGoogleCalendarEventTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateGoogleCalendarEventTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateGoogleCalendarEventTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateGoogleCalendarEventTaskParams(v UpdateGoogleCalendarEventTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateGoogleCalendarEventTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateGoogleCalendarEventTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateGoogleCalendarEventTaskParams(v UpdateGoogleCalendarEventTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateSharepointPageTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateSharepointPageTaskParams
func (t WorkflowTask_TaskParams) AsCreateSharepointPageTaskParams() (CreateSharepointPageTaskParams, error) {
	var body CreateSharepointPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateSharepointPageTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateSharepointPageTaskParams
func (t *WorkflowTask_TaskParams) FromCreateSharepointPageTaskParams(v CreateSharepointPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateSharepointPageTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateSharepointPageTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateSharepointPageTaskParams(v CreateSharepointPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGoogleDocsPageTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateGoogleDocsPageTaskParams
func (t WorkflowTask_TaskParams) AsCreateGoogleDocsPageTaskParams() (CreateGoogleDocsPageTaskParams, error) {
	var body CreateGoogleDocsPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGoogleDocsPageTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateGoogleDocsPageTaskParams
func (t *WorkflowTask_TaskParams) FromCreateGoogleDocsPageTaskParams(v CreateGoogleDocsPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGoogleDocsPageTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateGoogleDocsPageTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateGoogleDocsPageTaskParams(v CreateGoogleDocsPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGoogleDocsPermissionsTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateGoogleDocsPermissionsTaskParams
func (t WorkflowTask_TaskParams) AsCreateGoogleDocsPermissionsTaskParams() (CreateGoogleDocsPermissionsTaskParams, error) {
	var body CreateGoogleDocsPermissionsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGoogleDocsPermissionsTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateGoogleDocsPermissionsTaskParams
func (t *WorkflowTask_TaskParams) FromCreateGoogleDocsPermissionsTaskParams(v CreateGoogleDocsPermissionsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGoogleDocsPermissionsTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateGoogleDocsPermissionsTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateGoogleDocsPermissionsTaskParams(v CreateGoogleDocsPermissionsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRemoveGoogleDocsPermissionsTaskParams returns the union data inside the WorkflowTask_TaskParams as a RemoveGoogleDocsPermissionsTaskParams
func (t WorkflowTask_TaskParams) AsRemoveGoogleDocsPermissionsTaskParams() (RemoveGoogleDocsPermissionsTaskParams, error) {
	var body RemoveGoogleDocsPermissionsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRemoveGoogleDocsPermissionsTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided RemoveGoogleDocsPermissionsTaskParams
func (t *WorkflowTask_TaskParams) FromRemoveGoogleDocsPermissionsTaskParams(v RemoveGoogleDocsPermissionsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRemoveGoogleDocsPermissionsTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided RemoveGoogleDocsPermissionsTaskParams
func (t *WorkflowTask_TaskParams) MergeRemoveGoogleDocsPermissionsTaskParams(v RemoveGoogleDocsPermissionsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateQuipPageTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateQuipPageTaskParams
func (t WorkflowTask_TaskParams) AsCreateQuipPageTaskParams() (CreateQuipPageTaskParams, error) {
	var body CreateQuipPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateQuipPageTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateQuipPageTaskParams
func (t *WorkflowTask_TaskParams) FromCreateQuipPageTaskParams(v CreateQuipPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateQuipPageTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateQuipPageTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateQuipPageTaskParams(v CreateQuipPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGoogleMeetingTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateGoogleMeetingTaskParams
func (t WorkflowTask_TaskParams) AsCreateGoogleMeetingTaskParams() (CreateGoogleMeetingTaskParams, error) {
	var body CreateGoogleMeetingTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGoogleMeetingTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateGoogleMeetingTaskParams
func (t *WorkflowTask_TaskParams) FromCreateGoogleMeetingTaskParams(v CreateGoogleMeetingTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGoogleMeetingTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateGoogleMeetingTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateGoogleMeetingTaskParams(v CreateGoogleMeetingTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateGoToMeetingTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateGoToMeetingTaskParams
func (t WorkflowTask_TaskParams) AsCreateGoToMeetingTaskParams() (CreateGoToMeetingTaskParams, error) {
	var body CreateGoToMeetingTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateGoToMeetingTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateGoToMeetingTaskParams
func (t *WorkflowTask_TaskParams) FromCreateGoToMeetingTaskParams(v CreateGoToMeetingTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateGoToMeetingTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateGoToMeetingTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateGoToMeetingTaskParams(v CreateGoToMeetingTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateIncidentTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateIncidentTaskParams
func (t WorkflowTask_TaskParams) AsCreateIncidentTaskParams() (CreateIncidentTaskParams, error) {
	var body CreateIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateIncidentTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateIncidentTaskParams
func (t *WorkflowTask_TaskParams) FromCreateIncidentTaskParams(v CreateIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateIncidentTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateIncidentTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateIncidentTaskParams(v CreateIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateIncidentPostmortemTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateIncidentPostmortemTaskParams
func (t WorkflowTask_TaskParams) AsCreateIncidentPostmortemTaskParams() (CreateIncidentPostmortemTaskParams, error) {
	var body CreateIncidentPostmortemTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateIncidentPostmortemTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateIncidentPostmortemTaskParams
func (t *WorkflowTask_TaskParams) FromCreateIncidentPostmortemTaskParams(v CreateIncidentPostmortemTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateIncidentPostmortemTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateIncidentPostmortemTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateIncidentPostmortemTaskParams(v CreateIncidentPostmortemTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateJiraIssueTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateJiraIssueTaskParams
func (t WorkflowTask_TaskParams) AsCreateJiraIssueTaskParams() (CreateJiraIssueTaskParams, error) {
	var body CreateJiraIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateJiraIssueTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateJiraIssueTaskParams
func (t *WorkflowTask_TaskParams) FromCreateJiraIssueTaskParams(v CreateJiraIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateJiraIssueTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateJiraIssueTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateJiraIssueTaskParams(v CreateJiraIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateJiraSubtaskTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateJiraSubtaskTaskParams
func (t WorkflowTask_TaskParams) AsCreateJiraSubtaskTaskParams() (CreateJiraSubtaskTaskParams, error) {
	var body CreateJiraSubtaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateJiraSubtaskTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateJiraSubtaskTaskParams
func (t *WorkflowTask_TaskParams) FromCreateJiraSubtaskTaskParams(v CreateJiraSubtaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateJiraSubtaskTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateJiraSubtaskTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateJiraSubtaskTaskParams(v CreateJiraSubtaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateLinearIssueTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateLinearIssueTaskParams
func (t WorkflowTask_TaskParams) AsCreateLinearIssueTaskParams() (CreateLinearIssueTaskParams, error) {
	var body CreateLinearIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateLinearIssueTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateLinearIssueTaskParams
func (t *WorkflowTask_TaskParams) FromCreateLinearIssueTaskParams(v CreateLinearIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateLinearIssueTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateLinearIssueTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateLinearIssueTaskParams(v CreateLinearIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateLinearSubtaskIssueTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateLinearSubtaskIssueTaskParams
func (t WorkflowTask_TaskParams) AsCreateLinearSubtaskIssueTaskParams() (CreateLinearSubtaskIssueTaskParams, error) {
	var body CreateLinearSubtaskIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateLinearSubtaskIssueTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateLinearSubtaskIssueTaskParams
func (t *WorkflowTask_TaskParams) FromCreateLinearSubtaskIssueTaskParams(v CreateLinearSubtaskIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateLinearSubtaskIssueTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateLinearSubtaskIssueTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateLinearSubtaskIssueTaskParams(v CreateLinearSubtaskIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateLinearIssueCommentTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateLinearIssueCommentTaskParams
func (t WorkflowTask_TaskParams) AsCreateLinearIssueCommentTaskParams() (CreateLinearIssueCommentTaskParams, error) {
	var body CreateLinearIssueCommentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateLinearIssueCommentTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateLinearIssueCommentTaskParams
func (t *WorkflowTask_TaskParams) FromCreateLinearIssueCommentTaskParams(v CreateLinearIssueCommentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateLinearIssueCommentTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateLinearIssueCommentTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateLinearIssueCommentTaskParams(v CreateLinearIssueCommentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateMicrosoftTeamsMeetingTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateMicrosoftTeamsMeetingTaskParams
func (t WorkflowTask_TaskParams) AsCreateMicrosoftTeamsMeetingTaskParams() (CreateMicrosoftTeamsMeetingTaskParams, error) {
	var body CreateMicrosoftTeamsMeetingTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateMicrosoftTeamsMeetingTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateMicrosoftTeamsMeetingTaskParams
func (t *WorkflowTask_TaskParams) FromCreateMicrosoftTeamsMeetingTaskParams(v CreateMicrosoftTeamsMeetingTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateMicrosoftTeamsMeetingTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateMicrosoftTeamsMeetingTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateMicrosoftTeamsMeetingTaskParams(v CreateMicrosoftTeamsMeetingTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateMicrosoftTeamsChannelTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateMicrosoftTeamsChannelTaskParams
func (t WorkflowTask_TaskParams) AsCreateMicrosoftTeamsChannelTaskParams() (CreateMicrosoftTeamsChannelTaskParams, error) {
	var body CreateMicrosoftTeamsChannelTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateMicrosoftTeamsChannelTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateMicrosoftTeamsChannelTaskParams
func (t *WorkflowTask_TaskParams) FromCreateMicrosoftTeamsChannelTaskParams(v CreateMicrosoftTeamsChannelTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateMicrosoftTeamsChannelTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateMicrosoftTeamsChannelTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateMicrosoftTeamsChannelTaskParams(v CreateMicrosoftTeamsChannelTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAddMicrosoftTeamsTabTaskParams returns the union data inside the WorkflowTask_TaskParams as a AddMicrosoftTeamsTabTaskParams
func (t WorkflowTask_TaskParams) AsAddMicrosoftTeamsTabTaskParams() (AddMicrosoftTeamsTabTaskParams, error) {
	var body AddMicrosoftTeamsTabTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddMicrosoftTeamsTabTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided AddMicrosoftTeamsTabTaskParams
func (t *WorkflowTask_TaskParams) FromAddMicrosoftTeamsTabTaskParams(v AddMicrosoftTeamsTabTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddMicrosoftTeamsTabTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided AddMicrosoftTeamsTabTaskParams
func (t *WorkflowTask_TaskParams) MergeAddMicrosoftTeamsTabTaskParams(v AddMicrosoftTeamsTabTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchiveMicrosoftTeamsChannelsTaskParams returns the union data inside the WorkflowTask_TaskParams as a ArchiveMicrosoftTeamsChannelsTaskParams
func (t WorkflowTask_TaskParams) AsArchiveMicrosoftTeamsChannelsTaskParams() (ArchiveMicrosoftTeamsChannelsTaskParams, error) {
	var body ArchiveMicrosoftTeamsChannelsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchiveMicrosoftTeamsChannelsTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided ArchiveMicrosoftTeamsChannelsTaskParams
func (t *WorkflowTask_TaskParams) FromArchiveMicrosoftTeamsChannelsTaskParams(v ArchiveMicrosoftTeamsChannelsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchiveMicrosoftTeamsChannelsTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided ArchiveMicrosoftTeamsChannelsTaskParams
func (t *WorkflowTask_TaskParams) MergeArchiveMicrosoftTeamsChannelsTaskParams(v ArchiveMicrosoftTeamsChannelsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRenameMicrosoftTeamsChannelTaskParams returns the union data inside the WorkflowTask_TaskParams as a RenameMicrosoftTeamsChannelTaskParams
func (t WorkflowTask_TaskParams) AsRenameMicrosoftTeamsChannelTaskParams() (RenameMicrosoftTeamsChannelTaskParams, error) {
	var body RenameMicrosoftTeamsChannelTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRenameMicrosoftTeamsChannelTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided RenameMicrosoftTeamsChannelTaskParams
func (t *WorkflowTask_TaskParams) FromRenameMicrosoftTeamsChannelTaskParams(v RenameMicrosoftTeamsChannelTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRenameMicrosoftTeamsChannelTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided RenameMicrosoftTeamsChannelTaskParams
func (t *WorkflowTask_TaskParams) MergeRenameMicrosoftTeamsChannelTaskParams(v RenameMicrosoftTeamsChannelTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInviteToMicrosoftTeamsChannelTaskParams returns the union data inside the WorkflowTask_TaskParams as a InviteToMicrosoftTeamsChannelTaskParams
func (t WorkflowTask_TaskParams) AsInviteToMicrosoftTeamsChannelTaskParams() (InviteToMicrosoftTeamsChannelTaskParams, error) {
	var body InviteToMicrosoftTeamsChannelTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToMicrosoftTeamsChannelTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided InviteToMicrosoftTeamsChannelTaskParams
func (t *WorkflowTask_TaskParams) FromInviteToMicrosoftTeamsChannelTaskParams(v InviteToMicrosoftTeamsChannelTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToMicrosoftTeamsChannelTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided InviteToMicrosoftTeamsChannelTaskParams
func (t *WorkflowTask_TaskParams) MergeInviteToMicrosoftTeamsChannelTaskParams(v InviteToMicrosoftTeamsChannelTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateNotionPageTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateNotionPageTaskParams
func (t WorkflowTask_TaskParams) AsCreateNotionPageTaskParams() (CreateNotionPageTaskParams, error) {
	var body CreateNotionPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateNotionPageTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateNotionPageTaskParams
func (t *WorkflowTask_TaskParams) FromCreateNotionPageTaskParams(v CreateNotionPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateNotionPageTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateNotionPageTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateNotionPageTaskParams(v CreateNotionPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendMicrosoftTeamsMessageTaskParams returns the union data inside the WorkflowTask_TaskParams as a SendMicrosoftTeamsMessageTaskParams
func (t WorkflowTask_TaskParams) AsSendMicrosoftTeamsMessageTaskParams() (SendMicrosoftTeamsMessageTaskParams, error) {
	var body SendMicrosoftTeamsMessageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendMicrosoftTeamsMessageTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided SendMicrosoftTeamsMessageTaskParams
func (t *WorkflowTask_TaskParams) FromSendMicrosoftTeamsMessageTaskParams(v SendMicrosoftTeamsMessageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendMicrosoftTeamsMessageTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided SendMicrosoftTeamsMessageTaskParams
func (t *WorkflowTask_TaskParams) MergeSendMicrosoftTeamsMessageTaskParams(v SendMicrosoftTeamsMessageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendMicrosoftTeamsBlocksTaskParams returns the union data inside the WorkflowTask_TaskParams as a SendMicrosoftTeamsBlocksTaskParams
func (t WorkflowTask_TaskParams) AsSendMicrosoftTeamsBlocksTaskParams() (SendMicrosoftTeamsBlocksTaskParams, error) {
	var body SendMicrosoftTeamsBlocksTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendMicrosoftTeamsBlocksTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided SendMicrosoftTeamsBlocksTaskParams
func (t *WorkflowTask_TaskParams) FromSendMicrosoftTeamsBlocksTaskParams(v SendMicrosoftTeamsBlocksTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendMicrosoftTeamsBlocksTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided SendMicrosoftTeamsBlocksTaskParams
func (t *WorkflowTask_TaskParams) MergeSendMicrosoftTeamsBlocksTaskParams(v SendMicrosoftTeamsBlocksTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateNotionPageTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateNotionPageTaskParams
func (t WorkflowTask_TaskParams) AsUpdateNotionPageTaskParams() (UpdateNotionPageTaskParams, error) {
	var body UpdateNotionPageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateNotionPageTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateNotionPageTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateNotionPageTaskParams(v UpdateNotionPageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateNotionPageTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateNotionPageTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateNotionPageTaskParams(v UpdateNotionPageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateServiceNowIncidentTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateServiceNowIncidentTaskParams
func (t WorkflowTask_TaskParams) AsCreateServiceNowIncidentTaskParams() (CreateServiceNowIncidentTaskParams, error) {
	var body CreateServiceNowIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateServiceNowIncidentTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateServiceNowIncidentTaskParams
func (t *WorkflowTask_TaskParams) FromCreateServiceNowIncidentTaskParams(v CreateServiceNowIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateServiceNowIncidentTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateServiceNowIncidentTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateServiceNowIncidentTaskParams(v CreateServiceNowIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateShortcutStoryTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateShortcutStoryTaskParams
func (t WorkflowTask_TaskParams) AsCreateShortcutStoryTaskParams() (CreateShortcutStoryTaskParams, error) {
	var body CreateShortcutStoryTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateShortcutStoryTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateShortcutStoryTaskParams
func (t *WorkflowTask_TaskParams) FromCreateShortcutStoryTaskParams(v CreateShortcutStoryTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateShortcutStoryTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateShortcutStoryTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateShortcutStoryTaskParams(v CreateShortcutStoryTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateShortcutTaskTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateShortcutTaskTaskParams
func (t WorkflowTask_TaskParams) AsCreateShortcutTaskTaskParams() (CreateShortcutTaskTaskParams, error) {
	var body CreateShortcutTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateShortcutTaskTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateShortcutTaskTaskParams
func (t *WorkflowTask_TaskParams) FromCreateShortcutTaskTaskParams(v CreateShortcutTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateShortcutTaskTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateShortcutTaskTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateShortcutTaskTaskParams(v CreateShortcutTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateTrelloCardTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateTrelloCardTaskParams
func (t WorkflowTask_TaskParams) AsCreateTrelloCardTaskParams() (CreateTrelloCardTaskParams, error) {
	var body CreateTrelloCardTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateTrelloCardTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateTrelloCardTaskParams
func (t *WorkflowTask_TaskParams) FromCreateTrelloCardTaskParams(v CreateTrelloCardTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateTrelloCardTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateTrelloCardTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateTrelloCardTaskParams(v CreateTrelloCardTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateWebexMeetingTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateWebexMeetingTaskParams
func (t WorkflowTask_TaskParams) AsCreateWebexMeetingTaskParams() (CreateWebexMeetingTaskParams, error) {
	var body CreateWebexMeetingTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateWebexMeetingTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateWebexMeetingTaskParams
func (t *WorkflowTask_TaskParams) FromCreateWebexMeetingTaskParams(v CreateWebexMeetingTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateWebexMeetingTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateWebexMeetingTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateWebexMeetingTaskParams(v CreateWebexMeetingTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateZendeskTicketTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateZendeskTicketTaskParams
func (t WorkflowTask_TaskParams) AsCreateZendeskTicketTaskParams() (CreateZendeskTicketTaskParams, error) {
	var body CreateZendeskTicketTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateZendeskTicketTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateZendeskTicketTaskParams
func (t *WorkflowTask_TaskParams) FromCreateZendeskTicketTaskParams(v CreateZendeskTicketTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateZendeskTicketTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateZendeskTicketTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateZendeskTicketTaskParams(v CreateZendeskTicketTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateZendeskJiraLinkTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateZendeskJiraLinkTaskParams
func (t WorkflowTask_TaskParams) AsCreateZendeskJiraLinkTaskParams() (CreateZendeskJiraLinkTaskParams, error) {
	var body CreateZendeskJiraLinkTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateZendeskJiraLinkTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateZendeskJiraLinkTaskParams
func (t *WorkflowTask_TaskParams) FromCreateZendeskJiraLinkTaskParams(v CreateZendeskJiraLinkTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateZendeskJiraLinkTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateZendeskJiraLinkTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateZendeskJiraLinkTaskParams(v CreateZendeskJiraLinkTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateClickupTaskTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateClickupTaskTaskParams
func (t WorkflowTask_TaskParams) AsCreateClickupTaskTaskParams() (CreateClickupTaskTaskParams, error) {
	var body CreateClickupTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateClickupTaskTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateClickupTaskTaskParams
func (t *WorkflowTask_TaskParams) FromCreateClickupTaskTaskParams(v CreateClickupTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateClickupTaskTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateClickupTaskTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateClickupTaskTaskParams(v CreateClickupTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateMotionTaskTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateMotionTaskTaskParams
func (t WorkflowTask_TaskParams) AsCreateMotionTaskTaskParams() (CreateMotionTaskTaskParams, error) {
	var body CreateMotionTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateMotionTaskTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateMotionTaskTaskParams
func (t *WorkflowTask_TaskParams) FromCreateMotionTaskTaskParams(v CreateMotionTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateMotionTaskTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateMotionTaskTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateMotionTaskTaskParams(v CreateMotionTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateZoomMeetingTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateZoomMeetingTaskParams
func (t WorkflowTask_TaskParams) AsCreateZoomMeetingTaskParams() (CreateZoomMeetingTaskParams, error) {
	var body CreateZoomMeetingTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateZoomMeetingTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateZoomMeetingTaskParams
func (t *WorkflowTask_TaskParams) FromCreateZoomMeetingTaskParams(v CreateZoomMeetingTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateZoomMeetingTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateZoomMeetingTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateZoomMeetingTaskParams(v CreateZoomMeetingTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetGithubCommitsTaskParams returns the union data inside the WorkflowTask_TaskParams as a GetGithubCommitsTaskParams
func (t WorkflowTask_TaskParams) AsGetGithubCommitsTaskParams() (GetGithubCommitsTaskParams, error) {
	var body GetGithubCommitsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetGithubCommitsTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided GetGithubCommitsTaskParams
func (t *WorkflowTask_TaskParams) FromGetGithubCommitsTaskParams(v GetGithubCommitsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetGithubCommitsTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided GetGithubCommitsTaskParams
func (t *WorkflowTask_TaskParams) MergeGetGithubCommitsTaskParams(v GetGithubCommitsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetGitlabCommitsTaskParams returns the union data inside the WorkflowTask_TaskParams as a GetGitlabCommitsTaskParams
func (t WorkflowTask_TaskParams) AsGetGitlabCommitsTaskParams() (GetGitlabCommitsTaskParams, error) {
	var body GetGitlabCommitsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetGitlabCommitsTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided GetGitlabCommitsTaskParams
func (t *WorkflowTask_TaskParams) FromGetGitlabCommitsTaskParams(v GetGitlabCommitsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetGitlabCommitsTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided GetGitlabCommitsTaskParams
func (t *WorkflowTask_TaskParams) MergeGetGitlabCommitsTaskParams(v GetGitlabCommitsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetPulsesTaskParams returns the union data inside the WorkflowTask_TaskParams as a GetPulsesTaskParams
func (t WorkflowTask_TaskParams) AsGetPulsesTaskParams() (GetPulsesTaskParams, error) {
	var body GetPulsesTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetPulsesTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided GetPulsesTaskParams
func (t *WorkflowTask_TaskParams) FromGetPulsesTaskParams(v GetPulsesTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetPulsesTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided GetPulsesTaskParams
func (t *WorkflowTask_TaskParams) MergeGetPulsesTaskParams(v GetPulsesTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAlertsTaskParams returns the union data inside the WorkflowTask_TaskParams as a GetAlertsTaskParams
func (t WorkflowTask_TaskParams) AsGetAlertsTaskParams() (GetAlertsTaskParams, error) {
	var body GetAlertsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAlertsTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided GetAlertsTaskParams
func (t *WorkflowTask_TaskParams) FromGetAlertsTaskParams(v GetAlertsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAlertsTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided GetAlertsTaskParams
func (t *WorkflowTask_TaskParams) MergeGetAlertsTaskParams(v GetAlertsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHttpClientTaskParams returns the union data inside the WorkflowTask_TaskParams as a HttpClientTaskParams
func (t WorkflowTask_TaskParams) AsHttpClientTaskParams() (HttpClientTaskParams, error) {
	var body HttpClientTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpClientTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided HttpClientTaskParams
func (t *WorkflowTask_TaskParams) FromHttpClientTaskParams(v HttpClientTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpClientTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided HttpClientTaskParams
func (t *WorkflowTask_TaskParams) MergeHttpClientTaskParams(v HttpClientTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInviteToSlackChannelOpsgenieTaskParams returns the union data inside the WorkflowTask_TaskParams as a InviteToSlackChannelOpsgenieTaskParams
func (t WorkflowTask_TaskParams) AsInviteToSlackChannelOpsgenieTaskParams() (InviteToSlackChannelOpsgenieTaskParams, error) {
	var body InviteToSlackChannelOpsgenieTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToSlackChannelOpsgenieTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided InviteToSlackChannelOpsgenieTaskParams
func (t *WorkflowTask_TaskParams) FromInviteToSlackChannelOpsgenieTaskParams(v InviteToSlackChannelOpsgenieTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToSlackChannelOpsgenieTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided InviteToSlackChannelOpsgenieTaskParams
func (t *WorkflowTask_TaskParams) MergeInviteToSlackChannelOpsgenieTaskParams(v InviteToSlackChannelOpsgenieTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInviteToSlackChannelRootlyTaskParams returns the union data inside the WorkflowTask_TaskParams as a InviteToSlackChannelRootlyTaskParams
func (t WorkflowTask_TaskParams) AsInviteToSlackChannelRootlyTaskParams() (InviteToSlackChannelRootlyTaskParams, error) {
	var body InviteToSlackChannelRootlyTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToSlackChannelRootlyTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided InviteToSlackChannelRootlyTaskParams
func (t *WorkflowTask_TaskParams) FromInviteToSlackChannelRootlyTaskParams(v InviteToSlackChannelRootlyTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToSlackChannelRootlyTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided InviteToSlackChannelRootlyTaskParams
func (t *WorkflowTask_TaskParams) MergeInviteToSlackChannelRootlyTaskParams(v InviteToSlackChannelRootlyTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInviteToSlackChannelPagerdutyTaskParams returns the union data inside the WorkflowTask_TaskParams as a InviteToSlackChannelPagerdutyTaskParams
func (t WorkflowTask_TaskParams) AsInviteToSlackChannelPagerdutyTaskParams() (InviteToSlackChannelPagerdutyTaskParams, error) {
	var body InviteToSlackChannelPagerdutyTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToSlackChannelPagerdutyTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided InviteToSlackChannelPagerdutyTaskParams
func (t *WorkflowTask_TaskParams) FromInviteToSlackChannelPagerdutyTaskParams(v InviteToSlackChannelPagerdutyTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToSlackChannelPagerdutyTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided InviteToSlackChannelPagerdutyTaskParams
func (t *WorkflowTask_TaskParams) MergeInviteToSlackChannelPagerdutyTaskParams(v InviteToSlackChannelPagerdutyTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInviteToSlackChannelTaskParams returns the union data inside the WorkflowTask_TaskParams as a InviteToSlackChannelTaskParams
func (t WorkflowTask_TaskParams) AsInviteToSlackChannelTaskParams() (InviteToSlackChannelTaskParams, error) {
	var body InviteToSlackChannelTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToSlackChannelTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided InviteToSlackChannelTaskParams
func (t *WorkflowTask_TaskParams) FromInviteToSlackChannelTaskParams(v InviteToSlackChannelTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToSlackChannelTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided InviteToSlackChannelTaskParams
func (t *WorkflowTask_TaskParams) MergeInviteToSlackChannelTaskParams(v InviteToSlackChannelTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInviteToSlackChannelVictorOpsTaskParams returns the union data inside the WorkflowTask_TaskParams as a InviteToSlackChannelVictorOpsTaskParams
func (t WorkflowTask_TaskParams) AsInviteToSlackChannelVictorOpsTaskParams() (InviteToSlackChannelVictorOpsTaskParams, error) {
	var body InviteToSlackChannelVictorOpsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInviteToSlackChannelVictorOpsTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided InviteToSlackChannelVictorOpsTaskParams
func (t *WorkflowTask_TaskParams) FromInviteToSlackChannelVictorOpsTaskParams(v InviteToSlackChannelVictorOpsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInviteToSlackChannelVictorOpsTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided InviteToSlackChannelVictorOpsTaskParams
func (t *WorkflowTask_TaskParams) MergeInviteToSlackChannelVictorOpsTaskParams(v InviteToSlackChannelVictorOpsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPageOpsgenieOnCallRespondersTaskParams returns the union data inside the WorkflowTask_TaskParams as a PageOpsgenieOnCallRespondersTaskParams
func (t WorkflowTask_TaskParams) AsPageOpsgenieOnCallRespondersTaskParams() (PageOpsgenieOnCallRespondersTaskParams, error) {
	var body PageOpsgenieOnCallRespondersTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPageOpsgenieOnCallRespondersTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided PageOpsgenieOnCallRespondersTaskParams
func (t *WorkflowTask_TaskParams) FromPageOpsgenieOnCallRespondersTaskParams(v PageOpsgenieOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePageOpsgenieOnCallRespondersTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided PageOpsgenieOnCallRespondersTaskParams
func (t *WorkflowTask_TaskParams) MergePageOpsgenieOnCallRespondersTaskParams(v PageOpsgenieOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateOpsgenieAlertTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateOpsgenieAlertTaskParams
func (t WorkflowTask_TaskParams) AsCreateOpsgenieAlertTaskParams() (CreateOpsgenieAlertTaskParams, error) {
	var body CreateOpsgenieAlertTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateOpsgenieAlertTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateOpsgenieAlertTaskParams
func (t *WorkflowTask_TaskParams) FromCreateOpsgenieAlertTaskParams(v CreateOpsgenieAlertTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateOpsgenieAlertTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateOpsgenieAlertTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateOpsgenieAlertTaskParams(v CreateOpsgenieAlertTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateOpsgenieAlertTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateOpsgenieAlertTaskParams
func (t WorkflowTask_TaskParams) AsUpdateOpsgenieAlertTaskParams() (UpdateOpsgenieAlertTaskParams, error) {
	var body UpdateOpsgenieAlertTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateOpsgenieAlertTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateOpsgenieAlertTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateOpsgenieAlertTaskParams(v UpdateOpsgenieAlertTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateOpsgenieAlertTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateOpsgenieAlertTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateOpsgenieAlertTaskParams(v UpdateOpsgenieAlertTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateOpsgenieIncidentTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateOpsgenieIncidentTaskParams
func (t WorkflowTask_TaskParams) AsUpdateOpsgenieIncidentTaskParams() (UpdateOpsgenieIncidentTaskParams, error) {
	var body UpdateOpsgenieIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateOpsgenieIncidentTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateOpsgenieIncidentTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateOpsgenieIncidentTaskParams(v UpdateOpsgenieIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateOpsgenieIncidentTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateOpsgenieIncidentTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateOpsgenieIncidentTaskParams(v UpdateOpsgenieIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPageRootlyOnCallRespondersTaskParams returns the union data inside the WorkflowTask_TaskParams as a PageRootlyOnCallRespondersTaskParams
func (t WorkflowTask_TaskParams) AsPageRootlyOnCallRespondersTaskParams() (PageRootlyOnCallRespondersTaskParams, error) {
	var body PageRootlyOnCallRespondersTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPageRootlyOnCallRespondersTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided PageRootlyOnCallRespondersTaskParams
func (t *WorkflowTask_TaskParams) FromPageRootlyOnCallRespondersTaskParams(v PageRootlyOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePageRootlyOnCallRespondersTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided PageRootlyOnCallRespondersTaskParams
func (t *WorkflowTask_TaskParams) MergePageRootlyOnCallRespondersTaskParams(v PageRootlyOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPagePagerdutyOnCallRespondersTaskParams returns the union data inside the WorkflowTask_TaskParams as a PagePagerdutyOnCallRespondersTaskParams
func (t WorkflowTask_TaskParams) AsPagePagerdutyOnCallRespondersTaskParams() (PagePagerdutyOnCallRespondersTaskParams, error) {
	var body PagePagerdutyOnCallRespondersTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPagePagerdutyOnCallRespondersTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided PagePagerdutyOnCallRespondersTaskParams
func (t *WorkflowTask_TaskParams) FromPagePagerdutyOnCallRespondersTaskParams(v PagePagerdutyOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePagePagerdutyOnCallRespondersTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided PagePagerdutyOnCallRespondersTaskParams
func (t *WorkflowTask_TaskParams) MergePagePagerdutyOnCallRespondersTaskParams(v PagePagerdutyOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPageVictorOpsOnCallRespondersTaskParams returns the union data inside the WorkflowTask_TaskParams as a PageVictorOpsOnCallRespondersTaskParams
func (t WorkflowTask_TaskParams) AsPageVictorOpsOnCallRespondersTaskParams() (PageVictorOpsOnCallRespondersTaskParams, error) {
	var body PageVictorOpsOnCallRespondersTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPageVictorOpsOnCallRespondersTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided PageVictorOpsOnCallRespondersTaskParams
func (t *WorkflowTask_TaskParams) FromPageVictorOpsOnCallRespondersTaskParams(v PageVictorOpsOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePageVictorOpsOnCallRespondersTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided PageVictorOpsOnCallRespondersTaskParams
func (t *WorkflowTask_TaskParams) MergePageVictorOpsOnCallRespondersTaskParams(v PageVictorOpsOnCallRespondersTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateVictorOpsIncidentTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateVictorOpsIncidentTaskParams
func (t WorkflowTask_TaskParams) AsUpdateVictorOpsIncidentTaskParams() (UpdateVictorOpsIncidentTaskParams, error) {
	var body UpdateVictorOpsIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateVictorOpsIncidentTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateVictorOpsIncidentTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateVictorOpsIncidentTaskParams(v UpdateVictorOpsIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateVictorOpsIncidentTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateVictorOpsIncidentTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateVictorOpsIncidentTaskParams(v UpdateVictorOpsIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPrintTaskParams returns the union data inside the WorkflowTask_TaskParams as a PrintTaskParams
func (t WorkflowTask_TaskParams) AsPrintTaskParams() (PrintTaskParams, error) {
	var body PrintTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrintTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided PrintTaskParams
func (t *WorkflowTask_TaskParams) FromPrintTaskParams(v PrintTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrintTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided PrintTaskParams
func (t *WorkflowTask_TaskParams) MergePrintTaskParams(v PrintTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublishIncidentTaskParams returns the union data inside the WorkflowTask_TaskParams as a PublishIncidentTaskParams
func (t WorkflowTask_TaskParams) AsPublishIncidentTaskParams() (PublishIncidentTaskParams, error) {
	var body PublishIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublishIncidentTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided PublishIncidentTaskParams
func (t *WorkflowTask_TaskParams) FromPublishIncidentTaskParams(v PublishIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublishIncidentTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided PublishIncidentTaskParams
func (t *WorkflowTask_TaskParams) MergePublishIncidentTaskParams(v PublishIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRedisClientTaskParams returns the union data inside the WorkflowTask_TaskParams as a RedisClientTaskParams
func (t WorkflowTask_TaskParams) AsRedisClientTaskParams() (RedisClientTaskParams, error) {
	var body RedisClientTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRedisClientTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided RedisClientTaskParams
func (t *WorkflowTask_TaskParams) FromRedisClientTaskParams(v RedisClientTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRedisClientTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided RedisClientTaskParams
func (t *WorkflowTask_TaskParams) MergeRedisClientTaskParams(v RedisClientTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRenameSlackChannelTaskParams returns the union data inside the WorkflowTask_TaskParams as a RenameSlackChannelTaskParams
func (t WorkflowTask_TaskParams) AsRenameSlackChannelTaskParams() (RenameSlackChannelTaskParams, error) {
	var body RenameSlackChannelTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRenameSlackChannelTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided RenameSlackChannelTaskParams
func (t *WorkflowTask_TaskParams) FromRenameSlackChannelTaskParams(v RenameSlackChannelTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRenameSlackChannelTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided RenameSlackChannelTaskParams
func (t *WorkflowTask_TaskParams) MergeRenameSlackChannelTaskParams(v RenameSlackChannelTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChangeSlackChannelPrivacyTaskParams returns the union data inside the WorkflowTask_TaskParams as a ChangeSlackChannelPrivacyTaskParams
func (t WorkflowTask_TaskParams) AsChangeSlackChannelPrivacyTaskParams() (ChangeSlackChannelPrivacyTaskParams, error) {
	var body ChangeSlackChannelPrivacyTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChangeSlackChannelPrivacyTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided ChangeSlackChannelPrivacyTaskParams
func (t *WorkflowTask_TaskParams) FromChangeSlackChannelPrivacyTaskParams(v ChangeSlackChannelPrivacyTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChangeSlackChannelPrivacyTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided ChangeSlackChannelPrivacyTaskParams
func (t *WorkflowTask_TaskParams) MergeChangeSlackChannelPrivacyTaskParams(v ChangeSlackChannelPrivacyTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunCommandHerokuTaskParams returns the union data inside the WorkflowTask_TaskParams as a RunCommandHerokuTaskParams
func (t WorkflowTask_TaskParams) AsRunCommandHerokuTaskParams() (RunCommandHerokuTaskParams, error) {
	var body RunCommandHerokuTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunCommandHerokuTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided RunCommandHerokuTaskParams
func (t *WorkflowTask_TaskParams) FromRunCommandHerokuTaskParams(v RunCommandHerokuTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunCommandHerokuTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided RunCommandHerokuTaskParams
func (t *WorkflowTask_TaskParams) MergeRunCommandHerokuTaskParams(v RunCommandHerokuTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendEmailTaskParams returns the union data inside the WorkflowTask_TaskParams as a SendEmailTaskParams
func (t WorkflowTask_TaskParams) AsSendEmailTaskParams() (SendEmailTaskParams, error) {
	var body SendEmailTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendEmailTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided SendEmailTaskParams
func (t *WorkflowTask_TaskParams) FromSendEmailTaskParams(v SendEmailTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendEmailTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided SendEmailTaskParams
func (t *WorkflowTask_TaskParams) MergeSendEmailTaskParams(v SendEmailTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendDashboardReportTaskParams returns the union data inside the WorkflowTask_TaskParams as a SendDashboardReportTaskParams
func (t WorkflowTask_TaskParams) AsSendDashboardReportTaskParams() (SendDashboardReportTaskParams, error) {
	var body SendDashboardReportTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendDashboardReportTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided SendDashboardReportTaskParams
func (t *WorkflowTask_TaskParams) FromSendDashboardReportTaskParams(v SendDashboardReportTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendDashboardReportTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided SendDashboardReportTaskParams
func (t *WorkflowTask_TaskParams) MergeSendDashboardReportTaskParams(v SendDashboardReportTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateSlackChannelTaskParams returns the union data inside the WorkflowTask_TaskParams as a CreateSlackChannelTaskParams
func (t WorkflowTask_TaskParams) AsCreateSlackChannelTaskParams() (CreateSlackChannelTaskParams, error) {
	var body CreateSlackChannelTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateSlackChannelTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided CreateSlackChannelTaskParams
func (t *WorkflowTask_TaskParams) FromCreateSlackChannelTaskParams(v CreateSlackChannelTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateSlackChannelTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided CreateSlackChannelTaskParams
func (t *WorkflowTask_TaskParams) MergeCreateSlackChannelTaskParams(v CreateSlackChannelTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendSlackMessageTaskParams returns the union data inside the WorkflowTask_TaskParams as a SendSlackMessageTaskParams
func (t WorkflowTask_TaskParams) AsSendSlackMessageTaskParams() (SendSlackMessageTaskParams, error) {
	var body SendSlackMessageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendSlackMessageTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided SendSlackMessageTaskParams
func (t *WorkflowTask_TaskParams) FromSendSlackMessageTaskParams(v SendSlackMessageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendSlackMessageTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided SendSlackMessageTaskParams
func (t *WorkflowTask_TaskParams) MergeSendSlackMessageTaskParams(v SendSlackMessageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendSmsTaskParams returns the union data inside the WorkflowTask_TaskParams as a SendSmsTaskParams
func (t WorkflowTask_TaskParams) AsSendSmsTaskParams() (SendSmsTaskParams, error) {
	var body SendSmsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendSmsTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided SendSmsTaskParams
func (t *WorkflowTask_TaskParams) FromSendSmsTaskParams(v SendSmsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendSmsTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided SendSmsTaskParams
func (t *WorkflowTask_TaskParams) MergeSendSmsTaskParams(v SendSmsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendWhatsappMessageTaskParams returns the union data inside the WorkflowTask_TaskParams as a SendWhatsappMessageTaskParams
func (t WorkflowTask_TaskParams) AsSendWhatsappMessageTaskParams() (SendWhatsappMessageTaskParams, error) {
	var body SendWhatsappMessageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendWhatsappMessageTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided SendWhatsappMessageTaskParams
func (t *WorkflowTask_TaskParams) FromSendWhatsappMessageTaskParams(v SendWhatsappMessageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendWhatsappMessageTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided SendWhatsappMessageTaskParams
func (t *WorkflowTask_TaskParams) MergeSendWhatsappMessageTaskParams(v SendWhatsappMessageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSnapshotDatadogGraphTaskParams returns the union data inside the WorkflowTask_TaskParams as a SnapshotDatadogGraphTaskParams
func (t WorkflowTask_TaskParams) AsSnapshotDatadogGraphTaskParams() (SnapshotDatadogGraphTaskParams, error) {
	var body SnapshotDatadogGraphTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSnapshotDatadogGraphTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided SnapshotDatadogGraphTaskParams
func (t *WorkflowTask_TaskParams) FromSnapshotDatadogGraphTaskParams(v SnapshotDatadogGraphTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSnapshotDatadogGraphTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided SnapshotDatadogGraphTaskParams
func (t *WorkflowTask_TaskParams) MergeSnapshotDatadogGraphTaskParams(v SnapshotDatadogGraphTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSnapshotGrafanaDashboardTaskParams returns the union data inside the WorkflowTask_TaskParams as a SnapshotGrafanaDashboardTaskParams
func (t WorkflowTask_TaskParams) AsSnapshotGrafanaDashboardTaskParams() (SnapshotGrafanaDashboardTaskParams, error) {
	var body SnapshotGrafanaDashboardTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSnapshotGrafanaDashboardTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided SnapshotGrafanaDashboardTaskParams
func (t *WorkflowTask_TaskParams) FromSnapshotGrafanaDashboardTaskParams(v SnapshotGrafanaDashboardTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSnapshotGrafanaDashboardTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided SnapshotGrafanaDashboardTaskParams
func (t *WorkflowTask_TaskParams) MergeSnapshotGrafanaDashboardTaskParams(v SnapshotGrafanaDashboardTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSnapshotLookerLookTaskParams returns the union data inside the WorkflowTask_TaskParams as a SnapshotLookerLookTaskParams
func (t WorkflowTask_TaskParams) AsSnapshotLookerLookTaskParams() (SnapshotLookerLookTaskParams, error) {
	var body SnapshotLookerLookTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSnapshotLookerLookTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided SnapshotLookerLookTaskParams
func (t *WorkflowTask_TaskParams) FromSnapshotLookerLookTaskParams(v SnapshotLookerLookTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSnapshotLookerLookTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided SnapshotLookerLookTaskParams
func (t *WorkflowTask_TaskParams) MergeSnapshotLookerLookTaskParams(v SnapshotLookerLookTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSnapshotNewRelicGraphTaskParams returns the union data inside the WorkflowTask_TaskParams as a SnapshotNewRelicGraphTaskParams
func (t WorkflowTask_TaskParams) AsSnapshotNewRelicGraphTaskParams() (SnapshotNewRelicGraphTaskParams, error) {
	var body SnapshotNewRelicGraphTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSnapshotNewRelicGraphTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided SnapshotNewRelicGraphTaskParams
func (t *WorkflowTask_TaskParams) FromSnapshotNewRelicGraphTaskParams(v SnapshotNewRelicGraphTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSnapshotNewRelicGraphTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided SnapshotNewRelicGraphTaskParams
func (t *WorkflowTask_TaskParams) MergeSnapshotNewRelicGraphTaskParams(v SnapshotNewRelicGraphTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTweetTwitterMessageTaskParams returns the union data inside the WorkflowTask_TaskParams as a TweetTwitterMessageTaskParams
func (t WorkflowTask_TaskParams) AsTweetTwitterMessageTaskParams() (TweetTwitterMessageTaskParams, error) {
	var body TweetTwitterMessageTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTweetTwitterMessageTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided TweetTwitterMessageTaskParams
func (t *WorkflowTask_TaskParams) FromTweetTwitterMessageTaskParams(v TweetTwitterMessageTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTweetTwitterMessageTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided TweetTwitterMessageTaskParams
func (t *WorkflowTask_TaskParams) MergeTweetTwitterMessageTaskParams(v TweetTwitterMessageTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateAirtableTableRecordTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateAirtableTableRecordTaskParams
func (t WorkflowTask_TaskParams) AsUpdateAirtableTableRecordTaskParams() (UpdateAirtableTableRecordTaskParams, error) {
	var body UpdateAirtableTableRecordTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateAirtableTableRecordTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateAirtableTableRecordTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateAirtableTableRecordTaskParams(v UpdateAirtableTableRecordTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateAirtableTableRecordTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateAirtableTableRecordTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateAirtableTableRecordTaskParams(v UpdateAirtableTableRecordTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateAsanaTaskTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateAsanaTaskTaskParams
func (t WorkflowTask_TaskParams) AsUpdateAsanaTaskTaskParams() (UpdateAsanaTaskTaskParams, error) {
	var body UpdateAsanaTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateAsanaTaskTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateAsanaTaskTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateAsanaTaskTaskParams(v UpdateAsanaTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateAsanaTaskTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateAsanaTaskTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateAsanaTaskTaskParams(v UpdateAsanaTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateGithubIssueTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateGithubIssueTaskParams
func (t WorkflowTask_TaskParams) AsUpdateGithubIssueTaskParams() (UpdateGithubIssueTaskParams, error) {
	var body UpdateGithubIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateGithubIssueTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateGithubIssueTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateGithubIssueTaskParams(v UpdateGithubIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateGithubIssueTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateGithubIssueTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateGithubIssueTaskParams(v UpdateGithubIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateGitlabIssueTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateGitlabIssueTaskParams
func (t WorkflowTask_TaskParams) AsUpdateGitlabIssueTaskParams() (UpdateGitlabIssueTaskParams, error) {
	var body UpdateGitlabIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateGitlabIssueTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateGitlabIssueTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateGitlabIssueTaskParams(v UpdateGitlabIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateGitlabIssueTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateGitlabIssueTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateGitlabIssueTaskParams(v UpdateGitlabIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateIncidentTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateIncidentTaskParams
func (t WorkflowTask_TaskParams) AsUpdateIncidentTaskParams() (UpdateIncidentTaskParams, error) {
	var body UpdateIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateIncidentTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateIncidentTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateIncidentTaskParams(v UpdateIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateIncidentTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateIncidentTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateIncidentTaskParams(v UpdateIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateIncidentPostmortemTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateIncidentPostmortemTaskParams
func (t WorkflowTask_TaskParams) AsUpdateIncidentPostmortemTaskParams() (UpdateIncidentPostmortemTaskParams, error) {
	var body UpdateIncidentPostmortemTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateIncidentPostmortemTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateIncidentPostmortemTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateIncidentPostmortemTaskParams(v UpdateIncidentPostmortemTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateIncidentPostmortemTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateIncidentPostmortemTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateIncidentPostmortemTaskParams(v UpdateIncidentPostmortemTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateJiraIssueTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateJiraIssueTaskParams
func (t WorkflowTask_TaskParams) AsUpdateJiraIssueTaskParams() (UpdateJiraIssueTaskParams, error) {
	var body UpdateJiraIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateJiraIssueTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateJiraIssueTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateJiraIssueTaskParams(v UpdateJiraIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateJiraIssueTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateJiraIssueTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateJiraIssueTaskParams(v UpdateJiraIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateLinearIssueTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateLinearIssueTaskParams
func (t WorkflowTask_TaskParams) AsUpdateLinearIssueTaskParams() (UpdateLinearIssueTaskParams, error) {
	var body UpdateLinearIssueTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateLinearIssueTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateLinearIssueTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateLinearIssueTaskParams(v UpdateLinearIssueTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateLinearIssueTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateLinearIssueTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateLinearIssueTaskParams(v UpdateLinearIssueTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateServiceNowIncidentTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateServiceNowIncidentTaskParams
func (t WorkflowTask_TaskParams) AsUpdateServiceNowIncidentTaskParams() (UpdateServiceNowIncidentTaskParams, error) {
	var body UpdateServiceNowIncidentTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateServiceNowIncidentTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateServiceNowIncidentTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateServiceNowIncidentTaskParams(v UpdateServiceNowIncidentTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateServiceNowIncidentTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateServiceNowIncidentTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateServiceNowIncidentTaskParams(v UpdateServiceNowIncidentTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateShortcutStoryTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateShortcutStoryTaskParams
func (t WorkflowTask_TaskParams) AsUpdateShortcutStoryTaskParams() (UpdateShortcutStoryTaskParams, error) {
	var body UpdateShortcutStoryTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateShortcutStoryTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateShortcutStoryTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateShortcutStoryTaskParams(v UpdateShortcutStoryTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateShortcutStoryTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateShortcutStoryTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateShortcutStoryTaskParams(v UpdateShortcutStoryTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateShortcutTaskTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateShortcutTaskTaskParams
func (t WorkflowTask_TaskParams) AsUpdateShortcutTaskTaskParams() (UpdateShortcutTaskTaskParams, error) {
	var body UpdateShortcutTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateShortcutTaskTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateShortcutTaskTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateShortcutTaskTaskParams(v UpdateShortcutTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateShortcutTaskTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateShortcutTaskTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateShortcutTaskTaskParams(v UpdateShortcutTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateSlackChannelTopicTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateSlackChannelTopicTaskParams
func (t WorkflowTask_TaskParams) AsUpdateSlackChannelTopicTaskParams() (UpdateSlackChannelTopicTaskParams, error) {
	var body UpdateSlackChannelTopicTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateSlackChannelTopicTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateSlackChannelTopicTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateSlackChannelTopicTaskParams(v UpdateSlackChannelTopicTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateSlackChannelTopicTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateSlackChannelTopicTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateSlackChannelTopicTaskParams(v UpdateSlackChannelTopicTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateStatusTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateStatusTaskParams
func (t WorkflowTask_TaskParams) AsUpdateStatusTaskParams() (UpdateStatusTaskParams, error) {
	var body UpdateStatusTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateStatusTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateStatusTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateStatusTaskParams(v UpdateStatusTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateStatusTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateStatusTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateStatusTaskParams(v UpdateStatusTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateIncidentStatusTimestampTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateIncidentStatusTimestampTaskParams
func (t WorkflowTask_TaskParams) AsUpdateIncidentStatusTimestampTaskParams() (UpdateIncidentStatusTimestampTaskParams, error) {
	var body UpdateIncidentStatusTimestampTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateIncidentStatusTimestampTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateIncidentStatusTimestampTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateIncidentStatusTimestampTaskParams(v UpdateIncidentStatusTimestampTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateIncidentStatusTimestampTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateIncidentStatusTimestampTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateIncidentStatusTimestampTaskParams(v UpdateIncidentStatusTimestampTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateTrelloCardTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateTrelloCardTaskParams
func (t WorkflowTask_TaskParams) AsUpdateTrelloCardTaskParams() (UpdateTrelloCardTaskParams, error) {
	var body UpdateTrelloCardTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateTrelloCardTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateTrelloCardTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateTrelloCardTaskParams(v UpdateTrelloCardTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateTrelloCardTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateTrelloCardTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateTrelloCardTaskParams(v UpdateTrelloCardTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateClickupTaskTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateClickupTaskTaskParams
func (t WorkflowTask_TaskParams) AsUpdateClickupTaskTaskParams() (UpdateClickupTaskTaskParams, error) {
	var body UpdateClickupTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateClickupTaskTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateClickupTaskTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateClickupTaskTaskParams(v UpdateClickupTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateClickupTaskTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateClickupTaskTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateClickupTaskTaskParams(v UpdateClickupTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateMotionTaskTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateMotionTaskTaskParams
func (t WorkflowTask_TaskParams) AsUpdateMotionTaskTaskParams() (UpdateMotionTaskTaskParams, error) {
	var body UpdateMotionTaskTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateMotionTaskTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateMotionTaskTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateMotionTaskTaskParams(v UpdateMotionTaskTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateMotionTaskTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateMotionTaskTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateMotionTaskTaskParams(v UpdateMotionTaskTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateZendeskTicketTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateZendeskTicketTaskParams
func (t WorkflowTask_TaskParams) AsUpdateZendeskTicketTaskParams() (UpdateZendeskTicketTaskParams, error) {
	var body UpdateZendeskTicketTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateZendeskTicketTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateZendeskTicketTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateZendeskTicketTaskParams(v UpdateZendeskTicketTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateZendeskTicketTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateZendeskTicketTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateZendeskTicketTaskParams(v UpdateZendeskTicketTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateAttachedAlertsTaskParams returns the union data inside the WorkflowTask_TaskParams as a UpdateAttachedAlertsTaskParams
func (t WorkflowTask_TaskParams) AsUpdateAttachedAlertsTaskParams() (UpdateAttachedAlertsTaskParams, error) {
	var body UpdateAttachedAlertsTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateAttachedAlertsTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided UpdateAttachedAlertsTaskParams
func (t *WorkflowTask_TaskParams) FromUpdateAttachedAlertsTaskParams(v UpdateAttachedAlertsTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateAttachedAlertsTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided UpdateAttachedAlertsTaskParams
func (t *WorkflowTask_TaskParams) MergeUpdateAttachedAlertsTaskParams(v UpdateAttachedAlertsTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTriggerWorkflowTaskParams returns the union data inside the WorkflowTask_TaskParams as a TriggerWorkflowTaskParams
func (t WorkflowTask_TaskParams) AsTriggerWorkflowTaskParams() (TriggerWorkflowTaskParams, error) {
	var body TriggerWorkflowTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTriggerWorkflowTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided TriggerWorkflowTaskParams
func (t *WorkflowTask_TaskParams) FromTriggerWorkflowTaskParams(v TriggerWorkflowTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTriggerWorkflowTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided TriggerWorkflowTaskParams
func (t *WorkflowTask_TaskParams) MergeTriggerWorkflowTaskParams(v TriggerWorkflowTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSendSlackBlocksTaskParams returns the union data inside the WorkflowTask_TaskParams as a SendSlackBlocksTaskParams
func (t WorkflowTask_TaskParams) AsSendSlackBlocksTaskParams() (SendSlackBlocksTaskParams, error) {
	var body SendSlackBlocksTaskParams
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSendSlackBlocksTaskParams overwrites any union data inside the WorkflowTask_TaskParams as the provided SendSlackBlocksTaskParams
func (t *WorkflowTask_TaskParams) FromSendSlackBlocksTaskParams(v SendSlackBlocksTaskParams) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSendSlackBlocksTaskParams performs a merge with any union data inside the WorkflowTask_TaskParams, using the provided SendSlackBlocksTaskParams
func (t *WorkflowTask_TaskParams) MergeSendSlackBlocksTaskParams(v SendSlackBlocksTaskParams) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WorkflowTask_TaskParams) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WorkflowTask_TaskParams) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListAllIncidentActionItems request
	ListAllIncidentActionItems(ctx context.Context, params *ListAllIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentActionItem request
	DeleteIncidentActionItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentActionItems request
	GetIncidentActionItems(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentActionItemWithBody request with any body
	UpdateIncidentActionItemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIncidentActionItemWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentActionItemApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAlertGroups request
	ListAlertGroups(ctx context.Context, params *ListAlertGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAlertGroupWithBody request with any body
	CreateAlertGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAlertGroupWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateAlertGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAlertGroup request
	DeleteAlertGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertGroup request
	GetAlertGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAlertGroupWithBody request with any body
	UpdateAlertGroupWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAlertGroupWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateAlertGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAlertSources request
	ListAlertSources(ctx context.Context, params *ListAlertSourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAlertSourceWithBody request with any body
	CreateAlertSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAlertSourceWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateAlertSourceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAlertSource request
	DeleteAlertSource(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertSource request
	GetAlertSource(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAlertSourceWithBody request with any body
	UpdateAlertSourceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAlertSourceWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateAlertSourceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAlertUrgencies request
	ListAlertUrgencies(ctx context.Context, params *ListAlertUrgenciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAlertUrgencyWithBody request with any body
	CreateAlertUrgencyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAlertUrgencyWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateAlertUrgencyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAlertUrgency request
	DeleteAlertUrgency(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertUrgency request
	GetAlertUrgency(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAlertUrgencyWithBody request with any body
	UpdateAlertUrgencyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAlertUrgencyWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateAlertUrgencyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAlerts request
	ListAlerts(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAlertWithBody request with any body
	CreateAlertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAlertWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateAlertApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlert request
	GetAlert(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcknowledgeAlert request
	AcknowledgeAlert(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResolveAlertWithBody request with any body
	ResolveAlertWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResolveAlertWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body ResolveAlertApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAudits request
	ListAudits(ctx context.Context, params *ListAuditsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAuthorizations request
	ListAuthorizations(ctx context.Context, params *ListAuthorizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAuthorizationWithBody request with any body
	CreateAuthorizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAuthorizationWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateAuthorizationApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAuthorization request
	DeleteAuthorization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthorization request
	GetAuthorization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAuthorizationWithBody request with any body
	UpdateAuthorizationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAuthorizationWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateAuthorizationApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCatalogEntityProperties request
	ListCatalogEntityProperties(ctx context.Context, catalogEntityId string, params *ListCatalogEntityPropertiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCatalogEntityPropertyWithBody request with any body
	CreateCatalogEntityPropertyWithBody(ctx context.Context, catalogEntityId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCatalogEntityPropertyWithApplicationVndAPIPlusJSONBody(ctx context.Context, catalogEntityId string, body CreateCatalogEntityPropertyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCatalogEntity request
	DeleteCatalogEntity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogEntity request
	GetCatalogEntity(ctx context.Context, id string, params *GetCatalogEntityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCatalogEntityWithBody request with any body
	UpdateCatalogEntityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCatalogEntityWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateCatalogEntityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCatalogEntityProperty request
	DeleteCatalogEntityProperty(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogEntityProperty request
	GetCatalogEntityProperty(ctx context.Context, id string, params *GetCatalogEntityPropertyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCatalogEntityPropertyWithBody request with any body
	UpdateCatalogEntityPropertyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCatalogEntityPropertyWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateCatalogEntityPropertyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCatalogField request
	DeleteCatalogField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogField request
	GetCatalogField(ctx context.Context, id string, params *GetCatalogFieldParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCatalogFieldWithBody request with any body
	UpdateCatalogFieldWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCatalogFieldWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateCatalogFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCatalogs request
	ListCatalogs(ctx context.Context, params *ListCatalogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCatalogWithBody request with any body
	CreateCatalogWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCatalogWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateCatalogApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCatalogEntities request
	ListCatalogEntities(ctx context.Context, catalogId string, params *ListCatalogEntitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCatalogEntityWithBody request with any body
	CreateCatalogEntityWithBody(ctx context.Context, catalogId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCatalogEntityWithApplicationVndAPIPlusJSONBody(ctx context.Context, catalogId string, body CreateCatalogEntityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCatalogFields request
	ListCatalogFields(ctx context.Context, catalogId string, params *ListCatalogFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCatalogFieldWithBody request with any body
	CreateCatalogFieldWithBody(ctx context.Context, catalogId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCatalogFieldWithApplicationVndAPIPlusJSONBody(ctx context.Context, catalogId string, body CreateCatalogFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCatalog request
	DeleteCatalog(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalog request
	GetCatalog(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCatalogWithBody request with any body
	UpdateCatalogWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCatalogWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateCatalogApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCauses request
	ListCauses(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCauseWithBody request with any body
	CreateCauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCauseWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateCauseApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCause request
	DeleteCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCause request
	GetCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCauseWithBody request with any body
	UpdateCauseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCauseWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateCauseApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomFieldOption request
	DeleteCustomFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomFieldOption request
	GetCustomFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomFieldOptionWithBody request with any body
	UpdateCustomFieldOptionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCustomFieldOptionWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateCustomFieldOptionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCustomFields request
	ListCustomFields(ctx context.Context, params *ListCustomFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomFieldWithBody request with any body
	CreateCustomFieldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCustomFieldWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateCustomFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCustomFieldOptions request
	ListCustomFieldOptions(ctx context.Context, customFieldId string, params *ListCustomFieldOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomFieldOptionWithBody request with any body
	CreateCustomFieldOptionWithBody(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCustomFieldOptionWithApplicationVndAPIPlusJSONBody(ctx context.Context, customFieldId string, body CreateCustomFieldOptionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomField request
	DeleteCustomField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomField request
	GetCustomField(ctx context.Context, id string, params *GetCustomFieldParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomFieldWithBody request with any body
	UpdateCustomFieldWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCustomFieldWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateCustomFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCustomForms request
	ListCustomForms(ctx context.Context, params *ListCustomFormsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomFormWithBody request with any body
	CreateCustomFormWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCustomFormWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateCustomFormApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomForm request
	DeleteCustomForm(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomForm request
	GetCustomForm(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomFormWithBody request with any body
	UpdateCustomFormWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCustomFormWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateCustomFormApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDashboardPanel request
	DeleteDashboardPanel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardPanel request
	GetDashboardPanel(ctx context.Context, id string, params *GetDashboardPanelParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDashboardPanelWithBody request with any body
	UpdateDashboardPanelWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDashboardPanelWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateDashboardPanelApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DuplicateDashboardPanel request
	DuplicateDashboardPanel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDashboards request
	ListDashboards(ctx context.Context, params *ListDashboardsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDashboardWithBody request with any body
	CreateDashboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDashboardWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateDashboardApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDashboardPanels request
	ListDashboardPanels(ctx context.Context, dashboardId string, params *ListDashboardPanelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDashboardPanelWithBody request with any body
	CreateDashboardPanelWithBody(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDashboardPanelWithApplicationVndAPIPlusJSONBody(ctx context.Context, dashboardId string, body CreateDashboardPanelApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDashboard request
	DeleteDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboard request
	GetDashboard(ctx context.Context, id string, params *GetDashboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDashboardWithBody request with any body
	UpdateDashboardWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDashboardWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateDashboardApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DuplicateDashboard request
	DuplicateDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetDefaultDashboard request
	SetDefaultDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEnvironments request
	ListEnvironments(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironmentWithBody request with any body
	CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEnvironmentWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateEnvironmentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironment request
	DeleteEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEnvironmentWithBody request with any body
	UpdateEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEnvironmentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateEnvironmentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEscalationLevel request
	DeleteEscalationLevel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEscalationLevel request
	GetEscalationLevel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEscalationLevelWithBody request with any body
	UpdateEscalationLevelWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEscalationLevelWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateEscalationLevelApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEscalationLevelsPaths request
	ListEscalationLevelsPaths(ctx context.Context, escalationPathId string, params *ListEscalationLevelsPathsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEscalationLevelPathsWithBody request with any body
	CreateEscalationLevelPathsWithBody(ctx context.Context, escalationPathId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEscalationLevelPathsWithApplicationVndAPIPlusJSONBody(ctx context.Context, escalationPathId string, body CreateEscalationLevelPathsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEscalationPath request
	DeleteEscalationPath(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEscalationPath request
	GetEscalationPath(ctx context.Context, id string, params *GetEscalationPathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEscalationPathWithBody request with any body
	UpdateEscalationPathWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEscalationPathWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateEscalationPathApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEscalationPolicies request
	ListEscalationPolicies(ctx context.Context, params *ListEscalationPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEscalationPolicyWithBody request with any body
	CreateEscalationPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEscalationPolicyWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateEscalationPolicyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEscalationLevelsPolicies request
	ListEscalationLevelsPolicies(ctx context.Context, escalationPolicyId string, params *ListEscalationLevelsPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEscalationLevelPoliciesWithBody request with any body
	CreateEscalationLevelPoliciesWithBody(ctx context.Context, escalationPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEscalationLevelPoliciesWithApplicationVndAPIPlusJSONBody(ctx context.Context, escalationPolicyId string, body CreateEscalationLevelPoliciesApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEscalationPaths request
	ListEscalationPaths(ctx context.Context, escalationPolicyId string, params *ListEscalationPathsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEscalationPathWithBody request with any body
	CreateEscalationPathWithBody(ctx context.Context, escalationPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEscalationPathWithApplicationVndAPIPlusJSONBody(ctx context.Context, escalationPolicyId string, body CreateEscalationPathApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEscalationPolicy request
	DeleteEscalationPolicy(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEscalationPolicy request
	GetEscalationPolicy(ctx context.Context, id string, params *GetEscalationPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEscalationPolicyWithBody request with any body
	UpdateEscalationPolicyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEscalationPolicyWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateEscalationPolicyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentEvent request
	DeleteIncidentEvent(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentEvents request
	GetIncidentEvents(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentEventWithBody request with any body
	UpdateIncidentEventWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIncidentEventWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentEventApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentEventFunctionalities request
	ListIncidentEventFunctionalities(ctx context.Context, incidentEventId string, params *ListIncidentEventFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentEventFunctionalityWithBody request with any body
	CreateIncidentEventFunctionalityWithBody(ctx context.Context, incidentEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIncidentEventFunctionalityWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentEventId string, body CreateIncidentEventFunctionalityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentEventServices request
	ListIncidentEventServices(ctx context.Context, incidentEventId string, params *ListIncidentEventServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentEventServiceWithBody request with any body
	CreateIncidentEventServiceWithBody(ctx context.Context, incidentEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIncidentEventServiceWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentEventId string, body CreateIncidentEventServiceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentFeedbacks request
	GetIncidentFeedbacks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentFeedbackWithBody request with any body
	UpdateIncidentFeedbackWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIncidentFeedbackWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentFeedbackApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFormFieldOption request
	DeleteFormFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFormFieldOption request
	GetFormFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFormFieldOptionWithBody request with any body
	UpdateFormFieldOptionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFormFieldOptionWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateFormFieldOptionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFormFieldPlacementCondition request
	DeleteFormFieldPlacementCondition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFormFieldPlacementCondition request
	GetFormFieldPlacementCondition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFormFieldPlacementConditionWithBody request with any body
	UpdateFormFieldPlacementConditionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFormFieldPlacementConditionWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateFormFieldPlacementConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFormFieldPlacementConditions request
	ListFormFieldPlacementConditions(ctx context.Context, formFieldPlacementId string, params *ListFormFieldPlacementConditionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFormFieldPlacementConditionWithBody request with any body
	CreateFormFieldPlacementConditionWithBody(ctx context.Context, formFieldPlacementId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFormFieldPlacementConditionWithApplicationVndAPIPlusJSONBody(ctx context.Context, formFieldPlacementId string, body CreateFormFieldPlacementConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFormFieldPlacement request
	DeleteFormFieldPlacement(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFormFieldPlacement request
	GetFormFieldPlacement(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFormFieldPlacementWithBody request with any body
	UpdateFormFieldPlacementWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFormFieldPlacementWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateFormFieldPlacementApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFormFieldPosition request
	DeleteFormFieldPosition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFormFieldPosition request
	GetFormFieldPosition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFormFieldPositionWithBody request with any body
	UpdateFormFieldPositionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFormFieldPositionWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateFormFieldPositionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFormFields request
	ListFormFields(ctx context.Context, params *ListFormFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFormFieldWithBody request with any body
	CreateFormFieldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFormFieldWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateFormFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFormFieldOptions request
	ListFormFieldOptions(ctx context.Context, formFieldId string, params *ListFormFieldOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFormFieldOptionWithBody request with any body
	CreateFormFieldOptionWithBody(ctx context.Context, formFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFormFieldOptionWithApplicationVndAPIPlusJSONBody(ctx context.Context, formFieldId string, body CreateFormFieldOptionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFormFieldPlacements request
	ListFormFieldPlacements(ctx context.Context, formFieldId string, params *ListFormFieldPlacementsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFormFieldPlacementWithBody request with any body
	CreateFormFieldPlacementWithBody(ctx context.Context, formFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFormFieldPlacementWithApplicationVndAPIPlusJSONBody(ctx context.Context, formFieldId string, body CreateFormFieldPlacementApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFormFieldPositions request
	ListFormFieldPositions(ctx context.Context, formFieldId string, params *ListFormFieldPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFormFieldPositionWithBody request with any body
	CreateFormFieldPositionWithBody(ctx context.Context, formFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFormFieldPositionWithApplicationVndAPIPlusJSONBody(ctx context.Context, formFieldId string, body CreateFormFieldPositionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFormField request
	DeleteFormField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFormField request
	GetFormField(ctx context.Context, id string, params *GetFormFieldParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFormFieldWithBody request with any body
	UpdateFormFieldWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFormFieldWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateFormFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFormSetCondition request
	DeleteFormSetCondition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFormSetCondition request
	GetFormSetCondition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFormSetConditionWithBody request with any body
	UpdateFormSetConditionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFormSetConditionWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateFormSetConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFormSets request
	ListFormSets(ctx context.Context, params *ListFormSetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFormSetWithBody request with any body
	CreateFormSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFormSetWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateFormSetApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFormSetConditions request
	ListFormSetConditions(ctx context.Context, formSetId string, params *ListFormSetConditionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFormSetConditionWithBody request with any body
	CreateFormSetConditionWithBody(ctx context.Context, formSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFormSetConditionWithApplicationVndAPIPlusJSONBody(ctx context.Context, formSetId string, body CreateFormSetConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFormSet request
	DeleteFormSet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFormSet request
	GetFormSet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFormSetWithBody request with any body
	UpdateFormSetWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFormSetWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateFormSetApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFunctionalities request
	ListFunctionalities(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFunctionalityWithBody request with any body
	CreateFunctionalityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFunctionalityWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateFunctionalityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFunctionality request
	DeleteFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionality request
	GetFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFunctionalityWithBody request with any body
	UpdateFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFunctionalityWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateFunctionalityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionalityIncidentsChart request
	GetFunctionalityIncidentsChart(ctx context.Context, id string, params *GetFunctionalityIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionalityUptimeChart request
	GetFunctionalityUptimeChart(ctx context.Context, id string, params *GetFunctionalityUptimeChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListHeartbeats request
	ListHeartbeats(ctx context.Context, params *ListHeartbeatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHeartbeatWithBody request with any body
	CreateHeartbeatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHeartbeatWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateHeartbeatApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PingHeartbeat request
	PingHeartbeat(ctx context.Context, heartbeatId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHeartbeat request
	DeleteHeartbeat(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHeartbeat request
	GetHeartbeat(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateHeartbeatWithBody request with any body
	UpdateHeartbeatWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateHeartbeatWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateHeartbeatApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentCustomFieldSelection request
	DeleteIncidentCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentCustomFieldSelection request
	GetIncidentCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentCustomFieldSelectionWithBody request with any body
	UpdateIncidentCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIncidentCustomFieldSelectionWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentEventFunctionality request
	DeleteIncidentEventFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentEventFunctionalities request
	GetIncidentEventFunctionalities(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentEventFunctionalityWithBody request with any body
	UpdateIncidentEventFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIncidentEventFunctionalityWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentEventFunctionalityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentEventService request
	DeleteIncidentEventService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentEventServices request
	GetIncidentEventServices(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentEventServiceWithBody request with any body
	UpdateIncidentEventServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIncidentEventServiceWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentEventServiceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentFormFieldSelection request
	DeleteIncidentFormFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentFormFieldSelection request
	GetIncidentFormFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentFormFieldSelectionWithBody request with any body
	UpdateIncidentFormFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIncidentFormFieldSelectionWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentFormFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentPermissionSetBoolean request
	DeleteIncidentPermissionSetBoolean(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentPermissionSetBoolean request
	GetIncidentPermissionSetBoolean(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentPermissionSetBooleanWithBody request with any body
	UpdateIncidentPermissionSetBooleanWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIncidentPermissionSetBooleanWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentPermissionSetBooleanApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentPermissionSetResource request
	DeleteIncidentPermissionSetResource(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentPermissionSetResource request
	GetIncidentPermissionSetResource(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentPermissionSetResourceWithBody request with any body
	UpdateIncidentPermissionSetResourceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIncidentPermissionSetResourceWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentPermissionSetResourceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentPermissionSets request
	ListIncidentPermissionSets(ctx context.Context, params *ListIncidentPermissionSetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentPermissionSetWithBody request with any body
	CreateIncidentPermissionSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIncidentPermissionSetWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateIncidentPermissionSetApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentPermissionSet request
	DeleteIncidentPermissionSet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentPermissionSet request
	GetIncidentPermissionSet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentPermissionSetWithBody request with any body
	UpdateIncidentPermissionSetWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIncidentPermissionSetWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentPermissionSetApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentPermissionSetBooleans request
	ListIncidentPermissionSetBooleans(ctx context.Context, incidentPermissionSetId string, params *ListIncidentPermissionSetBooleansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentPermissionSetBooleanWithBody request with any body
	CreateIncidentPermissionSetBooleanWithBody(ctx context.Context, incidentPermissionSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIncidentPermissionSetBooleanWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentPermissionSetId string, body CreateIncidentPermissionSetBooleanApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentPermissionSetResources request
	ListIncidentPermissionSetResources(ctx context.Context, incidentPermissionSetId string, params *ListIncidentPermissionSetResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentPermissionSetResourceWithBody request with any body
	CreateIncidentPermissionSetResourceWithBody(ctx context.Context, incidentPermissionSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIncidentPermissionSetResourceWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentPermissionSetId string, body CreateIncidentPermissionSetResourceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentRetrospectiveStep request
	GetIncidentRetrospectiveStep(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentRetrospectiveStepWithBody request with any body
	UpdateIncidentRetrospectiveStepWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIncidentRetrospectiveStepWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentRetrospectiveStepApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentRoleTask request
	DeleteIncidentRoleTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentRoleTask request
	GetIncidentRoleTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentRoleTaskWithBody request with any body
	UpdateIncidentRoleTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIncidentRoleTaskWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentRoleTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentRoles request
	ListIncidentRoles(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentRoleWithBody request with any body
	CreateIncidentRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIncidentRoleWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateIncidentRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentRole request
	DeleteIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentRole request
	GetIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentRoleWithBody request with any body
	UpdateIncidentRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIncidentRoleWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentRoleTasks request
	ListIncidentRoleTasks(ctx context.Context, incidentRoleId string, params *ListIncidentRoleTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentRoleTaskWithBody request with any body
	CreateIncidentRoleTaskWithBody(ctx context.Context, incidentRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIncidentRoleTaskWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentRoleId string, body CreateIncidentRoleTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentSubStatus request
	DeleteIncidentSubStatus(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentSubStatus request
	GetIncidentSubStatus(ctx context.Context, id string, params *GetIncidentSubStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentSubStatusWithBody request with any body
	UpdateIncidentSubStatusWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIncidentSubStatusWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentSubStatusApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentTypes request
	ListIncidentTypes(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentTypeWithBody request with any body
	CreateIncidentTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIncidentTypeWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateIncidentTypeApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentType request
	DeleteIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentType request
	GetIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentTypeWithBody request with any body
	UpdateIncidentTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIncidentTypeWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentTypeApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidents request
	ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentWithBody request with any body
	CreateIncidentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncident request
	DeleteIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncident request
	GetIncident(ctx context.Context, id string, params *GetIncidentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentWithBody request with any body
	UpdateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddSubscribersToIncidentWithBody request with any body
	AddSubscribersToIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddSubscribersToIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body AddSubscribersToIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssignUserToIncidentWithBody request with any body
	AssignUserToIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AssignUserToIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body AssignUserToIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelIncidentWithBody request with any body
	CancelIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body CancelIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarkAsDuplicateIncidentWithBody request with any body
	MarkAsDuplicateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarkAsDuplicateIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body MarkAsDuplicateIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TriageIncidentWithBody request with any body
	TriageIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TriageIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body TriageIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MitigateIncidentWithBody request with any body
	MitigateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MitigateIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body MitigateIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveSubscribersToIncidentWithBody request with any body
	RemoveSubscribersToIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveSubscribersToIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body RemoveSubscribersToIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResolveIncidentWithBody request with any body
	ResolveIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResolveIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body ResolveIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestartIncidentWithBody request with any body
	RestartIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RestartIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body RestartIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveAssignedUserFromIncidentWithBody request with any body
	RemoveAssignedUserFromIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveAssignedUserFromIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body RemoveAssignedUserFromIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentActionItems request
	ListIncidentActionItems(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentActionItemWithBody request with any body
	CreateIncidentActionItemWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIncidentActionItemWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentId string, body CreateIncidentActionItemApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentAlerts request
	ListIncidentAlerts(ctx context.Context, incidentId string, params *ListIncidentAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AttachAlertWithBody request with any body
	AttachAlertWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AttachAlertWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentId string, body AttachAlertApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentCustomFieldSelections request
	ListIncidentCustomFieldSelections(ctx context.Context, incidentId string, params *ListIncidentCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentCustomFieldSelectionWithBody request with any body
	CreateIncidentCustomFieldSelectionWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIncidentCustomFieldSelectionWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentId string, body CreateIncidentCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentEvents request
	ListIncidentEvents(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentEventWithBody request with any body
	CreateIncidentEventWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIncidentEventWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentId string, body CreateIncidentEventApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentFeedbacks request
	ListIncidentFeedbacks(ctx context.Context, incidentId string, params *ListIncidentFeedbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentFeedbackWithBody request with any body
	CreateIncidentFeedbackWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIncidentFeedbackWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentId string, body CreateIncidentFeedbackApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentFormFieldSelections request
	ListIncidentFormFieldSelections(ctx context.Context, incidentId string, params *ListIncidentFormFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentFormFieldSelectionWithBody request with any body
	CreateIncidentFormFieldSelectionWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIncidentFormFieldSelectionWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentId string, body CreateIncidentFormFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentStatusPages request
	ListIncidentStatusPages(ctx context.Context, incidentId string, params *ListIncidentStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentStatusPageWithBody request with any body
	CreateIncidentStatusPageWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIncidentStatusPageWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentId string, body CreateIncidentStatusPageApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentSubStatuses request
	ListIncidentSubStatuses(ctx context.Context, incidentId string, params *ListIncidentSubStatusesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentSubStatusWithBody request with any body
	CreateIncidentSubStatusWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIncidentSubStatusWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentId string, body CreateIncidentSubStatusApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIpRanges request
	GetIpRanges(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListLiveCallRouters request
	ListLiveCallRouters(ctx context.Context, params *ListLiveCallRoutersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateLiveCallRouterWithBody request with any body
	CreateLiveCallRouterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateLiveCallRouterWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateLiveCallRouterApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GeneratePhoneNumberLiveCallRouter request
	GeneratePhoneNumberLiveCallRouter(ctx context.Context, params *GeneratePhoneNumberLiveCallRouterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLiveCallRouter request
	DeleteLiveCallRouter(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLiveCallRouter request
	GetLiveCallRouter(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateLiveCallRouterWithBody request with any body
	UpdateLiveCallRouterWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateLiveCallRouterWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateLiveCallRouterApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserNotificationRule request
	DeleteUserNotificationRule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserNotificationRule request
	GetUserNotificationRule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserNotificationRuleWithBody request with any body
	UpdateUserNotificationRuleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserNotificationRuleWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateUserNotificationRuleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOnCallRoles request
	ListOnCallRoles(ctx context.Context, params *ListOnCallRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOnCallRoleWithBody request with any body
	CreateOnCallRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOnCallRoleWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateOnCallRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOnCallRole request
	DeleteOnCallRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOnCallRole request
	GetOnCallRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOnCallRoleWithBody request with any body
	UpdateOnCallRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOnCallRoleWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateOnCallRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOnCallShadow request
	DeleteOnCallShadow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOnCallShadow request
	GetOnCallShadow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOnCallShadowWithBody request with any body
	UpdateOnCallShadowWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOnCallShadowWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateOnCallShadowApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOverrideShift request
	DeleteOverrideShift(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOverrideShift request
	GetOverrideShift(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOverrideShiftWithBody request with any body
	UpdateOverrideShiftWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOverrideShiftWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateOverrideShiftApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlaybookTask request
	DeletePlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaybookTask request
	GetPlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlaybookTaskWithBody request with any body
	UpdatePlaybookTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePlaybookTaskWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdatePlaybookTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlaybooks request
	ListPlaybooks(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlaybookWithBody request with any body
	CreatePlaybookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePlaybookWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreatePlaybookApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlaybook request
	DeletePlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaybook request
	GetPlaybook(ctx context.Context, id string, params *GetPlaybookParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlaybookWithBody request with any body
	UpdatePlaybookWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePlaybookWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdatePlaybookApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlaybookTasks request
	ListPlaybookTasks(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlaybookTaskWithBody request with any body
	CreatePlaybookTaskWithBody(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePlaybookTaskWithApplicationVndAPIPlusJSONBody(ctx context.Context, playbookId string, body CreatePlaybookTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPostmortemTemplates request
	ListPostmortemTemplates(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePostmortemTemplateWithBody request with any body
	CreatePostmortemTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePostmortemTemplateWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreatePostmortemTemplateApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePostmortemTemplate request
	DeletePostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostmortemTemplate request
	GetPostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePostmortemTemplateWithBody request with any body
	UpdatePostmortemTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePostmortemTemplateWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdatePostmortemTemplateApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentPostMortems request
	ListIncidentPostMortems(ctx context.Context, params *ListIncidentPostMortemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentPostmortem request
	ListIncidentPostmortem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentPostmortemWithBody request with any body
	UpdateIncidentPostmortemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIncidentPostmortemWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentPostmortemApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPulses request
	ListPulses(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePulseWithBody request with any body
	CreatePulseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePulseWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreatePulseApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPulse request
	GetPulse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePulseWithBody request with any body
	UpdatePulseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePulseWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdatePulseApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRetrospectiveConfigurations request
	ListRetrospectiveConfigurations(ctx context.Context, params *ListRetrospectiveConfigurationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRetrospectiveConfiguration request
	GetRetrospectiveConfiguration(ctx context.Context, id string, params *GetRetrospectiveConfigurationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRetrospectiveConfigurationWithBody request with any body
	UpdateRetrospectiveConfigurationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRetrospectiveConfigurationWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateRetrospectiveConfigurationApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRetrospectiveProcessGroupStep request
	DeleteRetrospectiveProcessGroupStep(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRetrospectiveProcessGroupStep request
	GetRetrospectiveProcessGroupStep(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRetrospectiveProcessGroupStepWithBody request with any body
	UpdateRetrospectiveProcessGroupStepWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRetrospectiveProcessGroupStepWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateRetrospectiveProcessGroupStepApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRetrospectiveProcessGroup request
	DeleteRetrospectiveProcessGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRetrospectiveProcessGroup request
	GetRetrospectiveProcessGroup(ctx context.Context, id string, params *GetRetrospectiveProcessGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRetrospectiveProcessGroupWithBody request with any body
	UpdateRetrospectiveProcessGroupWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRetrospectiveProcessGroupWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateRetrospectiveProcessGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRetrospectiveProcessGroupSteps request
	ListRetrospectiveProcessGroupSteps(ctx context.Context, retrospectiveProcessGroupId string, params *ListRetrospectiveProcessGroupStepsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRetrospectiveProcessGroupStepWithBody request with any body
	CreateRetrospectiveProcessGroupStepWithBody(ctx context.Context, retrospectiveProcessGroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRetrospectiveProcessGroupStepWithApplicationVndAPIPlusJSONBody(ctx context.Context, retrospectiveProcessGroupId string, body CreateRetrospectiveProcessGroupStepApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRetrospectiveProcesses request
	ListRetrospectiveProcesses(ctx context.Context, params *ListRetrospectiveProcessesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRetrospectiveProcessWithBody request with any body
	CreateRetrospectiveProcessWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRetrospectiveProcessWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateRetrospectiveProcessApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRetrospectiveProcess request
	DeleteRetrospectiveProcess(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRetrospectiveProcess request
	GetRetrospectiveProcess(ctx context.Context, id string, params *GetRetrospectiveProcessParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRetrospectiveProcessWithBody request with any body
	UpdateRetrospectiveProcessWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRetrospectiveProcessWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateRetrospectiveProcessApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRetrospectiveProcessGroups request
	ListRetrospectiveProcessGroups(ctx context.Context, retrospectiveProcessId string, params *ListRetrospectiveProcessGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRetrospectiveProcessGroupWithBody request with any body
	CreateRetrospectiveProcessGroupWithBody(ctx context.Context, retrospectiveProcessId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRetrospectiveProcessGroupWithApplicationVndAPIPlusJSONBody(ctx context.Context, retrospectiveProcessId string, body CreateRetrospectiveProcessGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRetrospectiveSteps request
	ListRetrospectiveSteps(ctx context.Context, retrospectiveProcessId string, params *ListRetrospectiveStepsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRetrospectiveStepWithBody request with any body
	CreateRetrospectiveStepWithBody(ctx context.Context, retrospectiveProcessId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRetrospectiveStepWithApplicationVndAPIPlusJSONBody(ctx context.Context, retrospectiveProcessId string, body CreateRetrospectiveStepApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRetrospectiveStep request
	DeleteRetrospectiveStep(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRetrospectiveStep request
	GetRetrospectiveStep(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRetrospectiveStepWithBody request with any body
	UpdateRetrospectiveStepWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRetrospectiveStepWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateRetrospectiveStepApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRoles request
	ListRoles(ctx context.Context, params *ListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRoleWithBody request with any body
	CreateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRoleWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRole request
	DeleteRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRole request
	GetRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRoleWithBody request with any body
	UpdateRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRoleWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteScheduleRotationActiveDay request
	DeleteScheduleRotationActiveDay(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScheduleRotationActiveDay request
	GetScheduleRotationActiveDay(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateScheduleRotationActiveDayWithBody request with any body
	UpdateScheduleRotationActiveDayWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateScheduleRotationActiveDayWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateScheduleRotationActiveDayApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteScheduleRotationUser request
	DeleteScheduleRotationUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScheduleRotationUser request
	GetScheduleRotationUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateScheduleRotationUserWithBody request with any body
	UpdateScheduleRotationUserWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateScheduleRotationUserWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateScheduleRotationUserApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteScheduleRotation request
	DeleteScheduleRotation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScheduleRotation request
	GetScheduleRotation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateScheduleRotationWithBody request with any body
	UpdateScheduleRotationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateScheduleRotationWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateScheduleRotationApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListScheduleRotationActiveDays request
	ListScheduleRotationActiveDays(ctx context.Context, scheduleRotationId string, params *ListScheduleRotationActiveDaysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateScheduleRotationActiveDayWithBody request with any body
	CreateScheduleRotationActiveDayWithBody(ctx context.Context, scheduleRotationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateScheduleRotationActiveDayWithApplicationVndAPIPlusJSONBody(ctx context.Context, scheduleRotationId string, body CreateScheduleRotationActiveDayApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListScheduleRotationUsers request
	ListScheduleRotationUsers(ctx context.Context, scheduleRotationId string, params *ListScheduleRotationUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateScheduleRotationUserWithBody request with any body
	CreateScheduleRotationUserWithBody(ctx context.Context, scheduleRotationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateScheduleRotationUserWithApplicationVndAPIPlusJSONBody(ctx context.Context, scheduleRotationId string, body CreateScheduleRotationUserApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSchedules request
	ListSchedules(ctx context.Context, params *ListSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateScheduleWithBody request with any body
	CreateScheduleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateScheduleWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateScheduleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSchedule request
	DeleteSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchedule request
	GetSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateScheduleWithBody request with any body
	UpdateScheduleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateScheduleWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateScheduleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScheduleShifts request
	GetScheduleShifts(ctx context.Context, id string, params *GetScheduleShiftsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOnCallShadows request
	ListOnCallShadows(ctx context.Context, scheduleId string, params *ListOnCallShadowsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOnCallShadowWithBody request with any body
	CreateOnCallShadowWithBody(ctx context.Context, scheduleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOnCallShadowWithApplicationVndAPIPlusJSONBody(ctx context.Context, scheduleId string, body CreateOnCallShadowApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOverrideShifts request
	ListOverrideShifts(ctx context.Context, scheduleId string, params *ListOverrideShiftsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOverrideShiftWithBody request with any body
	CreateOverrideShiftWithBody(ctx context.Context, scheduleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOverrideShiftWithApplicationVndAPIPlusJSONBody(ctx context.Context, scheduleId string, body CreateOverrideShiftApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListScheduleRotations request
	ListScheduleRotations(ctx context.Context, scheduleId string, params *ListScheduleRotationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateScheduleRotationWithBody request with any body
	CreateScheduleRotationWithBody(ctx context.Context, scheduleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateScheduleRotationWithApplicationVndAPIPlusJSONBody(ctx context.Context, scheduleId string, body CreateScheduleRotationApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSecrets request
	ListSecrets(ctx context.Context, params *ListSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSecretWithBody request with any body
	CreateSecretWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSecretWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateSecretApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSecret request
	DeleteSecret(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecret request
	GetSecret(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSecretWithBody request with any body
	UpdateSecretWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSecretWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateSecretApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServices request
	ListServices(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateServiceWithBody request with any body
	CreateServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateServiceWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateServiceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteService request
	DeleteService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetService request
	GetService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateServiceWithBody request with any body
	UpdateServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateServiceWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateServiceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceIncidentsChart request
	GetServiceIncidentsChart(ctx context.Context, id string, params *GetServiceIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceUptimeChart request
	GetServiceUptimeChart(ctx context.Context, id string, params *GetServiceUptimeChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSeverities request
	ListSeverities(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSeverityWithBody request with any body
	CreateSeverityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSeverityWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateSeverityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSeverity request
	DeleteSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeverity request
	GetSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSeverityWithBody request with any body
	UpdateSeverityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSeverityWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateSeverityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListShifts request
	ListShifts(ctx context.Context, params *ListShiftsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentStatusPage request
	DeleteIncidentStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentStatusPages request
	GetIncidentStatusPages(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentStatusPageWithBody request with any body
	UpdateIncidentStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIncidentStatusPageWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentStatusPageApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListStatusPages request
	ListStatusPages(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStatusPageWithBody request with any body
	CreateStatusPageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateStatusPageWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateStatusPageApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStatusPage request
	DeleteStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusPage request
	GetStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStatusPageWithBody request with any body
	UpdateStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateStatusPageWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateStatusPageApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListStatusPageTemplates request
	ListStatusPageTemplates(ctx context.Context, statusPageId string, params *ListStatusPageTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStatusPageTemplateWithBody request with any body
	CreateStatusPageTemplateWithBody(ctx context.Context, statusPageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateStatusPageTemplateWithApplicationVndAPIPlusJSONBody(ctx context.Context, statusPageId string, body CreateStatusPageTemplateApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSubStatuses request
	ListSubStatuses(ctx context.Context, params *ListSubStatusesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSubStatusWithBody request with any body
	CreateSubStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSubStatusWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateSubStatusApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSubStatus request
	DeleteSubStatus(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubStatus request
	GetSubStatus(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSubStatusWithBody request with any body
	UpdateSubStatusWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSubStatusWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateSubStatusApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTeams request
	ListTeams(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeamWithBody request with any body
	CreateTeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTeamWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateTeamApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeam request
	DeleteTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeam request
	GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeamWithBody request with any body
	UpdateTeamWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTeamWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateTeamApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamIncidentsChart request
	GetTeamIncidentsChart(ctx context.Context, id string, params *GetTeamIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStatusPageTemplate request
	DeleteStatusPageTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusPageTemplate request
	GetStatusPageTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStatusPageTemplateWithBody request with any body
	UpdateStatusPageTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateStatusPageTemplateWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateStatusPageTemplateApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsers request
	ListUsers(ctx context.Context, params *ListUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCurrentUser request
	GetCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request
	DeleteUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, id string, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUserNotificationRules request
	ListUserNotificationRules(ctx context.Context, userId string, params *ListUserNotificationRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserNotificationRuleWithBody request with any body
	CreateUserNotificationRuleWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserNotificationRuleWithApplicationVndAPIPlusJSONBody(ctx context.Context, userId string, body CreateUserNotificationRuleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebhooksDelivery request
	GetWebhooksDelivery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeliverWebhooksDelivery request
	DeliverWebhooksDelivery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWebhooksEndpoints request
	ListWebhooksEndpoints(ctx context.Context, params *ListWebhooksEndpointsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWebhooksEndpointWithBody request with any body
	CreateWebhooksEndpointWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWebhooksEndpointWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateWebhooksEndpointApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWebhooksDeliveries request
	ListWebhooksDeliveries(ctx context.Context, endpointId string, params *ListWebhooksDeliveriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWebhooksEndpoint request
	DeleteWebhooksEndpoint(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebhooksEndpoint request
	GetWebhooksEndpoint(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWebhooksEndpointWithBody request with any body
	UpdateWebhooksEndpointWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWebhooksEndpointWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateWebhooksEndpointApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflowCustomFieldSelection request
	DeleteWorkflowCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowCustomFieldSelection request
	GetWorkflowCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkflowCustomFieldSelectionWithBody request with any body
	UpdateWorkflowCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkflowCustomFieldSelectionWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateWorkflowCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflowFormFieldCondition request
	DeleteWorkflowFormFieldCondition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowFormFieldCondition request
	GetWorkflowFormFieldCondition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkflowFormFieldConditionWithBody request with any body
	UpdateWorkflowFormFieldConditionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkflowFormFieldConditionWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateWorkflowFormFieldConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflowGroups request
	ListWorkflowGroups(ctx context.Context, params *ListWorkflowGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflowGroupWithBody request with any body
	CreateWorkflowGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkflowGroupWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateWorkflowGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflowGroup request
	DeleteWorkflowGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowGroup request
	GetWorkflowGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkflowGroupWithBody request with any body
	UpdateWorkflowGroupWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkflowGroupWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateWorkflowGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflowTask request
	DeleteWorkflowTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowTask request
	GetWorkflowTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkflowTaskWithBody request with any body
	UpdateWorkflowTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkflowTaskWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateWorkflowTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflows request
	ListWorkflows(ctx context.Context, params *ListWorkflowsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflowWithBody request with any body
	CreateWorkflowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkflowWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateWorkflowApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflow request
	DeleteWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflow request
	GetWorkflow(ctx context.Context, id string, params *GetWorkflowParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkflowWithBody request with any body
	UpdateWorkflowWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkflowWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateWorkflowApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflowCustomFieldSelections request
	ListWorkflowCustomFieldSelections(ctx context.Context, workflowId string, params *ListWorkflowCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflowCustomFieldSelectionWithBody request with any body
	CreateWorkflowCustomFieldSelectionWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkflowCustomFieldSelectionWithApplicationVndAPIPlusJSONBody(ctx context.Context, workflowId string, body CreateWorkflowCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflowFormFieldConditions request
	ListWorkflowFormFieldConditions(ctx context.Context, workflowId string, params *ListWorkflowFormFieldConditionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflowFormFieldConditionWithBody request with any body
	CreateWorkflowFormFieldConditionWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkflowFormFieldConditionWithApplicationVndAPIPlusJSONBody(ctx context.Context, workflowId string, body CreateWorkflowFormFieldConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflowRuns request
	ListWorkflowRuns(ctx context.Context, workflowId string, params *ListWorkflowRunsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflowRunWithBody request with any body
	CreateWorkflowRunWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkflowRunWithApplicationVndAPIPlusJSONBody(ctx context.Context, workflowId string, body CreateWorkflowRunApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflowTasks request
	ListWorkflowTasks(ctx context.Context, workflowId string, params *ListWorkflowTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflowTaskWithBody request with any body
	CreateWorkflowTaskWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkflowTaskWithApplicationVndAPIPlusJSONBody(ctx context.Context, workflowId string, body CreateWorkflowTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListAllIncidentActionItems(ctx context.Context, params *ListAllIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAllIncidentActionItemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentActionItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentActionItemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentActionItems(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentActionItemsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentActionItemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentActionItemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentActionItemWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentActionItemApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentActionItemRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAlertGroups(ctx context.Context, params *ListAlertGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAlertGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAlertGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAlertGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAlertGroupWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateAlertGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAlertGroupRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAlertGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAlertGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAlertGroupWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAlertGroupRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAlertGroupWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateAlertGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAlertGroupRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAlertSources(ctx context.Context, params *ListAlertSourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAlertSourcesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAlertSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAlertSourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAlertSourceWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateAlertSourceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAlertSourceRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAlertSource(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAlertSourceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertSource(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertSourceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAlertSourceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAlertSourceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAlertSourceWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateAlertSourceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAlertSourceRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAlertUrgencies(ctx context.Context, params *ListAlertUrgenciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAlertUrgenciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAlertUrgencyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAlertUrgencyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAlertUrgencyWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateAlertUrgencyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAlertUrgencyRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAlertUrgency(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAlertUrgencyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertUrgency(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertUrgencyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAlertUrgencyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAlertUrgencyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAlertUrgencyWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateAlertUrgencyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAlertUrgencyRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAlerts(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAlertsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAlertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAlertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAlertWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateAlertApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAlertRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlert(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcknowledgeAlert(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcknowledgeAlertRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolveAlertWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResolveAlertRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolveAlertWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body ResolveAlertApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResolveAlertRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAudits(ctx context.Context, params *ListAuditsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAuditsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAuthorizations(ctx context.Context, params *ListAuthorizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAuthorizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthorizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthorizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthorizationWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateAuthorizationApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthorizationRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthorization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthorizationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthorization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthorizationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAuthorizationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAuthorizationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAuthorizationWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateAuthorizationApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAuthorizationRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCatalogEntityProperties(ctx context.Context, catalogEntityId string, params *ListCatalogEntityPropertiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCatalogEntityPropertiesRequest(c.Server, catalogEntityId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogEntityPropertyWithBody(ctx context.Context, catalogEntityId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogEntityPropertyRequestWithBody(c.Server, catalogEntityId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogEntityPropertyWithApplicationVndAPIPlusJSONBody(ctx context.Context, catalogEntityId string, body CreateCatalogEntityPropertyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogEntityPropertyRequestWithApplicationVndAPIPlusJSONBody(c.Server, catalogEntityId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCatalogEntity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCatalogEntityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogEntity(ctx context.Context, id string, params *GetCatalogEntityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogEntityRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogEntityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogEntityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogEntityWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateCatalogEntityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogEntityRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCatalogEntityProperty(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCatalogEntityPropertyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogEntityProperty(ctx context.Context, id string, params *GetCatalogEntityPropertyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogEntityPropertyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogEntityPropertyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogEntityPropertyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogEntityPropertyWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateCatalogEntityPropertyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogEntityPropertyRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCatalogField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCatalogFieldRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogField(ctx context.Context, id string, params *GetCatalogFieldParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogFieldRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogFieldWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogFieldRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogFieldWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateCatalogFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogFieldRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCatalogs(ctx context.Context, params *ListCatalogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCatalogsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateCatalogApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCatalogEntities(ctx context.Context, catalogId string, params *ListCatalogEntitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCatalogEntitiesRequest(c.Server, catalogId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogEntityWithBody(ctx context.Context, catalogId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogEntityRequestWithBody(c.Server, catalogId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogEntityWithApplicationVndAPIPlusJSONBody(ctx context.Context, catalogId string, body CreateCatalogEntityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogEntityRequestWithApplicationVndAPIPlusJSONBody(c.Server, catalogId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCatalogFields(ctx context.Context, catalogId string, params *ListCatalogFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCatalogFieldsRequest(c.Server, catalogId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogFieldWithBody(ctx context.Context, catalogId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogFieldRequestWithBody(c.Server, catalogId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogFieldWithApplicationVndAPIPlusJSONBody(ctx context.Context, catalogId string, body CreateCatalogFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogFieldRequestWithApplicationVndAPIPlusJSONBody(c.Server, catalogId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCatalog(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCatalogRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalog(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateCatalogApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCauses(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCausesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCauseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCauseWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateCauseApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCauseRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCauseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCauseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCauseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCauseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCauseWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateCauseApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCauseRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomFieldOptionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomFieldOptionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomFieldOptionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomFieldOptionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomFieldOptionWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateCustomFieldOptionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomFieldOptionRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomFields(ctx context.Context, params *ListCustomFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomFieldsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomFieldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomFieldRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomFieldWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateCustomFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomFieldRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomFieldOptions(ctx context.Context, customFieldId string, params *ListCustomFieldOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomFieldOptionsRequest(c.Server, customFieldId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomFieldOptionWithBody(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomFieldOptionRequestWithBody(c.Server, customFieldId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomFieldOptionWithApplicationVndAPIPlusJSONBody(ctx context.Context, customFieldId string, body CreateCustomFieldOptionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomFieldOptionRequestWithApplicationVndAPIPlusJSONBody(c.Server, customFieldId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomFieldRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomField(ctx context.Context, id string, params *GetCustomFieldParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomFieldRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomFieldWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomFieldRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomFieldWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateCustomFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomFieldRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomForms(ctx context.Context, params *ListCustomFormsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomFormsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomFormWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomFormRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomFormWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateCustomFormApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomFormRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomForm(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomFormRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomForm(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomFormRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomFormWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomFormRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomFormWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateCustomFormApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomFormRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDashboardPanel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDashboardPanelRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardPanel(ctx context.Context, id string, params *GetDashboardPanelParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardPanelRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDashboardPanelWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDashboardPanelRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDashboardPanelWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateDashboardPanelApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDashboardPanelRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DuplicateDashboardPanel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDuplicateDashboardPanelRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDashboards(ctx context.Context, params *ListDashboardsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDashboardsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDashboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDashboardRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDashboardWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateDashboardApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDashboardRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDashboardPanels(ctx context.Context, dashboardId string, params *ListDashboardPanelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDashboardPanelsRequest(c.Server, dashboardId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDashboardPanelWithBody(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDashboardPanelRequestWithBody(c.Server, dashboardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDashboardPanelWithApplicationVndAPIPlusJSONBody(ctx context.Context, dashboardId string, body CreateDashboardPanelApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDashboardPanelRequestWithApplicationVndAPIPlusJSONBody(c.Server, dashboardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDashboardRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboard(ctx context.Context, id string, params *GetDashboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDashboardWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDashboardRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDashboardWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateDashboardApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDashboardRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DuplicateDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDuplicateDashboardRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetDefaultDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetDefaultDashboardRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEnvironments(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEnvironmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateEnvironmentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironmentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateEnvironmentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEscalationLevel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEscalationLevelRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEscalationLevel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEscalationLevelRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEscalationLevelWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEscalationLevelRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEscalationLevelWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateEscalationLevelApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEscalationLevelRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEscalationLevelsPaths(ctx context.Context, escalationPathId string, params *ListEscalationLevelsPathsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEscalationLevelsPathsRequest(c.Server, escalationPathId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEscalationLevelPathsWithBody(ctx context.Context, escalationPathId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEscalationLevelPathsRequestWithBody(c.Server, escalationPathId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEscalationLevelPathsWithApplicationVndAPIPlusJSONBody(ctx context.Context, escalationPathId string, body CreateEscalationLevelPathsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEscalationLevelPathsRequestWithApplicationVndAPIPlusJSONBody(c.Server, escalationPathId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEscalationPath(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEscalationPathRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEscalationPath(ctx context.Context, id string, params *GetEscalationPathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEscalationPathRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEscalationPathWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEscalationPathRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEscalationPathWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateEscalationPathApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEscalationPathRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEscalationPolicies(ctx context.Context, params *ListEscalationPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEscalationPoliciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEscalationPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEscalationPolicyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEscalationPolicyWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateEscalationPolicyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEscalationPolicyRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEscalationLevelsPolicies(ctx context.Context, escalationPolicyId string, params *ListEscalationLevelsPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEscalationLevelsPoliciesRequest(c.Server, escalationPolicyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEscalationLevelPoliciesWithBody(ctx context.Context, escalationPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEscalationLevelPoliciesRequestWithBody(c.Server, escalationPolicyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEscalationLevelPoliciesWithApplicationVndAPIPlusJSONBody(ctx context.Context, escalationPolicyId string, body CreateEscalationLevelPoliciesApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEscalationLevelPoliciesRequestWithApplicationVndAPIPlusJSONBody(c.Server, escalationPolicyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEscalationPaths(ctx context.Context, escalationPolicyId string, params *ListEscalationPathsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEscalationPathsRequest(c.Server, escalationPolicyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEscalationPathWithBody(ctx context.Context, escalationPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEscalationPathRequestWithBody(c.Server, escalationPolicyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEscalationPathWithApplicationVndAPIPlusJSONBody(ctx context.Context, escalationPolicyId string, body CreateEscalationPathApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEscalationPathRequestWithApplicationVndAPIPlusJSONBody(c.Server, escalationPolicyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEscalationPolicy(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEscalationPolicyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEscalationPolicy(ctx context.Context, id string, params *GetEscalationPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEscalationPolicyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEscalationPolicyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEscalationPolicyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEscalationPolicyWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateEscalationPolicyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEscalationPolicyRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentEvent(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentEventRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentEvents(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentEventsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentEventWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentEventRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentEventWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentEventApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentEventRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentEventFunctionalities(ctx context.Context, incidentEventId string, params *ListIncidentEventFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentEventFunctionalitiesRequest(c.Server, incidentEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentEventFunctionalityWithBody(ctx context.Context, incidentEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentEventFunctionalityRequestWithBody(c.Server, incidentEventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentEventFunctionalityWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentEventId string, body CreateIncidentEventFunctionalityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentEventFunctionalityRequestWithApplicationVndAPIPlusJSONBody(c.Server, incidentEventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentEventServices(ctx context.Context, incidentEventId string, params *ListIncidentEventServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentEventServicesRequest(c.Server, incidentEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentEventServiceWithBody(ctx context.Context, incidentEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentEventServiceRequestWithBody(c.Server, incidentEventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentEventServiceWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentEventId string, body CreateIncidentEventServiceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentEventServiceRequestWithApplicationVndAPIPlusJSONBody(c.Server, incidentEventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentFeedbacks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentFeedbacksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentFeedbackWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentFeedbackRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentFeedbackWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentFeedbackApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentFeedbackRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFormFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFormFieldOptionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFormFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFormFieldOptionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFormFieldOptionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFormFieldOptionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFormFieldOptionWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateFormFieldOptionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFormFieldOptionRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFormFieldPlacementCondition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFormFieldPlacementConditionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFormFieldPlacementCondition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFormFieldPlacementConditionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFormFieldPlacementConditionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFormFieldPlacementConditionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFormFieldPlacementConditionWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateFormFieldPlacementConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFormFieldPlacementConditionRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFormFieldPlacementConditions(ctx context.Context, formFieldPlacementId string, params *ListFormFieldPlacementConditionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFormFieldPlacementConditionsRequest(c.Server, formFieldPlacementId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFormFieldPlacementConditionWithBody(ctx context.Context, formFieldPlacementId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFormFieldPlacementConditionRequestWithBody(c.Server, formFieldPlacementId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFormFieldPlacementConditionWithApplicationVndAPIPlusJSONBody(ctx context.Context, formFieldPlacementId string, body CreateFormFieldPlacementConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFormFieldPlacementConditionRequestWithApplicationVndAPIPlusJSONBody(c.Server, formFieldPlacementId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFormFieldPlacement(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFormFieldPlacementRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFormFieldPlacement(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFormFieldPlacementRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFormFieldPlacementWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFormFieldPlacementRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFormFieldPlacementWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateFormFieldPlacementApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFormFieldPlacementRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFormFieldPosition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFormFieldPositionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFormFieldPosition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFormFieldPositionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFormFieldPositionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFormFieldPositionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFormFieldPositionWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateFormFieldPositionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFormFieldPositionRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFormFields(ctx context.Context, params *ListFormFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFormFieldsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFormFieldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFormFieldRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFormFieldWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateFormFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFormFieldRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFormFieldOptions(ctx context.Context, formFieldId string, params *ListFormFieldOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFormFieldOptionsRequest(c.Server, formFieldId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFormFieldOptionWithBody(ctx context.Context, formFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFormFieldOptionRequestWithBody(c.Server, formFieldId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFormFieldOptionWithApplicationVndAPIPlusJSONBody(ctx context.Context, formFieldId string, body CreateFormFieldOptionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFormFieldOptionRequestWithApplicationVndAPIPlusJSONBody(c.Server, formFieldId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFormFieldPlacements(ctx context.Context, formFieldId string, params *ListFormFieldPlacementsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFormFieldPlacementsRequest(c.Server, formFieldId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFormFieldPlacementWithBody(ctx context.Context, formFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFormFieldPlacementRequestWithBody(c.Server, formFieldId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFormFieldPlacementWithApplicationVndAPIPlusJSONBody(ctx context.Context, formFieldId string, body CreateFormFieldPlacementApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFormFieldPlacementRequestWithApplicationVndAPIPlusJSONBody(c.Server, formFieldId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFormFieldPositions(ctx context.Context, formFieldId string, params *ListFormFieldPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFormFieldPositionsRequest(c.Server, formFieldId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFormFieldPositionWithBody(ctx context.Context, formFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFormFieldPositionRequestWithBody(c.Server, formFieldId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFormFieldPositionWithApplicationVndAPIPlusJSONBody(ctx context.Context, formFieldId string, body CreateFormFieldPositionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFormFieldPositionRequestWithApplicationVndAPIPlusJSONBody(c.Server, formFieldId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFormField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFormFieldRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFormField(ctx context.Context, id string, params *GetFormFieldParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFormFieldRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFormFieldWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFormFieldRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFormFieldWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateFormFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFormFieldRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFormSetCondition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFormSetConditionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFormSetCondition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFormSetConditionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFormSetConditionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFormSetConditionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFormSetConditionWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateFormSetConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFormSetConditionRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFormSets(ctx context.Context, params *ListFormSetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFormSetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFormSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFormSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFormSetWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateFormSetApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFormSetRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFormSetConditions(ctx context.Context, formSetId string, params *ListFormSetConditionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFormSetConditionsRequest(c.Server, formSetId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFormSetConditionWithBody(ctx context.Context, formSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFormSetConditionRequestWithBody(c.Server, formSetId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFormSetConditionWithApplicationVndAPIPlusJSONBody(ctx context.Context, formSetId string, body CreateFormSetConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFormSetConditionRequestWithApplicationVndAPIPlusJSONBody(c.Server, formSetId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFormSet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFormSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFormSet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFormSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFormSetWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFormSetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFormSetWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateFormSetApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFormSetRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFunctionalities(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFunctionalitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFunctionalityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFunctionalityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFunctionalityWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateFunctionalityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFunctionalityRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFunctionalityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFunctionalityWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateFunctionalityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFunctionalityRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionalityIncidentsChart(ctx context.Context, id string, params *GetFunctionalityIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalityIncidentsChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionalityUptimeChart(ctx context.Context, id string, params *GetFunctionalityUptimeChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalityUptimeChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListHeartbeats(ctx context.Context, params *ListHeartbeatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListHeartbeatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHeartbeatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHeartbeatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHeartbeatWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateHeartbeatApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHeartbeatRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PingHeartbeat(ctx context.Context, heartbeatId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPingHeartbeatRequest(c.Server, heartbeatId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHeartbeat(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHeartbeatRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHeartbeat(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHeartbeatRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateHeartbeatWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateHeartbeatRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateHeartbeatWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateHeartbeatApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateHeartbeatRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentCustomFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentCustomFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentCustomFieldSelectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentCustomFieldSelectionWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentCustomFieldSelectionRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentEventFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentEventFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentEventFunctionalities(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentEventFunctionalitiesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentEventFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentEventFunctionalityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentEventFunctionalityWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentEventFunctionalityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentEventFunctionalityRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentEventService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentEventServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentEventServices(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentEventServicesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentEventServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentEventServiceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentEventServiceWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentEventServiceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentEventServiceRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentFormFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentFormFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentFormFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentFormFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentFormFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentFormFieldSelectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentFormFieldSelectionWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentFormFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentFormFieldSelectionRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentPermissionSetBoolean(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentPermissionSetBooleanRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentPermissionSetBoolean(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentPermissionSetBooleanRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentPermissionSetBooleanWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentPermissionSetBooleanRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentPermissionSetBooleanWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentPermissionSetBooleanApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentPermissionSetBooleanRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentPermissionSetResource(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentPermissionSetResourceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentPermissionSetResource(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentPermissionSetResourceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentPermissionSetResourceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentPermissionSetResourceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentPermissionSetResourceWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentPermissionSetResourceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentPermissionSetResourceRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentPermissionSets(ctx context.Context, params *ListIncidentPermissionSetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentPermissionSetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentPermissionSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentPermissionSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentPermissionSetWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateIncidentPermissionSetApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentPermissionSetRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentPermissionSet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentPermissionSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentPermissionSet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentPermissionSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentPermissionSetWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentPermissionSetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentPermissionSetWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentPermissionSetApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentPermissionSetRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentPermissionSetBooleans(ctx context.Context, incidentPermissionSetId string, params *ListIncidentPermissionSetBooleansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentPermissionSetBooleansRequest(c.Server, incidentPermissionSetId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentPermissionSetBooleanWithBody(ctx context.Context, incidentPermissionSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentPermissionSetBooleanRequestWithBody(c.Server, incidentPermissionSetId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentPermissionSetBooleanWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentPermissionSetId string, body CreateIncidentPermissionSetBooleanApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentPermissionSetBooleanRequestWithApplicationVndAPIPlusJSONBody(c.Server, incidentPermissionSetId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentPermissionSetResources(ctx context.Context, incidentPermissionSetId string, params *ListIncidentPermissionSetResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentPermissionSetResourcesRequest(c.Server, incidentPermissionSetId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentPermissionSetResourceWithBody(ctx context.Context, incidentPermissionSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentPermissionSetResourceRequestWithBody(c.Server, incidentPermissionSetId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentPermissionSetResourceWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentPermissionSetId string, body CreateIncidentPermissionSetResourceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentPermissionSetResourceRequestWithApplicationVndAPIPlusJSONBody(c.Server, incidentPermissionSetId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentRetrospectiveStep(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRetrospectiveStepRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentRetrospectiveStepWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRetrospectiveStepRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentRetrospectiveStepWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentRetrospectiveStepApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRetrospectiveStepRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentRoleTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRoleTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentRoleTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRoleTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentRoleTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRoleTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentRoleTaskWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentRoleTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRoleTaskRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentRoles(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentRoleWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateIncidentRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRoleRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRoleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentRoleWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRoleRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentRoleTasks(ctx context.Context, incidentRoleId string, params *ListIncidentRoleTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentRoleTasksRequest(c.Server, incidentRoleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentRoleTaskWithBody(ctx context.Context, incidentRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRoleTaskRequestWithBody(c.Server, incidentRoleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentRoleTaskWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentRoleId string, body CreateIncidentRoleTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRoleTaskRequestWithApplicationVndAPIPlusJSONBody(c.Server, incidentRoleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentSubStatus(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentSubStatusRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentSubStatus(ctx context.Context, id string, params *GetIncidentSubStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentSubStatusRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentSubStatusWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentSubStatusRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentSubStatusWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentSubStatusApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentSubStatusRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentTypes(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentTypeWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateIncidentTypeApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentTypeRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentTypeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentTypeWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentTypeApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentTypeRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncident(ctx context.Context, id string, params *GetIncidentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddSubscribersToIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddSubscribersToIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddSubscribersToIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body AddSubscribersToIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddSubscribersToIncidentRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignUserToIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignUserToIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignUserToIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body AssignUserToIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignUserToIncidentRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body CancelIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelIncidentRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarkAsDuplicateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarkAsDuplicateIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarkAsDuplicateIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body MarkAsDuplicateIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarkAsDuplicateIncidentRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TriageIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTriageIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TriageIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body TriageIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTriageIncidentRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MitigateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMitigateIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MitigateIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body MitigateIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMitigateIncidentRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveSubscribersToIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveSubscribersToIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveSubscribersToIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body RemoveSubscribersToIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveSubscribersToIncidentRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolveIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResolveIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolveIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body ResolveIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResolveIncidentRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestartIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestartIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestartIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body RestartIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestartIncidentRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveAssignedUserFromIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveAssignedUserFromIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveAssignedUserFromIncidentWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body RemoveAssignedUserFromIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveAssignedUserFromIncidentRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentActionItems(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentActionItemsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentActionItemWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentActionItemRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentActionItemWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentId string, body CreateIncidentActionItemApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentActionItemRequestWithApplicationVndAPIPlusJSONBody(c.Server, incidentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentAlerts(ctx context.Context, incidentId string, params *ListIncidentAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentAlertsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachAlertWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachAlertRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachAlertWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentId string, body AttachAlertApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachAlertRequestWithApplicationVndAPIPlusJSONBody(c.Server, incidentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentCustomFieldSelections(ctx context.Context, incidentId string, params *ListIncidentCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentCustomFieldSelectionsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentCustomFieldSelectionWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentCustomFieldSelectionRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentCustomFieldSelectionWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentId string, body CreateIncidentCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentCustomFieldSelectionRequestWithApplicationVndAPIPlusJSONBody(c.Server, incidentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentEvents(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentEventsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentEventWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentEventRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentEventWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentId string, body CreateIncidentEventApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentEventRequestWithApplicationVndAPIPlusJSONBody(c.Server, incidentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentFeedbacks(ctx context.Context, incidentId string, params *ListIncidentFeedbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentFeedbacksRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentFeedbackWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentFeedbackRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentFeedbackWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentId string, body CreateIncidentFeedbackApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentFeedbackRequestWithApplicationVndAPIPlusJSONBody(c.Server, incidentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentFormFieldSelections(ctx context.Context, incidentId string, params *ListIncidentFormFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentFormFieldSelectionsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentFormFieldSelectionWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentFormFieldSelectionRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentFormFieldSelectionWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentId string, body CreateIncidentFormFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentFormFieldSelectionRequestWithApplicationVndAPIPlusJSONBody(c.Server, incidentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentStatusPages(ctx context.Context, incidentId string, params *ListIncidentStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentStatusPagesRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentStatusPageWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentStatusPageRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentStatusPageWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentId string, body CreateIncidentStatusPageApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentStatusPageRequestWithApplicationVndAPIPlusJSONBody(c.Server, incidentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentSubStatuses(ctx context.Context, incidentId string, params *ListIncidentSubStatusesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentSubStatusesRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentSubStatusWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentSubStatusRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentSubStatusWithApplicationVndAPIPlusJSONBody(ctx context.Context, incidentId string, body CreateIncidentSubStatusApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentSubStatusRequestWithApplicationVndAPIPlusJSONBody(c.Server, incidentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIpRanges(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIpRangesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListLiveCallRouters(ctx context.Context, params *ListLiveCallRoutersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListLiveCallRoutersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLiveCallRouterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLiveCallRouterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLiveCallRouterWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateLiveCallRouterApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLiveCallRouterRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GeneratePhoneNumberLiveCallRouter(ctx context.Context, params *GeneratePhoneNumberLiveCallRouterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGeneratePhoneNumberLiveCallRouterRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLiveCallRouter(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLiveCallRouterRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLiveCallRouter(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLiveCallRouterRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLiveCallRouterWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateLiveCallRouterRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLiveCallRouterWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateLiveCallRouterApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateLiveCallRouterRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserNotificationRule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserNotificationRuleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserNotificationRule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserNotificationRuleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserNotificationRuleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserNotificationRuleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserNotificationRuleWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateUserNotificationRuleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserNotificationRuleRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOnCallRoles(ctx context.Context, params *ListOnCallRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOnCallRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOnCallRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOnCallRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOnCallRoleWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateOnCallRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOnCallRoleRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOnCallRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOnCallRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOnCallRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOnCallRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOnCallRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOnCallRoleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOnCallRoleWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateOnCallRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOnCallRoleRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOnCallShadow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOnCallShadowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOnCallShadow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOnCallShadowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOnCallShadowWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOnCallShadowRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOnCallShadowWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateOnCallShadowApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOnCallShadowRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOverrideShift(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOverrideShiftRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOverrideShift(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOverrideShiftRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOverrideShiftWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOverrideShiftRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOverrideShiftWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateOverrideShiftApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOverrideShiftRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaybookTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaybookTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlaybookTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookTaskWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdatePlaybookTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlaybookTaskRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaybooks(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlaybooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaybookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreatePlaybookApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaybookRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaybookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaybook(ctx context.Context, id string, params *GetPlaybookParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaybookRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlaybookRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdatePlaybookApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlaybookRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaybookTasks(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlaybookTasksRequest(c.Server, playbookId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookTaskWithBody(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaybookTaskRequestWithBody(c.Server, playbookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookTaskWithApplicationVndAPIPlusJSONBody(ctx context.Context, playbookId string, body CreatePlaybookTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaybookTaskRequestWithApplicationVndAPIPlusJSONBody(c.Server, playbookId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPostmortemTemplates(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPostmortemTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePostmortemTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePostmortemTemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePostmortemTemplateWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreatePostmortemTemplateApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePostmortemTemplateRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePostmortemTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostmortemTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePostmortemTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePostmortemTemplateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePostmortemTemplateWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdatePostmortemTemplateApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePostmortemTemplateRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentPostMortems(ctx context.Context, params *ListIncidentPostMortemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentPostMortemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentPostmortem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentPostmortemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentPostmortemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentPostmortemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentPostmortemWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentPostmortemApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentPostmortemRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPulses(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPulsesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePulseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePulseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePulseWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreatePulseApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePulseRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPulse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPulseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePulseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePulseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePulseWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdatePulseApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePulseRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRetrospectiveConfigurations(ctx context.Context, params *ListRetrospectiveConfigurationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRetrospectiveConfigurationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRetrospectiveConfiguration(ctx context.Context, id string, params *GetRetrospectiveConfigurationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRetrospectiveConfigurationRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRetrospectiveConfigurationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRetrospectiveConfigurationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRetrospectiveConfigurationWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateRetrospectiveConfigurationApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRetrospectiveConfigurationRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRetrospectiveProcessGroupStep(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRetrospectiveProcessGroupStepRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRetrospectiveProcessGroupStep(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRetrospectiveProcessGroupStepRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRetrospectiveProcessGroupStepWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRetrospectiveProcessGroupStepRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRetrospectiveProcessGroupStepWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateRetrospectiveProcessGroupStepApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRetrospectiveProcessGroupStepRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRetrospectiveProcessGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRetrospectiveProcessGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRetrospectiveProcessGroup(ctx context.Context, id string, params *GetRetrospectiveProcessGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRetrospectiveProcessGroupRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRetrospectiveProcessGroupWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRetrospectiveProcessGroupRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRetrospectiveProcessGroupWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateRetrospectiveProcessGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRetrospectiveProcessGroupRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRetrospectiveProcessGroupSteps(ctx context.Context, retrospectiveProcessGroupId string, params *ListRetrospectiveProcessGroupStepsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRetrospectiveProcessGroupStepsRequest(c.Server, retrospectiveProcessGroupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRetrospectiveProcessGroupStepWithBody(ctx context.Context, retrospectiveProcessGroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRetrospectiveProcessGroupStepRequestWithBody(c.Server, retrospectiveProcessGroupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRetrospectiveProcessGroupStepWithApplicationVndAPIPlusJSONBody(ctx context.Context, retrospectiveProcessGroupId string, body CreateRetrospectiveProcessGroupStepApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRetrospectiveProcessGroupStepRequestWithApplicationVndAPIPlusJSONBody(c.Server, retrospectiveProcessGroupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRetrospectiveProcesses(ctx context.Context, params *ListRetrospectiveProcessesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRetrospectiveProcessesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRetrospectiveProcessWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRetrospectiveProcessRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRetrospectiveProcessWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateRetrospectiveProcessApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRetrospectiveProcessRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRetrospectiveProcess(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRetrospectiveProcessRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRetrospectiveProcess(ctx context.Context, id string, params *GetRetrospectiveProcessParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRetrospectiveProcessRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRetrospectiveProcessWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRetrospectiveProcessRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRetrospectiveProcessWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateRetrospectiveProcessApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRetrospectiveProcessRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRetrospectiveProcessGroups(ctx context.Context, retrospectiveProcessId string, params *ListRetrospectiveProcessGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRetrospectiveProcessGroupsRequest(c.Server, retrospectiveProcessId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRetrospectiveProcessGroupWithBody(ctx context.Context, retrospectiveProcessId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRetrospectiveProcessGroupRequestWithBody(c.Server, retrospectiveProcessId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRetrospectiveProcessGroupWithApplicationVndAPIPlusJSONBody(ctx context.Context, retrospectiveProcessId string, body CreateRetrospectiveProcessGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRetrospectiveProcessGroupRequestWithApplicationVndAPIPlusJSONBody(c.Server, retrospectiveProcessId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRetrospectiveSteps(ctx context.Context, retrospectiveProcessId string, params *ListRetrospectiveStepsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRetrospectiveStepsRequest(c.Server, retrospectiveProcessId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRetrospectiveStepWithBody(ctx context.Context, retrospectiveProcessId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRetrospectiveStepRequestWithBody(c.Server, retrospectiveProcessId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRetrospectiveStepWithApplicationVndAPIPlusJSONBody(ctx context.Context, retrospectiveProcessId string, body CreateRetrospectiveStepApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRetrospectiveStepRequestWithApplicationVndAPIPlusJSONBody(c.Server, retrospectiveProcessId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRetrospectiveStep(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRetrospectiveStepRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRetrospectiveStep(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRetrospectiveStepRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRetrospectiveStepWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRetrospectiveStepRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRetrospectiveStepWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateRetrospectiveStepApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRetrospectiveStepRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRoles(ctx context.Context, params *ListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRoleWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteScheduleRotationActiveDay(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteScheduleRotationActiveDayRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScheduleRotationActiveDay(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScheduleRotationActiveDayRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateScheduleRotationActiveDayWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateScheduleRotationActiveDayRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateScheduleRotationActiveDayWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateScheduleRotationActiveDayApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateScheduleRotationActiveDayRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteScheduleRotationUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteScheduleRotationUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScheduleRotationUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScheduleRotationUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateScheduleRotationUserWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateScheduleRotationUserRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateScheduleRotationUserWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateScheduleRotationUserApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateScheduleRotationUserRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteScheduleRotation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteScheduleRotationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScheduleRotation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScheduleRotationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateScheduleRotationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateScheduleRotationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateScheduleRotationWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateScheduleRotationApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateScheduleRotationRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListScheduleRotationActiveDays(ctx context.Context, scheduleRotationId string, params *ListScheduleRotationActiveDaysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListScheduleRotationActiveDaysRequest(c.Server, scheduleRotationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateScheduleRotationActiveDayWithBody(ctx context.Context, scheduleRotationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateScheduleRotationActiveDayRequestWithBody(c.Server, scheduleRotationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateScheduleRotationActiveDayWithApplicationVndAPIPlusJSONBody(ctx context.Context, scheduleRotationId string, body CreateScheduleRotationActiveDayApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateScheduleRotationActiveDayRequestWithApplicationVndAPIPlusJSONBody(c.Server, scheduleRotationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListScheduleRotationUsers(ctx context.Context, scheduleRotationId string, params *ListScheduleRotationUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListScheduleRotationUsersRequest(c.Server, scheduleRotationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateScheduleRotationUserWithBody(ctx context.Context, scheduleRotationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateScheduleRotationUserRequestWithBody(c.Server, scheduleRotationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateScheduleRotationUserWithApplicationVndAPIPlusJSONBody(ctx context.Context, scheduleRotationId string, body CreateScheduleRotationUserApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateScheduleRotationUserRequestWithApplicationVndAPIPlusJSONBody(c.Server, scheduleRotationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSchedules(ctx context.Context, params *ListSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSchedulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateScheduleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateScheduleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateScheduleWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateScheduleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateScheduleRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteScheduleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScheduleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateScheduleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateScheduleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateScheduleWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateScheduleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateScheduleRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScheduleShifts(ctx context.Context, id string, params *GetScheduleShiftsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScheduleShiftsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOnCallShadows(ctx context.Context, scheduleId string, params *ListOnCallShadowsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOnCallShadowsRequest(c.Server, scheduleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOnCallShadowWithBody(ctx context.Context, scheduleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOnCallShadowRequestWithBody(c.Server, scheduleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOnCallShadowWithApplicationVndAPIPlusJSONBody(ctx context.Context, scheduleId string, body CreateOnCallShadowApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOnCallShadowRequestWithApplicationVndAPIPlusJSONBody(c.Server, scheduleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOverrideShifts(ctx context.Context, scheduleId string, params *ListOverrideShiftsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOverrideShiftsRequest(c.Server, scheduleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOverrideShiftWithBody(ctx context.Context, scheduleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOverrideShiftRequestWithBody(c.Server, scheduleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOverrideShiftWithApplicationVndAPIPlusJSONBody(ctx context.Context, scheduleId string, body CreateOverrideShiftApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOverrideShiftRequestWithApplicationVndAPIPlusJSONBody(c.Server, scheduleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListScheduleRotations(ctx context.Context, scheduleId string, params *ListScheduleRotationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListScheduleRotationsRequest(c.Server, scheduleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateScheduleRotationWithBody(ctx context.Context, scheduleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateScheduleRotationRequestWithBody(c.Server, scheduleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateScheduleRotationWithApplicationVndAPIPlusJSONBody(ctx context.Context, scheduleId string, body CreateScheduleRotationApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateScheduleRotationRequestWithApplicationVndAPIPlusJSONBody(c.Server, scheduleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSecrets(ctx context.Context, params *ListSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSecretsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSecretWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSecretRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSecretWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateSecretApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSecretRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSecret(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSecretRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecret(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecretRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSecretWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSecretRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSecretWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateSecretApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSecretRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServices(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateServiceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateServiceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceIncidentsChart(ctx context.Context, id string, params *GetServiceIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceIncidentsChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceUptimeChart(ctx context.Context, id string, params *GetServiceUptimeChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceUptimeChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSeverities(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSeveritiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSeverityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSeverityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSeverityWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateSeverityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSeverityRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSeverityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeverityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSeverityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSeverityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSeverityWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateSeverityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSeverityRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListShifts(ctx context.Context, params *ListShiftsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListShiftsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentStatusPages(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentStatusPagesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentStatusPageRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentStatusPageWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateIncidentStatusPageApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentStatusPageRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListStatusPages(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListStatusPagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStatusPageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStatusPageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStatusPageWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateStatusPageApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStatusPageRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStatusPageRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStatusPageWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateStatusPageApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStatusPageRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListStatusPageTemplates(ctx context.Context, statusPageId string, params *ListStatusPageTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListStatusPageTemplatesRequest(c.Server, statusPageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStatusPageTemplateWithBody(ctx context.Context, statusPageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStatusPageTemplateRequestWithBody(c.Server, statusPageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStatusPageTemplateWithApplicationVndAPIPlusJSONBody(ctx context.Context, statusPageId string, body CreateStatusPageTemplateApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStatusPageTemplateRequestWithApplicationVndAPIPlusJSONBody(c.Server, statusPageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSubStatuses(ctx context.Context, params *ListSubStatusesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSubStatusesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSubStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSubStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSubStatusWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateSubStatusApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSubStatusRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSubStatus(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSubStatusRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubStatus(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubStatusRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSubStatusWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSubStatusRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSubStatusWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateSubStatusApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSubStatusRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTeams(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTeamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateTeamApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateTeamApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamIncidentsChart(ctx context.Context, id string, params *GetTeamIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamIncidentsChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStatusPageTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStatusPageTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusPageTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusPageTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStatusPageTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStatusPageTemplateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStatusPageTemplateWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateStatusPageTemplateApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStatusPageTemplateRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsers(ctx context.Context, params *ListUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCurrentUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, id string, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUserNotificationRules(ctx context.Context, userId string, params *ListUserNotificationRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserNotificationRulesRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserNotificationRuleWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserNotificationRuleRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserNotificationRuleWithApplicationVndAPIPlusJSONBody(ctx context.Context, userId string, body CreateUserNotificationRuleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserNotificationRuleRequestWithApplicationVndAPIPlusJSONBody(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhooksDelivery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebhooksDeliveryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeliverWebhooksDelivery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeliverWebhooksDeliveryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWebhooksEndpoints(ctx context.Context, params *ListWebhooksEndpointsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWebhooksEndpointsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhooksEndpointWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWebhooksEndpointRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhooksEndpointWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateWebhooksEndpointApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWebhooksEndpointRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWebhooksDeliveries(ctx context.Context, endpointId string, params *ListWebhooksDeliveriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWebhooksDeliveriesRequest(c.Server, endpointId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWebhooksEndpoint(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWebhooksEndpointRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhooksEndpoint(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebhooksEndpointRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWebhooksEndpointWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWebhooksEndpointRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWebhooksEndpointWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateWebhooksEndpointApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWebhooksEndpointRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflowCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowCustomFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowCustomFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowCustomFieldSelectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowCustomFieldSelectionWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateWorkflowCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowCustomFieldSelectionRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflowFormFieldCondition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowFormFieldConditionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowFormFieldCondition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowFormFieldConditionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowFormFieldConditionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowFormFieldConditionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowFormFieldConditionWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateWorkflowFormFieldConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowFormFieldConditionRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflowGroups(ctx context.Context, params *ListWorkflowGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowGroupWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateWorkflowGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowGroupRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflowGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowGroupWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowGroupRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowGroupWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateWorkflowGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowGroupRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflowTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowTaskWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateWorkflowTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowTaskRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflows(ctx context.Context, params *ListWorkflowsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowWithApplicationVndAPIPlusJSONBody(ctx context.Context, body CreateWorkflowApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflow(ctx context.Context, id string, params *GetWorkflowParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body UpdateWorkflowApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflowCustomFieldSelections(ctx context.Context, workflowId string, params *ListWorkflowCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowCustomFieldSelectionsRequest(c.Server, workflowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowCustomFieldSelectionWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowCustomFieldSelectionRequestWithBody(c.Server, workflowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowCustomFieldSelectionWithApplicationVndAPIPlusJSONBody(ctx context.Context, workflowId string, body CreateWorkflowCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowCustomFieldSelectionRequestWithApplicationVndAPIPlusJSONBody(c.Server, workflowId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflowFormFieldConditions(ctx context.Context, workflowId string, params *ListWorkflowFormFieldConditionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowFormFieldConditionsRequest(c.Server, workflowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowFormFieldConditionWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowFormFieldConditionRequestWithBody(c.Server, workflowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowFormFieldConditionWithApplicationVndAPIPlusJSONBody(ctx context.Context, workflowId string, body CreateWorkflowFormFieldConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowFormFieldConditionRequestWithApplicationVndAPIPlusJSONBody(c.Server, workflowId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflowRuns(ctx context.Context, workflowId string, params *ListWorkflowRunsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowRunsRequest(c.Server, workflowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowRunWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowRunRequestWithBody(c.Server, workflowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowRunWithApplicationVndAPIPlusJSONBody(ctx context.Context, workflowId string, body CreateWorkflowRunApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowRunRequestWithApplicationVndAPIPlusJSONBody(c.Server, workflowId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflowTasks(ctx context.Context, workflowId string, params *ListWorkflowTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowTasksRequest(c.Server, workflowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowTaskWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowTaskRequestWithBody(c.Server, workflowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowTaskWithApplicationVndAPIPlusJSONBody(ctx context.Context, workflowId string, body CreateWorkflowTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowTaskRequestWithApplicationVndAPIPlusJSONBody(c.Server, workflowId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListAllIncidentActionItemsRequest generates requests for ListAllIncidentActionItems
func NewListAllIncidentActionItemsRequest(server string, params *ListAllIncidentActionItemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterKind != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[kind]", runtime.ParamLocationQuery, *params.FilterKind); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterPriority != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[priority]", runtime.ParamLocationQuery, *params.FilterPriority); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[status]", runtime.ParamLocationQuery, *params.FilterStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterIncidentStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[incident_status]", runtime.ParamLocationQuery, *params.FilterIncidentStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterIncidentCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[incident_created_at][gt]", runtime.ParamLocationQuery, *params.FilterIncidentCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterIncidentCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[incident_created_at][gte]", runtime.ParamLocationQuery, *params.FilterIncidentCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterIncidentCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[incident_created_at][lt]", runtime.ParamLocationQuery, *params.FilterIncidentCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterIncidentCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[incident_created_at][lte]", runtime.ParamLocationQuery, *params.FilterIncidentCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDueDateGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[due_date][gt]", runtime.ParamLocationQuery, *params.FilterDueDateGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDueDateGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[due_date][gte]", runtime.ParamLocationQuery, *params.FilterDueDateGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDueDateLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[due_date][lt]", runtime.ParamLocationQuery, *params.FilterDueDateLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDueDateLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[due_date][lte]", runtime.ParamLocationQuery, *params.FilterDueDateLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIncidentActionItemRequest generates requests for DeleteIncidentActionItem
func NewDeleteIncidentActionItemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentActionItemsRequest generates requests for GetIncidentActionItems
func NewGetIncidentActionItemsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentActionItemRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateIncidentActionItem builder with application/vnd.api+json body
func NewUpdateIncidentActionItemRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateIncidentActionItemApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIncidentActionItemRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateIncidentActionItemRequestWithBody generates requests for UpdateIncidentActionItem with any type of body
func NewUpdateIncidentActionItemRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAlertGroupsRequest generates requests for ListAlertGroups
func NewListAlertGroupsRequest(server string, params *ListAlertGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert_groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAlertGroupRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateAlertGroup builder with application/vnd.api+json body
func NewCreateAlertGroupRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateAlertGroupApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAlertGroupRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateAlertGroupRequestWithBody generates requests for CreateAlertGroup with any type of body
func NewCreateAlertGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert_groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAlertGroupRequest generates requests for DeleteAlertGroup
func NewDeleteAlertGroupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertGroupRequest generates requests for GetAlertGroup
func NewGetAlertGroupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAlertGroupRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateAlertGroup builder with application/vnd.api+json body
func NewUpdateAlertGroupRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateAlertGroupApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAlertGroupRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateAlertGroupRequestWithBody generates requests for UpdateAlertGroup with any type of body
func NewUpdateAlertGroupRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAlertSourcesRequest generates requests for ListAlertSources
func NewListAlertSourcesRequest(server string, params *ListAlertSourcesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert_sources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStatuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[statuses]", runtime.ParamLocationQuery, *params.FilterStatuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSourceTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[source_types]", runtime.ParamLocationQuery, *params.FilterSourceTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAlertSourceRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateAlertSource builder with application/vnd.api+json body
func NewCreateAlertSourceRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateAlertSourceApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAlertSourceRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateAlertSourceRequestWithBody generates requests for CreateAlertSource with any type of body
func NewCreateAlertSourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert_sources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAlertSourceRequest generates requests for DeleteAlertSource
func NewDeleteAlertSourceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert_sources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertSourceRequest generates requests for GetAlertSource
func NewGetAlertSourceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert_sources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAlertSourceRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateAlertSource builder with application/vnd.api+json body
func NewUpdateAlertSourceRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateAlertSourceApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAlertSourceRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateAlertSourceRequestWithBody generates requests for UpdateAlertSource with any type of body
func NewUpdateAlertSourceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert_sources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAlertUrgenciesRequest generates requests for ListAlertUrgencies
func NewListAlertUrgenciesRequest(server string, params *ListAlertUrgenciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert_urgencies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAlertUrgencyRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateAlertUrgency builder with application/vnd.api+json body
func NewCreateAlertUrgencyRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateAlertUrgencyApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAlertUrgencyRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateAlertUrgencyRequestWithBody generates requests for CreateAlertUrgency with any type of body
func NewCreateAlertUrgencyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert_urgencies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAlertUrgencyRequest generates requests for DeleteAlertUrgency
func NewDeleteAlertUrgencyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert_urgencies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertUrgencyRequest generates requests for GetAlertUrgency
func NewGetAlertUrgencyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert_urgencies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAlertUrgencyRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateAlertUrgency builder with application/vnd.api+json body
func NewUpdateAlertUrgencyRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateAlertUrgencyApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAlertUrgencyRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateAlertUrgencyRequestWithBody generates requests for UpdateAlertUrgency with any type of body
func NewUpdateAlertUrgencyRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert_urgencies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAlertsRequest generates requests for ListAlerts
func NewListAlertsRequest(server string, params *ListAlertsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAlertRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateAlert builder with application/vnd.api+json body
func NewCreateAlertRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateAlertApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAlertRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateAlertRequestWithBody generates requests for CreateAlert with any type of body
func NewCreateAlertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertRequest generates requests for GetAlert
func NewGetAlertRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcknowledgeAlertRequest generates requests for AcknowledgeAlert
func NewAcknowledgeAlertRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts/%s/acknowledge", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResolveAlertRequestWithApplicationVndAPIPlusJSONBody calls the generic ResolveAlert builder with application/vnd.api+json body
func NewResolveAlertRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body ResolveAlertApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResolveAlertRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewResolveAlertRequestWithBody generates requests for ResolveAlert with any type of body
func NewResolveAlertRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts/%s/resolve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAuditsRequest generates requests for ListAudits
func NewListAuditsRequest(server string, params *ListAuditsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/audits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[user_id]", runtime.ParamLocationQuery, *params.FilterUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterApiKeyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[api_key_id]", runtime.ParamLocationQuery, *params.FilterApiKeyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[source]", runtime.ParamLocationQuery, *params.FilterSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterItemType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[item_type]", runtime.ParamLocationQuery, *params.FilterItemType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAuthorizationsRequest generates requests for ListAuthorizations
func NewListAuthorizationsRequest(server string, params *ListAuthorizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/authorizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterAuthorizableId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[authorizable_id]", runtime.ParamLocationQuery, *params.FilterAuthorizableId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterAuthorizableType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[authorizable_type]", runtime.ParamLocationQuery, *params.FilterAuthorizableType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterGranteeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[grantee_id]", runtime.ParamLocationQuery, *params.FilterGranteeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterGranteeType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[grantee_type]", runtime.ParamLocationQuery, *params.FilterGranteeType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAuthorizationRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateAuthorization builder with application/vnd.api+json body
func NewCreateAuthorizationRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateAuthorizationApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAuthorizationRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateAuthorizationRequestWithBody generates requests for CreateAuthorization with any type of body
func NewCreateAuthorizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/authorizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAuthorizationRequest generates requests for DeleteAuthorization
func NewDeleteAuthorizationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/authorizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthorizationRequest generates requests for GetAuthorization
func NewGetAuthorizationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/authorizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAuthorizationRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateAuthorization builder with application/vnd.api+json body
func NewUpdateAuthorizationRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateAuthorizationApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAuthorizationRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateAuthorizationRequestWithBody generates requests for UpdateAuthorization with any type of body
func NewUpdateAuthorizationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/authorizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCatalogEntityPropertiesRequest generates requests for ListCatalogEntityProperties
func NewListCatalogEntityPropertiesRequest(server string, catalogEntityId string, params *ListCatalogEntityPropertiesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "catalog_entity_id", runtime.ParamLocationPath, catalogEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog_entities/%s/properties", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCatalogFieldId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[catalog_field_id]", runtime.ParamLocationQuery, *params.FilterCatalogFieldId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[key]", runtime.ParamLocationQuery, *params.FilterKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCatalogEntityPropertyRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateCatalogEntityProperty builder with application/vnd.api+json body
func NewCreateCatalogEntityPropertyRequestWithApplicationVndAPIPlusJSONBody(server string, catalogEntityId string, body CreateCatalogEntityPropertyApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCatalogEntityPropertyRequestWithBody(server, catalogEntityId, "application/vnd.api+json", bodyReader)
}

// NewCreateCatalogEntityPropertyRequestWithBody generates requests for CreateCatalogEntityProperty with any type of body
func NewCreateCatalogEntityPropertyRequestWithBody(server string, catalogEntityId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "catalog_entity_id", runtime.ParamLocationPath, catalogEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog_entities/%s/properties", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCatalogEntityRequest generates requests for DeleteCatalogEntity
func NewDeleteCatalogEntityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog_entities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCatalogEntityRequest generates requests for GetCatalogEntity
func NewGetCatalogEntityRequest(server string, id string, params *GetCatalogEntityParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog_entities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCatalogEntityRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateCatalogEntity builder with application/vnd.api+json body
func NewUpdateCatalogEntityRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateCatalogEntityApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCatalogEntityRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateCatalogEntityRequestWithBody generates requests for UpdateCatalogEntity with any type of body
func NewUpdateCatalogEntityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog_entities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCatalogEntityPropertyRequest generates requests for DeleteCatalogEntityProperty
func NewDeleteCatalogEntityPropertyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog_entity_properties/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCatalogEntityPropertyRequest generates requests for GetCatalogEntityProperty
func NewGetCatalogEntityPropertyRequest(server string, id string, params *GetCatalogEntityPropertyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog_entity_properties/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCatalogEntityPropertyRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateCatalogEntityProperty builder with application/vnd.api+json body
func NewUpdateCatalogEntityPropertyRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateCatalogEntityPropertyApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCatalogEntityPropertyRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateCatalogEntityPropertyRequestWithBody generates requests for UpdateCatalogEntityProperty with any type of body
func NewUpdateCatalogEntityPropertyRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog_entity_properties/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCatalogFieldRequest generates requests for DeleteCatalogField
func NewDeleteCatalogFieldRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCatalogFieldRequest generates requests for GetCatalogField
func NewGetCatalogFieldRequest(server string, id string, params *GetCatalogFieldParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCatalogFieldRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateCatalogField builder with application/vnd.api+json body
func NewUpdateCatalogFieldRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateCatalogFieldApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCatalogFieldRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateCatalogFieldRequestWithBody generates requests for UpdateCatalogField with any type of body
func NewUpdateCatalogFieldRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalog_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCatalogsRequest generates requests for ListCatalogs
func NewListCatalogsRequest(server string, params *ListCatalogsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalogs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCatalogRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateCatalog builder with application/vnd.api+json body
func NewCreateCatalogRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateCatalogApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCatalogRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateCatalogRequestWithBody generates requests for CreateCatalog with any type of body
func NewCreateCatalogRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalogs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCatalogEntitiesRequest generates requests for ListCatalogEntities
func NewListCatalogEntitiesRequest(server string, catalogId string, params *ListCatalogEntitiesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "catalog_id", runtime.ParamLocationPath, catalogId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalogs/%s/entities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCatalogEntityRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateCatalogEntity builder with application/vnd.api+json body
func NewCreateCatalogEntityRequestWithApplicationVndAPIPlusJSONBody(server string, catalogId string, body CreateCatalogEntityApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCatalogEntityRequestWithBody(server, catalogId, "application/vnd.api+json", bodyReader)
}

// NewCreateCatalogEntityRequestWithBody generates requests for CreateCatalogEntity with any type of body
func NewCreateCatalogEntityRequestWithBody(server string, catalogId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "catalog_id", runtime.ParamLocationPath, catalogId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalogs/%s/entities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCatalogFieldsRequest generates requests for ListCatalogFields
func NewListCatalogFieldsRequest(server string, catalogId string, params *ListCatalogFieldsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "catalog_id", runtime.ParamLocationPath, catalogId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalogs/%s/fields", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterKind != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[kind]", runtime.ParamLocationQuery, *params.FilterKind); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCatalogFieldRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateCatalogField builder with application/vnd.api+json body
func NewCreateCatalogFieldRequestWithApplicationVndAPIPlusJSONBody(server string, catalogId string, body CreateCatalogFieldApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCatalogFieldRequestWithBody(server, catalogId, "application/vnd.api+json", bodyReader)
}

// NewCreateCatalogFieldRequestWithBody generates requests for CreateCatalogField with any type of body
func NewCreateCatalogFieldRequestWithBody(server string, catalogId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "catalog_id", runtime.ParamLocationPath, catalogId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalogs/%s/fields", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCatalogRequest generates requests for DeleteCatalog
func NewDeleteCatalogRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalogs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCatalogRequest generates requests for GetCatalog
func NewGetCatalogRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalogs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCatalogRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateCatalog builder with application/vnd.api+json body
func NewUpdateCatalogRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateCatalogApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCatalogRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateCatalogRequestWithBody generates requests for UpdateCatalog with any type of body
func NewUpdateCatalogRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/catalogs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCausesRequest generates requests for ListCauses
func NewListCausesRequest(server string, params *ListCausesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCauseRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateCause builder with application/vnd.api+json body
func NewCreateCauseRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateCauseApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCauseRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateCauseRequestWithBody generates requests for CreateCause with any type of body
func NewCreateCauseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCauseRequest generates requests for DeleteCause
func NewDeleteCauseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCauseRequest generates requests for GetCause
func NewGetCauseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCauseRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateCause builder with application/vnd.api+json body
func NewUpdateCauseRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateCauseApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCauseRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateCauseRequestWithBody generates requests for UpdateCause with any type of body
func NewUpdateCauseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomFieldOptionRequest generates requests for DeleteCustomFieldOption
func NewDeleteCustomFieldOptionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomFieldOptionRequest generates requests for GetCustomFieldOption
func NewGetCustomFieldOptionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCustomFieldOptionRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateCustomFieldOption builder with application/vnd.api+json body
func NewUpdateCustomFieldOptionRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateCustomFieldOptionApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCustomFieldOptionRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateCustomFieldOptionRequestWithBody generates requests for UpdateCustomFieldOption with any type of body
func NewUpdateCustomFieldOptionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCustomFieldsRequest generates requests for ListCustomFields
func NewListCustomFieldsRequest(server string, params *ListCustomFieldsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterLabel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[label]", runtime.ParamLocationQuery, *params.FilterLabel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterKind != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[kind]", runtime.ParamLocationQuery, *params.FilterKind); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterEnabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[enabled]", runtime.ParamLocationQuery, *params.FilterEnabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCustomFieldRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateCustomField builder with application/vnd.api+json body
func NewCreateCustomFieldRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateCustomFieldApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCustomFieldRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateCustomFieldRequestWithBody generates requests for CreateCustomField with any type of body
func NewCreateCustomFieldRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCustomFieldOptionsRequest generates requests for ListCustomFieldOptions
func NewListCustomFieldOptionsRequest(server string, customFieldId string, params *ListCustomFieldOptionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_field_id", runtime.ParamLocationPath, customFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s/options", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterValue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[value]", runtime.ParamLocationQuery, *params.FilterValue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterColor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[color]", runtime.ParamLocationQuery, *params.FilterColor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCustomFieldOptionRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateCustomFieldOption builder with application/vnd.api+json body
func NewCreateCustomFieldOptionRequestWithApplicationVndAPIPlusJSONBody(server string, customFieldId string, body CreateCustomFieldOptionApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCustomFieldOptionRequestWithBody(server, customFieldId, "application/vnd.api+json", bodyReader)
}

// NewCreateCustomFieldOptionRequestWithBody generates requests for CreateCustomFieldOption with any type of body
func NewCreateCustomFieldOptionRequestWithBody(server string, customFieldId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_field_id", runtime.ParamLocationPath, customFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s/options", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomFieldRequest generates requests for DeleteCustomField
func NewDeleteCustomFieldRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomFieldRequest generates requests for GetCustomField
func NewGetCustomFieldRequest(server string, id string, params *GetCustomFieldParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCustomFieldRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateCustomField builder with application/vnd.api+json body
func NewUpdateCustomFieldRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateCustomFieldApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCustomFieldRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateCustomFieldRequestWithBody generates requests for UpdateCustomField with any type of body
func NewUpdateCustomFieldRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCustomFormsRequest generates requests for ListCustomForms
func NewListCustomFormsRequest(server string, params *ListCustomFormsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_forms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCommand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[command]", runtime.ParamLocationQuery, *params.FilterCommand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCustomFormRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateCustomForm builder with application/vnd.api+json body
func NewCreateCustomFormRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateCustomFormApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCustomFormRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateCustomFormRequestWithBody generates requests for CreateCustomForm with any type of body
func NewCreateCustomFormRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_forms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomFormRequest generates requests for DeleteCustomForm
func NewDeleteCustomFormRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_forms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomFormRequest generates requests for GetCustomForm
func NewGetCustomFormRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_forms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCustomFormRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateCustomForm builder with application/vnd.api+json body
func NewUpdateCustomFormRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateCustomFormApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCustomFormRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateCustomFormRequestWithBody generates requests for UpdateCustomForm with any type of body
func NewUpdateCustomFormRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_forms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDashboardPanelRequest generates requests for DeleteDashboardPanel
func NewDeleteDashboardPanelRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboard_panels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardPanelRequest generates requests for GetDashboardPanel
func NewGetDashboardPanelRequest(server string, id string, params *GetDashboardPanelParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboard_panels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Range != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "range", runtime.ParamLocationQuery, *params.Range); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimeZone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_zone", runtime.ParamLocationQuery, *params.TimeZone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDashboardPanelRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateDashboardPanel builder with application/vnd.api+json body
func NewUpdateDashboardPanelRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateDashboardPanelApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDashboardPanelRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateDashboardPanelRequestWithBody generates requests for UpdateDashboardPanel with any type of body
func NewUpdateDashboardPanelRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboard_panels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDuplicateDashboardPanelRequest generates requests for DuplicateDashboardPanel
func NewDuplicateDashboardPanelRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboard_panels/%s/duplicate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDashboardsRequest generates requests for ListDashboards
func NewListDashboardsRequest(server string, params *ListDashboardsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDashboardRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateDashboard builder with application/vnd.api+json body
func NewCreateDashboardRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateDashboardApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDashboardRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateDashboardRequestWithBody generates requests for CreateDashboard with any type of body
func NewCreateDashboardRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDashboardPanelsRequest generates requests for ListDashboardPanels
func NewListDashboardPanelsRequest(server string, dashboardId string, params *ListDashboardPanelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboard_id", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s/panels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDashboardPanelRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateDashboardPanel builder with application/vnd.api+json body
func NewCreateDashboardPanelRequestWithApplicationVndAPIPlusJSONBody(server string, dashboardId string, body CreateDashboardPanelApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDashboardPanelRequestWithBody(server, dashboardId, "application/vnd.api+json", bodyReader)
}

// NewCreateDashboardPanelRequestWithBody generates requests for CreateDashboardPanel with any type of body
func NewCreateDashboardPanelRequestWithBody(server string, dashboardId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboard_id", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s/panels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDashboardRequest generates requests for DeleteDashboard
func NewDeleteDashboardRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardRequest generates requests for GetDashboard
func NewGetDashboardRequest(server string, id string, params *GetDashboardParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDashboardRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateDashboard builder with application/vnd.api+json body
func NewUpdateDashboardRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateDashboardApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDashboardRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateDashboardRequestWithBody generates requests for UpdateDashboard with any type of body
func NewUpdateDashboardRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDuplicateDashboardRequest generates requests for DuplicateDashboard
func NewDuplicateDashboardRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s/duplicate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetDefaultDashboardRequest generates requests for SetDefaultDashboard
func NewSetDefaultDashboardRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s/set_default", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListEnvironmentsRequest generates requests for ListEnvironments
func NewListEnvironmentsRequest(server string, params *ListEnvironmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterColor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[color]", runtime.ParamLocationQuery, *params.FilterColor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateEnvironment builder with application/vnd.api+json body
func NewCreateEnvironmentRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateEnvironmentApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEnvironmentRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateEnvironmentRequestWithBody generates requests for CreateEnvironment with any type of body
func NewCreateEnvironmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentRequest generates requests for DeleteEnvironment
func NewDeleteEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEnvironmentRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateEnvironment builder with application/vnd.api+json body
func NewUpdateEnvironmentRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateEnvironmentApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEnvironmentRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateEnvironmentRequestWithBody generates requests for UpdateEnvironment with any type of body
func NewUpdateEnvironmentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEscalationLevelRequest generates requests for DeleteEscalationLevel
func NewDeleteEscalationLevelRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/escalation_levels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEscalationLevelRequest generates requests for GetEscalationLevel
func NewGetEscalationLevelRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/escalation_levels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEscalationLevelRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateEscalationLevel builder with application/vnd.api+json body
func NewUpdateEscalationLevelRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateEscalationLevelApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEscalationLevelRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateEscalationLevelRequestWithBody generates requests for UpdateEscalationLevel with any type of body
func NewUpdateEscalationLevelRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/escalation_levels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListEscalationLevelsPathsRequest generates requests for ListEscalationLevelsPaths
func NewListEscalationLevelsPathsRequest(server string, escalationPathId string, params *ListEscalationLevelsPathsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "escalation_path_id", runtime.ParamLocationPath, escalationPathId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/escalation_paths/%s/escalation_levels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEscalationLevelPathsRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateEscalationLevelPaths builder with application/vnd.api+json body
func NewCreateEscalationLevelPathsRequestWithApplicationVndAPIPlusJSONBody(server string, escalationPathId string, body CreateEscalationLevelPathsApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEscalationLevelPathsRequestWithBody(server, escalationPathId, "application/vnd.api+json", bodyReader)
}

// NewCreateEscalationLevelPathsRequestWithBody generates requests for CreateEscalationLevelPaths with any type of body
func NewCreateEscalationLevelPathsRequestWithBody(server string, escalationPathId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "escalation_path_id", runtime.ParamLocationPath, escalationPathId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/escalation_paths/%s/escalation_levels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEscalationPathRequest generates requests for DeleteEscalationPath
func NewDeleteEscalationPathRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/escalation_paths/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEscalationPathRequest generates requests for GetEscalationPath
func NewGetEscalationPathRequest(server string, id string, params *GetEscalationPathParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/escalation_paths/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEscalationPathRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateEscalationPath builder with application/vnd.api+json body
func NewUpdateEscalationPathRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateEscalationPathApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEscalationPathRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateEscalationPathRequestWithBody generates requests for UpdateEscalationPath with any type of body
func NewUpdateEscalationPathRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/escalation_paths/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListEscalationPoliciesRequest generates requests for ListEscalationPolicies
func NewListEscalationPoliciesRequest(server string, params *ListEscalationPoliciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/escalation_policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEscalationPolicyRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateEscalationPolicy builder with application/vnd.api+json body
func NewCreateEscalationPolicyRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateEscalationPolicyApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEscalationPolicyRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateEscalationPolicyRequestWithBody generates requests for CreateEscalationPolicy with any type of body
func NewCreateEscalationPolicyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/escalation_policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListEscalationLevelsPoliciesRequest generates requests for ListEscalationLevelsPolicies
func NewListEscalationLevelsPoliciesRequest(server string, escalationPolicyId string, params *ListEscalationLevelsPoliciesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "escalation_policy_id", runtime.ParamLocationPath, escalationPolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/escalation_policies/%s/escalation_levels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEscalationLevelPoliciesRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateEscalationLevelPolicies builder with application/vnd.api+json body
func NewCreateEscalationLevelPoliciesRequestWithApplicationVndAPIPlusJSONBody(server string, escalationPolicyId string, body CreateEscalationLevelPoliciesApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEscalationLevelPoliciesRequestWithBody(server, escalationPolicyId, "application/vnd.api+json", bodyReader)
}

// NewCreateEscalationLevelPoliciesRequestWithBody generates requests for CreateEscalationLevelPolicies with any type of body
func NewCreateEscalationLevelPoliciesRequestWithBody(server string, escalationPolicyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "escalation_policy_id", runtime.ParamLocationPath, escalationPolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/escalation_policies/%s/escalation_levels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListEscalationPathsRequest generates requests for ListEscalationPaths
func NewListEscalationPathsRequest(server string, escalationPolicyId string, params *ListEscalationPathsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "escalation_policy_id", runtime.ParamLocationPath, escalationPolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/escalation_policies/%s/escalation_paths", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEscalationPathRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateEscalationPath builder with application/vnd.api+json body
func NewCreateEscalationPathRequestWithApplicationVndAPIPlusJSONBody(server string, escalationPolicyId string, body CreateEscalationPathApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEscalationPathRequestWithBody(server, escalationPolicyId, "application/vnd.api+json", bodyReader)
}

// NewCreateEscalationPathRequestWithBody generates requests for CreateEscalationPath with any type of body
func NewCreateEscalationPathRequestWithBody(server string, escalationPolicyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "escalation_policy_id", runtime.ParamLocationPath, escalationPolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/escalation_policies/%s/escalation_paths", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEscalationPolicyRequest generates requests for DeleteEscalationPolicy
func NewDeleteEscalationPolicyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/escalation_policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEscalationPolicyRequest generates requests for GetEscalationPolicy
func NewGetEscalationPolicyRequest(server string, id string, params *GetEscalationPolicyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/escalation_policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEscalationPolicyRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateEscalationPolicy builder with application/vnd.api+json body
func NewUpdateEscalationPolicyRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateEscalationPolicyApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEscalationPolicyRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateEscalationPolicyRequestWithBody generates requests for UpdateEscalationPolicy with any type of body
func NewUpdateEscalationPolicyRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/escalation_policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentEventRequest generates requests for DeleteIncidentEvent
func NewDeleteIncidentEventRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentEventsRequest generates requests for GetIncidentEvents
func NewGetIncidentEventsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentEventRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateIncidentEvent builder with application/vnd.api+json body
func NewUpdateIncidentEventRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateIncidentEventApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIncidentEventRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateIncidentEventRequestWithBody generates requests for UpdateIncidentEvent with any type of body
func NewUpdateIncidentEventRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentEventFunctionalitiesRequest generates requests for ListIncidentEventFunctionalities
func NewListIncidentEventFunctionalitiesRequest(server string, incidentEventId string, params *ListIncidentEventFunctionalitiesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_event_id", runtime.ParamLocationPath, incidentEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s/functionalities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentEventFunctionalityRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateIncidentEventFunctionality builder with application/vnd.api+json body
func NewCreateIncidentEventFunctionalityRequestWithApplicationVndAPIPlusJSONBody(server string, incidentEventId string, body CreateIncidentEventFunctionalityApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIncidentEventFunctionalityRequestWithBody(server, incidentEventId, "application/vnd.api+json", bodyReader)
}

// NewCreateIncidentEventFunctionalityRequestWithBody generates requests for CreateIncidentEventFunctionality with any type of body
func NewCreateIncidentEventFunctionalityRequestWithBody(server string, incidentEventId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_event_id", runtime.ParamLocationPath, incidentEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s/functionalities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentEventServicesRequest generates requests for ListIncidentEventServices
func NewListIncidentEventServicesRequest(server string, incidentEventId string, params *ListIncidentEventServicesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_event_id", runtime.ParamLocationPath, incidentEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s/services", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentEventServiceRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateIncidentEventService builder with application/vnd.api+json body
func NewCreateIncidentEventServiceRequestWithApplicationVndAPIPlusJSONBody(server string, incidentEventId string, body CreateIncidentEventServiceApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIncidentEventServiceRequestWithBody(server, incidentEventId, "application/vnd.api+json", bodyReader)
}

// NewCreateIncidentEventServiceRequestWithBody generates requests for CreateIncidentEventService with any type of body
func NewCreateIncidentEventServiceRequestWithBody(server string, incidentEventId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_event_id", runtime.ParamLocationPath, incidentEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s/services", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIncidentFeedbacksRequest generates requests for GetIncidentFeedbacks
func NewGetIncidentFeedbacksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/feedbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentFeedbackRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateIncidentFeedback builder with application/vnd.api+json body
func NewUpdateIncidentFeedbackRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateIncidentFeedbackApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIncidentFeedbackRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateIncidentFeedbackRequestWithBody generates requests for UpdateIncidentFeedback with any type of body
func NewUpdateIncidentFeedbackRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/feedbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFormFieldOptionRequest generates requests for DeleteFormFieldOption
func NewDeleteFormFieldOptionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFormFieldOptionRequest generates requests for GetFormFieldOption
func NewGetFormFieldOptionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFormFieldOptionRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateFormFieldOption builder with application/vnd.api+json body
func NewUpdateFormFieldOptionRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateFormFieldOptionApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFormFieldOptionRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateFormFieldOptionRequestWithBody generates requests for UpdateFormFieldOption with any type of body
func NewUpdateFormFieldOptionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFormFieldPlacementConditionRequest generates requests for DeleteFormFieldPlacementCondition
func NewDeleteFormFieldPlacementConditionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_field_placement_conditions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFormFieldPlacementConditionRequest generates requests for GetFormFieldPlacementCondition
func NewGetFormFieldPlacementConditionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_field_placement_conditions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFormFieldPlacementConditionRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateFormFieldPlacementCondition builder with application/vnd.api+json body
func NewUpdateFormFieldPlacementConditionRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateFormFieldPlacementConditionApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFormFieldPlacementConditionRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateFormFieldPlacementConditionRequestWithBody generates requests for UpdateFormFieldPlacementCondition with any type of body
func NewUpdateFormFieldPlacementConditionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_field_placement_conditions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFormFieldPlacementConditionsRequest generates requests for ListFormFieldPlacementConditions
func NewListFormFieldPlacementConditionsRequest(server string, formFieldPlacementId string, params *ListFormFieldPlacementConditionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "form_field_placement_id", runtime.ParamLocationPath, formFieldPlacementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_field_placements/%s/conditions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterFormFieldId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[form_field_id]", runtime.ParamLocationQuery, *params.FilterFormFieldId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFormFieldPlacementConditionRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateFormFieldPlacementCondition builder with application/vnd.api+json body
func NewCreateFormFieldPlacementConditionRequestWithApplicationVndAPIPlusJSONBody(server string, formFieldPlacementId string, body CreateFormFieldPlacementConditionApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFormFieldPlacementConditionRequestWithBody(server, formFieldPlacementId, "application/vnd.api+json", bodyReader)
}

// NewCreateFormFieldPlacementConditionRequestWithBody generates requests for CreateFormFieldPlacementCondition with any type of body
func NewCreateFormFieldPlacementConditionRequestWithBody(server string, formFieldPlacementId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "form_field_placement_id", runtime.ParamLocationPath, formFieldPlacementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_field_placements/%s/conditions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFormFieldPlacementRequest generates requests for DeleteFormFieldPlacement
func NewDeleteFormFieldPlacementRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_field_placements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFormFieldPlacementRequest generates requests for GetFormFieldPlacement
func NewGetFormFieldPlacementRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_field_placements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFormFieldPlacementRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateFormFieldPlacement builder with application/vnd.api+json body
func NewUpdateFormFieldPlacementRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateFormFieldPlacementApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFormFieldPlacementRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateFormFieldPlacementRequestWithBody generates requests for UpdateFormFieldPlacement with any type of body
func NewUpdateFormFieldPlacementRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_field_placements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFormFieldPositionRequest generates requests for DeleteFormFieldPosition
func NewDeleteFormFieldPositionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_field_positions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFormFieldPositionRequest generates requests for GetFormFieldPosition
func NewGetFormFieldPositionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_field_positions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFormFieldPositionRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateFormFieldPosition builder with application/vnd.api+json body
func NewUpdateFormFieldPositionRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateFormFieldPositionApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFormFieldPositionRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateFormFieldPositionRequestWithBody generates requests for UpdateFormFieldPosition with any type of body
func NewUpdateFormFieldPositionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_field_positions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFormFieldsRequest generates requests for ListFormFields
func NewListFormFieldsRequest(server string, params *ListFormFieldsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterKind != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[kind]", runtime.ParamLocationQuery, *params.FilterKind); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterEnabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[enabled]", runtime.ParamLocationQuery, *params.FilterEnabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFormFieldRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateFormField builder with application/vnd.api+json body
func NewCreateFormFieldRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateFormFieldApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFormFieldRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateFormFieldRequestWithBody generates requests for CreateFormField with any type of body
func NewCreateFormFieldRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFormFieldOptionsRequest generates requests for ListFormFieldOptions
func NewListFormFieldOptionsRequest(server string, formFieldId string, params *ListFormFieldOptionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "form_field_id", runtime.ParamLocationPath, formFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_fields/%s/options", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterValue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[value]", runtime.ParamLocationQuery, *params.FilterValue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterColor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[color]", runtime.ParamLocationQuery, *params.FilterColor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFormFieldOptionRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateFormFieldOption builder with application/vnd.api+json body
func NewCreateFormFieldOptionRequestWithApplicationVndAPIPlusJSONBody(server string, formFieldId string, body CreateFormFieldOptionApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFormFieldOptionRequestWithBody(server, formFieldId, "application/vnd.api+json", bodyReader)
}

// NewCreateFormFieldOptionRequestWithBody generates requests for CreateFormFieldOption with any type of body
func NewCreateFormFieldOptionRequestWithBody(server string, formFieldId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "form_field_id", runtime.ParamLocationPath, formFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_fields/%s/options", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFormFieldPlacementsRequest generates requests for ListFormFieldPlacements
func NewListFormFieldPlacementsRequest(server string, formFieldId string, params *ListFormFieldPlacementsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "form_field_id", runtime.ParamLocationPath, formFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_fields/%s/placements", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterFormFieldId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[form_field_id]", runtime.ParamLocationQuery, *params.FilterFormFieldId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFormFieldPlacementRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateFormFieldPlacement builder with application/vnd.api+json body
func NewCreateFormFieldPlacementRequestWithApplicationVndAPIPlusJSONBody(server string, formFieldId string, body CreateFormFieldPlacementApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFormFieldPlacementRequestWithBody(server, formFieldId, "application/vnd.api+json", bodyReader)
}

// NewCreateFormFieldPlacementRequestWithBody generates requests for CreateFormFieldPlacement with any type of body
func NewCreateFormFieldPlacementRequestWithBody(server string, formFieldId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "form_field_id", runtime.ParamLocationPath, formFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_fields/%s/placements", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFormFieldPositionsRequest generates requests for ListFormFieldPositions
func NewListFormFieldPositionsRequest(server string, formFieldId string, params *ListFormFieldPositionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "form_field_id", runtime.ParamLocationPath, formFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_fields/%s/positions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterForm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[form]", runtime.ParamLocationQuery, *params.FilterForm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFormFieldPositionRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateFormFieldPosition builder with application/vnd.api+json body
func NewCreateFormFieldPositionRequestWithApplicationVndAPIPlusJSONBody(server string, formFieldId string, body CreateFormFieldPositionApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFormFieldPositionRequestWithBody(server, formFieldId, "application/vnd.api+json", bodyReader)
}

// NewCreateFormFieldPositionRequestWithBody generates requests for CreateFormFieldPosition with any type of body
func NewCreateFormFieldPositionRequestWithBody(server string, formFieldId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "form_field_id", runtime.ParamLocationPath, formFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_fields/%s/positions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFormFieldRequest generates requests for DeleteFormField
func NewDeleteFormFieldRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFormFieldRequest generates requests for GetFormField
func NewGetFormFieldRequest(server string, id string, params *GetFormFieldParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFormFieldRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateFormField builder with application/vnd.api+json body
func NewUpdateFormFieldRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateFormFieldApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFormFieldRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateFormFieldRequestWithBody generates requests for UpdateFormField with any type of body
func NewUpdateFormFieldRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFormSetConditionRequest generates requests for DeleteFormSetCondition
func NewDeleteFormSetConditionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_set_conditions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFormSetConditionRequest generates requests for GetFormSetCondition
func NewGetFormSetConditionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_set_conditions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFormSetConditionRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateFormSetCondition builder with application/vnd.api+json body
func NewUpdateFormSetConditionRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateFormSetConditionApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFormSetConditionRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateFormSetConditionRequestWithBody generates requests for UpdateFormSetCondition with any type of body
func NewUpdateFormSetConditionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_set_conditions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFormSetsRequest generates requests for ListFormSets
func NewListFormSetsRequest(server string, params *ListFormSetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_sets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterIsDefault != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[is_default]", runtime.ParamLocationQuery, *params.FilterIsDefault); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFormSetRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateFormSet builder with application/vnd.api+json body
func NewCreateFormSetRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateFormSetApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFormSetRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateFormSetRequestWithBody generates requests for CreateFormSet with any type of body
func NewCreateFormSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_sets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFormSetConditionsRequest generates requests for ListFormSetConditions
func NewListFormSetConditionsRequest(server string, formSetId string, params *ListFormSetConditionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "form_set_id", runtime.ParamLocationPath, formSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_sets/%s/conditions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterFormFieldId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[form_field_id]", runtime.ParamLocationQuery, *params.FilterFormFieldId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFormSetConditionRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateFormSetCondition builder with application/vnd.api+json body
func NewCreateFormSetConditionRequestWithApplicationVndAPIPlusJSONBody(server string, formSetId string, body CreateFormSetConditionApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFormSetConditionRequestWithBody(server, formSetId, "application/vnd.api+json", bodyReader)
}

// NewCreateFormSetConditionRequestWithBody generates requests for CreateFormSetCondition with any type of body
func NewCreateFormSetConditionRequestWithBody(server string, formSetId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "form_set_id", runtime.ParamLocationPath, formSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_sets/%s/conditions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFormSetRequest generates requests for DeleteFormSet
func NewDeleteFormSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_sets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFormSetRequest generates requests for GetFormSet
func NewGetFormSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_sets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFormSetRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateFormSet builder with application/vnd.api+json body
func NewUpdateFormSetRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateFormSetApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFormSetRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateFormSetRequestWithBody generates requests for UpdateFormSet with any type of body
func NewUpdateFormSetRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_sets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFunctionalitiesRequest generates requests for ListFunctionalities
func NewListFunctionalitiesRequest(server string, params *ListFunctionalitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterBackstageId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[backstage_id]", runtime.ParamLocationQuery, *params.FilterBackstageId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterExternalId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[external_id]", runtime.ParamLocationQuery, *params.FilterExternalId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFunctionalityRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateFunctionality builder with application/vnd.api+json body
func NewCreateFunctionalityRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateFunctionalityApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFunctionalityRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateFunctionalityRequestWithBody generates requests for CreateFunctionality with any type of body
func NewCreateFunctionalityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFunctionalityRequest generates requests for DeleteFunctionality
func NewDeleteFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionalityRequest generates requests for GetFunctionality
func NewGetFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFunctionalityRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateFunctionality builder with application/vnd.api+json body
func NewUpdateFunctionalityRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateFunctionalityApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFunctionalityRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateFunctionalityRequestWithBody generates requests for UpdateFunctionality with any type of body
func NewUpdateFunctionalityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFunctionalityIncidentsChartRequest generates requests for GetFunctionalityIncidentsChart
func NewGetFunctionalityIncidentsChartRequest(server string, id string, params *GetFunctionalityIncidentsChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s/incidents_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionalityUptimeChartRequest generates requests for GetFunctionalityUptimeChart
func NewGetFunctionalityUptimeChartRequest(server string, id string, params *GetFunctionalityUptimeChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s/uptime_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListHeartbeatsRequest generates requests for ListHeartbeats
func NewListHeartbeatsRequest(server string, params *ListHeartbeatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/heartbeats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHeartbeatRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateHeartbeat builder with application/vnd.api+json body
func NewCreateHeartbeatRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateHeartbeatApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHeartbeatRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateHeartbeatRequestWithBody generates requests for CreateHeartbeat with any type of body
func NewCreateHeartbeatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/heartbeats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPingHeartbeatRequest generates requests for PingHeartbeat
func NewPingHeartbeatRequest(server string, heartbeatId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "heartbeat_id", runtime.ParamLocationPath, heartbeatId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/heartbeats/%s/ping", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteHeartbeatRequest generates requests for DeleteHeartbeat
func NewDeleteHeartbeatRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/heartbeats/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHeartbeatRequest generates requests for GetHeartbeat
func NewGetHeartbeatRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/heartbeats/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateHeartbeatRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateHeartbeat builder with application/vnd.api+json body
func NewUpdateHeartbeatRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateHeartbeatApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateHeartbeatRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateHeartbeatRequestWithBody generates requests for UpdateHeartbeat with any type of body
func NewUpdateHeartbeatRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/heartbeats/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentCustomFieldSelectionRequest generates requests for DeleteIncidentCustomFieldSelection
func NewDeleteIncidentCustomFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentCustomFieldSelectionRequest generates requests for GetIncidentCustomFieldSelection
func NewGetIncidentCustomFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentCustomFieldSelectionRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateIncidentCustomFieldSelection builder with application/vnd.api+json body
func NewUpdateIncidentCustomFieldSelectionRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateIncidentCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIncidentCustomFieldSelectionRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateIncidentCustomFieldSelectionRequestWithBody generates requests for UpdateIncidentCustomFieldSelection with any type of body
func NewUpdateIncidentCustomFieldSelectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentEventFunctionalityRequest generates requests for DeleteIncidentEventFunctionality
func NewDeleteIncidentEventFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_event_functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentEventFunctionalitiesRequest generates requests for GetIncidentEventFunctionalities
func NewGetIncidentEventFunctionalitiesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_event_functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentEventFunctionalityRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateIncidentEventFunctionality builder with application/vnd.api+json body
func NewUpdateIncidentEventFunctionalityRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateIncidentEventFunctionalityApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIncidentEventFunctionalityRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateIncidentEventFunctionalityRequestWithBody generates requests for UpdateIncidentEventFunctionality with any type of body
func NewUpdateIncidentEventFunctionalityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_event_functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentEventServiceRequest generates requests for DeleteIncidentEventService
func NewDeleteIncidentEventServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_event_services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentEventServicesRequest generates requests for GetIncidentEventServices
func NewGetIncidentEventServicesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_event_services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentEventServiceRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateIncidentEventService builder with application/vnd.api+json body
func NewUpdateIncidentEventServiceRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateIncidentEventServiceApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIncidentEventServiceRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateIncidentEventServiceRequestWithBody generates requests for UpdateIncidentEventService with any type of body
func NewUpdateIncidentEventServiceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_event_services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentFormFieldSelectionRequest generates requests for DeleteIncidentFormFieldSelection
func NewDeleteIncidentFormFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_form_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentFormFieldSelectionRequest generates requests for GetIncidentFormFieldSelection
func NewGetIncidentFormFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_form_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentFormFieldSelectionRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateIncidentFormFieldSelection builder with application/vnd.api+json body
func NewUpdateIncidentFormFieldSelectionRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateIncidentFormFieldSelectionApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIncidentFormFieldSelectionRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateIncidentFormFieldSelectionRequestWithBody generates requests for UpdateIncidentFormFieldSelection with any type of body
func NewUpdateIncidentFormFieldSelectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_form_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentPermissionSetBooleanRequest generates requests for DeleteIncidentPermissionSetBoolean
func NewDeleteIncidentPermissionSetBooleanRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_set_booleans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentPermissionSetBooleanRequest generates requests for GetIncidentPermissionSetBoolean
func NewGetIncidentPermissionSetBooleanRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_set_booleans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentPermissionSetBooleanRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateIncidentPermissionSetBoolean builder with application/vnd.api+json body
func NewUpdateIncidentPermissionSetBooleanRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateIncidentPermissionSetBooleanApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIncidentPermissionSetBooleanRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateIncidentPermissionSetBooleanRequestWithBody generates requests for UpdateIncidentPermissionSetBoolean with any type of body
func NewUpdateIncidentPermissionSetBooleanRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_set_booleans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentPermissionSetResourceRequest generates requests for DeleteIncidentPermissionSetResource
func NewDeleteIncidentPermissionSetResourceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_set_resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentPermissionSetResourceRequest generates requests for GetIncidentPermissionSetResource
func NewGetIncidentPermissionSetResourceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_set_resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentPermissionSetResourceRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateIncidentPermissionSetResource builder with application/vnd.api+json body
func NewUpdateIncidentPermissionSetResourceRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateIncidentPermissionSetResourceApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIncidentPermissionSetResourceRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateIncidentPermissionSetResourceRequestWithBody generates requests for UpdateIncidentPermissionSetResource with any type of body
func NewUpdateIncidentPermissionSetResourceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_set_resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentPermissionSetsRequest generates requests for ListIncidentPermissionSets
func NewListIncidentPermissionSetsRequest(server string, params *ListIncidentPermissionSetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_sets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentPermissionSetRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateIncidentPermissionSet builder with application/vnd.api+json body
func NewCreateIncidentPermissionSetRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateIncidentPermissionSetApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIncidentPermissionSetRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateIncidentPermissionSetRequestWithBody generates requests for CreateIncidentPermissionSet with any type of body
func NewCreateIncidentPermissionSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_sets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentPermissionSetRequest generates requests for DeleteIncidentPermissionSet
func NewDeleteIncidentPermissionSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_sets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentPermissionSetRequest generates requests for GetIncidentPermissionSet
func NewGetIncidentPermissionSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_sets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentPermissionSetRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateIncidentPermissionSet builder with application/vnd.api+json body
func NewUpdateIncidentPermissionSetRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateIncidentPermissionSetApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIncidentPermissionSetRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateIncidentPermissionSetRequestWithBody generates requests for UpdateIncidentPermissionSet with any type of body
func NewUpdateIncidentPermissionSetRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_sets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentPermissionSetBooleansRequest generates requests for ListIncidentPermissionSetBooleans
func NewListIncidentPermissionSetBooleansRequest(server string, incidentPermissionSetId string, params *ListIncidentPermissionSetBooleansParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_permission_set_id", runtime.ParamLocationPath, incidentPermissionSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_sets/%s/booleans", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterKind != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[kind]", runtime.ParamLocationQuery, *params.FilterKind); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentPermissionSetBooleanRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateIncidentPermissionSetBoolean builder with application/vnd.api+json body
func NewCreateIncidentPermissionSetBooleanRequestWithApplicationVndAPIPlusJSONBody(server string, incidentPermissionSetId string, body CreateIncidentPermissionSetBooleanApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIncidentPermissionSetBooleanRequestWithBody(server, incidentPermissionSetId, "application/vnd.api+json", bodyReader)
}

// NewCreateIncidentPermissionSetBooleanRequestWithBody generates requests for CreateIncidentPermissionSetBoolean with any type of body
func NewCreateIncidentPermissionSetBooleanRequestWithBody(server string, incidentPermissionSetId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_permission_set_id", runtime.ParamLocationPath, incidentPermissionSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_sets/%s/booleans", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentPermissionSetResourcesRequest generates requests for ListIncidentPermissionSetResources
func NewListIncidentPermissionSetResourcesRequest(server string, incidentPermissionSetId string, params *ListIncidentPermissionSetResourcesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_permission_set_id", runtime.ParamLocationPath, incidentPermissionSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_sets/%s/resources", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterKind != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[kind]", runtime.ParamLocationQuery, *params.FilterKind); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentPermissionSetResourceRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateIncidentPermissionSetResource builder with application/vnd.api+json body
func NewCreateIncidentPermissionSetResourceRequestWithApplicationVndAPIPlusJSONBody(server string, incidentPermissionSetId string, body CreateIncidentPermissionSetResourceApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIncidentPermissionSetResourceRequestWithBody(server, incidentPermissionSetId, "application/vnd.api+json", bodyReader)
}

// NewCreateIncidentPermissionSetResourceRequestWithBody generates requests for CreateIncidentPermissionSetResource with any type of body
func NewCreateIncidentPermissionSetResourceRequestWithBody(server string, incidentPermissionSetId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_permission_set_id", runtime.ParamLocationPath, incidentPermissionSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_sets/%s/resources", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIncidentRetrospectiveStepRequest generates requests for GetIncidentRetrospectiveStep
func NewGetIncidentRetrospectiveStepRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_retrospective_steps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRetrospectiveStepRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateIncidentRetrospectiveStep builder with application/vnd.api+json body
func NewUpdateIncidentRetrospectiveStepRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateIncidentRetrospectiveStepApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIncidentRetrospectiveStepRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateIncidentRetrospectiveStepRequestWithBody generates requests for UpdateIncidentRetrospectiveStep with any type of body
func NewUpdateIncidentRetrospectiveStepRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_retrospective_steps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRoleTaskRequest generates requests for DeleteIncidentRoleTask
func NewDeleteIncidentRoleTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_role_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRoleTaskRequest generates requests for GetIncidentRoleTask
func NewGetIncidentRoleTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_role_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRoleTaskRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateIncidentRoleTask builder with application/vnd.api+json body
func NewUpdateIncidentRoleTaskRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateIncidentRoleTaskApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIncidentRoleTaskRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateIncidentRoleTaskRequestWithBody generates requests for UpdateIncidentRoleTask with any type of body
func NewUpdateIncidentRoleTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_role_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentRolesRequest generates requests for ListIncidentRoles
func NewListIncidentRolesRequest(server string, params *ListIncidentRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterEnabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[enabled]", runtime.ParamLocationQuery, *params.FilterEnabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRoleRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateIncidentRole builder with application/vnd.api+json body
func NewCreateIncidentRoleRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateIncidentRoleApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIncidentRoleRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateIncidentRoleRequestWithBody generates requests for CreateIncidentRole with any type of body
func NewCreateIncidentRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRoleRequest generates requests for DeleteIncidentRole
func NewDeleteIncidentRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRoleRequest generates requests for GetIncidentRole
func NewGetIncidentRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRoleRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateIncidentRole builder with application/vnd.api+json body
func NewUpdateIncidentRoleRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateIncidentRoleApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIncidentRoleRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateIncidentRoleRequestWithBody generates requests for UpdateIncidentRole with any type of body
func NewUpdateIncidentRoleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentRoleTasksRequest generates requests for ListIncidentRoleTasks
func NewListIncidentRoleTasksRequest(server string, incidentRoleId string, params *ListIncidentRoleTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_role_id", runtime.ParamLocationPath, incidentRoleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s/incident_role_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRoleTaskRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateIncidentRoleTask builder with application/vnd.api+json body
func NewCreateIncidentRoleTaskRequestWithApplicationVndAPIPlusJSONBody(server string, incidentRoleId string, body CreateIncidentRoleTaskApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIncidentRoleTaskRequestWithBody(server, incidentRoleId, "application/vnd.api+json", bodyReader)
}

// NewCreateIncidentRoleTaskRequestWithBody generates requests for CreateIncidentRoleTask with any type of body
func NewCreateIncidentRoleTaskRequestWithBody(server string, incidentRoleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_role_id", runtime.ParamLocationPath, incidentRoleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s/incident_role_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentSubStatusRequest generates requests for DeleteIncidentSubStatus
func NewDeleteIncidentSubStatusRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_sub_statuses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentSubStatusRequest generates requests for GetIncidentSubStatus
func NewGetIncidentSubStatusRequest(server string, id string, params *GetIncidentSubStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_sub_statuses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentSubStatusRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateIncidentSubStatus builder with application/vnd.api+json body
func NewUpdateIncidentSubStatusRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateIncidentSubStatusApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIncidentSubStatusRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateIncidentSubStatusRequestWithBody generates requests for UpdateIncidentSubStatus with any type of body
func NewUpdateIncidentSubStatusRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_sub_statuses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentTypesRequest generates requests for ListIncidentTypes
func NewListIncidentTypesRequest(server string, params *ListIncidentTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterColor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[color]", runtime.ParamLocationQuery, *params.FilterColor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentTypeRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateIncidentType builder with application/vnd.api+json body
func NewCreateIncidentTypeRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateIncidentTypeApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIncidentTypeRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateIncidentTypeRequestWithBody generates requests for CreateIncidentType with any type of body
func NewCreateIncidentTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentTypeRequest generates requests for DeleteIncidentType
func NewDeleteIncidentTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentTypeRequest generates requests for GetIncidentType
func NewGetIncidentTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentTypeRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateIncidentType builder with application/vnd.api+json body
func NewUpdateIncidentTypeRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateIncidentTypeApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIncidentTypeRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateIncidentTypeRequestWithBody generates requests for UpdateIncidentType with any type of body
func NewUpdateIncidentTypeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentsRequest generates requests for ListIncidents
func NewListIncidentsRequest(server string, params *ListIncidentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterKind != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[kind]", runtime.ParamLocationQuery, *params.FilterKind); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[status]", runtime.ParamLocationQuery, *params.FilterStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterPrivate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[private]", runtime.ParamLocationQuery, *params.FilterPrivate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[user_id]", runtime.ParamLocationQuery, *params.FilterUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSeverity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[severity]", runtime.ParamLocationQuery, *params.FilterSeverity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSeverityId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[severity_id]", runtime.ParamLocationQuery, *params.FilterSeverityId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterLabels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[labels]", runtime.ParamLocationQuery, *params.FilterLabels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[types]", runtime.ParamLocationQuery, *params.FilterTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterTypeIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[type_ids]", runtime.ParamLocationQuery, *params.FilterTypeIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterEnvironments != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[environments]", runtime.ParamLocationQuery, *params.FilterEnvironments); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterEnvironmentIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[environment_ids]", runtime.ParamLocationQuery, *params.FilterEnvironmentIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterFunctionalities != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[functionalities]", runtime.ParamLocationQuery, *params.FilterFunctionalities); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterFunctionalityIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[functionality_ids]", runtime.ParamLocationQuery, *params.FilterFunctionalityIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterServices != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[services]", runtime.ParamLocationQuery, *params.FilterServices); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterServiceIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[service_ids]", runtime.ParamLocationQuery, *params.FilterServiceIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterTeams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[teams]", runtime.ParamLocationQuery, *params.FilterTeams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterTeamIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[team_ids]", runtime.ParamLocationQuery, *params.FilterTeamIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCause != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[cause]", runtime.ParamLocationQuery, *params.FilterCause); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCauseIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[cause_ids]", runtime.ParamLocationQuery, *params.FilterCauseIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCustomFieldSelectedOptionIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[custom_field_selected_option_ids]", runtime.ParamLocationQuery, *params.FilterCustomFieldSelectedOptionIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterUpdatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[updated_at][gt]", runtime.ParamLocationQuery, *params.FilterUpdatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterUpdatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[updated_at][gte]", runtime.ParamLocationQuery, *params.FilterUpdatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterUpdatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[updated_at][lt]", runtime.ParamLocationQuery, *params.FilterUpdatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterUpdatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[updated_at][lte]", runtime.ParamLocationQuery, *params.FilterUpdatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStartedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][gt]", runtime.ParamLocationQuery, *params.FilterStartedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStartedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][gte]", runtime.ParamLocationQuery, *params.FilterStartedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStartedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][lt]", runtime.ParamLocationQuery, *params.FilterStartedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStartedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][lte]", runtime.ParamLocationQuery, *params.FilterStartedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDetectedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[detected_at][gt]", runtime.ParamLocationQuery, *params.FilterDetectedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDetectedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[detected_at][gte]", runtime.ParamLocationQuery, *params.FilterDetectedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDetectedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[detected_at][lt]", runtime.ParamLocationQuery, *params.FilterDetectedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDetectedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[detected_at][lte]", runtime.ParamLocationQuery, *params.FilterDetectedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterAcknowledgedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[acknowledged_at][gt]", runtime.ParamLocationQuery, *params.FilterAcknowledgedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterAcknowledgedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[acknowledged_at][gte]", runtime.ParamLocationQuery, *params.FilterAcknowledgedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterAcknowledgedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[acknowledged_at][lt]", runtime.ParamLocationQuery, *params.FilterAcknowledgedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterAcknowledgedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[acknowledged_at][lte]", runtime.ParamLocationQuery, *params.FilterAcknowledgedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterMitigatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[mitigated_at][gt]", runtime.ParamLocationQuery, *params.FilterMitigatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterMitigatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[mitigated_at][gte]", runtime.ParamLocationQuery, *params.FilterMitigatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterMitigatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[mitigated_at][lt]", runtime.ParamLocationQuery, *params.FilterMitigatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterMitigatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[mitigated_at][lte]", runtime.ParamLocationQuery, *params.FilterMitigatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterResolvedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[resolved_at][gt]", runtime.ParamLocationQuery, *params.FilterResolvedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterResolvedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[resolved_at][gte]", runtime.ParamLocationQuery, *params.FilterResolvedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterResolvedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[resolved_at][lt]", runtime.ParamLocationQuery, *params.FilterResolvedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterResolvedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[resolved_at][lte]", runtime.ParamLocationQuery, *params.FilterResolvedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterInTriageAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[in_triage_at][gt]", runtime.ParamLocationQuery, *params.FilterInTriageAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterInTriageAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[in_triage_at][gte]", runtime.ParamLocationQuery, *params.FilterInTriageAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterInTriageAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[in_triage_at][lt]", runtime.ParamLocationQuery, *params.FilterInTriageAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterInTriageAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[in_triage_at][lte]", runtime.ParamLocationQuery, *params.FilterInTriageAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateIncident builder with application/vnd.api+json body
func NewCreateIncidentRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateIncidentApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIncidentRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateIncidentRequestWithBody generates requests for CreateIncident with any type of body
func NewCreateIncidentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRequest generates requests for DeleteIncident
func NewDeleteIncidentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRequest generates requests for GetIncident
func NewGetIncidentRequest(server string, id string, params *GetIncidentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateIncident builder with application/vnd.api+json body
func NewUpdateIncidentRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateIncidentApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIncidentRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateIncidentRequestWithBody generates requests for UpdateIncident with any type of body
func NewUpdateIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddSubscribersToIncidentRequestWithApplicationVndAPIPlusJSONBody calls the generic AddSubscribersToIncident builder with application/vnd.api+json body
func NewAddSubscribersToIncidentRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body AddSubscribersToIncidentApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddSubscribersToIncidentRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewAddSubscribersToIncidentRequestWithBody generates requests for AddSubscribersToIncident with any type of body
func NewAddSubscribersToIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/add_subscribers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAssignUserToIncidentRequestWithApplicationVndAPIPlusJSONBody calls the generic AssignUserToIncident builder with application/vnd.api+json body
func NewAssignUserToIncidentRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body AssignUserToIncidentApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssignUserToIncidentRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewAssignUserToIncidentRequestWithBody generates requests for AssignUserToIncident with any type of body
func NewAssignUserToIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/assign_role_to_user", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelIncidentRequestWithApplicationVndAPIPlusJSONBody calls the generic CancelIncident builder with application/vnd.api+json body
func NewCancelIncidentRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body CancelIncidentApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCancelIncidentRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewCancelIncidentRequestWithBody generates requests for CancelIncident with any type of body
func NewCancelIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMarkAsDuplicateIncidentRequestWithApplicationVndAPIPlusJSONBody calls the generic MarkAsDuplicateIncident builder with application/vnd.api+json body
func NewMarkAsDuplicateIncidentRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body MarkAsDuplicateIncidentApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMarkAsDuplicateIncidentRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewMarkAsDuplicateIncidentRequestWithBody generates requests for MarkAsDuplicateIncident with any type of body
func NewMarkAsDuplicateIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/duplicate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTriageIncidentRequestWithApplicationVndAPIPlusJSONBody calls the generic TriageIncident builder with application/vnd.api+json body
func NewTriageIncidentRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body TriageIncidentApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTriageIncidentRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewTriageIncidentRequestWithBody generates requests for TriageIncident with any type of body
func NewTriageIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/in_triage", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMitigateIncidentRequestWithApplicationVndAPIPlusJSONBody calls the generic MitigateIncident builder with application/vnd.api+json body
func NewMitigateIncidentRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body MitigateIncidentApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMitigateIncidentRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewMitigateIncidentRequestWithBody generates requests for MitigateIncident with any type of body
func NewMitigateIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/mitigate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveSubscribersToIncidentRequestWithApplicationVndAPIPlusJSONBody calls the generic RemoveSubscribersToIncident builder with application/vnd.api+json body
func NewRemoveSubscribersToIncidentRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body RemoveSubscribersToIncidentApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveSubscribersToIncidentRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewRemoveSubscribersToIncidentRequestWithBody generates requests for RemoveSubscribersToIncident with any type of body
func NewRemoveSubscribersToIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/remove_subscribers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResolveIncidentRequestWithApplicationVndAPIPlusJSONBody calls the generic ResolveIncident builder with application/vnd.api+json body
func NewResolveIncidentRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body ResolveIncidentApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResolveIncidentRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewResolveIncidentRequestWithBody generates requests for ResolveIncident with any type of body
func NewResolveIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/resolve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRestartIncidentRequestWithApplicationVndAPIPlusJSONBody calls the generic RestartIncident builder with application/vnd.api+json body
func NewRestartIncidentRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body RestartIncidentApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRestartIncidentRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewRestartIncidentRequestWithBody generates requests for RestartIncident with any type of body
func NewRestartIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/restart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveAssignedUserFromIncidentRequestWithApplicationVndAPIPlusJSONBody calls the generic RemoveAssignedUserFromIncident builder with application/vnd.api+json body
func NewRemoveAssignedUserFromIncidentRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body RemoveAssignedUserFromIncidentApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveAssignedUserFromIncidentRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewRemoveAssignedUserFromIncidentRequestWithBody generates requests for RemoveAssignedUserFromIncident with any type of body
func NewRemoveAssignedUserFromIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/unassign_role_from_user", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentActionItemsRequest generates requests for ListIncidentActionItems
func NewListIncidentActionItemsRequest(server string, incidentId string, params *ListIncidentActionItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/action_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentActionItemRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateIncidentActionItem builder with application/vnd.api+json body
func NewCreateIncidentActionItemRequestWithApplicationVndAPIPlusJSONBody(server string, incidentId string, body CreateIncidentActionItemApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIncidentActionItemRequestWithBody(server, incidentId, "application/vnd.api+json", bodyReader)
}

// NewCreateIncidentActionItemRequestWithBody generates requests for CreateIncidentActionItem with any type of body
func NewCreateIncidentActionItemRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/action_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentAlertsRequest generates requests for ListIncidentAlerts
func NewListIncidentAlertsRequest(server string, incidentId string, params *ListIncidentAlertsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/alerts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[source]", runtime.ParamLocationQuery, *params.FilterSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterServices != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[services]", runtime.ParamLocationQuery, *params.FilterServices); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterEnvironments != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[environments]", runtime.ParamLocationQuery, *params.FilterEnvironments); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterGroups != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[groups]", runtime.ParamLocationQuery, *params.FilterGroups); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterLabels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[labels]", runtime.ParamLocationQuery, *params.FilterLabels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStartedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][gt]", runtime.ParamLocationQuery, *params.FilterStartedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStartedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][gte]", runtime.ParamLocationQuery, *params.FilterStartedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStartedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][lt]", runtime.ParamLocationQuery, *params.FilterStartedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStartedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][lte]", runtime.ParamLocationQuery, *params.FilterStartedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterEndedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[ended_at][gt]", runtime.ParamLocationQuery, *params.FilterEndedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterEndedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[ended_at][gte]", runtime.ParamLocationQuery, *params.FilterEndedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterEndedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[ended_at][lt]", runtime.ParamLocationQuery, *params.FilterEndedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterEndedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[ended_at][lte]", runtime.ParamLocationQuery, *params.FilterEndedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAttachAlertRequestWithApplicationVndAPIPlusJSONBody calls the generic AttachAlert builder with application/vnd.api+json body
func NewAttachAlertRequestWithApplicationVndAPIPlusJSONBody(server string, incidentId string, body AttachAlertApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAttachAlertRequestWithBody(server, incidentId, "application/vnd.api+json", bodyReader)
}

// NewAttachAlertRequestWithBody generates requests for AttachAlert with any type of body
func NewAttachAlertRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/alerts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentCustomFieldSelectionsRequest generates requests for ListIncidentCustomFieldSelections
func NewListIncidentCustomFieldSelectionsRequest(server string, incidentId string, params *ListIncidentCustomFieldSelectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/custom_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentCustomFieldSelectionRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateIncidentCustomFieldSelection builder with application/vnd.api+json body
func NewCreateIncidentCustomFieldSelectionRequestWithApplicationVndAPIPlusJSONBody(server string, incidentId string, body CreateIncidentCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIncidentCustomFieldSelectionRequestWithBody(server, incidentId, "application/vnd.api+json", bodyReader)
}

// NewCreateIncidentCustomFieldSelectionRequestWithBody generates requests for CreateIncidentCustomFieldSelection with any type of body
func NewCreateIncidentCustomFieldSelectionRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/custom_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentEventsRequest generates requests for ListIncidentEvents
func NewListIncidentEventsRequest(server string, incidentId string, params *ListIncidentEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentEventRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateIncidentEvent builder with application/vnd.api+json body
func NewCreateIncidentEventRequestWithApplicationVndAPIPlusJSONBody(server string, incidentId string, body CreateIncidentEventApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIncidentEventRequestWithBody(server, incidentId, "application/vnd.api+json", bodyReader)
}

// NewCreateIncidentEventRequestWithBody generates requests for CreateIncidentEvent with any type of body
func NewCreateIncidentEventRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentFeedbacksRequest generates requests for ListIncidentFeedbacks
func NewListIncidentFeedbacksRequest(server string, incidentId string, params *ListIncidentFeedbacksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/feedbacks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentFeedbackRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateIncidentFeedback builder with application/vnd.api+json body
func NewCreateIncidentFeedbackRequestWithApplicationVndAPIPlusJSONBody(server string, incidentId string, body CreateIncidentFeedbackApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIncidentFeedbackRequestWithBody(server, incidentId, "application/vnd.api+json", bodyReader)
}

// NewCreateIncidentFeedbackRequestWithBody generates requests for CreateIncidentFeedback with any type of body
func NewCreateIncidentFeedbackRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/feedbacks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentFormFieldSelectionsRequest generates requests for ListIncidentFormFieldSelections
func NewListIncidentFormFieldSelectionsRequest(server string, incidentId string, params *ListIncidentFormFieldSelectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/form_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentFormFieldSelectionRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateIncidentFormFieldSelection builder with application/vnd.api+json body
func NewCreateIncidentFormFieldSelectionRequestWithApplicationVndAPIPlusJSONBody(server string, incidentId string, body CreateIncidentFormFieldSelectionApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIncidentFormFieldSelectionRequestWithBody(server, incidentId, "application/vnd.api+json", bodyReader)
}

// NewCreateIncidentFormFieldSelectionRequestWithBody generates requests for CreateIncidentFormFieldSelection with any type of body
func NewCreateIncidentFormFieldSelectionRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/form_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentStatusPagesRequest generates requests for ListIncidentStatusPages
func NewListIncidentStatusPagesRequest(server string, incidentId string, params *ListIncidentStatusPagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/status-page-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentStatusPageRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateIncidentStatusPage builder with application/vnd.api+json body
func NewCreateIncidentStatusPageRequestWithApplicationVndAPIPlusJSONBody(server string, incidentId string, body CreateIncidentStatusPageApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIncidentStatusPageRequestWithBody(server, incidentId, "application/vnd.api+json", bodyReader)
}

// NewCreateIncidentStatusPageRequestWithBody generates requests for CreateIncidentStatusPage with any type of body
func NewCreateIncidentStatusPageRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/status-page-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentSubStatusesRequest generates requests for ListIncidentSubStatuses
func NewListIncidentSubStatusesRequest(server string, incidentId string, params *ListIncidentSubStatusesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/sub_statuses", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSubStatusId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[sub_status_id]", runtime.ParamLocationQuery, *params.FilterSubStatusId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterAssignedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[assigned_at][gt]", runtime.ParamLocationQuery, *params.FilterAssignedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterAssignedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[assigned_at][gte]", runtime.ParamLocationQuery, *params.FilterAssignedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterAssignedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[assigned_at][lt]", runtime.ParamLocationQuery, *params.FilterAssignedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterAssignedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[assigned_at][lte]", runtime.ParamLocationQuery, *params.FilterAssignedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentSubStatusRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateIncidentSubStatus builder with application/vnd.api+json body
func NewCreateIncidentSubStatusRequestWithApplicationVndAPIPlusJSONBody(server string, incidentId string, body CreateIncidentSubStatusApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIncidentSubStatusRequestWithBody(server, incidentId, "application/vnd.api+json", bodyReader)
}

// NewCreateIncidentSubStatusRequestWithBody generates requests for CreateIncidentSubStatus with any type of body
func NewCreateIncidentSubStatusRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/sub_statuses", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIpRangesRequest generates requests for GetIpRanges
func NewGetIpRangesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ip_ranges")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListLiveCallRoutersRequest generates requests for ListLiveCallRouters
func NewListLiveCallRoutersRequest(server string, params *ListLiveCallRoutersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/live_call_routers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateLiveCallRouterRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateLiveCallRouter builder with application/vnd.api+json body
func NewCreateLiveCallRouterRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateLiveCallRouterApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLiveCallRouterRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateLiveCallRouterRequestWithBody generates requests for CreateLiveCallRouter with any type of body
func NewCreateLiveCallRouterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/live_call_routers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGeneratePhoneNumberLiveCallRouterRequest generates requests for GeneratePhoneNumberLiveCallRouter
func NewGeneratePhoneNumberLiveCallRouterRequest(server string, params *GeneratePhoneNumberLiveCallRouterParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/live_call_routers/generate_phone_number")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country_code", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone_type", runtime.ParamLocationQuery, params.PhoneType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteLiveCallRouterRequest generates requests for DeleteLiveCallRouter
func NewDeleteLiveCallRouterRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/live_call_routers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLiveCallRouterRequest generates requests for GetLiveCallRouter
func NewGetLiveCallRouterRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/live_call_routers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateLiveCallRouterRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateLiveCallRouter builder with application/vnd.api+json body
func NewUpdateLiveCallRouterRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateLiveCallRouterApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateLiveCallRouterRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateLiveCallRouterRequestWithBody generates requests for UpdateLiveCallRouter with any type of body
func NewUpdateLiveCallRouterRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/live_call_routers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserNotificationRuleRequest generates requests for DeleteUserNotificationRule
func NewDeleteUserNotificationRuleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification_rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserNotificationRuleRequest generates requests for GetUserNotificationRule
func NewGetUserNotificationRuleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification_rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserNotificationRuleRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateUserNotificationRule builder with application/vnd.api+json body
func NewUpdateUserNotificationRuleRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateUserNotificationRuleApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserNotificationRuleRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateUserNotificationRuleRequestWithBody generates requests for UpdateUserNotificationRule with any type of body
func NewUpdateUserNotificationRuleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification_rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListOnCallRolesRequest generates requests for ListOnCallRoles
func NewListOnCallRolesRequest(server string, params *ListOnCallRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/on_call_roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOnCallRoleRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateOnCallRole builder with application/vnd.api+json body
func NewCreateOnCallRoleRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateOnCallRoleApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOnCallRoleRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateOnCallRoleRequestWithBody generates requests for CreateOnCallRole with any type of body
func NewCreateOnCallRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/on_call_roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOnCallRoleRequest generates requests for DeleteOnCallRole
func NewDeleteOnCallRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/on_call_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOnCallRoleRequest generates requests for GetOnCallRole
func NewGetOnCallRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/on_call_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOnCallRoleRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateOnCallRole builder with application/vnd.api+json body
func NewUpdateOnCallRoleRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateOnCallRoleApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOnCallRoleRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateOnCallRoleRequestWithBody generates requests for UpdateOnCallRole with any type of body
func NewUpdateOnCallRoleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/on_call_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOnCallShadowRequest generates requests for DeleteOnCallShadow
func NewDeleteOnCallShadowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/on_call_shadows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOnCallShadowRequest generates requests for GetOnCallShadow
func NewGetOnCallShadowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/on_call_shadows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOnCallShadowRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateOnCallShadow builder with application/vnd.api+json body
func NewUpdateOnCallShadowRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateOnCallShadowApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOnCallShadowRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateOnCallShadowRequestWithBody generates requests for UpdateOnCallShadow with any type of body
func NewUpdateOnCallShadowRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/on_call_shadows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOverrideShiftRequest generates requests for DeleteOverrideShift
func NewDeleteOverrideShiftRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/override_shifts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOverrideShiftRequest generates requests for GetOverrideShift
func NewGetOverrideShiftRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/override_shifts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOverrideShiftRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateOverrideShift builder with application/vnd.api+json body
func NewUpdateOverrideShiftRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateOverrideShiftApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOverrideShiftRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateOverrideShiftRequestWithBody generates requests for UpdateOverrideShift with any type of body
func NewUpdateOverrideShiftRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/override_shifts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaybookTaskRequest generates requests for DeletePlaybookTask
func NewDeletePlaybookTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaybookTaskRequest generates requests for GetPlaybookTask
func NewGetPlaybookTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlaybookTaskRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdatePlaybookTask builder with application/vnd.api+json body
func NewUpdatePlaybookTaskRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdatePlaybookTaskApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePlaybookTaskRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdatePlaybookTaskRequestWithBody generates requests for UpdatePlaybookTask with any type of body
func NewUpdatePlaybookTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlaybooksRequest generates requests for ListPlaybooks
func NewListPlaybooksRequest(server string, params *ListPlaybooksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaybookRequestWithApplicationVndAPIPlusJSONBody calls the generic CreatePlaybook builder with application/vnd.api+json body
func NewCreatePlaybookRequestWithApplicationVndAPIPlusJSONBody(server string, body CreatePlaybookApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePlaybookRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreatePlaybookRequestWithBody generates requests for CreatePlaybook with any type of body
func NewCreatePlaybookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaybookRequest generates requests for DeletePlaybook
func NewDeletePlaybookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaybookRequest generates requests for GetPlaybook
func NewGetPlaybookRequest(server string, id string, params *GetPlaybookParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlaybookRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdatePlaybook builder with application/vnd.api+json body
func NewUpdatePlaybookRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdatePlaybookApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePlaybookRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdatePlaybookRequestWithBody generates requests for UpdatePlaybook with any type of body
func NewUpdatePlaybookRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlaybookTasksRequest generates requests for ListPlaybookTasks
func NewListPlaybookTasksRequest(server string, playbookId string, params *ListPlaybookTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, playbookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s/playbook_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaybookTaskRequestWithApplicationVndAPIPlusJSONBody calls the generic CreatePlaybookTask builder with application/vnd.api+json body
func NewCreatePlaybookTaskRequestWithApplicationVndAPIPlusJSONBody(server string, playbookId string, body CreatePlaybookTaskApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePlaybookTaskRequestWithBody(server, playbookId, "application/vnd.api+json", bodyReader)
}

// NewCreatePlaybookTaskRequestWithBody generates requests for CreatePlaybookTask with any type of body
func NewCreatePlaybookTaskRequestWithBody(server string, playbookId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, playbookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s/playbook_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPostmortemTemplatesRequest generates requests for ListPostmortemTemplates
func NewListPostmortemTemplatesRequest(server string, params *ListPostmortemTemplatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePostmortemTemplateRequestWithApplicationVndAPIPlusJSONBody calls the generic CreatePostmortemTemplate builder with application/vnd.api+json body
func NewCreatePostmortemTemplateRequestWithApplicationVndAPIPlusJSONBody(server string, body CreatePostmortemTemplateApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePostmortemTemplateRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreatePostmortemTemplateRequestWithBody generates requests for CreatePostmortemTemplate with any type of body
func NewCreatePostmortemTemplateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePostmortemTemplateRequest generates requests for DeletePostmortemTemplate
func NewDeletePostmortemTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostmortemTemplateRequest generates requests for GetPostmortemTemplate
func NewGetPostmortemTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePostmortemTemplateRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdatePostmortemTemplate builder with application/vnd.api+json body
func NewUpdatePostmortemTemplateRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdatePostmortemTemplateApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePostmortemTemplateRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdatePostmortemTemplateRequestWithBody generates requests for UpdatePostmortemTemplate with any type of body
func NewUpdatePostmortemTemplateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentPostMortemsRequest generates requests for ListIncidentPostMortems
func NewListIncidentPostMortemsRequest(server string, params *ListIncidentPostMortemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[status]", runtime.ParamLocationQuery, *params.FilterStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSeverity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[severity]", runtime.ParamLocationQuery, *params.FilterSeverity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[type]", runtime.ParamLocationQuery, *params.FilterType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[user_id]", runtime.ParamLocationQuery, *params.FilterUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterEnvironments != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[environments]", runtime.ParamLocationQuery, *params.FilterEnvironments); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterFunctionalities != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[functionalities]", runtime.ParamLocationQuery, *params.FilterFunctionalities); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterServices != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[services]", runtime.ParamLocationQuery, *params.FilterServices); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterTeams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[teams]", runtime.ParamLocationQuery, *params.FilterTeams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStartedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][gt]", runtime.ParamLocationQuery, *params.FilterStartedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStartedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][gte]", runtime.ParamLocationQuery, *params.FilterStartedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStartedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][lt]", runtime.ParamLocationQuery, *params.FilterStartedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStartedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][lte]", runtime.ParamLocationQuery, *params.FilterStartedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterMitigatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[mitigated_at][gt]", runtime.ParamLocationQuery, *params.FilterMitigatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterMitigatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[mitigated_at][gte]", runtime.ParamLocationQuery, *params.FilterMitigatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterMitigatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[mitigated_at][lt]", runtime.ParamLocationQuery, *params.FilterMitigatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterMitigatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[mitigated_at][lte]", runtime.ParamLocationQuery, *params.FilterMitigatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterResolvedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[resolved_at][gt]", runtime.ParamLocationQuery, *params.FilterResolvedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterResolvedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[resolved_at][gte]", runtime.ParamLocationQuery, *params.FilterResolvedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterResolvedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[resolved_at][lt]", runtime.ParamLocationQuery, *params.FilterResolvedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterResolvedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[resolved_at][lte]", runtime.ParamLocationQuery, *params.FilterResolvedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListIncidentPostmortemRequest generates requests for ListIncidentPostmortem
func NewListIncidentPostmortemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentPostmortemRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateIncidentPostmortem builder with application/vnd.api+json body
func NewUpdateIncidentPostmortemRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateIncidentPostmortemApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIncidentPostmortemRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateIncidentPostmortemRequestWithBody generates requests for UpdateIncidentPostmortem with any type of body
func NewUpdateIncidentPostmortemRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPulsesRequest generates requests for ListPulses
func NewListPulsesRequest(server string, params *ListPulsesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[source]", runtime.ParamLocationQuery, *params.FilterSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterServices != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[services]", runtime.ParamLocationQuery, *params.FilterServices); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterEnvironments != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[environments]", runtime.ParamLocationQuery, *params.FilterEnvironments); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterLabels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[labels]", runtime.ParamLocationQuery, *params.FilterLabels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterRefs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[refs]", runtime.ParamLocationQuery, *params.FilterRefs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStartedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][gt]", runtime.ParamLocationQuery, *params.FilterStartedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStartedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][gte]", runtime.ParamLocationQuery, *params.FilterStartedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStartedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][lt]", runtime.ParamLocationQuery, *params.FilterStartedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStartedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][lte]", runtime.ParamLocationQuery, *params.FilterStartedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterEndedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[ended_at][gt]", runtime.ParamLocationQuery, *params.FilterEndedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterEndedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[ended_at][gte]", runtime.ParamLocationQuery, *params.FilterEndedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterEndedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[ended_at][lt]", runtime.ParamLocationQuery, *params.FilterEndedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterEndedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[ended_at][lte]", runtime.ParamLocationQuery, *params.FilterEndedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePulseRequestWithApplicationVndAPIPlusJSONBody calls the generic CreatePulse builder with application/vnd.api+json body
func NewCreatePulseRequestWithApplicationVndAPIPlusJSONBody(server string, body CreatePulseApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePulseRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreatePulseRequestWithBody generates requests for CreatePulse with any type of body
func NewCreatePulseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPulseRequest generates requests for GetPulse
func NewGetPulseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePulseRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdatePulse builder with application/vnd.api+json body
func NewUpdatePulseRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdatePulseApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePulseRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdatePulseRequestWithBody generates requests for UpdatePulse with any type of body
func NewUpdatePulseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRetrospectiveConfigurationsRequest generates requests for ListRetrospectiveConfigurations
func NewListRetrospectiveConfigurationsRequest(server string, params *ListRetrospectiveConfigurationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_configurations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterKind != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[kind]", runtime.ParamLocationQuery, *params.FilterKind); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRetrospectiveConfigurationRequest generates requests for GetRetrospectiveConfiguration
func NewGetRetrospectiveConfigurationRequest(server string, id string, params *GetRetrospectiveConfigurationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_configurations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRetrospectiveConfigurationRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateRetrospectiveConfiguration builder with application/vnd.api+json body
func NewUpdateRetrospectiveConfigurationRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateRetrospectiveConfigurationApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRetrospectiveConfigurationRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateRetrospectiveConfigurationRequestWithBody generates requests for UpdateRetrospectiveConfiguration with any type of body
func NewUpdateRetrospectiveConfigurationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_configurations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRetrospectiveProcessGroupStepRequest generates requests for DeleteRetrospectiveProcessGroupStep
func NewDeleteRetrospectiveProcessGroupStepRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_process_group_steps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRetrospectiveProcessGroupStepRequest generates requests for GetRetrospectiveProcessGroupStep
func NewGetRetrospectiveProcessGroupStepRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_process_group_steps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRetrospectiveProcessGroupStepRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateRetrospectiveProcessGroupStep builder with application/vnd.api+json body
func NewUpdateRetrospectiveProcessGroupStepRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateRetrospectiveProcessGroupStepApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRetrospectiveProcessGroupStepRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateRetrospectiveProcessGroupStepRequestWithBody generates requests for UpdateRetrospectiveProcessGroupStep with any type of body
func NewUpdateRetrospectiveProcessGroupStepRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_process_group_steps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRetrospectiveProcessGroupRequest generates requests for DeleteRetrospectiveProcessGroup
func NewDeleteRetrospectiveProcessGroupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_process_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRetrospectiveProcessGroupRequest generates requests for GetRetrospectiveProcessGroup
func NewGetRetrospectiveProcessGroupRequest(server string, id string, params *GetRetrospectiveProcessGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_process_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRetrospectiveProcessGroupRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateRetrospectiveProcessGroup builder with application/vnd.api+json body
func NewUpdateRetrospectiveProcessGroupRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateRetrospectiveProcessGroupApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRetrospectiveProcessGroupRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateRetrospectiveProcessGroupRequestWithBody generates requests for UpdateRetrospectiveProcessGroup with any type of body
func NewUpdateRetrospectiveProcessGroupRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_process_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRetrospectiveProcessGroupStepsRequest generates requests for ListRetrospectiveProcessGroupSteps
func NewListRetrospectiveProcessGroupStepsRequest(server string, retrospectiveProcessGroupId string, params *ListRetrospectiveProcessGroupStepsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "retrospective_process_group_id", runtime.ParamLocationPath, retrospectiveProcessGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_process_groups/%s/steps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterRetrospectiveStepId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[retrospective_step_id]", runtime.ParamLocationQuery, *params.FilterRetrospectiveStepId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRetrospectiveProcessGroupStepRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateRetrospectiveProcessGroupStep builder with application/vnd.api+json body
func NewCreateRetrospectiveProcessGroupStepRequestWithApplicationVndAPIPlusJSONBody(server string, retrospectiveProcessGroupId string, body CreateRetrospectiveProcessGroupStepApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRetrospectiveProcessGroupStepRequestWithBody(server, retrospectiveProcessGroupId, "application/vnd.api+json", bodyReader)
}

// NewCreateRetrospectiveProcessGroupStepRequestWithBody generates requests for CreateRetrospectiveProcessGroupStep with any type of body
func NewCreateRetrospectiveProcessGroupStepRequestWithBody(server string, retrospectiveProcessGroupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "retrospective_process_group_id", runtime.ParamLocationPath, retrospectiveProcessGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_process_groups/%s/steps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRetrospectiveProcessesRequest generates requests for ListRetrospectiveProcesses
func NewListRetrospectiveProcessesRequest(server string, params *ListRetrospectiveProcessesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_processes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRetrospectiveProcessRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateRetrospectiveProcess builder with application/vnd.api+json body
func NewCreateRetrospectiveProcessRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateRetrospectiveProcessApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRetrospectiveProcessRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateRetrospectiveProcessRequestWithBody generates requests for CreateRetrospectiveProcess with any type of body
func NewCreateRetrospectiveProcessRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_processes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRetrospectiveProcessRequest generates requests for DeleteRetrospectiveProcess
func NewDeleteRetrospectiveProcessRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_processes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRetrospectiveProcessRequest generates requests for GetRetrospectiveProcess
func NewGetRetrospectiveProcessRequest(server string, id string, params *GetRetrospectiveProcessParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_processes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRetrospectiveProcessRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateRetrospectiveProcess builder with application/vnd.api+json body
func NewUpdateRetrospectiveProcessRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateRetrospectiveProcessApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRetrospectiveProcessRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateRetrospectiveProcessRequestWithBody generates requests for UpdateRetrospectiveProcess with any type of body
func NewUpdateRetrospectiveProcessRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_processes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRetrospectiveProcessGroupsRequest generates requests for ListRetrospectiveProcessGroups
func NewListRetrospectiveProcessGroupsRequest(server string, retrospectiveProcessId string, params *ListRetrospectiveProcessGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "retrospective_process_id", runtime.ParamLocationPath, retrospectiveProcessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_processes/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSubStatusId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[sub_status_id]", runtime.ParamLocationQuery, *params.FilterSubStatusId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRetrospectiveProcessGroupRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateRetrospectiveProcessGroup builder with application/vnd.api+json body
func NewCreateRetrospectiveProcessGroupRequestWithApplicationVndAPIPlusJSONBody(server string, retrospectiveProcessId string, body CreateRetrospectiveProcessGroupApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRetrospectiveProcessGroupRequestWithBody(server, retrospectiveProcessId, "application/vnd.api+json", bodyReader)
}

// NewCreateRetrospectiveProcessGroupRequestWithBody generates requests for CreateRetrospectiveProcessGroup with any type of body
func NewCreateRetrospectiveProcessGroupRequestWithBody(server string, retrospectiveProcessId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "retrospective_process_id", runtime.ParamLocationPath, retrospectiveProcessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_processes/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRetrospectiveStepsRequest generates requests for ListRetrospectiveSteps
func NewListRetrospectiveStepsRequest(server string, retrospectiveProcessId string, params *ListRetrospectiveStepsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "retrospective_process_id", runtime.ParamLocationPath, retrospectiveProcessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_processes/%s/retrospective_steps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRetrospectiveStepRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateRetrospectiveStep builder with application/vnd.api+json body
func NewCreateRetrospectiveStepRequestWithApplicationVndAPIPlusJSONBody(server string, retrospectiveProcessId string, body CreateRetrospectiveStepApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRetrospectiveStepRequestWithBody(server, retrospectiveProcessId, "application/vnd.api+json", bodyReader)
}

// NewCreateRetrospectiveStepRequestWithBody generates requests for CreateRetrospectiveStep with any type of body
func NewCreateRetrospectiveStepRequestWithBody(server string, retrospectiveProcessId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "retrospective_process_id", runtime.ParamLocationPath, retrospectiveProcessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_processes/%s/retrospective_steps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRetrospectiveStepRequest generates requests for DeleteRetrospectiveStep
func NewDeleteRetrospectiveStepRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_steps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRetrospectiveStepRequest generates requests for GetRetrospectiveStep
func NewGetRetrospectiveStepRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_steps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRetrospectiveStepRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateRetrospectiveStep builder with application/vnd.api+json body
func NewUpdateRetrospectiveStepRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateRetrospectiveStepApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRetrospectiveStepRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateRetrospectiveStepRequestWithBody generates requests for UpdateRetrospectiveStep with any type of body
func NewUpdateRetrospectiveStepRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_steps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRolesRequest generates requests for ListRoles
func NewListRolesRequest(server string, params *ListRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRoleRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateRole builder with application/vnd.api+json body
func NewCreateRoleRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateRoleApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRoleRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateRoleRequestWithBody generates requests for CreateRole with any type of body
func NewCreateRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRoleRequest generates requests for DeleteRole
func NewDeleteRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRoleRequest generates requests for GetRole
func NewGetRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRoleRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateRole builder with application/vnd.api+json body
func NewUpdateRoleRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateRoleApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRoleRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateRoleRequestWithBody generates requests for UpdateRole with any type of body
func NewUpdateRoleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteScheduleRotationActiveDayRequest generates requests for DeleteScheduleRotationActiveDay
func NewDeleteScheduleRotationActiveDayRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedule_rotation_active_days/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScheduleRotationActiveDayRequest generates requests for GetScheduleRotationActiveDay
func NewGetScheduleRotationActiveDayRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedule_rotation_active_days/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateScheduleRotationActiveDayRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateScheduleRotationActiveDay builder with application/vnd.api+json body
func NewUpdateScheduleRotationActiveDayRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateScheduleRotationActiveDayApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateScheduleRotationActiveDayRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateScheduleRotationActiveDayRequestWithBody generates requests for UpdateScheduleRotationActiveDay with any type of body
func NewUpdateScheduleRotationActiveDayRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedule_rotation_active_days/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteScheduleRotationUserRequest generates requests for DeleteScheduleRotationUser
func NewDeleteScheduleRotationUserRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedule_rotation_users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScheduleRotationUserRequest generates requests for GetScheduleRotationUser
func NewGetScheduleRotationUserRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedule_rotation_users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateScheduleRotationUserRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateScheduleRotationUser builder with application/vnd.api+json body
func NewUpdateScheduleRotationUserRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateScheduleRotationUserApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateScheduleRotationUserRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateScheduleRotationUserRequestWithBody generates requests for UpdateScheduleRotationUser with any type of body
func NewUpdateScheduleRotationUserRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedule_rotation_users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteScheduleRotationRequest generates requests for DeleteScheduleRotation
func NewDeleteScheduleRotationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedule_rotations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScheduleRotationRequest generates requests for GetScheduleRotation
func NewGetScheduleRotationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedule_rotations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateScheduleRotationRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateScheduleRotation builder with application/vnd.api+json body
func NewUpdateScheduleRotationRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateScheduleRotationApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateScheduleRotationRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateScheduleRotationRequestWithBody generates requests for UpdateScheduleRotation with any type of body
func NewUpdateScheduleRotationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedule_rotations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListScheduleRotationActiveDaysRequest generates requests for ListScheduleRotationActiveDays
func NewListScheduleRotationActiveDaysRequest(server string, scheduleRotationId string, params *ListScheduleRotationActiveDaysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "schedule_rotation_id", runtime.ParamLocationPath, scheduleRotationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedule_rotations/%s/schedule_rotation_active_days", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateScheduleRotationActiveDayRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateScheduleRotationActiveDay builder with application/vnd.api+json body
func NewCreateScheduleRotationActiveDayRequestWithApplicationVndAPIPlusJSONBody(server string, scheduleRotationId string, body CreateScheduleRotationActiveDayApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateScheduleRotationActiveDayRequestWithBody(server, scheduleRotationId, "application/vnd.api+json", bodyReader)
}

// NewCreateScheduleRotationActiveDayRequestWithBody generates requests for CreateScheduleRotationActiveDay with any type of body
func NewCreateScheduleRotationActiveDayRequestWithBody(server string, scheduleRotationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "schedule_rotation_id", runtime.ParamLocationPath, scheduleRotationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedule_rotations/%s/schedule_rotation_active_days", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListScheduleRotationUsersRequest generates requests for ListScheduleRotationUsers
func NewListScheduleRotationUsersRequest(server string, scheduleRotationId string, params *ListScheduleRotationUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "schedule_rotation_id", runtime.ParamLocationPath, scheduleRotationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedule_rotations/%s/schedule_rotation_users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateScheduleRotationUserRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateScheduleRotationUser builder with application/vnd.api+json body
func NewCreateScheduleRotationUserRequestWithApplicationVndAPIPlusJSONBody(server string, scheduleRotationId string, body CreateScheduleRotationUserApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateScheduleRotationUserRequestWithBody(server, scheduleRotationId, "application/vnd.api+json", bodyReader)
}

// NewCreateScheduleRotationUserRequestWithBody generates requests for CreateScheduleRotationUser with any type of body
func NewCreateScheduleRotationUserRequestWithBody(server string, scheduleRotationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "schedule_rotation_id", runtime.ParamLocationPath, scheduleRotationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedule_rotations/%s/schedule_rotation_users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSchedulesRequest generates requests for ListSchedules
func NewListSchedulesRequest(server string, params *ListSchedulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateScheduleRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateSchedule builder with application/vnd.api+json body
func NewCreateScheduleRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateScheduleApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateScheduleRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateScheduleRequestWithBody generates requests for CreateSchedule with any type of body
func NewCreateScheduleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteScheduleRequest generates requests for DeleteSchedule
func NewDeleteScheduleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScheduleRequest generates requests for GetSchedule
func NewGetScheduleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateScheduleRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateSchedule builder with application/vnd.api+json body
func NewUpdateScheduleRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateScheduleApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateScheduleRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateScheduleRequestWithBody generates requests for UpdateSchedule with any type of body
func NewUpdateScheduleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetScheduleShiftsRequest generates requests for GetScheduleShifts
func NewGetScheduleShiftsRequest(server string, id string, params *GetScheduleShiftsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedules/%s/shifts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOnCallShadowsRequest generates requests for ListOnCallShadows
func NewListOnCallShadowsRequest(server string, scheduleId string, params *ListOnCallShadowsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "schedule_id", runtime.ParamLocationPath, scheduleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedules/%s/on_call_shadows", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOnCallShadowRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateOnCallShadow builder with application/vnd.api+json body
func NewCreateOnCallShadowRequestWithApplicationVndAPIPlusJSONBody(server string, scheduleId string, body CreateOnCallShadowApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOnCallShadowRequestWithBody(server, scheduleId, "application/vnd.api+json", bodyReader)
}

// NewCreateOnCallShadowRequestWithBody generates requests for CreateOnCallShadow with any type of body
func NewCreateOnCallShadowRequestWithBody(server string, scheduleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "schedule_id", runtime.ParamLocationPath, scheduleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedules/%s/on_call_shadows", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListOverrideShiftsRequest generates requests for ListOverrideShifts
func NewListOverrideShiftsRequest(server string, scheduleId string, params *ListOverrideShiftsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "schedule_id", runtime.ParamLocationPath, scheduleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedules/%s/override_shifts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOverrideShiftRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateOverrideShift builder with application/vnd.api+json body
func NewCreateOverrideShiftRequestWithApplicationVndAPIPlusJSONBody(server string, scheduleId string, body CreateOverrideShiftApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOverrideShiftRequestWithBody(server, scheduleId, "application/vnd.api+json", bodyReader)
}

// NewCreateOverrideShiftRequestWithBody generates requests for CreateOverrideShift with any type of body
func NewCreateOverrideShiftRequestWithBody(server string, scheduleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "schedule_id", runtime.ParamLocationPath, scheduleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedules/%s/override_shifts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListScheduleRotationsRequest generates requests for ListScheduleRotations
func NewListScheduleRotationsRequest(server string, scheduleId string, params *ListScheduleRotationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "schedule_id", runtime.ParamLocationPath, scheduleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedules/%s/schedule_rotations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateScheduleRotationRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateScheduleRotation builder with application/vnd.api+json body
func NewCreateScheduleRotationRequestWithApplicationVndAPIPlusJSONBody(server string, scheduleId string, body CreateScheduleRotationApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateScheduleRotationRequestWithBody(server, scheduleId, "application/vnd.api+json", bodyReader)
}

// NewCreateScheduleRotationRequestWithBody generates requests for CreateScheduleRotation with any type of body
func NewCreateScheduleRotationRequestWithBody(server string, scheduleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "schedule_id", runtime.ParamLocationPath, scheduleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schedules/%s/schedule_rotations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSecretsRequest generates requests for ListSecrets
func NewListSecretsRequest(server string, params *ListSecretsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSecretRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateSecret builder with application/vnd.api+json body
func NewCreateSecretRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateSecretApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSecretRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateSecretRequestWithBody generates requests for CreateSecret with any type of body
func NewCreateSecretRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSecretRequest generates requests for DeleteSecret
func NewDeleteSecretRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/secrets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSecretRequest generates requests for GetSecret
func NewGetSecretRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/secrets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSecretRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateSecret builder with application/vnd.api+json body
func NewUpdateSecretRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateSecretApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSecretRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateSecretRequestWithBody generates requests for UpdateSecret with any type of body
func NewUpdateSecretRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/secrets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListServicesRequest generates requests for ListServices
func NewListServicesRequest(server string, params *ListServicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterBackstageId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[backstage_id]", runtime.ParamLocationQuery, *params.FilterBackstageId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterExternalId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[external_id]", runtime.ParamLocationQuery, *params.FilterExternalId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServiceRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateService builder with application/vnd.api+json body
func NewCreateServiceRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateServiceApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateServiceRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateServiceRequestWithBody generates requests for CreateService with any type of body
func NewCreateServiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceRequest generates requests for DeleteService
func NewDeleteServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceRequest generates requests for GetService
func NewGetServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateServiceRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateService builder with application/vnd.api+json body
func NewUpdateServiceRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateServiceApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateServiceRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateServiceRequestWithBody generates requests for UpdateService with any type of body
func NewUpdateServiceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceIncidentsChartRequest generates requests for GetServiceIncidentsChart
func NewGetServiceIncidentsChartRequest(server string, id string, params *GetServiceIncidentsChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s/incidents_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceUptimeChartRequest generates requests for GetServiceUptimeChart
func NewGetServiceUptimeChartRequest(server string, id string, params *GetServiceUptimeChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s/uptime_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSeveritiesRequest generates requests for ListSeverities
func NewListSeveritiesRequest(server string, params *ListSeveritiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSeverity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[severity]", runtime.ParamLocationQuery, *params.FilterSeverity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterColor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[color]", runtime.ParamLocationQuery, *params.FilterColor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSeverityRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateSeverity builder with application/vnd.api+json body
func NewCreateSeverityRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateSeverityApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSeverityRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateSeverityRequestWithBody generates requests for CreateSeverity with any type of body
func NewCreateSeverityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSeverityRequest generates requests for DeleteSeverity
func NewDeleteSeverityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeverityRequest generates requests for GetSeverity
func NewGetSeverityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSeverityRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateSeverity builder with application/vnd.api+json body
func NewUpdateSeverityRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateSeverityApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSeverityRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateSeverityRequestWithBody generates requests for UpdateSeverity with any type of body
func NewUpdateSeverityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListShiftsRequest generates requests for ListShifts
func NewListShiftsRequest(server string, params *ListShiftsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/shifts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_ids[]", runtime.ParamLocationQuery, *params.UserIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScheduleIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "schedule_ids[]", runtime.ParamLocationQuery, *params.ScheduleIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIncidentStatusPageRequest generates requests for DeleteIncidentStatusPage
func NewDeleteIncidentStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-page-events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentStatusPagesRequest generates requests for GetIncidentStatusPages
func NewGetIncidentStatusPagesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-page-events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentStatusPageRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateIncidentStatusPage builder with application/vnd.api+json body
func NewUpdateIncidentStatusPageRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateIncidentStatusPageApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIncidentStatusPageRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateIncidentStatusPageRequestWithBody generates requests for UpdateIncidentStatusPage with any type of body
func NewUpdateIncidentStatusPageRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-page-events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListStatusPagesRequest generates requests for ListStatusPages
func NewListStatusPagesRequest(server string, params *ListStatusPagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStatusPageRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateStatusPage builder with application/vnd.api+json body
func NewCreateStatusPageRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateStatusPageApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateStatusPageRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateStatusPageRequestWithBody generates requests for CreateStatusPage with any type of body
func NewCreateStatusPageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStatusPageRequest generates requests for DeleteStatusPage
func NewDeleteStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusPageRequest generates requests for GetStatusPage
func NewGetStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateStatusPageRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateStatusPage builder with application/vnd.api+json body
func NewUpdateStatusPageRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateStatusPageApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateStatusPageRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateStatusPageRequestWithBody generates requests for UpdateStatusPage with any type of body
func NewUpdateStatusPageRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListStatusPageTemplatesRequest generates requests for ListStatusPageTemplates
func NewListStatusPageTemplatesRequest(server string, statusPageId string, params *ListStatusPageTemplatesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "status_page_id", runtime.ParamLocationPath, statusPageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s/templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStatusPageTemplateRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateStatusPageTemplate builder with application/vnd.api+json body
func NewCreateStatusPageTemplateRequestWithApplicationVndAPIPlusJSONBody(server string, statusPageId string, body CreateStatusPageTemplateApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateStatusPageTemplateRequestWithBody(server, statusPageId, "application/vnd.api+json", bodyReader)
}

// NewCreateStatusPageTemplateRequestWithBody generates requests for CreateStatusPageTemplate with any type of body
func NewCreateStatusPageTemplateRequestWithBody(server string, statusPageId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "status_page_id", runtime.ParamLocationPath, statusPageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s/templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSubStatusesRequest generates requests for ListSubStatuses
func NewListSubStatusesRequest(server string, params *ListSubStatusesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sub_statuses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterParentStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[parent_status]", runtime.ParamLocationQuery, *params.FilterParentStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSubStatusRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateSubStatus builder with application/vnd.api+json body
func NewCreateSubStatusRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateSubStatusApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSubStatusRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateSubStatusRequestWithBody generates requests for CreateSubStatus with any type of body
func NewCreateSubStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sub_statuses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSubStatusRequest generates requests for DeleteSubStatus
func NewDeleteSubStatusRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sub_statuses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSubStatusRequest generates requests for GetSubStatus
func NewGetSubStatusRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sub_statuses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSubStatusRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateSubStatus builder with application/vnd.api+json body
func NewUpdateSubStatusRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateSubStatusApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSubStatusRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateSubStatusRequestWithBody generates requests for UpdateSubStatus with any type of body
func NewUpdateSubStatusRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sub_statuses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTeamsRequest generates requests for ListTeams
func NewListTeamsRequest(server string, params *ListTeamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterBackstageId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[backstage_id]", runtime.ParamLocationQuery, *params.FilterBackstageId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterExternalId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[external_id]", runtime.ParamLocationQuery, *params.FilterExternalId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterColor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[color]", runtime.ParamLocationQuery, *params.FilterColor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateTeam builder with application/vnd.api+json body
func NewCreateTeamRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateTeamApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTeamRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateTeamRequestWithBody generates requests for CreateTeam with any type of body
func NewCreateTeamRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamRequest generates requests for DeleteTeam
func NewDeleteTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamRequest generates requests for GetTeam
func NewGetTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateTeam builder with application/vnd.api+json body
func NewUpdateTeamRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateTeamApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTeamRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateTeamRequestWithBody generates requests for UpdateTeam with any type of body
func NewUpdateTeamRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTeamIncidentsChartRequest generates requests for GetTeamIncidentsChart
func NewGetTeamIncidentsChartRequest(server string, id string, params *GetTeamIncidentsChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s/incidents_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteStatusPageTemplateRequest generates requests for DeleteStatusPageTemplate
func NewDeleteStatusPageTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusPageTemplateRequest generates requests for GetStatusPageTemplate
func NewGetStatusPageTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateStatusPageTemplateRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateStatusPageTemplate builder with application/vnd.api+json body
func NewUpdateStatusPageTemplateRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateStatusPageTemplateApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateStatusPageTemplateRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateStatusPageTemplateRequestWithBody generates requests for UpdateStatusPageTemplate with any type of body
func NewUpdateStatusPageTemplateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListUsersRequest generates requests for ListUsers
func NewListUsersRequest(server string, params *ListUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterEmail != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[email]", runtime.ParamLocationQuery, *params.FilterEmail); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCurrentUserRequest generates requests for GetCurrentUser
func NewGetCurrentUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserRequest generates requests for DeleteUser
func NewDeleteUserRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, id string, params *GetUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUserNotificationRulesRequest generates requests for ListUserNotificationRules
func NewListUserNotificationRulesRequest(server string, userId string, params *ListUserNotificationRulesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s/notification_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserNotificationRuleRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateUserNotificationRule builder with application/vnd.api+json body
func NewCreateUserNotificationRuleRequestWithApplicationVndAPIPlusJSONBody(server string, userId string, body CreateUserNotificationRuleApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserNotificationRuleRequestWithBody(server, userId, "application/vnd.api+json", bodyReader)
}

// NewCreateUserNotificationRuleRequestWithBody generates requests for CreateUserNotificationRule with any type of body
func NewCreateUserNotificationRuleRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s/notification_rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWebhooksDeliveryRequest generates requests for GetWebhooksDelivery
func NewGetWebhooksDeliveryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/webhooks/deliveries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeliverWebhooksDeliveryRequest generates requests for DeliverWebhooksDelivery
func NewDeliverWebhooksDeliveryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/webhooks/deliveries/%s/deliver", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListWebhooksEndpointsRequest generates requests for ListWebhooksEndpoints
func NewListWebhooksEndpointsRequest(server string, params *ListWebhooksEndpointsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/webhooks/endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWebhooksEndpointRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateWebhooksEndpoint builder with application/vnd.api+json body
func NewCreateWebhooksEndpointRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateWebhooksEndpointApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWebhooksEndpointRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateWebhooksEndpointRequestWithBody generates requests for CreateWebhooksEndpoint with any type of body
func NewCreateWebhooksEndpointRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/webhooks/endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWebhooksDeliveriesRequest generates requests for ListWebhooksDeliveries
func NewListWebhooksDeliveriesRequest(server string, endpointId string, params *ListWebhooksDeliveriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpoint_id", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/webhooks/endpoints/%s/deliveries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteWebhooksEndpointRequest generates requests for DeleteWebhooksEndpoint
func NewDeleteWebhooksEndpointRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/webhooks/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWebhooksEndpointRequest generates requests for GetWebhooksEndpoint
func NewGetWebhooksEndpointRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/webhooks/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWebhooksEndpointRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateWebhooksEndpoint builder with application/vnd.api+json body
func NewUpdateWebhooksEndpointRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateWebhooksEndpointApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWebhooksEndpointRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateWebhooksEndpointRequestWithBody generates requests for UpdateWebhooksEndpoint with any type of body
func NewUpdateWebhooksEndpointRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/webhooks/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkflowCustomFieldSelectionRequest generates requests for DeleteWorkflowCustomFieldSelection
func NewDeleteWorkflowCustomFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowCustomFieldSelectionRequest generates requests for GetWorkflowCustomFieldSelection
func NewGetWorkflowCustomFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkflowCustomFieldSelectionRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateWorkflowCustomFieldSelection builder with application/vnd.api+json body
func NewUpdateWorkflowCustomFieldSelectionRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateWorkflowCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkflowCustomFieldSelectionRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateWorkflowCustomFieldSelectionRequestWithBody generates requests for UpdateWorkflowCustomFieldSelection with any type of body
func NewUpdateWorkflowCustomFieldSelectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkflowFormFieldConditionRequest generates requests for DeleteWorkflowFormFieldCondition
func NewDeleteWorkflowFormFieldConditionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_form_field_conditions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowFormFieldConditionRequest generates requests for GetWorkflowFormFieldCondition
func NewGetWorkflowFormFieldConditionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_form_field_conditions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkflowFormFieldConditionRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateWorkflowFormFieldCondition builder with application/vnd.api+json body
func NewUpdateWorkflowFormFieldConditionRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateWorkflowFormFieldConditionApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkflowFormFieldConditionRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateWorkflowFormFieldConditionRequestWithBody generates requests for UpdateWorkflowFormFieldCondition with any type of body
func NewUpdateWorkflowFormFieldConditionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_form_field_conditions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowGroupsRequest generates requests for ListWorkflowGroups
func NewListWorkflowGroupsRequest(server string, params *ListWorkflowGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterKind != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[kind]", runtime.ParamLocationQuery, *params.FilterKind); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterExpanded != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[expanded]", runtime.ParamLocationQuery, *params.FilterExpanded); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterPosition != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[position]", runtime.ParamLocationQuery, *params.FilterPosition); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowGroupRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateWorkflowGroup builder with application/vnd.api+json body
func NewCreateWorkflowGroupRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateWorkflowGroupApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkflowGroupRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateWorkflowGroupRequestWithBody generates requests for CreateWorkflowGroup with any type of body
func NewCreateWorkflowGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkflowGroupRequest generates requests for DeleteWorkflowGroup
func NewDeleteWorkflowGroupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowGroupRequest generates requests for GetWorkflowGroup
func NewGetWorkflowGroupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkflowGroupRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateWorkflowGroup builder with application/vnd.api+json body
func NewUpdateWorkflowGroupRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateWorkflowGroupApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkflowGroupRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateWorkflowGroupRequestWithBody generates requests for UpdateWorkflowGroup with any type of body
func NewUpdateWorkflowGroupRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkflowTaskRequest generates requests for DeleteWorkflowTask
func NewDeleteWorkflowTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowTaskRequest generates requests for GetWorkflowTask
func NewGetWorkflowTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkflowTaskRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateWorkflowTask builder with application/vnd.api+json body
func NewUpdateWorkflowTaskRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateWorkflowTaskApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkflowTaskRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateWorkflowTaskRequestWithBody generates requests for UpdateWorkflowTask with any type of body
func NewUpdateWorkflowTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowsRequest generates requests for ListWorkflows
func NewListWorkflowsRequest(server string, params *ListWorkflowsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateWorkflow builder with application/vnd.api+json body
func NewCreateWorkflowRequestWithApplicationVndAPIPlusJSONBody(server string, body CreateWorkflowApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkflowRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewCreateWorkflowRequestWithBody generates requests for CreateWorkflow with any type of body
func NewCreateWorkflowRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkflowRequest generates requests for DeleteWorkflow
func NewDeleteWorkflowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowRequest generates requests for GetWorkflow
func NewGetWorkflowRequest(server string, id string, params *GetWorkflowParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkflowRequestWithApplicationVndAPIPlusJSONBody calls the generic UpdateWorkflow builder with application/vnd.api+json body
func NewUpdateWorkflowRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body UpdateWorkflowApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkflowRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewUpdateWorkflowRequestWithBody generates requests for UpdateWorkflow with any type of body
func NewUpdateWorkflowRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowCustomFieldSelectionsRequest generates requests for ListWorkflowCustomFieldSelections
func NewListWorkflowCustomFieldSelectionsRequest(server string, workflowId string, params *ListWorkflowCustomFieldSelectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/custom_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowCustomFieldSelectionRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateWorkflowCustomFieldSelection builder with application/vnd.api+json body
func NewCreateWorkflowCustomFieldSelectionRequestWithApplicationVndAPIPlusJSONBody(server string, workflowId string, body CreateWorkflowCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkflowCustomFieldSelectionRequestWithBody(server, workflowId, "application/vnd.api+json", bodyReader)
}

// NewCreateWorkflowCustomFieldSelectionRequestWithBody generates requests for CreateWorkflowCustomFieldSelection with any type of body
func NewCreateWorkflowCustomFieldSelectionRequestWithBody(server string, workflowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/custom_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowFormFieldConditionsRequest generates requests for ListWorkflowFormFieldConditions
func NewListWorkflowFormFieldConditionsRequest(server string, workflowId string, params *ListWorkflowFormFieldConditionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/form_field_conditions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowFormFieldConditionRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateWorkflowFormFieldCondition builder with application/vnd.api+json body
func NewCreateWorkflowFormFieldConditionRequestWithApplicationVndAPIPlusJSONBody(server string, workflowId string, body CreateWorkflowFormFieldConditionApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkflowFormFieldConditionRequestWithBody(server, workflowId, "application/vnd.api+json", bodyReader)
}

// NewCreateWorkflowFormFieldConditionRequestWithBody generates requests for CreateWorkflowFormFieldCondition with any type of body
func NewCreateWorkflowFormFieldConditionRequestWithBody(server string, workflowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/form_field_conditions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowRunsRequest generates requests for ListWorkflowRuns
func NewListWorkflowRunsRequest(server string, workflowId string, params *ListWorkflowRunsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/workflow_runs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowRunRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateWorkflowRun builder with application/vnd.api+json body
func NewCreateWorkflowRunRequestWithApplicationVndAPIPlusJSONBody(server string, workflowId string, body CreateWorkflowRunApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkflowRunRequestWithBody(server, workflowId, "application/vnd.api+json", bodyReader)
}

// NewCreateWorkflowRunRequestWithBody generates requests for CreateWorkflowRun with any type of body
func NewCreateWorkflowRunRequestWithBody(server string, workflowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/workflow_runs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowTasksRequest generates requests for ListWorkflowTasks
func NewListWorkflowTasksRequest(server string, workflowId string, params *ListWorkflowTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/workflow_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowTaskRequestWithApplicationVndAPIPlusJSONBody calls the generic CreateWorkflowTask builder with application/vnd.api+json body
func NewCreateWorkflowTaskRequestWithApplicationVndAPIPlusJSONBody(server string, workflowId string, body CreateWorkflowTaskApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkflowTaskRequestWithBody(server, workflowId, "application/vnd.api+json", bodyReader)
}

// NewCreateWorkflowTaskRequestWithBody generates requests for CreateWorkflowTask with any type of body
func NewCreateWorkflowTaskRequestWithBody(server string, workflowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/workflow_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListAllIncidentActionItemsWithResponse request
	ListAllIncidentActionItemsWithResponse(ctx context.Context, params *ListAllIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*ListAllIncidentActionItemsResponse, error)

	// DeleteIncidentActionItemWithResponse request
	DeleteIncidentActionItemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentActionItemResponse, error)

	// GetIncidentActionItemsWithResponse request
	GetIncidentActionItemsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentActionItemsResponse, error)

	// UpdateIncidentActionItemWithBodyWithResponse request with any body
	UpdateIncidentActionItemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentActionItemResponse, error)

	UpdateIncidentActionItemWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentActionItemApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentActionItemResponse, error)

	// ListAlertGroupsWithResponse request
	ListAlertGroupsWithResponse(ctx context.Context, params *ListAlertGroupsParams, reqEditors ...RequestEditorFn) (*ListAlertGroupsResponse, error)

	// CreateAlertGroupWithBodyWithResponse request with any body
	CreateAlertGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlertGroupResponse, error)

	CreateAlertGroupWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateAlertGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAlertGroupResponse, error)

	// DeleteAlertGroupWithResponse request
	DeleteAlertGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAlertGroupResponse, error)

	// GetAlertGroupWithResponse request
	GetAlertGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertGroupResponse, error)

	// UpdateAlertGroupWithBodyWithResponse request with any body
	UpdateAlertGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAlertGroupResponse, error)

	UpdateAlertGroupWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateAlertGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAlertGroupResponse, error)

	// ListAlertSourcesWithResponse request
	ListAlertSourcesWithResponse(ctx context.Context, params *ListAlertSourcesParams, reqEditors ...RequestEditorFn) (*ListAlertSourcesResponse, error)

	// CreateAlertSourceWithBodyWithResponse request with any body
	CreateAlertSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlertSourceResponse, error)

	CreateAlertSourceWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateAlertSourceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAlertSourceResponse, error)

	// DeleteAlertSourceWithResponse request
	DeleteAlertSourceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAlertSourceResponse, error)

	// GetAlertSourceWithResponse request
	GetAlertSourceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertSourceResponse, error)

	// UpdateAlertSourceWithBodyWithResponse request with any body
	UpdateAlertSourceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAlertSourceResponse, error)

	UpdateAlertSourceWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateAlertSourceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAlertSourceResponse, error)

	// ListAlertUrgenciesWithResponse request
	ListAlertUrgenciesWithResponse(ctx context.Context, params *ListAlertUrgenciesParams, reqEditors ...RequestEditorFn) (*ListAlertUrgenciesResponse, error)

	// CreateAlertUrgencyWithBodyWithResponse request with any body
	CreateAlertUrgencyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlertUrgencyResponse, error)

	CreateAlertUrgencyWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateAlertUrgencyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAlertUrgencyResponse, error)

	// DeleteAlertUrgencyWithResponse request
	DeleteAlertUrgencyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAlertUrgencyResponse, error)

	// GetAlertUrgencyWithResponse request
	GetAlertUrgencyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertUrgencyResponse, error)

	// UpdateAlertUrgencyWithBodyWithResponse request with any body
	UpdateAlertUrgencyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAlertUrgencyResponse, error)

	UpdateAlertUrgencyWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateAlertUrgencyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAlertUrgencyResponse, error)

	// ListAlertsWithResponse request
	ListAlertsWithResponse(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*ListAlertsResponse, error)

	// CreateAlertWithBodyWithResponse request with any body
	CreateAlertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlertResponse, error)

	CreateAlertWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateAlertApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAlertResponse, error)

	// GetAlertWithResponse request
	GetAlertWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertResponse, error)

	// AcknowledgeAlertWithResponse request
	AcknowledgeAlertWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AcknowledgeAlertResponse, error)

	// ResolveAlertWithBodyWithResponse request with any body
	ResolveAlertWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolveAlertResponse, error)

	ResolveAlertWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body ResolveAlertApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ResolveAlertResponse, error)

	// ListAuditsWithResponse request
	ListAuditsWithResponse(ctx context.Context, params *ListAuditsParams, reqEditors ...RequestEditorFn) (*ListAuditsResponse, error)

	// ListAuthorizationsWithResponse request
	ListAuthorizationsWithResponse(ctx context.Context, params *ListAuthorizationsParams, reqEditors ...RequestEditorFn) (*ListAuthorizationsResponse, error)

	// CreateAuthorizationWithBodyWithResponse request with any body
	CreateAuthorizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthorizationResponse, error)

	CreateAuthorizationWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateAuthorizationApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthorizationResponse, error)

	// DeleteAuthorizationWithResponse request
	DeleteAuthorizationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAuthorizationResponse, error)

	// GetAuthorizationWithResponse request
	GetAuthorizationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAuthorizationResponse, error)

	// UpdateAuthorizationWithBodyWithResponse request with any body
	UpdateAuthorizationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAuthorizationResponse, error)

	UpdateAuthorizationWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateAuthorizationApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAuthorizationResponse, error)

	// ListCatalogEntityPropertiesWithResponse request
	ListCatalogEntityPropertiesWithResponse(ctx context.Context, catalogEntityId string, params *ListCatalogEntityPropertiesParams, reqEditors ...RequestEditorFn) (*ListCatalogEntityPropertiesResponse, error)

	// CreateCatalogEntityPropertyWithBodyWithResponse request with any body
	CreateCatalogEntityPropertyWithBodyWithResponse(ctx context.Context, catalogEntityId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogEntityPropertyResponse, error)

	CreateCatalogEntityPropertyWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, catalogEntityId string, body CreateCatalogEntityPropertyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogEntityPropertyResponse, error)

	// DeleteCatalogEntityWithResponse request
	DeleteCatalogEntityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCatalogEntityResponse, error)

	// GetCatalogEntityWithResponse request
	GetCatalogEntityWithResponse(ctx context.Context, id string, params *GetCatalogEntityParams, reqEditors ...RequestEditorFn) (*GetCatalogEntityResponse, error)

	// UpdateCatalogEntityWithBodyWithResponse request with any body
	UpdateCatalogEntityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogEntityResponse, error)

	UpdateCatalogEntityWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateCatalogEntityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogEntityResponse, error)

	// DeleteCatalogEntityPropertyWithResponse request
	DeleteCatalogEntityPropertyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCatalogEntityPropertyResponse, error)

	// GetCatalogEntityPropertyWithResponse request
	GetCatalogEntityPropertyWithResponse(ctx context.Context, id string, params *GetCatalogEntityPropertyParams, reqEditors ...RequestEditorFn) (*GetCatalogEntityPropertyResponse, error)

	// UpdateCatalogEntityPropertyWithBodyWithResponse request with any body
	UpdateCatalogEntityPropertyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogEntityPropertyResponse, error)

	UpdateCatalogEntityPropertyWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateCatalogEntityPropertyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogEntityPropertyResponse, error)

	// DeleteCatalogFieldWithResponse request
	DeleteCatalogFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCatalogFieldResponse, error)

	// GetCatalogFieldWithResponse request
	GetCatalogFieldWithResponse(ctx context.Context, id string, params *GetCatalogFieldParams, reqEditors ...RequestEditorFn) (*GetCatalogFieldResponse, error)

	// UpdateCatalogFieldWithBodyWithResponse request with any body
	UpdateCatalogFieldWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogFieldResponse, error)

	UpdateCatalogFieldWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateCatalogFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogFieldResponse, error)

	// ListCatalogsWithResponse request
	ListCatalogsWithResponse(ctx context.Context, params *ListCatalogsParams, reqEditors ...RequestEditorFn) (*ListCatalogsResponse, error)

	// CreateCatalogWithBodyWithResponse request with any body
	CreateCatalogWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogResponse, error)

	CreateCatalogWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateCatalogApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogResponse, error)

	// ListCatalogEntitiesWithResponse request
	ListCatalogEntitiesWithResponse(ctx context.Context, catalogId string, params *ListCatalogEntitiesParams, reqEditors ...RequestEditorFn) (*ListCatalogEntitiesResponse, error)

	// CreateCatalogEntityWithBodyWithResponse request with any body
	CreateCatalogEntityWithBodyWithResponse(ctx context.Context, catalogId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogEntityResponse, error)

	CreateCatalogEntityWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, catalogId string, body CreateCatalogEntityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogEntityResponse, error)

	// ListCatalogFieldsWithResponse request
	ListCatalogFieldsWithResponse(ctx context.Context, catalogId string, params *ListCatalogFieldsParams, reqEditors ...RequestEditorFn) (*ListCatalogFieldsResponse, error)

	// CreateCatalogFieldWithBodyWithResponse request with any body
	CreateCatalogFieldWithBodyWithResponse(ctx context.Context, catalogId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogFieldResponse, error)

	CreateCatalogFieldWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, catalogId string, body CreateCatalogFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogFieldResponse, error)

	// DeleteCatalogWithResponse request
	DeleteCatalogWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCatalogResponse, error)

	// GetCatalogWithResponse request
	GetCatalogWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCatalogResponse, error)

	// UpdateCatalogWithBodyWithResponse request with any body
	UpdateCatalogWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogResponse, error)

	UpdateCatalogWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateCatalogApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogResponse, error)

	// ListCausesWithResponse request
	ListCausesWithResponse(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*ListCausesResponse, error)

	// CreateCauseWithBodyWithResponse request with any body
	CreateCauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCauseResponse, error)

	CreateCauseWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateCauseApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCauseResponse, error)

	// DeleteCauseWithResponse request
	DeleteCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCauseResponse, error)

	// GetCauseWithResponse request
	GetCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCauseResponse, error)

	// UpdateCauseWithBodyWithResponse request with any body
	UpdateCauseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCauseResponse, error)

	UpdateCauseWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateCauseApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCauseResponse, error)

	// DeleteCustomFieldOptionWithResponse request
	DeleteCustomFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldOptionResponse, error)

	// GetCustomFieldOptionWithResponse request
	GetCustomFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomFieldOptionResponse, error)

	// UpdateCustomFieldOptionWithBodyWithResponse request with any body
	UpdateCustomFieldOptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldOptionResponse, error)

	UpdateCustomFieldOptionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateCustomFieldOptionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomFieldOptionResponse, error)

	// ListCustomFieldsWithResponse request
	ListCustomFieldsWithResponse(ctx context.Context, params *ListCustomFieldsParams, reqEditors ...RequestEditorFn) (*ListCustomFieldsResponse, error)

	// CreateCustomFieldWithBodyWithResponse request with any body
	CreateCustomFieldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldResponse, error)

	CreateCustomFieldWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateCustomFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomFieldResponse, error)

	// ListCustomFieldOptionsWithResponse request
	ListCustomFieldOptionsWithResponse(ctx context.Context, customFieldId string, params *ListCustomFieldOptionsParams, reqEditors ...RequestEditorFn) (*ListCustomFieldOptionsResponse, error)

	// CreateCustomFieldOptionWithBodyWithResponse request with any body
	CreateCustomFieldOptionWithBodyWithResponse(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldOptionResponse, error)

	CreateCustomFieldOptionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, customFieldId string, body CreateCustomFieldOptionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomFieldOptionResponse, error)

	// DeleteCustomFieldWithResponse request
	DeleteCustomFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldResponse, error)

	// GetCustomFieldWithResponse request
	GetCustomFieldWithResponse(ctx context.Context, id string, params *GetCustomFieldParams, reqEditors ...RequestEditorFn) (*GetCustomFieldResponse, error)

	// UpdateCustomFieldWithBodyWithResponse request with any body
	UpdateCustomFieldWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldResponse, error)

	UpdateCustomFieldWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateCustomFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomFieldResponse, error)

	// ListCustomFormsWithResponse request
	ListCustomFormsWithResponse(ctx context.Context, params *ListCustomFormsParams, reqEditors ...RequestEditorFn) (*ListCustomFormsResponse, error)

	// CreateCustomFormWithBodyWithResponse request with any body
	CreateCustomFormWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFormResponse, error)

	CreateCustomFormWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateCustomFormApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomFormResponse, error)

	// DeleteCustomFormWithResponse request
	DeleteCustomFormWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFormResponse, error)

	// GetCustomFormWithResponse request
	GetCustomFormWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomFormResponse, error)

	// UpdateCustomFormWithBodyWithResponse request with any body
	UpdateCustomFormWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFormResponse, error)

	UpdateCustomFormWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateCustomFormApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomFormResponse, error)

	// DeleteDashboardPanelWithResponse request
	DeleteDashboardPanelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDashboardPanelResponse, error)

	// GetDashboardPanelWithResponse request
	GetDashboardPanelWithResponse(ctx context.Context, id string, params *GetDashboardPanelParams, reqEditors ...RequestEditorFn) (*GetDashboardPanelResponse, error)

	// UpdateDashboardPanelWithBodyWithResponse request with any body
	UpdateDashboardPanelWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDashboardPanelResponse, error)

	UpdateDashboardPanelWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateDashboardPanelApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDashboardPanelResponse, error)

	// DuplicateDashboardPanelWithResponse request
	DuplicateDashboardPanelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DuplicateDashboardPanelResponse, error)

	// ListDashboardsWithResponse request
	ListDashboardsWithResponse(ctx context.Context, params *ListDashboardsParams, reqEditors ...RequestEditorFn) (*ListDashboardsResponse, error)

	// CreateDashboardWithBodyWithResponse request with any body
	CreateDashboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDashboardResponse, error)

	CreateDashboardWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateDashboardApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDashboardResponse, error)

	// ListDashboardPanelsWithResponse request
	ListDashboardPanelsWithResponse(ctx context.Context, dashboardId string, params *ListDashboardPanelsParams, reqEditors ...RequestEditorFn) (*ListDashboardPanelsResponse, error)

	// CreateDashboardPanelWithBodyWithResponse request with any body
	CreateDashboardPanelWithBodyWithResponse(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDashboardPanelResponse, error)

	CreateDashboardPanelWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, dashboardId string, body CreateDashboardPanelApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDashboardPanelResponse, error)

	// DeleteDashboardWithResponse request
	DeleteDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDashboardResponse, error)

	// GetDashboardWithResponse request
	GetDashboardWithResponse(ctx context.Context, id string, params *GetDashboardParams, reqEditors ...RequestEditorFn) (*GetDashboardResponse, error)

	// UpdateDashboardWithBodyWithResponse request with any body
	UpdateDashboardWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDashboardResponse, error)

	UpdateDashboardWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateDashboardApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDashboardResponse, error)

	// DuplicateDashboardWithResponse request
	DuplicateDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DuplicateDashboardResponse, error)

	// SetDefaultDashboardWithResponse request
	SetDefaultDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SetDefaultDashboardResponse, error)

	// ListEnvironmentsWithResponse request
	ListEnvironmentsWithResponse(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error)

	// CreateEnvironmentWithBodyWithResponse request with any body
	CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	CreateEnvironmentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateEnvironmentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	// DeleteEnvironmentWithResponse request
	DeleteEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error)

	// GetEnvironmentWithResponse request
	GetEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// UpdateEnvironmentWithBodyWithResponse request with any body
	UpdateEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error)

	UpdateEnvironmentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateEnvironmentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error)

	// DeleteEscalationLevelWithResponse request
	DeleteEscalationLevelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEscalationLevelResponse, error)

	// GetEscalationLevelWithResponse request
	GetEscalationLevelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEscalationLevelResponse, error)

	// UpdateEscalationLevelWithBodyWithResponse request with any body
	UpdateEscalationLevelWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEscalationLevelResponse, error)

	UpdateEscalationLevelWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateEscalationLevelApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEscalationLevelResponse, error)

	// ListEscalationLevelsPathsWithResponse request
	ListEscalationLevelsPathsWithResponse(ctx context.Context, escalationPathId string, params *ListEscalationLevelsPathsParams, reqEditors ...RequestEditorFn) (*ListEscalationLevelsPathsResponse, error)

	// CreateEscalationLevelPathsWithBodyWithResponse request with any body
	CreateEscalationLevelPathsWithBodyWithResponse(ctx context.Context, escalationPathId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEscalationLevelPathsResponse, error)

	CreateEscalationLevelPathsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, escalationPathId string, body CreateEscalationLevelPathsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEscalationLevelPathsResponse, error)

	// DeleteEscalationPathWithResponse request
	DeleteEscalationPathWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEscalationPathResponse, error)

	// GetEscalationPathWithResponse request
	GetEscalationPathWithResponse(ctx context.Context, id string, params *GetEscalationPathParams, reqEditors ...RequestEditorFn) (*GetEscalationPathResponse, error)

	// UpdateEscalationPathWithBodyWithResponse request with any body
	UpdateEscalationPathWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEscalationPathResponse, error)

	UpdateEscalationPathWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateEscalationPathApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEscalationPathResponse, error)

	// ListEscalationPoliciesWithResponse request
	ListEscalationPoliciesWithResponse(ctx context.Context, params *ListEscalationPoliciesParams, reqEditors ...RequestEditorFn) (*ListEscalationPoliciesResponse, error)

	// CreateEscalationPolicyWithBodyWithResponse request with any body
	CreateEscalationPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEscalationPolicyResponse, error)

	CreateEscalationPolicyWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateEscalationPolicyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEscalationPolicyResponse, error)

	// ListEscalationLevelsPoliciesWithResponse request
	ListEscalationLevelsPoliciesWithResponse(ctx context.Context, escalationPolicyId string, params *ListEscalationLevelsPoliciesParams, reqEditors ...RequestEditorFn) (*ListEscalationLevelsPoliciesResponse, error)

	// CreateEscalationLevelPoliciesWithBodyWithResponse request with any body
	CreateEscalationLevelPoliciesWithBodyWithResponse(ctx context.Context, escalationPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEscalationLevelPoliciesResponse, error)

	CreateEscalationLevelPoliciesWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, escalationPolicyId string, body CreateEscalationLevelPoliciesApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEscalationLevelPoliciesResponse, error)

	// ListEscalationPathsWithResponse request
	ListEscalationPathsWithResponse(ctx context.Context, escalationPolicyId string, params *ListEscalationPathsParams, reqEditors ...RequestEditorFn) (*ListEscalationPathsResponse, error)

	// CreateEscalationPathWithBodyWithResponse request with any body
	CreateEscalationPathWithBodyWithResponse(ctx context.Context, escalationPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEscalationPathResponse, error)

	CreateEscalationPathWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, escalationPolicyId string, body CreateEscalationPathApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEscalationPathResponse, error)

	// DeleteEscalationPolicyWithResponse request
	DeleteEscalationPolicyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEscalationPolicyResponse, error)

	// GetEscalationPolicyWithResponse request
	GetEscalationPolicyWithResponse(ctx context.Context, id string, params *GetEscalationPolicyParams, reqEditors ...RequestEditorFn) (*GetEscalationPolicyResponse, error)

	// UpdateEscalationPolicyWithBodyWithResponse request with any body
	UpdateEscalationPolicyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEscalationPolicyResponse, error)

	UpdateEscalationPolicyWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateEscalationPolicyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEscalationPolicyResponse, error)

	// DeleteIncidentEventWithResponse request
	DeleteIncidentEventWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventResponse, error)

	// GetIncidentEventsWithResponse request
	GetIncidentEventsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventsResponse, error)

	// UpdateIncidentEventWithBodyWithResponse request with any body
	UpdateIncidentEventWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventResponse, error)

	UpdateIncidentEventWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentEventApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentEventResponse, error)

	// ListIncidentEventFunctionalitiesWithResponse request
	ListIncidentEventFunctionalitiesWithResponse(ctx context.Context, incidentEventId string, params *ListIncidentEventFunctionalitiesParams, reqEditors ...RequestEditorFn) (*ListIncidentEventFunctionalitiesResponse, error)

	// CreateIncidentEventFunctionalityWithBodyWithResponse request with any body
	CreateIncidentEventFunctionalityWithBodyWithResponse(ctx context.Context, incidentEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventFunctionalityResponse, error)

	CreateIncidentEventFunctionalityWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentEventId string, body CreateIncidentEventFunctionalityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentEventFunctionalityResponse, error)

	// ListIncidentEventServicesWithResponse request
	ListIncidentEventServicesWithResponse(ctx context.Context, incidentEventId string, params *ListIncidentEventServicesParams, reqEditors ...RequestEditorFn) (*ListIncidentEventServicesResponse, error)

	// CreateIncidentEventServiceWithBodyWithResponse request with any body
	CreateIncidentEventServiceWithBodyWithResponse(ctx context.Context, incidentEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventServiceResponse, error)

	CreateIncidentEventServiceWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentEventId string, body CreateIncidentEventServiceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentEventServiceResponse, error)

	// GetIncidentFeedbacksWithResponse request
	GetIncidentFeedbacksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentFeedbacksResponse, error)

	// UpdateIncidentFeedbackWithBodyWithResponse request with any body
	UpdateIncidentFeedbackWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentFeedbackResponse, error)

	UpdateIncidentFeedbackWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentFeedbackApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentFeedbackResponse, error)

	// DeleteFormFieldOptionWithResponse request
	DeleteFormFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFormFieldOptionResponse, error)

	// GetFormFieldOptionWithResponse request
	GetFormFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFormFieldOptionResponse, error)

	// UpdateFormFieldOptionWithBodyWithResponse request with any body
	UpdateFormFieldOptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFormFieldOptionResponse, error)

	UpdateFormFieldOptionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateFormFieldOptionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFormFieldOptionResponse, error)

	// DeleteFormFieldPlacementConditionWithResponse request
	DeleteFormFieldPlacementConditionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFormFieldPlacementConditionResponse, error)

	// GetFormFieldPlacementConditionWithResponse request
	GetFormFieldPlacementConditionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFormFieldPlacementConditionResponse, error)

	// UpdateFormFieldPlacementConditionWithBodyWithResponse request with any body
	UpdateFormFieldPlacementConditionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFormFieldPlacementConditionResponse, error)

	UpdateFormFieldPlacementConditionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateFormFieldPlacementConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFormFieldPlacementConditionResponse, error)

	// ListFormFieldPlacementConditionsWithResponse request
	ListFormFieldPlacementConditionsWithResponse(ctx context.Context, formFieldPlacementId string, params *ListFormFieldPlacementConditionsParams, reqEditors ...RequestEditorFn) (*ListFormFieldPlacementConditionsResponse, error)

	// CreateFormFieldPlacementConditionWithBodyWithResponse request with any body
	CreateFormFieldPlacementConditionWithBodyWithResponse(ctx context.Context, formFieldPlacementId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFormFieldPlacementConditionResponse, error)

	CreateFormFieldPlacementConditionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, formFieldPlacementId string, body CreateFormFieldPlacementConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFormFieldPlacementConditionResponse, error)

	// DeleteFormFieldPlacementWithResponse request
	DeleteFormFieldPlacementWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFormFieldPlacementResponse, error)

	// GetFormFieldPlacementWithResponse request
	GetFormFieldPlacementWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFormFieldPlacementResponse, error)

	// UpdateFormFieldPlacementWithBodyWithResponse request with any body
	UpdateFormFieldPlacementWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFormFieldPlacementResponse, error)

	UpdateFormFieldPlacementWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateFormFieldPlacementApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFormFieldPlacementResponse, error)

	// DeleteFormFieldPositionWithResponse request
	DeleteFormFieldPositionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFormFieldPositionResponse, error)

	// GetFormFieldPositionWithResponse request
	GetFormFieldPositionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFormFieldPositionResponse, error)

	// UpdateFormFieldPositionWithBodyWithResponse request with any body
	UpdateFormFieldPositionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFormFieldPositionResponse, error)

	UpdateFormFieldPositionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateFormFieldPositionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFormFieldPositionResponse, error)

	// ListFormFieldsWithResponse request
	ListFormFieldsWithResponse(ctx context.Context, params *ListFormFieldsParams, reqEditors ...RequestEditorFn) (*ListFormFieldsResponse, error)

	// CreateFormFieldWithBodyWithResponse request with any body
	CreateFormFieldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFormFieldResponse, error)

	CreateFormFieldWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateFormFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFormFieldResponse, error)

	// ListFormFieldOptionsWithResponse request
	ListFormFieldOptionsWithResponse(ctx context.Context, formFieldId string, params *ListFormFieldOptionsParams, reqEditors ...RequestEditorFn) (*ListFormFieldOptionsResponse, error)

	// CreateFormFieldOptionWithBodyWithResponse request with any body
	CreateFormFieldOptionWithBodyWithResponse(ctx context.Context, formFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFormFieldOptionResponse, error)

	CreateFormFieldOptionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, formFieldId string, body CreateFormFieldOptionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFormFieldOptionResponse, error)

	// ListFormFieldPlacementsWithResponse request
	ListFormFieldPlacementsWithResponse(ctx context.Context, formFieldId string, params *ListFormFieldPlacementsParams, reqEditors ...RequestEditorFn) (*ListFormFieldPlacementsResponse, error)

	// CreateFormFieldPlacementWithBodyWithResponse request with any body
	CreateFormFieldPlacementWithBodyWithResponse(ctx context.Context, formFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFormFieldPlacementResponse, error)

	CreateFormFieldPlacementWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, formFieldId string, body CreateFormFieldPlacementApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFormFieldPlacementResponse, error)

	// ListFormFieldPositionsWithResponse request
	ListFormFieldPositionsWithResponse(ctx context.Context, formFieldId string, params *ListFormFieldPositionsParams, reqEditors ...RequestEditorFn) (*ListFormFieldPositionsResponse, error)

	// CreateFormFieldPositionWithBodyWithResponse request with any body
	CreateFormFieldPositionWithBodyWithResponse(ctx context.Context, formFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFormFieldPositionResponse, error)

	CreateFormFieldPositionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, formFieldId string, body CreateFormFieldPositionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFormFieldPositionResponse, error)

	// DeleteFormFieldWithResponse request
	DeleteFormFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFormFieldResponse, error)

	// GetFormFieldWithResponse request
	GetFormFieldWithResponse(ctx context.Context, id string, params *GetFormFieldParams, reqEditors ...RequestEditorFn) (*GetFormFieldResponse, error)

	// UpdateFormFieldWithBodyWithResponse request with any body
	UpdateFormFieldWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFormFieldResponse, error)

	UpdateFormFieldWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateFormFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFormFieldResponse, error)

	// DeleteFormSetConditionWithResponse request
	DeleteFormSetConditionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFormSetConditionResponse, error)

	// GetFormSetConditionWithResponse request
	GetFormSetConditionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFormSetConditionResponse, error)

	// UpdateFormSetConditionWithBodyWithResponse request with any body
	UpdateFormSetConditionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFormSetConditionResponse, error)

	UpdateFormSetConditionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateFormSetConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFormSetConditionResponse, error)

	// ListFormSetsWithResponse request
	ListFormSetsWithResponse(ctx context.Context, params *ListFormSetsParams, reqEditors ...RequestEditorFn) (*ListFormSetsResponse, error)

	// CreateFormSetWithBodyWithResponse request with any body
	CreateFormSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFormSetResponse, error)

	CreateFormSetWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateFormSetApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFormSetResponse, error)

	// ListFormSetConditionsWithResponse request
	ListFormSetConditionsWithResponse(ctx context.Context, formSetId string, params *ListFormSetConditionsParams, reqEditors ...RequestEditorFn) (*ListFormSetConditionsResponse, error)

	// CreateFormSetConditionWithBodyWithResponse request with any body
	CreateFormSetConditionWithBodyWithResponse(ctx context.Context, formSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFormSetConditionResponse, error)

	CreateFormSetConditionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, formSetId string, body CreateFormSetConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFormSetConditionResponse, error)

	// DeleteFormSetWithResponse request
	DeleteFormSetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFormSetResponse, error)

	// GetFormSetWithResponse request
	GetFormSetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFormSetResponse, error)

	// UpdateFormSetWithBodyWithResponse request with any body
	UpdateFormSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFormSetResponse, error)

	UpdateFormSetWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateFormSetApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFormSetResponse, error)

	// ListFunctionalitiesWithResponse request
	ListFunctionalitiesWithResponse(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*ListFunctionalitiesResponse, error)

	// CreateFunctionalityWithBodyWithResponse request with any body
	CreateFunctionalityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFunctionalityResponse, error)

	CreateFunctionalityWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateFunctionalityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFunctionalityResponse, error)

	// DeleteFunctionalityWithResponse request
	DeleteFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFunctionalityResponse, error)

	// GetFunctionalityWithResponse request
	GetFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFunctionalityResponse, error)

	// UpdateFunctionalityWithBodyWithResponse request with any body
	UpdateFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFunctionalityResponse, error)

	UpdateFunctionalityWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateFunctionalityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFunctionalityResponse, error)

	// GetFunctionalityIncidentsChartWithResponse request
	GetFunctionalityIncidentsChartWithResponse(ctx context.Context, id string, params *GetFunctionalityIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetFunctionalityIncidentsChartResponse, error)

	// GetFunctionalityUptimeChartWithResponse request
	GetFunctionalityUptimeChartWithResponse(ctx context.Context, id string, params *GetFunctionalityUptimeChartParams, reqEditors ...RequestEditorFn) (*GetFunctionalityUptimeChartResponse, error)

	// ListHeartbeatsWithResponse request
	ListHeartbeatsWithResponse(ctx context.Context, params *ListHeartbeatsParams, reqEditors ...RequestEditorFn) (*ListHeartbeatsResponse, error)

	// CreateHeartbeatWithBodyWithResponse request with any body
	CreateHeartbeatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHeartbeatResponse, error)

	CreateHeartbeatWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateHeartbeatApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHeartbeatResponse, error)

	// PingHeartbeatWithResponse request
	PingHeartbeatWithResponse(ctx context.Context, heartbeatId string, reqEditors ...RequestEditorFn) (*PingHeartbeatResponse, error)

	// DeleteHeartbeatWithResponse request
	DeleteHeartbeatWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteHeartbeatResponse, error)

	// GetHeartbeatWithResponse request
	GetHeartbeatWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetHeartbeatResponse, error)

	// UpdateHeartbeatWithBodyWithResponse request with any body
	UpdateHeartbeatWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateHeartbeatResponse, error)

	UpdateHeartbeatWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateHeartbeatApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateHeartbeatResponse, error)

	// DeleteIncidentCustomFieldSelectionWithResponse request
	DeleteIncidentCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentCustomFieldSelectionResponse, error)

	// GetIncidentCustomFieldSelectionWithResponse request
	GetIncidentCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentCustomFieldSelectionResponse, error)

	// UpdateIncidentCustomFieldSelectionWithBodyWithResponse request with any body
	UpdateIncidentCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentCustomFieldSelectionResponse, error)

	UpdateIncidentCustomFieldSelectionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentCustomFieldSelectionResponse, error)

	// DeleteIncidentEventFunctionalityWithResponse request
	DeleteIncidentEventFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventFunctionalityResponse, error)

	// GetIncidentEventFunctionalitiesWithResponse request
	GetIncidentEventFunctionalitiesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventFunctionalitiesResponse, error)

	// UpdateIncidentEventFunctionalityWithBodyWithResponse request with any body
	UpdateIncidentEventFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventFunctionalityResponse, error)

	UpdateIncidentEventFunctionalityWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentEventFunctionalityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentEventFunctionalityResponse, error)

	// DeleteIncidentEventServiceWithResponse request
	DeleteIncidentEventServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventServiceResponse, error)

	// GetIncidentEventServicesWithResponse request
	GetIncidentEventServicesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventServicesResponse, error)

	// UpdateIncidentEventServiceWithBodyWithResponse request with any body
	UpdateIncidentEventServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventServiceResponse, error)

	UpdateIncidentEventServiceWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentEventServiceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentEventServiceResponse, error)

	// DeleteIncidentFormFieldSelectionWithResponse request
	DeleteIncidentFormFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentFormFieldSelectionResponse, error)

	// GetIncidentFormFieldSelectionWithResponse request
	GetIncidentFormFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentFormFieldSelectionResponse, error)

	// UpdateIncidentFormFieldSelectionWithBodyWithResponse request with any body
	UpdateIncidentFormFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentFormFieldSelectionResponse, error)

	UpdateIncidentFormFieldSelectionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentFormFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentFormFieldSelectionResponse, error)

	// DeleteIncidentPermissionSetBooleanWithResponse request
	DeleteIncidentPermissionSetBooleanWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentPermissionSetBooleanResponse, error)

	// GetIncidentPermissionSetBooleanWithResponse request
	GetIncidentPermissionSetBooleanWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentPermissionSetBooleanResponse, error)

	// UpdateIncidentPermissionSetBooleanWithBodyWithResponse request with any body
	UpdateIncidentPermissionSetBooleanWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPermissionSetBooleanResponse, error)

	UpdateIncidentPermissionSetBooleanWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentPermissionSetBooleanApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentPermissionSetBooleanResponse, error)

	// DeleteIncidentPermissionSetResourceWithResponse request
	DeleteIncidentPermissionSetResourceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentPermissionSetResourceResponse, error)

	// GetIncidentPermissionSetResourceWithResponse request
	GetIncidentPermissionSetResourceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentPermissionSetResourceResponse, error)

	// UpdateIncidentPermissionSetResourceWithBodyWithResponse request with any body
	UpdateIncidentPermissionSetResourceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPermissionSetResourceResponse, error)

	UpdateIncidentPermissionSetResourceWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentPermissionSetResourceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentPermissionSetResourceResponse, error)

	// ListIncidentPermissionSetsWithResponse request
	ListIncidentPermissionSetsWithResponse(ctx context.Context, params *ListIncidentPermissionSetsParams, reqEditors ...RequestEditorFn) (*ListIncidentPermissionSetsResponse, error)

	// CreateIncidentPermissionSetWithBodyWithResponse request with any body
	CreateIncidentPermissionSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentPermissionSetResponse, error)

	CreateIncidentPermissionSetWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateIncidentPermissionSetApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentPermissionSetResponse, error)

	// DeleteIncidentPermissionSetWithResponse request
	DeleteIncidentPermissionSetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentPermissionSetResponse, error)

	// GetIncidentPermissionSetWithResponse request
	GetIncidentPermissionSetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentPermissionSetResponse, error)

	// UpdateIncidentPermissionSetWithBodyWithResponse request with any body
	UpdateIncidentPermissionSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPermissionSetResponse, error)

	UpdateIncidentPermissionSetWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentPermissionSetApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentPermissionSetResponse, error)

	// ListIncidentPermissionSetBooleansWithResponse request
	ListIncidentPermissionSetBooleansWithResponse(ctx context.Context, incidentPermissionSetId string, params *ListIncidentPermissionSetBooleansParams, reqEditors ...RequestEditorFn) (*ListIncidentPermissionSetBooleansResponse, error)

	// CreateIncidentPermissionSetBooleanWithBodyWithResponse request with any body
	CreateIncidentPermissionSetBooleanWithBodyWithResponse(ctx context.Context, incidentPermissionSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentPermissionSetBooleanResponse, error)

	CreateIncidentPermissionSetBooleanWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentPermissionSetId string, body CreateIncidentPermissionSetBooleanApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentPermissionSetBooleanResponse, error)

	// ListIncidentPermissionSetResourcesWithResponse request
	ListIncidentPermissionSetResourcesWithResponse(ctx context.Context, incidentPermissionSetId string, params *ListIncidentPermissionSetResourcesParams, reqEditors ...RequestEditorFn) (*ListIncidentPermissionSetResourcesResponse, error)

	// CreateIncidentPermissionSetResourceWithBodyWithResponse request with any body
	CreateIncidentPermissionSetResourceWithBodyWithResponse(ctx context.Context, incidentPermissionSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentPermissionSetResourceResponse, error)

	CreateIncidentPermissionSetResourceWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentPermissionSetId string, body CreateIncidentPermissionSetResourceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentPermissionSetResourceResponse, error)

	// GetIncidentRetrospectiveStepWithResponse request
	GetIncidentRetrospectiveStepWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRetrospectiveStepResponse, error)

	// UpdateIncidentRetrospectiveStepWithBodyWithResponse request with any body
	UpdateIncidentRetrospectiveStepWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRetrospectiveStepResponse, error)

	UpdateIncidentRetrospectiveStepWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentRetrospectiveStepApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentRetrospectiveStepResponse, error)

	// DeleteIncidentRoleTaskWithResponse request
	DeleteIncidentRoleTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleTaskResponse, error)

	// GetIncidentRoleTaskWithResponse request
	GetIncidentRoleTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleTaskResponse, error)

	// UpdateIncidentRoleTaskWithBodyWithResponse request with any body
	UpdateIncidentRoleTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleTaskResponse, error)

	UpdateIncidentRoleTaskWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentRoleTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleTaskResponse, error)

	// ListIncidentRolesWithResponse request
	ListIncidentRolesWithResponse(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*ListIncidentRolesResponse, error)

	// CreateIncidentRoleWithBodyWithResponse request with any body
	CreateIncidentRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleResponse, error)

	CreateIncidentRoleWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateIncidentRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentRoleResponse, error)

	// DeleteIncidentRoleWithResponse request
	DeleteIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleResponse, error)

	// GetIncidentRoleWithResponse request
	GetIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleResponse, error)

	// UpdateIncidentRoleWithBodyWithResponse request with any body
	UpdateIncidentRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleResponse, error)

	UpdateIncidentRoleWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleResponse, error)

	// ListIncidentRoleTasksWithResponse request
	ListIncidentRoleTasksWithResponse(ctx context.Context, incidentRoleId string, params *ListIncidentRoleTasksParams, reqEditors ...RequestEditorFn) (*ListIncidentRoleTasksResponse, error)

	// CreateIncidentRoleTaskWithBodyWithResponse request with any body
	CreateIncidentRoleTaskWithBodyWithResponse(ctx context.Context, incidentRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleTaskResponse, error)

	CreateIncidentRoleTaskWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentRoleId string, body CreateIncidentRoleTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentRoleTaskResponse, error)

	// DeleteIncidentSubStatusWithResponse request
	DeleteIncidentSubStatusWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentSubStatusResponse, error)

	// GetIncidentSubStatusWithResponse request
	GetIncidentSubStatusWithResponse(ctx context.Context, id string, params *GetIncidentSubStatusParams, reqEditors ...RequestEditorFn) (*GetIncidentSubStatusResponse, error)

	// UpdateIncidentSubStatusWithBodyWithResponse request with any body
	UpdateIncidentSubStatusWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentSubStatusResponse, error)

	UpdateIncidentSubStatusWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentSubStatusApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentSubStatusResponse, error)

	// ListIncidentTypesWithResponse request
	ListIncidentTypesWithResponse(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*ListIncidentTypesResponse, error)

	// CreateIncidentTypeWithBodyWithResponse request with any body
	CreateIncidentTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTypeResponse, error)

	CreateIncidentTypeWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateIncidentTypeApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentTypeResponse, error)

	// DeleteIncidentTypeWithResponse request
	DeleteIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTypeResponse, error)

	// GetIncidentTypeWithResponse request
	GetIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTypeResponse, error)

	// UpdateIncidentTypeWithBodyWithResponse request with any body
	UpdateIncidentTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTypeResponse, error)

	UpdateIncidentTypeWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentTypeApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentTypeResponse, error)

	// ListIncidentsWithResponse request
	ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*ListIncidentsResponse, error)

	// CreateIncidentWithBodyWithResponse request with any body
	CreateIncidentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error)

	CreateIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error)

	// DeleteIncidentWithResponse request
	DeleteIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentResponse, error)

	// GetIncidentWithResponse request
	GetIncidentWithResponse(ctx context.Context, id string, params *GetIncidentParams, reqEditors ...RequestEditorFn) (*GetIncidentResponse, error)

	// UpdateIncidentWithBodyWithResponse request with any body
	UpdateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentResponse, error)

	UpdateIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentResponse, error)

	// AddSubscribersToIncidentWithBodyWithResponse request with any body
	AddSubscribersToIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddSubscribersToIncidentResponse, error)

	AddSubscribersToIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body AddSubscribersToIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*AddSubscribersToIncidentResponse, error)

	// AssignUserToIncidentWithBodyWithResponse request with any body
	AssignUserToIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignUserToIncidentResponse, error)

	AssignUserToIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body AssignUserToIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignUserToIncidentResponse, error)

	// CancelIncidentWithBodyWithResponse request with any body
	CancelIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelIncidentResponse, error)

	CancelIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body CancelIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelIncidentResponse, error)

	// MarkAsDuplicateIncidentWithBodyWithResponse request with any body
	MarkAsDuplicateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarkAsDuplicateIncidentResponse, error)

	MarkAsDuplicateIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body MarkAsDuplicateIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*MarkAsDuplicateIncidentResponse, error)

	// TriageIncidentWithBodyWithResponse request with any body
	TriageIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TriageIncidentResponse, error)

	TriageIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body TriageIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*TriageIncidentResponse, error)

	// MitigateIncidentWithBodyWithResponse request with any body
	MitigateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MitigateIncidentResponse, error)

	MitigateIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body MitigateIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*MitigateIncidentResponse, error)

	// RemoveSubscribersToIncidentWithBodyWithResponse request with any body
	RemoveSubscribersToIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveSubscribersToIncidentResponse, error)

	RemoveSubscribersToIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body RemoveSubscribersToIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveSubscribersToIncidentResponse, error)

	// ResolveIncidentWithBodyWithResponse request with any body
	ResolveIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error)

	ResolveIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body ResolveIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error)

	// RestartIncidentWithBodyWithResponse request with any body
	RestartIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RestartIncidentResponse, error)

	RestartIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body RestartIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*RestartIncidentResponse, error)

	// RemoveAssignedUserFromIncidentWithBodyWithResponse request with any body
	RemoveAssignedUserFromIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveAssignedUserFromIncidentResponse, error)

	RemoveAssignedUserFromIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body RemoveAssignedUserFromIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveAssignedUserFromIncidentResponse, error)

	// ListIncidentActionItemsWithResponse request
	ListIncidentActionItemsWithResponse(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*ListIncidentActionItemsResponse, error)

	// CreateIncidentActionItemWithBodyWithResponse request with any body
	CreateIncidentActionItemWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentActionItemResponse, error)

	CreateIncidentActionItemWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentId string, body CreateIncidentActionItemApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentActionItemResponse, error)

	// ListIncidentAlertsWithResponse request
	ListIncidentAlertsWithResponse(ctx context.Context, incidentId string, params *ListIncidentAlertsParams, reqEditors ...RequestEditorFn) (*ListIncidentAlertsResponse, error)

	// AttachAlertWithBodyWithResponse request with any body
	AttachAlertWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachAlertResponse, error)

	AttachAlertWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentId string, body AttachAlertApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*AttachAlertResponse, error)

	// ListIncidentCustomFieldSelectionsWithResponse request
	ListIncidentCustomFieldSelectionsWithResponse(ctx context.Context, incidentId string, params *ListIncidentCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListIncidentCustomFieldSelectionsResponse, error)

	// CreateIncidentCustomFieldSelectionWithBodyWithResponse request with any body
	CreateIncidentCustomFieldSelectionWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentCustomFieldSelectionResponse, error)

	CreateIncidentCustomFieldSelectionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentId string, body CreateIncidentCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentCustomFieldSelectionResponse, error)

	// ListIncidentEventsWithResponse request
	ListIncidentEventsWithResponse(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*ListIncidentEventsResponse, error)

	// CreateIncidentEventWithBodyWithResponse request with any body
	CreateIncidentEventWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventResponse, error)

	CreateIncidentEventWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentId string, body CreateIncidentEventApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentEventResponse, error)

	// ListIncidentFeedbacksWithResponse request
	ListIncidentFeedbacksWithResponse(ctx context.Context, incidentId string, params *ListIncidentFeedbacksParams, reqEditors ...RequestEditorFn) (*ListIncidentFeedbacksResponse, error)

	// CreateIncidentFeedbackWithBodyWithResponse request with any body
	CreateIncidentFeedbackWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentFeedbackResponse, error)

	CreateIncidentFeedbackWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentId string, body CreateIncidentFeedbackApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentFeedbackResponse, error)

	// ListIncidentFormFieldSelectionsWithResponse request
	ListIncidentFormFieldSelectionsWithResponse(ctx context.Context, incidentId string, params *ListIncidentFormFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListIncidentFormFieldSelectionsResponse, error)

	// CreateIncidentFormFieldSelectionWithBodyWithResponse request with any body
	CreateIncidentFormFieldSelectionWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentFormFieldSelectionResponse, error)

	CreateIncidentFormFieldSelectionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentId string, body CreateIncidentFormFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentFormFieldSelectionResponse, error)

	// ListIncidentStatusPagesWithResponse request
	ListIncidentStatusPagesWithResponse(ctx context.Context, incidentId string, params *ListIncidentStatusPagesParams, reqEditors ...RequestEditorFn) (*ListIncidentStatusPagesResponse, error)

	// CreateIncidentStatusPageWithBodyWithResponse request with any body
	CreateIncidentStatusPageWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentStatusPageResponse, error)

	CreateIncidentStatusPageWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentId string, body CreateIncidentStatusPageApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentStatusPageResponse, error)

	// ListIncidentSubStatusesWithResponse request
	ListIncidentSubStatusesWithResponse(ctx context.Context, incidentId string, params *ListIncidentSubStatusesParams, reqEditors ...RequestEditorFn) (*ListIncidentSubStatusesResponse, error)

	// CreateIncidentSubStatusWithBodyWithResponse request with any body
	CreateIncidentSubStatusWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentSubStatusResponse, error)

	CreateIncidentSubStatusWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentId string, body CreateIncidentSubStatusApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentSubStatusResponse, error)

	// GetIpRangesWithResponse request
	GetIpRangesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIpRangesResponse, error)

	// ListLiveCallRoutersWithResponse request
	ListLiveCallRoutersWithResponse(ctx context.Context, params *ListLiveCallRoutersParams, reqEditors ...RequestEditorFn) (*ListLiveCallRoutersResponse, error)

	// CreateLiveCallRouterWithBodyWithResponse request with any body
	CreateLiveCallRouterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLiveCallRouterResponse, error)

	CreateLiveCallRouterWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateLiveCallRouterApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLiveCallRouterResponse, error)

	// GeneratePhoneNumberLiveCallRouterWithResponse request
	GeneratePhoneNumberLiveCallRouterWithResponse(ctx context.Context, params *GeneratePhoneNumberLiveCallRouterParams, reqEditors ...RequestEditorFn) (*GeneratePhoneNumberLiveCallRouterResponse, error)

	// DeleteLiveCallRouterWithResponse request
	DeleteLiveCallRouterWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteLiveCallRouterResponse, error)

	// GetLiveCallRouterWithResponse request
	GetLiveCallRouterWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetLiveCallRouterResponse, error)

	// UpdateLiveCallRouterWithBodyWithResponse request with any body
	UpdateLiveCallRouterWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateLiveCallRouterResponse, error)

	UpdateLiveCallRouterWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateLiveCallRouterApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateLiveCallRouterResponse, error)

	// DeleteUserNotificationRuleWithResponse request
	DeleteUserNotificationRuleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteUserNotificationRuleResponse, error)

	// GetUserNotificationRuleWithResponse request
	GetUserNotificationRuleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetUserNotificationRuleResponse, error)

	// UpdateUserNotificationRuleWithBodyWithResponse request with any body
	UpdateUserNotificationRuleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserNotificationRuleResponse, error)

	UpdateUserNotificationRuleWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateUserNotificationRuleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserNotificationRuleResponse, error)

	// ListOnCallRolesWithResponse request
	ListOnCallRolesWithResponse(ctx context.Context, params *ListOnCallRolesParams, reqEditors ...RequestEditorFn) (*ListOnCallRolesResponse, error)

	// CreateOnCallRoleWithBodyWithResponse request with any body
	CreateOnCallRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOnCallRoleResponse, error)

	CreateOnCallRoleWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateOnCallRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOnCallRoleResponse, error)

	// DeleteOnCallRoleWithResponse request
	DeleteOnCallRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteOnCallRoleResponse, error)

	// GetOnCallRoleWithResponse request
	GetOnCallRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOnCallRoleResponse, error)

	// UpdateOnCallRoleWithBodyWithResponse request with any body
	UpdateOnCallRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOnCallRoleResponse, error)

	UpdateOnCallRoleWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateOnCallRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOnCallRoleResponse, error)

	// DeleteOnCallShadowWithResponse request
	DeleteOnCallShadowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteOnCallShadowResponse, error)

	// GetOnCallShadowWithResponse request
	GetOnCallShadowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOnCallShadowResponse, error)

	// UpdateOnCallShadowWithBodyWithResponse request with any body
	UpdateOnCallShadowWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOnCallShadowResponse, error)

	UpdateOnCallShadowWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateOnCallShadowApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOnCallShadowResponse, error)

	// DeleteOverrideShiftWithResponse request
	DeleteOverrideShiftWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteOverrideShiftResponse, error)

	// GetOverrideShiftWithResponse request
	GetOverrideShiftWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOverrideShiftResponse, error)

	// UpdateOverrideShiftWithBodyWithResponse request with any body
	UpdateOverrideShiftWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOverrideShiftResponse, error)

	UpdateOverrideShiftWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateOverrideShiftApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOverrideShiftResponse, error)

	// DeletePlaybookTaskWithResponse request
	DeletePlaybookTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookTaskResponse, error)

	// GetPlaybookTaskWithResponse request
	GetPlaybookTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookTaskResponse, error)

	// UpdatePlaybookTaskWithBodyWithResponse request with any body
	UpdatePlaybookTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookTaskResponse, error)

	UpdatePlaybookTaskWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdatePlaybookTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlaybookTaskResponse, error)

	// ListPlaybooksWithResponse request
	ListPlaybooksWithResponse(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*ListPlaybooksResponse, error)

	// CreatePlaybookWithBodyWithResponse request with any body
	CreatePlaybookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookResponse, error)

	CreatePlaybookWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreatePlaybookApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlaybookResponse, error)

	// DeletePlaybookWithResponse request
	DeletePlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookResponse, error)

	// GetPlaybookWithResponse request
	GetPlaybookWithResponse(ctx context.Context, id string, params *GetPlaybookParams, reqEditors ...RequestEditorFn) (*GetPlaybookResponse, error)

	// UpdatePlaybookWithBodyWithResponse request with any body
	UpdatePlaybookWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookResponse, error)

	UpdatePlaybookWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdatePlaybookApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlaybookResponse, error)

	// ListPlaybookTasksWithResponse request
	ListPlaybookTasksWithResponse(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*ListPlaybookTasksResponse, error)

	// CreatePlaybookTaskWithBodyWithResponse request with any body
	CreatePlaybookTaskWithBodyWithResponse(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookTaskResponse, error)

	CreatePlaybookTaskWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, playbookId string, body CreatePlaybookTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlaybookTaskResponse, error)

	// ListPostmortemTemplatesWithResponse request
	ListPostmortemTemplatesWithResponse(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*ListPostmortemTemplatesResponse, error)

	// CreatePostmortemTemplateWithBodyWithResponse request with any body
	CreatePostmortemTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostmortemTemplateResponse, error)

	CreatePostmortemTemplateWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreatePostmortemTemplateApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePostmortemTemplateResponse, error)

	// DeletePostmortemTemplateWithResponse request
	DeletePostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePostmortemTemplateResponse, error)

	// GetPostmortemTemplateWithResponse request
	GetPostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPostmortemTemplateResponse, error)

	// UpdatePostmortemTemplateWithBodyWithResponse request with any body
	UpdatePostmortemTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostmortemTemplateResponse, error)

	UpdatePostmortemTemplateWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdatePostmortemTemplateApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePostmortemTemplateResponse, error)

	// ListIncidentPostMortemsWithResponse request
	ListIncidentPostMortemsWithResponse(ctx context.Context, params *ListIncidentPostMortemsParams, reqEditors ...RequestEditorFn) (*ListIncidentPostMortemsResponse, error)

	// ListIncidentPostmortemWithResponse request
	ListIncidentPostmortemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ListIncidentPostmortemResponse, error)

	// UpdateIncidentPostmortemWithBodyWithResponse request with any body
	UpdateIncidentPostmortemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPostmortemResponse, error)

	UpdateIncidentPostmortemWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentPostmortemApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentPostmortemResponse, error)

	// ListPulsesWithResponse request
	ListPulsesWithResponse(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*ListPulsesResponse, error)

	// CreatePulseWithBodyWithResponse request with any body
	CreatePulseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePulseResponse, error)

	CreatePulseWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreatePulseApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePulseResponse, error)

	// GetPulseWithResponse request
	GetPulseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPulseResponse, error)

	// UpdatePulseWithBodyWithResponse request with any body
	UpdatePulseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePulseResponse, error)

	UpdatePulseWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdatePulseApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePulseResponse, error)

	// ListRetrospectiveConfigurationsWithResponse request
	ListRetrospectiveConfigurationsWithResponse(ctx context.Context, params *ListRetrospectiveConfigurationsParams, reqEditors ...RequestEditorFn) (*ListRetrospectiveConfigurationsResponse, error)

	// GetRetrospectiveConfigurationWithResponse request
	GetRetrospectiveConfigurationWithResponse(ctx context.Context, id string, params *GetRetrospectiveConfigurationParams, reqEditors ...RequestEditorFn) (*GetRetrospectiveConfigurationResponse, error)

	// UpdateRetrospectiveConfigurationWithBodyWithResponse request with any body
	UpdateRetrospectiveConfigurationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveConfigurationResponse, error)

	UpdateRetrospectiveConfigurationWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateRetrospectiveConfigurationApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveConfigurationResponse, error)

	// DeleteRetrospectiveProcessGroupStepWithResponse request
	DeleteRetrospectiveProcessGroupStepWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteRetrospectiveProcessGroupStepResponse, error)

	// GetRetrospectiveProcessGroupStepWithResponse request
	GetRetrospectiveProcessGroupStepWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetRetrospectiveProcessGroupStepResponse, error)

	// UpdateRetrospectiveProcessGroupStepWithBodyWithResponse request with any body
	UpdateRetrospectiveProcessGroupStepWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveProcessGroupStepResponse, error)

	UpdateRetrospectiveProcessGroupStepWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateRetrospectiveProcessGroupStepApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveProcessGroupStepResponse, error)

	// DeleteRetrospectiveProcessGroupWithResponse request
	DeleteRetrospectiveProcessGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteRetrospectiveProcessGroupResponse, error)

	// GetRetrospectiveProcessGroupWithResponse request
	GetRetrospectiveProcessGroupWithResponse(ctx context.Context, id string, params *GetRetrospectiveProcessGroupParams, reqEditors ...RequestEditorFn) (*GetRetrospectiveProcessGroupResponse, error)

	// UpdateRetrospectiveProcessGroupWithBodyWithResponse request with any body
	UpdateRetrospectiveProcessGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveProcessGroupResponse, error)

	UpdateRetrospectiveProcessGroupWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateRetrospectiveProcessGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveProcessGroupResponse, error)

	// ListRetrospectiveProcessGroupStepsWithResponse request
	ListRetrospectiveProcessGroupStepsWithResponse(ctx context.Context, retrospectiveProcessGroupId string, params *ListRetrospectiveProcessGroupStepsParams, reqEditors ...RequestEditorFn) (*ListRetrospectiveProcessGroupStepsResponse, error)

	// CreateRetrospectiveProcessGroupStepWithBodyWithResponse request with any body
	CreateRetrospectiveProcessGroupStepWithBodyWithResponse(ctx context.Context, retrospectiveProcessGroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRetrospectiveProcessGroupStepResponse, error)

	CreateRetrospectiveProcessGroupStepWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, retrospectiveProcessGroupId string, body CreateRetrospectiveProcessGroupStepApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRetrospectiveProcessGroupStepResponse, error)

	// ListRetrospectiveProcessesWithResponse request
	ListRetrospectiveProcessesWithResponse(ctx context.Context, params *ListRetrospectiveProcessesParams, reqEditors ...RequestEditorFn) (*ListRetrospectiveProcessesResponse, error)

	// CreateRetrospectiveProcessWithBodyWithResponse request with any body
	CreateRetrospectiveProcessWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRetrospectiveProcessResponse, error)

	CreateRetrospectiveProcessWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateRetrospectiveProcessApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRetrospectiveProcessResponse, error)

	// DeleteRetrospectiveProcessWithResponse request
	DeleteRetrospectiveProcessWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteRetrospectiveProcessResponse, error)

	// GetRetrospectiveProcessWithResponse request
	GetRetrospectiveProcessWithResponse(ctx context.Context, id string, params *GetRetrospectiveProcessParams, reqEditors ...RequestEditorFn) (*GetRetrospectiveProcessResponse, error)

	// UpdateRetrospectiveProcessWithBodyWithResponse request with any body
	UpdateRetrospectiveProcessWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveProcessResponse, error)

	UpdateRetrospectiveProcessWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateRetrospectiveProcessApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveProcessResponse, error)

	// ListRetrospectiveProcessGroupsWithResponse request
	ListRetrospectiveProcessGroupsWithResponse(ctx context.Context, retrospectiveProcessId string, params *ListRetrospectiveProcessGroupsParams, reqEditors ...RequestEditorFn) (*ListRetrospectiveProcessGroupsResponse, error)

	// CreateRetrospectiveProcessGroupWithBodyWithResponse request with any body
	CreateRetrospectiveProcessGroupWithBodyWithResponse(ctx context.Context, retrospectiveProcessId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRetrospectiveProcessGroupResponse, error)

	CreateRetrospectiveProcessGroupWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, retrospectiveProcessId string, body CreateRetrospectiveProcessGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRetrospectiveProcessGroupResponse, error)

	// ListRetrospectiveStepsWithResponse request
	ListRetrospectiveStepsWithResponse(ctx context.Context, retrospectiveProcessId string, params *ListRetrospectiveStepsParams, reqEditors ...RequestEditorFn) (*ListRetrospectiveStepsResponse, error)

	// CreateRetrospectiveStepWithBodyWithResponse request with any body
	CreateRetrospectiveStepWithBodyWithResponse(ctx context.Context, retrospectiveProcessId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRetrospectiveStepResponse, error)

	CreateRetrospectiveStepWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, retrospectiveProcessId string, body CreateRetrospectiveStepApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRetrospectiveStepResponse, error)

	// DeleteRetrospectiveStepWithResponse request
	DeleteRetrospectiveStepWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteRetrospectiveStepResponse, error)

	// GetRetrospectiveStepWithResponse request
	GetRetrospectiveStepWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetRetrospectiveStepResponse, error)

	// UpdateRetrospectiveStepWithBodyWithResponse request with any body
	UpdateRetrospectiveStepWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveStepResponse, error)

	UpdateRetrospectiveStepWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateRetrospectiveStepApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveStepResponse, error)

	// ListRolesWithResponse request
	ListRolesWithResponse(ctx context.Context, params *ListRolesParams, reqEditors ...RequestEditorFn) (*ListRolesResponse, error)

	// CreateRoleWithBodyWithResponse request with any body
	CreateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error)

	CreateRoleWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error)

	// DeleteRoleWithResponse request
	DeleteRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteRoleResponse, error)

	// GetRoleWithResponse request
	GetRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetRoleResponse, error)

	// UpdateRoleWithBodyWithResponse request with any body
	UpdateRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error)

	UpdateRoleWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error)

	// DeleteScheduleRotationActiveDayWithResponse request
	DeleteScheduleRotationActiveDayWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteScheduleRotationActiveDayResponse, error)

	// GetScheduleRotationActiveDayWithResponse request
	GetScheduleRotationActiveDayWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetScheduleRotationActiveDayResponse, error)

	// UpdateScheduleRotationActiveDayWithBodyWithResponse request with any body
	UpdateScheduleRotationActiveDayWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateScheduleRotationActiveDayResponse, error)

	UpdateScheduleRotationActiveDayWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateScheduleRotationActiveDayApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateScheduleRotationActiveDayResponse, error)

	// DeleteScheduleRotationUserWithResponse request
	DeleteScheduleRotationUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteScheduleRotationUserResponse, error)

	// GetScheduleRotationUserWithResponse request
	GetScheduleRotationUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetScheduleRotationUserResponse, error)

	// UpdateScheduleRotationUserWithBodyWithResponse request with any body
	UpdateScheduleRotationUserWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateScheduleRotationUserResponse, error)

	UpdateScheduleRotationUserWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateScheduleRotationUserApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateScheduleRotationUserResponse, error)

	// DeleteScheduleRotationWithResponse request
	DeleteScheduleRotationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteScheduleRotationResponse, error)

	// GetScheduleRotationWithResponse request
	GetScheduleRotationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetScheduleRotationResponse, error)

	// UpdateScheduleRotationWithBodyWithResponse request with any body
	UpdateScheduleRotationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateScheduleRotationResponse, error)

	UpdateScheduleRotationWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateScheduleRotationApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateScheduleRotationResponse, error)

	// ListScheduleRotationActiveDaysWithResponse request
	ListScheduleRotationActiveDaysWithResponse(ctx context.Context, scheduleRotationId string, params *ListScheduleRotationActiveDaysParams, reqEditors ...RequestEditorFn) (*ListScheduleRotationActiveDaysResponse, error)

	// CreateScheduleRotationActiveDayWithBodyWithResponse request with any body
	CreateScheduleRotationActiveDayWithBodyWithResponse(ctx context.Context, scheduleRotationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateScheduleRotationActiveDayResponse, error)

	CreateScheduleRotationActiveDayWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, scheduleRotationId string, body CreateScheduleRotationActiveDayApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateScheduleRotationActiveDayResponse, error)

	// ListScheduleRotationUsersWithResponse request
	ListScheduleRotationUsersWithResponse(ctx context.Context, scheduleRotationId string, params *ListScheduleRotationUsersParams, reqEditors ...RequestEditorFn) (*ListScheduleRotationUsersResponse, error)

	// CreateScheduleRotationUserWithBodyWithResponse request with any body
	CreateScheduleRotationUserWithBodyWithResponse(ctx context.Context, scheduleRotationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateScheduleRotationUserResponse, error)

	CreateScheduleRotationUserWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, scheduleRotationId string, body CreateScheduleRotationUserApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateScheduleRotationUserResponse, error)

	// ListSchedulesWithResponse request
	ListSchedulesWithResponse(ctx context.Context, params *ListSchedulesParams, reqEditors ...RequestEditorFn) (*ListSchedulesResponse, error)

	// CreateScheduleWithBodyWithResponse request with any body
	CreateScheduleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateScheduleResponse, error)

	CreateScheduleWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateScheduleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateScheduleResponse, error)

	// DeleteScheduleWithResponse request
	DeleteScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteScheduleResponse, error)

	// GetScheduleWithResponse request
	GetScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetScheduleResponse, error)

	// UpdateScheduleWithBodyWithResponse request with any body
	UpdateScheduleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateScheduleResponse, error)

	UpdateScheduleWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateScheduleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateScheduleResponse, error)

	// GetScheduleShiftsWithResponse request
	GetScheduleShiftsWithResponse(ctx context.Context, id string, params *GetScheduleShiftsParams, reqEditors ...RequestEditorFn) (*GetScheduleShiftsResponse, error)

	// ListOnCallShadowsWithResponse request
	ListOnCallShadowsWithResponse(ctx context.Context, scheduleId string, params *ListOnCallShadowsParams, reqEditors ...RequestEditorFn) (*ListOnCallShadowsResponse, error)

	// CreateOnCallShadowWithBodyWithResponse request with any body
	CreateOnCallShadowWithBodyWithResponse(ctx context.Context, scheduleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOnCallShadowResponse, error)

	CreateOnCallShadowWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, scheduleId string, body CreateOnCallShadowApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOnCallShadowResponse, error)

	// ListOverrideShiftsWithResponse request
	ListOverrideShiftsWithResponse(ctx context.Context, scheduleId string, params *ListOverrideShiftsParams, reqEditors ...RequestEditorFn) (*ListOverrideShiftsResponse, error)

	// CreateOverrideShiftWithBodyWithResponse request with any body
	CreateOverrideShiftWithBodyWithResponse(ctx context.Context, scheduleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOverrideShiftResponse, error)

	CreateOverrideShiftWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, scheduleId string, body CreateOverrideShiftApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOverrideShiftResponse, error)

	// ListScheduleRotationsWithResponse request
	ListScheduleRotationsWithResponse(ctx context.Context, scheduleId string, params *ListScheduleRotationsParams, reqEditors ...RequestEditorFn) (*ListScheduleRotationsResponse, error)

	// CreateScheduleRotationWithBodyWithResponse request with any body
	CreateScheduleRotationWithBodyWithResponse(ctx context.Context, scheduleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateScheduleRotationResponse, error)

	CreateScheduleRotationWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, scheduleId string, body CreateScheduleRotationApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateScheduleRotationResponse, error)

	// ListSecretsWithResponse request
	ListSecretsWithResponse(ctx context.Context, params *ListSecretsParams, reqEditors ...RequestEditorFn) (*ListSecretsResponse, error)

	// CreateSecretWithBodyWithResponse request with any body
	CreateSecretWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSecretResponse, error)

	CreateSecretWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateSecretApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSecretResponse, error)

	// DeleteSecretWithResponse request
	DeleteSecretWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSecretResponse, error)

	// GetSecretWithResponse request
	GetSecretWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSecretResponse, error)

	// UpdateSecretWithBodyWithResponse request with any body
	UpdateSecretWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSecretResponse, error)

	UpdateSecretWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateSecretApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSecretResponse, error)

	// ListServicesWithResponse request
	ListServicesWithResponse(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error)

	// CreateServiceWithBodyWithResponse request with any body
	CreateServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error)

	CreateServiceWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateServiceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error)

	// DeleteServiceWithResponse request
	DeleteServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceResponse, error)

	// GetServiceWithResponse request
	GetServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceResponse, error)

	// UpdateServiceWithBodyWithResponse request with any body
	UpdateServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error)

	UpdateServiceWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateServiceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error)

	// GetServiceIncidentsChartWithResponse request
	GetServiceIncidentsChartWithResponse(ctx context.Context, id string, params *GetServiceIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetServiceIncidentsChartResponse, error)

	// GetServiceUptimeChartWithResponse request
	GetServiceUptimeChartWithResponse(ctx context.Context, id string, params *GetServiceUptimeChartParams, reqEditors ...RequestEditorFn) (*GetServiceUptimeChartResponse, error)

	// ListSeveritiesWithResponse request
	ListSeveritiesWithResponse(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*ListSeveritiesResponse, error)

	// CreateSeverityWithBodyWithResponse request with any body
	CreateSeverityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSeverityResponse, error)

	CreateSeverityWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateSeverityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSeverityResponse, error)

	// DeleteSeverityWithResponse request
	DeleteSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSeverityResponse, error)

	// GetSeverityWithResponse request
	GetSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSeverityResponse, error)

	// UpdateSeverityWithBodyWithResponse request with any body
	UpdateSeverityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSeverityResponse, error)

	UpdateSeverityWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateSeverityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSeverityResponse, error)

	// ListShiftsWithResponse request
	ListShiftsWithResponse(ctx context.Context, params *ListShiftsParams, reqEditors ...RequestEditorFn) (*ListShiftsResponse, error)

	// DeleteIncidentStatusPageWithResponse request
	DeleteIncidentStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentStatusPageResponse, error)

	// GetIncidentStatusPagesWithResponse request
	GetIncidentStatusPagesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentStatusPagesResponse, error)

	// UpdateIncidentStatusPageWithBodyWithResponse request with any body
	UpdateIncidentStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentStatusPageResponse, error)

	UpdateIncidentStatusPageWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentStatusPageApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentStatusPageResponse, error)

	// ListStatusPagesWithResponse request
	ListStatusPagesWithResponse(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*ListStatusPagesResponse, error)

	// CreateStatusPageWithBodyWithResponse request with any body
	CreateStatusPageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStatusPageResponse, error)

	CreateStatusPageWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateStatusPageApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStatusPageResponse, error)

	// DeleteStatusPageWithResponse request
	DeleteStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStatusPageResponse, error)

	// GetStatusPageWithResponse request
	GetStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStatusPageResponse, error)

	// UpdateStatusPageWithBodyWithResponse request with any body
	UpdateStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStatusPageResponse, error)

	UpdateStatusPageWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateStatusPageApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStatusPageResponse, error)

	// ListStatusPageTemplatesWithResponse request
	ListStatusPageTemplatesWithResponse(ctx context.Context, statusPageId string, params *ListStatusPageTemplatesParams, reqEditors ...RequestEditorFn) (*ListStatusPageTemplatesResponse, error)

	// CreateStatusPageTemplateWithBodyWithResponse request with any body
	CreateStatusPageTemplateWithBodyWithResponse(ctx context.Context, statusPageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStatusPageTemplateResponse, error)

	CreateStatusPageTemplateWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, statusPageId string, body CreateStatusPageTemplateApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStatusPageTemplateResponse, error)

	// ListSubStatusesWithResponse request
	ListSubStatusesWithResponse(ctx context.Context, params *ListSubStatusesParams, reqEditors ...RequestEditorFn) (*ListSubStatusesResponse, error)

	// CreateSubStatusWithBodyWithResponse request with any body
	CreateSubStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSubStatusResponse, error)

	CreateSubStatusWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateSubStatusApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSubStatusResponse, error)

	// DeleteSubStatusWithResponse request
	DeleteSubStatusWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSubStatusResponse, error)

	// GetSubStatusWithResponse request
	GetSubStatusWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSubStatusResponse, error)

	// UpdateSubStatusWithBodyWithResponse request with any body
	UpdateSubStatusWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSubStatusResponse, error)

	UpdateSubStatusWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateSubStatusApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSubStatusResponse, error)

	// ListTeamsWithResponse request
	ListTeamsWithResponse(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*ListTeamsResponse, error)

	// CreateTeamWithBodyWithResponse request with any body
	CreateTeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	CreateTeamWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateTeamApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	// DeleteTeamWithResponse request
	DeleteTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error)

	// GetTeamWithResponse request
	GetTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error)

	// UpdateTeamWithBodyWithResponse request with any body
	UpdateTeamWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)

	UpdateTeamWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateTeamApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)

	// GetTeamIncidentsChartWithResponse request
	GetTeamIncidentsChartWithResponse(ctx context.Context, id string, params *GetTeamIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetTeamIncidentsChartResponse, error)

	// DeleteStatusPageTemplateWithResponse request
	DeleteStatusPageTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStatusPageTemplateResponse, error)

	// GetStatusPageTemplateWithResponse request
	GetStatusPageTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStatusPageTemplateResponse, error)

	// UpdateStatusPageTemplateWithBodyWithResponse request with any body
	UpdateStatusPageTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStatusPageTemplateResponse, error)

	UpdateStatusPageTemplateWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateStatusPageTemplateApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStatusPageTemplateResponse, error)

	// ListUsersWithResponse request
	ListUsersWithResponse(ctx context.Context, params *ListUsersParams, reqEditors ...RequestEditorFn) (*ListUsersResponse, error)

	// GetCurrentUserWithResponse request
	GetCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrentUserResponse, error)

	// DeleteUserWithResponse request
	DeleteUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, id string, params *GetUserParams, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// ListUserNotificationRulesWithResponse request
	ListUserNotificationRulesWithResponse(ctx context.Context, userId string, params *ListUserNotificationRulesParams, reqEditors ...RequestEditorFn) (*ListUserNotificationRulesResponse, error)

	// CreateUserNotificationRuleWithBodyWithResponse request with any body
	CreateUserNotificationRuleWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserNotificationRuleResponse, error)

	CreateUserNotificationRuleWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, userId string, body CreateUserNotificationRuleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserNotificationRuleResponse, error)

	// GetWebhooksDeliveryWithResponse request
	GetWebhooksDeliveryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWebhooksDeliveryResponse, error)

	// DeliverWebhooksDeliveryWithResponse request
	DeliverWebhooksDeliveryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeliverWebhooksDeliveryResponse, error)

	// ListWebhooksEndpointsWithResponse request
	ListWebhooksEndpointsWithResponse(ctx context.Context, params *ListWebhooksEndpointsParams, reqEditors ...RequestEditorFn) (*ListWebhooksEndpointsResponse, error)

	// CreateWebhooksEndpointWithBodyWithResponse request with any body
	CreateWebhooksEndpointWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWebhooksEndpointResponse, error)

	CreateWebhooksEndpointWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateWebhooksEndpointApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWebhooksEndpointResponse, error)

	// ListWebhooksDeliveriesWithResponse request
	ListWebhooksDeliveriesWithResponse(ctx context.Context, endpointId string, params *ListWebhooksDeliveriesParams, reqEditors ...RequestEditorFn) (*ListWebhooksDeliveriesResponse, error)

	// DeleteWebhooksEndpointWithResponse request
	DeleteWebhooksEndpointWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWebhooksEndpointResponse, error)

	// GetWebhooksEndpointWithResponse request
	GetWebhooksEndpointWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWebhooksEndpointResponse, error)

	// UpdateWebhooksEndpointWithBodyWithResponse request with any body
	UpdateWebhooksEndpointWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWebhooksEndpointResponse, error)

	UpdateWebhooksEndpointWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateWebhooksEndpointApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWebhooksEndpointResponse, error)

	// DeleteWorkflowCustomFieldSelectionWithResponse request
	DeleteWorkflowCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowCustomFieldSelectionResponse, error)

	// GetWorkflowCustomFieldSelectionWithResponse request
	GetWorkflowCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowCustomFieldSelectionResponse, error)

	// UpdateWorkflowCustomFieldSelectionWithBodyWithResponse request with any body
	UpdateWorkflowCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowCustomFieldSelectionResponse, error)

	UpdateWorkflowCustomFieldSelectionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateWorkflowCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkflowCustomFieldSelectionResponse, error)

	// DeleteWorkflowFormFieldConditionWithResponse request
	DeleteWorkflowFormFieldConditionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowFormFieldConditionResponse, error)

	// GetWorkflowFormFieldConditionWithResponse request
	GetWorkflowFormFieldConditionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowFormFieldConditionResponse, error)

	// UpdateWorkflowFormFieldConditionWithBodyWithResponse request with any body
	UpdateWorkflowFormFieldConditionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowFormFieldConditionResponse, error)

	UpdateWorkflowFormFieldConditionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateWorkflowFormFieldConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkflowFormFieldConditionResponse, error)

	// ListWorkflowGroupsWithResponse request
	ListWorkflowGroupsWithResponse(ctx context.Context, params *ListWorkflowGroupsParams, reqEditors ...RequestEditorFn) (*ListWorkflowGroupsResponse, error)

	// CreateWorkflowGroupWithBodyWithResponse request with any body
	CreateWorkflowGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowGroupResponse, error)

	CreateWorkflowGroupWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateWorkflowGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkflowGroupResponse, error)

	// DeleteWorkflowGroupWithResponse request
	DeleteWorkflowGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowGroupResponse, error)

	// GetWorkflowGroupWithResponse request
	GetWorkflowGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowGroupResponse, error)

	// UpdateWorkflowGroupWithBodyWithResponse request with any body
	UpdateWorkflowGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowGroupResponse, error)

	UpdateWorkflowGroupWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateWorkflowGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkflowGroupResponse, error)

	// DeleteWorkflowTaskWithResponse request
	DeleteWorkflowTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowTaskResponse, error)

	// GetWorkflowTaskWithResponse request
	GetWorkflowTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowTaskResponse, error)

	// UpdateWorkflowTaskWithBodyWithResponse request with any body
	UpdateWorkflowTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowTaskResponse, error)

	UpdateWorkflowTaskWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateWorkflowTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkflowTaskResponse, error)

	// ListWorkflowsWithResponse request
	ListWorkflowsWithResponse(ctx context.Context, params *ListWorkflowsParams, reqEditors ...RequestEditorFn) (*ListWorkflowsResponse, error)

	// CreateWorkflowWithBodyWithResponse request with any body
	CreateWorkflowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowResponse, error)

	CreateWorkflowWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateWorkflowApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkflowResponse, error)

	// DeleteWorkflowWithResponse request
	DeleteWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowResponse, error)

	// GetWorkflowWithResponse request
	GetWorkflowWithResponse(ctx context.Context, id string, params *GetWorkflowParams, reqEditors ...RequestEditorFn) (*GetWorkflowResponse, error)

	// UpdateWorkflowWithBodyWithResponse request with any body
	UpdateWorkflowWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowResponse, error)

	UpdateWorkflowWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateWorkflowApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkflowResponse, error)

	// ListWorkflowCustomFieldSelectionsWithResponse request
	ListWorkflowCustomFieldSelectionsWithResponse(ctx context.Context, workflowId string, params *ListWorkflowCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListWorkflowCustomFieldSelectionsResponse, error)

	// CreateWorkflowCustomFieldSelectionWithBodyWithResponse request with any body
	CreateWorkflowCustomFieldSelectionWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowCustomFieldSelectionResponse, error)

	CreateWorkflowCustomFieldSelectionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, workflowId string, body CreateWorkflowCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkflowCustomFieldSelectionResponse, error)

	// ListWorkflowFormFieldConditionsWithResponse request
	ListWorkflowFormFieldConditionsWithResponse(ctx context.Context, workflowId string, params *ListWorkflowFormFieldConditionsParams, reqEditors ...RequestEditorFn) (*ListWorkflowFormFieldConditionsResponse, error)

	// CreateWorkflowFormFieldConditionWithBodyWithResponse request with any body
	CreateWorkflowFormFieldConditionWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowFormFieldConditionResponse, error)

	CreateWorkflowFormFieldConditionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, workflowId string, body CreateWorkflowFormFieldConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkflowFormFieldConditionResponse, error)

	// ListWorkflowRunsWithResponse request
	ListWorkflowRunsWithResponse(ctx context.Context, workflowId string, params *ListWorkflowRunsParams, reqEditors ...RequestEditorFn) (*ListWorkflowRunsResponse, error)

	// CreateWorkflowRunWithBodyWithResponse request with any body
	CreateWorkflowRunWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowRunResponse, error)

	CreateWorkflowRunWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, workflowId string, body CreateWorkflowRunApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkflowRunResponse, error)

	// ListWorkflowTasksWithResponse request
	ListWorkflowTasksWithResponse(ctx context.Context, workflowId string, params *ListWorkflowTasksParams, reqEditors ...RequestEditorFn) (*ListWorkflowTasksResponse, error)

	// CreateWorkflowTaskWithBodyWithResponse request with any body
	CreateWorkflowTaskWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowTaskResponse, error)

	CreateWorkflowTaskWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, workflowId string, body CreateWorkflowTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkflowTaskResponse, error)
}

type ListAllIncidentActionItemsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentActionItemList
}

// Status returns HTTPResponse.Status
func (r ListAllIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAllIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentActionItemResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentActionItemResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentActionItemsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentActionItemResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentActionItemResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentActionItemResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAlertGroupsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlertGroupList
}

// Status returns HTTPResponse.Status
func (r ListAlertGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAlertGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAlertGroupResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *AlertGroupResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateAlertGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAlertGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAlertGroupResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlertGroupResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteAlertGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAlertGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertGroupResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlertGroupResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetAlertGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAlertGroupResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlertGroupResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateAlertGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAlertGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAlertSourcesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlertsSourceList
}

// Status returns HTTPResponse.Status
func (r ListAlertSourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAlertSourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAlertSourceResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *AlertsSourceResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateAlertSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAlertSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAlertSourceResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlertsSourceResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteAlertSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAlertSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertSourceResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlertsSourceResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetAlertSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAlertSourceResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlertsSourceResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateAlertSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAlertSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAlertUrgenciesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlertUrgencyList
}

// Status returns HTTPResponse.Status
func (r ListAlertUrgenciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAlertUrgenciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAlertUrgencyResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *AlertUrgencyResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateAlertUrgencyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAlertUrgencyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAlertUrgencyResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlertUrgencyResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteAlertUrgencyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAlertUrgencyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertUrgencyResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlertUrgencyResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetAlertUrgencyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertUrgencyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAlertUrgencyResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlertUrgencyResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateAlertUrgencyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAlertUrgencyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAlertsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlertList
}

// Status returns HTTPResponse.Status
func (r ListAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAlertResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *AlertResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlertResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcknowledgeAlertResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlertResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r AcknowledgeAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcknowledgeAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResolveAlertResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlertResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r ResolveAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResolveAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAuditsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AuditsList
}

// Status returns HTTPResponse.Status
func (r ListAuditsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAuditsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAuthorizationsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AuthorizationList
}

// Status returns HTTPResponse.Status
func (r ListAuthorizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAuthorizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAuthorizationResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *AuthorizationResponse
	ApplicationvndApiJSON401 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateAuthorizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthorizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAuthorizationResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AuthorizationResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteAuthorizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthorizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthorizationResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AuthorizationResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetAuthorizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthorizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAuthorizationResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AuthorizationResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateAuthorizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAuthorizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCatalogEntityPropertiesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CatalogEntityPropertyList
}

// Status returns HTTPResponse.Status
func (r ListCatalogEntityPropertiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCatalogEntityPropertiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCatalogEntityPropertyResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *CatalogEntityPropertyResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateCatalogEntityPropertyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCatalogEntityPropertyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCatalogEntityResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CatalogEntityResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteCatalogEntityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCatalogEntityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogEntityResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CatalogEntityResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetCatalogEntityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogEntityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCatalogEntityResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CatalogEntityResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateCatalogEntityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCatalogEntityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCatalogEntityPropertyResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CatalogEntityPropertyResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteCatalogEntityPropertyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCatalogEntityPropertyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogEntityPropertyResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CatalogEntityPropertyResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetCatalogEntityPropertyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogEntityPropertyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCatalogEntityPropertyResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CatalogEntityPropertyResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateCatalogEntityPropertyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCatalogEntityPropertyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCatalogFieldResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CatalogFieldResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteCatalogFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCatalogFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogFieldResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CatalogFieldResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetCatalogFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCatalogFieldResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CatalogFieldResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateCatalogFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCatalogFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCatalogsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CatalogList
}

// Status returns HTTPResponse.Status
func (r ListCatalogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCatalogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCatalogResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *CatalogResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateCatalogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCatalogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCatalogEntitiesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CatalogEntityList
}

// Status returns HTTPResponse.Status
func (r ListCatalogEntitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCatalogEntitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCatalogEntityResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *CatalogEntityResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateCatalogEntityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCatalogEntityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCatalogFieldsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CatalogFieldList
}

// Status returns HTTPResponse.Status
func (r ListCatalogFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCatalogFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCatalogFieldResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *CatalogFieldResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateCatalogFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCatalogFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCatalogResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CatalogResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteCatalogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCatalogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CatalogResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetCatalogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCatalogResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CatalogResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateCatalogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCatalogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCausesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CauseList
}

// Status returns HTTPResponse.Status
func (r ListCausesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCausesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCauseResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *CauseResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCauseResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CauseResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCauseResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CauseResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCauseResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CauseResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomFieldOptionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CustomFieldOptionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteCustomFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomFieldOptionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CustomFieldOptionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetCustomFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomFieldOptionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CustomFieldOptionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateCustomFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCustomFieldsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CustomFieldList
}

// Status returns HTTPResponse.Status
func (r ListCustomFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCustomFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomFieldResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *CustomFieldResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCustomFieldOptionsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CustomFieldOptionList
}

// Status returns HTTPResponse.Status
func (r ListCustomFieldOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCustomFieldOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomFieldOptionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *CustomFieldOptionResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateCustomFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomFieldResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CustomFieldResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomFieldResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CustomFieldResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomFieldResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CustomFieldResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCustomFormsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CustomFormList
	ApplicationvndApiJSON401 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r ListCustomFormsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCustomFormsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomFormResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *CustomFormResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateCustomFormResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomFormResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomFormResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CustomFormResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteCustomFormResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomFormResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomFormResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CustomFormResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetCustomFormResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomFormResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomFormResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *CustomFormResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateCustomFormResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomFormResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDashboardPanelResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DashboardPanelResponse
}

// Status returns HTTPResponse.Status
func (r DeleteDashboardPanelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDashboardPanelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardPanelResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DashboardPanelResponse
}

// Status returns HTTPResponse.Status
func (r GetDashboardPanelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardPanelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDashboardPanelResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DashboardPanelResponse
}

// Status returns HTTPResponse.Status
func (r UpdateDashboardPanelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDashboardPanelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DuplicateDashboardPanelResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *DashboardPanelResponse
	ApplicationvndApiJSON401 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DuplicateDashboardPanelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DuplicateDashboardPanelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDashboardsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DashboardList
}

// Status returns HTTPResponse.Status
func (r ListDashboardsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDashboardsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDashboardResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *DashboardResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDashboardPanelsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DashboardPanelList
}

// Status returns HTTPResponse.Status
func (r ListDashboardPanelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDashboardPanelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDashboardPanelResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *DashboardPanelResponse
	ApplicationvndApiJSON401 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateDashboardPanelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDashboardPanelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDashboardResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DashboardResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DashboardResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDashboardResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DashboardResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DuplicateDashboardResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *DashboardResponse
	ApplicationvndApiJSON401 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DuplicateDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DuplicateDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetDefaultDashboardResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DashboardResponse
	ApplicationvndApiJSON401 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r SetDefaultDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetDefaultDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEnvironmentsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EnvironmentList
}

// Status returns HTTPResponse.Status
func (r ListEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *EnvironmentResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EnvironmentResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EnvironmentResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEnvironmentResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EnvironmentResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEscalationLevelResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EscalationLevelResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteEscalationLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEscalationLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEscalationLevelResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EscalationLevelResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetEscalationLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEscalationLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEscalationLevelResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EscalationLevelResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateEscalationLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEscalationLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEscalationLevelsPathsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EscalationLevelList
}

// Status returns HTTPResponse.Status
func (r ListEscalationLevelsPathsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEscalationLevelsPathsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEscalationLevelPathsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *EscalationLevelResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateEscalationLevelPathsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEscalationLevelPathsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEscalationPathResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EscalationPathResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteEscalationPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEscalationPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEscalationPathResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EscalationPathResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetEscalationPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEscalationPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEscalationPathResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EscalationPathResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateEscalationPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEscalationPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEscalationPoliciesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EscalationPolicyList
}

// Status returns HTTPResponse.Status
func (r ListEscalationPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEscalationPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEscalationPolicyResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *EscalationPolicyResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateEscalationPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEscalationPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEscalationLevelsPoliciesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EscalationLevelList
}

// Status returns HTTPResponse.Status
func (r ListEscalationLevelsPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEscalationLevelsPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEscalationLevelPoliciesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *EscalationLevelResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateEscalationLevelPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEscalationLevelPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEscalationPathsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EscalationPathList
}

// Status returns HTTPResponse.Status
func (r ListEscalationPathsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEscalationPathsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEscalationPathResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *EscalationPathResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateEscalationPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEscalationPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEscalationPolicyResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EscalationPolicyResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteEscalationPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEscalationPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEscalationPolicyResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EscalationPolicyResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetEscalationPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEscalationPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEscalationPolicyResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EscalationPolicyResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateEscalationPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEscalationPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentEventResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentEventResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentEventsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentEventResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentEventResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentEventResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentEventFunctionalitiesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentEventFunctionalityList
}

// Status returns HTTPResponse.Status
func (r ListIncidentEventFunctionalitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentEventFunctionalitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentEventFunctionalityResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *IncidentEventFunctionalityResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateIncidentEventFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentEventFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentEventServicesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentEventServiceList
}

// Status returns HTTPResponse.Status
func (r ListIncidentEventServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentEventServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentEventServiceResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *IncidentEventServiceResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateIncidentEventServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentEventServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentFeedbacksResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentFeedbackResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetIncidentFeedbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentFeedbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentFeedbackResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentFeedbackResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFormFieldOptionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormFieldOptionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteFormFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFormFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFormFieldOptionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormFieldOptionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetFormFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFormFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFormFieldOptionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormFieldOptionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateFormFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFormFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFormFieldPlacementConditionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormFieldPlacementConditionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteFormFieldPlacementConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFormFieldPlacementConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFormFieldPlacementConditionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormFieldPlacementConditionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetFormFieldPlacementConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFormFieldPlacementConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFormFieldPlacementConditionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormFieldPlacementConditionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateFormFieldPlacementConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFormFieldPlacementConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFormFieldPlacementConditionsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormFieldPlacementConditionList
}

// Status returns HTTPResponse.Status
func (r ListFormFieldPlacementConditionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFormFieldPlacementConditionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFormFieldPlacementConditionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *FormFieldPlacementConditionResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateFormFieldPlacementConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFormFieldPlacementConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFormFieldPlacementResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormFieldPlacementResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteFormFieldPlacementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFormFieldPlacementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFormFieldPlacementResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormFieldPlacementResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetFormFieldPlacementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFormFieldPlacementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFormFieldPlacementResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormFieldPlacementResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateFormFieldPlacementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFormFieldPlacementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFormFieldPositionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormFieldPositionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteFormFieldPositionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFormFieldPositionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFormFieldPositionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormFieldPositionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetFormFieldPositionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFormFieldPositionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFormFieldPositionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormFieldPositionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateFormFieldPositionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFormFieldPositionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFormFieldsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormFieldList
}

// Status returns HTTPResponse.Status
func (r ListFormFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFormFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFormFieldResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *FormFieldResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateFormFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFormFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFormFieldOptionsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormFieldOptionList
}

// Status returns HTTPResponse.Status
func (r ListFormFieldOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFormFieldOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFormFieldOptionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *FormFieldOptionResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateFormFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFormFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFormFieldPlacementsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormFieldPlacementList
}

// Status returns HTTPResponse.Status
func (r ListFormFieldPlacementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFormFieldPlacementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFormFieldPlacementResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *FormFieldPlacementResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateFormFieldPlacementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFormFieldPlacementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFormFieldPositionsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormFieldPositionList
}

// Status returns HTTPResponse.Status
func (r ListFormFieldPositionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFormFieldPositionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFormFieldPositionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *FormFieldPositionResponse
	ApplicationvndApiJSON401 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateFormFieldPositionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFormFieldPositionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFormFieldResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormFieldResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteFormFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFormFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFormFieldResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormFieldResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetFormFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFormFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFormFieldResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormFieldResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateFormFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFormFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFormSetConditionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormSetConditionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteFormSetConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFormSetConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFormSetConditionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormSetConditionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetFormSetConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFormSetConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFormSetConditionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormSetConditionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateFormSetConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFormSetConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFormSetsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormSetList
}

// Status returns HTTPResponse.Status
func (r ListFormSetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFormSetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFormSetResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *FormSetResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateFormSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFormSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFormSetConditionsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormSetConditionList
}

// Status returns HTTPResponse.Status
func (r ListFormSetConditionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFormSetConditionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFormSetConditionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *FormSetConditionResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateFormSetConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFormSetConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFormSetResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormSetResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteFormSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFormSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFormSetResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormSetResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetFormSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFormSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFormSetResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FormSetResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateFormSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFormSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFunctionalitiesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FunctionalityList
}

// Status returns HTTPResponse.Status
func (r ListFunctionalitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFunctionalitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFunctionalityResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *FunctionalityResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFunctionalityResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FunctionalityResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalityResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FunctionalityResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFunctionalityResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *FunctionalityResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalityIncidentsChartResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentsChartResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetFunctionalityIncidentsChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalityIncidentsChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalityUptimeChartResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UptimeChartResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetFunctionalityUptimeChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalityUptimeChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListHeartbeatsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *HeartbeatList
}

// Status returns HTTPResponse.Status
func (r ListHeartbeatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListHeartbeatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHeartbeatResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *HeartbeatResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateHeartbeatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHeartbeatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PingHeartbeatResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r PingHeartbeatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PingHeartbeatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHeartbeatResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *HeartbeatResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteHeartbeatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHeartbeatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHeartbeatResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *HeartbeatResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetHeartbeatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHeartbeatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateHeartbeatResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *HeartbeatResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateHeartbeatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateHeartbeatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentCustomFieldSelectionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentCustomFieldSelectionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentCustomFieldSelectionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentCustomFieldSelectionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetIncidentCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentCustomFieldSelectionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentCustomFieldSelectionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentEventFunctionalityResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentEventFunctionalityResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentEventFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentEventFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentEventFunctionalitiesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentEventFunctionalityResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetIncidentEventFunctionalitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentEventFunctionalitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentEventFunctionalityResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentEventFunctionalityResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentEventFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentEventFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentEventServiceResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentEventServiceResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentEventServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentEventServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentEventServicesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentEventServiceResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetIncidentEventServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentEventServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentEventServiceResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentEventServiceResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentEventServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentEventServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentFormFieldSelectionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentFormFieldSelectionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentFormFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentFormFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentFormFieldSelectionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentFormFieldSelectionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetIncidentFormFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentFormFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentFormFieldSelectionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentFormFieldSelectionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentFormFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentFormFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentPermissionSetBooleanResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentPermissionSetBooleanResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentPermissionSetBooleanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentPermissionSetBooleanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentPermissionSetBooleanResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentPermissionSetBooleanResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetIncidentPermissionSetBooleanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentPermissionSetBooleanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentPermissionSetBooleanResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentPermissionSetBooleanResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentPermissionSetBooleanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentPermissionSetBooleanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentPermissionSetResourceResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentPermissionSetResourceResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentPermissionSetResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentPermissionSetResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentPermissionSetResourceResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentPermissionSetResourceResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetIncidentPermissionSetResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentPermissionSetResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentPermissionSetResourceResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentPermissionSetResourceResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentPermissionSetResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentPermissionSetResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentPermissionSetsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentPermissionSetList
}

// Status returns HTTPResponse.Status
func (r ListIncidentPermissionSetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentPermissionSetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentPermissionSetResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *IncidentPermissionSetResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateIncidentPermissionSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentPermissionSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentPermissionSetResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentPermissionSetResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentPermissionSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentPermissionSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentPermissionSetResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentPermissionSetResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetIncidentPermissionSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentPermissionSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentPermissionSetResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentPermissionSetResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentPermissionSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentPermissionSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentPermissionSetBooleansResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentPermissionSetBooleanList
}

// Status returns HTTPResponse.Status
func (r ListIncidentPermissionSetBooleansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentPermissionSetBooleansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentPermissionSetBooleanResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *IncidentPermissionSetBooleanResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateIncidentPermissionSetBooleanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentPermissionSetBooleanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentPermissionSetResourcesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentPermissionSetResourceList
}

// Status returns HTTPResponse.Status
func (r ListIncidentPermissionSetResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentPermissionSetResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentPermissionSetResourceResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *IncidentPermissionSetResourceResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateIncidentPermissionSetResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentPermissionSetResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentRetrospectiveStepResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentRetrospectiveStepResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetIncidentRetrospectiveStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentRetrospectiveStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentRetrospectiveStepResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentRetrospectiveStepResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentRetrospectiveStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentRetrospectiveStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentRoleTaskResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentRoleTaskResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentRoleTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentRoleTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentRoleTaskResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentRoleTaskResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetIncidentRoleTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentRoleTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentRoleTaskResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentRoleTaskResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentRoleTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentRoleTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentRolesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentRoleList
}

// Status returns HTTPResponse.Status
func (r ListIncidentRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentRoleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *IncidentRoleResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentRoleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentRoleResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentRoleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentRoleResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentRoleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentRoleResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentRoleTasksResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentRoleTaskList
}

// Status returns HTTPResponse.Status
func (r ListIncidentRoleTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentRoleTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentRoleTaskResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *IncidentRoleTaskResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateIncidentRoleTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentRoleTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentSubStatusResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentSubStatusResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentSubStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentSubStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentSubStatusResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentSubStatusResponse
}

// Status returns HTTPResponse.Status
func (r GetIncidentSubStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentSubStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentSubStatusResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentSubStatusResponse
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentSubStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentSubStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentTypesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentTypeList
}

// Status returns HTTPResponse.Status
func (r ListIncidentTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentTypeResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *IncidentTypeResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentTypeResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentTypeResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentTypeResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentTypeResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentTypeResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentTypeResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentList
}

// Status returns HTTPResponse.Status
func (r ListIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *IncidentResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddSubscribersToIncidentResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r AddSubscribersToIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddSubscribersToIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssignUserToIncidentResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r AssignUserToIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignUserToIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelIncidentResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CancelIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarkAsDuplicateIncidentResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r MarkAsDuplicateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarkAsDuplicateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TriageIncidentResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r TriageIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TriageIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MitigateIncidentResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r MitigateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MitigateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveSubscribersToIncidentResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r RemoveSubscribersToIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveSubscribersToIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResolveIncidentResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r ResolveIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResolveIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestartIncidentResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r RestartIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestartIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveAssignedUserFromIncidentResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r RemoveAssignedUserFromIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveAssignedUserFromIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentActionItemsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentActionItemList
}

// Status returns HTTPResponse.Status
func (r ListIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentActionItemResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *IncidentActionItemResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentAlertsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlertList
}

// Status returns HTTPResponse.Status
func (r ListIncidentAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttachAlertResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlertList
	ApplicationvndApiJSON401 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r AttachAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttachAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentCustomFieldSelectionsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentCustomFieldSelectionList
}

// Status returns HTTPResponse.Status
func (r ListIncidentCustomFieldSelectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentCustomFieldSelectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentCustomFieldSelectionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *IncidentCustomFieldSelectionResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateIncidentCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentEventsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentEventList
}

// Status returns HTTPResponse.Status
func (r ListIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentEventResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *IncidentEventResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentFeedbacksResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentFeedbackList
}

// Status returns HTTPResponse.Status
func (r ListIncidentFeedbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentFeedbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentFeedbackResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *IncidentFeedbackResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateIncidentFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentFormFieldSelectionsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentFormFieldSelectionList
}

// Status returns HTTPResponse.Status
func (r ListIncidentFormFieldSelectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentFormFieldSelectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentFormFieldSelectionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *IncidentFormFieldSelectionResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateIncidentFormFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentFormFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentStatusPagesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentStatusPageEventList
}

// Status returns HTTPResponse.Status
func (r ListIncidentStatusPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentStatusPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentStatusPageResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *IncidentStatusPageEventResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateIncidentStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentSubStatusesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentSubStatusList
}

// Status returns HTTPResponse.Status
func (r ListIncidentSubStatusesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentSubStatusesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentSubStatusResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *IncidentSubStatusResponse
	ApplicationvndApiJSON401 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateIncidentSubStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentSubStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIpRangesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IpRangesResponse
}

// Status returns HTTPResponse.Status
func (r GetIpRangesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIpRangesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListLiveCallRoutersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *LiveCallRouterList
}

// Status returns HTTPResponse.Status
func (r ListLiveCallRoutersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListLiveCallRoutersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLiveCallRouterResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *LiveCallRouterResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateLiveCallRouterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLiveCallRouterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GeneratePhoneNumberLiveCallRouterResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GeneratePhoneNumberLiveCallRouterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GeneratePhoneNumberLiveCallRouterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLiveCallRouterResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *LiveCallRouterResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteLiveCallRouterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLiveCallRouterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLiveCallRouterResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *LiveCallRouterResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetLiveCallRouterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLiveCallRouterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateLiveCallRouterResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *LiveCallRouterResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateLiveCallRouterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateLiveCallRouterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserNotificationRuleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserNotificationRuleResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteUserNotificationRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserNotificationRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserNotificationRuleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserNotificationRuleResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetUserNotificationRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserNotificationRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserNotificationRuleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserNotificationRuleResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateUserNotificationRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserNotificationRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOnCallRolesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *OnCallRoleList
}

// Status returns HTTPResponse.Status
func (r ListOnCallRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOnCallRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOnCallRoleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *OnCallRoleResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateOnCallRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOnCallRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOnCallRoleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *OnCallRoleResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteOnCallRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOnCallRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOnCallRoleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *OnCallRoleResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetOnCallRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOnCallRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOnCallRoleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *OnCallRoleResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateOnCallRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOnCallRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOnCallShadowResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *OnCallShadowResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteOnCallShadowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOnCallShadowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOnCallShadowResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *OnCallShadowResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetOnCallShadowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOnCallShadowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOnCallShadowResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *OnCallShadowResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateOnCallShadowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOnCallShadowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOverrideShiftResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *OverrideShiftResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteOverrideShiftResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOverrideShiftResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOverrideShiftResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *OverrideShiftResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetOverrideShiftResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOverrideShiftResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOverrideShiftResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *OverrideShiftResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateOverrideShiftResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOverrideShiftResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaybookTaskResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *PlaybookTaskResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeletePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaybookTaskResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *PlaybookTaskResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetPlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlaybookTaskResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *PlaybookTaskResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdatePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlaybooksResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *PlaybookList
}

// Status returns HTTPResponse.Status
func (r ListPlaybooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlaybooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaybookResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *PlaybookResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreatePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaybookResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *PlaybookResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeletePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaybookResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *PlaybookResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetPlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlaybookResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *PlaybookResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdatePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlaybookTasksResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *PlaybookTaskList
}

// Status returns HTTPResponse.Status
func (r ListPlaybookTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlaybookTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaybookTaskResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *PlaybookTaskResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreatePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPostmortemTemplatesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *PostMortemTemplateList
}

// Status returns HTTPResponse.Status
func (r ListPostmortemTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPostmortemTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePostmortemTemplateResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *PostMortemTemplateResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreatePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePostmortemTemplateResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *PostMortemTemplateResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeletePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostmortemTemplateResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *PostMortemTemplateResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetPostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePostmortemTemplateResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *PostMortemTemplateResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdatePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentPostMortemsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentPostMortemList
}

// Status returns HTTPResponse.Status
func (r ListIncidentPostMortemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentPostMortemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentPostmortemResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentPostMortemResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r ListIncidentPostmortemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentPostmortemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentPostmortemResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentPostMortemResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentPostmortemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentPostmortemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPulsesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *PulseList
}

// Status returns HTTPResponse.Status
func (r ListPulsesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPulsesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePulseResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *PulseResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreatePulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPulseResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *PulseResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetPulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePulseResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *PulseResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdatePulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRetrospectiveConfigurationsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RetrospectiveConfigurationList
}

// Status returns HTTPResponse.Status
func (r ListRetrospectiveConfigurationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRetrospectiveConfigurationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRetrospectiveConfigurationResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RetrospectiveConfigurationResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetRetrospectiveConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRetrospectiveConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRetrospectiveConfigurationResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RetrospectiveConfigurationResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateRetrospectiveConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRetrospectiveConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRetrospectiveProcessGroupStepResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RetrospectiveProcessGroupStepResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteRetrospectiveProcessGroupStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRetrospectiveProcessGroupStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRetrospectiveProcessGroupStepResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RetrospectiveProcessGroupStepResponse
}

// Status returns HTTPResponse.Status
func (r GetRetrospectiveProcessGroupStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRetrospectiveProcessGroupStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRetrospectiveProcessGroupStepResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RetrospectiveProcessGroupStepResponse
}

// Status returns HTTPResponse.Status
func (r UpdateRetrospectiveProcessGroupStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRetrospectiveProcessGroupStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRetrospectiveProcessGroupResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RetrospectiveProcessGroupResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteRetrospectiveProcessGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRetrospectiveProcessGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRetrospectiveProcessGroupResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RetrospectiveProcessGroupResponse
}

// Status returns HTTPResponse.Status
func (r GetRetrospectiveProcessGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRetrospectiveProcessGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRetrospectiveProcessGroupResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RetrospectiveProcessGroupResponse
}

// Status returns HTTPResponse.Status
func (r UpdateRetrospectiveProcessGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRetrospectiveProcessGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRetrospectiveProcessGroupStepsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RetrospectiveProcessGroupStepList
}

// Status returns HTTPResponse.Status
func (r ListRetrospectiveProcessGroupStepsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRetrospectiveProcessGroupStepsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRetrospectiveProcessGroupStepResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *RetrospectiveProcessGroupStepResponse
	ApplicationvndApiJSON401 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateRetrospectiveProcessGroupStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRetrospectiveProcessGroupStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRetrospectiveProcessesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RetrospectiveProcessList
}

// Status returns HTTPResponse.Status
func (r ListRetrospectiveProcessesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRetrospectiveProcessesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRetrospectiveProcessResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *RetrospectiveProcessResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateRetrospectiveProcessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRetrospectiveProcessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRetrospectiveProcessResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RetrospectiveProcessResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteRetrospectiveProcessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRetrospectiveProcessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRetrospectiveProcessResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RetrospectiveProcessResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetRetrospectiveProcessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRetrospectiveProcessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRetrospectiveProcessResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RetrospectiveProcessResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateRetrospectiveProcessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRetrospectiveProcessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRetrospectiveProcessGroupsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RetrospectiveProcessGroupList
}

// Status returns HTTPResponse.Status
func (r ListRetrospectiveProcessGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRetrospectiveProcessGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRetrospectiveProcessGroupResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *RetrospectiveProcessGroupResponse
	ApplicationvndApiJSON401 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateRetrospectiveProcessGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRetrospectiveProcessGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRetrospectiveStepsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RetrospectiveStepList
}

// Status returns HTTPResponse.Status
func (r ListRetrospectiveStepsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRetrospectiveStepsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRetrospectiveStepResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *RetrospectiveStepResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateRetrospectiveStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRetrospectiveStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRetrospectiveStepResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RetrospectiveStepResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteRetrospectiveStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRetrospectiveStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRetrospectiveStepResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RetrospectiveStepResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetRetrospectiveStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRetrospectiveStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRetrospectiveStepResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RetrospectiveStepResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateRetrospectiveStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRetrospectiveStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRolesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RoleList
}

// Status returns HTTPResponse.Status
func (r ListRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRoleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *RoleResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRoleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RoleResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RoleResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRoleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *RoleResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteScheduleRotationActiveDayResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ScheduleRotationActiveDayResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteScheduleRotationActiveDayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteScheduleRotationActiveDayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScheduleRotationActiveDayResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ScheduleRotationActiveDayResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetScheduleRotationActiveDayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScheduleRotationActiveDayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateScheduleRotationActiveDayResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ScheduleRotationActiveDayResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateScheduleRotationActiveDayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateScheduleRotationActiveDayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteScheduleRotationUserResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ScheduleRotationUserResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteScheduleRotationUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteScheduleRotationUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScheduleRotationUserResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ScheduleRotationUserResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetScheduleRotationUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScheduleRotationUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateScheduleRotationUserResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ScheduleRotationUserResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateScheduleRotationUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateScheduleRotationUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteScheduleRotationResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ScheduleRotationResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteScheduleRotationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteScheduleRotationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScheduleRotationResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ScheduleRotationResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetScheduleRotationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScheduleRotationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateScheduleRotationResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ScheduleRotationResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateScheduleRotationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateScheduleRotationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListScheduleRotationActiveDaysResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ScheduleRotationActiveDayList
}

// Status returns HTTPResponse.Status
func (r ListScheduleRotationActiveDaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListScheduleRotationActiveDaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateScheduleRotationActiveDayResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *ScheduleRotationActiveDayResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateScheduleRotationActiveDayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateScheduleRotationActiveDayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListScheduleRotationUsersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ScheduleRotationUserList
}

// Status returns HTTPResponse.Status
func (r ListScheduleRotationUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListScheduleRotationUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateScheduleRotationUserResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *ScheduleRotationUserResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateScheduleRotationUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateScheduleRotationUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSchedulesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ScheduleList
}

// Status returns HTTPResponse.Status
func (r ListSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateScheduleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *ScheduleResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteScheduleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ScheduleResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScheduleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ScheduleResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateScheduleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ScheduleResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScheduleShiftsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ShiftList
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetScheduleShiftsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScheduleShiftsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOnCallShadowsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *OnCallShadowsList
}

// Status returns HTTPResponse.Status
func (r ListOnCallShadowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOnCallShadowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOnCallShadowResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *OnCallShadowResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateOnCallShadowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOnCallShadowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOverrideShiftsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *OverrideShiftList
}

// Status returns HTTPResponse.Status
func (r ListOverrideShiftsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOverrideShiftsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOverrideShiftResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *OverrideShiftResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateOverrideShiftResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOverrideShiftResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListScheduleRotationsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ScheduleRotationList
}

// Status returns HTTPResponse.Status
func (r ListScheduleRotationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListScheduleRotationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateScheduleRotationResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *ScheduleRotationResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateScheduleRotationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateScheduleRotationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSecretsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SecretList
}

// Status returns HTTPResponse.Status
func (r ListSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSecretResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *SecretResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSecretResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SecretResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecretResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SecretResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSecretResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SecretResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServicesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ServiceList
}

// Status returns HTTPResponse.Status
func (r ListServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *ServiceResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ServiceResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ServiceResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateServiceResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ServiceResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceIncidentsChartResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentsChartResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetServiceIncidentsChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceIncidentsChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceUptimeChartResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UptimeChartResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetServiceUptimeChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceUptimeChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSeveritiesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SeverityList
}

// Status returns HTTPResponse.Status
func (r ListSeveritiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSeveritiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSeverityResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *SeverityResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSeverityResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SeverityResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeverityResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SeverityResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSeverityResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SeverityResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListShiftsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ShiftList
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r ListShiftsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListShiftsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentStatusPageResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentStatusPageEventResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentStatusPagesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentStatusPageEventResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetIncidentStatusPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentStatusPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentStatusPageResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentStatusPageEventResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStatusPagesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *StatusPageList
}

// Status returns HTTPResponse.Status
func (r ListStatusPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStatusPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStatusPageResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *StatusPageResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStatusPageResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *StatusPageResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusPageResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *StatusPageResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStatusPageResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *StatusPageResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStatusPageTemplatesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *StatusPageTemplateList
}

// Status returns HTTPResponse.Status
func (r ListStatusPageTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStatusPageTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStatusPageTemplateResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *StatusPageTemplateResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateStatusPageTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStatusPageTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSubStatusesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SubStatusList
}

// Status returns HTTPResponse.Status
func (r ListSubStatusesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSubStatusesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSubStatusResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *SubStatusResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateSubStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSubStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSubStatusResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SubStatusResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteSubStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSubStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubStatusResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SubStatusResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetSubStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSubStatusResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SubStatusResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateSubStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSubStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTeamsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TeamList
}

// Status returns HTTPResponse.Status
func (r ListTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *TeamResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TeamResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TeamResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TeamResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamIncidentsChartResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *IncidentsChartResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetTeamIncidentsChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamIncidentsChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStatusPageTemplateResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *StatusPageTemplateResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteStatusPageTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStatusPageTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusPageTemplateResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *StatusPageTemplateResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetStatusPageTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusPageTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStatusPageTemplateResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *StatusPageTemplateResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateStatusPageTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStatusPageTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserList
	ApplicationvndApiJSON401 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r ListUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCurrentUserResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserResponse
	ApplicationvndApiJSON401 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetCurrentUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCurrentUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUserNotificationRulesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserNotificationRuleList
}

// Status returns HTTPResponse.Status
func (r ListUserNotificationRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUserNotificationRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserNotificationRuleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *UserNotificationRuleResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateUserNotificationRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserNotificationRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhooksDeliveryResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WebhooksDeliveryResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetWebhooksDeliveryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhooksDeliveryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeliverWebhooksDeliveryResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WebhooksDeliveryResponse
}

// Status returns HTTPResponse.Status
func (r DeliverWebhooksDeliveryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeliverWebhooksDeliveryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWebhooksEndpointsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WebhooksEndpointList
}

// Status returns HTTPResponse.Status
func (r ListWebhooksEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWebhooksEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWebhooksEndpointResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *WebhooksEndpointResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateWebhooksEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWebhooksEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWebhooksDeliveriesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WebhooksDeliveryList
}

// Status returns HTTPResponse.Status
func (r ListWebhooksDeliveriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWebhooksDeliveriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWebhooksEndpointResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WebhooksEndpointResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteWebhooksEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWebhooksEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhooksEndpointResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WebhooksEndpointResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetWebhooksEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhooksEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWebhooksEndpointResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WebhooksEndpointResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateWebhooksEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWebhooksEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowCustomFieldSelectionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowCustomFieldSelectionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowCustomFieldSelectionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowCustomFieldSelectionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetWorkflowCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkflowCustomFieldSelectionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowCustomFieldSelectionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateWorkflowCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkflowCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowFormFieldConditionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowFormFieldConditionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowFormFieldConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowFormFieldConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowFormFieldConditionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowFormFieldConditionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetWorkflowFormFieldConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowFormFieldConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkflowFormFieldConditionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowFormFieldConditionResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateWorkflowFormFieldConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkflowFormFieldConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowGroupsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowGroupList
}

// Status returns HTTPResponse.Status
func (r ListWorkflowGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowGroupResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *WorkflowGroupResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowGroupResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowGroupResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowGroupResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowGroupResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetWorkflowGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkflowGroupResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowGroupResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateWorkflowGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkflowGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowTaskResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowTaskResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowTaskResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowTaskResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetWorkflowTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkflowTaskResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowTaskResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateWorkflowTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkflowTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowList
}

// Status returns HTTPResponse.Status
func (r ListWorkflowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *WorkflowResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON403 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowResponse
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r GetWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkflowResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowResponse
	ApplicationvndApiJSON403 *ErrorsList
	ApplicationvndApiJSON404 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r UpdateWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowCustomFieldSelectionsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowCustomFieldSelectionList
}

// Status returns HTTPResponse.Status
func (r ListWorkflowCustomFieldSelectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowCustomFieldSelectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowCustomFieldSelectionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *WorkflowCustomFieldSelectionResponse
	ApplicationvndApiJSON401 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowFormFieldConditionsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowFormFieldConditionList
}

// Status returns HTTPResponse.Status
func (r ListWorkflowFormFieldConditionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowFormFieldConditionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowFormFieldConditionResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *WorkflowFormFieldConditionResponse
	ApplicationvndApiJSON401 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowFormFieldConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowFormFieldConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowRunsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowRunsList
}

// Status returns HTTPResponse.Status
func (r ListWorkflowRunsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowRunsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowRunResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *WorkflowRunResponse
	ApplicationvndApiJSON401 *ErrorsList
	ApplicationvndApiJSON422 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowTasksResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *WorkflowTaskList
}

// Status returns HTTPResponse.Status
func (r ListWorkflowTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowTaskResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *WorkflowTaskResponse
	ApplicationvndApiJSON401 *ErrorsList
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListAllIncidentActionItemsWithResponse request returning *ListAllIncidentActionItemsResponse
func (c *ClientWithResponses) ListAllIncidentActionItemsWithResponse(ctx context.Context, params *ListAllIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*ListAllIncidentActionItemsResponse, error) {
	rsp, err := c.ListAllIncidentActionItems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAllIncidentActionItemsResponse(rsp)
}

// DeleteIncidentActionItemWithResponse request returning *DeleteIncidentActionItemResponse
func (c *ClientWithResponses) DeleteIncidentActionItemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentActionItemResponse, error) {
	rsp, err := c.DeleteIncidentActionItem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentActionItemResponse(rsp)
}

// GetIncidentActionItemsWithResponse request returning *GetIncidentActionItemsResponse
func (c *ClientWithResponses) GetIncidentActionItemsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentActionItemsResponse, error) {
	rsp, err := c.GetIncidentActionItems(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentActionItemsResponse(rsp)
}

// UpdateIncidentActionItemWithBodyWithResponse request with arbitrary body returning *UpdateIncidentActionItemResponse
func (c *ClientWithResponses) UpdateIncidentActionItemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentActionItemResponse, error) {
	rsp, err := c.UpdateIncidentActionItemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentActionItemResponse(rsp)
}

func (c *ClientWithResponses) UpdateIncidentActionItemWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentActionItemApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentActionItemResponse, error) {
	rsp, err := c.UpdateIncidentActionItemWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentActionItemResponse(rsp)
}

// ListAlertGroupsWithResponse request returning *ListAlertGroupsResponse
func (c *ClientWithResponses) ListAlertGroupsWithResponse(ctx context.Context, params *ListAlertGroupsParams, reqEditors ...RequestEditorFn) (*ListAlertGroupsResponse, error) {
	rsp, err := c.ListAlertGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAlertGroupsResponse(rsp)
}

// CreateAlertGroupWithBodyWithResponse request with arbitrary body returning *CreateAlertGroupResponse
func (c *ClientWithResponses) CreateAlertGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlertGroupResponse, error) {
	rsp, err := c.CreateAlertGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAlertGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateAlertGroupWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateAlertGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAlertGroupResponse, error) {
	rsp, err := c.CreateAlertGroupWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAlertGroupResponse(rsp)
}

// DeleteAlertGroupWithResponse request returning *DeleteAlertGroupResponse
func (c *ClientWithResponses) DeleteAlertGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAlertGroupResponse, error) {
	rsp, err := c.DeleteAlertGroup(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAlertGroupResponse(rsp)
}

// GetAlertGroupWithResponse request returning *GetAlertGroupResponse
func (c *ClientWithResponses) GetAlertGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertGroupResponse, error) {
	rsp, err := c.GetAlertGroup(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertGroupResponse(rsp)
}

// UpdateAlertGroupWithBodyWithResponse request with arbitrary body returning *UpdateAlertGroupResponse
func (c *ClientWithResponses) UpdateAlertGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAlertGroupResponse, error) {
	rsp, err := c.UpdateAlertGroupWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAlertGroupResponse(rsp)
}

func (c *ClientWithResponses) UpdateAlertGroupWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateAlertGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAlertGroupResponse, error) {
	rsp, err := c.UpdateAlertGroupWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAlertGroupResponse(rsp)
}

// ListAlertSourcesWithResponse request returning *ListAlertSourcesResponse
func (c *ClientWithResponses) ListAlertSourcesWithResponse(ctx context.Context, params *ListAlertSourcesParams, reqEditors ...RequestEditorFn) (*ListAlertSourcesResponse, error) {
	rsp, err := c.ListAlertSources(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAlertSourcesResponse(rsp)
}

// CreateAlertSourceWithBodyWithResponse request with arbitrary body returning *CreateAlertSourceResponse
func (c *ClientWithResponses) CreateAlertSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlertSourceResponse, error) {
	rsp, err := c.CreateAlertSourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAlertSourceResponse(rsp)
}

func (c *ClientWithResponses) CreateAlertSourceWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateAlertSourceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAlertSourceResponse, error) {
	rsp, err := c.CreateAlertSourceWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAlertSourceResponse(rsp)
}

// DeleteAlertSourceWithResponse request returning *DeleteAlertSourceResponse
func (c *ClientWithResponses) DeleteAlertSourceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAlertSourceResponse, error) {
	rsp, err := c.DeleteAlertSource(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAlertSourceResponse(rsp)
}

// GetAlertSourceWithResponse request returning *GetAlertSourceResponse
func (c *ClientWithResponses) GetAlertSourceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertSourceResponse, error) {
	rsp, err := c.GetAlertSource(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertSourceResponse(rsp)
}

// UpdateAlertSourceWithBodyWithResponse request with arbitrary body returning *UpdateAlertSourceResponse
func (c *ClientWithResponses) UpdateAlertSourceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAlertSourceResponse, error) {
	rsp, err := c.UpdateAlertSourceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAlertSourceResponse(rsp)
}

func (c *ClientWithResponses) UpdateAlertSourceWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateAlertSourceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAlertSourceResponse, error) {
	rsp, err := c.UpdateAlertSourceWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAlertSourceResponse(rsp)
}

// ListAlertUrgenciesWithResponse request returning *ListAlertUrgenciesResponse
func (c *ClientWithResponses) ListAlertUrgenciesWithResponse(ctx context.Context, params *ListAlertUrgenciesParams, reqEditors ...RequestEditorFn) (*ListAlertUrgenciesResponse, error) {
	rsp, err := c.ListAlertUrgencies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAlertUrgenciesResponse(rsp)
}

// CreateAlertUrgencyWithBodyWithResponse request with arbitrary body returning *CreateAlertUrgencyResponse
func (c *ClientWithResponses) CreateAlertUrgencyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlertUrgencyResponse, error) {
	rsp, err := c.CreateAlertUrgencyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAlertUrgencyResponse(rsp)
}

func (c *ClientWithResponses) CreateAlertUrgencyWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateAlertUrgencyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAlertUrgencyResponse, error) {
	rsp, err := c.CreateAlertUrgencyWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAlertUrgencyResponse(rsp)
}

// DeleteAlertUrgencyWithResponse request returning *DeleteAlertUrgencyResponse
func (c *ClientWithResponses) DeleteAlertUrgencyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAlertUrgencyResponse, error) {
	rsp, err := c.DeleteAlertUrgency(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAlertUrgencyResponse(rsp)
}

// GetAlertUrgencyWithResponse request returning *GetAlertUrgencyResponse
func (c *ClientWithResponses) GetAlertUrgencyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertUrgencyResponse, error) {
	rsp, err := c.GetAlertUrgency(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertUrgencyResponse(rsp)
}

// UpdateAlertUrgencyWithBodyWithResponse request with arbitrary body returning *UpdateAlertUrgencyResponse
func (c *ClientWithResponses) UpdateAlertUrgencyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAlertUrgencyResponse, error) {
	rsp, err := c.UpdateAlertUrgencyWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAlertUrgencyResponse(rsp)
}

func (c *ClientWithResponses) UpdateAlertUrgencyWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateAlertUrgencyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAlertUrgencyResponse, error) {
	rsp, err := c.UpdateAlertUrgencyWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAlertUrgencyResponse(rsp)
}

// ListAlertsWithResponse request returning *ListAlertsResponse
func (c *ClientWithResponses) ListAlertsWithResponse(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*ListAlertsResponse, error) {
	rsp, err := c.ListAlerts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAlertsResponse(rsp)
}

// CreateAlertWithBodyWithResponse request with arbitrary body returning *CreateAlertResponse
func (c *ClientWithResponses) CreateAlertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlertResponse, error) {
	rsp, err := c.CreateAlertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAlertResponse(rsp)
}

func (c *ClientWithResponses) CreateAlertWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateAlertApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAlertResponse, error) {
	rsp, err := c.CreateAlertWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAlertResponse(rsp)
}

// GetAlertWithResponse request returning *GetAlertResponse
func (c *ClientWithResponses) GetAlertWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertResponse, error) {
	rsp, err := c.GetAlert(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertResponse(rsp)
}

// AcknowledgeAlertWithResponse request returning *AcknowledgeAlertResponse
func (c *ClientWithResponses) AcknowledgeAlertWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AcknowledgeAlertResponse, error) {
	rsp, err := c.AcknowledgeAlert(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcknowledgeAlertResponse(rsp)
}

// ResolveAlertWithBodyWithResponse request with arbitrary body returning *ResolveAlertResponse
func (c *ClientWithResponses) ResolveAlertWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolveAlertResponse, error) {
	rsp, err := c.ResolveAlertWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolveAlertResponse(rsp)
}

func (c *ClientWithResponses) ResolveAlertWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body ResolveAlertApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ResolveAlertResponse, error) {
	rsp, err := c.ResolveAlertWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolveAlertResponse(rsp)
}

// ListAuditsWithResponse request returning *ListAuditsResponse
func (c *ClientWithResponses) ListAuditsWithResponse(ctx context.Context, params *ListAuditsParams, reqEditors ...RequestEditorFn) (*ListAuditsResponse, error) {
	rsp, err := c.ListAudits(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAuditsResponse(rsp)
}

// ListAuthorizationsWithResponse request returning *ListAuthorizationsResponse
func (c *ClientWithResponses) ListAuthorizationsWithResponse(ctx context.Context, params *ListAuthorizationsParams, reqEditors ...RequestEditorFn) (*ListAuthorizationsResponse, error) {
	rsp, err := c.ListAuthorizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAuthorizationsResponse(rsp)
}

// CreateAuthorizationWithBodyWithResponse request with arbitrary body returning *CreateAuthorizationResponse
func (c *ClientWithResponses) CreateAuthorizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthorizationResponse, error) {
	rsp, err := c.CreateAuthorizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthorizationResponse(rsp)
}

func (c *ClientWithResponses) CreateAuthorizationWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateAuthorizationApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthorizationResponse, error) {
	rsp, err := c.CreateAuthorizationWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthorizationResponse(rsp)
}

// DeleteAuthorizationWithResponse request returning *DeleteAuthorizationResponse
func (c *ClientWithResponses) DeleteAuthorizationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAuthorizationResponse, error) {
	rsp, err := c.DeleteAuthorization(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthorizationResponse(rsp)
}

// GetAuthorizationWithResponse request returning *GetAuthorizationResponse
func (c *ClientWithResponses) GetAuthorizationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAuthorizationResponse, error) {
	rsp, err := c.GetAuthorization(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthorizationResponse(rsp)
}

// UpdateAuthorizationWithBodyWithResponse request with arbitrary body returning *UpdateAuthorizationResponse
func (c *ClientWithResponses) UpdateAuthorizationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAuthorizationResponse, error) {
	rsp, err := c.UpdateAuthorizationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAuthorizationResponse(rsp)
}

func (c *ClientWithResponses) UpdateAuthorizationWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateAuthorizationApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAuthorizationResponse, error) {
	rsp, err := c.UpdateAuthorizationWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAuthorizationResponse(rsp)
}

// ListCatalogEntityPropertiesWithResponse request returning *ListCatalogEntityPropertiesResponse
func (c *ClientWithResponses) ListCatalogEntityPropertiesWithResponse(ctx context.Context, catalogEntityId string, params *ListCatalogEntityPropertiesParams, reqEditors ...RequestEditorFn) (*ListCatalogEntityPropertiesResponse, error) {
	rsp, err := c.ListCatalogEntityProperties(ctx, catalogEntityId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCatalogEntityPropertiesResponse(rsp)
}

// CreateCatalogEntityPropertyWithBodyWithResponse request with arbitrary body returning *CreateCatalogEntityPropertyResponse
func (c *ClientWithResponses) CreateCatalogEntityPropertyWithBodyWithResponse(ctx context.Context, catalogEntityId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogEntityPropertyResponse, error) {
	rsp, err := c.CreateCatalogEntityPropertyWithBody(ctx, catalogEntityId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogEntityPropertyResponse(rsp)
}

func (c *ClientWithResponses) CreateCatalogEntityPropertyWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, catalogEntityId string, body CreateCatalogEntityPropertyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogEntityPropertyResponse, error) {
	rsp, err := c.CreateCatalogEntityPropertyWithApplicationVndAPIPlusJSONBody(ctx, catalogEntityId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogEntityPropertyResponse(rsp)
}

// DeleteCatalogEntityWithResponse request returning *DeleteCatalogEntityResponse
func (c *ClientWithResponses) DeleteCatalogEntityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCatalogEntityResponse, error) {
	rsp, err := c.DeleteCatalogEntity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCatalogEntityResponse(rsp)
}

// GetCatalogEntityWithResponse request returning *GetCatalogEntityResponse
func (c *ClientWithResponses) GetCatalogEntityWithResponse(ctx context.Context, id string, params *GetCatalogEntityParams, reqEditors ...RequestEditorFn) (*GetCatalogEntityResponse, error) {
	rsp, err := c.GetCatalogEntity(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogEntityResponse(rsp)
}

// UpdateCatalogEntityWithBodyWithResponse request with arbitrary body returning *UpdateCatalogEntityResponse
func (c *ClientWithResponses) UpdateCatalogEntityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogEntityResponse, error) {
	rsp, err := c.UpdateCatalogEntityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogEntityResponse(rsp)
}

func (c *ClientWithResponses) UpdateCatalogEntityWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateCatalogEntityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogEntityResponse, error) {
	rsp, err := c.UpdateCatalogEntityWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogEntityResponse(rsp)
}

// DeleteCatalogEntityPropertyWithResponse request returning *DeleteCatalogEntityPropertyResponse
func (c *ClientWithResponses) DeleteCatalogEntityPropertyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCatalogEntityPropertyResponse, error) {
	rsp, err := c.DeleteCatalogEntityProperty(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCatalogEntityPropertyResponse(rsp)
}

// GetCatalogEntityPropertyWithResponse request returning *GetCatalogEntityPropertyResponse
func (c *ClientWithResponses) GetCatalogEntityPropertyWithResponse(ctx context.Context, id string, params *GetCatalogEntityPropertyParams, reqEditors ...RequestEditorFn) (*GetCatalogEntityPropertyResponse, error) {
	rsp, err := c.GetCatalogEntityProperty(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogEntityPropertyResponse(rsp)
}

// UpdateCatalogEntityPropertyWithBodyWithResponse request with arbitrary body returning *UpdateCatalogEntityPropertyResponse
func (c *ClientWithResponses) UpdateCatalogEntityPropertyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogEntityPropertyResponse, error) {
	rsp, err := c.UpdateCatalogEntityPropertyWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogEntityPropertyResponse(rsp)
}

func (c *ClientWithResponses) UpdateCatalogEntityPropertyWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateCatalogEntityPropertyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogEntityPropertyResponse, error) {
	rsp, err := c.UpdateCatalogEntityPropertyWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogEntityPropertyResponse(rsp)
}

// DeleteCatalogFieldWithResponse request returning *DeleteCatalogFieldResponse
func (c *ClientWithResponses) DeleteCatalogFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCatalogFieldResponse, error) {
	rsp, err := c.DeleteCatalogField(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCatalogFieldResponse(rsp)
}

// GetCatalogFieldWithResponse request returning *GetCatalogFieldResponse
func (c *ClientWithResponses) GetCatalogFieldWithResponse(ctx context.Context, id string, params *GetCatalogFieldParams, reqEditors ...RequestEditorFn) (*GetCatalogFieldResponse, error) {
	rsp, err := c.GetCatalogField(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogFieldResponse(rsp)
}

// UpdateCatalogFieldWithBodyWithResponse request with arbitrary body returning *UpdateCatalogFieldResponse
func (c *ClientWithResponses) UpdateCatalogFieldWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogFieldResponse, error) {
	rsp, err := c.UpdateCatalogFieldWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogFieldResponse(rsp)
}

func (c *ClientWithResponses) UpdateCatalogFieldWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateCatalogFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogFieldResponse, error) {
	rsp, err := c.UpdateCatalogFieldWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogFieldResponse(rsp)
}

// ListCatalogsWithResponse request returning *ListCatalogsResponse
func (c *ClientWithResponses) ListCatalogsWithResponse(ctx context.Context, params *ListCatalogsParams, reqEditors ...RequestEditorFn) (*ListCatalogsResponse, error) {
	rsp, err := c.ListCatalogs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCatalogsResponse(rsp)
}

// CreateCatalogWithBodyWithResponse request with arbitrary body returning *CreateCatalogResponse
func (c *ClientWithResponses) CreateCatalogWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogResponse, error) {
	rsp, err := c.CreateCatalogWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogResponse(rsp)
}

func (c *ClientWithResponses) CreateCatalogWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateCatalogApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogResponse, error) {
	rsp, err := c.CreateCatalogWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogResponse(rsp)
}

// ListCatalogEntitiesWithResponse request returning *ListCatalogEntitiesResponse
func (c *ClientWithResponses) ListCatalogEntitiesWithResponse(ctx context.Context, catalogId string, params *ListCatalogEntitiesParams, reqEditors ...RequestEditorFn) (*ListCatalogEntitiesResponse, error) {
	rsp, err := c.ListCatalogEntities(ctx, catalogId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCatalogEntitiesResponse(rsp)
}

// CreateCatalogEntityWithBodyWithResponse request with arbitrary body returning *CreateCatalogEntityResponse
func (c *ClientWithResponses) CreateCatalogEntityWithBodyWithResponse(ctx context.Context, catalogId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogEntityResponse, error) {
	rsp, err := c.CreateCatalogEntityWithBody(ctx, catalogId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogEntityResponse(rsp)
}

func (c *ClientWithResponses) CreateCatalogEntityWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, catalogId string, body CreateCatalogEntityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogEntityResponse, error) {
	rsp, err := c.CreateCatalogEntityWithApplicationVndAPIPlusJSONBody(ctx, catalogId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogEntityResponse(rsp)
}

// ListCatalogFieldsWithResponse request returning *ListCatalogFieldsResponse
func (c *ClientWithResponses) ListCatalogFieldsWithResponse(ctx context.Context, catalogId string, params *ListCatalogFieldsParams, reqEditors ...RequestEditorFn) (*ListCatalogFieldsResponse, error) {
	rsp, err := c.ListCatalogFields(ctx, catalogId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCatalogFieldsResponse(rsp)
}

// CreateCatalogFieldWithBodyWithResponse request with arbitrary body returning *CreateCatalogFieldResponse
func (c *ClientWithResponses) CreateCatalogFieldWithBodyWithResponse(ctx context.Context, catalogId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogFieldResponse, error) {
	rsp, err := c.CreateCatalogFieldWithBody(ctx, catalogId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogFieldResponse(rsp)
}

func (c *ClientWithResponses) CreateCatalogFieldWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, catalogId string, body CreateCatalogFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogFieldResponse, error) {
	rsp, err := c.CreateCatalogFieldWithApplicationVndAPIPlusJSONBody(ctx, catalogId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogFieldResponse(rsp)
}

// DeleteCatalogWithResponse request returning *DeleteCatalogResponse
func (c *ClientWithResponses) DeleteCatalogWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCatalogResponse, error) {
	rsp, err := c.DeleteCatalog(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCatalogResponse(rsp)
}

// GetCatalogWithResponse request returning *GetCatalogResponse
func (c *ClientWithResponses) GetCatalogWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCatalogResponse, error) {
	rsp, err := c.GetCatalog(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogResponse(rsp)
}

// UpdateCatalogWithBodyWithResponse request with arbitrary body returning *UpdateCatalogResponse
func (c *ClientWithResponses) UpdateCatalogWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogResponse, error) {
	rsp, err := c.UpdateCatalogWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogResponse(rsp)
}

func (c *ClientWithResponses) UpdateCatalogWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateCatalogApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogResponse, error) {
	rsp, err := c.UpdateCatalogWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogResponse(rsp)
}

// ListCausesWithResponse request returning *ListCausesResponse
func (c *ClientWithResponses) ListCausesWithResponse(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*ListCausesResponse, error) {
	rsp, err := c.ListCauses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCausesResponse(rsp)
}

// CreateCauseWithBodyWithResponse request with arbitrary body returning *CreateCauseResponse
func (c *ClientWithResponses) CreateCauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCauseResponse, error) {
	rsp, err := c.CreateCauseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCauseResponse(rsp)
}

func (c *ClientWithResponses) CreateCauseWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateCauseApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCauseResponse, error) {
	rsp, err := c.CreateCauseWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCauseResponse(rsp)
}

// DeleteCauseWithResponse request returning *DeleteCauseResponse
func (c *ClientWithResponses) DeleteCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCauseResponse, error) {
	rsp, err := c.DeleteCause(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCauseResponse(rsp)
}

// GetCauseWithResponse request returning *GetCauseResponse
func (c *ClientWithResponses) GetCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCauseResponse, error) {
	rsp, err := c.GetCause(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCauseResponse(rsp)
}

// UpdateCauseWithBodyWithResponse request with arbitrary body returning *UpdateCauseResponse
func (c *ClientWithResponses) UpdateCauseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCauseResponse, error) {
	rsp, err := c.UpdateCauseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCauseResponse(rsp)
}

func (c *ClientWithResponses) UpdateCauseWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateCauseApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCauseResponse, error) {
	rsp, err := c.UpdateCauseWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCauseResponse(rsp)
}

// DeleteCustomFieldOptionWithResponse request returning *DeleteCustomFieldOptionResponse
func (c *ClientWithResponses) DeleteCustomFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldOptionResponse, error) {
	rsp, err := c.DeleteCustomFieldOption(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomFieldOptionResponse(rsp)
}

// GetCustomFieldOptionWithResponse request returning *GetCustomFieldOptionResponse
func (c *ClientWithResponses) GetCustomFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomFieldOptionResponse, error) {
	rsp, err := c.GetCustomFieldOption(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomFieldOptionResponse(rsp)
}

// UpdateCustomFieldOptionWithBodyWithResponse request with arbitrary body returning *UpdateCustomFieldOptionResponse
func (c *ClientWithResponses) UpdateCustomFieldOptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldOptionResponse, error) {
	rsp, err := c.UpdateCustomFieldOptionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomFieldOptionResponse(rsp)
}

func (c *ClientWithResponses) UpdateCustomFieldOptionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateCustomFieldOptionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomFieldOptionResponse, error) {
	rsp, err := c.UpdateCustomFieldOptionWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomFieldOptionResponse(rsp)
}

// ListCustomFieldsWithResponse request returning *ListCustomFieldsResponse
func (c *ClientWithResponses) ListCustomFieldsWithResponse(ctx context.Context, params *ListCustomFieldsParams, reqEditors ...RequestEditorFn) (*ListCustomFieldsResponse, error) {
	rsp, err := c.ListCustomFields(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomFieldsResponse(rsp)
}

// CreateCustomFieldWithBodyWithResponse request with arbitrary body returning *CreateCustomFieldResponse
func (c *ClientWithResponses) CreateCustomFieldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldResponse, error) {
	rsp, err := c.CreateCustomFieldWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomFieldResponse(rsp)
}

func (c *ClientWithResponses) CreateCustomFieldWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateCustomFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomFieldResponse, error) {
	rsp, err := c.CreateCustomFieldWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomFieldResponse(rsp)
}

// ListCustomFieldOptionsWithResponse request returning *ListCustomFieldOptionsResponse
func (c *ClientWithResponses) ListCustomFieldOptionsWithResponse(ctx context.Context, customFieldId string, params *ListCustomFieldOptionsParams, reqEditors ...RequestEditorFn) (*ListCustomFieldOptionsResponse, error) {
	rsp, err := c.ListCustomFieldOptions(ctx, customFieldId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomFieldOptionsResponse(rsp)
}

// CreateCustomFieldOptionWithBodyWithResponse request with arbitrary body returning *CreateCustomFieldOptionResponse
func (c *ClientWithResponses) CreateCustomFieldOptionWithBodyWithResponse(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldOptionResponse, error) {
	rsp, err := c.CreateCustomFieldOptionWithBody(ctx, customFieldId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomFieldOptionResponse(rsp)
}

func (c *ClientWithResponses) CreateCustomFieldOptionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, customFieldId string, body CreateCustomFieldOptionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomFieldOptionResponse, error) {
	rsp, err := c.CreateCustomFieldOptionWithApplicationVndAPIPlusJSONBody(ctx, customFieldId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomFieldOptionResponse(rsp)
}

// DeleteCustomFieldWithResponse request returning *DeleteCustomFieldResponse
func (c *ClientWithResponses) DeleteCustomFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldResponse, error) {
	rsp, err := c.DeleteCustomField(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomFieldResponse(rsp)
}

// GetCustomFieldWithResponse request returning *GetCustomFieldResponse
func (c *ClientWithResponses) GetCustomFieldWithResponse(ctx context.Context, id string, params *GetCustomFieldParams, reqEditors ...RequestEditorFn) (*GetCustomFieldResponse, error) {
	rsp, err := c.GetCustomField(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomFieldResponse(rsp)
}

// UpdateCustomFieldWithBodyWithResponse request with arbitrary body returning *UpdateCustomFieldResponse
func (c *ClientWithResponses) UpdateCustomFieldWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldResponse, error) {
	rsp, err := c.UpdateCustomFieldWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomFieldResponse(rsp)
}

func (c *ClientWithResponses) UpdateCustomFieldWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateCustomFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomFieldResponse, error) {
	rsp, err := c.UpdateCustomFieldWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomFieldResponse(rsp)
}

// ListCustomFormsWithResponse request returning *ListCustomFormsResponse
func (c *ClientWithResponses) ListCustomFormsWithResponse(ctx context.Context, params *ListCustomFormsParams, reqEditors ...RequestEditorFn) (*ListCustomFormsResponse, error) {
	rsp, err := c.ListCustomForms(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomFormsResponse(rsp)
}

// CreateCustomFormWithBodyWithResponse request with arbitrary body returning *CreateCustomFormResponse
func (c *ClientWithResponses) CreateCustomFormWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFormResponse, error) {
	rsp, err := c.CreateCustomFormWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomFormResponse(rsp)
}

func (c *ClientWithResponses) CreateCustomFormWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateCustomFormApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomFormResponse, error) {
	rsp, err := c.CreateCustomFormWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomFormResponse(rsp)
}

// DeleteCustomFormWithResponse request returning *DeleteCustomFormResponse
func (c *ClientWithResponses) DeleteCustomFormWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFormResponse, error) {
	rsp, err := c.DeleteCustomForm(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomFormResponse(rsp)
}

// GetCustomFormWithResponse request returning *GetCustomFormResponse
func (c *ClientWithResponses) GetCustomFormWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomFormResponse, error) {
	rsp, err := c.GetCustomForm(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomFormResponse(rsp)
}

// UpdateCustomFormWithBodyWithResponse request with arbitrary body returning *UpdateCustomFormResponse
func (c *ClientWithResponses) UpdateCustomFormWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFormResponse, error) {
	rsp, err := c.UpdateCustomFormWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomFormResponse(rsp)
}

func (c *ClientWithResponses) UpdateCustomFormWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateCustomFormApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomFormResponse, error) {
	rsp, err := c.UpdateCustomFormWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomFormResponse(rsp)
}

// DeleteDashboardPanelWithResponse request returning *DeleteDashboardPanelResponse
func (c *ClientWithResponses) DeleteDashboardPanelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDashboardPanelResponse, error) {
	rsp, err := c.DeleteDashboardPanel(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDashboardPanelResponse(rsp)
}

// GetDashboardPanelWithResponse request returning *GetDashboardPanelResponse
func (c *ClientWithResponses) GetDashboardPanelWithResponse(ctx context.Context, id string, params *GetDashboardPanelParams, reqEditors ...RequestEditorFn) (*GetDashboardPanelResponse, error) {
	rsp, err := c.GetDashboardPanel(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardPanelResponse(rsp)
}

// UpdateDashboardPanelWithBodyWithResponse request with arbitrary body returning *UpdateDashboardPanelResponse
func (c *ClientWithResponses) UpdateDashboardPanelWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDashboardPanelResponse, error) {
	rsp, err := c.UpdateDashboardPanelWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDashboardPanelResponse(rsp)
}

func (c *ClientWithResponses) UpdateDashboardPanelWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateDashboardPanelApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDashboardPanelResponse, error) {
	rsp, err := c.UpdateDashboardPanelWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDashboardPanelResponse(rsp)
}

// DuplicateDashboardPanelWithResponse request returning *DuplicateDashboardPanelResponse
func (c *ClientWithResponses) DuplicateDashboardPanelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DuplicateDashboardPanelResponse, error) {
	rsp, err := c.DuplicateDashboardPanel(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDuplicateDashboardPanelResponse(rsp)
}

// ListDashboardsWithResponse request returning *ListDashboardsResponse
func (c *ClientWithResponses) ListDashboardsWithResponse(ctx context.Context, params *ListDashboardsParams, reqEditors ...RequestEditorFn) (*ListDashboardsResponse, error) {
	rsp, err := c.ListDashboards(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDashboardsResponse(rsp)
}

// CreateDashboardWithBodyWithResponse request with arbitrary body returning *CreateDashboardResponse
func (c *ClientWithResponses) CreateDashboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDashboardResponse, error) {
	rsp, err := c.CreateDashboardWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDashboardResponse(rsp)
}

func (c *ClientWithResponses) CreateDashboardWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateDashboardApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDashboardResponse, error) {
	rsp, err := c.CreateDashboardWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDashboardResponse(rsp)
}

// ListDashboardPanelsWithResponse request returning *ListDashboardPanelsResponse
func (c *ClientWithResponses) ListDashboardPanelsWithResponse(ctx context.Context, dashboardId string, params *ListDashboardPanelsParams, reqEditors ...RequestEditorFn) (*ListDashboardPanelsResponse, error) {
	rsp, err := c.ListDashboardPanels(ctx, dashboardId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDashboardPanelsResponse(rsp)
}

// CreateDashboardPanelWithBodyWithResponse request with arbitrary body returning *CreateDashboardPanelResponse
func (c *ClientWithResponses) CreateDashboardPanelWithBodyWithResponse(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDashboardPanelResponse, error) {
	rsp, err := c.CreateDashboardPanelWithBody(ctx, dashboardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDashboardPanelResponse(rsp)
}

func (c *ClientWithResponses) CreateDashboardPanelWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, dashboardId string, body CreateDashboardPanelApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDashboardPanelResponse, error) {
	rsp, err := c.CreateDashboardPanelWithApplicationVndAPIPlusJSONBody(ctx, dashboardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDashboardPanelResponse(rsp)
}

// DeleteDashboardWithResponse request returning *DeleteDashboardResponse
func (c *ClientWithResponses) DeleteDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDashboardResponse, error) {
	rsp, err := c.DeleteDashboard(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDashboardResponse(rsp)
}

// GetDashboardWithResponse request returning *GetDashboardResponse
func (c *ClientWithResponses) GetDashboardWithResponse(ctx context.Context, id string, params *GetDashboardParams, reqEditors ...RequestEditorFn) (*GetDashboardResponse, error) {
	rsp, err := c.GetDashboard(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardResponse(rsp)
}

// UpdateDashboardWithBodyWithResponse request with arbitrary body returning *UpdateDashboardResponse
func (c *ClientWithResponses) UpdateDashboardWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDashboardResponse, error) {
	rsp, err := c.UpdateDashboardWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDashboardResponse(rsp)
}

func (c *ClientWithResponses) UpdateDashboardWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateDashboardApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDashboardResponse, error) {
	rsp, err := c.UpdateDashboardWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDashboardResponse(rsp)
}

// DuplicateDashboardWithResponse request returning *DuplicateDashboardResponse
func (c *ClientWithResponses) DuplicateDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DuplicateDashboardResponse, error) {
	rsp, err := c.DuplicateDashboard(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDuplicateDashboardResponse(rsp)
}

// SetDefaultDashboardWithResponse request returning *SetDefaultDashboardResponse
func (c *ClientWithResponses) SetDefaultDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SetDefaultDashboardResponse, error) {
	rsp, err := c.SetDefaultDashboard(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetDefaultDashboardResponse(rsp)
}

// ListEnvironmentsWithResponse request returning *ListEnvironmentsResponse
func (c *ClientWithResponses) ListEnvironmentsWithResponse(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error) {
	rsp, err := c.ListEnvironments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEnvironmentsResponse(rsp)
}

// CreateEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentResponse
func (c *ClientWithResponses) CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) CreateEnvironmentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateEnvironmentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironmentWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

// DeleteEnvironmentWithResponse request returning *DeleteEnvironmentResponse
func (c *ClientWithResponses) DeleteEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error) {
	rsp, err := c.DeleteEnvironment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// UpdateEnvironmentWithBodyWithResponse request with arbitrary body returning *UpdateEnvironmentResponse
func (c *ClientWithResponses) UpdateEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error) {
	rsp, err := c.UpdateEnvironmentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) UpdateEnvironmentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateEnvironmentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error) {
	rsp, err := c.UpdateEnvironmentWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentResponse(rsp)
}

// DeleteEscalationLevelWithResponse request returning *DeleteEscalationLevelResponse
func (c *ClientWithResponses) DeleteEscalationLevelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEscalationLevelResponse, error) {
	rsp, err := c.DeleteEscalationLevel(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEscalationLevelResponse(rsp)
}

// GetEscalationLevelWithResponse request returning *GetEscalationLevelResponse
func (c *ClientWithResponses) GetEscalationLevelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEscalationLevelResponse, error) {
	rsp, err := c.GetEscalationLevel(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEscalationLevelResponse(rsp)
}

// UpdateEscalationLevelWithBodyWithResponse request with arbitrary body returning *UpdateEscalationLevelResponse
func (c *ClientWithResponses) UpdateEscalationLevelWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEscalationLevelResponse, error) {
	rsp, err := c.UpdateEscalationLevelWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEscalationLevelResponse(rsp)
}

func (c *ClientWithResponses) UpdateEscalationLevelWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateEscalationLevelApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEscalationLevelResponse, error) {
	rsp, err := c.UpdateEscalationLevelWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEscalationLevelResponse(rsp)
}

// ListEscalationLevelsPathsWithResponse request returning *ListEscalationLevelsPathsResponse
func (c *ClientWithResponses) ListEscalationLevelsPathsWithResponse(ctx context.Context, escalationPathId string, params *ListEscalationLevelsPathsParams, reqEditors ...RequestEditorFn) (*ListEscalationLevelsPathsResponse, error) {
	rsp, err := c.ListEscalationLevelsPaths(ctx, escalationPathId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEscalationLevelsPathsResponse(rsp)
}

// CreateEscalationLevelPathsWithBodyWithResponse request with arbitrary body returning *CreateEscalationLevelPathsResponse
func (c *ClientWithResponses) CreateEscalationLevelPathsWithBodyWithResponse(ctx context.Context, escalationPathId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEscalationLevelPathsResponse, error) {
	rsp, err := c.CreateEscalationLevelPathsWithBody(ctx, escalationPathId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEscalationLevelPathsResponse(rsp)
}

func (c *ClientWithResponses) CreateEscalationLevelPathsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, escalationPathId string, body CreateEscalationLevelPathsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEscalationLevelPathsResponse, error) {
	rsp, err := c.CreateEscalationLevelPathsWithApplicationVndAPIPlusJSONBody(ctx, escalationPathId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEscalationLevelPathsResponse(rsp)
}

// DeleteEscalationPathWithResponse request returning *DeleteEscalationPathResponse
func (c *ClientWithResponses) DeleteEscalationPathWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEscalationPathResponse, error) {
	rsp, err := c.DeleteEscalationPath(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEscalationPathResponse(rsp)
}

// GetEscalationPathWithResponse request returning *GetEscalationPathResponse
func (c *ClientWithResponses) GetEscalationPathWithResponse(ctx context.Context, id string, params *GetEscalationPathParams, reqEditors ...RequestEditorFn) (*GetEscalationPathResponse, error) {
	rsp, err := c.GetEscalationPath(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEscalationPathResponse(rsp)
}

// UpdateEscalationPathWithBodyWithResponse request with arbitrary body returning *UpdateEscalationPathResponse
func (c *ClientWithResponses) UpdateEscalationPathWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEscalationPathResponse, error) {
	rsp, err := c.UpdateEscalationPathWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEscalationPathResponse(rsp)
}

func (c *ClientWithResponses) UpdateEscalationPathWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateEscalationPathApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEscalationPathResponse, error) {
	rsp, err := c.UpdateEscalationPathWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEscalationPathResponse(rsp)
}

// ListEscalationPoliciesWithResponse request returning *ListEscalationPoliciesResponse
func (c *ClientWithResponses) ListEscalationPoliciesWithResponse(ctx context.Context, params *ListEscalationPoliciesParams, reqEditors ...RequestEditorFn) (*ListEscalationPoliciesResponse, error) {
	rsp, err := c.ListEscalationPolicies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEscalationPoliciesResponse(rsp)
}

// CreateEscalationPolicyWithBodyWithResponse request with arbitrary body returning *CreateEscalationPolicyResponse
func (c *ClientWithResponses) CreateEscalationPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEscalationPolicyResponse, error) {
	rsp, err := c.CreateEscalationPolicyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEscalationPolicyResponse(rsp)
}

func (c *ClientWithResponses) CreateEscalationPolicyWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateEscalationPolicyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEscalationPolicyResponse, error) {
	rsp, err := c.CreateEscalationPolicyWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEscalationPolicyResponse(rsp)
}

// ListEscalationLevelsPoliciesWithResponse request returning *ListEscalationLevelsPoliciesResponse
func (c *ClientWithResponses) ListEscalationLevelsPoliciesWithResponse(ctx context.Context, escalationPolicyId string, params *ListEscalationLevelsPoliciesParams, reqEditors ...RequestEditorFn) (*ListEscalationLevelsPoliciesResponse, error) {
	rsp, err := c.ListEscalationLevelsPolicies(ctx, escalationPolicyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEscalationLevelsPoliciesResponse(rsp)
}

// CreateEscalationLevelPoliciesWithBodyWithResponse request with arbitrary body returning *CreateEscalationLevelPoliciesResponse
func (c *ClientWithResponses) CreateEscalationLevelPoliciesWithBodyWithResponse(ctx context.Context, escalationPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEscalationLevelPoliciesResponse, error) {
	rsp, err := c.CreateEscalationLevelPoliciesWithBody(ctx, escalationPolicyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEscalationLevelPoliciesResponse(rsp)
}

func (c *ClientWithResponses) CreateEscalationLevelPoliciesWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, escalationPolicyId string, body CreateEscalationLevelPoliciesApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEscalationLevelPoliciesResponse, error) {
	rsp, err := c.CreateEscalationLevelPoliciesWithApplicationVndAPIPlusJSONBody(ctx, escalationPolicyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEscalationLevelPoliciesResponse(rsp)
}

// ListEscalationPathsWithResponse request returning *ListEscalationPathsResponse
func (c *ClientWithResponses) ListEscalationPathsWithResponse(ctx context.Context, escalationPolicyId string, params *ListEscalationPathsParams, reqEditors ...RequestEditorFn) (*ListEscalationPathsResponse, error) {
	rsp, err := c.ListEscalationPaths(ctx, escalationPolicyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEscalationPathsResponse(rsp)
}

// CreateEscalationPathWithBodyWithResponse request with arbitrary body returning *CreateEscalationPathResponse
func (c *ClientWithResponses) CreateEscalationPathWithBodyWithResponse(ctx context.Context, escalationPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEscalationPathResponse, error) {
	rsp, err := c.CreateEscalationPathWithBody(ctx, escalationPolicyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEscalationPathResponse(rsp)
}

func (c *ClientWithResponses) CreateEscalationPathWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, escalationPolicyId string, body CreateEscalationPathApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEscalationPathResponse, error) {
	rsp, err := c.CreateEscalationPathWithApplicationVndAPIPlusJSONBody(ctx, escalationPolicyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEscalationPathResponse(rsp)
}

// DeleteEscalationPolicyWithResponse request returning *DeleteEscalationPolicyResponse
func (c *ClientWithResponses) DeleteEscalationPolicyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEscalationPolicyResponse, error) {
	rsp, err := c.DeleteEscalationPolicy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEscalationPolicyResponse(rsp)
}

// GetEscalationPolicyWithResponse request returning *GetEscalationPolicyResponse
func (c *ClientWithResponses) GetEscalationPolicyWithResponse(ctx context.Context, id string, params *GetEscalationPolicyParams, reqEditors ...RequestEditorFn) (*GetEscalationPolicyResponse, error) {
	rsp, err := c.GetEscalationPolicy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEscalationPolicyResponse(rsp)
}

// UpdateEscalationPolicyWithBodyWithResponse request with arbitrary body returning *UpdateEscalationPolicyResponse
func (c *ClientWithResponses) UpdateEscalationPolicyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEscalationPolicyResponse, error) {
	rsp, err := c.UpdateEscalationPolicyWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEscalationPolicyResponse(rsp)
}

func (c *ClientWithResponses) UpdateEscalationPolicyWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateEscalationPolicyApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEscalationPolicyResponse, error) {
	rsp, err := c.UpdateEscalationPolicyWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEscalationPolicyResponse(rsp)
}

// DeleteIncidentEventWithResponse request returning *DeleteIncidentEventResponse
func (c *ClientWithResponses) DeleteIncidentEventWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventResponse, error) {
	rsp, err := c.DeleteIncidentEvent(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentEventResponse(rsp)
}

// GetIncidentEventsWithResponse request returning *GetIncidentEventsResponse
func (c *ClientWithResponses) GetIncidentEventsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventsResponse, error) {
	rsp, err := c.GetIncidentEvents(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentEventsResponse(rsp)
}

// UpdateIncidentEventWithBodyWithResponse request with arbitrary body returning *UpdateIncidentEventResponse
func (c *ClientWithResponses) UpdateIncidentEventWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventResponse, error) {
	rsp, err := c.UpdateIncidentEventWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentEventResponse(rsp)
}

func (c *ClientWithResponses) UpdateIncidentEventWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentEventApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentEventResponse, error) {
	rsp, err := c.UpdateIncidentEventWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentEventResponse(rsp)
}

// ListIncidentEventFunctionalitiesWithResponse request returning *ListIncidentEventFunctionalitiesResponse
func (c *ClientWithResponses) ListIncidentEventFunctionalitiesWithResponse(ctx context.Context, incidentEventId string, params *ListIncidentEventFunctionalitiesParams, reqEditors ...RequestEditorFn) (*ListIncidentEventFunctionalitiesResponse, error) {
	rsp, err := c.ListIncidentEventFunctionalities(ctx, incidentEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentEventFunctionalitiesResponse(rsp)
}

// CreateIncidentEventFunctionalityWithBodyWithResponse request with arbitrary body returning *CreateIncidentEventFunctionalityResponse
func (c *ClientWithResponses) CreateIncidentEventFunctionalityWithBodyWithResponse(ctx context.Context, incidentEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventFunctionalityResponse, error) {
	rsp, err := c.CreateIncidentEventFunctionalityWithBody(ctx, incidentEventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentEventFunctionalityResponse(rsp)
}

func (c *ClientWithResponses) CreateIncidentEventFunctionalityWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentEventId string, body CreateIncidentEventFunctionalityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentEventFunctionalityResponse, error) {
	rsp, err := c.CreateIncidentEventFunctionalityWithApplicationVndAPIPlusJSONBody(ctx, incidentEventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentEventFunctionalityResponse(rsp)
}

// ListIncidentEventServicesWithResponse request returning *ListIncidentEventServicesResponse
func (c *ClientWithResponses) ListIncidentEventServicesWithResponse(ctx context.Context, incidentEventId string, params *ListIncidentEventServicesParams, reqEditors ...RequestEditorFn) (*ListIncidentEventServicesResponse, error) {
	rsp, err := c.ListIncidentEventServices(ctx, incidentEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentEventServicesResponse(rsp)
}

// CreateIncidentEventServiceWithBodyWithResponse request with arbitrary body returning *CreateIncidentEventServiceResponse
func (c *ClientWithResponses) CreateIncidentEventServiceWithBodyWithResponse(ctx context.Context, incidentEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventServiceResponse, error) {
	rsp, err := c.CreateIncidentEventServiceWithBody(ctx, incidentEventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentEventServiceResponse(rsp)
}

func (c *ClientWithResponses) CreateIncidentEventServiceWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentEventId string, body CreateIncidentEventServiceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentEventServiceResponse, error) {
	rsp, err := c.CreateIncidentEventServiceWithApplicationVndAPIPlusJSONBody(ctx, incidentEventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentEventServiceResponse(rsp)
}

// GetIncidentFeedbacksWithResponse request returning *GetIncidentFeedbacksResponse
func (c *ClientWithResponses) GetIncidentFeedbacksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentFeedbacksResponse, error) {
	rsp, err := c.GetIncidentFeedbacks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentFeedbacksResponse(rsp)
}

// UpdateIncidentFeedbackWithBodyWithResponse request with arbitrary body returning *UpdateIncidentFeedbackResponse
func (c *ClientWithResponses) UpdateIncidentFeedbackWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentFeedbackResponse, error) {
	rsp, err := c.UpdateIncidentFeedbackWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentFeedbackResponse(rsp)
}

func (c *ClientWithResponses) UpdateIncidentFeedbackWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentFeedbackApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentFeedbackResponse, error) {
	rsp, err := c.UpdateIncidentFeedbackWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentFeedbackResponse(rsp)
}

// DeleteFormFieldOptionWithResponse request returning *DeleteFormFieldOptionResponse
func (c *ClientWithResponses) DeleteFormFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFormFieldOptionResponse, error) {
	rsp, err := c.DeleteFormFieldOption(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFormFieldOptionResponse(rsp)
}

// GetFormFieldOptionWithResponse request returning *GetFormFieldOptionResponse
func (c *ClientWithResponses) GetFormFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFormFieldOptionResponse, error) {
	rsp, err := c.GetFormFieldOption(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFormFieldOptionResponse(rsp)
}

// UpdateFormFieldOptionWithBodyWithResponse request with arbitrary body returning *UpdateFormFieldOptionResponse
func (c *ClientWithResponses) UpdateFormFieldOptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFormFieldOptionResponse, error) {
	rsp, err := c.UpdateFormFieldOptionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFormFieldOptionResponse(rsp)
}

func (c *ClientWithResponses) UpdateFormFieldOptionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateFormFieldOptionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFormFieldOptionResponse, error) {
	rsp, err := c.UpdateFormFieldOptionWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFormFieldOptionResponse(rsp)
}

// DeleteFormFieldPlacementConditionWithResponse request returning *DeleteFormFieldPlacementConditionResponse
func (c *ClientWithResponses) DeleteFormFieldPlacementConditionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFormFieldPlacementConditionResponse, error) {
	rsp, err := c.DeleteFormFieldPlacementCondition(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFormFieldPlacementConditionResponse(rsp)
}

// GetFormFieldPlacementConditionWithResponse request returning *GetFormFieldPlacementConditionResponse
func (c *ClientWithResponses) GetFormFieldPlacementConditionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFormFieldPlacementConditionResponse, error) {
	rsp, err := c.GetFormFieldPlacementCondition(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFormFieldPlacementConditionResponse(rsp)
}

// UpdateFormFieldPlacementConditionWithBodyWithResponse request with arbitrary body returning *UpdateFormFieldPlacementConditionResponse
func (c *ClientWithResponses) UpdateFormFieldPlacementConditionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFormFieldPlacementConditionResponse, error) {
	rsp, err := c.UpdateFormFieldPlacementConditionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFormFieldPlacementConditionResponse(rsp)
}

func (c *ClientWithResponses) UpdateFormFieldPlacementConditionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateFormFieldPlacementConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFormFieldPlacementConditionResponse, error) {
	rsp, err := c.UpdateFormFieldPlacementConditionWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFormFieldPlacementConditionResponse(rsp)
}

// ListFormFieldPlacementConditionsWithResponse request returning *ListFormFieldPlacementConditionsResponse
func (c *ClientWithResponses) ListFormFieldPlacementConditionsWithResponse(ctx context.Context, formFieldPlacementId string, params *ListFormFieldPlacementConditionsParams, reqEditors ...RequestEditorFn) (*ListFormFieldPlacementConditionsResponse, error) {
	rsp, err := c.ListFormFieldPlacementConditions(ctx, formFieldPlacementId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFormFieldPlacementConditionsResponse(rsp)
}

// CreateFormFieldPlacementConditionWithBodyWithResponse request with arbitrary body returning *CreateFormFieldPlacementConditionResponse
func (c *ClientWithResponses) CreateFormFieldPlacementConditionWithBodyWithResponse(ctx context.Context, formFieldPlacementId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFormFieldPlacementConditionResponse, error) {
	rsp, err := c.CreateFormFieldPlacementConditionWithBody(ctx, formFieldPlacementId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFormFieldPlacementConditionResponse(rsp)
}

func (c *ClientWithResponses) CreateFormFieldPlacementConditionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, formFieldPlacementId string, body CreateFormFieldPlacementConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFormFieldPlacementConditionResponse, error) {
	rsp, err := c.CreateFormFieldPlacementConditionWithApplicationVndAPIPlusJSONBody(ctx, formFieldPlacementId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFormFieldPlacementConditionResponse(rsp)
}

// DeleteFormFieldPlacementWithResponse request returning *DeleteFormFieldPlacementResponse
func (c *ClientWithResponses) DeleteFormFieldPlacementWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFormFieldPlacementResponse, error) {
	rsp, err := c.DeleteFormFieldPlacement(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFormFieldPlacementResponse(rsp)
}

// GetFormFieldPlacementWithResponse request returning *GetFormFieldPlacementResponse
func (c *ClientWithResponses) GetFormFieldPlacementWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFormFieldPlacementResponse, error) {
	rsp, err := c.GetFormFieldPlacement(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFormFieldPlacementResponse(rsp)
}

// UpdateFormFieldPlacementWithBodyWithResponse request with arbitrary body returning *UpdateFormFieldPlacementResponse
func (c *ClientWithResponses) UpdateFormFieldPlacementWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFormFieldPlacementResponse, error) {
	rsp, err := c.UpdateFormFieldPlacementWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFormFieldPlacementResponse(rsp)
}

func (c *ClientWithResponses) UpdateFormFieldPlacementWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateFormFieldPlacementApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFormFieldPlacementResponse, error) {
	rsp, err := c.UpdateFormFieldPlacementWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFormFieldPlacementResponse(rsp)
}

// DeleteFormFieldPositionWithResponse request returning *DeleteFormFieldPositionResponse
func (c *ClientWithResponses) DeleteFormFieldPositionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFormFieldPositionResponse, error) {
	rsp, err := c.DeleteFormFieldPosition(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFormFieldPositionResponse(rsp)
}

// GetFormFieldPositionWithResponse request returning *GetFormFieldPositionResponse
func (c *ClientWithResponses) GetFormFieldPositionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFormFieldPositionResponse, error) {
	rsp, err := c.GetFormFieldPosition(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFormFieldPositionResponse(rsp)
}

// UpdateFormFieldPositionWithBodyWithResponse request with arbitrary body returning *UpdateFormFieldPositionResponse
func (c *ClientWithResponses) UpdateFormFieldPositionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFormFieldPositionResponse, error) {
	rsp, err := c.UpdateFormFieldPositionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFormFieldPositionResponse(rsp)
}

func (c *ClientWithResponses) UpdateFormFieldPositionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateFormFieldPositionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFormFieldPositionResponse, error) {
	rsp, err := c.UpdateFormFieldPositionWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFormFieldPositionResponse(rsp)
}

// ListFormFieldsWithResponse request returning *ListFormFieldsResponse
func (c *ClientWithResponses) ListFormFieldsWithResponse(ctx context.Context, params *ListFormFieldsParams, reqEditors ...RequestEditorFn) (*ListFormFieldsResponse, error) {
	rsp, err := c.ListFormFields(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFormFieldsResponse(rsp)
}

// CreateFormFieldWithBodyWithResponse request with arbitrary body returning *CreateFormFieldResponse
func (c *ClientWithResponses) CreateFormFieldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFormFieldResponse, error) {
	rsp, err := c.CreateFormFieldWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFormFieldResponse(rsp)
}

func (c *ClientWithResponses) CreateFormFieldWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateFormFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFormFieldResponse, error) {
	rsp, err := c.CreateFormFieldWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFormFieldResponse(rsp)
}

// ListFormFieldOptionsWithResponse request returning *ListFormFieldOptionsResponse
func (c *ClientWithResponses) ListFormFieldOptionsWithResponse(ctx context.Context, formFieldId string, params *ListFormFieldOptionsParams, reqEditors ...RequestEditorFn) (*ListFormFieldOptionsResponse, error) {
	rsp, err := c.ListFormFieldOptions(ctx, formFieldId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFormFieldOptionsResponse(rsp)
}

// CreateFormFieldOptionWithBodyWithResponse request with arbitrary body returning *CreateFormFieldOptionResponse
func (c *ClientWithResponses) CreateFormFieldOptionWithBodyWithResponse(ctx context.Context, formFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFormFieldOptionResponse, error) {
	rsp, err := c.CreateFormFieldOptionWithBody(ctx, formFieldId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFormFieldOptionResponse(rsp)
}

func (c *ClientWithResponses) CreateFormFieldOptionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, formFieldId string, body CreateFormFieldOptionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFormFieldOptionResponse, error) {
	rsp, err := c.CreateFormFieldOptionWithApplicationVndAPIPlusJSONBody(ctx, formFieldId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFormFieldOptionResponse(rsp)
}

// ListFormFieldPlacementsWithResponse request returning *ListFormFieldPlacementsResponse
func (c *ClientWithResponses) ListFormFieldPlacementsWithResponse(ctx context.Context, formFieldId string, params *ListFormFieldPlacementsParams, reqEditors ...RequestEditorFn) (*ListFormFieldPlacementsResponse, error) {
	rsp, err := c.ListFormFieldPlacements(ctx, formFieldId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFormFieldPlacementsResponse(rsp)
}

// CreateFormFieldPlacementWithBodyWithResponse request with arbitrary body returning *CreateFormFieldPlacementResponse
func (c *ClientWithResponses) CreateFormFieldPlacementWithBodyWithResponse(ctx context.Context, formFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFormFieldPlacementResponse, error) {
	rsp, err := c.CreateFormFieldPlacementWithBody(ctx, formFieldId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFormFieldPlacementResponse(rsp)
}

func (c *ClientWithResponses) CreateFormFieldPlacementWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, formFieldId string, body CreateFormFieldPlacementApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFormFieldPlacementResponse, error) {
	rsp, err := c.CreateFormFieldPlacementWithApplicationVndAPIPlusJSONBody(ctx, formFieldId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFormFieldPlacementResponse(rsp)
}

// ListFormFieldPositionsWithResponse request returning *ListFormFieldPositionsResponse
func (c *ClientWithResponses) ListFormFieldPositionsWithResponse(ctx context.Context, formFieldId string, params *ListFormFieldPositionsParams, reqEditors ...RequestEditorFn) (*ListFormFieldPositionsResponse, error) {
	rsp, err := c.ListFormFieldPositions(ctx, formFieldId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFormFieldPositionsResponse(rsp)
}

// CreateFormFieldPositionWithBodyWithResponse request with arbitrary body returning *CreateFormFieldPositionResponse
func (c *ClientWithResponses) CreateFormFieldPositionWithBodyWithResponse(ctx context.Context, formFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFormFieldPositionResponse, error) {
	rsp, err := c.CreateFormFieldPositionWithBody(ctx, formFieldId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFormFieldPositionResponse(rsp)
}

func (c *ClientWithResponses) CreateFormFieldPositionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, formFieldId string, body CreateFormFieldPositionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFormFieldPositionResponse, error) {
	rsp, err := c.CreateFormFieldPositionWithApplicationVndAPIPlusJSONBody(ctx, formFieldId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFormFieldPositionResponse(rsp)
}

// DeleteFormFieldWithResponse request returning *DeleteFormFieldResponse
func (c *ClientWithResponses) DeleteFormFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFormFieldResponse, error) {
	rsp, err := c.DeleteFormField(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFormFieldResponse(rsp)
}

// GetFormFieldWithResponse request returning *GetFormFieldResponse
func (c *ClientWithResponses) GetFormFieldWithResponse(ctx context.Context, id string, params *GetFormFieldParams, reqEditors ...RequestEditorFn) (*GetFormFieldResponse, error) {
	rsp, err := c.GetFormField(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFormFieldResponse(rsp)
}

// UpdateFormFieldWithBodyWithResponse request with arbitrary body returning *UpdateFormFieldResponse
func (c *ClientWithResponses) UpdateFormFieldWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFormFieldResponse, error) {
	rsp, err := c.UpdateFormFieldWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFormFieldResponse(rsp)
}

func (c *ClientWithResponses) UpdateFormFieldWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateFormFieldApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFormFieldResponse, error) {
	rsp, err := c.UpdateFormFieldWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFormFieldResponse(rsp)
}

// DeleteFormSetConditionWithResponse request returning *DeleteFormSetConditionResponse
func (c *ClientWithResponses) DeleteFormSetConditionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFormSetConditionResponse, error) {
	rsp, err := c.DeleteFormSetCondition(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFormSetConditionResponse(rsp)
}

// GetFormSetConditionWithResponse request returning *GetFormSetConditionResponse
func (c *ClientWithResponses) GetFormSetConditionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFormSetConditionResponse, error) {
	rsp, err := c.GetFormSetCondition(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFormSetConditionResponse(rsp)
}

// UpdateFormSetConditionWithBodyWithResponse request with arbitrary body returning *UpdateFormSetConditionResponse
func (c *ClientWithResponses) UpdateFormSetConditionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFormSetConditionResponse, error) {
	rsp, err := c.UpdateFormSetConditionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFormSetConditionResponse(rsp)
}

func (c *ClientWithResponses) UpdateFormSetConditionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateFormSetConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFormSetConditionResponse, error) {
	rsp, err := c.UpdateFormSetConditionWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFormSetConditionResponse(rsp)
}

// ListFormSetsWithResponse request returning *ListFormSetsResponse
func (c *ClientWithResponses) ListFormSetsWithResponse(ctx context.Context, params *ListFormSetsParams, reqEditors ...RequestEditorFn) (*ListFormSetsResponse, error) {
	rsp, err := c.ListFormSets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFormSetsResponse(rsp)
}

// CreateFormSetWithBodyWithResponse request with arbitrary body returning *CreateFormSetResponse
func (c *ClientWithResponses) CreateFormSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFormSetResponse, error) {
	rsp, err := c.CreateFormSetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFormSetResponse(rsp)
}

func (c *ClientWithResponses) CreateFormSetWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateFormSetApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFormSetResponse, error) {
	rsp, err := c.CreateFormSetWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFormSetResponse(rsp)
}

// ListFormSetConditionsWithResponse request returning *ListFormSetConditionsResponse
func (c *ClientWithResponses) ListFormSetConditionsWithResponse(ctx context.Context, formSetId string, params *ListFormSetConditionsParams, reqEditors ...RequestEditorFn) (*ListFormSetConditionsResponse, error) {
	rsp, err := c.ListFormSetConditions(ctx, formSetId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFormSetConditionsResponse(rsp)
}

// CreateFormSetConditionWithBodyWithResponse request with arbitrary body returning *CreateFormSetConditionResponse
func (c *ClientWithResponses) CreateFormSetConditionWithBodyWithResponse(ctx context.Context, formSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFormSetConditionResponse, error) {
	rsp, err := c.CreateFormSetConditionWithBody(ctx, formSetId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFormSetConditionResponse(rsp)
}

func (c *ClientWithResponses) CreateFormSetConditionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, formSetId string, body CreateFormSetConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFormSetConditionResponse, error) {
	rsp, err := c.CreateFormSetConditionWithApplicationVndAPIPlusJSONBody(ctx, formSetId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFormSetConditionResponse(rsp)
}

// DeleteFormSetWithResponse request returning *DeleteFormSetResponse
func (c *ClientWithResponses) DeleteFormSetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFormSetResponse, error) {
	rsp, err := c.DeleteFormSet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFormSetResponse(rsp)
}

// GetFormSetWithResponse request returning *GetFormSetResponse
func (c *ClientWithResponses) GetFormSetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFormSetResponse, error) {
	rsp, err := c.GetFormSet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFormSetResponse(rsp)
}

// UpdateFormSetWithBodyWithResponse request with arbitrary body returning *UpdateFormSetResponse
func (c *ClientWithResponses) UpdateFormSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFormSetResponse, error) {
	rsp, err := c.UpdateFormSetWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFormSetResponse(rsp)
}

func (c *ClientWithResponses) UpdateFormSetWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateFormSetApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFormSetResponse, error) {
	rsp, err := c.UpdateFormSetWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFormSetResponse(rsp)
}

// ListFunctionalitiesWithResponse request returning *ListFunctionalitiesResponse
func (c *ClientWithResponses) ListFunctionalitiesWithResponse(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*ListFunctionalitiesResponse, error) {
	rsp, err := c.ListFunctionalities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFunctionalitiesResponse(rsp)
}

// CreateFunctionalityWithBodyWithResponse request with arbitrary body returning *CreateFunctionalityResponse
func (c *ClientWithResponses) CreateFunctionalityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFunctionalityResponse, error) {
	rsp, err := c.CreateFunctionalityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFunctionalityResponse(rsp)
}

func (c *ClientWithResponses) CreateFunctionalityWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateFunctionalityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFunctionalityResponse, error) {
	rsp, err := c.CreateFunctionalityWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFunctionalityResponse(rsp)
}

// DeleteFunctionalityWithResponse request returning *DeleteFunctionalityResponse
func (c *ClientWithResponses) DeleteFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFunctionalityResponse, error) {
	rsp, err := c.DeleteFunctionality(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFunctionalityResponse(rsp)
}

// GetFunctionalityWithResponse request returning *GetFunctionalityResponse
func (c *ClientWithResponses) GetFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFunctionalityResponse, error) {
	rsp, err := c.GetFunctionality(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalityResponse(rsp)
}

// UpdateFunctionalityWithBodyWithResponse request with arbitrary body returning *UpdateFunctionalityResponse
func (c *ClientWithResponses) UpdateFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFunctionalityResponse, error) {
	rsp, err := c.UpdateFunctionalityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFunctionalityResponse(rsp)
}

func (c *ClientWithResponses) UpdateFunctionalityWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateFunctionalityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFunctionalityResponse, error) {
	rsp, err := c.UpdateFunctionalityWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFunctionalityResponse(rsp)
}

// GetFunctionalityIncidentsChartWithResponse request returning *GetFunctionalityIncidentsChartResponse
func (c *ClientWithResponses) GetFunctionalityIncidentsChartWithResponse(ctx context.Context, id string, params *GetFunctionalityIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetFunctionalityIncidentsChartResponse, error) {
	rsp, err := c.GetFunctionalityIncidentsChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalityIncidentsChartResponse(rsp)
}

// GetFunctionalityUptimeChartWithResponse request returning *GetFunctionalityUptimeChartResponse
func (c *ClientWithResponses) GetFunctionalityUptimeChartWithResponse(ctx context.Context, id string, params *GetFunctionalityUptimeChartParams, reqEditors ...RequestEditorFn) (*GetFunctionalityUptimeChartResponse, error) {
	rsp, err := c.GetFunctionalityUptimeChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalityUptimeChartResponse(rsp)
}

// ListHeartbeatsWithResponse request returning *ListHeartbeatsResponse
func (c *ClientWithResponses) ListHeartbeatsWithResponse(ctx context.Context, params *ListHeartbeatsParams, reqEditors ...RequestEditorFn) (*ListHeartbeatsResponse, error) {
	rsp, err := c.ListHeartbeats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListHeartbeatsResponse(rsp)
}

// CreateHeartbeatWithBodyWithResponse request with arbitrary body returning *CreateHeartbeatResponse
func (c *ClientWithResponses) CreateHeartbeatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHeartbeatResponse, error) {
	rsp, err := c.CreateHeartbeatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHeartbeatResponse(rsp)
}

func (c *ClientWithResponses) CreateHeartbeatWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateHeartbeatApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHeartbeatResponse, error) {
	rsp, err := c.CreateHeartbeatWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHeartbeatResponse(rsp)
}

// PingHeartbeatWithResponse request returning *PingHeartbeatResponse
func (c *ClientWithResponses) PingHeartbeatWithResponse(ctx context.Context, heartbeatId string, reqEditors ...RequestEditorFn) (*PingHeartbeatResponse, error) {
	rsp, err := c.PingHeartbeat(ctx, heartbeatId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePingHeartbeatResponse(rsp)
}

// DeleteHeartbeatWithResponse request returning *DeleteHeartbeatResponse
func (c *ClientWithResponses) DeleteHeartbeatWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteHeartbeatResponse, error) {
	rsp, err := c.DeleteHeartbeat(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHeartbeatResponse(rsp)
}

// GetHeartbeatWithResponse request returning *GetHeartbeatResponse
func (c *ClientWithResponses) GetHeartbeatWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetHeartbeatResponse, error) {
	rsp, err := c.GetHeartbeat(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHeartbeatResponse(rsp)
}

// UpdateHeartbeatWithBodyWithResponse request with arbitrary body returning *UpdateHeartbeatResponse
func (c *ClientWithResponses) UpdateHeartbeatWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateHeartbeatResponse, error) {
	rsp, err := c.UpdateHeartbeatWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateHeartbeatResponse(rsp)
}

func (c *ClientWithResponses) UpdateHeartbeatWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateHeartbeatApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateHeartbeatResponse, error) {
	rsp, err := c.UpdateHeartbeatWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateHeartbeatResponse(rsp)
}

// DeleteIncidentCustomFieldSelectionWithResponse request returning *DeleteIncidentCustomFieldSelectionResponse
func (c *ClientWithResponses) DeleteIncidentCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.DeleteIncidentCustomFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentCustomFieldSelectionResponse(rsp)
}

// GetIncidentCustomFieldSelectionWithResponse request returning *GetIncidentCustomFieldSelectionResponse
func (c *ClientWithResponses) GetIncidentCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.GetIncidentCustomFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentCustomFieldSelectionResponse(rsp)
}

// UpdateIncidentCustomFieldSelectionWithBodyWithResponse request with arbitrary body returning *UpdateIncidentCustomFieldSelectionResponse
func (c *ClientWithResponses) UpdateIncidentCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.UpdateIncidentCustomFieldSelectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentCustomFieldSelectionResponse(rsp)
}

func (c *ClientWithResponses) UpdateIncidentCustomFieldSelectionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.UpdateIncidentCustomFieldSelectionWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentCustomFieldSelectionResponse(rsp)
}

// DeleteIncidentEventFunctionalityWithResponse request returning *DeleteIncidentEventFunctionalityResponse
func (c *ClientWithResponses) DeleteIncidentEventFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventFunctionalityResponse, error) {
	rsp, err := c.DeleteIncidentEventFunctionality(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentEventFunctionalityResponse(rsp)
}

// GetIncidentEventFunctionalitiesWithResponse request returning *GetIncidentEventFunctionalitiesResponse
func (c *ClientWithResponses) GetIncidentEventFunctionalitiesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventFunctionalitiesResponse, error) {
	rsp, err := c.GetIncidentEventFunctionalities(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentEventFunctionalitiesResponse(rsp)
}

// UpdateIncidentEventFunctionalityWithBodyWithResponse request with arbitrary body returning *UpdateIncidentEventFunctionalityResponse
func (c *ClientWithResponses) UpdateIncidentEventFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventFunctionalityResponse, error) {
	rsp, err := c.UpdateIncidentEventFunctionalityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentEventFunctionalityResponse(rsp)
}

func (c *ClientWithResponses) UpdateIncidentEventFunctionalityWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentEventFunctionalityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentEventFunctionalityResponse, error) {
	rsp, err := c.UpdateIncidentEventFunctionalityWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentEventFunctionalityResponse(rsp)
}

// DeleteIncidentEventServiceWithResponse request returning *DeleteIncidentEventServiceResponse
func (c *ClientWithResponses) DeleteIncidentEventServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventServiceResponse, error) {
	rsp, err := c.DeleteIncidentEventService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentEventServiceResponse(rsp)
}

// GetIncidentEventServicesWithResponse request returning *GetIncidentEventServicesResponse
func (c *ClientWithResponses) GetIncidentEventServicesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventServicesResponse, error) {
	rsp, err := c.GetIncidentEventServices(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentEventServicesResponse(rsp)
}

// UpdateIncidentEventServiceWithBodyWithResponse request with arbitrary body returning *UpdateIncidentEventServiceResponse
func (c *ClientWithResponses) UpdateIncidentEventServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventServiceResponse, error) {
	rsp, err := c.UpdateIncidentEventServiceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentEventServiceResponse(rsp)
}

func (c *ClientWithResponses) UpdateIncidentEventServiceWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentEventServiceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentEventServiceResponse, error) {
	rsp, err := c.UpdateIncidentEventServiceWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentEventServiceResponse(rsp)
}

// DeleteIncidentFormFieldSelectionWithResponse request returning *DeleteIncidentFormFieldSelectionResponse
func (c *ClientWithResponses) DeleteIncidentFormFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentFormFieldSelectionResponse, error) {
	rsp, err := c.DeleteIncidentFormFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentFormFieldSelectionResponse(rsp)
}

// GetIncidentFormFieldSelectionWithResponse request returning *GetIncidentFormFieldSelectionResponse
func (c *ClientWithResponses) GetIncidentFormFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentFormFieldSelectionResponse, error) {
	rsp, err := c.GetIncidentFormFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentFormFieldSelectionResponse(rsp)
}

// UpdateIncidentFormFieldSelectionWithBodyWithResponse request with arbitrary body returning *UpdateIncidentFormFieldSelectionResponse
func (c *ClientWithResponses) UpdateIncidentFormFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentFormFieldSelectionResponse, error) {
	rsp, err := c.UpdateIncidentFormFieldSelectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentFormFieldSelectionResponse(rsp)
}

func (c *ClientWithResponses) UpdateIncidentFormFieldSelectionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentFormFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentFormFieldSelectionResponse, error) {
	rsp, err := c.UpdateIncidentFormFieldSelectionWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentFormFieldSelectionResponse(rsp)
}

// DeleteIncidentPermissionSetBooleanWithResponse request returning *DeleteIncidentPermissionSetBooleanResponse
func (c *ClientWithResponses) DeleteIncidentPermissionSetBooleanWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentPermissionSetBooleanResponse, error) {
	rsp, err := c.DeleteIncidentPermissionSetBoolean(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentPermissionSetBooleanResponse(rsp)
}

// GetIncidentPermissionSetBooleanWithResponse request returning *GetIncidentPermissionSetBooleanResponse
func (c *ClientWithResponses) GetIncidentPermissionSetBooleanWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentPermissionSetBooleanResponse, error) {
	rsp, err := c.GetIncidentPermissionSetBoolean(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentPermissionSetBooleanResponse(rsp)
}

// UpdateIncidentPermissionSetBooleanWithBodyWithResponse request with arbitrary body returning *UpdateIncidentPermissionSetBooleanResponse
func (c *ClientWithResponses) UpdateIncidentPermissionSetBooleanWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPermissionSetBooleanResponse, error) {
	rsp, err := c.UpdateIncidentPermissionSetBooleanWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentPermissionSetBooleanResponse(rsp)
}

func (c *ClientWithResponses) UpdateIncidentPermissionSetBooleanWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentPermissionSetBooleanApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentPermissionSetBooleanResponse, error) {
	rsp, err := c.UpdateIncidentPermissionSetBooleanWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentPermissionSetBooleanResponse(rsp)
}

// DeleteIncidentPermissionSetResourceWithResponse request returning *DeleteIncidentPermissionSetResourceResponse
func (c *ClientWithResponses) DeleteIncidentPermissionSetResourceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentPermissionSetResourceResponse, error) {
	rsp, err := c.DeleteIncidentPermissionSetResource(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentPermissionSetResourceResponse(rsp)
}

// GetIncidentPermissionSetResourceWithResponse request returning *GetIncidentPermissionSetResourceResponse
func (c *ClientWithResponses) GetIncidentPermissionSetResourceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentPermissionSetResourceResponse, error) {
	rsp, err := c.GetIncidentPermissionSetResource(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentPermissionSetResourceResponse(rsp)
}

// UpdateIncidentPermissionSetResourceWithBodyWithResponse request with arbitrary body returning *UpdateIncidentPermissionSetResourceResponse
func (c *ClientWithResponses) UpdateIncidentPermissionSetResourceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPermissionSetResourceResponse, error) {
	rsp, err := c.UpdateIncidentPermissionSetResourceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentPermissionSetResourceResponse(rsp)
}

func (c *ClientWithResponses) UpdateIncidentPermissionSetResourceWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentPermissionSetResourceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentPermissionSetResourceResponse, error) {
	rsp, err := c.UpdateIncidentPermissionSetResourceWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentPermissionSetResourceResponse(rsp)
}

// ListIncidentPermissionSetsWithResponse request returning *ListIncidentPermissionSetsResponse
func (c *ClientWithResponses) ListIncidentPermissionSetsWithResponse(ctx context.Context, params *ListIncidentPermissionSetsParams, reqEditors ...RequestEditorFn) (*ListIncidentPermissionSetsResponse, error) {
	rsp, err := c.ListIncidentPermissionSets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentPermissionSetsResponse(rsp)
}

// CreateIncidentPermissionSetWithBodyWithResponse request with arbitrary body returning *CreateIncidentPermissionSetResponse
func (c *ClientWithResponses) CreateIncidentPermissionSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentPermissionSetResponse, error) {
	rsp, err := c.CreateIncidentPermissionSetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentPermissionSetResponse(rsp)
}

func (c *ClientWithResponses) CreateIncidentPermissionSetWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateIncidentPermissionSetApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentPermissionSetResponse, error) {
	rsp, err := c.CreateIncidentPermissionSetWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentPermissionSetResponse(rsp)
}

// DeleteIncidentPermissionSetWithResponse request returning *DeleteIncidentPermissionSetResponse
func (c *ClientWithResponses) DeleteIncidentPermissionSetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentPermissionSetResponse, error) {
	rsp, err := c.DeleteIncidentPermissionSet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentPermissionSetResponse(rsp)
}

// GetIncidentPermissionSetWithResponse request returning *GetIncidentPermissionSetResponse
func (c *ClientWithResponses) GetIncidentPermissionSetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentPermissionSetResponse, error) {
	rsp, err := c.GetIncidentPermissionSet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentPermissionSetResponse(rsp)
}

// UpdateIncidentPermissionSetWithBodyWithResponse request with arbitrary body returning *UpdateIncidentPermissionSetResponse
func (c *ClientWithResponses) UpdateIncidentPermissionSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPermissionSetResponse, error) {
	rsp, err := c.UpdateIncidentPermissionSetWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentPermissionSetResponse(rsp)
}

func (c *ClientWithResponses) UpdateIncidentPermissionSetWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentPermissionSetApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentPermissionSetResponse, error) {
	rsp, err := c.UpdateIncidentPermissionSetWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentPermissionSetResponse(rsp)
}

// ListIncidentPermissionSetBooleansWithResponse request returning *ListIncidentPermissionSetBooleansResponse
func (c *ClientWithResponses) ListIncidentPermissionSetBooleansWithResponse(ctx context.Context, incidentPermissionSetId string, params *ListIncidentPermissionSetBooleansParams, reqEditors ...RequestEditorFn) (*ListIncidentPermissionSetBooleansResponse, error) {
	rsp, err := c.ListIncidentPermissionSetBooleans(ctx, incidentPermissionSetId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentPermissionSetBooleansResponse(rsp)
}

// CreateIncidentPermissionSetBooleanWithBodyWithResponse request with arbitrary body returning *CreateIncidentPermissionSetBooleanResponse
func (c *ClientWithResponses) CreateIncidentPermissionSetBooleanWithBodyWithResponse(ctx context.Context, incidentPermissionSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentPermissionSetBooleanResponse, error) {
	rsp, err := c.CreateIncidentPermissionSetBooleanWithBody(ctx, incidentPermissionSetId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentPermissionSetBooleanResponse(rsp)
}

func (c *ClientWithResponses) CreateIncidentPermissionSetBooleanWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentPermissionSetId string, body CreateIncidentPermissionSetBooleanApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentPermissionSetBooleanResponse, error) {
	rsp, err := c.CreateIncidentPermissionSetBooleanWithApplicationVndAPIPlusJSONBody(ctx, incidentPermissionSetId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentPermissionSetBooleanResponse(rsp)
}

// ListIncidentPermissionSetResourcesWithResponse request returning *ListIncidentPermissionSetResourcesResponse
func (c *ClientWithResponses) ListIncidentPermissionSetResourcesWithResponse(ctx context.Context, incidentPermissionSetId string, params *ListIncidentPermissionSetResourcesParams, reqEditors ...RequestEditorFn) (*ListIncidentPermissionSetResourcesResponse, error) {
	rsp, err := c.ListIncidentPermissionSetResources(ctx, incidentPermissionSetId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentPermissionSetResourcesResponse(rsp)
}

// CreateIncidentPermissionSetResourceWithBodyWithResponse request with arbitrary body returning *CreateIncidentPermissionSetResourceResponse
func (c *ClientWithResponses) CreateIncidentPermissionSetResourceWithBodyWithResponse(ctx context.Context, incidentPermissionSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentPermissionSetResourceResponse, error) {
	rsp, err := c.CreateIncidentPermissionSetResourceWithBody(ctx, incidentPermissionSetId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentPermissionSetResourceResponse(rsp)
}

func (c *ClientWithResponses) CreateIncidentPermissionSetResourceWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentPermissionSetId string, body CreateIncidentPermissionSetResourceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentPermissionSetResourceResponse, error) {
	rsp, err := c.CreateIncidentPermissionSetResourceWithApplicationVndAPIPlusJSONBody(ctx, incidentPermissionSetId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentPermissionSetResourceResponse(rsp)
}

// GetIncidentRetrospectiveStepWithResponse request returning *GetIncidentRetrospectiveStepResponse
func (c *ClientWithResponses) GetIncidentRetrospectiveStepWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRetrospectiveStepResponse, error) {
	rsp, err := c.GetIncidentRetrospectiveStep(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentRetrospectiveStepResponse(rsp)
}

// UpdateIncidentRetrospectiveStepWithBodyWithResponse request with arbitrary body returning *UpdateIncidentRetrospectiveStepResponse
func (c *ClientWithResponses) UpdateIncidentRetrospectiveStepWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRetrospectiveStepResponse, error) {
	rsp, err := c.UpdateIncidentRetrospectiveStepWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentRetrospectiveStepResponse(rsp)
}

func (c *ClientWithResponses) UpdateIncidentRetrospectiveStepWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentRetrospectiveStepApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentRetrospectiveStepResponse, error) {
	rsp, err := c.UpdateIncidentRetrospectiveStepWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentRetrospectiveStepResponse(rsp)
}

// DeleteIncidentRoleTaskWithResponse request returning *DeleteIncidentRoleTaskResponse
func (c *ClientWithResponses) DeleteIncidentRoleTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleTaskResponse, error) {
	rsp, err := c.DeleteIncidentRoleTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentRoleTaskResponse(rsp)
}

// GetIncidentRoleTaskWithResponse request returning *GetIncidentRoleTaskResponse
func (c *ClientWithResponses) GetIncidentRoleTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleTaskResponse, error) {
	rsp, err := c.GetIncidentRoleTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentRoleTaskResponse(rsp)
}

// UpdateIncidentRoleTaskWithBodyWithResponse request with arbitrary body returning *UpdateIncidentRoleTaskResponse
func (c *ClientWithResponses) UpdateIncidentRoleTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleTaskResponse, error) {
	rsp, err := c.UpdateIncidentRoleTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentRoleTaskResponse(rsp)
}

func (c *ClientWithResponses) UpdateIncidentRoleTaskWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentRoleTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleTaskResponse, error) {
	rsp, err := c.UpdateIncidentRoleTaskWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentRoleTaskResponse(rsp)
}

// ListIncidentRolesWithResponse request returning *ListIncidentRolesResponse
func (c *ClientWithResponses) ListIncidentRolesWithResponse(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*ListIncidentRolesResponse, error) {
	rsp, err := c.ListIncidentRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentRolesResponse(rsp)
}

// CreateIncidentRoleWithBodyWithResponse request with arbitrary body returning *CreateIncidentRoleResponse
func (c *ClientWithResponses) CreateIncidentRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleResponse, error) {
	rsp, err := c.CreateIncidentRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentRoleResponse(rsp)
}

func (c *ClientWithResponses) CreateIncidentRoleWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateIncidentRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentRoleResponse, error) {
	rsp, err := c.CreateIncidentRoleWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentRoleResponse(rsp)
}

// DeleteIncidentRoleWithResponse request returning *DeleteIncidentRoleResponse
func (c *ClientWithResponses) DeleteIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleResponse, error) {
	rsp, err := c.DeleteIncidentRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentRoleResponse(rsp)
}

// GetIncidentRoleWithResponse request returning *GetIncidentRoleResponse
func (c *ClientWithResponses) GetIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleResponse, error) {
	rsp, err := c.GetIncidentRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentRoleResponse(rsp)
}

// UpdateIncidentRoleWithBodyWithResponse request with arbitrary body returning *UpdateIncidentRoleResponse
func (c *ClientWithResponses) UpdateIncidentRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleResponse, error) {
	rsp, err := c.UpdateIncidentRoleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentRoleResponse(rsp)
}

func (c *ClientWithResponses) UpdateIncidentRoleWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleResponse, error) {
	rsp, err := c.UpdateIncidentRoleWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentRoleResponse(rsp)
}

// ListIncidentRoleTasksWithResponse request returning *ListIncidentRoleTasksResponse
func (c *ClientWithResponses) ListIncidentRoleTasksWithResponse(ctx context.Context, incidentRoleId string, params *ListIncidentRoleTasksParams, reqEditors ...RequestEditorFn) (*ListIncidentRoleTasksResponse, error) {
	rsp, err := c.ListIncidentRoleTasks(ctx, incidentRoleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentRoleTasksResponse(rsp)
}

// CreateIncidentRoleTaskWithBodyWithResponse request with arbitrary body returning *CreateIncidentRoleTaskResponse
func (c *ClientWithResponses) CreateIncidentRoleTaskWithBodyWithResponse(ctx context.Context, incidentRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleTaskResponse, error) {
	rsp, err := c.CreateIncidentRoleTaskWithBody(ctx, incidentRoleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentRoleTaskResponse(rsp)
}

func (c *ClientWithResponses) CreateIncidentRoleTaskWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentRoleId string, body CreateIncidentRoleTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentRoleTaskResponse, error) {
	rsp, err := c.CreateIncidentRoleTaskWithApplicationVndAPIPlusJSONBody(ctx, incidentRoleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentRoleTaskResponse(rsp)
}

// DeleteIncidentSubStatusWithResponse request returning *DeleteIncidentSubStatusResponse
func (c *ClientWithResponses) DeleteIncidentSubStatusWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentSubStatusResponse, error) {
	rsp, err := c.DeleteIncidentSubStatus(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentSubStatusResponse(rsp)
}

// GetIncidentSubStatusWithResponse request returning *GetIncidentSubStatusResponse
func (c *ClientWithResponses) GetIncidentSubStatusWithResponse(ctx context.Context, id string, params *GetIncidentSubStatusParams, reqEditors ...RequestEditorFn) (*GetIncidentSubStatusResponse, error) {
	rsp, err := c.GetIncidentSubStatus(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentSubStatusResponse(rsp)
}

// UpdateIncidentSubStatusWithBodyWithResponse request with arbitrary body returning *UpdateIncidentSubStatusResponse
func (c *ClientWithResponses) UpdateIncidentSubStatusWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentSubStatusResponse, error) {
	rsp, err := c.UpdateIncidentSubStatusWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentSubStatusResponse(rsp)
}

func (c *ClientWithResponses) UpdateIncidentSubStatusWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentSubStatusApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentSubStatusResponse, error) {
	rsp, err := c.UpdateIncidentSubStatusWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentSubStatusResponse(rsp)
}

// ListIncidentTypesWithResponse request returning *ListIncidentTypesResponse
func (c *ClientWithResponses) ListIncidentTypesWithResponse(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*ListIncidentTypesResponse, error) {
	rsp, err := c.ListIncidentTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentTypesResponse(rsp)
}

// CreateIncidentTypeWithBodyWithResponse request with arbitrary body returning *CreateIncidentTypeResponse
func (c *ClientWithResponses) CreateIncidentTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTypeResponse, error) {
	rsp, err := c.CreateIncidentTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentTypeResponse(rsp)
}

func (c *ClientWithResponses) CreateIncidentTypeWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateIncidentTypeApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentTypeResponse, error) {
	rsp, err := c.CreateIncidentTypeWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentTypeResponse(rsp)
}

// DeleteIncidentTypeWithResponse request returning *DeleteIncidentTypeResponse
func (c *ClientWithResponses) DeleteIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTypeResponse, error) {
	rsp, err := c.DeleteIncidentType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentTypeResponse(rsp)
}

// GetIncidentTypeWithResponse request returning *GetIncidentTypeResponse
func (c *ClientWithResponses) GetIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTypeResponse, error) {
	rsp, err := c.GetIncidentType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentTypeResponse(rsp)
}

// UpdateIncidentTypeWithBodyWithResponse request with arbitrary body returning *UpdateIncidentTypeResponse
func (c *ClientWithResponses) UpdateIncidentTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTypeResponse, error) {
	rsp, err := c.UpdateIncidentTypeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentTypeResponse(rsp)
}

func (c *ClientWithResponses) UpdateIncidentTypeWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentTypeApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentTypeResponse, error) {
	rsp, err := c.UpdateIncidentTypeWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentTypeResponse(rsp)
}

// ListIncidentsWithResponse request returning *ListIncidentsResponse
func (c *ClientWithResponses) ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*ListIncidentsResponse, error) {
	rsp, err := c.ListIncidents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentsResponse(rsp)
}

// CreateIncidentWithBodyWithResponse request with arbitrary body returning *CreateIncidentResponse
func (c *ClientWithResponses) CreateIncidentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error) {
	rsp, err := c.CreateIncidentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentResponse(rsp)
}

func (c *ClientWithResponses) CreateIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error) {
	rsp, err := c.CreateIncidentWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentResponse(rsp)
}

// DeleteIncidentWithResponse request returning *DeleteIncidentResponse
func (c *ClientWithResponses) DeleteIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentResponse, error) {
	rsp, err := c.DeleteIncident(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentResponse(rsp)
}

// GetIncidentWithResponse request returning *GetIncidentResponse
func (c *ClientWithResponses) GetIncidentWithResponse(ctx context.Context, id string, params *GetIncidentParams, reqEditors ...RequestEditorFn) (*GetIncidentResponse, error) {
	rsp, err := c.GetIncident(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentResponse(rsp)
}

// UpdateIncidentWithBodyWithResponse request with arbitrary body returning *UpdateIncidentResponse
func (c *ClientWithResponses) UpdateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentResponse, error) {
	rsp, err := c.UpdateIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentResponse(rsp)
}

func (c *ClientWithResponses) UpdateIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentResponse, error) {
	rsp, err := c.UpdateIncidentWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentResponse(rsp)
}

// AddSubscribersToIncidentWithBodyWithResponse request with arbitrary body returning *AddSubscribersToIncidentResponse
func (c *ClientWithResponses) AddSubscribersToIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddSubscribersToIncidentResponse, error) {
	rsp, err := c.AddSubscribersToIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddSubscribersToIncidentResponse(rsp)
}

func (c *ClientWithResponses) AddSubscribersToIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body AddSubscribersToIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*AddSubscribersToIncidentResponse, error) {
	rsp, err := c.AddSubscribersToIncidentWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddSubscribersToIncidentResponse(rsp)
}

// AssignUserToIncidentWithBodyWithResponse request with arbitrary body returning *AssignUserToIncidentResponse
func (c *ClientWithResponses) AssignUserToIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignUserToIncidentResponse, error) {
	rsp, err := c.AssignUserToIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignUserToIncidentResponse(rsp)
}

func (c *ClientWithResponses) AssignUserToIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body AssignUserToIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignUserToIncidentResponse, error) {
	rsp, err := c.AssignUserToIncidentWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignUserToIncidentResponse(rsp)
}

// CancelIncidentWithBodyWithResponse request with arbitrary body returning *CancelIncidentResponse
func (c *ClientWithResponses) CancelIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelIncidentResponse, error) {
	rsp, err := c.CancelIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelIncidentResponse(rsp)
}

func (c *ClientWithResponses) CancelIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body CancelIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelIncidentResponse, error) {
	rsp, err := c.CancelIncidentWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelIncidentResponse(rsp)
}

// MarkAsDuplicateIncidentWithBodyWithResponse request with arbitrary body returning *MarkAsDuplicateIncidentResponse
func (c *ClientWithResponses) MarkAsDuplicateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarkAsDuplicateIncidentResponse, error) {
	rsp, err := c.MarkAsDuplicateIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarkAsDuplicateIncidentResponse(rsp)
}

func (c *ClientWithResponses) MarkAsDuplicateIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body MarkAsDuplicateIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*MarkAsDuplicateIncidentResponse, error) {
	rsp, err := c.MarkAsDuplicateIncidentWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarkAsDuplicateIncidentResponse(rsp)
}

// TriageIncidentWithBodyWithResponse request with arbitrary body returning *TriageIncidentResponse
func (c *ClientWithResponses) TriageIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TriageIncidentResponse, error) {
	rsp, err := c.TriageIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTriageIncidentResponse(rsp)
}

func (c *ClientWithResponses) TriageIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body TriageIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*TriageIncidentResponse, error) {
	rsp, err := c.TriageIncidentWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTriageIncidentResponse(rsp)
}

// MitigateIncidentWithBodyWithResponse request with arbitrary body returning *MitigateIncidentResponse
func (c *ClientWithResponses) MitigateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MitigateIncidentResponse, error) {
	rsp, err := c.MitigateIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMitigateIncidentResponse(rsp)
}

func (c *ClientWithResponses) MitigateIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body MitigateIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*MitigateIncidentResponse, error) {
	rsp, err := c.MitigateIncidentWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMitigateIncidentResponse(rsp)
}

// RemoveSubscribersToIncidentWithBodyWithResponse request with arbitrary body returning *RemoveSubscribersToIncidentResponse
func (c *ClientWithResponses) RemoveSubscribersToIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveSubscribersToIncidentResponse, error) {
	rsp, err := c.RemoveSubscribersToIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveSubscribersToIncidentResponse(rsp)
}

func (c *ClientWithResponses) RemoveSubscribersToIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body RemoveSubscribersToIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveSubscribersToIncidentResponse, error) {
	rsp, err := c.RemoveSubscribersToIncidentWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveSubscribersToIncidentResponse(rsp)
}

// ResolveIncidentWithBodyWithResponse request with arbitrary body returning *ResolveIncidentResponse
func (c *ClientWithResponses) ResolveIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error) {
	rsp, err := c.ResolveIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolveIncidentResponse(rsp)
}

func (c *ClientWithResponses) ResolveIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body ResolveIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error) {
	rsp, err := c.ResolveIncidentWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolveIncidentResponse(rsp)
}

// RestartIncidentWithBodyWithResponse request with arbitrary body returning *RestartIncidentResponse
func (c *ClientWithResponses) RestartIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RestartIncidentResponse, error) {
	rsp, err := c.RestartIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestartIncidentResponse(rsp)
}

func (c *ClientWithResponses) RestartIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body RestartIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*RestartIncidentResponse, error) {
	rsp, err := c.RestartIncidentWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestartIncidentResponse(rsp)
}

// RemoveAssignedUserFromIncidentWithBodyWithResponse request with arbitrary body returning *RemoveAssignedUserFromIncidentResponse
func (c *ClientWithResponses) RemoveAssignedUserFromIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveAssignedUserFromIncidentResponse, error) {
	rsp, err := c.RemoveAssignedUserFromIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveAssignedUserFromIncidentResponse(rsp)
}

func (c *ClientWithResponses) RemoveAssignedUserFromIncidentWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body RemoveAssignedUserFromIncidentApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveAssignedUserFromIncidentResponse, error) {
	rsp, err := c.RemoveAssignedUserFromIncidentWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveAssignedUserFromIncidentResponse(rsp)
}

// ListIncidentActionItemsWithResponse request returning *ListIncidentActionItemsResponse
func (c *ClientWithResponses) ListIncidentActionItemsWithResponse(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*ListIncidentActionItemsResponse, error) {
	rsp, err := c.ListIncidentActionItems(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentActionItemsResponse(rsp)
}

// CreateIncidentActionItemWithBodyWithResponse request with arbitrary body returning *CreateIncidentActionItemResponse
func (c *ClientWithResponses) CreateIncidentActionItemWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentActionItemResponse, error) {
	rsp, err := c.CreateIncidentActionItemWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentActionItemResponse(rsp)
}

func (c *ClientWithResponses) CreateIncidentActionItemWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentId string, body CreateIncidentActionItemApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentActionItemResponse, error) {
	rsp, err := c.CreateIncidentActionItemWithApplicationVndAPIPlusJSONBody(ctx, incidentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentActionItemResponse(rsp)
}

// ListIncidentAlertsWithResponse request returning *ListIncidentAlertsResponse
func (c *ClientWithResponses) ListIncidentAlertsWithResponse(ctx context.Context, incidentId string, params *ListIncidentAlertsParams, reqEditors ...RequestEditorFn) (*ListIncidentAlertsResponse, error) {
	rsp, err := c.ListIncidentAlerts(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentAlertsResponse(rsp)
}

// AttachAlertWithBodyWithResponse request with arbitrary body returning *AttachAlertResponse
func (c *ClientWithResponses) AttachAlertWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachAlertResponse, error) {
	rsp, err := c.AttachAlertWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachAlertResponse(rsp)
}

func (c *ClientWithResponses) AttachAlertWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentId string, body AttachAlertApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*AttachAlertResponse, error) {
	rsp, err := c.AttachAlertWithApplicationVndAPIPlusJSONBody(ctx, incidentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachAlertResponse(rsp)
}

// ListIncidentCustomFieldSelectionsWithResponse request returning *ListIncidentCustomFieldSelectionsResponse
func (c *ClientWithResponses) ListIncidentCustomFieldSelectionsWithResponse(ctx context.Context, incidentId string, params *ListIncidentCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListIncidentCustomFieldSelectionsResponse, error) {
	rsp, err := c.ListIncidentCustomFieldSelections(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentCustomFieldSelectionsResponse(rsp)
}

// CreateIncidentCustomFieldSelectionWithBodyWithResponse request with arbitrary body returning *CreateIncidentCustomFieldSelectionResponse
func (c *ClientWithResponses) CreateIncidentCustomFieldSelectionWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.CreateIncidentCustomFieldSelectionWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentCustomFieldSelectionResponse(rsp)
}

func (c *ClientWithResponses) CreateIncidentCustomFieldSelectionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentId string, body CreateIncidentCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.CreateIncidentCustomFieldSelectionWithApplicationVndAPIPlusJSONBody(ctx, incidentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentCustomFieldSelectionResponse(rsp)
}

// ListIncidentEventsWithResponse request returning *ListIncidentEventsResponse
func (c *ClientWithResponses) ListIncidentEventsWithResponse(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*ListIncidentEventsResponse, error) {
	rsp, err := c.ListIncidentEvents(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentEventsResponse(rsp)
}

// CreateIncidentEventWithBodyWithResponse request with arbitrary body returning *CreateIncidentEventResponse
func (c *ClientWithResponses) CreateIncidentEventWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventResponse, error) {
	rsp, err := c.CreateIncidentEventWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentEventResponse(rsp)
}

func (c *ClientWithResponses) CreateIncidentEventWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentId string, body CreateIncidentEventApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentEventResponse, error) {
	rsp, err := c.CreateIncidentEventWithApplicationVndAPIPlusJSONBody(ctx, incidentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentEventResponse(rsp)
}

// ListIncidentFeedbacksWithResponse request returning *ListIncidentFeedbacksResponse
func (c *ClientWithResponses) ListIncidentFeedbacksWithResponse(ctx context.Context, incidentId string, params *ListIncidentFeedbacksParams, reqEditors ...RequestEditorFn) (*ListIncidentFeedbacksResponse, error) {
	rsp, err := c.ListIncidentFeedbacks(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentFeedbacksResponse(rsp)
}

// CreateIncidentFeedbackWithBodyWithResponse request with arbitrary body returning *CreateIncidentFeedbackResponse
func (c *ClientWithResponses) CreateIncidentFeedbackWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentFeedbackResponse, error) {
	rsp, err := c.CreateIncidentFeedbackWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentFeedbackResponse(rsp)
}

func (c *ClientWithResponses) CreateIncidentFeedbackWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentId string, body CreateIncidentFeedbackApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentFeedbackResponse, error) {
	rsp, err := c.CreateIncidentFeedbackWithApplicationVndAPIPlusJSONBody(ctx, incidentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentFeedbackResponse(rsp)
}

// ListIncidentFormFieldSelectionsWithResponse request returning *ListIncidentFormFieldSelectionsResponse
func (c *ClientWithResponses) ListIncidentFormFieldSelectionsWithResponse(ctx context.Context, incidentId string, params *ListIncidentFormFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListIncidentFormFieldSelectionsResponse, error) {
	rsp, err := c.ListIncidentFormFieldSelections(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentFormFieldSelectionsResponse(rsp)
}

// CreateIncidentFormFieldSelectionWithBodyWithResponse request with arbitrary body returning *CreateIncidentFormFieldSelectionResponse
func (c *ClientWithResponses) CreateIncidentFormFieldSelectionWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentFormFieldSelectionResponse, error) {
	rsp, err := c.CreateIncidentFormFieldSelectionWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentFormFieldSelectionResponse(rsp)
}

func (c *ClientWithResponses) CreateIncidentFormFieldSelectionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentId string, body CreateIncidentFormFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentFormFieldSelectionResponse, error) {
	rsp, err := c.CreateIncidentFormFieldSelectionWithApplicationVndAPIPlusJSONBody(ctx, incidentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentFormFieldSelectionResponse(rsp)
}

// ListIncidentStatusPagesWithResponse request returning *ListIncidentStatusPagesResponse
func (c *ClientWithResponses) ListIncidentStatusPagesWithResponse(ctx context.Context, incidentId string, params *ListIncidentStatusPagesParams, reqEditors ...RequestEditorFn) (*ListIncidentStatusPagesResponse, error) {
	rsp, err := c.ListIncidentStatusPages(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentStatusPagesResponse(rsp)
}

// CreateIncidentStatusPageWithBodyWithResponse request with arbitrary body returning *CreateIncidentStatusPageResponse
func (c *ClientWithResponses) CreateIncidentStatusPageWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentStatusPageResponse, error) {
	rsp, err := c.CreateIncidentStatusPageWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentStatusPageResponse(rsp)
}

func (c *ClientWithResponses) CreateIncidentStatusPageWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentId string, body CreateIncidentStatusPageApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentStatusPageResponse, error) {
	rsp, err := c.CreateIncidentStatusPageWithApplicationVndAPIPlusJSONBody(ctx, incidentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentStatusPageResponse(rsp)
}

// ListIncidentSubStatusesWithResponse request returning *ListIncidentSubStatusesResponse
func (c *ClientWithResponses) ListIncidentSubStatusesWithResponse(ctx context.Context, incidentId string, params *ListIncidentSubStatusesParams, reqEditors ...RequestEditorFn) (*ListIncidentSubStatusesResponse, error) {
	rsp, err := c.ListIncidentSubStatuses(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentSubStatusesResponse(rsp)
}

// CreateIncidentSubStatusWithBodyWithResponse request with arbitrary body returning *CreateIncidentSubStatusResponse
func (c *ClientWithResponses) CreateIncidentSubStatusWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentSubStatusResponse, error) {
	rsp, err := c.CreateIncidentSubStatusWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentSubStatusResponse(rsp)
}

func (c *ClientWithResponses) CreateIncidentSubStatusWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, incidentId string, body CreateIncidentSubStatusApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentSubStatusResponse, error) {
	rsp, err := c.CreateIncidentSubStatusWithApplicationVndAPIPlusJSONBody(ctx, incidentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentSubStatusResponse(rsp)
}

// GetIpRangesWithResponse request returning *GetIpRangesResponse
func (c *ClientWithResponses) GetIpRangesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIpRangesResponse, error) {
	rsp, err := c.GetIpRanges(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIpRangesResponse(rsp)
}

// ListLiveCallRoutersWithResponse request returning *ListLiveCallRoutersResponse
func (c *ClientWithResponses) ListLiveCallRoutersWithResponse(ctx context.Context, params *ListLiveCallRoutersParams, reqEditors ...RequestEditorFn) (*ListLiveCallRoutersResponse, error) {
	rsp, err := c.ListLiveCallRouters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListLiveCallRoutersResponse(rsp)
}

// CreateLiveCallRouterWithBodyWithResponse request with arbitrary body returning *CreateLiveCallRouterResponse
func (c *ClientWithResponses) CreateLiveCallRouterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLiveCallRouterResponse, error) {
	rsp, err := c.CreateLiveCallRouterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLiveCallRouterResponse(rsp)
}

func (c *ClientWithResponses) CreateLiveCallRouterWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateLiveCallRouterApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLiveCallRouterResponse, error) {
	rsp, err := c.CreateLiveCallRouterWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLiveCallRouterResponse(rsp)
}

// GeneratePhoneNumberLiveCallRouterWithResponse request returning *GeneratePhoneNumberLiveCallRouterResponse
func (c *ClientWithResponses) GeneratePhoneNumberLiveCallRouterWithResponse(ctx context.Context, params *GeneratePhoneNumberLiveCallRouterParams, reqEditors ...RequestEditorFn) (*GeneratePhoneNumberLiveCallRouterResponse, error) {
	rsp, err := c.GeneratePhoneNumberLiveCallRouter(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGeneratePhoneNumberLiveCallRouterResponse(rsp)
}

// DeleteLiveCallRouterWithResponse request returning *DeleteLiveCallRouterResponse
func (c *ClientWithResponses) DeleteLiveCallRouterWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteLiveCallRouterResponse, error) {
	rsp, err := c.DeleteLiveCallRouter(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLiveCallRouterResponse(rsp)
}

// GetLiveCallRouterWithResponse request returning *GetLiveCallRouterResponse
func (c *ClientWithResponses) GetLiveCallRouterWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetLiveCallRouterResponse, error) {
	rsp, err := c.GetLiveCallRouter(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLiveCallRouterResponse(rsp)
}

// UpdateLiveCallRouterWithBodyWithResponse request with arbitrary body returning *UpdateLiveCallRouterResponse
func (c *ClientWithResponses) UpdateLiveCallRouterWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateLiveCallRouterResponse, error) {
	rsp, err := c.UpdateLiveCallRouterWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLiveCallRouterResponse(rsp)
}

func (c *ClientWithResponses) UpdateLiveCallRouterWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateLiveCallRouterApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateLiveCallRouterResponse, error) {
	rsp, err := c.UpdateLiveCallRouterWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLiveCallRouterResponse(rsp)
}

// DeleteUserNotificationRuleWithResponse request returning *DeleteUserNotificationRuleResponse
func (c *ClientWithResponses) DeleteUserNotificationRuleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteUserNotificationRuleResponse, error) {
	rsp, err := c.DeleteUserNotificationRule(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserNotificationRuleResponse(rsp)
}

// GetUserNotificationRuleWithResponse request returning *GetUserNotificationRuleResponse
func (c *ClientWithResponses) GetUserNotificationRuleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetUserNotificationRuleResponse, error) {
	rsp, err := c.GetUserNotificationRule(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserNotificationRuleResponse(rsp)
}

// UpdateUserNotificationRuleWithBodyWithResponse request with arbitrary body returning *UpdateUserNotificationRuleResponse
func (c *ClientWithResponses) UpdateUserNotificationRuleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserNotificationRuleResponse, error) {
	rsp, err := c.UpdateUserNotificationRuleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserNotificationRuleResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserNotificationRuleWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateUserNotificationRuleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserNotificationRuleResponse, error) {
	rsp, err := c.UpdateUserNotificationRuleWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserNotificationRuleResponse(rsp)
}

// ListOnCallRolesWithResponse request returning *ListOnCallRolesResponse
func (c *ClientWithResponses) ListOnCallRolesWithResponse(ctx context.Context, params *ListOnCallRolesParams, reqEditors ...RequestEditorFn) (*ListOnCallRolesResponse, error) {
	rsp, err := c.ListOnCallRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOnCallRolesResponse(rsp)
}

// CreateOnCallRoleWithBodyWithResponse request with arbitrary body returning *CreateOnCallRoleResponse
func (c *ClientWithResponses) CreateOnCallRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOnCallRoleResponse, error) {
	rsp, err := c.CreateOnCallRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOnCallRoleResponse(rsp)
}

func (c *ClientWithResponses) CreateOnCallRoleWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateOnCallRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOnCallRoleResponse, error) {
	rsp, err := c.CreateOnCallRoleWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOnCallRoleResponse(rsp)
}

// DeleteOnCallRoleWithResponse request returning *DeleteOnCallRoleResponse
func (c *ClientWithResponses) DeleteOnCallRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteOnCallRoleResponse, error) {
	rsp, err := c.DeleteOnCallRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOnCallRoleResponse(rsp)
}

// GetOnCallRoleWithResponse request returning *GetOnCallRoleResponse
func (c *ClientWithResponses) GetOnCallRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOnCallRoleResponse, error) {
	rsp, err := c.GetOnCallRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOnCallRoleResponse(rsp)
}

// UpdateOnCallRoleWithBodyWithResponse request with arbitrary body returning *UpdateOnCallRoleResponse
func (c *ClientWithResponses) UpdateOnCallRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOnCallRoleResponse, error) {
	rsp, err := c.UpdateOnCallRoleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOnCallRoleResponse(rsp)
}

func (c *ClientWithResponses) UpdateOnCallRoleWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateOnCallRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOnCallRoleResponse, error) {
	rsp, err := c.UpdateOnCallRoleWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOnCallRoleResponse(rsp)
}

// DeleteOnCallShadowWithResponse request returning *DeleteOnCallShadowResponse
func (c *ClientWithResponses) DeleteOnCallShadowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteOnCallShadowResponse, error) {
	rsp, err := c.DeleteOnCallShadow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOnCallShadowResponse(rsp)
}

// GetOnCallShadowWithResponse request returning *GetOnCallShadowResponse
func (c *ClientWithResponses) GetOnCallShadowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOnCallShadowResponse, error) {
	rsp, err := c.GetOnCallShadow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOnCallShadowResponse(rsp)
}

// UpdateOnCallShadowWithBodyWithResponse request with arbitrary body returning *UpdateOnCallShadowResponse
func (c *ClientWithResponses) UpdateOnCallShadowWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOnCallShadowResponse, error) {
	rsp, err := c.UpdateOnCallShadowWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOnCallShadowResponse(rsp)
}

func (c *ClientWithResponses) UpdateOnCallShadowWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateOnCallShadowApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOnCallShadowResponse, error) {
	rsp, err := c.UpdateOnCallShadowWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOnCallShadowResponse(rsp)
}

// DeleteOverrideShiftWithResponse request returning *DeleteOverrideShiftResponse
func (c *ClientWithResponses) DeleteOverrideShiftWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteOverrideShiftResponse, error) {
	rsp, err := c.DeleteOverrideShift(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOverrideShiftResponse(rsp)
}

// GetOverrideShiftWithResponse request returning *GetOverrideShiftResponse
func (c *ClientWithResponses) GetOverrideShiftWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOverrideShiftResponse, error) {
	rsp, err := c.GetOverrideShift(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOverrideShiftResponse(rsp)
}

// UpdateOverrideShiftWithBodyWithResponse request with arbitrary body returning *UpdateOverrideShiftResponse
func (c *ClientWithResponses) UpdateOverrideShiftWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOverrideShiftResponse, error) {
	rsp, err := c.UpdateOverrideShiftWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOverrideShiftResponse(rsp)
}

func (c *ClientWithResponses) UpdateOverrideShiftWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateOverrideShiftApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOverrideShiftResponse, error) {
	rsp, err := c.UpdateOverrideShiftWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOverrideShiftResponse(rsp)
}

// DeletePlaybookTaskWithResponse request returning *DeletePlaybookTaskResponse
func (c *ClientWithResponses) DeletePlaybookTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookTaskResponse, error) {
	rsp, err := c.DeletePlaybookTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaybookTaskResponse(rsp)
}

// GetPlaybookTaskWithResponse request returning *GetPlaybookTaskResponse
func (c *ClientWithResponses) GetPlaybookTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookTaskResponse, error) {
	rsp, err := c.GetPlaybookTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaybookTaskResponse(rsp)
}

// UpdatePlaybookTaskWithBodyWithResponse request with arbitrary body returning *UpdatePlaybookTaskResponse
func (c *ClientWithResponses) UpdatePlaybookTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookTaskResponse, error) {
	rsp, err := c.UpdatePlaybookTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookTaskResponse(rsp)
}

func (c *ClientWithResponses) UpdatePlaybookTaskWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdatePlaybookTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlaybookTaskResponse, error) {
	rsp, err := c.UpdatePlaybookTaskWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookTaskResponse(rsp)
}

// ListPlaybooksWithResponse request returning *ListPlaybooksResponse
func (c *ClientWithResponses) ListPlaybooksWithResponse(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*ListPlaybooksResponse, error) {
	rsp, err := c.ListPlaybooks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlaybooksResponse(rsp)
}

// CreatePlaybookWithBodyWithResponse request with arbitrary body returning *CreatePlaybookResponse
func (c *ClientWithResponses) CreatePlaybookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookResponse, error) {
	rsp, err := c.CreatePlaybookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookResponse(rsp)
}

func (c *ClientWithResponses) CreatePlaybookWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreatePlaybookApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlaybookResponse, error) {
	rsp, err := c.CreatePlaybookWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookResponse(rsp)
}

// DeletePlaybookWithResponse request returning *DeletePlaybookResponse
func (c *ClientWithResponses) DeletePlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookResponse, error) {
	rsp, err := c.DeletePlaybook(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaybookResponse(rsp)
}

// GetPlaybookWithResponse request returning *GetPlaybookResponse
func (c *ClientWithResponses) GetPlaybookWithResponse(ctx context.Context, id string, params *GetPlaybookParams, reqEditors ...RequestEditorFn) (*GetPlaybookResponse, error) {
	rsp, err := c.GetPlaybook(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaybookResponse(rsp)
}

// UpdatePlaybookWithBodyWithResponse request with arbitrary body returning *UpdatePlaybookResponse
func (c *ClientWithResponses) UpdatePlaybookWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookResponse, error) {
	rsp, err := c.UpdatePlaybookWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookResponse(rsp)
}

func (c *ClientWithResponses) UpdatePlaybookWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdatePlaybookApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlaybookResponse, error) {
	rsp, err := c.UpdatePlaybookWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookResponse(rsp)
}

// ListPlaybookTasksWithResponse request returning *ListPlaybookTasksResponse
func (c *ClientWithResponses) ListPlaybookTasksWithResponse(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*ListPlaybookTasksResponse, error) {
	rsp, err := c.ListPlaybookTasks(ctx, playbookId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlaybookTasksResponse(rsp)
}

// CreatePlaybookTaskWithBodyWithResponse request with arbitrary body returning *CreatePlaybookTaskResponse
func (c *ClientWithResponses) CreatePlaybookTaskWithBodyWithResponse(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookTaskResponse, error) {
	rsp, err := c.CreatePlaybookTaskWithBody(ctx, playbookId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookTaskResponse(rsp)
}

func (c *ClientWithResponses) CreatePlaybookTaskWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, playbookId string, body CreatePlaybookTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlaybookTaskResponse, error) {
	rsp, err := c.CreatePlaybookTaskWithApplicationVndAPIPlusJSONBody(ctx, playbookId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookTaskResponse(rsp)
}

// ListPostmortemTemplatesWithResponse request returning *ListPostmortemTemplatesResponse
func (c *ClientWithResponses) ListPostmortemTemplatesWithResponse(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*ListPostmortemTemplatesResponse, error) {
	rsp, err := c.ListPostmortemTemplates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPostmortemTemplatesResponse(rsp)
}

// CreatePostmortemTemplateWithBodyWithResponse request with arbitrary body returning *CreatePostmortemTemplateResponse
func (c *ClientWithResponses) CreatePostmortemTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostmortemTemplateResponse, error) {
	rsp, err := c.CreatePostmortemTemplateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePostmortemTemplateResponse(rsp)
}

func (c *ClientWithResponses) CreatePostmortemTemplateWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreatePostmortemTemplateApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePostmortemTemplateResponse, error) {
	rsp, err := c.CreatePostmortemTemplateWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePostmortemTemplateResponse(rsp)
}

// DeletePostmortemTemplateWithResponse request returning *DeletePostmortemTemplateResponse
func (c *ClientWithResponses) DeletePostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePostmortemTemplateResponse, error) {
	rsp, err := c.DeletePostmortemTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePostmortemTemplateResponse(rsp)
}

// GetPostmortemTemplateWithResponse request returning *GetPostmortemTemplateResponse
func (c *ClientWithResponses) GetPostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPostmortemTemplateResponse, error) {
	rsp, err := c.GetPostmortemTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostmortemTemplateResponse(rsp)
}

// UpdatePostmortemTemplateWithBodyWithResponse request with arbitrary body returning *UpdatePostmortemTemplateResponse
func (c *ClientWithResponses) UpdatePostmortemTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostmortemTemplateResponse, error) {
	rsp, err := c.UpdatePostmortemTemplateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePostmortemTemplateResponse(rsp)
}

func (c *ClientWithResponses) UpdatePostmortemTemplateWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdatePostmortemTemplateApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePostmortemTemplateResponse, error) {
	rsp, err := c.UpdatePostmortemTemplateWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePostmortemTemplateResponse(rsp)
}

// ListIncidentPostMortemsWithResponse request returning *ListIncidentPostMortemsResponse
func (c *ClientWithResponses) ListIncidentPostMortemsWithResponse(ctx context.Context, params *ListIncidentPostMortemsParams, reqEditors ...RequestEditorFn) (*ListIncidentPostMortemsResponse, error) {
	rsp, err := c.ListIncidentPostMortems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentPostMortemsResponse(rsp)
}

// ListIncidentPostmortemWithResponse request returning *ListIncidentPostmortemResponse
func (c *ClientWithResponses) ListIncidentPostmortemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ListIncidentPostmortemResponse, error) {
	rsp, err := c.ListIncidentPostmortem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentPostmortemResponse(rsp)
}

// UpdateIncidentPostmortemWithBodyWithResponse request with arbitrary body returning *UpdateIncidentPostmortemResponse
func (c *ClientWithResponses) UpdateIncidentPostmortemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPostmortemResponse, error) {
	rsp, err := c.UpdateIncidentPostmortemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentPostmortemResponse(rsp)
}

func (c *ClientWithResponses) UpdateIncidentPostmortemWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentPostmortemApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentPostmortemResponse, error) {
	rsp, err := c.UpdateIncidentPostmortemWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentPostmortemResponse(rsp)
}

// ListPulsesWithResponse request returning *ListPulsesResponse
func (c *ClientWithResponses) ListPulsesWithResponse(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*ListPulsesResponse, error) {
	rsp, err := c.ListPulses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPulsesResponse(rsp)
}

// CreatePulseWithBodyWithResponse request with arbitrary body returning *CreatePulseResponse
func (c *ClientWithResponses) CreatePulseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePulseResponse, error) {
	rsp, err := c.CreatePulseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePulseResponse(rsp)
}

func (c *ClientWithResponses) CreatePulseWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreatePulseApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePulseResponse, error) {
	rsp, err := c.CreatePulseWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePulseResponse(rsp)
}

// GetPulseWithResponse request returning *GetPulseResponse
func (c *ClientWithResponses) GetPulseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPulseResponse, error) {
	rsp, err := c.GetPulse(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPulseResponse(rsp)
}

// UpdatePulseWithBodyWithResponse request with arbitrary body returning *UpdatePulseResponse
func (c *ClientWithResponses) UpdatePulseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePulseResponse, error) {
	rsp, err := c.UpdatePulseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePulseResponse(rsp)
}

func (c *ClientWithResponses) UpdatePulseWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdatePulseApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePulseResponse, error) {
	rsp, err := c.UpdatePulseWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePulseResponse(rsp)
}

// ListRetrospectiveConfigurationsWithResponse request returning *ListRetrospectiveConfigurationsResponse
func (c *ClientWithResponses) ListRetrospectiveConfigurationsWithResponse(ctx context.Context, params *ListRetrospectiveConfigurationsParams, reqEditors ...RequestEditorFn) (*ListRetrospectiveConfigurationsResponse, error) {
	rsp, err := c.ListRetrospectiveConfigurations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRetrospectiveConfigurationsResponse(rsp)
}

// GetRetrospectiveConfigurationWithResponse request returning *GetRetrospectiveConfigurationResponse
func (c *ClientWithResponses) GetRetrospectiveConfigurationWithResponse(ctx context.Context, id string, params *GetRetrospectiveConfigurationParams, reqEditors ...RequestEditorFn) (*GetRetrospectiveConfigurationResponse, error) {
	rsp, err := c.GetRetrospectiveConfiguration(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRetrospectiveConfigurationResponse(rsp)
}

// UpdateRetrospectiveConfigurationWithBodyWithResponse request with arbitrary body returning *UpdateRetrospectiveConfigurationResponse
func (c *ClientWithResponses) UpdateRetrospectiveConfigurationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveConfigurationResponse, error) {
	rsp, err := c.UpdateRetrospectiveConfigurationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRetrospectiveConfigurationResponse(rsp)
}

func (c *ClientWithResponses) UpdateRetrospectiveConfigurationWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateRetrospectiveConfigurationApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveConfigurationResponse, error) {
	rsp, err := c.UpdateRetrospectiveConfigurationWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRetrospectiveConfigurationResponse(rsp)
}

// DeleteRetrospectiveProcessGroupStepWithResponse request returning *DeleteRetrospectiveProcessGroupStepResponse
func (c *ClientWithResponses) DeleteRetrospectiveProcessGroupStepWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteRetrospectiveProcessGroupStepResponse, error) {
	rsp, err := c.DeleteRetrospectiveProcessGroupStep(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRetrospectiveProcessGroupStepResponse(rsp)
}

// GetRetrospectiveProcessGroupStepWithResponse request returning *GetRetrospectiveProcessGroupStepResponse
func (c *ClientWithResponses) GetRetrospectiveProcessGroupStepWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetRetrospectiveProcessGroupStepResponse, error) {
	rsp, err := c.GetRetrospectiveProcessGroupStep(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRetrospectiveProcessGroupStepResponse(rsp)
}

// UpdateRetrospectiveProcessGroupStepWithBodyWithResponse request with arbitrary body returning *UpdateRetrospectiveProcessGroupStepResponse
func (c *ClientWithResponses) UpdateRetrospectiveProcessGroupStepWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveProcessGroupStepResponse, error) {
	rsp, err := c.UpdateRetrospectiveProcessGroupStepWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRetrospectiveProcessGroupStepResponse(rsp)
}

func (c *ClientWithResponses) UpdateRetrospectiveProcessGroupStepWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateRetrospectiveProcessGroupStepApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveProcessGroupStepResponse, error) {
	rsp, err := c.UpdateRetrospectiveProcessGroupStepWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRetrospectiveProcessGroupStepResponse(rsp)
}

// DeleteRetrospectiveProcessGroupWithResponse request returning *DeleteRetrospectiveProcessGroupResponse
func (c *ClientWithResponses) DeleteRetrospectiveProcessGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteRetrospectiveProcessGroupResponse, error) {
	rsp, err := c.DeleteRetrospectiveProcessGroup(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRetrospectiveProcessGroupResponse(rsp)
}

// GetRetrospectiveProcessGroupWithResponse request returning *GetRetrospectiveProcessGroupResponse
func (c *ClientWithResponses) GetRetrospectiveProcessGroupWithResponse(ctx context.Context, id string, params *GetRetrospectiveProcessGroupParams, reqEditors ...RequestEditorFn) (*GetRetrospectiveProcessGroupResponse, error) {
	rsp, err := c.GetRetrospectiveProcessGroup(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRetrospectiveProcessGroupResponse(rsp)
}

// UpdateRetrospectiveProcessGroupWithBodyWithResponse request with arbitrary body returning *UpdateRetrospectiveProcessGroupResponse
func (c *ClientWithResponses) UpdateRetrospectiveProcessGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveProcessGroupResponse, error) {
	rsp, err := c.UpdateRetrospectiveProcessGroupWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRetrospectiveProcessGroupResponse(rsp)
}

func (c *ClientWithResponses) UpdateRetrospectiveProcessGroupWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateRetrospectiveProcessGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveProcessGroupResponse, error) {
	rsp, err := c.UpdateRetrospectiveProcessGroupWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRetrospectiveProcessGroupResponse(rsp)
}

// ListRetrospectiveProcessGroupStepsWithResponse request returning *ListRetrospectiveProcessGroupStepsResponse
func (c *ClientWithResponses) ListRetrospectiveProcessGroupStepsWithResponse(ctx context.Context, retrospectiveProcessGroupId string, params *ListRetrospectiveProcessGroupStepsParams, reqEditors ...RequestEditorFn) (*ListRetrospectiveProcessGroupStepsResponse, error) {
	rsp, err := c.ListRetrospectiveProcessGroupSteps(ctx, retrospectiveProcessGroupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRetrospectiveProcessGroupStepsResponse(rsp)
}

// CreateRetrospectiveProcessGroupStepWithBodyWithResponse request with arbitrary body returning *CreateRetrospectiveProcessGroupStepResponse
func (c *ClientWithResponses) CreateRetrospectiveProcessGroupStepWithBodyWithResponse(ctx context.Context, retrospectiveProcessGroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRetrospectiveProcessGroupStepResponse, error) {
	rsp, err := c.CreateRetrospectiveProcessGroupStepWithBody(ctx, retrospectiveProcessGroupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRetrospectiveProcessGroupStepResponse(rsp)
}

func (c *ClientWithResponses) CreateRetrospectiveProcessGroupStepWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, retrospectiveProcessGroupId string, body CreateRetrospectiveProcessGroupStepApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRetrospectiveProcessGroupStepResponse, error) {
	rsp, err := c.CreateRetrospectiveProcessGroupStepWithApplicationVndAPIPlusJSONBody(ctx, retrospectiveProcessGroupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRetrospectiveProcessGroupStepResponse(rsp)
}

// ListRetrospectiveProcessesWithResponse request returning *ListRetrospectiveProcessesResponse
func (c *ClientWithResponses) ListRetrospectiveProcessesWithResponse(ctx context.Context, params *ListRetrospectiveProcessesParams, reqEditors ...RequestEditorFn) (*ListRetrospectiveProcessesResponse, error) {
	rsp, err := c.ListRetrospectiveProcesses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRetrospectiveProcessesResponse(rsp)
}

// CreateRetrospectiveProcessWithBodyWithResponse request with arbitrary body returning *CreateRetrospectiveProcessResponse
func (c *ClientWithResponses) CreateRetrospectiveProcessWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRetrospectiveProcessResponse, error) {
	rsp, err := c.CreateRetrospectiveProcessWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRetrospectiveProcessResponse(rsp)
}

func (c *ClientWithResponses) CreateRetrospectiveProcessWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateRetrospectiveProcessApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRetrospectiveProcessResponse, error) {
	rsp, err := c.CreateRetrospectiveProcessWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRetrospectiveProcessResponse(rsp)
}

// DeleteRetrospectiveProcessWithResponse request returning *DeleteRetrospectiveProcessResponse
func (c *ClientWithResponses) DeleteRetrospectiveProcessWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteRetrospectiveProcessResponse, error) {
	rsp, err := c.DeleteRetrospectiveProcess(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRetrospectiveProcessResponse(rsp)
}

// GetRetrospectiveProcessWithResponse request returning *GetRetrospectiveProcessResponse
func (c *ClientWithResponses) GetRetrospectiveProcessWithResponse(ctx context.Context, id string, params *GetRetrospectiveProcessParams, reqEditors ...RequestEditorFn) (*GetRetrospectiveProcessResponse, error) {
	rsp, err := c.GetRetrospectiveProcess(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRetrospectiveProcessResponse(rsp)
}

// UpdateRetrospectiveProcessWithBodyWithResponse request with arbitrary body returning *UpdateRetrospectiveProcessResponse
func (c *ClientWithResponses) UpdateRetrospectiveProcessWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveProcessResponse, error) {
	rsp, err := c.UpdateRetrospectiveProcessWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRetrospectiveProcessResponse(rsp)
}

func (c *ClientWithResponses) UpdateRetrospectiveProcessWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateRetrospectiveProcessApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveProcessResponse, error) {
	rsp, err := c.UpdateRetrospectiveProcessWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRetrospectiveProcessResponse(rsp)
}

// ListRetrospectiveProcessGroupsWithResponse request returning *ListRetrospectiveProcessGroupsResponse
func (c *ClientWithResponses) ListRetrospectiveProcessGroupsWithResponse(ctx context.Context, retrospectiveProcessId string, params *ListRetrospectiveProcessGroupsParams, reqEditors ...RequestEditorFn) (*ListRetrospectiveProcessGroupsResponse, error) {
	rsp, err := c.ListRetrospectiveProcessGroups(ctx, retrospectiveProcessId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRetrospectiveProcessGroupsResponse(rsp)
}

// CreateRetrospectiveProcessGroupWithBodyWithResponse request with arbitrary body returning *CreateRetrospectiveProcessGroupResponse
func (c *ClientWithResponses) CreateRetrospectiveProcessGroupWithBodyWithResponse(ctx context.Context, retrospectiveProcessId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRetrospectiveProcessGroupResponse, error) {
	rsp, err := c.CreateRetrospectiveProcessGroupWithBody(ctx, retrospectiveProcessId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRetrospectiveProcessGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateRetrospectiveProcessGroupWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, retrospectiveProcessId string, body CreateRetrospectiveProcessGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRetrospectiveProcessGroupResponse, error) {
	rsp, err := c.CreateRetrospectiveProcessGroupWithApplicationVndAPIPlusJSONBody(ctx, retrospectiveProcessId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRetrospectiveProcessGroupResponse(rsp)
}

// ListRetrospectiveStepsWithResponse request returning *ListRetrospectiveStepsResponse
func (c *ClientWithResponses) ListRetrospectiveStepsWithResponse(ctx context.Context, retrospectiveProcessId string, params *ListRetrospectiveStepsParams, reqEditors ...RequestEditorFn) (*ListRetrospectiveStepsResponse, error) {
	rsp, err := c.ListRetrospectiveSteps(ctx, retrospectiveProcessId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRetrospectiveStepsResponse(rsp)
}

// CreateRetrospectiveStepWithBodyWithResponse request with arbitrary body returning *CreateRetrospectiveStepResponse
func (c *ClientWithResponses) CreateRetrospectiveStepWithBodyWithResponse(ctx context.Context, retrospectiveProcessId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRetrospectiveStepResponse, error) {
	rsp, err := c.CreateRetrospectiveStepWithBody(ctx, retrospectiveProcessId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRetrospectiveStepResponse(rsp)
}

func (c *ClientWithResponses) CreateRetrospectiveStepWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, retrospectiveProcessId string, body CreateRetrospectiveStepApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRetrospectiveStepResponse, error) {
	rsp, err := c.CreateRetrospectiveStepWithApplicationVndAPIPlusJSONBody(ctx, retrospectiveProcessId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRetrospectiveStepResponse(rsp)
}

// DeleteRetrospectiveStepWithResponse request returning *DeleteRetrospectiveStepResponse
func (c *ClientWithResponses) DeleteRetrospectiveStepWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteRetrospectiveStepResponse, error) {
	rsp, err := c.DeleteRetrospectiveStep(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRetrospectiveStepResponse(rsp)
}

// GetRetrospectiveStepWithResponse request returning *GetRetrospectiveStepResponse
func (c *ClientWithResponses) GetRetrospectiveStepWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetRetrospectiveStepResponse, error) {
	rsp, err := c.GetRetrospectiveStep(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRetrospectiveStepResponse(rsp)
}

// UpdateRetrospectiveStepWithBodyWithResponse request with arbitrary body returning *UpdateRetrospectiveStepResponse
func (c *ClientWithResponses) UpdateRetrospectiveStepWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveStepResponse, error) {
	rsp, err := c.UpdateRetrospectiveStepWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRetrospectiveStepResponse(rsp)
}

func (c *ClientWithResponses) UpdateRetrospectiveStepWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateRetrospectiveStepApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveStepResponse, error) {
	rsp, err := c.UpdateRetrospectiveStepWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRetrospectiveStepResponse(rsp)
}

// ListRolesWithResponse request returning *ListRolesResponse
func (c *ClientWithResponses) ListRolesWithResponse(ctx context.Context, params *ListRolesParams, reqEditors ...RequestEditorFn) (*ListRolesResponse, error) {
	rsp, err := c.ListRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRolesResponse(rsp)
}

// CreateRoleWithBodyWithResponse request with arbitrary body returning *CreateRoleResponse
func (c *ClientWithResponses) CreateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error) {
	rsp, err := c.CreateRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResponse(rsp)
}

func (c *ClientWithResponses) CreateRoleWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error) {
	rsp, err := c.CreateRoleWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResponse(rsp)
}

// DeleteRoleWithResponse request returning *DeleteRoleResponse
func (c *ClientWithResponses) DeleteRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteRoleResponse, error) {
	rsp, err := c.DeleteRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoleResponse(rsp)
}

// GetRoleWithResponse request returning *GetRoleResponse
func (c *ClientWithResponses) GetRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetRoleResponse, error) {
	rsp, err := c.GetRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoleResponse(rsp)
}

// UpdateRoleWithBodyWithResponse request with arbitrary body returning *UpdateRoleResponse
func (c *ClientWithResponses) UpdateRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error) {
	rsp, err := c.UpdateRoleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleResponse(rsp)
}

func (c *ClientWithResponses) UpdateRoleWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateRoleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error) {
	rsp, err := c.UpdateRoleWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleResponse(rsp)
}

// DeleteScheduleRotationActiveDayWithResponse request returning *DeleteScheduleRotationActiveDayResponse
func (c *ClientWithResponses) DeleteScheduleRotationActiveDayWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteScheduleRotationActiveDayResponse, error) {
	rsp, err := c.DeleteScheduleRotationActiveDay(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteScheduleRotationActiveDayResponse(rsp)
}

// GetScheduleRotationActiveDayWithResponse request returning *GetScheduleRotationActiveDayResponse
func (c *ClientWithResponses) GetScheduleRotationActiveDayWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetScheduleRotationActiveDayResponse, error) {
	rsp, err := c.GetScheduleRotationActiveDay(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScheduleRotationActiveDayResponse(rsp)
}

// UpdateScheduleRotationActiveDayWithBodyWithResponse request with arbitrary body returning *UpdateScheduleRotationActiveDayResponse
func (c *ClientWithResponses) UpdateScheduleRotationActiveDayWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateScheduleRotationActiveDayResponse, error) {
	rsp, err := c.UpdateScheduleRotationActiveDayWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateScheduleRotationActiveDayResponse(rsp)
}

func (c *ClientWithResponses) UpdateScheduleRotationActiveDayWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateScheduleRotationActiveDayApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateScheduleRotationActiveDayResponse, error) {
	rsp, err := c.UpdateScheduleRotationActiveDayWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateScheduleRotationActiveDayResponse(rsp)
}

// DeleteScheduleRotationUserWithResponse request returning *DeleteScheduleRotationUserResponse
func (c *ClientWithResponses) DeleteScheduleRotationUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteScheduleRotationUserResponse, error) {
	rsp, err := c.DeleteScheduleRotationUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteScheduleRotationUserResponse(rsp)
}

// GetScheduleRotationUserWithResponse request returning *GetScheduleRotationUserResponse
func (c *ClientWithResponses) GetScheduleRotationUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetScheduleRotationUserResponse, error) {
	rsp, err := c.GetScheduleRotationUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScheduleRotationUserResponse(rsp)
}

// UpdateScheduleRotationUserWithBodyWithResponse request with arbitrary body returning *UpdateScheduleRotationUserResponse
func (c *ClientWithResponses) UpdateScheduleRotationUserWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateScheduleRotationUserResponse, error) {
	rsp, err := c.UpdateScheduleRotationUserWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateScheduleRotationUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateScheduleRotationUserWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateScheduleRotationUserApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateScheduleRotationUserResponse, error) {
	rsp, err := c.UpdateScheduleRotationUserWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateScheduleRotationUserResponse(rsp)
}

// DeleteScheduleRotationWithResponse request returning *DeleteScheduleRotationResponse
func (c *ClientWithResponses) DeleteScheduleRotationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteScheduleRotationResponse, error) {
	rsp, err := c.DeleteScheduleRotation(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteScheduleRotationResponse(rsp)
}

// GetScheduleRotationWithResponse request returning *GetScheduleRotationResponse
func (c *ClientWithResponses) GetScheduleRotationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetScheduleRotationResponse, error) {
	rsp, err := c.GetScheduleRotation(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScheduleRotationResponse(rsp)
}

// UpdateScheduleRotationWithBodyWithResponse request with arbitrary body returning *UpdateScheduleRotationResponse
func (c *ClientWithResponses) UpdateScheduleRotationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateScheduleRotationResponse, error) {
	rsp, err := c.UpdateScheduleRotationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateScheduleRotationResponse(rsp)
}

func (c *ClientWithResponses) UpdateScheduleRotationWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateScheduleRotationApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateScheduleRotationResponse, error) {
	rsp, err := c.UpdateScheduleRotationWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateScheduleRotationResponse(rsp)
}

// ListScheduleRotationActiveDaysWithResponse request returning *ListScheduleRotationActiveDaysResponse
func (c *ClientWithResponses) ListScheduleRotationActiveDaysWithResponse(ctx context.Context, scheduleRotationId string, params *ListScheduleRotationActiveDaysParams, reqEditors ...RequestEditorFn) (*ListScheduleRotationActiveDaysResponse, error) {
	rsp, err := c.ListScheduleRotationActiveDays(ctx, scheduleRotationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListScheduleRotationActiveDaysResponse(rsp)
}

// CreateScheduleRotationActiveDayWithBodyWithResponse request with arbitrary body returning *CreateScheduleRotationActiveDayResponse
func (c *ClientWithResponses) CreateScheduleRotationActiveDayWithBodyWithResponse(ctx context.Context, scheduleRotationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateScheduleRotationActiveDayResponse, error) {
	rsp, err := c.CreateScheduleRotationActiveDayWithBody(ctx, scheduleRotationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateScheduleRotationActiveDayResponse(rsp)
}

func (c *ClientWithResponses) CreateScheduleRotationActiveDayWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, scheduleRotationId string, body CreateScheduleRotationActiveDayApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateScheduleRotationActiveDayResponse, error) {
	rsp, err := c.CreateScheduleRotationActiveDayWithApplicationVndAPIPlusJSONBody(ctx, scheduleRotationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateScheduleRotationActiveDayResponse(rsp)
}

// ListScheduleRotationUsersWithResponse request returning *ListScheduleRotationUsersResponse
func (c *ClientWithResponses) ListScheduleRotationUsersWithResponse(ctx context.Context, scheduleRotationId string, params *ListScheduleRotationUsersParams, reqEditors ...RequestEditorFn) (*ListScheduleRotationUsersResponse, error) {
	rsp, err := c.ListScheduleRotationUsers(ctx, scheduleRotationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListScheduleRotationUsersResponse(rsp)
}

// CreateScheduleRotationUserWithBodyWithResponse request with arbitrary body returning *CreateScheduleRotationUserResponse
func (c *ClientWithResponses) CreateScheduleRotationUserWithBodyWithResponse(ctx context.Context, scheduleRotationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateScheduleRotationUserResponse, error) {
	rsp, err := c.CreateScheduleRotationUserWithBody(ctx, scheduleRotationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateScheduleRotationUserResponse(rsp)
}

func (c *ClientWithResponses) CreateScheduleRotationUserWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, scheduleRotationId string, body CreateScheduleRotationUserApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateScheduleRotationUserResponse, error) {
	rsp, err := c.CreateScheduleRotationUserWithApplicationVndAPIPlusJSONBody(ctx, scheduleRotationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateScheduleRotationUserResponse(rsp)
}

// ListSchedulesWithResponse request returning *ListSchedulesResponse
func (c *ClientWithResponses) ListSchedulesWithResponse(ctx context.Context, params *ListSchedulesParams, reqEditors ...RequestEditorFn) (*ListSchedulesResponse, error) {
	rsp, err := c.ListSchedules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSchedulesResponse(rsp)
}

// CreateScheduleWithBodyWithResponse request with arbitrary body returning *CreateScheduleResponse
func (c *ClientWithResponses) CreateScheduleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateScheduleResponse, error) {
	rsp, err := c.CreateScheduleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateScheduleResponse(rsp)
}

func (c *ClientWithResponses) CreateScheduleWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateScheduleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateScheduleResponse, error) {
	rsp, err := c.CreateScheduleWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateScheduleResponse(rsp)
}

// DeleteScheduleWithResponse request returning *DeleteScheduleResponse
func (c *ClientWithResponses) DeleteScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteScheduleResponse, error) {
	rsp, err := c.DeleteSchedule(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteScheduleResponse(rsp)
}

// GetScheduleWithResponse request returning *GetScheduleResponse
func (c *ClientWithResponses) GetScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetScheduleResponse, error) {
	rsp, err := c.GetSchedule(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScheduleResponse(rsp)
}

// UpdateScheduleWithBodyWithResponse request with arbitrary body returning *UpdateScheduleResponse
func (c *ClientWithResponses) UpdateScheduleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateScheduleResponse, error) {
	rsp, err := c.UpdateScheduleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateScheduleResponse(rsp)
}

func (c *ClientWithResponses) UpdateScheduleWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateScheduleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateScheduleResponse, error) {
	rsp, err := c.UpdateScheduleWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateScheduleResponse(rsp)
}

// GetScheduleShiftsWithResponse request returning *GetScheduleShiftsResponse
func (c *ClientWithResponses) GetScheduleShiftsWithResponse(ctx context.Context, id string, params *GetScheduleShiftsParams, reqEditors ...RequestEditorFn) (*GetScheduleShiftsResponse, error) {
	rsp, err := c.GetScheduleShifts(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScheduleShiftsResponse(rsp)
}

// ListOnCallShadowsWithResponse request returning *ListOnCallShadowsResponse
func (c *ClientWithResponses) ListOnCallShadowsWithResponse(ctx context.Context, scheduleId string, params *ListOnCallShadowsParams, reqEditors ...RequestEditorFn) (*ListOnCallShadowsResponse, error) {
	rsp, err := c.ListOnCallShadows(ctx, scheduleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOnCallShadowsResponse(rsp)
}

// CreateOnCallShadowWithBodyWithResponse request with arbitrary body returning *CreateOnCallShadowResponse
func (c *ClientWithResponses) CreateOnCallShadowWithBodyWithResponse(ctx context.Context, scheduleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOnCallShadowResponse, error) {
	rsp, err := c.CreateOnCallShadowWithBody(ctx, scheduleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOnCallShadowResponse(rsp)
}

func (c *ClientWithResponses) CreateOnCallShadowWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, scheduleId string, body CreateOnCallShadowApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOnCallShadowResponse, error) {
	rsp, err := c.CreateOnCallShadowWithApplicationVndAPIPlusJSONBody(ctx, scheduleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOnCallShadowResponse(rsp)
}

// ListOverrideShiftsWithResponse request returning *ListOverrideShiftsResponse
func (c *ClientWithResponses) ListOverrideShiftsWithResponse(ctx context.Context, scheduleId string, params *ListOverrideShiftsParams, reqEditors ...RequestEditorFn) (*ListOverrideShiftsResponse, error) {
	rsp, err := c.ListOverrideShifts(ctx, scheduleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOverrideShiftsResponse(rsp)
}

// CreateOverrideShiftWithBodyWithResponse request with arbitrary body returning *CreateOverrideShiftResponse
func (c *ClientWithResponses) CreateOverrideShiftWithBodyWithResponse(ctx context.Context, scheduleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOverrideShiftResponse, error) {
	rsp, err := c.CreateOverrideShiftWithBody(ctx, scheduleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOverrideShiftResponse(rsp)
}

func (c *ClientWithResponses) CreateOverrideShiftWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, scheduleId string, body CreateOverrideShiftApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOverrideShiftResponse, error) {
	rsp, err := c.CreateOverrideShiftWithApplicationVndAPIPlusJSONBody(ctx, scheduleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOverrideShiftResponse(rsp)
}

// ListScheduleRotationsWithResponse request returning *ListScheduleRotationsResponse
func (c *ClientWithResponses) ListScheduleRotationsWithResponse(ctx context.Context, scheduleId string, params *ListScheduleRotationsParams, reqEditors ...RequestEditorFn) (*ListScheduleRotationsResponse, error) {
	rsp, err := c.ListScheduleRotations(ctx, scheduleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListScheduleRotationsResponse(rsp)
}

// CreateScheduleRotationWithBodyWithResponse request with arbitrary body returning *CreateScheduleRotationResponse
func (c *ClientWithResponses) CreateScheduleRotationWithBodyWithResponse(ctx context.Context, scheduleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateScheduleRotationResponse, error) {
	rsp, err := c.CreateScheduleRotationWithBody(ctx, scheduleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateScheduleRotationResponse(rsp)
}

func (c *ClientWithResponses) CreateScheduleRotationWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, scheduleId string, body CreateScheduleRotationApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateScheduleRotationResponse, error) {
	rsp, err := c.CreateScheduleRotationWithApplicationVndAPIPlusJSONBody(ctx, scheduleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateScheduleRotationResponse(rsp)
}

// ListSecretsWithResponse request returning *ListSecretsResponse
func (c *ClientWithResponses) ListSecretsWithResponse(ctx context.Context, params *ListSecretsParams, reqEditors ...RequestEditorFn) (*ListSecretsResponse, error) {
	rsp, err := c.ListSecrets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSecretsResponse(rsp)
}

// CreateSecretWithBodyWithResponse request with arbitrary body returning *CreateSecretResponse
func (c *ClientWithResponses) CreateSecretWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSecretResponse, error) {
	rsp, err := c.CreateSecretWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSecretResponse(rsp)
}

func (c *ClientWithResponses) CreateSecretWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateSecretApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSecretResponse, error) {
	rsp, err := c.CreateSecretWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSecretResponse(rsp)
}

// DeleteSecretWithResponse request returning *DeleteSecretResponse
func (c *ClientWithResponses) DeleteSecretWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSecretResponse, error) {
	rsp, err := c.DeleteSecret(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSecretResponse(rsp)
}

// GetSecretWithResponse request returning *GetSecretResponse
func (c *ClientWithResponses) GetSecretWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSecretResponse, error) {
	rsp, err := c.GetSecret(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecretResponse(rsp)
}

// UpdateSecretWithBodyWithResponse request with arbitrary body returning *UpdateSecretResponse
func (c *ClientWithResponses) UpdateSecretWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSecretResponse, error) {
	rsp, err := c.UpdateSecretWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSecretResponse(rsp)
}

func (c *ClientWithResponses) UpdateSecretWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateSecretApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSecretResponse, error) {
	rsp, err := c.UpdateSecretWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSecretResponse(rsp)
}

// ListServicesWithResponse request returning *ListServicesResponse
func (c *ClientWithResponses) ListServicesWithResponse(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error) {
	rsp, err := c.ListServices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServicesResponse(rsp)
}

// CreateServiceWithBodyWithResponse request with arbitrary body returning *CreateServiceResponse
func (c *ClientWithResponses) CreateServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error) {
	rsp, err := c.CreateServiceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceResponse(rsp)
}

func (c *ClientWithResponses) CreateServiceWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateServiceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error) {
	rsp, err := c.CreateServiceWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceResponse(rsp)
}

// DeleteServiceWithResponse request returning *DeleteServiceResponse
func (c *ClientWithResponses) DeleteServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceResponse, error) {
	rsp, err := c.DeleteService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceResponse(rsp)
}

// GetServiceWithResponse request returning *GetServiceResponse
func (c *ClientWithResponses) GetServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceResponse, error) {
	rsp, err := c.GetService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceResponse(rsp)
}

// UpdateServiceWithBodyWithResponse request with arbitrary body returning *UpdateServiceResponse
func (c *ClientWithResponses) UpdateServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error) {
	rsp, err := c.UpdateServiceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceResponse(rsp)
}

func (c *ClientWithResponses) UpdateServiceWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateServiceApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error) {
	rsp, err := c.UpdateServiceWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceResponse(rsp)
}

// GetServiceIncidentsChartWithResponse request returning *GetServiceIncidentsChartResponse
func (c *ClientWithResponses) GetServiceIncidentsChartWithResponse(ctx context.Context, id string, params *GetServiceIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetServiceIncidentsChartResponse, error) {
	rsp, err := c.GetServiceIncidentsChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceIncidentsChartResponse(rsp)
}

// GetServiceUptimeChartWithResponse request returning *GetServiceUptimeChartResponse
func (c *ClientWithResponses) GetServiceUptimeChartWithResponse(ctx context.Context, id string, params *GetServiceUptimeChartParams, reqEditors ...RequestEditorFn) (*GetServiceUptimeChartResponse, error) {
	rsp, err := c.GetServiceUptimeChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceUptimeChartResponse(rsp)
}

// ListSeveritiesWithResponse request returning *ListSeveritiesResponse
func (c *ClientWithResponses) ListSeveritiesWithResponse(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*ListSeveritiesResponse, error) {
	rsp, err := c.ListSeverities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSeveritiesResponse(rsp)
}

// CreateSeverityWithBodyWithResponse request with arbitrary body returning *CreateSeverityResponse
func (c *ClientWithResponses) CreateSeverityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSeverityResponse, error) {
	rsp, err := c.CreateSeverityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSeverityResponse(rsp)
}

func (c *ClientWithResponses) CreateSeverityWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateSeverityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSeverityResponse, error) {
	rsp, err := c.CreateSeverityWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSeverityResponse(rsp)
}

// DeleteSeverityWithResponse request returning *DeleteSeverityResponse
func (c *ClientWithResponses) DeleteSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSeverityResponse, error) {
	rsp, err := c.DeleteSeverity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSeverityResponse(rsp)
}

// GetSeverityWithResponse request returning *GetSeverityResponse
func (c *ClientWithResponses) GetSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSeverityResponse, error) {
	rsp, err := c.GetSeverity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeverityResponse(rsp)
}

// UpdateSeverityWithBodyWithResponse request with arbitrary body returning *UpdateSeverityResponse
func (c *ClientWithResponses) UpdateSeverityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSeverityResponse, error) {
	rsp, err := c.UpdateSeverityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSeverityResponse(rsp)
}

func (c *ClientWithResponses) UpdateSeverityWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateSeverityApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSeverityResponse, error) {
	rsp, err := c.UpdateSeverityWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSeverityResponse(rsp)
}

// ListShiftsWithResponse request returning *ListShiftsResponse
func (c *ClientWithResponses) ListShiftsWithResponse(ctx context.Context, params *ListShiftsParams, reqEditors ...RequestEditorFn) (*ListShiftsResponse, error) {
	rsp, err := c.ListShifts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListShiftsResponse(rsp)
}

// DeleteIncidentStatusPageWithResponse request returning *DeleteIncidentStatusPageResponse
func (c *ClientWithResponses) DeleteIncidentStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentStatusPageResponse, error) {
	rsp, err := c.DeleteIncidentStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentStatusPageResponse(rsp)
}

// GetIncidentStatusPagesWithResponse request returning *GetIncidentStatusPagesResponse
func (c *ClientWithResponses) GetIncidentStatusPagesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentStatusPagesResponse, error) {
	rsp, err := c.GetIncidentStatusPages(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentStatusPagesResponse(rsp)
}

// UpdateIncidentStatusPageWithBodyWithResponse request with arbitrary body returning *UpdateIncidentStatusPageResponse
func (c *ClientWithResponses) UpdateIncidentStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentStatusPageResponse, error) {
	rsp, err := c.UpdateIncidentStatusPageWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentStatusPageResponse(rsp)
}

func (c *ClientWithResponses) UpdateIncidentStatusPageWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateIncidentStatusPageApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentStatusPageResponse, error) {
	rsp, err := c.UpdateIncidentStatusPageWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentStatusPageResponse(rsp)
}

// ListStatusPagesWithResponse request returning *ListStatusPagesResponse
func (c *ClientWithResponses) ListStatusPagesWithResponse(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*ListStatusPagesResponse, error) {
	rsp, err := c.ListStatusPages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListStatusPagesResponse(rsp)
}

// CreateStatusPageWithBodyWithResponse request with arbitrary body returning *CreateStatusPageResponse
func (c *ClientWithResponses) CreateStatusPageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStatusPageResponse, error) {
	rsp, err := c.CreateStatusPageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStatusPageResponse(rsp)
}

func (c *ClientWithResponses) CreateStatusPageWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateStatusPageApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStatusPageResponse, error) {
	rsp, err := c.CreateStatusPageWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStatusPageResponse(rsp)
}

// DeleteStatusPageWithResponse request returning *DeleteStatusPageResponse
func (c *ClientWithResponses) DeleteStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStatusPageResponse, error) {
	rsp, err := c.DeleteStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStatusPageResponse(rsp)
}

// GetStatusPageWithResponse request returning *GetStatusPageResponse
func (c *ClientWithResponses) GetStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStatusPageResponse, error) {
	rsp, err := c.GetStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusPageResponse(rsp)
}

// UpdateStatusPageWithBodyWithResponse request with arbitrary body returning *UpdateStatusPageResponse
func (c *ClientWithResponses) UpdateStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStatusPageResponse, error) {
	rsp, err := c.UpdateStatusPageWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStatusPageResponse(rsp)
}

func (c *ClientWithResponses) UpdateStatusPageWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateStatusPageApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStatusPageResponse, error) {
	rsp, err := c.UpdateStatusPageWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStatusPageResponse(rsp)
}

// ListStatusPageTemplatesWithResponse request returning *ListStatusPageTemplatesResponse
func (c *ClientWithResponses) ListStatusPageTemplatesWithResponse(ctx context.Context, statusPageId string, params *ListStatusPageTemplatesParams, reqEditors ...RequestEditorFn) (*ListStatusPageTemplatesResponse, error) {
	rsp, err := c.ListStatusPageTemplates(ctx, statusPageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListStatusPageTemplatesResponse(rsp)
}

// CreateStatusPageTemplateWithBodyWithResponse request with arbitrary body returning *CreateStatusPageTemplateResponse
func (c *ClientWithResponses) CreateStatusPageTemplateWithBodyWithResponse(ctx context.Context, statusPageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStatusPageTemplateResponse, error) {
	rsp, err := c.CreateStatusPageTemplateWithBody(ctx, statusPageId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStatusPageTemplateResponse(rsp)
}

func (c *ClientWithResponses) CreateStatusPageTemplateWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, statusPageId string, body CreateStatusPageTemplateApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStatusPageTemplateResponse, error) {
	rsp, err := c.CreateStatusPageTemplateWithApplicationVndAPIPlusJSONBody(ctx, statusPageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStatusPageTemplateResponse(rsp)
}

// ListSubStatusesWithResponse request returning *ListSubStatusesResponse
func (c *ClientWithResponses) ListSubStatusesWithResponse(ctx context.Context, params *ListSubStatusesParams, reqEditors ...RequestEditorFn) (*ListSubStatusesResponse, error) {
	rsp, err := c.ListSubStatuses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSubStatusesResponse(rsp)
}

// CreateSubStatusWithBodyWithResponse request with arbitrary body returning *CreateSubStatusResponse
func (c *ClientWithResponses) CreateSubStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSubStatusResponse, error) {
	rsp, err := c.CreateSubStatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSubStatusResponse(rsp)
}

func (c *ClientWithResponses) CreateSubStatusWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateSubStatusApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSubStatusResponse, error) {
	rsp, err := c.CreateSubStatusWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSubStatusResponse(rsp)
}

// DeleteSubStatusWithResponse request returning *DeleteSubStatusResponse
func (c *ClientWithResponses) DeleteSubStatusWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSubStatusResponse, error) {
	rsp, err := c.DeleteSubStatus(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSubStatusResponse(rsp)
}

// GetSubStatusWithResponse request returning *GetSubStatusResponse
func (c *ClientWithResponses) GetSubStatusWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSubStatusResponse, error) {
	rsp, err := c.GetSubStatus(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubStatusResponse(rsp)
}

// UpdateSubStatusWithBodyWithResponse request with arbitrary body returning *UpdateSubStatusResponse
func (c *ClientWithResponses) UpdateSubStatusWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSubStatusResponse, error) {
	rsp, err := c.UpdateSubStatusWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSubStatusResponse(rsp)
}

func (c *ClientWithResponses) UpdateSubStatusWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateSubStatusApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSubStatusResponse, error) {
	rsp, err := c.UpdateSubStatusWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSubStatusResponse(rsp)
}

// ListTeamsWithResponse request returning *ListTeamsResponse
func (c *ClientWithResponses) ListTeamsWithResponse(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*ListTeamsResponse, error) {
	rsp, err := c.ListTeams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTeamsResponse(rsp)
}

// CreateTeamWithBodyWithResponse request with arbitrary body returning *CreateTeamResponse
func (c *ClientWithResponses) CreateTeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeamWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

func (c *ClientWithResponses) CreateTeamWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateTeamApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeamWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

// DeleteTeamWithResponse request returning *DeleteTeamResponse
func (c *ClientWithResponses) DeleteTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error) {
	rsp, err := c.DeleteTeam(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamResponse(rsp)
}

// GetTeamWithResponse request returning *GetTeamResponse
func (c *ClientWithResponses) GetTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error) {
	rsp, err := c.GetTeam(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamResponse(rsp)
}

// UpdateTeamWithBodyWithResponse request with arbitrary body returning *UpdateTeamResponse
func (c *ClientWithResponses) UpdateTeamWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeamWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

func (c *ClientWithResponses) UpdateTeamWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateTeamApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeamWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

// GetTeamIncidentsChartWithResponse request returning *GetTeamIncidentsChartResponse
func (c *ClientWithResponses) GetTeamIncidentsChartWithResponse(ctx context.Context, id string, params *GetTeamIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetTeamIncidentsChartResponse, error) {
	rsp, err := c.GetTeamIncidentsChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamIncidentsChartResponse(rsp)
}

// DeleteStatusPageTemplateWithResponse request returning *DeleteStatusPageTemplateResponse
func (c *ClientWithResponses) DeleteStatusPageTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStatusPageTemplateResponse, error) {
	rsp, err := c.DeleteStatusPageTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStatusPageTemplateResponse(rsp)
}

// GetStatusPageTemplateWithResponse request returning *GetStatusPageTemplateResponse
func (c *ClientWithResponses) GetStatusPageTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStatusPageTemplateResponse, error) {
	rsp, err := c.GetStatusPageTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusPageTemplateResponse(rsp)
}

// UpdateStatusPageTemplateWithBodyWithResponse request with arbitrary body returning *UpdateStatusPageTemplateResponse
func (c *ClientWithResponses) UpdateStatusPageTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStatusPageTemplateResponse, error) {
	rsp, err := c.UpdateStatusPageTemplateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStatusPageTemplateResponse(rsp)
}

func (c *ClientWithResponses) UpdateStatusPageTemplateWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateStatusPageTemplateApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStatusPageTemplateResponse, error) {
	rsp, err := c.UpdateStatusPageTemplateWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStatusPageTemplateResponse(rsp)
}

// ListUsersWithResponse request returning *ListUsersResponse
func (c *ClientWithResponses) ListUsersWithResponse(ctx context.Context, params *ListUsersParams, reqEditors ...RequestEditorFn) (*ListUsersResponse, error) {
	rsp, err := c.ListUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsersResponse(rsp)
}

// GetCurrentUserWithResponse request returning *GetCurrentUserResponse
func (c *ClientWithResponses) GetCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrentUserResponse, error) {
	rsp, err := c.GetCurrentUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCurrentUserResponse(rsp)
}

// DeleteUserWithResponse request returning *DeleteUserResponse
func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, id string, params *GetUserParams, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// ListUserNotificationRulesWithResponse request returning *ListUserNotificationRulesResponse
func (c *ClientWithResponses) ListUserNotificationRulesWithResponse(ctx context.Context, userId string, params *ListUserNotificationRulesParams, reqEditors ...RequestEditorFn) (*ListUserNotificationRulesResponse, error) {
	rsp, err := c.ListUserNotificationRules(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserNotificationRulesResponse(rsp)
}

// CreateUserNotificationRuleWithBodyWithResponse request with arbitrary body returning *CreateUserNotificationRuleResponse
func (c *ClientWithResponses) CreateUserNotificationRuleWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserNotificationRuleResponse, error) {
	rsp, err := c.CreateUserNotificationRuleWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserNotificationRuleResponse(rsp)
}

func (c *ClientWithResponses) CreateUserNotificationRuleWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, userId string, body CreateUserNotificationRuleApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserNotificationRuleResponse, error) {
	rsp, err := c.CreateUserNotificationRuleWithApplicationVndAPIPlusJSONBody(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserNotificationRuleResponse(rsp)
}

// GetWebhooksDeliveryWithResponse request returning *GetWebhooksDeliveryResponse
func (c *ClientWithResponses) GetWebhooksDeliveryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWebhooksDeliveryResponse, error) {
	rsp, err := c.GetWebhooksDelivery(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhooksDeliveryResponse(rsp)
}

// DeliverWebhooksDeliveryWithResponse request returning *DeliverWebhooksDeliveryResponse
func (c *ClientWithResponses) DeliverWebhooksDeliveryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeliverWebhooksDeliveryResponse, error) {
	rsp, err := c.DeliverWebhooksDelivery(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeliverWebhooksDeliveryResponse(rsp)
}

// ListWebhooksEndpointsWithResponse request returning *ListWebhooksEndpointsResponse
func (c *ClientWithResponses) ListWebhooksEndpointsWithResponse(ctx context.Context, params *ListWebhooksEndpointsParams, reqEditors ...RequestEditorFn) (*ListWebhooksEndpointsResponse, error) {
	rsp, err := c.ListWebhooksEndpoints(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWebhooksEndpointsResponse(rsp)
}

// CreateWebhooksEndpointWithBodyWithResponse request with arbitrary body returning *CreateWebhooksEndpointResponse
func (c *ClientWithResponses) CreateWebhooksEndpointWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWebhooksEndpointResponse, error) {
	rsp, err := c.CreateWebhooksEndpointWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhooksEndpointResponse(rsp)
}

func (c *ClientWithResponses) CreateWebhooksEndpointWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateWebhooksEndpointApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWebhooksEndpointResponse, error) {
	rsp, err := c.CreateWebhooksEndpointWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhooksEndpointResponse(rsp)
}

// ListWebhooksDeliveriesWithResponse request returning *ListWebhooksDeliveriesResponse
func (c *ClientWithResponses) ListWebhooksDeliveriesWithResponse(ctx context.Context, endpointId string, params *ListWebhooksDeliveriesParams, reqEditors ...RequestEditorFn) (*ListWebhooksDeliveriesResponse, error) {
	rsp, err := c.ListWebhooksDeliveries(ctx, endpointId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWebhooksDeliveriesResponse(rsp)
}

// DeleteWebhooksEndpointWithResponse request returning *DeleteWebhooksEndpointResponse
func (c *ClientWithResponses) DeleteWebhooksEndpointWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWebhooksEndpointResponse, error) {
	rsp, err := c.DeleteWebhooksEndpoint(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWebhooksEndpointResponse(rsp)
}

// GetWebhooksEndpointWithResponse request returning *GetWebhooksEndpointResponse
func (c *ClientWithResponses) GetWebhooksEndpointWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWebhooksEndpointResponse, error) {
	rsp, err := c.GetWebhooksEndpoint(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhooksEndpointResponse(rsp)
}

// UpdateWebhooksEndpointWithBodyWithResponse request with arbitrary body returning *UpdateWebhooksEndpointResponse
func (c *ClientWithResponses) UpdateWebhooksEndpointWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWebhooksEndpointResponse, error) {
	rsp, err := c.UpdateWebhooksEndpointWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWebhooksEndpointResponse(rsp)
}

func (c *ClientWithResponses) UpdateWebhooksEndpointWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateWebhooksEndpointApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWebhooksEndpointResponse, error) {
	rsp, err := c.UpdateWebhooksEndpointWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWebhooksEndpointResponse(rsp)
}

// DeleteWorkflowCustomFieldSelectionWithResponse request returning *DeleteWorkflowCustomFieldSelectionResponse
func (c *ClientWithResponses) DeleteWorkflowCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.DeleteWorkflowCustomFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowCustomFieldSelectionResponse(rsp)
}

// GetWorkflowCustomFieldSelectionWithResponse request returning *GetWorkflowCustomFieldSelectionResponse
func (c *ClientWithResponses) GetWorkflowCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.GetWorkflowCustomFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowCustomFieldSelectionResponse(rsp)
}

// UpdateWorkflowCustomFieldSelectionWithBodyWithResponse request with arbitrary body returning *UpdateWorkflowCustomFieldSelectionResponse
func (c *ClientWithResponses) UpdateWorkflowCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.UpdateWorkflowCustomFieldSelectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowCustomFieldSelectionResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkflowCustomFieldSelectionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateWorkflowCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.UpdateWorkflowCustomFieldSelectionWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowCustomFieldSelectionResponse(rsp)
}

// DeleteWorkflowFormFieldConditionWithResponse request returning *DeleteWorkflowFormFieldConditionResponse
func (c *ClientWithResponses) DeleteWorkflowFormFieldConditionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowFormFieldConditionResponse, error) {
	rsp, err := c.DeleteWorkflowFormFieldCondition(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowFormFieldConditionResponse(rsp)
}

// GetWorkflowFormFieldConditionWithResponse request returning *GetWorkflowFormFieldConditionResponse
func (c *ClientWithResponses) GetWorkflowFormFieldConditionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowFormFieldConditionResponse, error) {
	rsp, err := c.GetWorkflowFormFieldCondition(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowFormFieldConditionResponse(rsp)
}

// UpdateWorkflowFormFieldConditionWithBodyWithResponse request with arbitrary body returning *UpdateWorkflowFormFieldConditionResponse
func (c *ClientWithResponses) UpdateWorkflowFormFieldConditionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowFormFieldConditionResponse, error) {
	rsp, err := c.UpdateWorkflowFormFieldConditionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowFormFieldConditionResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkflowFormFieldConditionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateWorkflowFormFieldConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkflowFormFieldConditionResponse, error) {
	rsp, err := c.UpdateWorkflowFormFieldConditionWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowFormFieldConditionResponse(rsp)
}

// ListWorkflowGroupsWithResponse request returning *ListWorkflowGroupsResponse
func (c *ClientWithResponses) ListWorkflowGroupsWithResponse(ctx context.Context, params *ListWorkflowGroupsParams, reqEditors ...RequestEditorFn) (*ListWorkflowGroupsResponse, error) {
	rsp, err := c.ListWorkflowGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowGroupsResponse(rsp)
}

// CreateWorkflowGroupWithBodyWithResponse request with arbitrary body returning *CreateWorkflowGroupResponse
func (c *ClientWithResponses) CreateWorkflowGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowGroupResponse, error) {
	rsp, err := c.CreateWorkflowGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkflowGroupWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateWorkflowGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkflowGroupResponse, error) {
	rsp, err := c.CreateWorkflowGroupWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowGroupResponse(rsp)
}

// DeleteWorkflowGroupWithResponse request returning *DeleteWorkflowGroupResponse
func (c *ClientWithResponses) DeleteWorkflowGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowGroupResponse, error) {
	rsp, err := c.DeleteWorkflowGroup(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowGroupResponse(rsp)
}

// GetWorkflowGroupWithResponse request returning *GetWorkflowGroupResponse
func (c *ClientWithResponses) GetWorkflowGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowGroupResponse, error) {
	rsp, err := c.GetWorkflowGroup(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowGroupResponse(rsp)
}

// UpdateWorkflowGroupWithBodyWithResponse request with arbitrary body returning *UpdateWorkflowGroupResponse
func (c *ClientWithResponses) UpdateWorkflowGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowGroupResponse, error) {
	rsp, err := c.UpdateWorkflowGroupWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowGroupResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkflowGroupWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateWorkflowGroupApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkflowGroupResponse, error) {
	rsp, err := c.UpdateWorkflowGroupWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowGroupResponse(rsp)
}

// DeleteWorkflowTaskWithResponse request returning *DeleteWorkflowTaskResponse
func (c *ClientWithResponses) DeleteWorkflowTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowTaskResponse, error) {
	rsp, err := c.DeleteWorkflowTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowTaskResponse(rsp)
}

// GetWorkflowTaskWithResponse request returning *GetWorkflowTaskResponse
func (c *ClientWithResponses) GetWorkflowTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowTaskResponse, error) {
	rsp, err := c.GetWorkflowTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowTaskResponse(rsp)
}

// UpdateWorkflowTaskWithBodyWithResponse request with arbitrary body returning *UpdateWorkflowTaskResponse
func (c *ClientWithResponses) UpdateWorkflowTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowTaskResponse, error) {
	rsp, err := c.UpdateWorkflowTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowTaskResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkflowTaskWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateWorkflowTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkflowTaskResponse, error) {
	rsp, err := c.UpdateWorkflowTaskWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowTaskResponse(rsp)
}

// ListWorkflowsWithResponse request returning *ListWorkflowsResponse
func (c *ClientWithResponses) ListWorkflowsWithResponse(ctx context.Context, params *ListWorkflowsParams, reqEditors ...RequestEditorFn) (*ListWorkflowsResponse, error) {
	rsp, err := c.ListWorkflows(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowsResponse(rsp)
}

// CreateWorkflowWithBodyWithResponse request with arbitrary body returning *CreateWorkflowResponse
func (c *ClientWithResponses) CreateWorkflowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowResponse, error) {
	rsp, err := c.CreateWorkflowWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkflowWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body CreateWorkflowApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkflowResponse, error) {
	rsp, err := c.CreateWorkflowWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowResponse(rsp)
}

// DeleteWorkflowWithResponse request returning *DeleteWorkflowResponse
func (c *ClientWithResponses) DeleteWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowResponse, error) {
	rsp, err := c.DeleteWorkflow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowResponse(rsp)
}

// GetWorkflowWithResponse request returning *GetWorkflowResponse
func (c *ClientWithResponses) GetWorkflowWithResponse(ctx context.Context, id string, params *GetWorkflowParams, reqEditors ...RequestEditorFn) (*GetWorkflowResponse, error) {
	rsp, err := c.GetWorkflow(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowResponse(rsp)
}

// UpdateWorkflowWithBodyWithResponse request with arbitrary body returning *UpdateWorkflowResponse
func (c *ClientWithResponses) UpdateWorkflowWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowResponse, error) {
	rsp, err := c.UpdateWorkflowWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkflowWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body UpdateWorkflowApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkflowResponse, error) {
	rsp, err := c.UpdateWorkflowWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowResponse(rsp)
}

// ListWorkflowCustomFieldSelectionsWithResponse request returning *ListWorkflowCustomFieldSelectionsResponse
func (c *ClientWithResponses) ListWorkflowCustomFieldSelectionsWithResponse(ctx context.Context, workflowId string, params *ListWorkflowCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListWorkflowCustomFieldSelectionsResponse, error) {
	rsp, err := c.ListWorkflowCustomFieldSelections(ctx, workflowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowCustomFieldSelectionsResponse(rsp)
}

// CreateWorkflowCustomFieldSelectionWithBodyWithResponse request with arbitrary body returning *CreateWorkflowCustomFieldSelectionResponse
func (c *ClientWithResponses) CreateWorkflowCustomFieldSelectionWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.CreateWorkflowCustomFieldSelectionWithBody(ctx, workflowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowCustomFieldSelectionResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkflowCustomFieldSelectionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, workflowId string, body CreateWorkflowCustomFieldSelectionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.CreateWorkflowCustomFieldSelectionWithApplicationVndAPIPlusJSONBody(ctx, workflowId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowCustomFieldSelectionResponse(rsp)
}

// ListWorkflowFormFieldConditionsWithResponse request returning *ListWorkflowFormFieldConditionsResponse
func (c *ClientWithResponses) ListWorkflowFormFieldConditionsWithResponse(ctx context.Context, workflowId string, params *ListWorkflowFormFieldConditionsParams, reqEditors ...RequestEditorFn) (*ListWorkflowFormFieldConditionsResponse, error) {
	rsp, err := c.ListWorkflowFormFieldConditions(ctx, workflowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowFormFieldConditionsResponse(rsp)
}

// CreateWorkflowFormFieldConditionWithBodyWithResponse request with arbitrary body returning *CreateWorkflowFormFieldConditionResponse
func (c *ClientWithResponses) CreateWorkflowFormFieldConditionWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowFormFieldConditionResponse, error) {
	rsp, err := c.CreateWorkflowFormFieldConditionWithBody(ctx, workflowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowFormFieldConditionResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkflowFormFieldConditionWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, workflowId string, body CreateWorkflowFormFieldConditionApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkflowFormFieldConditionResponse, error) {
	rsp, err := c.CreateWorkflowFormFieldConditionWithApplicationVndAPIPlusJSONBody(ctx, workflowId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowFormFieldConditionResponse(rsp)
}

// ListWorkflowRunsWithResponse request returning *ListWorkflowRunsResponse
func (c *ClientWithResponses) ListWorkflowRunsWithResponse(ctx context.Context, workflowId string, params *ListWorkflowRunsParams, reqEditors ...RequestEditorFn) (*ListWorkflowRunsResponse, error) {
	rsp, err := c.ListWorkflowRuns(ctx, workflowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowRunsResponse(rsp)
}

// CreateWorkflowRunWithBodyWithResponse request with arbitrary body returning *CreateWorkflowRunResponse
func (c *ClientWithResponses) CreateWorkflowRunWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowRunResponse, error) {
	rsp, err := c.CreateWorkflowRunWithBody(ctx, workflowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowRunResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkflowRunWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, workflowId string, body CreateWorkflowRunApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkflowRunResponse, error) {
	rsp, err := c.CreateWorkflowRunWithApplicationVndAPIPlusJSONBody(ctx, workflowId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowRunResponse(rsp)
}

// ListWorkflowTasksWithResponse request returning *ListWorkflowTasksResponse
func (c *ClientWithResponses) ListWorkflowTasksWithResponse(ctx context.Context, workflowId string, params *ListWorkflowTasksParams, reqEditors ...RequestEditorFn) (*ListWorkflowTasksResponse, error) {
	rsp, err := c.ListWorkflowTasks(ctx, workflowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowTasksResponse(rsp)
}

// CreateWorkflowTaskWithBodyWithResponse request with arbitrary body returning *CreateWorkflowTaskResponse
func (c *ClientWithResponses) CreateWorkflowTaskWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowTaskResponse, error) {
	rsp, err := c.CreateWorkflowTaskWithBody(ctx, workflowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowTaskResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkflowTaskWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, workflowId string, body CreateWorkflowTaskApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkflowTaskResponse, error) {
	rsp, err := c.CreateWorkflowTaskWithApplicationVndAPIPlusJSONBody(ctx, workflowId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowTaskResponse(rsp)
}

// ParseListAllIncidentActionItemsResponse parses an HTTP response from a ListAllIncidentActionItemsWithResponse call
func ParseListAllIncidentActionItemsResponse(rsp *http.Response) (*ListAllIncidentActionItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAllIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentActionItemList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseDeleteIncidentActionItemResponse parses an HTTP response from a DeleteIncidentActionItemWithResponse call
func ParseDeleteIncidentActionItemResponse(rsp *http.Response) (*DeleteIncidentActionItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentActionItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetIncidentActionItemsResponse parses an HTTP response from a GetIncidentActionItemsWithResponse call
func ParseGetIncidentActionItemsResponse(rsp *http.Response) (*GetIncidentActionItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentActionItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateIncidentActionItemResponse parses an HTTP response from a UpdateIncidentActionItemWithResponse call
func ParseUpdateIncidentActionItemResponse(rsp *http.Response) (*UpdateIncidentActionItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentActionItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListAlertGroupsResponse parses an HTTP response from a ListAlertGroupsWithResponse call
func ParseListAlertGroupsResponse(rsp *http.Response) (*ListAlertGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAlertGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertGroupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateAlertGroupResponse parses an HTTP response from a CreateAlertGroupWithResponse call
func ParseCreateAlertGroupResponse(rsp *http.Response) (*CreateAlertGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAlertGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AlertGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteAlertGroupResponse parses an HTTP response from a DeleteAlertGroupWithResponse call
func ParseDeleteAlertGroupResponse(rsp *http.Response) (*DeleteAlertGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAlertGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetAlertGroupResponse parses an HTTP response from a GetAlertGroupWithResponse call
func ParseGetAlertGroupResponse(rsp *http.Response) (*GetAlertGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateAlertGroupResponse parses an HTTP response from a UpdateAlertGroupWithResponse call
func ParseUpdateAlertGroupResponse(rsp *http.Response) (*UpdateAlertGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAlertGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListAlertSourcesResponse parses an HTTP response from a ListAlertSourcesWithResponse call
func ParseListAlertSourcesResponse(rsp *http.Response) (*ListAlertSourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAlertSourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertsSourceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateAlertSourceResponse parses an HTTP response from a CreateAlertSourceWithResponse call
func ParseCreateAlertSourceResponse(rsp *http.Response) (*CreateAlertSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAlertSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AlertsSourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteAlertSourceResponse parses an HTTP response from a DeleteAlertSourceWithResponse call
func ParseDeleteAlertSourceResponse(rsp *http.Response) (*DeleteAlertSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAlertSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertsSourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetAlertSourceResponse parses an HTTP response from a GetAlertSourceWithResponse call
func ParseGetAlertSourceResponse(rsp *http.Response) (*GetAlertSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertsSourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateAlertSourceResponse parses an HTTP response from a UpdateAlertSourceWithResponse call
func ParseUpdateAlertSourceResponse(rsp *http.Response) (*UpdateAlertSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAlertSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertsSourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListAlertUrgenciesResponse parses an HTTP response from a ListAlertUrgenciesWithResponse call
func ParseListAlertUrgenciesResponse(rsp *http.Response) (*ListAlertUrgenciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAlertUrgenciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertUrgencyList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateAlertUrgencyResponse parses an HTTP response from a CreateAlertUrgencyWithResponse call
func ParseCreateAlertUrgencyResponse(rsp *http.Response) (*CreateAlertUrgencyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAlertUrgencyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AlertUrgencyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteAlertUrgencyResponse parses an HTTP response from a DeleteAlertUrgencyWithResponse call
func ParseDeleteAlertUrgencyResponse(rsp *http.Response) (*DeleteAlertUrgencyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAlertUrgencyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertUrgencyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetAlertUrgencyResponse parses an HTTP response from a GetAlertUrgencyWithResponse call
func ParseGetAlertUrgencyResponse(rsp *http.Response) (*GetAlertUrgencyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertUrgencyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertUrgencyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateAlertUrgencyResponse parses an HTTP response from a UpdateAlertUrgencyWithResponse call
func ParseUpdateAlertUrgencyResponse(rsp *http.Response) (*UpdateAlertUrgencyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAlertUrgencyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertUrgencyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListAlertsResponse parses an HTTP response from a ListAlertsWithResponse call
func ParseListAlertsResponse(rsp *http.Response) (*ListAlertsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateAlertResponse parses an HTTP response from a CreateAlertWithResponse call
func ParseCreateAlertResponse(rsp *http.Response) (*CreateAlertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AlertResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseGetAlertResponse parses an HTTP response from a GetAlertWithResponse call
func ParseGetAlertResponse(rsp *http.Response) (*GetAlertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseAcknowledgeAlertResponse parses an HTTP response from a AcknowledgeAlertWithResponse call
func ParseAcknowledgeAlertResponse(rsp *http.Response) (*AcknowledgeAlertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcknowledgeAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseResolveAlertResponse parses an HTTP response from a ResolveAlertWithResponse call
func ParseResolveAlertResponse(rsp *http.Response) (*ResolveAlertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResolveAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListAuditsResponse parses an HTTP response from a ListAuditsWithResponse call
func ParseListAuditsResponse(rsp *http.Response) (*ListAuditsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAuditsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuditsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseListAuthorizationsResponse parses an HTTP response from a ListAuthorizationsWithResponse call
func ParseListAuthorizationsResponse(rsp *http.Response) (*ListAuthorizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAuthorizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthorizationList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateAuthorizationResponse parses an HTTP response from a CreateAuthorizationWithResponse call
func ParseCreateAuthorizationResponse(rsp *http.Response) (*CreateAuthorizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAuthorizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AuthorizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	}

	return response, nil
}

// ParseDeleteAuthorizationResponse parses an HTTP response from a DeleteAuthorizationWithResponse call
func ParseDeleteAuthorizationResponse(rsp *http.Response) (*DeleteAuthorizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthorizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthorizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetAuthorizationResponse parses an HTTP response from a GetAuthorizationWithResponse call
func ParseGetAuthorizationResponse(rsp *http.Response) (*GetAuthorizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthorizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthorizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateAuthorizationResponse parses an HTTP response from a UpdateAuthorizationWithResponse call
func ParseUpdateAuthorizationResponse(rsp *http.Response) (*UpdateAuthorizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAuthorizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthorizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListCatalogEntityPropertiesResponse parses an HTTP response from a ListCatalogEntityPropertiesWithResponse call
func ParseListCatalogEntityPropertiesResponse(rsp *http.Response) (*ListCatalogEntityPropertiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCatalogEntityPropertiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogEntityPropertyList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateCatalogEntityPropertyResponse parses an HTTP response from a CreateCatalogEntityPropertyWithResponse call
func ParseCreateCatalogEntityPropertyResponse(rsp *http.Response) (*CreateCatalogEntityPropertyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCatalogEntityPropertyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CatalogEntityPropertyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteCatalogEntityResponse parses an HTTP response from a DeleteCatalogEntityWithResponse call
func ParseDeleteCatalogEntityResponse(rsp *http.Response) (*DeleteCatalogEntityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCatalogEntityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogEntityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetCatalogEntityResponse parses an HTTP response from a GetCatalogEntityWithResponse call
func ParseGetCatalogEntityResponse(rsp *http.Response) (*GetCatalogEntityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogEntityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogEntityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateCatalogEntityResponse parses an HTTP response from a UpdateCatalogEntityWithResponse call
func ParseUpdateCatalogEntityResponse(rsp *http.Response) (*UpdateCatalogEntityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCatalogEntityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogEntityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteCatalogEntityPropertyResponse parses an HTTP response from a DeleteCatalogEntityPropertyWithResponse call
func ParseDeleteCatalogEntityPropertyResponse(rsp *http.Response) (*DeleteCatalogEntityPropertyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCatalogEntityPropertyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogEntityPropertyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetCatalogEntityPropertyResponse parses an HTTP response from a GetCatalogEntityPropertyWithResponse call
func ParseGetCatalogEntityPropertyResponse(rsp *http.Response) (*GetCatalogEntityPropertyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogEntityPropertyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogEntityPropertyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateCatalogEntityPropertyResponse parses an HTTP response from a UpdateCatalogEntityPropertyWithResponse call
func ParseUpdateCatalogEntityPropertyResponse(rsp *http.Response) (*UpdateCatalogEntityPropertyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCatalogEntityPropertyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogEntityPropertyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteCatalogFieldResponse parses an HTTP response from a DeleteCatalogFieldWithResponse call
func ParseDeleteCatalogFieldResponse(rsp *http.Response) (*DeleteCatalogFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCatalogFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogFieldResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetCatalogFieldResponse parses an HTTP response from a GetCatalogFieldWithResponse call
func ParseGetCatalogFieldResponse(rsp *http.Response) (*GetCatalogFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogFieldResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateCatalogFieldResponse parses an HTTP response from a UpdateCatalogFieldWithResponse call
func ParseUpdateCatalogFieldResponse(rsp *http.Response) (*UpdateCatalogFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCatalogFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogFieldResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListCatalogsResponse parses an HTTP response from a ListCatalogsWithResponse call
func ParseListCatalogsResponse(rsp *http.Response) (*ListCatalogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCatalogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateCatalogResponse parses an HTTP response from a CreateCatalogWithResponse call
func ParseCreateCatalogResponse(rsp *http.Response) (*CreateCatalogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCatalogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CatalogResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListCatalogEntitiesResponse parses an HTTP response from a ListCatalogEntitiesWithResponse call
func ParseListCatalogEntitiesResponse(rsp *http.Response) (*ListCatalogEntitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCatalogEntitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogEntityList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateCatalogEntityResponse parses an HTTP response from a CreateCatalogEntityWithResponse call
func ParseCreateCatalogEntityResponse(rsp *http.Response) (*CreateCatalogEntityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCatalogEntityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CatalogEntityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListCatalogFieldsResponse parses an HTTP response from a ListCatalogFieldsWithResponse call
func ParseListCatalogFieldsResponse(rsp *http.Response) (*ListCatalogFieldsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCatalogFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogFieldList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateCatalogFieldResponse parses an HTTP response from a CreateCatalogFieldWithResponse call
func ParseCreateCatalogFieldResponse(rsp *http.Response) (*CreateCatalogFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCatalogFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CatalogFieldResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteCatalogResponse parses an HTTP response from a DeleteCatalogWithResponse call
func ParseDeleteCatalogResponse(rsp *http.Response) (*DeleteCatalogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCatalogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetCatalogResponse parses an HTTP response from a GetCatalogWithResponse call
func ParseGetCatalogResponse(rsp *http.Response) (*GetCatalogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateCatalogResponse parses an HTTP response from a UpdateCatalogWithResponse call
func ParseUpdateCatalogResponse(rsp *http.Response) (*UpdateCatalogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCatalogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListCausesResponse parses an HTTP response from a ListCausesWithResponse call
func ParseListCausesResponse(rsp *http.Response) (*ListCausesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCausesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CauseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateCauseResponse parses an HTTP response from a CreateCauseWithResponse call
func ParseCreateCauseResponse(rsp *http.Response) (*CreateCauseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CauseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteCauseResponse parses an HTTP response from a DeleteCauseWithResponse call
func ParseDeleteCauseResponse(rsp *http.Response) (*DeleteCauseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CauseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetCauseResponse parses an HTTP response from a GetCauseWithResponse call
func ParseGetCauseResponse(rsp *http.Response) (*GetCauseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CauseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateCauseResponse parses an HTTP response from a UpdateCauseWithResponse call
func ParseUpdateCauseResponse(rsp *http.Response) (*UpdateCauseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CauseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteCustomFieldOptionResponse parses an HTTP response from a DeleteCustomFieldOptionWithResponse call
func ParseDeleteCustomFieldOptionResponse(rsp *http.Response) (*DeleteCustomFieldOptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldOptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetCustomFieldOptionResponse parses an HTTP response from a GetCustomFieldOptionWithResponse call
func ParseGetCustomFieldOptionResponse(rsp *http.Response) (*GetCustomFieldOptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldOptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateCustomFieldOptionResponse parses an HTTP response from a UpdateCustomFieldOptionWithResponse call
func ParseUpdateCustomFieldOptionResponse(rsp *http.Response) (*UpdateCustomFieldOptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldOptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListCustomFieldsResponse parses an HTTP response from a ListCustomFieldsWithResponse call
func ParseListCustomFieldsResponse(rsp *http.Response) (*ListCustomFieldsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCustomFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateCustomFieldResponse parses an HTTP response from a CreateCustomFieldWithResponse call
func ParseCreateCustomFieldResponse(rsp *http.Response) (*CreateCustomFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CustomFieldResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListCustomFieldOptionsResponse parses an HTTP response from a ListCustomFieldOptionsWithResponse call
func ParseListCustomFieldOptionsResponse(rsp *http.Response) (*ListCustomFieldOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCustomFieldOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldOptionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateCustomFieldOptionResponse parses an HTTP response from a CreateCustomFieldOptionWithResponse call
func ParseCreateCustomFieldOptionResponse(rsp *http.Response) (*CreateCustomFieldOptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CustomFieldOptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteCustomFieldResponse parses an HTTP response from a DeleteCustomFieldWithResponse call
func ParseDeleteCustomFieldResponse(rsp *http.Response) (*DeleteCustomFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetCustomFieldResponse parses an HTTP response from a GetCustomFieldWithResponse call
func ParseGetCustomFieldResponse(rsp *http.Response) (*GetCustomFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateCustomFieldResponse parses an HTTP response from a UpdateCustomFieldWithResponse call
func ParseUpdateCustomFieldResponse(rsp *http.Response) (*UpdateCustomFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListCustomFormsResponse parses an HTTP response from a ListCustomFormsWithResponse call
func ParseListCustomFormsResponse(rsp *http.Response) (*ListCustomFormsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCustomFormsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFormList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	}

	return response, nil
}

// ParseCreateCustomFormResponse parses an HTTP response from a CreateCustomFormWithResponse call
func ParseCreateCustomFormResponse(rsp *http.Response) (*CreateCustomFormResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomFormResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CustomFormResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteCustomFormResponse parses an HTTP response from a DeleteCustomFormWithResponse call
func ParseDeleteCustomFormResponse(rsp *http.Response) (*DeleteCustomFormResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomFormResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFormResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetCustomFormResponse parses an HTTP response from a GetCustomFormWithResponse call
func ParseGetCustomFormResponse(rsp *http.Response) (*GetCustomFormResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomFormResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFormResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateCustomFormResponse parses an HTTP response from a UpdateCustomFormWithResponse call
func ParseUpdateCustomFormResponse(rsp *http.Response) (*UpdateCustomFormResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomFormResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFormResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteDashboardPanelResponse parses an HTTP response from a DeleteDashboardPanelWithResponse call
func ParseDeleteDashboardPanelResponse(rsp *http.Response) (*DeleteDashboardPanelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDashboardPanelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DashboardPanelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardPanelResponse parses an HTTP response from a GetDashboardPanelWithResponse call
func ParseGetDashboardPanelResponse(rsp *http.Response) (*GetDashboardPanelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardPanelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DashboardPanelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseUpdateDashboardPanelResponse parses an HTTP response from a UpdateDashboardPanelWithResponse call
func ParseUpdateDashboardPanelResponse(rsp *http.Response) (*UpdateDashboardPanelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDashboardPanelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DashboardPanelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseDuplicateDashboardPanelResponse parses an HTTP response from a DuplicateDashboardPanelWithResponse call
func ParseDuplicateDashboardPanelResponse(rsp *http.Response) (*DuplicateDashboardPanelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DuplicateDashboardPanelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DashboardPanelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	}

	return response, nil
}

// ParseListDashboardsResponse parses an HTTP response from a ListDashboardsWithResponse call
func ParseListDashboardsResponse(rsp *http.Response) (*ListDashboardsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDashboardsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DashboardList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateDashboardResponse parses an HTTP response from a CreateDashboardWithResponse call
func ParseCreateDashboardResponse(rsp *http.Response) (*CreateDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DashboardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListDashboardPanelsResponse parses an HTTP response from a ListDashboardPanelsWithResponse call
func ParseListDashboardPanelsResponse(rsp *http.Response) (*ListDashboardPanelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDashboardPanelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DashboardPanelList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateDashboardPanelResponse parses an HTTP response from a CreateDashboardPanelWithResponse call
func ParseCreateDashboardPanelResponse(rsp *http.Response) (*CreateDashboardPanelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDashboardPanelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DashboardPanelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	}

	return response, nil
}

// ParseDeleteDashboardResponse parses an HTTP response from a DeleteDashboardWithResponse call
func ParseDeleteDashboardResponse(rsp *http.Response) (*DeleteDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DashboardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetDashboardResponse parses an HTTP response from a GetDashboardWithResponse call
func ParseGetDashboardResponse(rsp *http.Response) (*GetDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DashboardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateDashboardResponse parses an HTTP response from a UpdateDashboardWithResponse call
func ParseUpdateDashboardResponse(rsp *http.Response) (*UpdateDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DashboardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDuplicateDashboardResponse parses an HTTP response from a DuplicateDashboardWithResponse call
func ParseDuplicateDashboardResponse(rsp *http.Response) (*DuplicateDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DuplicateDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DashboardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	}

	return response, nil
}

// ParseSetDefaultDashboardResponse parses an HTTP response from a SetDefaultDashboardWithResponse call
func ParseSetDefaultDashboardResponse(rsp *http.Response) (*SetDefaultDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetDefaultDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DashboardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	}

	return response, nil
}

// ParseListEnvironmentsResponse parses an HTTP response from a ListEnvironmentsWithResponse call
func ParseListEnvironmentsResponse(rsp *http.Response) (*ListEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateEnvironmentResponse parses an HTTP response from a CreateEnvironmentWithResponse call
func ParseCreateEnvironmentResponse(rsp *http.Response) (*CreateEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteEnvironmentResponse parses an HTTP response from a DeleteEnvironmentWithResponse call
func ParseDeleteEnvironmentResponse(rsp *http.Response) (*DeleteEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateEnvironmentResponse parses an HTTP response from a UpdateEnvironmentWithResponse call
func ParseUpdateEnvironmentResponse(rsp *http.Response) (*UpdateEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteEscalationLevelResponse parses an HTTP response from a DeleteEscalationLevelWithResponse call
func ParseDeleteEscalationLevelResponse(rsp *http.Response) (*DeleteEscalationLevelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEscalationLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EscalationLevelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetEscalationLevelResponse parses an HTTP response from a GetEscalationLevelWithResponse call
func ParseGetEscalationLevelResponse(rsp *http.Response) (*GetEscalationLevelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEscalationLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EscalationLevelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateEscalationLevelResponse parses an HTTP response from a UpdateEscalationLevelWithResponse call
func ParseUpdateEscalationLevelResponse(rsp *http.Response) (*UpdateEscalationLevelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEscalationLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EscalationLevelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListEscalationLevelsPathsResponse parses an HTTP response from a ListEscalationLevelsPathsWithResponse call
func ParseListEscalationLevelsPathsResponse(rsp *http.Response) (*ListEscalationLevelsPathsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEscalationLevelsPathsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EscalationLevelList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateEscalationLevelPathsResponse parses an HTTP response from a CreateEscalationLevelPathsWithResponse call
func ParseCreateEscalationLevelPathsResponse(rsp *http.Response) (*CreateEscalationLevelPathsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEscalationLevelPathsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EscalationLevelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteEscalationPathResponse parses an HTTP response from a DeleteEscalationPathWithResponse call
func ParseDeleteEscalationPathResponse(rsp *http.Response) (*DeleteEscalationPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEscalationPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EscalationPathResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetEscalationPathResponse parses an HTTP response from a GetEscalationPathWithResponse call
func ParseGetEscalationPathResponse(rsp *http.Response) (*GetEscalationPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEscalationPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EscalationPathResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateEscalationPathResponse parses an HTTP response from a UpdateEscalationPathWithResponse call
func ParseUpdateEscalationPathResponse(rsp *http.Response) (*UpdateEscalationPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEscalationPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EscalationPathResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListEscalationPoliciesResponse parses an HTTP response from a ListEscalationPoliciesWithResponse call
func ParseListEscalationPoliciesResponse(rsp *http.Response) (*ListEscalationPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEscalationPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EscalationPolicyList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateEscalationPolicyResponse parses an HTTP response from a CreateEscalationPolicyWithResponse call
func ParseCreateEscalationPolicyResponse(rsp *http.Response) (*CreateEscalationPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEscalationPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EscalationPolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListEscalationLevelsPoliciesResponse parses an HTTP response from a ListEscalationLevelsPoliciesWithResponse call
func ParseListEscalationLevelsPoliciesResponse(rsp *http.Response) (*ListEscalationLevelsPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEscalationLevelsPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EscalationLevelList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateEscalationLevelPoliciesResponse parses an HTTP response from a CreateEscalationLevelPoliciesWithResponse call
func ParseCreateEscalationLevelPoliciesResponse(rsp *http.Response) (*CreateEscalationLevelPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEscalationLevelPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EscalationLevelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListEscalationPathsResponse parses an HTTP response from a ListEscalationPathsWithResponse call
func ParseListEscalationPathsResponse(rsp *http.Response) (*ListEscalationPathsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEscalationPathsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EscalationPathList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateEscalationPathResponse parses an HTTP response from a CreateEscalationPathWithResponse call
func ParseCreateEscalationPathResponse(rsp *http.Response) (*CreateEscalationPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEscalationPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EscalationPathResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteEscalationPolicyResponse parses an HTTP response from a DeleteEscalationPolicyWithResponse call
func ParseDeleteEscalationPolicyResponse(rsp *http.Response) (*DeleteEscalationPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEscalationPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EscalationPolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetEscalationPolicyResponse parses an HTTP response from a GetEscalationPolicyWithResponse call
func ParseGetEscalationPolicyResponse(rsp *http.Response) (*GetEscalationPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEscalationPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EscalationPolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateEscalationPolicyResponse parses an HTTP response from a UpdateEscalationPolicyWithResponse call
func ParseUpdateEscalationPolicyResponse(rsp *http.Response) (*UpdateEscalationPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEscalationPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EscalationPolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteIncidentEventResponse parses an HTTP response from a DeleteIncidentEventWithResponse call
func ParseDeleteIncidentEventResponse(rsp *http.Response) (*DeleteIncidentEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetIncidentEventsResponse parses an HTTP response from a GetIncidentEventsWithResponse call
func ParseGetIncidentEventsResponse(rsp *http.Response) (*GetIncidentEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateIncidentEventResponse parses an HTTP response from a UpdateIncidentEventWithResponse call
func ParseUpdateIncidentEventResponse(rsp *http.Response) (*UpdateIncidentEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListIncidentEventFunctionalitiesResponse parses an HTTP response from a ListIncidentEventFunctionalitiesWithResponse call
func ParseListIncidentEventFunctionalitiesResponse(rsp *http.Response) (*ListIncidentEventFunctionalitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentEventFunctionalitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentEventFunctionalityList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncidentEventFunctionalityResponse parses an HTTP response from a CreateIncidentEventFunctionalityWithResponse call
func ParseCreateIncidentEventFunctionalityResponse(rsp *http.Response) (*CreateIncidentEventFunctionalityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentEventFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentEventFunctionalityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListIncidentEventServicesResponse parses an HTTP response from a ListIncidentEventServicesWithResponse call
func ParseListIncidentEventServicesResponse(rsp *http.Response) (*ListIncidentEventServicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentEventServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentEventServiceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncidentEventServiceResponse parses an HTTP response from a CreateIncidentEventServiceWithResponse call
func ParseCreateIncidentEventServiceResponse(rsp *http.Response) (*CreateIncidentEventServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentEventServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentEventServiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseGetIncidentFeedbacksResponse parses an HTTP response from a GetIncidentFeedbacksWithResponse call
func ParseGetIncidentFeedbacksResponse(rsp *http.Response) (*GetIncidentFeedbacksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentFeedbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentFeedbackResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateIncidentFeedbackResponse parses an HTTP response from a UpdateIncidentFeedbackWithResponse call
func ParseUpdateIncidentFeedbackResponse(rsp *http.Response) (*UpdateIncidentFeedbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentFeedbackResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteFormFieldOptionResponse parses an HTTP response from a DeleteFormFieldOptionWithResponse call
func ParseDeleteFormFieldOptionResponse(rsp *http.Response) (*DeleteFormFieldOptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFormFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormFieldOptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetFormFieldOptionResponse parses an HTTP response from a GetFormFieldOptionWithResponse call
func ParseGetFormFieldOptionResponse(rsp *http.Response) (*GetFormFieldOptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFormFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormFieldOptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateFormFieldOptionResponse parses an HTTP response from a UpdateFormFieldOptionWithResponse call
func ParseUpdateFormFieldOptionResponse(rsp *http.Response) (*UpdateFormFieldOptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFormFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormFieldOptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteFormFieldPlacementConditionResponse parses an HTTP response from a DeleteFormFieldPlacementConditionWithResponse call
func ParseDeleteFormFieldPlacementConditionResponse(rsp *http.Response) (*DeleteFormFieldPlacementConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFormFieldPlacementConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormFieldPlacementConditionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetFormFieldPlacementConditionResponse parses an HTTP response from a GetFormFieldPlacementConditionWithResponse call
func ParseGetFormFieldPlacementConditionResponse(rsp *http.Response) (*GetFormFieldPlacementConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFormFieldPlacementConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormFieldPlacementConditionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateFormFieldPlacementConditionResponse parses an HTTP response from a UpdateFormFieldPlacementConditionWithResponse call
func ParseUpdateFormFieldPlacementConditionResponse(rsp *http.Response) (*UpdateFormFieldPlacementConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFormFieldPlacementConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormFieldPlacementConditionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListFormFieldPlacementConditionsResponse parses an HTTP response from a ListFormFieldPlacementConditionsWithResponse call
func ParseListFormFieldPlacementConditionsResponse(rsp *http.Response) (*ListFormFieldPlacementConditionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFormFieldPlacementConditionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormFieldPlacementConditionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateFormFieldPlacementConditionResponse parses an HTTP response from a CreateFormFieldPlacementConditionWithResponse call
func ParseCreateFormFieldPlacementConditionResponse(rsp *http.Response) (*CreateFormFieldPlacementConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFormFieldPlacementConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FormFieldPlacementConditionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteFormFieldPlacementResponse parses an HTTP response from a DeleteFormFieldPlacementWithResponse call
func ParseDeleteFormFieldPlacementResponse(rsp *http.Response) (*DeleteFormFieldPlacementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFormFieldPlacementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormFieldPlacementResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetFormFieldPlacementResponse parses an HTTP response from a GetFormFieldPlacementWithResponse call
func ParseGetFormFieldPlacementResponse(rsp *http.Response) (*GetFormFieldPlacementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFormFieldPlacementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormFieldPlacementResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateFormFieldPlacementResponse parses an HTTP response from a UpdateFormFieldPlacementWithResponse call
func ParseUpdateFormFieldPlacementResponse(rsp *http.Response) (*UpdateFormFieldPlacementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFormFieldPlacementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormFieldPlacementResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteFormFieldPositionResponse parses an HTTP response from a DeleteFormFieldPositionWithResponse call
func ParseDeleteFormFieldPositionResponse(rsp *http.Response) (*DeleteFormFieldPositionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFormFieldPositionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormFieldPositionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetFormFieldPositionResponse parses an HTTP response from a GetFormFieldPositionWithResponse call
func ParseGetFormFieldPositionResponse(rsp *http.Response) (*GetFormFieldPositionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFormFieldPositionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormFieldPositionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateFormFieldPositionResponse parses an HTTP response from a UpdateFormFieldPositionWithResponse call
func ParseUpdateFormFieldPositionResponse(rsp *http.Response) (*UpdateFormFieldPositionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFormFieldPositionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormFieldPositionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListFormFieldsResponse parses an HTTP response from a ListFormFieldsWithResponse call
func ParseListFormFieldsResponse(rsp *http.Response) (*ListFormFieldsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFormFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormFieldList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateFormFieldResponse parses an HTTP response from a CreateFormFieldWithResponse call
func ParseCreateFormFieldResponse(rsp *http.Response) (*CreateFormFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFormFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FormFieldResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListFormFieldOptionsResponse parses an HTTP response from a ListFormFieldOptionsWithResponse call
func ParseListFormFieldOptionsResponse(rsp *http.Response) (*ListFormFieldOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFormFieldOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormFieldOptionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateFormFieldOptionResponse parses an HTTP response from a CreateFormFieldOptionWithResponse call
func ParseCreateFormFieldOptionResponse(rsp *http.Response) (*CreateFormFieldOptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFormFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FormFieldOptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListFormFieldPlacementsResponse parses an HTTP response from a ListFormFieldPlacementsWithResponse call
func ParseListFormFieldPlacementsResponse(rsp *http.Response) (*ListFormFieldPlacementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFormFieldPlacementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormFieldPlacementList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateFormFieldPlacementResponse parses an HTTP response from a CreateFormFieldPlacementWithResponse call
func ParseCreateFormFieldPlacementResponse(rsp *http.Response) (*CreateFormFieldPlacementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFormFieldPlacementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FormFieldPlacementResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListFormFieldPositionsResponse parses an HTTP response from a ListFormFieldPositionsWithResponse call
func ParseListFormFieldPositionsResponse(rsp *http.Response) (*ListFormFieldPositionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFormFieldPositionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormFieldPositionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateFormFieldPositionResponse parses an HTTP response from a CreateFormFieldPositionWithResponse call
func ParseCreateFormFieldPositionResponse(rsp *http.Response) (*CreateFormFieldPositionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFormFieldPositionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FormFieldPositionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	}

	return response, nil
}

// ParseDeleteFormFieldResponse parses an HTTP response from a DeleteFormFieldWithResponse call
func ParseDeleteFormFieldResponse(rsp *http.Response) (*DeleteFormFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFormFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormFieldResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetFormFieldResponse parses an HTTP response from a GetFormFieldWithResponse call
func ParseGetFormFieldResponse(rsp *http.Response) (*GetFormFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFormFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormFieldResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateFormFieldResponse parses an HTTP response from a UpdateFormFieldWithResponse call
func ParseUpdateFormFieldResponse(rsp *http.Response) (*UpdateFormFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFormFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormFieldResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteFormSetConditionResponse parses an HTTP response from a DeleteFormSetConditionWithResponse call
func ParseDeleteFormSetConditionResponse(rsp *http.Response) (*DeleteFormSetConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFormSetConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormSetConditionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetFormSetConditionResponse parses an HTTP response from a GetFormSetConditionWithResponse call
func ParseGetFormSetConditionResponse(rsp *http.Response) (*GetFormSetConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFormSetConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormSetConditionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateFormSetConditionResponse parses an HTTP response from a UpdateFormSetConditionWithResponse call
func ParseUpdateFormSetConditionResponse(rsp *http.Response) (*UpdateFormSetConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFormSetConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormSetConditionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListFormSetsResponse parses an HTTP response from a ListFormSetsWithResponse call
func ParseListFormSetsResponse(rsp *http.Response) (*ListFormSetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFormSetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormSetList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateFormSetResponse parses an HTTP response from a CreateFormSetWithResponse call
func ParseCreateFormSetResponse(rsp *http.Response) (*CreateFormSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFormSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FormSetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListFormSetConditionsResponse parses an HTTP response from a ListFormSetConditionsWithResponse call
func ParseListFormSetConditionsResponse(rsp *http.Response) (*ListFormSetConditionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFormSetConditionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormSetConditionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateFormSetConditionResponse parses an HTTP response from a CreateFormSetConditionWithResponse call
func ParseCreateFormSetConditionResponse(rsp *http.Response) (*CreateFormSetConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFormSetConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FormSetConditionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteFormSetResponse parses an HTTP response from a DeleteFormSetWithResponse call
func ParseDeleteFormSetResponse(rsp *http.Response) (*DeleteFormSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFormSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormSetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetFormSetResponse parses an HTTP response from a GetFormSetWithResponse call
func ParseGetFormSetResponse(rsp *http.Response) (*GetFormSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFormSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormSetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateFormSetResponse parses an HTTP response from a UpdateFormSetWithResponse call
func ParseUpdateFormSetResponse(rsp *http.Response) (*UpdateFormSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFormSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FormSetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListFunctionalitiesResponse parses an HTTP response from a ListFunctionalitiesWithResponse call
func ParseListFunctionalitiesResponse(rsp *http.Response) (*ListFunctionalitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFunctionalitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FunctionalityList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateFunctionalityResponse parses an HTTP response from a CreateFunctionalityWithResponse call
func ParseCreateFunctionalityResponse(rsp *http.Response) (*CreateFunctionalityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FunctionalityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteFunctionalityResponse parses an HTTP response from a DeleteFunctionalityWithResponse call
func ParseDeleteFunctionalityResponse(rsp *http.Response) (*DeleteFunctionalityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FunctionalityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetFunctionalityResponse parses an HTTP response from a GetFunctionalityWithResponse call
func ParseGetFunctionalityResponse(rsp *http.Response) (*GetFunctionalityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FunctionalityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateFunctionalityResponse parses an HTTP response from a UpdateFunctionalityWithResponse call
func ParseUpdateFunctionalityResponse(rsp *http.Response) (*UpdateFunctionalityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FunctionalityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetFunctionalityIncidentsChartResponse parses an HTTP response from a GetFunctionalityIncidentsChartWithResponse call
func ParseGetFunctionalityIncidentsChartResponse(rsp *http.Response) (*GetFunctionalityIncidentsChartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalityIncidentsChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentsChartResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetFunctionalityUptimeChartResponse parses an HTTP response from a GetFunctionalityUptimeChartWithResponse call
func ParseGetFunctionalityUptimeChartResponse(rsp *http.Response) (*GetFunctionalityUptimeChartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalityUptimeChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UptimeChartResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListHeartbeatsResponse parses an HTTP response from a ListHeartbeatsWithResponse call
func ParseListHeartbeatsResponse(rsp *http.Response) (*ListHeartbeatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListHeartbeatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HeartbeatList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateHeartbeatResponse parses an HTTP response from a CreateHeartbeatWithResponse call
func ParseCreateHeartbeatResponse(rsp *http.Response) (*CreateHeartbeatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHeartbeatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HeartbeatResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParsePingHeartbeatResponse parses an HTTP response from a PingHeartbeatWithResponse call
func ParsePingHeartbeatResponse(rsp *http.Response) (*PingHeartbeatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PingHeartbeatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteHeartbeatResponse parses an HTTP response from a DeleteHeartbeatWithResponse call
func ParseDeleteHeartbeatResponse(rsp *http.Response) (*DeleteHeartbeatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHeartbeatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HeartbeatResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetHeartbeatResponse parses an HTTP response from a GetHeartbeatWithResponse call
func ParseGetHeartbeatResponse(rsp *http.Response) (*GetHeartbeatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHeartbeatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HeartbeatResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateHeartbeatResponse parses an HTTP response from a UpdateHeartbeatWithResponse call
func ParseUpdateHeartbeatResponse(rsp *http.Response) (*UpdateHeartbeatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateHeartbeatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HeartbeatResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteIncidentCustomFieldSelectionResponse parses an HTTP response from a DeleteIncidentCustomFieldSelectionWithResponse call
func ParseDeleteIncidentCustomFieldSelectionResponse(rsp *http.Response) (*DeleteIncidentCustomFieldSelectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentCustomFieldSelectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetIncidentCustomFieldSelectionResponse parses an HTTP response from a GetIncidentCustomFieldSelectionWithResponse call
func ParseGetIncidentCustomFieldSelectionResponse(rsp *http.Response) (*GetIncidentCustomFieldSelectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentCustomFieldSelectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateIncidentCustomFieldSelectionResponse parses an HTTP response from a UpdateIncidentCustomFieldSelectionWithResponse call
func ParseUpdateIncidentCustomFieldSelectionResponse(rsp *http.Response) (*UpdateIncidentCustomFieldSelectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentCustomFieldSelectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteIncidentEventFunctionalityResponse parses an HTTP response from a DeleteIncidentEventFunctionalityWithResponse call
func ParseDeleteIncidentEventFunctionalityResponse(rsp *http.Response) (*DeleteIncidentEventFunctionalityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentEventFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentEventFunctionalityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetIncidentEventFunctionalitiesResponse parses an HTTP response from a GetIncidentEventFunctionalitiesWithResponse call
func ParseGetIncidentEventFunctionalitiesResponse(rsp *http.Response) (*GetIncidentEventFunctionalitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentEventFunctionalitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentEventFunctionalityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateIncidentEventFunctionalityResponse parses an HTTP response from a UpdateIncidentEventFunctionalityWithResponse call
func ParseUpdateIncidentEventFunctionalityResponse(rsp *http.Response) (*UpdateIncidentEventFunctionalityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentEventFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentEventFunctionalityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteIncidentEventServiceResponse parses an HTTP response from a DeleteIncidentEventServiceWithResponse call
func ParseDeleteIncidentEventServiceResponse(rsp *http.Response) (*DeleteIncidentEventServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentEventServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentEventServiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetIncidentEventServicesResponse parses an HTTP response from a GetIncidentEventServicesWithResponse call
func ParseGetIncidentEventServicesResponse(rsp *http.Response) (*GetIncidentEventServicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentEventServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentEventServiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateIncidentEventServiceResponse parses an HTTP response from a UpdateIncidentEventServiceWithResponse call
func ParseUpdateIncidentEventServiceResponse(rsp *http.Response) (*UpdateIncidentEventServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentEventServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentEventServiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteIncidentFormFieldSelectionResponse parses an HTTP response from a DeleteIncidentFormFieldSelectionWithResponse call
func ParseDeleteIncidentFormFieldSelectionResponse(rsp *http.Response) (*DeleteIncidentFormFieldSelectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentFormFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentFormFieldSelectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetIncidentFormFieldSelectionResponse parses an HTTP response from a GetIncidentFormFieldSelectionWithResponse call
func ParseGetIncidentFormFieldSelectionResponse(rsp *http.Response) (*GetIncidentFormFieldSelectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentFormFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentFormFieldSelectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateIncidentFormFieldSelectionResponse parses an HTTP response from a UpdateIncidentFormFieldSelectionWithResponse call
func ParseUpdateIncidentFormFieldSelectionResponse(rsp *http.Response) (*UpdateIncidentFormFieldSelectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentFormFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentFormFieldSelectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteIncidentPermissionSetBooleanResponse parses an HTTP response from a DeleteIncidentPermissionSetBooleanWithResponse call
func ParseDeleteIncidentPermissionSetBooleanResponse(rsp *http.Response) (*DeleteIncidentPermissionSetBooleanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentPermissionSetBooleanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentPermissionSetBooleanResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetIncidentPermissionSetBooleanResponse parses an HTTP response from a GetIncidentPermissionSetBooleanWithResponse call
func ParseGetIncidentPermissionSetBooleanResponse(rsp *http.Response) (*GetIncidentPermissionSetBooleanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentPermissionSetBooleanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentPermissionSetBooleanResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateIncidentPermissionSetBooleanResponse parses an HTTP response from a UpdateIncidentPermissionSetBooleanWithResponse call
func ParseUpdateIncidentPermissionSetBooleanResponse(rsp *http.Response) (*UpdateIncidentPermissionSetBooleanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentPermissionSetBooleanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentPermissionSetBooleanResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteIncidentPermissionSetResourceResponse parses an HTTP response from a DeleteIncidentPermissionSetResourceWithResponse call
func ParseDeleteIncidentPermissionSetResourceResponse(rsp *http.Response) (*DeleteIncidentPermissionSetResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentPermissionSetResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentPermissionSetResourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetIncidentPermissionSetResourceResponse parses an HTTP response from a GetIncidentPermissionSetResourceWithResponse call
func ParseGetIncidentPermissionSetResourceResponse(rsp *http.Response) (*GetIncidentPermissionSetResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentPermissionSetResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentPermissionSetResourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateIncidentPermissionSetResourceResponse parses an HTTP response from a UpdateIncidentPermissionSetResourceWithResponse call
func ParseUpdateIncidentPermissionSetResourceResponse(rsp *http.Response) (*UpdateIncidentPermissionSetResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentPermissionSetResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentPermissionSetResourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListIncidentPermissionSetsResponse parses an HTTP response from a ListIncidentPermissionSetsWithResponse call
func ParseListIncidentPermissionSetsResponse(rsp *http.Response) (*ListIncidentPermissionSetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentPermissionSetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentPermissionSetList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncidentPermissionSetResponse parses an HTTP response from a CreateIncidentPermissionSetWithResponse call
func ParseCreateIncidentPermissionSetResponse(rsp *http.Response) (*CreateIncidentPermissionSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentPermissionSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentPermissionSetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteIncidentPermissionSetResponse parses an HTTP response from a DeleteIncidentPermissionSetWithResponse call
func ParseDeleteIncidentPermissionSetResponse(rsp *http.Response) (*DeleteIncidentPermissionSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentPermissionSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentPermissionSetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetIncidentPermissionSetResponse parses an HTTP response from a GetIncidentPermissionSetWithResponse call
func ParseGetIncidentPermissionSetResponse(rsp *http.Response) (*GetIncidentPermissionSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentPermissionSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentPermissionSetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateIncidentPermissionSetResponse parses an HTTP response from a UpdateIncidentPermissionSetWithResponse call
func ParseUpdateIncidentPermissionSetResponse(rsp *http.Response) (*UpdateIncidentPermissionSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentPermissionSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentPermissionSetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListIncidentPermissionSetBooleansResponse parses an HTTP response from a ListIncidentPermissionSetBooleansWithResponse call
func ParseListIncidentPermissionSetBooleansResponse(rsp *http.Response) (*ListIncidentPermissionSetBooleansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentPermissionSetBooleansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentPermissionSetBooleanList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncidentPermissionSetBooleanResponse parses an HTTP response from a CreateIncidentPermissionSetBooleanWithResponse call
func ParseCreateIncidentPermissionSetBooleanResponse(rsp *http.Response) (*CreateIncidentPermissionSetBooleanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentPermissionSetBooleanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentPermissionSetBooleanResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListIncidentPermissionSetResourcesResponse parses an HTTP response from a ListIncidentPermissionSetResourcesWithResponse call
func ParseListIncidentPermissionSetResourcesResponse(rsp *http.Response) (*ListIncidentPermissionSetResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentPermissionSetResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentPermissionSetResourceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncidentPermissionSetResourceResponse parses an HTTP response from a CreateIncidentPermissionSetResourceWithResponse call
func ParseCreateIncidentPermissionSetResourceResponse(rsp *http.Response) (*CreateIncidentPermissionSetResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentPermissionSetResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentPermissionSetResourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseGetIncidentRetrospectiveStepResponse parses an HTTP response from a GetIncidentRetrospectiveStepWithResponse call
func ParseGetIncidentRetrospectiveStepResponse(rsp *http.Response) (*GetIncidentRetrospectiveStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentRetrospectiveStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentRetrospectiveStepResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateIncidentRetrospectiveStepResponse parses an HTTP response from a UpdateIncidentRetrospectiveStepWithResponse call
func ParseUpdateIncidentRetrospectiveStepResponse(rsp *http.Response) (*UpdateIncidentRetrospectiveStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentRetrospectiveStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentRetrospectiveStepResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteIncidentRoleTaskResponse parses an HTTP response from a DeleteIncidentRoleTaskWithResponse call
func ParseDeleteIncidentRoleTaskResponse(rsp *http.Response) (*DeleteIncidentRoleTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentRoleTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentRoleTaskResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetIncidentRoleTaskResponse parses an HTTP response from a GetIncidentRoleTaskWithResponse call
func ParseGetIncidentRoleTaskResponse(rsp *http.Response) (*GetIncidentRoleTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentRoleTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentRoleTaskResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateIncidentRoleTaskResponse parses an HTTP response from a UpdateIncidentRoleTaskWithResponse call
func ParseUpdateIncidentRoleTaskResponse(rsp *http.Response) (*UpdateIncidentRoleTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentRoleTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentRoleTaskResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListIncidentRolesResponse parses an HTTP response from a ListIncidentRolesWithResponse call
func ParseListIncidentRolesResponse(rsp *http.Response) (*ListIncidentRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentRoleList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncidentRoleResponse parses an HTTP response from a CreateIncidentRoleWithResponse call
func ParseCreateIncidentRoleResponse(rsp *http.Response) (*CreateIncidentRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteIncidentRoleResponse parses an HTTP response from a DeleteIncidentRoleWithResponse call
func ParseDeleteIncidentRoleResponse(rsp *http.Response) (*DeleteIncidentRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetIncidentRoleResponse parses an HTTP response from a GetIncidentRoleWithResponse call
func ParseGetIncidentRoleResponse(rsp *http.Response) (*GetIncidentRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateIncidentRoleResponse parses an HTTP response from a UpdateIncidentRoleWithResponse call
func ParseUpdateIncidentRoleResponse(rsp *http.Response) (*UpdateIncidentRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListIncidentRoleTasksResponse parses an HTTP response from a ListIncidentRoleTasksWithResponse call
func ParseListIncidentRoleTasksResponse(rsp *http.Response) (*ListIncidentRoleTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentRoleTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentRoleTaskList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncidentRoleTaskResponse parses an HTTP response from a CreateIncidentRoleTaskWithResponse call
func ParseCreateIncidentRoleTaskResponse(rsp *http.Response) (*CreateIncidentRoleTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentRoleTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentRoleTaskResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteIncidentSubStatusResponse parses an HTTP response from a DeleteIncidentSubStatusWithResponse call
func ParseDeleteIncidentSubStatusResponse(rsp *http.Response) (*DeleteIncidentSubStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentSubStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentSubStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetIncidentSubStatusResponse parses an HTTP response from a GetIncidentSubStatusWithResponse call
func ParseGetIncidentSubStatusResponse(rsp *http.Response) (*GetIncidentSubStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentSubStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentSubStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseUpdateIncidentSubStatusResponse parses an HTTP response from a UpdateIncidentSubStatusWithResponse call
func ParseUpdateIncidentSubStatusResponse(rsp *http.Response) (*UpdateIncidentSubStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentSubStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentSubStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseListIncidentTypesResponse parses an HTTP response from a ListIncidentTypesWithResponse call
func ParseListIncidentTypesResponse(rsp *http.Response) (*ListIncidentTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncidentTypeResponse parses an HTTP response from a CreateIncidentTypeWithResponse call
func ParseCreateIncidentTypeResponse(rsp *http.Response) (*CreateIncidentTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteIncidentTypeResponse parses an HTTP response from a DeleteIncidentTypeWithResponse call
func ParseDeleteIncidentTypeResponse(rsp *http.Response) (*DeleteIncidentTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetIncidentTypeResponse parses an HTTP response from a GetIncidentTypeWithResponse call
func ParseGetIncidentTypeResponse(rsp *http.Response) (*GetIncidentTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateIncidentTypeResponse parses an HTTP response from a UpdateIncidentTypeWithResponse call
func ParseUpdateIncidentTypeResponse(rsp *http.Response) (*UpdateIncidentTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListIncidentsResponse parses an HTTP response from a ListIncidentsWithResponse call
func ParseListIncidentsResponse(rsp *http.Response) (*ListIncidentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncidentResponse parses an HTTP response from a CreateIncidentWithResponse call
func ParseCreateIncidentResponse(rsp *http.Response) (*CreateIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteIncidentResponse parses an HTTP response from a DeleteIncidentWithResponse call
func ParseDeleteIncidentResponse(rsp *http.Response) (*DeleteIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetIncidentResponse parses an HTTP response from a GetIncidentWithResponse call
func ParseGetIncidentResponse(rsp *http.Response) (*GetIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateIncidentResponse parses an HTTP response from a UpdateIncidentWithResponse call
func ParseUpdateIncidentResponse(rsp *http.Response) (*UpdateIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseAddSubscribersToIncidentResponse parses an HTTP response from a AddSubscribersToIncidentWithResponse call
func ParseAddSubscribersToIncidentResponse(rsp *http.Response) (*AddSubscribersToIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddSubscribersToIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseAssignUserToIncidentResponse parses an HTTP response from a AssignUserToIncidentWithResponse call
func ParseAssignUserToIncidentResponse(rsp *http.Response) (*AssignUserToIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssignUserToIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseCancelIncidentResponse parses an HTTP response from a CancelIncidentWithResponse call
func ParseCancelIncidentResponse(rsp *http.Response) (*CancelIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseMarkAsDuplicateIncidentResponse parses an HTTP response from a MarkAsDuplicateIncidentWithResponse call
func ParseMarkAsDuplicateIncidentResponse(rsp *http.Response) (*MarkAsDuplicateIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarkAsDuplicateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseTriageIncidentResponse parses an HTTP response from a TriageIncidentWithResponse call
func ParseTriageIncidentResponse(rsp *http.Response) (*TriageIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TriageIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseMitigateIncidentResponse parses an HTTP response from a MitigateIncidentWithResponse call
func ParseMitigateIncidentResponse(rsp *http.Response) (*MitigateIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MitigateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseRemoveSubscribersToIncidentResponse parses an HTTP response from a RemoveSubscribersToIncidentWithResponse call
func ParseRemoveSubscribersToIncidentResponse(rsp *http.Response) (*RemoveSubscribersToIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveSubscribersToIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseResolveIncidentResponse parses an HTTP response from a ResolveIncidentWithResponse call
func ParseResolveIncidentResponse(rsp *http.Response) (*ResolveIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResolveIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseRestartIncidentResponse parses an HTTP response from a RestartIncidentWithResponse call
func ParseRestartIncidentResponse(rsp *http.Response) (*RestartIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestartIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseRemoveAssignedUserFromIncidentResponse parses an HTTP response from a RemoveAssignedUserFromIncidentWithResponse call
func ParseRemoveAssignedUserFromIncidentResponse(rsp *http.Response) (*RemoveAssignedUserFromIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveAssignedUserFromIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListIncidentActionItemsResponse parses an HTTP response from a ListIncidentActionItemsWithResponse call
func ParseListIncidentActionItemsResponse(rsp *http.Response) (*ListIncidentActionItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentActionItemList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncidentActionItemResponse parses an HTTP response from a CreateIncidentActionItemWithResponse call
func ParseCreateIncidentActionItemResponse(rsp *http.Response) (*CreateIncidentActionItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentActionItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListIncidentAlertsResponse parses an HTTP response from a ListIncidentAlertsWithResponse call
func ParseListIncidentAlertsResponse(rsp *http.Response) (*ListIncidentAlertsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseAttachAlertResponse parses an HTTP response from a AttachAlertWithResponse call
func ParseAttachAlertResponse(rsp *http.Response) (*AttachAlertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AttachAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	}

	return response, nil
}

// ParseListIncidentCustomFieldSelectionsResponse parses an HTTP response from a ListIncidentCustomFieldSelectionsWithResponse call
func ParseListIncidentCustomFieldSelectionsResponse(rsp *http.Response) (*ListIncidentCustomFieldSelectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentCustomFieldSelectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentCustomFieldSelectionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncidentCustomFieldSelectionResponse parses an HTTP response from a CreateIncidentCustomFieldSelectionWithResponse call
func ParseCreateIncidentCustomFieldSelectionResponse(rsp *http.Response) (*CreateIncidentCustomFieldSelectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentCustomFieldSelectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListIncidentEventsResponse parses an HTTP response from a ListIncidentEventsWithResponse call
func ParseListIncidentEventsResponse(rsp *http.Response) (*ListIncidentEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentEventList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncidentEventResponse parses an HTTP response from a CreateIncidentEventWithResponse call
func ParseCreateIncidentEventResponse(rsp *http.Response) (*CreateIncidentEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListIncidentFeedbacksResponse parses an HTTP response from a ListIncidentFeedbacksWithResponse call
func ParseListIncidentFeedbacksResponse(rsp *http.Response) (*ListIncidentFeedbacksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentFeedbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentFeedbackList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncidentFeedbackResponse parses an HTTP response from a CreateIncidentFeedbackWithResponse call
func ParseCreateIncidentFeedbackResponse(rsp *http.Response) (*CreateIncidentFeedbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentFeedbackResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListIncidentFormFieldSelectionsResponse parses an HTTP response from a ListIncidentFormFieldSelectionsWithResponse call
func ParseListIncidentFormFieldSelectionsResponse(rsp *http.Response) (*ListIncidentFormFieldSelectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentFormFieldSelectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentFormFieldSelectionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncidentFormFieldSelectionResponse parses an HTTP response from a CreateIncidentFormFieldSelectionWithResponse call
func ParseCreateIncidentFormFieldSelectionResponse(rsp *http.Response) (*CreateIncidentFormFieldSelectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentFormFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentFormFieldSelectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListIncidentStatusPagesResponse parses an HTTP response from a ListIncidentStatusPagesWithResponse call
func ParseListIncidentStatusPagesResponse(rsp *http.Response) (*ListIncidentStatusPagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentStatusPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentStatusPageEventList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncidentStatusPageResponse parses an HTTP response from a CreateIncidentStatusPageWithResponse call
func ParseCreateIncidentStatusPageResponse(rsp *http.Response) (*CreateIncidentStatusPageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentStatusPageEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListIncidentSubStatusesResponse parses an HTTP response from a ListIncidentSubStatusesWithResponse call
func ParseListIncidentSubStatusesResponse(rsp *http.Response) (*ListIncidentSubStatusesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentSubStatusesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentSubStatusList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncidentSubStatusResponse parses an HTTP response from a CreateIncidentSubStatusWithResponse call
func ParseCreateIncidentSubStatusResponse(rsp *http.Response) (*CreateIncidentSubStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentSubStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentSubStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	}

	return response, nil
}

// ParseGetIpRangesResponse parses an HTTP response from a GetIpRangesWithResponse call
func ParseGetIpRangesResponse(rsp *http.Response) (*GetIpRangesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIpRangesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IpRangesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseListLiveCallRoutersResponse parses an HTTP response from a ListLiveCallRoutersWithResponse call
func ParseListLiveCallRoutersResponse(rsp *http.Response) (*ListLiveCallRoutersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListLiveCallRoutersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LiveCallRouterList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateLiveCallRouterResponse parses an HTTP response from a CreateLiveCallRouterWithResponse call
func ParseCreateLiveCallRouterResponse(rsp *http.Response) (*CreateLiveCallRouterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateLiveCallRouterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LiveCallRouterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseGeneratePhoneNumberLiveCallRouterResponse parses an HTTP response from a GeneratePhoneNumberLiveCallRouterWithResponse call
func ParseGeneratePhoneNumberLiveCallRouterResponse(rsp *http.Response) (*GeneratePhoneNumberLiveCallRouterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GeneratePhoneNumberLiveCallRouterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteLiveCallRouterResponse parses an HTTP response from a DeleteLiveCallRouterWithResponse call
func ParseDeleteLiveCallRouterResponse(rsp *http.Response) (*DeleteLiveCallRouterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLiveCallRouterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LiveCallRouterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetLiveCallRouterResponse parses an HTTP response from a GetLiveCallRouterWithResponse call
func ParseGetLiveCallRouterResponse(rsp *http.Response) (*GetLiveCallRouterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLiveCallRouterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LiveCallRouterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateLiveCallRouterResponse parses an HTTP response from a UpdateLiveCallRouterWithResponse call
func ParseUpdateLiveCallRouterResponse(rsp *http.Response) (*UpdateLiveCallRouterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateLiveCallRouterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LiveCallRouterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteUserNotificationRuleResponse parses an HTTP response from a DeleteUserNotificationRuleWithResponse call
func ParseDeleteUserNotificationRuleResponse(rsp *http.Response) (*DeleteUserNotificationRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserNotificationRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserNotificationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetUserNotificationRuleResponse parses an HTTP response from a GetUserNotificationRuleWithResponse call
func ParseGetUserNotificationRuleResponse(rsp *http.Response) (*GetUserNotificationRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserNotificationRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserNotificationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateUserNotificationRuleResponse parses an HTTP response from a UpdateUserNotificationRuleWithResponse call
func ParseUpdateUserNotificationRuleResponse(rsp *http.Response) (*UpdateUserNotificationRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserNotificationRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserNotificationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListOnCallRolesResponse parses an HTTP response from a ListOnCallRolesWithResponse call
func ParseListOnCallRolesResponse(rsp *http.Response) (*ListOnCallRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOnCallRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnCallRoleList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateOnCallRoleResponse parses an HTTP response from a CreateOnCallRoleWithResponse call
func ParseCreateOnCallRoleResponse(rsp *http.Response) (*CreateOnCallRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOnCallRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OnCallRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteOnCallRoleResponse parses an HTTP response from a DeleteOnCallRoleWithResponse call
func ParseDeleteOnCallRoleResponse(rsp *http.Response) (*DeleteOnCallRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOnCallRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnCallRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetOnCallRoleResponse parses an HTTP response from a GetOnCallRoleWithResponse call
func ParseGetOnCallRoleResponse(rsp *http.Response) (*GetOnCallRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOnCallRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnCallRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateOnCallRoleResponse parses an HTTP response from a UpdateOnCallRoleWithResponse call
func ParseUpdateOnCallRoleResponse(rsp *http.Response) (*UpdateOnCallRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOnCallRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnCallRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteOnCallShadowResponse parses an HTTP response from a DeleteOnCallShadowWithResponse call
func ParseDeleteOnCallShadowResponse(rsp *http.Response) (*DeleteOnCallShadowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOnCallShadowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnCallShadowResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetOnCallShadowResponse parses an HTTP response from a GetOnCallShadowWithResponse call
func ParseGetOnCallShadowResponse(rsp *http.Response) (*GetOnCallShadowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOnCallShadowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnCallShadowResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateOnCallShadowResponse parses an HTTP response from a UpdateOnCallShadowWithResponse call
func ParseUpdateOnCallShadowResponse(rsp *http.Response) (*UpdateOnCallShadowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOnCallShadowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnCallShadowResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteOverrideShiftResponse parses an HTTP response from a DeleteOverrideShiftWithResponse call
func ParseDeleteOverrideShiftResponse(rsp *http.Response) (*DeleteOverrideShiftResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOverrideShiftResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OverrideShiftResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetOverrideShiftResponse parses an HTTP response from a GetOverrideShiftWithResponse call
func ParseGetOverrideShiftResponse(rsp *http.Response) (*GetOverrideShiftResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOverrideShiftResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OverrideShiftResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateOverrideShiftResponse parses an HTTP response from a UpdateOverrideShiftWithResponse call
func ParseUpdateOverrideShiftResponse(rsp *http.Response) (*UpdateOverrideShiftResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOverrideShiftResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OverrideShiftResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeletePlaybookTaskResponse parses an HTTP response from a DeletePlaybookTaskWithResponse call
func ParseDeletePlaybookTaskResponse(rsp *http.Response) (*DeletePlaybookTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlaybookTaskResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetPlaybookTaskResponse parses an HTTP response from a GetPlaybookTaskWithResponse call
func ParseGetPlaybookTaskResponse(rsp *http.Response) (*GetPlaybookTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlaybookTaskResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdatePlaybookTaskResponse parses an HTTP response from a UpdatePlaybookTaskWithResponse call
func ParseUpdatePlaybookTaskResponse(rsp *http.Response) (*UpdatePlaybookTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlaybookTaskResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListPlaybooksResponse parses an HTTP response from a ListPlaybooksWithResponse call
func ParseListPlaybooksResponse(rsp *http.Response) (*ListPlaybooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPlaybooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlaybookList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreatePlaybookResponse parses an HTTP response from a CreatePlaybookWithResponse call
func ParseCreatePlaybookResponse(rsp *http.Response) (*CreatePlaybookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PlaybookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeletePlaybookResponse parses an HTTP response from a DeletePlaybookWithResponse call
func ParseDeletePlaybookResponse(rsp *http.Response) (*DeletePlaybookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlaybookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetPlaybookResponse parses an HTTP response from a GetPlaybookWithResponse call
func ParseGetPlaybookResponse(rsp *http.Response) (*GetPlaybookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlaybookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdatePlaybookResponse parses an HTTP response from a UpdatePlaybookWithResponse call
func ParseUpdatePlaybookResponse(rsp *http.Response) (*UpdatePlaybookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlaybookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListPlaybookTasksResponse parses an HTTP response from a ListPlaybookTasksWithResponse call
func ParseListPlaybookTasksResponse(rsp *http.Response) (*ListPlaybookTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPlaybookTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlaybookTaskList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreatePlaybookTaskResponse parses an HTTP response from a CreatePlaybookTaskWithResponse call
func ParseCreatePlaybookTaskResponse(rsp *http.Response) (*CreatePlaybookTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PlaybookTaskResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListPostmortemTemplatesResponse parses an HTTP response from a ListPostmortemTemplatesWithResponse call
func ParseListPostmortemTemplatesResponse(rsp *http.Response) (*ListPostmortemTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPostmortemTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostMortemTemplateList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreatePostmortemTemplateResponse parses an HTTP response from a CreatePostmortemTemplateWithResponse call
func ParseCreatePostmortemTemplateResponse(rsp *http.Response) (*CreatePostmortemTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostMortemTemplateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeletePostmortemTemplateResponse parses an HTTP response from a DeletePostmortemTemplateWithResponse call
func ParseDeletePostmortemTemplateResponse(rsp *http.Response) (*DeletePostmortemTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostMortemTemplateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetPostmortemTemplateResponse parses an HTTP response from a GetPostmortemTemplateWithResponse call
func ParseGetPostmortemTemplateResponse(rsp *http.Response) (*GetPostmortemTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostMortemTemplateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdatePostmortemTemplateResponse parses an HTTP response from a UpdatePostmortemTemplateWithResponse call
func ParseUpdatePostmortemTemplateResponse(rsp *http.Response) (*UpdatePostmortemTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostMortemTemplateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListIncidentPostMortemsResponse parses an HTTP response from a ListIncidentPostMortemsWithResponse call
func ParseListIncidentPostMortemsResponse(rsp *http.Response) (*ListIncidentPostMortemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentPostMortemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentPostMortemList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseListIncidentPostmortemResponse parses an HTTP response from a ListIncidentPostmortemWithResponse call
func ParseListIncidentPostmortemResponse(rsp *http.Response) (*ListIncidentPostmortemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentPostmortemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentPostMortemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateIncidentPostmortemResponse parses an HTTP response from a UpdateIncidentPostmortemWithResponse call
func ParseUpdateIncidentPostmortemResponse(rsp *http.Response) (*UpdateIncidentPostmortemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentPostmortemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentPostMortemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListPulsesResponse parses an HTTP response from a ListPulsesWithResponse call
func ParseListPulsesResponse(rsp *http.Response) (*ListPulsesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPulsesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PulseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreatePulseResponse parses an HTTP response from a CreatePulseWithResponse call
func ParseCreatePulseResponse(rsp *http.Response) (*CreatePulseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PulseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseGetPulseResponse parses an HTTP response from a GetPulseWithResponse call
func ParseGetPulseResponse(rsp *http.Response) (*GetPulseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PulseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdatePulseResponse parses an HTTP response from a UpdatePulseWithResponse call
func ParseUpdatePulseResponse(rsp *http.Response) (*UpdatePulseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PulseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListRetrospectiveConfigurationsResponse parses an HTTP response from a ListRetrospectiveConfigurationsWithResponse call
func ParseListRetrospectiveConfigurationsResponse(rsp *http.Response) (*ListRetrospectiveConfigurationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRetrospectiveConfigurationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrospectiveConfigurationList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseGetRetrospectiveConfigurationResponse parses an HTTP response from a GetRetrospectiveConfigurationWithResponse call
func ParseGetRetrospectiveConfigurationResponse(rsp *http.Response) (*GetRetrospectiveConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRetrospectiveConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrospectiveConfigurationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateRetrospectiveConfigurationResponse parses an HTTP response from a UpdateRetrospectiveConfigurationWithResponse call
func ParseUpdateRetrospectiveConfigurationResponse(rsp *http.Response) (*UpdateRetrospectiveConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRetrospectiveConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrospectiveConfigurationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRetrospectiveProcessGroupStepResponse parses an HTTP response from a DeleteRetrospectiveProcessGroupStepWithResponse call
func ParseDeleteRetrospectiveProcessGroupStepResponse(rsp *http.Response) (*DeleteRetrospectiveProcessGroupStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRetrospectiveProcessGroupStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrospectiveProcessGroupStepResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetRetrospectiveProcessGroupStepResponse parses an HTTP response from a GetRetrospectiveProcessGroupStepWithResponse call
func ParseGetRetrospectiveProcessGroupStepResponse(rsp *http.Response) (*GetRetrospectiveProcessGroupStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRetrospectiveProcessGroupStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrospectiveProcessGroupStepResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseUpdateRetrospectiveProcessGroupStepResponse parses an HTTP response from a UpdateRetrospectiveProcessGroupStepWithResponse call
func ParseUpdateRetrospectiveProcessGroupStepResponse(rsp *http.Response) (*UpdateRetrospectiveProcessGroupStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRetrospectiveProcessGroupStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrospectiveProcessGroupStepResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRetrospectiveProcessGroupResponse parses an HTTP response from a DeleteRetrospectiveProcessGroupWithResponse call
func ParseDeleteRetrospectiveProcessGroupResponse(rsp *http.Response) (*DeleteRetrospectiveProcessGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRetrospectiveProcessGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrospectiveProcessGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetRetrospectiveProcessGroupResponse parses an HTTP response from a GetRetrospectiveProcessGroupWithResponse call
func ParseGetRetrospectiveProcessGroupResponse(rsp *http.Response) (*GetRetrospectiveProcessGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRetrospectiveProcessGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrospectiveProcessGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseUpdateRetrospectiveProcessGroupResponse parses an HTTP response from a UpdateRetrospectiveProcessGroupWithResponse call
func ParseUpdateRetrospectiveProcessGroupResponse(rsp *http.Response) (*UpdateRetrospectiveProcessGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRetrospectiveProcessGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrospectiveProcessGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseListRetrospectiveProcessGroupStepsResponse parses an HTTP response from a ListRetrospectiveProcessGroupStepsWithResponse call
func ParseListRetrospectiveProcessGroupStepsResponse(rsp *http.Response) (*ListRetrospectiveProcessGroupStepsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRetrospectiveProcessGroupStepsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrospectiveProcessGroupStepList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateRetrospectiveProcessGroupStepResponse parses an HTTP response from a CreateRetrospectiveProcessGroupStepWithResponse call
func ParseCreateRetrospectiveProcessGroupStepResponse(rsp *http.Response) (*CreateRetrospectiveProcessGroupStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRetrospectiveProcessGroupStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RetrospectiveProcessGroupStepResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	}

	return response, nil
}

// ParseListRetrospectiveProcessesResponse parses an HTTP response from a ListRetrospectiveProcessesWithResponse call
func ParseListRetrospectiveProcessesResponse(rsp *http.Response) (*ListRetrospectiveProcessesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRetrospectiveProcessesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrospectiveProcessList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateRetrospectiveProcessResponse parses an HTTP response from a CreateRetrospectiveProcessWithResponse call
func ParseCreateRetrospectiveProcessResponse(rsp *http.Response) (*CreateRetrospectiveProcessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRetrospectiveProcessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RetrospectiveProcessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteRetrospectiveProcessResponse parses an HTTP response from a DeleteRetrospectiveProcessWithResponse call
func ParseDeleteRetrospectiveProcessResponse(rsp *http.Response) (*DeleteRetrospectiveProcessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRetrospectiveProcessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrospectiveProcessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetRetrospectiveProcessResponse parses an HTTP response from a GetRetrospectiveProcessWithResponse call
func ParseGetRetrospectiveProcessResponse(rsp *http.Response) (*GetRetrospectiveProcessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRetrospectiveProcessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrospectiveProcessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateRetrospectiveProcessResponse parses an HTTP response from a UpdateRetrospectiveProcessWithResponse call
func ParseUpdateRetrospectiveProcessResponse(rsp *http.Response) (*UpdateRetrospectiveProcessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRetrospectiveProcessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrospectiveProcessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListRetrospectiveProcessGroupsResponse parses an HTTP response from a ListRetrospectiveProcessGroupsWithResponse call
func ParseListRetrospectiveProcessGroupsResponse(rsp *http.Response) (*ListRetrospectiveProcessGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRetrospectiveProcessGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrospectiveProcessGroupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateRetrospectiveProcessGroupResponse parses an HTTP response from a CreateRetrospectiveProcessGroupWithResponse call
func ParseCreateRetrospectiveProcessGroupResponse(rsp *http.Response) (*CreateRetrospectiveProcessGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRetrospectiveProcessGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RetrospectiveProcessGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	}

	return response, nil
}

// ParseListRetrospectiveStepsResponse parses an HTTP response from a ListRetrospectiveStepsWithResponse call
func ParseListRetrospectiveStepsResponse(rsp *http.Response) (*ListRetrospectiveStepsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRetrospectiveStepsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrospectiveStepList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateRetrospectiveStepResponse parses an HTTP response from a CreateRetrospectiveStepWithResponse call
func ParseCreateRetrospectiveStepResponse(rsp *http.Response) (*CreateRetrospectiveStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRetrospectiveStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RetrospectiveStepResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteRetrospectiveStepResponse parses an HTTP response from a DeleteRetrospectiveStepWithResponse call
func ParseDeleteRetrospectiveStepResponse(rsp *http.Response) (*DeleteRetrospectiveStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRetrospectiveStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrospectiveStepResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetRetrospectiveStepResponse parses an HTTP response from a GetRetrospectiveStepWithResponse call
func ParseGetRetrospectiveStepResponse(rsp *http.Response) (*GetRetrospectiveStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRetrospectiveStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrospectiveStepResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateRetrospectiveStepResponse parses an HTTP response from a UpdateRetrospectiveStepWithResponse call
func ParseUpdateRetrospectiveStepResponse(rsp *http.Response) (*UpdateRetrospectiveStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRetrospectiveStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrospectiveStepResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListRolesResponse parses an HTTP response from a ListRolesWithResponse call
func ParseListRolesResponse(rsp *http.Response) (*ListRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateRoleResponse parses an HTTP response from a CreateRoleWithResponse call
func ParseCreateRoleResponse(rsp *http.Response) (*CreateRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteRoleResponse parses an HTTP response from a DeleteRoleWithResponse call
func ParseDeleteRoleResponse(rsp *http.Response) (*DeleteRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetRoleResponse parses an HTTP response from a GetRoleWithResponse call
func ParseGetRoleResponse(rsp *http.Response) (*GetRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateRoleResponse parses an HTTP response from a UpdateRoleWithResponse call
func ParseUpdateRoleResponse(rsp *http.Response) (*UpdateRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteScheduleRotationActiveDayResponse parses an HTTP response from a DeleteScheduleRotationActiveDayWithResponse call
func ParseDeleteScheduleRotationActiveDayResponse(rsp *http.Response) (*DeleteScheduleRotationActiveDayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteScheduleRotationActiveDayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduleRotationActiveDayResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetScheduleRotationActiveDayResponse parses an HTTP response from a GetScheduleRotationActiveDayWithResponse call
func ParseGetScheduleRotationActiveDayResponse(rsp *http.Response) (*GetScheduleRotationActiveDayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScheduleRotationActiveDayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduleRotationActiveDayResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateScheduleRotationActiveDayResponse parses an HTTP response from a UpdateScheduleRotationActiveDayWithResponse call
func ParseUpdateScheduleRotationActiveDayResponse(rsp *http.Response) (*UpdateScheduleRotationActiveDayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateScheduleRotationActiveDayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduleRotationActiveDayResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteScheduleRotationUserResponse parses an HTTP response from a DeleteScheduleRotationUserWithResponse call
func ParseDeleteScheduleRotationUserResponse(rsp *http.Response) (*DeleteScheduleRotationUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteScheduleRotationUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduleRotationUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetScheduleRotationUserResponse parses an HTTP response from a GetScheduleRotationUserWithResponse call
func ParseGetScheduleRotationUserResponse(rsp *http.Response) (*GetScheduleRotationUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScheduleRotationUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduleRotationUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateScheduleRotationUserResponse parses an HTTP response from a UpdateScheduleRotationUserWithResponse call
func ParseUpdateScheduleRotationUserResponse(rsp *http.Response) (*UpdateScheduleRotationUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateScheduleRotationUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduleRotationUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteScheduleRotationResponse parses an HTTP response from a DeleteScheduleRotationWithResponse call
func ParseDeleteScheduleRotationResponse(rsp *http.Response) (*DeleteScheduleRotationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteScheduleRotationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduleRotationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetScheduleRotationResponse parses an HTTP response from a GetScheduleRotationWithResponse call
func ParseGetScheduleRotationResponse(rsp *http.Response) (*GetScheduleRotationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScheduleRotationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduleRotationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateScheduleRotationResponse parses an HTTP response from a UpdateScheduleRotationWithResponse call
func ParseUpdateScheduleRotationResponse(rsp *http.Response) (*UpdateScheduleRotationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateScheduleRotationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduleRotationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListScheduleRotationActiveDaysResponse parses an HTTP response from a ListScheduleRotationActiveDaysWithResponse call
func ParseListScheduleRotationActiveDaysResponse(rsp *http.Response) (*ListScheduleRotationActiveDaysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListScheduleRotationActiveDaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduleRotationActiveDayList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateScheduleRotationActiveDayResponse parses an HTTP response from a CreateScheduleRotationActiveDayWithResponse call
func ParseCreateScheduleRotationActiveDayResponse(rsp *http.Response) (*CreateScheduleRotationActiveDayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateScheduleRotationActiveDayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ScheduleRotationActiveDayResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListScheduleRotationUsersResponse parses an HTTP response from a ListScheduleRotationUsersWithResponse call
func ParseListScheduleRotationUsersResponse(rsp *http.Response) (*ListScheduleRotationUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListScheduleRotationUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduleRotationUserList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateScheduleRotationUserResponse parses an HTTP response from a CreateScheduleRotationUserWithResponse call
func ParseCreateScheduleRotationUserResponse(rsp *http.Response) (*CreateScheduleRotationUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateScheduleRotationUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ScheduleRotationUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListSchedulesResponse parses an HTTP response from a ListSchedulesWithResponse call
func ParseListSchedulesResponse(rsp *http.Response) (*ListSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduleList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateScheduleResponse parses an HTTP response from a CreateScheduleWithResponse call
func ParseCreateScheduleResponse(rsp *http.Response) (*CreateScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteScheduleResponse parses an HTTP response from a DeleteScheduleWithResponse call
func ParseDeleteScheduleResponse(rsp *http.Response) (*DeleteScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetScheduleResponse parses an HTTP response from a GetScheduleWithResponse call
func ParseGetScheduleResponse(rsp *http.Response) (*GetScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateScheduleResponse parses an HTTP response from a UpdateScheduleWithResponse call
func ParseUpdateScheduleResponse(rsp *http.Response) (*UpdateScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetScheduleShiftsResponse parses an HTTP response from a GetScheduleShiftsWithResponse call
func ParseGetScheduleShiftsResponse(rsp *http.Response) (*GetScheduleShiftsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScheduleShiftsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShiftList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListOnCallShadowsResponse parses an HTTP response from a ListOnCallShadowsWithResponse call
func ParseListOnCallShadowsResponse(rsp *http.Response) (*ListOnCallShadowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOnCallShadowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnCallShadowsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateOnCallShadowResponse parses an HTTP response from a CreateOnCallShadowWithResponse call
func ParseCreateOnCallShadowResponse(rsp *http.Response) (*CreateOnCallShadowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOnCallShadowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OnCallShadowResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListOverrideShiftsResponse parses an HTTP response from a ListOverrideShiftsWithResponse call
func ParseListOverrideShiftsResponse(rsp *http.Response) (*ListOverrideShiftsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOverrideShiftsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OverrideShiftList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateOverrideShiftResponse parses an HTTP response from a CreateOverrideShiftWithResponse call
func ParseCreateOverrideShiftResponse(rsp *http.Response) (*CreateOverrideShiftResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOverrideShiftResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OverrideShiftResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListScheduleRotationsResponse parses an HTTP response from a ListScheduleRotationsWithResponse call
func ParseListScheduleRotationsResponse(rsp *http.Response) (*ListScheduleRotationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListScheduleRotationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduleRotationList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateScheduleRotationResponse parses an HTTP response from a CreateScheduleRotationWithResponse call
func ParseCreateScheduleRotationResponse(rsp *http.Response) (*CreateScheduleRotationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateScheduleRotationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ScheduleRotationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListSecretsResponse parses an HTTP response from a ListSecretsWithResponse call
func ParseListSecretsResponse(rsp *http.Response) (*ListSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateSecretResponse parses an HTTP response from a CreateSecretWithResponse call
func ParseCreateSecretResponse(rsp *http.Response) (*CreateSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SecretResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteSecretResponse parses an HTTP response from a DeleteSecretWithResponse call
func ParseDeleteSecretResponse(rsp *http.Response) (*DeleteSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetSecretResponse parses an HTTP response from a GetSecretWithResponse call
func ParseGetSecretResponse(rsp *http.Response) (*GetSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateSecretResponse parses an HTTP response from a UpdateSecretWithResponse call
func ParseUpdateSecretResponse(rsp *http.Response) (*UpdateSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListServicesResponse parses an HTTP response from a ListServicesWithResponse call
func ParseListServicesResponse(rsp *http.Response) (*ListServicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateServiceResponse parses an HTTP response from a CreateServiceWithResponse call
func ParseCreateServiceResponse(rsp *http.Response) (*CreateServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ServiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteServiceResponse parses an HTTP response from a DeleteServiceWithResponse call
func ParseDeleteServiceResponse(rsp *http.Response) (*DeleteServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetServiceResponse parses an HTTP response from a GetServiceWithResponse call
func ParseGetServiceResponse(rsp *http.Response) (*GetServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateServiceResponse parses an HTTP response from a UpdateServiceWithResponse call
func ParseUpdateServiceResponse(rsp *http.Response) (*UpdateServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetServiceIncidentsChartResponse parses an HTTP response from a GetServiceIncidentsChartWithResponse call
func ParseGetServiceIncidentsChartResponse(rsp *http.Response) (*GetServiceIncidentsChartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceIncidentsChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentsChartResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetServiceUptimeChartResponse parses an HTTP response from a GetServiceUptimeChartWithResponse call
func ParseGetServiceUptimeChartResponse(rsp *http.Response) (*GetServiceUptimeChartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceUptimeChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UptimeChartResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListSeveritiesResponse parses an HTTP response from a ListSeveritiesWithResponse call
func ParseListSeveritiesResponse(rsp *http.Response) (*ListSeveritiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSeveritiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SeverityList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateSeverityResponse parses an HTTP response from a CreateSeverityWithResponse call
func ParseCreateSeverityResponse(rsp *http.Response) (*CreateSeverityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SeverityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteSeverityResponse parses an HTTP response from a DeleteSeverityWithResponse call
func ParseDeleteSeverityResponse(rsp *http.Response) (*DeleteSeverityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SeverityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetSeverityResponse parses an HTTP response from a GetSeverityWithResponse call
func ParseGetSeverityResponse(rsp *http.Response) (*GetSeverityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SeverityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateSeverityResponse parses an HTTP response from a UpdateSeverityWithResponse call
func ParseUpdateSeverityResponse(rsp *http.Response) (*UpdateSeverityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SeverityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListShiftsResponse parses an HTTP response from a ListShiftsWithResponse call
func ParseListShiftsResponse(rsp *http.Response) (*ListShiftsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListShiftsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShiftList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteIncidentStatusPageResponse parses an HTTP response from a DeleteIncidentStatusPageWithResponse call
func ParseDeleteIncidentStatusPageResponse(rsp *http.Response) (*DeleteIncidentStatusPageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentStatusPageEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetIncidentStatusPagesResponse parses an HTTP response from a GetIncidentStatusPagesWithResponse call
func ParseGetIncidentStatusPagesResponse(rsp *http.Response) (*GetIncidentStatusPagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentStatusPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentStatusPageEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateIncidentStatusPageResponse parses an HTTP response from a UpdateIncidentStatusPageWithResponse call
func ParseUpdateIncidentStatusPageResponse(rsp *http.Response) (*UpdateIncidentStatusPageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentStatusPageEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListStatusPagesResponse parses an HTTP response from a ListStatusPagesWithResponse call
func ParseListStatusPagesResponse(rsp *http.Response) (*ListStatusPagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListStatusPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPageList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateStatusPageResponse parses an HTTP response from a CreateStatusPageWithResponse call
func ParseCreateStatusPageResponse(rsp *http.Response) (*CreateStatusPageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest StatusPageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteStatusPageResponse parses an HTTP response from a DeleteStatusPageWithResponse call
func ParseDeleteStatusPageResponse(rsp *http.Response) (*DeleteStatusPageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetStatusPageResponse parses an HTTP response from a GetStatusPageWithResponse call
func ParseGetStatusPageResponse(rsp *http.Response) (*GetStatusPageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateStatusPageResponse parses an HTTP response from a UpdateStatusPageWithResponse call
func ParseUpdateStatusPageResponse(rsp *http.Response) (*UpdateStatusPageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListStatusPageTemplatesResponse parses an HTTP response from a ListStatusPageTemplatesWithResponse call
func ParseListStatusPageTemplatesResponse(rsp *http.Response) (*ListStatusPageTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListStatusPageTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPageTemplateList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateStatusPageTemplateResponse parses an HTTP response from a CreateStatusPageTemplateWithResponse call
func ParseCreateStatusPageTemplateResponse(rsp *http.Response) (*CreateStatusPageTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStatusPageTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest StatusPageTemplateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListSubStatusesResponse parses an HTTP response from a ListSubStatusesWithResponse call
func ParseListSubStatusesResponse(rsp *http.Response) (*ListSubStatusesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSubStatusesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubStatusList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateSubStatusResponse parses an HTTP response from a CreateSubStatusWithResponse call
func ParseCreateSubStatusResponse(rsp *http.Response) (*CreateSubStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSubStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SubStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteSubStatusResponse parses an HTTP response from a DeleteSubStatusWithResponse call
func ParseDeleteSubStatusResponse(rsp *http.Response) (*DeleteSubStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSubStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetSubStatusResponse parses an HTTP response from a GetSubStatusWithResponse call
func ParseGetSubStatusResponse(rsp *http.Response) (*GetSubStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateSubStatusResponse parses an HTTP response from a UpdateSubStatusWithResponse call
func ParseUpdateSubStatusResponse(rsp *http.Response) (*UpdateSubStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSubStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListTeamsResponse parses an HTTP response from a ListTeamsWithResponse call
func ParseListTeamsResponse(rsp *http.Response) (*ListTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateTeamResponse parses an HTTP response from a CreateTeamWithResponse call
func ParseCreateTeamResponse(rsp *http.Response) (*CreateTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TeamResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteTeamResponse parses an HTTP response from a DeleteTeamWithResponse call
func ParseDeleteTeamResponse(rsp *http.Response) (*DeleteTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetTeamResponse parses an HTTP response from a GetTeamWithResponse call
func ParseGetTeamResponse(rsp *http.Response) (*GetTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateTeamResponse parses an HTTP response from a UpdateTeamWithResponse call
func ParseUpdateTeamResponse(rsp *http.Response) (*UpdateTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetTeamIncidentsChartResponse parses an HTTP response from a GetTeamIncidentsChartWithResponse call
func ParseGetTeamIncidentsChartResponse(rsp *http.Response) (*GetTeamIncidentsChartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamIncidentsChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentsChartResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteStatusPageTemplateResponse parses an HTTP response from a DeleteStatusPageTemplateWithResponse call
func ParseDeleteStatusPageTemplateResponse(rsp *http.Response) (*DeleteStatusPageTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStatusPageTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPageTemplateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetStatusPageTemplateResponse parses an HTTP response from a GetStatusPageTemplateWithResponse call
func ParseGetStatusPageTemplateResponse(rsp *http.Response) (*GetStatusPageTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusPageTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPageTemplateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateStatusPageTemplateResponse parses an HTTP response from a UpdateStatusPageTemplateWithResponse call
func ParseUpdateStatusPageTemplateResponse(rsp *http.Response) (*UpdateStatusPageTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateStatusPageTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPageTemplateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListUsersResponse parses an HTTP response from a ListUsersWithResponse call
func ParseListUsersResponse(rsp *http.Response) (*ListUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	}

	return response, nil
}

// ParseGetCurrentUserResponse parses an HTTP response from a GetCurrentUserWithResponse call
func ParseGetCurrentUserResponse(rsp *http.Response) (*GetCurrentUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCurrentUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	}

	return response, nil
}

// ParseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListUserNotificationRulesResponse parses an HTTP response from a ListUserNotificationRulesWithResponse call
func ParseListUserNotificationRulesResponse(rsp *http.Response) (*ListUserNotificationRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUserNotificationRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserNotificationRuleList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserNotificationRuleResponse parses an HTTP response from a CreateUserNotificationRuleWithResponse call
func ParseCreateUserNotificationRuleResponse(rsp *http.Response) (*CreateUserNotificationRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserNotificationRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserNotificationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseGetWebhooksDeliveryResponse parses an HTTP response from a GetWebhooksDeliveryWithResponse call
func ParseGetWebhooksDeliveryResponse(rsp *http.Response) (*GetWebhooksDeliveryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWebhooksDeliveryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhooksDeliveryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeliverWebhooksDeliveryResponse parses an HTTP response from a DeliverWebhooksDeliveryWithResponse call
func ParseDeliverWebhooksDeliveryResponse(rsp *http.Response) (*DeliverWebhooksDeliveryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeliverWebhooksDeliveryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhooksDeliveryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseListWebhooksEndpointsResponse parses an HTTP response from a ListWebhooksEndpointsWithResponse call
func ParseListWebhooksEndpointsResponse(rsp *http.Response) (*ListWebhooksEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWebhooksEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhooksEndpointList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateWebhooksEndpointResponse parses an HTTP response from a CreateWebhooksEndpointWithResponse call
func ParseCreateWebhooksEndpointResponse(rsp *http.Response) (*CreateWebhooksEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWebhooksEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WebhooksEndpointResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListWebhooksDeliveriesResponse parses an HTTP response from a ListWebhooksDeliveriesWithResponse call
func ParseListWebhooksDeliveriesResponse(rsp *http.Response) (*ListWebhooksDeliveriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWebhooksDeliveriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhooksDeliveryList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseDeleteWebhooksEndpointResponse parses an HTTP response from a DeleteWebhooksEndpointWithResponse call
func ParseDeleteWebhooksEndpointResponse(rsp *http.Response) (*DeleteWebhooksEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWebhooksEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhooksEndpointResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetWebhooksEndpointResponse parses an HTTP response from a GetWebhooksEndpointWithResponse call
func ParseGetWebhooksEndpointResponse(rsp *http.Response) (*GetWebhooksEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWebhooksEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhooksEndpointResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateWebhooksEndpointResponse parses an HTTP response from a UpdateWebhooksEndpointWithResponse call
func ParseUpdateWebhooksEndpointResponse(rsp *http.Response) (*UpdateWebhooksEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWebhooksEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhooksEndpointResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteWorkflowCustomFieldSelectionResponse parses an HTTP response from a DeleteWorkflowCustomFieldSelectionWithResponse call
func ParseDeleteWorkflowCustomFieldSelectionResponse(rsp *http.Response) (*DeleteWorkflowCustomFieldSelectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowCustomFieldSelectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkflowCustomFieldSelectionResponse parses an HTTP response from a GetWorkflowCustomFieldSelectionWithResponse call
func ParseGetWorkflowCustomFieldSelectionResponse(rsp *http.Response) (*GetWorkflowCustomFieldSelectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowCustomFieldSelectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateWorkflowCustomFieldSelectionResponse parses an HTTP response from a UpdateWorkflowCustomFieldSelectionWithResponse call
func ParseUpdateWorkflowCustomFieldSelectionResponse(rsp *http.Response) (*UpdateWorkflowCustomFieldSelectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkflowCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowCustomFieldSelectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteWorkflowFormFieldConditionResponse parses an HTTP response from a DeleteWorkflowFormFieldConditionWithResponse call
func ParseDeleteWorkflowFormFieldConditionResponse(rsp *http.Response) (*DeleteWorkflowFormFieldConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowFormFieldConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowFormFieldConditionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkflowFormFieldConditionResponse parses an HTTP response from a GetWorkflowFormFieldConditionWithResponse call
func ParseGetWorkflowFormFieldConditionResponse(rsp *http.Response) (*GetWorkflowFormFieldConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowFormFieldConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowFormFieldConditionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateWorkflowFormFieldConditionResponse parses an HTTP response from a UpdateWorkflowFormFieldConditionWithResponse call
func ParseUpdateWorkflowFormFieldConditionResponse(rsp *http.Response) (*UpdateWorkflowFormFieldConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkflowFormFieldConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowFormFieldConditionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListWorkflowGroupsResponse parses an HTTP response from a ListWorkflowGroupsWithResponse call
func ParseListWorkflowGroupsResponse(rsp *http.Response) (*ListWorkflowGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowGroupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateWorkflowGroupResponse parses an HTTP response from a CreateWorkflowGroupWithResponse call
func ParseCreateWorkflowGroupResponse(rsp *http.Response) (*CreateWorkflowGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkflowGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteWorkflowGroupResponse parses an HTTP response from a DeleteWorkflowGroupWithResponse call
func ParseDeleteWorkflowGroupResponse(rsp *http.Response) (*DeleteWorkflowGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkflowGroupResponse parses an HTTP response from a GetWorkflowGroupWithResponse call
func ParseGetWorkflowGroupResponse(rsp *http.Response) (*GetWorkflowGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateWorkflowGroupResponse parses an HTTP response from a UpdateWorkflowGroupWithResponse call
func ParseUpdateWorkflowGroupResponse(rsp *http.Response) (*UpdateWorkflowGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkflowGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseDeleteWorkflowTaskResponse parses an HTTP response from a DeleteWorkflowTaskWithResponse call
func ParseDeleteWorkflowTaskResponse(rsp *http.Response) (*DeleteWorkflowTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowTaskResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkflowTaskResponse parses an HTTP response from a GetWorkflowTaskWithResponse call
func ParseGetWorkflowTaskResponse(rsp *http.Response) (*GetWorkflowTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowTaskResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateWorkflowTaskResponse parses an HTTP response from a UpdateWorkflowTaskWithResponse call
func ParseUpdateWorkflowTaskResponse(rsp *http.Response) (*UpdateWorkflowTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkflowTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowTaskResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListWorkflowsResponse parses an HTTP response from a ListWorkflowsWithResponse call
func ParseListWorkflowsResponse(rsp *http.Response) (*ListWorkflowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateWorkflowResponse parses an HTTP response from a CreateWorkflowWithResponse call
func ParseCreateWorkflowResponse(rsp *http.Response) (*CreateWorkflowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkflowResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	}

	return response, nil
}

// ParseDeleteWorkflowResponse parses an HTTP response from a DeleteWorkflowWithResponse call
func ParseDeleteWorkflowResponse(rsp *http.Response) (*DeleteWorkflowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkflowResponse parses an HTTP response from a GetWorkflowWithResponse call
func ParseGetWorkflowResponse(rsp *http.Response) (*GetWorkflowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateWorkflowResponse parses an HTTP response from a UpdateWorkflowWithResponse call
func ParseUpdateWorkflowResponse(rsp *http.Response) (*UpdateWorkflowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseListWorkflowCustomFieldSelectionsResponse parses an HTTP response from a ListWorkflowCustomFieldSelectionsWithResponse call
func ParseListWorkflowCustomFieldSelectionsResponse(rsp *http.Response) (*ListWorkflowCustomFieldSelectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowCustomFieldSelectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowCustomFieldSelectionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateWorkflowCustomFieldSelectionResponse parses an HTTP response from a CreateWorkflowCustomFieldSelectionWithResponse call
func ParseCreateWorkflowCustomFieldSelectionResponse(rsp *http.Response) (*CreateWorkflowCustomFieldSelectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkflowCustomFieldSelectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	}

	return response, nil
}

// ParseListWorkflowFormFieldConditionsResponse parses an HTTP response from a ListWorkflowFormFieldConditionsWithResponse call
func ParseListWorkflowFormFieldConditionsResponse(rsp *http.Response) (*ListWorkflowFormFieldConditionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowFormFieldConditionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowFormFieldConditionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateWorkflowFormFieldConditionResponse parses an HTTP response from a CreateWorkflowFormFieldConditionWithResponse call
func ParseCreateWorkflowFormFieldConditionResponse(rsp *http.Response) (*CreateWorkflowFormFieldConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowFormFieldConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkflowFormFieldConditionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	}

	return response, nil
}

// ParseListWorkflowRunsResponse parses an HTTP response from a ListWorkflowRunsWithResponse call
func ParseListWorkflowRunsResponse(rsp *http.Response) (*ListWorkflowRunsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowRunsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowRunsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateWorkflowRunResponse parses an HTTP response from a CreateWorkflowRunWithResponse call
func ParseCreateWorkflowRunResponse(rsp *http.Response) (*CreateWorkflowRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkflowRunResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON422 = &dest

	}

	return response, nil
}

// ParseListWorkflowTasksResponse parses an HTTP response from a ListWorkflowTasksWithResponse call
func ParseListWorkflowTasksResponse(rsp *http.Response) (*ListWorkflowTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowTaskList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	}

	return response, nil
}

// ParseCreateWorkflowTaskResponse parses an HTTP response from a CreateWorkflowTaskWithResponse call
func ParseCreateWorkflowTaskResponse(rsp *http.Response) (*CreateWorkflowTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkflowTaskResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON401 = &dest

	}

	return response, nil
}
