// Package rootly provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package rootly

import (
	"context"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	Bearer_authScopes = "bearer_auth.Scopes"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemCondition.
const (
	ActionItemTriggerParamsIncidentActionItemConditionALL  ActionItemTriggerParamsIncidentActionItemCondition = "ALL"
	ActionItemTriggerParamsIncidentActionItemConditionANY  ActionItemTriggerParamsIncidentActionItemCondition = "ANY"
	ActionItemTriggerParamsIncidentActionItemConditionNONE ActionItemTriggerParamsIncidentActionItemCondition = "NONE"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemConditionGroup.
const (
	ActionItemTriggerParamsIncidentActionItemConditionGroupANY          ActionItemTriggerParamsIncidentActionItemConditionGroup = "ANY"
	ActionItemTriggerParamsIncidentActionItemConditionGroupCONTAINS     ActionItemTriggerParamsIncidentActionItemConditionGroup = "CONTAINS"
	ActionItemTriggerParamsIncidentActionItemConditionGroupCONTAINSALL  ActionItemTriggerParamsIncidentActionItemConditionGroup = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentActionItemConditionGroupCONTAINSNONE ActionItemTriggerParamsIncidentActionItemConditionGroup = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentActionItemConditionGroupIS           ActionItemTriggerParamsIncidentActionItemConditionGroup = "IS"
	ActionItemTriggerParamsIncidentActionItemConditionGroupNONE         ActionItemTriggerParamsIncidentActionItemConditionGroup = "NONE"
	ActionItemTriggerParamsIncidentActionItemConditionGroupSET          ActionItemTriggerParamsIncidentActionItemConditionGroup = "SET"
	ActionItemTriggerParamsIncidentActionItemConditionGroupUNSET        ActionItemTriggerParamsIncidentActionItemConditionGroup = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemConditionKind.
const (
	ActionItemTriggerParamsIncidentActionItemConditionKindANY          ActionItemTriggerParamsIncidentActionItemConditionKind = "ANY"
	ActionItemTriggerParamsIncidentActionItemConditionKindCONTAINS     ActionItemTriggerParamsIncidentActionItemConditionKind = "CONTAINS"
	ActionItemTriggerParamsIncidentActionItemConditionKindCONTAINSALL  ActionItemTriggerParamsIncidentActionItemConditionKind = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentActionItemConditionKindCONTAINSNONE ActionItemTriggerParamsIncidentActionItemConditionKind = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentActionItemConditionKindIS           ActionItemTriggerParamsIncidentActionItemConditionKind = "IS"
	ActionItemTriggerParamsIncidentActionItemConditionKindNONE         ActionItemTriggerParamsIncidentActionItemConditionKind = "NONE"
	ActionItemTriggerParamsIncidentActionItemConditionKindSET          ActionItemTriggerParamsIncidentActionItemConditionKind = "SET"
	ActionItemTriggerParamsIncidentActionItemConditionKindUNSET        ActionItemTriggerParamsIncidentActionItemConditionKind = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemConditionPriority.
const (
	ActionItemTriggerParamsIncidentActionItemConditionPriorityANY          ActionItemTriggerParamsIncidentActionItemConditionPriority = "ANY"
	ActionItemTriggerParamsIncidentActionItemConditionPriorityCONTAINS     ActionItemTriggerParamsIncidentActionItemConditionPriority = "CONTAINS"
	ActionItemTriggerParamsIncidentActionItemConditionPriorityCONTAINSALL  ActionItemTriggerParamsIncidentActionItemConditionPriority = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentActionItemConditionPriorityCONTAINSNONE ActionItemTriggerParamsIncidentActionItemConditionPriority = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentActionItemConditionPriorityIS           ActionItemTriggerParamsIncidentActionItemConditionPriority = "IS"
	ActionItemTriggerParamsIncidentActionItemConditionPriorityNONE         ActionItemTriggerParamsIncidentActionItemConditionPriority = "NONE"
	ActionItemTriggerParamsIncidentActionItemConditionPrioritySET          ActionItemTriggerParamsIncidentActionItemConditionPriority = "SET"
	ActionItemTriggerParamsIncidentActionItemConditionPriorityUNSET        ActionItemTriggerParamsIncidentActionItemConditionPriority = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemConditionStatus.
const (
	ActionItemTriggerParamsIncidentActionItemConditionStatusANY          ActionItemTriggerParamsIncidentActionItemConditionStatus = "ANY"
	ActionItemTriggerParamsIncidentActionItemConditionStatusCONTAINS     ActionItemTriggerParamsIncidentActionItemConditionStatus = "CONTAINS"
	ActionItemTriggerParamsIncidentActionItemConditionStatusCONTAINSALL  ActionItemTriggerParamsIncidentActionItemConditionStatus = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentActionItemConditionStatusCONTAINSNONE ActionItemTriggerParamsIncidentActionItemConditionStatus = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentActionItemConditionStatusIS           ActionItemTriggerParamsIncidentActionItemConditionStatus = "IS"
	ActionItemTriggerParamsIncidentActionItemConditionStatusNONE         ActionItemTriggerParamsIncidentActionItemConditionStatus = "NONE"
	ActionItemTriggerParamsIncidentActionItemConditionStatusSET          ActionItemTriggerParamsIncidentActionItemConditionStatus = "SET"
	ActionItemTriggerParamsIncidentActionItemConditionStatusUNSET        ActionItemTriggerParamsIncidentActionItemConditionStatus = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemKinds.
const (
	ActionItemTriggerParamsIncidentActionItemKindsFollowUp ActionItemTriggerParamsIncidentActionItemKinds = "follow_up"
	ActionItemTriggerParamsIncidentActionItemKindsTask     ActionItemTriggerParamsIncidentActionItemKinds = "task"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemPriorities.
const (
	ActionItemTriggerParamsIncidentActionItemPrioritiesHigh   ActionItemTriggerParamsIncidentActionItemPriorities = "high"
	ActionItemTriggerParamsIncidentActionItemPrioritiesLow    ActionItemTriggerParamsIncidentActionItemPriorities = "low"
	ActionItemTriggerParamsIncidentActionItemPrioritiesMedium ActionItemTriggerParamsIncidentActionItemPriorities = "medium"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemStatuses.
const (
	ActionItemTriggerParamsIncidentActionItemStatusesCancelled  ActionItemTriggerParamsIncidentActionItemStatuses = "cancelled"
	ActionItemTriggerParamsIncidentActionItemStatusesDone       ActionItemTriggerParamsIncidentActionItemStatuses = "done"
	ActionItemTriggerParamsIncidentActionItemStatusesInProgress ActionItemTriggerParamsIncidentActionItemStatuses = "in_progress"
	ActionItemTriggerParamsIncidentActionItemStatusesOpen       ActionItemTriggerParamsIncidentActionItemStatuses = "open"
)

// Defines values for ActionItemTriggerParamsIncidentCondition.
const (
	ActionItemTriggerParamsIncidentConditionALL  ActionItemTriggerParamsIncidentCondition = "ALL"
	ActionItemTriggerParamsIncidentConditionANY  ActionItemTriggerParamsIncidentCondition = "ANY"
	ActionItemTriggerParamsIncidentConditionNONE ActionItemTriggerParamsIncidentCondition = "NONE"
)

// Defines values for ActionItemTriggerParamsIncidentConditionEnvironment.
const (
	ActionItemTriggerParamsIncidentConditionEnvironmentANY          ActionItemTriggerParamsIncidentConditionEnvironment = "ANY"
	ActionItemTriggerParamsIncidentConditionEnvironmentCONTAINS     ActionItemTriggerParamsIncidentConditionEnvironment = "CONTAINS"
	ActionItemTriggerParamsIncidentConditionEnvironmentCONTAINSALL  ActionItemTriggerParamsIncidentConditionEnvironment = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentConditionEnvironmentCONTAINSNONE ActionItemTriggerParamsIncidentConditionEnvironment = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentConditionEnvironmentIS           ActionItemTriggerParamsIncidentConditionEnvironment = "IS"
	ActionItemTriggerParamsIncidentConditionEnvironmentNONE         ActionItemTriggerParamsIncidentConditionEnvironment = "NONE"
	ActionItemTriggerParamsIncidentConditionEnvironmentSET          ActionItemTriggerParamsIncidentConditionEnvironment = "SET"
	ActionItemTriggerParamsIncidentConditionEnvironmentUNSET        ActionItemTriggerParamsIncidentConditionEnvironment = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionFunctionality.
const (
	ActionItemTriggerParamsIncidentConditionFunctionalityANY          ActionItemTriggerParamsIncidentConditionFunctionality = "ANY"
	ActionItemTriggerParamsIncidentConditionFunctionalityCONTAINS     ActionItemTriggerParamsIncidentConditionFunctionality = "CONTAINS"
	ActionItemTriggerParamsIncidentConditionFunctionalityCONTAINSALL  ActionItemTriggerParamsIncidentConditionFunctionality = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentConditionFunctionalityCONTAINSNONE ActionItemTriggerParamsIncidentConditionFunctionality = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentConditionFunctionalityIS           ActionItemTriggerParamsIncidentConditionFunctionality = "IS"
	ActionItemTriggerParamsIncidentConditionFunctionalityNONE         ActionItemTriggerParamsIncidentConditionFunctionality = "NONE"
	ActionItemTriggerParamsIncidentConditionFunctionalitySET          ActionItemTriggerParamsIncidentConditionFunctionality = "SET"
	ActionItemTriggerParamsIncidentConditionFunctionalityUNSET        ActionItemTriggerParamsIncidentConditionFunctionality = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionGroup.
const (
	ActionItemTriggerParamsIncidentConditionGroupANY          ActionItemTriggerParamsIncidentConditionGroup = "ANY"
	ActionItemTriggerParamsIncidentConditionGroupCONTAINS     ActionItemTriggerParamsIncidentConditionGroup = "CONTAINS"
	ActionItemTriggerParamsIncidentConditionGroupCONTAINSALL  ActionItemTriggerParamsIncidentConditionGroup = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentConditionGroupCONTAINSNONE ActionItemTriggerParamsIncidentConditionGroup = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentConditionGroupIS           ActionItemTriggerParamsIncidentConditionGroup = "IS"
	ActionItemTriggerParamsIncidentConditionGroupNONE         ActionItemTriggerParamsIncidentConditionGroup = "NONE"
	ActionItemTriggerParamsIncidentConditionGroupSET          ActionItemTriggerParamsIncidentConditionGroup = "SET"
	ActionItemTriggerParamsIncidentConditionGroupUNSET        ActionItemTriggerParamsIncidentConditionGroup = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionIncidentRoles.
const (
	ActionItemTriggerParamsIncidentConditionIncidentRolesANY          ActionItemTriggerParamsIncidentConditionIncidentRoles = "ANY"
	ActionItemTriggerParamsIncidentConditionIncidentRolesCONTAINS     ActionItemTriggerParamsIncidentConditionIncidentRoles = "CONTAINS"
	ActionItemTriggerParamsIncidentConditionIncidentRolesCONTAINSALL  ActionItemTriggerParamsIncidentConditionIncidentRoles = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentConditionIncidentRolesCONTAINSNONE ActionItemTriggerParamsIncidentConditionIncidentRoles = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentConditionIncidentRolesIS           ActionItemTriggerParamsIncidentConditionIncidentRoles = "IS"
	ActionItemTriggerParamsIncidentConditionIncidentRolesNONE         ActionItemTriggerParamsIncidentConditionIncidentRoles = "NONE"
	ActionItemTriggerParamsIncidentConditionIncidentRolesSET          ActionItemTriggerParamsIncidentConditionIncidentRoles = "SET"
	ActionItemTriggerParamsIncidentConditionIncidentRolesUNSET        ActionItemTriggerParamsIncidentConditionIncidentRoles = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionIncidentType.
const (
	ActionItemTriggerParamsIncidentConditionIncidentTypeANY          ActionItemTriggerParamsIncidentConditionIncidentType = "ANY"
	ActionItemTriggerParamsIncidentConditionIncidentTypeCONTAINS     ActionItemTriggerParamsIncidentConditionIncidentType = "CONTAINS"
	ActionItemTriggerParamsIncidentConditionIncidentTypeCONTAINSALL  ActionItemTriggerParamsIncidentConditionIncidentType = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentConditionIncidentTypeCONTAINSNONE ActionItemTriggerParamsIncidentConditionIncidentType = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentConditionIncidentTypeIS           ActionItemTriggerParamsIncidentConditionIncidentType = "IS"
	ActionItemTriggerParamsIncidentConditionIncidentTypeNONE         ActionItemTriggerParamsIncidentConditionIncidentType = "NONE"
	ActionItemTriggerParamsIncidentConditionIncidentTypeSET          ActionItemTriggerParamsIncidentConditionIncidentType = "SET"
	ActionItemTriggerParamsIncidentConditionIncidentTypeUNSET        ActionItemTriggerParamsIncidentConditionIncidentType = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionKind.
const (
	ActionItemTriggerParamsIncidentConditionKindANY          ActionItemTriggerParamsIncidentConditionKind = "ANY"
	ActionItemTriggerParamsIncidentConditionKindCONTAINS     ActionItemTriggerParamsIncidentConditionKind = "CONTAINS"
	ActionItemTriggerParamsIncidentConditionKindCONTAINSALL  ActionItemTriggerParamsIncidentConditionKind = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentConditionKindCONTAINSNONE ActionItemTriggerParamsIncidentConditionKind = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentConditionKindIS           ActionItemTriggerParamsIncidentConditionKind = "IS"
	ActionItemTriggerParamsIncidentConditionKindNONE         ActionItemTriggerParamsIncidentConditionKind = "NONE"
	ActionItemTriggerParamsIncidentConditionKindSET          ActionItemTriggerParamsIncidentConditionKind = "SET"
	ActionItemTriggerParamsIncidentConditionKindUNSET        ActionItemTriggerParamsIncidentConditionKind = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionService.
const (
	ActionItemTriggerParamsIncidentConditionServiceANY          ActionItemTriggerParamsIncidentConditionService = "ANY"
	ActionItemTriggerParamsIncidentConditionServiceCONTAINS     ActionItemTriggerParamsIncidentConditionService = "CONTAINS"
	ActionItemTriggerParamsIncidentConditionServiceCONTAINSALL  ActionItemTriggerParamsIncidentConditionService = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentConditionServiceCONTAINSNONE ActionItemTriggerParamsIncidentConditionService = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentConditionServiceIS           ActionItemTriggerParamsIncidentConditionService = "IS"
	ActionItemTriggerParamsIncidentConditionServiceNONE         ActionItemTriggerParamsIncidentConditionService = "NONE"
	ActionItemTriggerParamsIncidentConditionServiceSET          ActionItemTriggerParamsIncidentConditionService = "SET"
	ActionItemTriggerParamsIncidentConditionServiceUNSET        ActionItemTriggerParamsIncidentConditionService = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionSeverity.
const (
	ActionItemTriggerParamsIncidentConditionSeverityANY          ActionItemTriggerParamsIncidentConditionSeverity = "ANY"
	ActionItemTriggerParamsIncidentConditionSeverityCONTAINS     ActionItemTriggerParamsIncidentConditionSeverity = "CONTAINS"
	ActionItemTriggerParamsIncidentConditionSeverityCONTAINSALL  ActionItemTriggerParamsIncidentConditionSeverity = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentConditionSeverityCONTAINSNONE ActionItemTriggerParamsIncidentConditionSeverity = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentConditionSeverityIS           ActionItemTriggerParamsIncidentConditionSeverity = "IS"
	ActionItemTriggerParamsIncidentConditionSeverityNONE         ActionItemTriggerParamsIncidentConditionSeverity = "NONE"
	ActionItemTriggerParamsIncidentConditionSeveritySET          ActionItemTriggerParamsIncidentConditionSeverity = "SET"
	ActionItemTriggerParamsIncidentConditionSeverityUNSET        ActionItemTriggerParamsIncidentConditionSeverity = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionStatus.
const (
	ActionItemTriggerParamsIncidentConditionStatusANY          ActionItemTriggerParamsIncidentConditionStatus = "ANY"
	ActionItemTriggerParamsIncidentConditionStatusCONTAINS     ActionItemTriggerParamsIncidentConditionStatus = "CONTAINS"
	ActionItemTriggerParamsIncidentConditionStatusCONTAINSALL  ActionItemTriggerParamsIncidentConditionStatus = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentConditionStatusCONTAINSNONE ActionItemTriggerParamsIncidentConditionStatus = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentConditionStatusIS           ActionItemTriggerParamsIncidentConditionStatus = "IS"
	ActionItemTriggerParamsIncidentConditionStatusNONE         ActionItemTriggerParamsIncidentConditionStatus = "NONE"
	ActionItemTriggerParamsIncidentConditionStatusSET          ActionItemTriggerParamsIncidentConditionStatus = "SET"
	ActionItemTriggerParamsIncidentConditionStatusUNSET        ActionItemTriggerParamsIncidentConditionStatus = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionVisibility.
const (
	ActionItemTriggerParamsIncidentConditionVisibilityANY          ActionItemTriggerParamsIncidentConditionVisibility = "ANY"
	ActionItemTriggerParamsIncidentConditionVisibilityCONTAINS     ActionItemTriggerParamsIncidentConditionVisibility = "CONTAINS"
	ActionItemTriggerParamsIncidentConditionVisibilityCONTAINSALL  ActionItemTriggerParamsIncidentConditionVisibility = "CONTAINS_ALL"
	ActionItemTriggerParamsIncidentConditionVisibilityCONTAINSNONE ActionItemTriggerParamsIncidentConditionVisibility = "CONTAINS_NONE"
	ActionItemTriggerParamsIncidentConditionVisibilityIS           ActionItemTriggerParamsIncidentConditionVisibility = "IS"
	ActionItemTriggerParamsIncidentConditionVisibilityNONE         ActionItemTriggerParamsIncidentConditionVisibility = "NONE"
	ActionItemTriggerParamsIncidentConditionVisibilitySET          ActionItemTriggerParamsIncidentConditionVisibility = "SET"
	ActionItemTriggerParamsIncidentConditionVisibilityUNSET        ActionItemTriggerParamsIncidentConditionVisibility = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentKinds.
const (
	ActionItemTriggerParamsIncidentKindsBackfilled ActionItemTriggerParamsIncidentKinds = "backfilled"
	ActionItemTriggerParamsIncidentKindsExample    ActionItemTriggerParamsIncidentKinds = "example"
	ActionItemTriggerParamsIncidentKindsExampleSub ActionItemTriggerParamsIncidentKinds = "example_sub"
	ActionItemTriggerParamsIncidentKindsNormal     ActionItemTriggerParamsIncidentKinds = "normal"
	ActionItemTriggerParamsIncidentKindsNormalSub  ActionItemTriggerParamsIncidentKinds = "normal_sub"
	ActionItemTriggerParamsIncidentKindsScheduled  ActionItemTriggerParamsIncidentKinds = "scheduled"
	ActionItemTriggerParamsIncidentKindsTest       ActionItemTriggerParamsIncidentKinds = "test"
	ActionItemTriggerParamsIncidentKindsTestSub    ActionItemTriggerParamsIncidentKinds = "test_sub"
)

// Defines values for ActionItemTriggerParamsIncidentStatuses.
const (
	ActionItemTriggerParamsIncidentStatusesAcknowledged ActionItemTriggerParamsIncidentStatuses = "acknowledged"
	ActionItemTriggerParamsIncidentStatusesCancelled    ActionItemTriggerParamsIncidentStatuses = "cancelled"
	ActionItemTriggerParamsIncidentStatusesCompleted    ActionItemTriggerParamsIncidentStatuses = "completed"
	ActionItemTriggerParamsIncidentStatusesDetected     ActionItemTriggerParamsIncidentStatuses = "detected"
	ActionItemTriggerParamsIncidentStatusesInProgress   ActionItemTriggerParamsIncidentStatuses = "in_progress"
	ActionItemTriggerParamsIncidentStatusesInTriage     ActionItemTriggerParamsIncidentStatuses = "in_triage"
	ActionItemTriggerParamsIncidentStatusesMitigated    ActionItemTriggerParamsIncidentStatuses = "mitigated"
	ActionItemTriggerParamsIncidentStatusesResolved     ActionItemTriggerParamsIncidentStatuses = "resolved"
	ActionItemTriggerParamsIncidentStatusesScheduled    ActionItemTriggerParamsIncidentStatuses = "scheduled"
	ActionItemTriggerParamsIncidentStatusesStarted      ActionItemTriggerParamsIncidentStatuses = "started"
)

// Defines values for ActionItemTriggerParamsTriggerType.
const (
	ActionItemTriggerParamsTriggerTypeActionItem ActionItemTriggerParamsTriggerType = "action_item"
)

// Defines values for AddActionItemTaskParamsPriority.
const (
	AddActionItemTaskParamsPriorityHigh   AddActionItemTaskParamsPriority = "high"
	AddActionItemTaskParamsPriorityLow    AddActionItemTaskParamsPriority = "low"
	AddActionItemTaskParamsPriorityMedium AddActionItemTaskParamsPriority = "medium"
)

// Defines values for AddActionItemTaskParamsStatus.
const (
	AddActionItemTaskParamsStatusCancelled  AddActionItemTaskParamsStatus = "cancelled"
	AddActionItemTaskParamsStatusDone       AddActionItemTaskParamsStatus = "done"
	AddActionItemTaskParamsStatusInProgress AddActionItemTaskParamsStatus = "in_progress"
	AddActionItemTaskParamsStatusOpen       AddActionItemTaskParamsStatus = "open"
)

// Defines values for AddActionItemTaskParamsTaskType.
const (
	AddActionItem AddActionItemTaskParamsTaskType = "add_action_item"
)

// Defines values for AddRoleTaskParamsTaskType.
const (
	AddRole AddRoleTaskParamsTaskType = "add_role"
)

// Defines values for AddSlackBookmarkTaskParamsTaskType.
const (
	AddSlackBookmark AddSlackBookmarkTaskParamsTaskType = "add_slack_bookmark"
)

// Defines values for AddSubscribersDataType.
const (
	AddSubscribersDataTypeIncidents AddSubscribersDataType = "incidents"
)

// Defines values for AddTeamTaskParamsTaskType.
const (
	AddTeam AddTeamTaskParamsTaskType = "add_team"
)

// Defines values for AddToTimelineTaskParamsTaskType.
const (
	AddToTimeline AddToTimelineTaskParamsTaskType = "add_to_timeline"
)

// Defines values for AlertServicesStatus.
const (
	AlertServicesStatusImpacted      AlertServicesStatus = "impacted"
	AlertServicesStatusMajorOutage   AlertServicesStatus = "major_outage"
	AlertServicesStatusOperational   AlertServicesStatus = "operational"
	AlertServicesStatusOutage        AlertServicesStatus = "outage"
	AlertServicesStatusPartialOutage AlertServicesStatus = "partial_outage"
)

// Defines values for AlertListDataAttributesServicesStatus.
const (
	AlertListDataAttributesServicesStatusImpacted      AlertListDataAttributesServicesStatus = "impacted"
	AlertListDataAttributesServicesStatusMajorOutage   AlertListDataAttributesServicesStatus = "major_outage"
	AlertListDataAttributesServicesStatusOperational   AlertListDataAttributesServicesStatus = "operational"
	AlertListDataAttributesServicesStatusOutage        AlertListDataAttributesServicesStatus = "outage"
	AlertListDataAttributesServicesStatusPartialOutage AlertListDataAttributesServicesStatus = "partial_outage"
)

// Defines values for AlertListDataType.
const (
	AlertListDataTypeAlerts AlertListDataType = "alerts"
)

// Defines values for AlertResponseDataAttributesServicesStatus.
const (
	AlertResponseDataAttributesServicesStatusImpacted      AlertResponseDataAttributesServicesStatus = "impacted"
	AlertResponseDataAttributesServicesStatusMajorOutage   AlertResponseDataAttributesServicesStatus = "major_outage"
	AlertResponseDataAttributesServicesStatusOperational   AlertResponseDataAttributesServicesStatus = "operational"
	AlertResponseDataAttributesServicesStatusOutage        AlertResponseDataAttributesServicesStatus = "outage"
	AlertResponseDataAttributesServicesStatusPartialOutage AlertResponseDataAttributesServicesStatus = "partial_outage"
)

// Defines values for AlertResponseDataType.
const (
	AlertResponseDataTypeAlerts AlertResponseDataType = "alerts"
)

// Defines values for AlertTriggerParamsAlertCondition.
const (
	AlertTriggerParamsAlertConditionALL  AlertTriggerParamsAlertCondition = "ALL"
	AlertTriggerParamsAlertConditionANY  AlertTriggerParamsAlertCondition = "ANY"
	AlertTriggerParamsAlertConditionNONE AlertTriggerParamsAlertCondition = "NONE"
)

// Defines values for AlertTriggerParamsAlertConditionLabel.
const (
	AlertTriggerParamsAlertConditionLabelANY          AlertTriggerParamsAlertConditionLabel = "ANY"
	AlertTriggerParamsAlertConditionLabelCONTAINS     AlertTriggerParamsAlertConditionLabel = "CONTAINS"
	AlertTriggerParamsAlertConditionLabelCONTAINSALL  AlertTriggerParamsAlertConditionLabel = "CONTAINS_ALL"
	AlertTriggerParamsAlertConditionLabelCONTAINSNONE AlertTriggerParamsAlertConditionLabel = "CONTAINS_NONE"
	AlertTriggerParamsAlertConditionLabelIS           AlertTriggerParamsAlertConditionLabel = "IS"
	AlertTriggerParamsAlertConditionLabelNONE         AlertTriggerParamsAlertConditionLabel = "NONE"
	AlertTriggerParamsAlertConditionLabelSET          AlertTriggerParamsAlertConditionLabel = "SET"
	AlertTriggerParamsAlertConditionLabelUNSET        AlertTriggerParamsAlertConditionLabel = "UNSET"
)

// Defines values for AlertTriggerParamsAlertConditionPayload.
const (
	AlertTriggerParamsAlertConditionPayloadANY          AlertTriggerParamsAlertConditionPayload = "ANY"
	AlertTriggerParamsAlertConditionPayloadCONTAINS     AlertTriggerParamsAlertConditionPayload = "CONTAINS"
	AlertTriggerParamsAlertConditionPayloadCONTAINSALL  AlertTriggerParamsAlertConditionPayload = "CONTAINS_ALL"
	AlertTriggerParamsAlertConditionPayloadCONTAINSNONE AlertTriggerParamsAlertConditionPayload = "CONTAINS_NONE"
	AlertTriggerParamsAlertConditionPayloadIS           AlertTriggerParamsAlertConditionPayload = "IS"
	AlertTriggerParamsAlertConditionPayloadNONE         AlertTriggerParamsAlertConditionPayload = "NONE"
	AlertTriggerParamsAlertConditionPayloadSET          AlertTriggerParamsAlertConditionPayload = "SET"
	AlertTriggerParamsAlertConditionPayloadUNSET        AlertTriggerParamsAlertConditionPayload = "UNSET"
)

// Defines values for AlertTriggerParamsAlertConditionSource.
const (
	AlertTriggerParamsAlertConditionSourceANY          AlertTriggerParamsAlertConditionSource = "ANY"
	AlertTriggerParamsAlertConditionSourceCONTAINS     AlertTriggerParamsAlertConditionSource = "CONTAINS"
	AlertTriggerParamsAlertConditionSourceCONTAINSALL  AlertTriggerParamsAlertConditionSource = "CONTAINS_ALL"
	AlertTriggerParamsAlertConditionSourceCONTAINSNONE AlertTriggerParamsAlertConditionSource = "CONTAINS_NONE"
	AlertTriggerParamsAlertConditionSourceIS           AlertTriggerParamsAlertConditionSource = "IS"
	AlertTriggerParamsAlertConditionSourceNONE         AlertTriggerParamsAlertConditionSource = "NONE"
	AlertTriggerParamsAlertConditionSourceSET          AlertTriggerParamsAlertConditionSource = "SET"
	AlertTriggerParamsAlertConditionSourceUNSET        AlertTriggerParamsAlertConditionSource = "UNSET"
)

// Defines values for AlertTriggerParamsTriggerType.
const (
	AlertTriggerParamsTriggerTypeAlert AlertTriggerParamsTriggerType = "alert"
)

// Defines values for AlertTriggerParamsTriggers.
const (
	AlertTriggerParamsTriggersAlertCreated AlertTriggerParamsTriggers = "alert_created"
)

// Defines values for ArchiveSlackChannelsTaskParamsTaskType.
const (
	ArchiveSlackChannels ArchiveSlackChannelsTaskParamsTaskType = "archive_slack_channels"
)

// Defines values for AssignRoleToUserDataType.
const (
	AssignRoleToUserDataTypeIncidents AssignRoleToUserDataType = "incidents"
)

// Defines values for AttachDatadogDashboardsTaskParamsTaskType.
const (
	AttachDatadogDashboards AttachDatadogDashboardsTaskParamsTaskType = "attach_datadog_dashboards"
)

// Defines values for AuditItemType.
const (
	AuditItemTypeCause                          AuditItemType = "Cause"
	AuditItemTypeCustomField                    AuditItemType = "CustomField"
	AuditItemTypeCustomFieldOption              AuditItemType = "CustomFieldOption"
	AuditItemTypeCustomForm                     AuditItemType = "CustomForm"
	AuditItemTypeDashboard                      AuditItemType = "Dashboard"
	AuditItemTypeEnvironment                    AuditItemType = "Environment"
	AuditItemTypeExportJob                      AuditItemType = "ExportJob"
	AuditItemTypeFormField                      AuditItemType = "FormField"
	AuditItemTypeFunctionality                  AuditItemType = "Functionality"
	AuditItemTypeGeniusWorkflow                 AuditItemType = "GeniusWorkflow"
	AuditItemTypeGeniusWorkflowFolder           AuditItemType = "GeniusWorkflowFolder"
	AuditItemTypeGeniusWorkflowGroup            AuditItemType = "GeniusWorkflowGroup"
	AuditItemTypeGeniusWorkflowRun              AuditItemType = "GeniusWorkflowRun"
	AuditItemTypeGroup                          AuditItemType = "Group"
	AuditItemTypeIncident                       AuditItemType = "Incident"
	AuditItemTypeIncidentActionItem             AuditItemType = "IncidentActionItem"
	AuditItemTypeIncidentEvent                  AuditItemType = "IncidentEvent"
	AuditItemTypeIncidentFormFieldSelection     AuditItemType = "IncidentFormFieldSelection"
	AuditItemTypeIncidentFormFieldSelectionUser AuditItemType = "IncidentFormFieldSelectionUser"
	AuditItemTypeIncidentPostMortem             AuditItemType = "IncidentPostMortem"
	AuditItemTypeIncidentRoleAssignment         AuditItemType = "IncidentRoleAssignment"
	AuditItemTypeIncidentRoleTask               AuditItemType = "IncidentRoleTask"
	AuditItemTypeIncidentStatusPageEvent        AuditItemType = "IncidentStatusPageEvent"
	AuditItemTypeIncidentTask                   AuditItemType = "IncidentTask"
	AuditItemTypeIncidentType                   AuditItemType = "IncidentType"
	AuditItemTypePlaybook                       AuditItemType = "Playbook"
	AuditItemTypePlaybookTask                   AuditItemType = "PlaybookTask"
	AuditItemTypeRole                           AuditItemType = "Role"
	AuditItemTypeService                        AuditItemType = "Service"
	AuditItemTypeSeverity                       AuditItemType = "Severity"
	AuditItemTypeStatusPage                     AuditItemType = "StatusPage"
)

// Defines values for AuditsListDataAttributesItemType.
const (
	AuditsListDataAttributesItemTypeCause                          AuditsListDataAttributesItemType = "Cause"
	AuditsListDataAttributesItemTypeCustomField                    AuditsListDataAttributesItemType = "CustomField"
	AuditsListDataAttributesItemTypeCustomFieldOption              AuditsListDataAttributesItemType = "CustomFieldOption"
	AuditsListDataAttributesItemTypeCustomForm                     AuditsListDataAttributesItemType = "CustomForm"
	AuditsListDataAttributesItemTypeDashboard                      AuditsListDataAttributesItemType = "Dashboard"
	AuditsListDataAttributesItemTypeEnvironment                    AuditsListDataAttributesItemType = "Environment"
	AuditsListDataAttributesItemTypeExportJob                      AuditsListDataAttributesItemType = "ExportJob"
	AuditsListDataAttributesItemTypeFormField                      AuditsListDataAttributesItemType = "FormField"
	AuditsListDataAttributesItemTypeFunctionality                  AuditsListDataAttributesItemType = "Functionality"
	AuditsListDataAttributesItemTypeGeniusWorkflow                 AuditsListDataAttributesItemType = "GeniusWorkflow"
	AuditsListDataAttributesItemTypeGeniusWorkflowFolder           AuditsListDataAttributesItemType = "GeniusWorkflowFolder"
	AuditsListDataAttributesItemTypeGeniusWorkflowGroup            AuditsListDataAttributesItemType = "GeniusWorkflowGroup"
	AuditsListDataAttributesItemTypeGeniusWorkflowRun              AuditsListDataAttributesItemType = "GeniusWorkflowRun"
	AuditsListDataAttributesItemTypeGroup                          AuditsListDataAttributesItemType = "Group"
	AuditsListDataAttributesItemTypeIncident                       AuditsListDataAttributesItemType = "Incident"
	AuditsListDataAttributesItemTypeIncidentActionItem             AuditsListDataAttributesItemType = "IncidentActionItem"
	AuditsListDataAttributesItemTypeIncidentEvent                  AuditsListDataAttributesItemType = "IncidentEvent"
	AuditsListDataAttributesItemTypeIncidentFormFieldSelection     AuditsListDataAttributesItemType = "IncidentFormFieldSelection"
	AuditsListDataAttributesItemTypeIncidentFormFieldSelectionUser AuditsListDataAttributesItemType = "IncidentFormFieldSelectionUser"
	AuditsListDataAttributesItemTypeIncidentPostMortem             AuditsListDataAttributesItemType = "IncidentPostMortem"
	AuditsListDataAttributesItemTypeIncidentRoleAssignment         AuditsListDataAttributesItemType = "IncidentRoleAssignment"
	AuditsListDataAttributesItemTypeIncidentRoleTask               AuditsListDataAttributesItemType = "IncidentRoleTask"
	AuditsListDataAttributesItemTypeIncidentStatusPageEvent        AuditsListDataAttributesItemType = "IncidentStatusPageEvent"
	AuditsListDataAttributesItemTypeIncidentTask                   AuditsListDataAttributesItemType = "IncidentTask"
	AuditsListDataAttributesItemTypeIncidentType                   AuditsListDataAttributesItemType = "IncidentType"
	AuditsListDataAttributesItemTypePlaybook                       AuditsListDataAttributesItemType = "Playbook"
	AuditsListDataAttributesItemTypePlaybookTask                   AuditsListDataAttributesItemType = "PlaybookTask"
	AuditsListDataAttributesItemTypeRole                           AuditsListDataAttributesItemType = "Role"
	AuditsListDataAttributesItemTypeService                        AuditsListDataAttributesItemType = "Service"
	AuditsListDataAttributesItemTypeSeverity                       AuditsListDataAttributesItemType = "Severity"
	AuditsListDataAttributesItemTypeStatusPage                     AuditsListDataAttributesItemType = "StatusPage"
)

// Defines values for AuditsListDataType.
const (
	Audits AuditsListDataType = "audits"
)

// Defines values for AuthorizationAuthorizableType.
const (
	AuthorizationAuthorizableTypeDashboard AuthorizationAuthorizableType = "Dashboard"
)

// Defines values for AuthorizationGranteeType.
const (
	AuthorizationGranteeTypeTeam AuthorizationGranteeType = "Team"
	AuthorizationGranteeTypeUser AuthorizationGranteeType = "User"
)

// Defines values for AuthorizationPermissions.
const (
	AuthorizationPermissionsAuthorize AuthorizationPermissions = "authorize"
	AuthorizationPermissionsDestroy   AuthorizationPermissions = "destroy"
	AuthorizationPermissionsRead      AuthorizationPermissions = "read"
	AuthorizationPermissionsUpdate    AuthorizationPermissions = "update"
)

// Defines values for AuthorizationListDataAttributesAuthorizableType.
const (
	AuthorizationListDataAttributesAuthorizableTypeDashboard AuthorizationListDataAttributesAuthorizableType = "Dashboard"
)

// Defines values for AuthorizationListDataAttributesGranteeType.
const (
	AuthorizationListDataAttributesGranteeTypeTeam AuthorizationListDataAttributesGranteeType = "Team"
	AuthorizationListDataAttributesGranteeTypeUser AuthorizationListDataAttributesGranteeType = "User"
)

// Defines values for AuthorizationListDataAttributesPermissions.
const (
	AuthorizationListDataAttributesPermissionsAuthorize AuthorizationListDataAttributesPermissions = "authorize"
	AuthorizationListDataAttributesPermissionsDestroy   AuthorizationListDataAttributesPermissions = "destroy"
	AuthorizationListDataAttributesPermissionsRead      AuthorizationListDataAttributesPermissions = "read"
	AuthorizationListDataAttributesPermissionsUpdate    AuthorizationListDataAttributesPermissions = "update"
)

// Defines values for AuthorizationListDataType.
const (
	AuthorizationListDataTypeAuthorizations AuthorizationListDataType = "authorizations"
)

// Defines values for AuthorizationResponseDataAttributesAuthorizableType.
const (
	AuthorizationResponseDataAttributesAuthorizableTypeDashboard AuthorizationResponseDataAttributesAuthorizableType = "Dashboard"
)

// Defines values for AuthorizationResponseDataAttributesGranteeType.
const (
	AuthorizationResponseDataAttributesGranteeTypeTeam AuthorizationResponseDataAttributesGranteeType = "Team"
	AuthorizationResponseDataAttributesGranteeTypeUser AuthorizationResponseDataAttributesGranteeType = "User"
)

// Defines values for AuthorizationResponseDataAttributesPermissions.
const (
	AuthorizationResponseDataAttributesPermissionsAuthorize AuthorizationResponseDataAttributesPermissions = "authorize"
	AuthorizationResponseDataAttributesPermissionsDestroy   AuthorizationResponseDataAttributesPermissions = "destroy"
	AuthorizationResponseDataAttributesPermissionsRead      AuthorizationResponseDataAttributesPermissions = "read"
	AuthorizationResponseDataAttributesPermissionsUpdate    AuthorizationResponseDataAttributesPermissions = "update"
)

// Defines values for AuthorizationResponseDataType.
const (
	AuthorizationResponseDataTypeAuthorizations AuthorizationResponseDataType = "authorizations"
)

// Defines values for AutoAssignRoleOpsgenieTaskParamsTaskType.
const (
	AutoAssignRoleOpsgenie AutoAssignRoleOpsgenieTaskParamsTaskType = "auto_assign_role_opsgenie"
)

// Defines values for AutoAssignRolePagerdutyTaskParamsTaskType.
const (
	AutoAssignRolePagerduty AutoAssignRolePagerdutyTaskParamsTaskType = "auto_assign_role_pagerduty"
)

// Defines values for AutoAssignRoleVictorOpsTaskParamsTaskType.
const (
	AutoAssignRoleVictorOps AutoAssignRoleVictorOpsTaskParamsTaskType = "auto_assign_role_victor_ops"
)

// Defines values for CallPeopleTaskParamsTaskType.
const (
	CallPeople CallPeopleTaskParamsTaskType = "call_people"
)

// Defines values for CancelIncidentDataType.
const (
	CancelIncidentDataTypeIncidents CancelIncidentDataType = "incidents"
)

// Defines values for CauseListDataType.
const (
	CauseListDataTypeCauses CauseListDataType = "causes"
)

// Defines values for CauseResponseDataType.
const (
	CauseResponseDataTypeCauses CauseResponseDataType = "causes"
)

// Defines values for CreateAirtableTableRecordTaskParamsTaskType.
const (
	CreateAirtableTableRecord CreateAirtableTableRecordTaskParamsTaskType = "create_airtable_table_record"
)

// Defines values for CreateAsanaSubtaskTaskParamsDependencyDirection.
const (
	CreateAsanaSubtaskTaskParamsDependencyDirectionBlockedBy CreateAsanaSubtaskTaskParamsDependencyDirection = "blocked_by"
	CreateAsanaSubtaskTaskParamsDependencyDirectionBlocking  CreateAsanaSubtaskTaskParamsDependencyDirection = "blocking"
)

// Defines values for CreateAsanaSubtaskTaskParamsTaskType.
const (
	CreateAsanaSubtask CreateAsanaSubtaskTaskParamsTaskType = "create_asana_subtask"
)

// Defines values for CreateAsanaTaskTaskParamsDependencyDirection.
const (
	CreateAsanaTaskTaskParamsDependencyDirectionBlockedBy CreateAsanaTaskTaskParamsDependencyDirection = "blocked_by"
	CreateAsanaTaskTaskParamsDependencyDirectionBlocking  CreateAsanaTaskTaskParamsDependencyDirection = "blocking"
)

// Defines values for CreateAsanaTaskTaskParamsTaskType.
const (
	CreateAsanaTask CreateAsanaTaskTaskParamsTaskType = "create_asana_task"
)

// Defines values for CreateClickupTaskTaskParamsTaskType.
const (
	CreateClickupTask CreateClickupTaskTaskParamsTaskType = "create_clickup_task"
)

// Defines values for CreateConfluencePageTaskParamsTaskType.
const (
	CreateConfluencePage CreateConfluencePageTaskParamsTaskType = "create_confluence_page"
)

// Defines values for CreateDatadogNotebookTaskParamsKind.
const (
	Documentation CreateDatadogNotebookTaskParamsKind = "documentation"
	Investigation CreateDatadogNotebookTaskParamsKind = "investigation"
	Postmortem    CreateDatadogNotebookTaskParamsKind = "postmortem"
	Report        CreateDatadogNotebookTaskParamsKind = "report"
	Runbook       CreateDatadogNotebookTaskParamsKind = "runbook"
)

// Defines values for CreateDatadogNotebookTaskParamsTaskType.
const (
	CreateDatadogNotebook CreateDatadogNotebookTaskParamsTaskType = "create_datadog_notebook"
)

// Defines values for CreateDropboxPaperPageTaskParamsTaskType.
const (
	CreateDropboxPaperPage CreateDropboxPaperPageTaskParamsTaskType = "create_dropbox_paper_page"
)

// Defines values for CreateGithubIssueTaskParamsTaskType.
const (
	CreateGithubIssue CreateGithubIssueTaskParamsTaskType = "create_github_issue"
)

// Defines values for CreateGoToMeetingTaskParamsConferenceCallInfo.
const (
	Free  CreateGoToMeetingTaskParamsConferenceCallInfo = "free"
	Hyrid CreateGoToMeetingTaskParamsConferenceCallInfo = "hyrid"
	Ptsn  CreateGoToMeetingTaskParamsConferenceCallInfo = "ptsn"
	Voip  CreateGoToMeetingTaskParamsConferenceCallInfo = "voip"
)

// Defines values for CreateGoToMeetingTaskParamsTaskType.
const (
	CreateGoToMeetingTask CreateGoToMeetingTaskParamsTaskType = "create_go_to_meeting_task"
)

// Defines values for CreateGoogleCalendarEventTaskParamsConferenceSolutionKey.
const (
	CreateGoogleCalendarEventTaskParamsConferenceSolutionKeyAddOn             CreateGoogleCalendarEventTaskParamsConferenceSolutionKey = "addOn"
	CreateGoogleCalendarEventTaskParamsConferenceSolutionKeyEventHangout      CreateGoogleCalendarEventTaskParamsConferenceSolutionKey = "eventHangout"
	CreateGoogleCalendarEventTaskParamsConferenceSolutionKeyEventNamedHangout CreateGoogleCalendarEventTaskParamsConferenceSolutionKey = "eventNamedHangout"
	CreateGoogleCalendarEventTaskParamsConferenceSolutionKeyHangoutsMeet      CreateGoogleCalendarEventTaskParamsConferenceSolutionKey = "hangoutsMeet"
)

// Defines values for CreateGoogleCalendarEventTaskParamsTaskType.
const (
	CreateGoogleCalendarEventTaskParamsTaskTypeCreateGoogleCalendarEvent CreateGoogleCalendarEventTaskParamsTaskType = "create_google_calendar_event"
)

// Defines values for CreateGoogleCalendarEventTaskParamsTimeZone.
const (
	CreateGoogleCalendarEventTaskParamsTimeZoneAbuDhabi                  CreateGoogleCalendarEventTaskParamsTimeZone = "Abu Dhabi"
	CreateGoogleCalendarEventTaskParamsTimeZoneAdelaide                  CreateGoogleCalendarEventTaskParamsTimeZone = "Adelaide"
	CreateGoogleCalendarEventTaskParamsTimeZoneAlaska                    CreateGoogleCalendarEventTaskParamsTimeZone = "Alaska"
	CreateGoogleCalendarEventTaskParamsTimeZoneAlmaty                    CreateGoogleCalendarEventTaskParamsTimeZone = "Almaty"
	CreateGoogleCalendarEventTaskParamsTimeZoneAmericanSamoa             CreateGoogleCalendarEventTaskParamsTimeZone = "American Samoa"
	CreateGoogleCalendarEventTaskParamsTimeZoneAmsterdam                 CreateGoogleCalendarEventTaskParamsTimeZone = "Amsterdam"
	CreateGoogleCalendarEventTaskParamsTimeZoneArizona                   CreateGoogleCalendarEventTaskParamsTimeZone = "Arizona"
	CreateGoogleCalendarEventTaskParamsTimeZoneAstana                    CreateGoogleCalendarEventTaskParamsTimeZone = "Astana"
	CreateGoogleCalendarEventTaskParamsTimeZoneAthens                    CreateGoogleCalendarEventTaskParamsTimeZone = "Athens"
	CreateGoogleCalendarEventTaskParamsTimeZoneAtlanticTimeCanada        CreateGoogleCalendarEventTaskParamsTimeZone = "Atlantic Time (Canada)"
	CreateGoogleCalendarEventTaskParamsTimeZoneAuckland                  CreateGoogleCalendarEventTaskParamsTimeZone = "Auckland"
	CreateGoogleCalendarEventTaskParamsTimeZoneAzores                    CreateGoogleCalendarEventTaskParamsTimeZone = "Azores"
	CreateGoogleCalendarEventTaskParamsTimeZoneBaghdad                   CreateGoogleCalendarEventTaskParamsTimeZone = "Baghdad"
	CreateGoogleCalendarEventTaskParamsTimeZoneBaku                      CreateGoogleCalendarEventTaskParamsTimeZone = "Baku"
	CreateGoogleCalendarEventTaskParamsTimeZoneBangkok                   CreateGoogleCalendarEventTaskParamsTimeZone = "Bangkok"
	CreateGoogleCalendarEventTaskParamsTimeZoneBeijing                   CreateGoogleCalendarEventTaskParamsTimeZone = "Beijing"
	CreateGoogleCalendarEventTaskParamsTimeZoneBelgrade                  CreateGoogleCalendarEventTaskParamsTimeZone = "Belgrade"
	CreateGoogleCalendarEventTaskParamsTimeZoneBerlin                    CreateGoogleCalendarEventTaskParamsTimeZone = "Berlin"
	CreateGoogleCalendarEventTaskParamsTimeZoneBern                      CreateGoogleCalendarEventTaskParamsTimeZone = "Bern"
	CreateGoogleCalendarEventTaskParamsTimeZoneBogota                    CreateGoogleCalendarEventTaskParamsTimeZone = "Bogota"
	CreateGoogleCalendarEventTaskParamsTimeZoneBrasilia                  CreateGoogleCalendarEventTaskParamsTimeZone = "Brasilia"
	CreateGoogleCalendarEventTaskParamsTimeZoneBratislava                CreateGoogleCalendarEventTaskParamsTimeZone = "Bratislava"
	CreateGoogleCalendarEventTaskParamsTimeZoneBrisbane                  CreateGoogleCalendarEventTaskParamsTimeZone = "Brisbane"
	CreateGoogleCalendarEventTaskParamsTimeZoneBrussels                  CreateGoogleCalendarEventTaskParamsTimeZone = "Brussels"
	CreateGoogleCalendarEventTaskParamsTimeZoneBucharest                 CreateGoogleCalendarEventTaskParamsTimeZone = "Bucharest"
	CreateGoogleCalendarEventTaskParamsTimeZoneBudapest                  CreateGoogleCalendarEventTaskParamsTimeZone = "Budapest"
	CreateGoogleCalendarEventTaskParamsTimeZoneBuenosAires               CreateGoogleCalendarEventTaskParamsTimeZone = "Buenos Aires"
	CreateGoogleCalendarEventTaskParamsTimeZoneCairo                     CreateGoogleCalendarEventTaskParamsTimeZone = "Cairo"
	CreateGoogleCalendarEventTaskParamsTimeZoneCanberra                  CreateGoogleCalendarEventTaskParamsTimeZone = "Canberra"
	CreateGoogleCalendarEventTaskParamsTimeZoneCapeVerdeIs               CreateGoogleCalendarEventTaskParamsTimeZone = "Cape Verde Is."
	CreateGoogleCalendarEventTaskParamsTimeZoneCaracas                   CreateGoogleCalendarEventTaskParamsTimeZone = "Caracas"
	CreateGoogleCalendarEventTaskParamsTimeZoneCasablanca                CreateGoogleCalendarEventTaskParamsTimeZone = "Casablanca"
	CreateGoogleCalendarEventTaskParamsTimeZoneCentralAmerica            CreateGoogleCalendarEventTaskParamsTimeZone = "Central America"
	CreateGoogleCalendarEventTaskParamsTimeZoneCentralTimeUSCanada       CreateGoogleCalendarEventTaskParamsTimeZone = "Central Time (US & Canada)"
	CreateGoogleCalendarEventTaskParamsTimeZoneChathamIs                 CreateGoogleCalendarEventTaskParamsTimeZone = "Chatham Is."
	CreateGoogleCalendarEventTaskParamsTimeZoneChennai                   CreateGoogleCalendarEventTaskParamsTimeZone = "Chennai"
	CreateGoogleCalendarEventTaskParamsTimeZoneChihuahua                 CreateGoogleCalendarEventTaskParamsTimeZone = "Chihuahua"
	CreateGoogleCalendarEventTaskParamsTimeZoneChongqing                 CreateGoogleCalendarEventTaskParamsTimeZone = "Chongqing"
	CreateGoogleCalendarEventTaskParamsTimeZoneCopenhagen                CreateGoogleCalendarEventTaskParamsTimeZone = "Copenhagen"
	CreateGoogleCalendarEventTaskParamsTimeZoneDarwin                    CreateGoogleCalendarEventTaskParamsTimeZone = "Darwin"
	CreateGoogleCalendarEventTaskParamsTimeZoneDhaka                     CreateGoogleCalendarEventTaskParamsTimeZone = "Dhaka"
	CreateGoogleCalendarEventTaskParamsTimeZoneDublin                    CreateGoogleCalendarEventTaskParamsTimeZone = "Dublin"
	CreateGoogleCalendarEventTaskParamsTimeZoneEasternTimeUSCanada       CreateGoogleCalendarEventTaskParamsTimeZone = "Eastern Time (US & Canada)"
	CreateGoogleCalendarEventTaskParamsTimeZoneEdinburgh                 CreateGoogleCalendarEventTaskParamsTimeZone = "Edinburgh"
	CreateGoogleCalendarEventTaskParamsTimeZoneEkaterinburg              CreateGoogleCalendarEventTaskParamsTimeZone = "Ekaterinburg"
	CreateGoogleCalendarEventTaskParamsTimeZoneFiji                      CreateGoogleCalendarEventTaskParamsTimeZone = "Fiji"
	CreateGoogleCalendarEventTaskParamsTimeZoneGeorgetown                CreateGoogleCalendarEventTaskParamsTimeZone = "Georgetown"
	CreateGoogleCalendarEventTaskParamsTimeZoneGreenland                 CreateGoogleCalendarEventTaskParamsTimeZone = "Greenland"
	CreateGoogleCalendarEventTaskParamsTimeZoneGuadalajara               CreateGoogleCalendarEventTaskParamsTimeZone = "Guadalajara"
	CreateGoogleCalendarEventTaskParamsTimeZoneGuam                      CreateGoogleCalendarEventTaskParamsTimeZone = "Guam"
	CreateGoogleCalendarEventTaskParamsTimeZoneHanoi                     CreateGoogleCalendarEventTaskParamsTimeZone = "Hanoi"
	CreateGoogleCalendarEventTaskParamsTimeZoneHarare                    CreateGoogleCalendarEventTaskParamsTimeZone = "Harare"
	CreateGoogleCalendarEventTaskParamsTimeZoneHawaii                    CreateGoogleCalendarEventTaskParamsTimeZone = "Hawaii"
	CreateGoogleCalendarEventTaskParamsTimeZoneHelsinki                  CreateGoogleCalendarEventTaskParamsTimeZone = "Helsinki"
	CreateGoogleCalendarEventTaskParamsTimeZoneHobart                    CreateGoogleCalendarEventTaskParamsTimeZone = "Hobart"
	CreateGoogleCalendarEventTaskParamsTimeZoneHongKong                  CreateGoogleCalendarEventTaskParamsTimeZone = "Hong Kong"
	CreateGoogleCalendarEventTaskParamsTimeZoneIndianaEast               CreateGoogleCalendarEventTaskParamsTimeZone = "Indiana (East)"
	CreateGoogleCalendarEventTaskParamsTimeZoneInternationalDateLineWest CreateGoogleCalendarEventTaskParamsTimeZone = "International Date Line West"
	CreateGoogleCalendarEventTaskParamsTimeZoneIrkutsk                   CreateGoogleCalendarEventTaskParamsTimeZone = "Irkutsk"
	CreateGoogleCalendarEventTaskParamsTimeZoneIslamabad                 CreateGoogleCalendarEventTaskParamsTimeZone = "Islamabad"
	CreateGoogleCalendarEventTaskParamsTimeZoneIstanbul                  CreateGoogleCalendarEventTaskParamsTimeZone = "Istanbul"
	CreateGoogleCalendarEventTaskParamsTimeZoneJakarta                   CreateGoogleCalendarEventTaskParamsTimeZone = "Jakarta"
	CreateGoogleCalendarEventTaskParamsTimeZoneJerusalem                 CreateGoogleCalendarEventTaskParamsTimeZone = "Jerusalem"
	CreateGoogleCalendarEventTaskParamsTimeZoneKabul                     CreateGoogleCalendarEventTaskParamsTimeZone = "Kabul"
	CreateGoogleCalendarEventTaskParamsTimeZoneKaliningrad               CreateGoogleCalendarEventTaskParamsTimeZone = "Kaliningrad"
	CreateGoogleCalendarEventTaskParamsTimeZoneKamchatka                 CreateGoogleCalendarEventTaskParamsTimeZone = "Kamchatka"
	CreateGoogleCalendarEventTaskParamsTimeZoneKarachi                   CreateGoogleCalendarEventTaskParamsTimeZone = "Karachi"
	CreateGoogleCalendarEventTaskParamsTimeZoneKathmandu                 CreateGoogleCalendarEventTaskParamsTimeZone = "Kathmandu"
	CreateGoogleCalendarEventTaskParamsTimeZoneKolkata                   CreateGoogleCalendarEventTaskParamsTimeZone = "Kolkata"
	CreateGoogleCalendarEventTaskParamsTimeZoneKrasnoyarsk               CreateGoogleCalendarEventTaskParamsTimeZone = "Krasnoyarsk"
	CreateGoogleCalendarEventTaskParamsTimeZoneKualaLumpur               CreateGoogleCalendarEventTaskParamsTimeZone = "Kuala Lumpur"
	CreateGoogleCalendarEventTaskParamsTimeZoneKuwait                    CreateGoogleCalendarEventTaskParamsTimeZone = "Kuwait"
	CreateGoogleCalendarEventTaskParamsTimeZoneKyiv                      CreateGoogleCalendarEventTaskParamsTimeZone = "Kyiv"
	CreateGoogleCalendarEventTaskParamsTimeZoneLaPaz                     CreateGoogleCalendarEventTaskParamsTimeZone = "La Paz"
	CreateGoogleCalendarEventTaskParamsTimeZoneLima                      CreateGoogleCalendarEventTaskParamsTimeZone = "Lima"
	CreateGoogleCalendarEventTaskParamsTimeZoneLisbon                    CreateGoogleCalendarEventTaskParamsTimeZone = "Lisbon"
	CreateGoogleCalendarEventTaskParamsTimeZoneLjubljana                 CreateGoogleCalendarEventTaskParamsTimeZone = "Ljubljana"
	CreateGoogleCalendarEventTaskParamsTimeZoneLondon                    CreateGoogleCalendarEventTaskParamsTimeZone = "London"
	CreateGoogleCalendarEventTaskParamsTimeZoneMadrid                    CreateGoogleCalendarEventTaskParamsTimeZone = "Madrid"
	CreateGoogleCalendarEventTaskParamsTimeZoneMagadan                   CreateGoogleCalendarEventTaskParamsTimeZone = "Magadan"
	CreateGoogleCalendarEventTaskParamsTimeZoneMarshallIs                CreateGoogleCalendarEventTaskParamsTimeZone = "Marshall Is."
	CreateGoogleCalendarEventTaskParamsTimeZoneMazatlan                  CreateGoogleCalendarEventTaskParamsTimeZone = "Mazatlan"
	CreateGoogleCalendarEventTaskParamsTimeZoneMelbourne                 CreateGoogleCalendarEventTaskParamsTimeZone = "Melbourne"
	CreateGoogleCalendarEventTaskParamsTimeZoneMexicoCity                CreateGoogleCalendarEventTaskParamsTimeZone = "Mexico City"
	CreateGoogleCalendarEventTaskParamsTimeZoneMidAtlantic               CreateGoogleCalendarEventTaskParamsTimeZone = "Mid-Atlantic"
	CreateGoogleCalendarEventTaskParamsTimeZoneMidwayIsland              CreateGoogleCalendarEventTaskParamsTimeZone = "Midway Island"
	CreateGoogleCalendarEventTaskParamsTimeZoneMinsk                     CreateGoogleCalendarEventTaskParamsTimeZone = "Minsk"
	CreateGoogleCalendarEventTaskParamsTimeZoneMonrovia                  CreateGoogleCalendarEventTaskParamsTimeZone = "Monrovia"
	CreateGoogleCalendarEventTaskParamsTimeZoneMonterrey                 CreateGoogleCalendarEventTaskParamsTimeZone = "Monterrey"
	CreateGoogleCalendarEventTaskParamsTimeZoneMontevideo                CreateGoogleCalendarEventTaskParamsTimeZone = "Montevideo"
	CreateGoogleCalendarEventTaskParamsTimeZoneMoscow                    CreateGoogleCalendarEventTaskParamsTimeZone = "Moscow"
	CreateGoogleCalendarEventTaskParamsTimeZoneMountainTimeUSCanada      CreateGoogleCalendarEventTaskParamsTimeZone = "Mountain Time (US & Canada)"
	CreateGoogleCalendarEventTaskParamsTimeZoneMumbai                    CreateGoogleCalendarEventTaskParamsTimeZone = "Mumbai"
	CreateGoogleCalendarEventTaskParamsTimeZoneMuscat                    CreateGoogleCalendarEventTaskParamsTimeZone = "Muscat"
	CreateGoogleCalendarEventTaskParamsTimeZoneNairobi                   CreateGoogleCalendarEventTaskParamsTimeZone = "Nairobi"
	CreateGoogleCalendarEventTaskParamsTimeZoneNewCaledonia              CreateGoogleCalendarEventTaskParamsTimeZone = "New Caledonia"
	CreateGoogleCalendarEventTaskParamsTimeZoneNewDelhi                  CreateGoogleCalendarEventTaskParamsTimeZone = "New Delhi"
	CreateGoogleCalendarEventTaskParamsTimeZoneNewfoundland              CreateGoogleCalendarEventTaskParamsTimeZone = "Newfoundland"
	CreateGoogleCalendarEventTaskParamsTimeZoneNovosibirsk               CreateGoogleCalendarEventTaskParamsTimeZone = "Novosibirsk"
	CreateGoogleCalendarEventTaskParamsTimeZoneNukualofa                 CreateGoogleCalendarEventTaskParamsTimeZone = "Nuku'alofa"
	CreateGoogleCalendarEventTaskParamsTimeZoneOsaka                     CreateGoogleCalendarEventTaskParamsTimeZone = "Osaka"
	CreateGoogleCalendarEventTaskParamsTimeZonePacificTimeUSCanada       CreateGoogleCalendarEventTaskParamsTimeZone = "Pacific Time (US & Canada)"
	CreateGoogleCalendarEventTaskParamsTimeZoneParis                     CreateGoogleCalendarEventTaskParamsTimeZone = "Paris"
	CreateGoogleCalendarEventTaskParamsTimeZonePerth                     CreateGoogleCalendarEventTaskParamsTimeZone = "Perth"
	CreateGoogleCalendarEventTaskParamsTimeZonePortMoresby               CreateGoogleCalendarEventTaskParamsTimeZone = "Port Moresby"
	CreateGoogleCalendarEventTaskParamsTimeZonePrague                    CreateGoogleCalendarEventTaskParamsTimeZone = "Prague"
	CreateGoogleCalendarEventTaskParamsTimeZonePretoria                  CreateGoogleCalendarEventTaskParamsTimeZone = "Pretoria"
	CreateGoogleCalendarEventTaskParamsTimeZonePuertoRico                CreateGoogleCalendarEventTaskParamsTimeZone = "Puerto Rico"
	CreateGoogleCalendarEventTaskParamsTimeZoneQuito                     CreateGoogleCalendarEventTaskParamsTimeZone = "Quito"
	CreateGoogleCalendarEventTaskParamsTimeZoneRangoon                   CreateGoogleCalendarEventTaskParamsTimeZone = "Rangoon"
	CreateGoogleCalendarEventTaskParamsTimeZoneRiga                      CreateGoogleCalendarEventTaskParamsTimeZone = "Riga"
	CreateGoogleCalendarEventTaskParamsTimeZoneRiyadh                    CreateGoogleCalendarEventTaskParamsTimeZone = "Riyadh"
	CreateGoogleCalendarEventTaskParamsTimeZoneRome                      CreateGoogleCalendarEventTaskParamsTimeZone = "Rome"
	CreateGoogleCalendarEventTaskParamsTimeZoneSamara                    CreateGoogleCalendarEventTaskParamsTimeZone = "Samara"
	CreateGoogleCalendarEventTaskParamsTimeZoneSamoa                     CreateGoogleCalendarEventTaskParamsTimeZone = "Samoa"
	CreateGoogleCalendarEventTaskParamsTimeZoneSantiago                  CreateGoogleCalendarEventTaskParamsTimeZone = "Santiago"
	CreateGoogleCalendarEventTaskParamsTimeZoneSapporo                   CreateGoogleCalendarEventTaskParamsTimeZone = "Sapporo"
	CreateGoogleCalendarEventTaskParamsTimeZoneSarajevo                  CreateGoogleCalendarEventTaskParamsTimeZone = "Sarajevo"
	CreateGoogleCalendarEventTaskParamsTimeZoneSaskatchewan              CreateGoogleCalendarEventTaskParamsTimeZone = "Saskatchewan"
	CreateGoogleCalendarEventTaskParamsTimeZoneSeoul                     CreateGoogleCalendarEventTaskParamsTimeZone = "Seoul"
	CreateGoogleCalendarEventTaskParamsTimeZoneSingapore                 CreateGoogleCalendarEventTaskParamsTimeZone = "Singapore"
	CreateGoogleCalendarEventTaskParamsTimeZoneSkopje                    CreateGoogleCalendarEventTaskParamsTimeZone = "Skopje"
	CreateGoogleCalendarEventTaskParamsTimeZoneSofia                     CreateGoogleCalendarEventTaskParamsTimeZone = "Sofia"
	CreateGoogleCalendarEventTaskParamsTimeZoneSolomonIs                 CreateGoogleCalendarEventTaskParamsTimeZone = "Solomon Is."
	CreateGoogleCalendarEventTaskParamsTimeZoneSrednekolymsk             CreateGoogleCalendarEventTaskParamsTimeZone = "Srednekolymsk"
	CreateGoogleCalendarEventTaskParamsTimeZoneSriJayawardenepura        CreateGoogleCalendarEventTaskParamsTimeZone = "Sri Jayawardenepura"
	CreateGoogleCalendarEventTaskParamsTimeZoneStPetersburg              CreateGoogleCalendarEventTaskParamsTimeZone = "St. Petersburg"
	CreateGoogleCalendarEventTaskParamsTimeZoneStockholm                 CreateGoogleCalendarEventTaskParamsTimeZone = "Stockholm"
	CreateGoogleCalendarEventTaskParamsTimeZoneSydney                    CreateGoogleCalendarEventTaskParamsTimeZone = "Sydney"
	CreateGoogleCalendarEventTaskParamsTimeZoneTaipei                    CreateGoogleCalendarEventTaskParamsTimeZone = "Taipei"
	CreateGoogleCalendarEventTaskParamsTimeZoneTallinn                   CreateGoogleCalendarEventTaskParamsTimeZone = "Tallinn"
	CreateGoogleCalendarEventTaskParamsTimeZoneTashkent                  CreateGoogleCalendarEventTaskParamsTimeZone = "Tashkent"
	CreateGoogleCalendarEventTaskParamsTimeZoneTbilisi                   CreateGoogleCalendarEventTaskParamsTimeZone = "Tbilisi"
	CreateGoogleCalendarEventTaskParamsTimeZoneTehran                    CreateGoogleCalendarEventTaskParamsTimeZone = "Tehran"
	CreateGoogleCalendarEventTaskParamsTimeZoneTijuana                   CreateGoogleCalendarEventTaskParamsTimeZone = "Tijuana"
	CreateGoogleCalendarEventTaskParamsTimeZoneTokelauIs                 CreateGoogleCalendarEventTaskParamsTimeZone = "Tokelau Is."
	CreateGoogleCalendarEventTaskParamsTimeZoneTokyo                     CreateGoogleCalendarEventTaskParamsTimeZone = "Tokyo"
	CreateGoogleCalendarEventTaskParamsTimeZoneUTC                       CreateGoogleCalendarEventTaskParamsTimeZone = "UTC"
	CreateGoogleCalendarEventTaskParamsTimeZoneUlaanbaatar               CreateGoogleCalendarEventTaskParamsTimeZone = "Ulaanbaatar"
	CreateGoogleCalendarEventTaskParamsTimeZoneUrumqi                    CreateGoogleCalendarEventTaskParamsTimeZone = "Urumqi"
	CreateGoogleCalendarEventTaskParamsTimeZoneVienna                    CreateGoogleCalendarEventTaskParamsTimeZone = "Vienna"
	CreateGoogleCalendarEventTaskParamsTimeZoneVilnius                   CreateGoogleCalendarEventTaskParamsTimeZone = "Vilnius"
	CreateGoogleCalendarEventTaskParamsTimeZoneVladivostok               CreateGoogleCalendarEventTaskParamsTimeZone = "Vladivostok"
	CreateGoogleCalendarEventTaskParamsTimeZoneVolgograd                 CreateGoogleCalendarEventTaskParamsTimeZone = "Volgograd"
	CreateGoogleCalendarEventTaskParamsTimeZoneWarsaw                    CreateGoogleCalendarEventTaskParamsTimeZone = "Warsaw"
	CreateGoogleCalendarEventTaskParamsTimeZoneWellington                CreateGoogleCalendarEventTaskParamsTimeZone = "Wellington"
	CreateGoogleCalendarEventTaskParamsTimeZoneWestCentralAfrica         CreateGoogleCalendarEventTaskParamsTimeZone = "West Central Africa"
	CreateGoogleCalendarEventTaskParamsTimeZoneYakutsk                   CreateGoogleCalendarEventTaskParamsTimeZone = "Yakutsk"
	CreateGoogleCalendarEventTaskParamsTimeZoneYerevan                   CreateGoogleCalendarEventTaskParamsTimeZone = "Yerevan"
	CreateGoogleCalendarEventTaskParamsTimeZoneZagreb                    CreateGoogleCalendarEventTaskParamsTimeZone = "Zagreb"
	CreateGoogleCalendarEventTaskParamsTimeZoneZurich                    CreateGoogleCalendarEventTaskParamsTimeZone = "Zurich"
)

// Defines values for CreateGoogleDocsPageTaskParamsTaskType.
const (
	CreateGoogleDocsPageTaskParamsTaskTypeCreateGoogleDocsPage CreateGoogleDocsPageTaskParamsTaskType = "create_google_docs_page"
)

// Defines values for CreateGoogleDocsPermissionsTaskParamsTaskType.
const (
	CreateGoogleDocsPermissions CreateGoogleDocsPermissionsTaskParamsTaskType = "create_google_docs_permissions"
)

// Defines values for CreateGoogleMeetingTaskParamsConferenceSolutionKey.
const (
	CreateGoogleMeetingTaskParamsConferenceSolutionKeyAddOn             CreateGoogleMeetingTaskParamsConferenceSolutionKey = "addOn"
	CreateGoogleMeetingTaskParamsConferenceSolutionKeyEventHangout      CreateGoogleMeetingTaskParamsConferenceSolutionKey = "eventHangout"
	CreateGoogleMeetingTaskParamsConferenceSolutionKeyEventNamedHangout CreateGoogleMeetingTaskParamsConferenceSolutionKey = "eventNamedHangout"
	CreateGoogleMeetingTaskParamsConferenceSolutionKeyHangoutsMeet      CreateGoogleMeetingTaskParamsConferenceSolutionKey = "hangoutsMeet"
)

// Defines values for CreateGoogleMeetingTaskParamsTaskType.
const (
	CreateGoogleMeeting CreateGoogleMeetingTaskParamsTaskType = "create_google_meeting"
)

// Defines values for CreateIncidentPostmortemTaskParamsTaskType.
const (
	CreateIncidentPostmortem CreateIncidentPostmortemTaskParamsTaskType = "create_incident_postmortem"
)

// Defines values for CreateIncidentTaskParamsTaskType.
const (
	CreateIncident CreateIncidentTaskParamsTaskType = "create_incident"
)

// Defines values for CreateJiraIssueTaskParamsTaskType.
const (
	CreateJiraIssue CreateJiraIssueTaskParamsTaskType = "create_jira_issue"
)

// Defines values for CreateJiraSubtaskTaskParamsTaskType.
const (
	CreateJiraSubtask CreateJiraSubtaskTaskParamsTaskType = "create_jira_subtask"
)

// Defines values for CreateLinearIssueCommentTaskParamsTaskType.
const (
	CreateLinearIssueComment CreateLinearIssueCommentTaskParamsTaskType = "create_linear_issue_comment"
)

// Defines values for CreateLinearIssueTaskParamsTaskType.
const (
	CreateLinearIssue CreateLinearIssueTaskParamsTaskType = "create_linear_issue"
)

// Defines values for CreateLinearSubtaskIssueTaskParamsTaskType.
const (
	CreateLinearSubtaskIssue CreateLinearSubtaskIssueTaskParamsTaskType = "create_linear_subtask_issue"
)

// Defines values for CreateMicrosoftTeamsMeetingTaskParamsTaskType.
const (
	CreateMicrosoftTeamsMeeting CreateMicrosoftTeamsMeetingTaskParamsTaskType = "create_microsoft_teams_meeting"
)

// Defines values for CreateNotionPageTaskParamsTaskType.
const (
	CreateNotionPage CreateNotionPageTaskParamsTaskType = "create_notion_page"
)

// Defines values for CreateOpsgenieAlertTaskParamsPriority.
const (
	CreateOpsgenieAlertTaskParamsPriorityAuto CreateOpsgenieAlertTaskParamsPriority = "auto"
	CreateOpsgenieAlertTaskParamsPriorityP1   CreateOpsgenieAlertTaskParamsPriority = "P1"
	CreateOpsgenieAlertTaskParamsPriorityP2   CreateOpsgenieAlertTaskParamsPriority = "P2"
	CreateOpsgenieAlertTaskParamsPriorityP3   CreateOpsgenieAlertTaskParamsPriority = "P3"
	CreateOpsgenieAlertTaskParamsPriorityP4   CreateOpsgenieAlertTaskParamsPriority = "P4"
	CreateOpsgenieAlertTaskParamsPriorityP5   CreateOpsgenieAlertTaskParamsPriority = "P5"
)

// Defines values for CreateOpsgenieAlertTaskParamsTaskType.
const (
	CreateOpsgenieAlert CreateOpsgenieAlertTaskParamsTaskType = "create_opsgenie_alert"
)

// Defines values for CreatePagerdutyStatusUpdateParamsTaskType.
const (
	CreatePagerdutyStatusUpdate CreatePagerdutyStatusUpdateParamsTaskType = "create_pagerduty_status_update"
)

// Defines values for CreatePagertreeAlertTaskParamsSeverity.
const (
	CreatePagertreeAlertTaskParamsSeverityAuto CreatePagertreeAlertTaskParamsSeverity = "auto"
	CreatePagertreeAlertTaskParamsSeveritySEV1 CreatePagertreeAlertTaskParamsSeverity = "SEV-1"
	CreatePagertreeAlertTaskParamsSeveritySEV2 CreatePagertreeAlertTaskParamsSeverity = "SEV-2"
	CreatePagertreeAlertTaskParamsSeveritySEV3 CreatePagertreeAlertTaskParamsSeverity = "SEV-3"
	CreatePagertreeAlertTaskParamsSeveritySEV4 CreatePagertreeAlertTaskParamsSeverity = "SEV-4"
)

// Defines values for CreatePagertreeAlertTaskParamsTaskType.
const (
	CreatePagertreeAlert CreatePagertreeAlertTaskParamsTaskType = "create_pagertree_alert"
)

// Defines values for CreatePagertreeAlertTaskParamsUrgency.
const (
	CreatePagertreeAlertTaskParamsUrgencyAuto     CreatePagertreeAlertTaskParamsUrgency = "auto"
	CreatePagertreeAlertTaskParamsUrgencyCritical CreatePagertreeAlertTaskParamsUrgency = "critical"
	CreatePagertreeAlertTaskParamsUrgencyHigh     CreatePagertreeAlertTaskParamsUrgency = "high"
	CreatePagertreeAlertTaskParamsUrgencyLow      CreatePagertreeAlertTaskParamsUrgency = "low"
	CreatePagertreeAlertTaskParamsUrgencyMedium   CreatePagertreeAlertTaskParamsUrgency = "medium"
)

// Defines values for CreateQuipPageTaskParamsTaskType.
const (
	CreateQuipPageTaskParamsTaskTypeCreateGoogleDocsPage CreateQuipPageTaskParamsTaskType = "create_google_docs_page"
)

// Defines values for CreateServiceNowIncidentTaskParamsTaskType.
const (
	CreateServiceNowIncident CreateServiceNowIncidentTaskParamsTaskType = "create_service_now_incident"
)

// Defines values for CreateShortcutStoryTaskParamsKind.
const (
	Bug     CreateShortcutStoryTaskParamsKind = "bug"
	Chore   CreateShortcutStoryTaskParamsKind = "chore"
	Feature CreateShortcutStoryTaskParamsKind = "feature"
)

// Defines values for CreateShortcutStoryTaskParamsTaskType.
const (
	CreateShortcutStory CreateShortcutStoryTaskParamsTaskType = "create_shortcut_story"
)

// Defines values for CreateShortcutTaskTaskParamsTaskType.
const (
	CreateShortcutTask CreateShortcutTaskTaskParamsTaskType = "create_shortcut_task"
)

// Defines values for CreateSlackChannelTaskParamsPrivate.
const (
	CreateSlackChannelTaskParamsPrivateAuto  CreateSlackChannelTaskParamsPrivate = "auto"
	CreateSlackChannelTaskParamsPrivateFalse CreateSlackChannelTaskParamsPrivate = "false"
	CreateSlackChannelTaskParamsPrivateTrue  CreateSlackChannelTaskParamsPrivate = "true"
)

// Defines values for CreateSlackChannelTaskParamsTaskType.
const (
	CreateSlackChannel CreateSlackChannelTaskParamsTaskType = "create_slack_channel"
)

// Defines values for CreateTrelloCardTaskParamsTaskType.
const (
	CreateTrelloCard CreateTrelloCardTaskParamsTaskType = "create_trello_card"
)

// Defines values for CreateWebexMeetingTaskParamsTaskType.
const (
	CreateWebexMeeting CreateWebexMeetingTaskParamsTaskType = "create_webex_meeting"
)

// Defines values for CreateZendeskJiraLinkParamsTaskType.
const (
	CreateZendeskJiraLink CreateZendeskJiraLinkParamsTaskType = "create_zendesk_jira_link"
)

// Defines values for CreateZendeskTicketTaskParamsKind.
const (
	CreateZendeskTicketTaskParamsKindIncident CreateZendeskTicketTaskParamsKind = "incident"
	CreateZendeskTicketTaskParamsKindProblem  CreateZendeskTicketTaskParamsKind = "problem"
	CreateZendeskTicketTaskParamsKindQuestion CreateZendeskTicketTaskParamsKind = "question"
	CreateZendeskTicketTaskParamsKindTask     CreateZendeskTicketTaskParamsKind = "task"
)

// Defines values for CreateZendeskTicketTaskParamsTaskType.
const (
	CreateZendeskTicket CreateZendeskTicketTaskParamsTaskType = "create_zendesk_ticket"
)

// Defines values for CreateZoomMeetingTaskParamsAutoRecording.
const (
	Cloud CreateZoomMeetingTaskParamsAutoRecording = "cloud"
	Local CreateZoomMeetingTaskParamsAutoRecording = "local"
	None  CreateZoomMeetingTaskParamsAutoRecording = "none"
)

// Defines values for CreateZoomMeetingTaskParamsTaskType.
const (
	CreateZoomMeeting CreateZoomMeetingTaskParamsTaskType = "create_zoom_meeting"
)

// Defines values for CustomFieldRequired.
const (
	CustomFieldRequiredIncidentForm                CustomFieldRequired = "incident_form"
	CustomFieldRequiredIncidentMitigationForm      CustomFieldRequired = "incident_mitigation_form"
	CustomFieldRequiredIncidentMitigationSlackForm CustomFieldRequired = "incident_mitigation_slack_form"
	CustomFieldRequiredIncidentPostMortemForm      CustomFieldRequired = "incident_post_mortem_form"
	CustomFieldRequiredIncidentResolutionForm      CustomFieldRequired = "incident_resolution_form"
	CustomFieldRequiredIncidentResolutionSlackForm CustomFieldRequired = "incident_resolution_slack_form"
	CustomFieldRequiredIncidentSlackForm           CustomFieldRequired = "incident_slack_form"
)

// Defines values for CustomFieldShown.
const (
	CustomFieldShownIncidentForm                CustomFieldShown = "incident_form"
	CustomFieldShownIncidentMitigationForm      CustomFieldShown = "incident_mitigation_form"
	CustomFieldShownIncidentMitigationSlackForm CustomFieldShown = "incident_mitigation_slack_form"
	CustomFieldShownIncidentPostMortem          CustomFieldShown = "incident_post_mortem"
	CustomFieldShownIncidentPostMortemForm      CustomFieldShown = "incident_post_mortem_form"
	CustomFieldShownIncidentResolutionForm      CustomFieldShown = "incident_resolution_form"
	CustomFieldShownIncidentResolutionSlackForm CustomFieldShown = "incident_resolution_slack_form"
	CustomFieldShownIncidentSlackForm           CustomFieldShown = "incident_slack_form"
)

// Defines values for CustomFieldListDataAttributesRequired.
const (
	CustomFieldListDataAttributesRequiredIncidentForm                CustomFieldListDataAttributesRequired = "incident_form"
	CustomFieldListDataAttributesRequiredIncidentMitigationForm      CustomFieldListDataAttributesRequired = "incident_mitigation_form"
	CustomFieldListDataAttributesRequiredIncidentMitigationSlackForm CustomFieldListDataAttributesRequired = "incident_mitigation_slack_form"
	CustomFieldListDataAttributesRequiredIncidentPostMortemForm      CustomFieldListDataAttributesRequired = "incident_post_mortem_form"
	CustomFieldListDataAttributesRequiredIncidentResolutionForm      CustomFieldListDataAttributesRequired = "incident_resolution_form"
	CustomFieldListDataAttributesRequiredIncidentResolutionSlackForm CustomFieldListDataAttributesRequired = "incident_resolution_slack_form"
	CustomFieldListDataAttributesRequiredIncidentSlackForm           CustomFieldListDataAttributesRequired = "incident_slack_form"
)

// Defines values for CustomFieldListDataAttributesShown.
const (
	CustomFieldListDataAttributesShownIncidentForm                CustomFieldListDataAttributesShown = "incident_form"
	CustomFieldListDataAttributesShownIncidentMitigationForm      CustomFieldListDataAttributesShown = "incident_mitigation_form"
	CustomFieldListDataAttributesShownIncidentMitigationSlackForm CustomFieldListDataAttributesShown = "incident_mitigation_slack_form"
	CustomFieldListDataAttributesShownIncidentPostMortem          CustomFieldListDataAttributesShown = "incident_post_mortem"
	CustomFieldListDataAttributesShownIncidentPostMortemForm      CustomFieldListDataAttributesShown = "incident_post_mortem_form"
	CustomFieldListDataAttributesShownIncidentResolutionForm      CustomFieldListDataAttributesShown = "incident_resolution_form"
	CustomFieldListDataAttributesShownIncidentResolutionSlackForm CustomFieldListDataAttributesShown = "incident_resolution_slack_form"
	CustomFieldListDataAttributesShownIncidentSlackForm           CustomFieldListDataAttributesShown = "incident_slack_form"
)

// Defines values for CustomFieldListDataType.
const (
	CustomFieldListDataTypeCustomFields CustomFieldListDataType = "custom_fields"
)

// Defines values for CustomFieldOptionListDataType.
const (
	CustomFieldOptionListDataTypeCustomFieldOptions CustomFieldOptionListDataType = "custom_field_options"
)

// Defines values for CustomFieldOptionResponseDataType.
const (
	CustomFieldOptionResponseDataTypeCustomFieldOptions CustomFieldOptionResponseDataType = "custom_field_options"
)

// Defines values for CustomFieldResponseDataAttributesRequired.
const (
	CustomFieldResponseDataAttributesRequiredIncidentForm                CustomFieldResponseDataAttributesRequired = "incident_form"
	CustomFieldResponseDataAttributesRequiredIncidentMitigationForm      CustomFieldResponseDataAttributesRequired = "incident_mitigation_form"
	CustomFieldResponseDataAttributesRequiredIncidentMitigationSlackForm CustomFieldResponseDataAttributesRequired = "incident_mitigation_slack_form"
	CustomFieldResponseDataAttributesRequiredIncidentPostMortemForm      CustomFieldResponseDataAttributesRequired = "incident_post_mortem_form"
	CustomFieldResponseDataAttributesRequiredIncidentResolutionForm      CustomFieldResponseDataAttributesRequired = "incident_resolution_form"
	CustomFieldResponseDataAttributesRequiredIncidentResolutionSlackForm CustomFieldResponseDataAttributesRequired = "incident_resolution_slack_form"
	CustomFieldResponseDataAttributesRequiredIncidentSlackForm           CustomFieldResponseDataAttributesRequired = "incident_slack_form"
)

// Defines values for CustomFieldResponseDataAttributesShown.
const (
	CustomFieldResponseDataAttributesShownIncidentForm                CustomFieldResponseDataAttributesShown = "incident_form"
	CustomFieldResponseDataAttributesShownIncidentMitigationForm      CustomFieldResponseDataAttributesShown = "incident_mitigation_form"
	CustomFieldResponseDataAttributesShownIncidentMitigationSlackForm CustomFieldResponseDataAttributesShown = "incident_mitigation_slack_form"
	CustomFieldResponseDataAttributesShownIncidentPostMortem          CustomFieldResponseDataAttributesShown = "incident_post_mortem"
	CustomFieldResponseDataAttributesShownIncidentPostMortemForm      CustomFieldResponseDataAttributesShown = "incident_post_mortem_form"
	CustomFieldResponseDataAttributesShownIncidentResolutionForm      CustomFieldResponseDataAttributesShown = "incident_resolution_form"
	CustomFieldResponseDataAttributesShownIncidentResolutionSlackForm CustomFieldResponseDataAttributesShown = "incident_resolution_slack_form"
	CustomFieldResponseDataAttributesShownIncidentSlackForm           CustomFieldResponseDataAttributesShown = "incident_slack_form"
)

// Defines values for CustomFieldResponseDataType.
const (
	CustomFieldResponseDataTypeCustomFields CustomFieldResponseDataType = "custom_fields"
)

// Defines values for DashboardColor.
const (
	DashboardColorHashD7F5E1 DashboardColor = "#D7F5E1"
	DashboardColorHashE9E2FF DashboardColor = "#E9E2FF"
	DashboardColorHashFAE6E8 DashboardColor = "#FAE6E8"
	DashboardColorHashFAEEE6 DashboardColor = "#FAEEE6"
	DashboardColorHashFCF2CF DashboardColor = "#FCF2CF"
)

// Defines values for DashboardOwner.
const (
	DashboardOwnerTeam DashboardOwner = "team"
	DashboardOwnerUser DashboardOwner = "user"
)

// Defines values for DashboardListDataAttributesColor.
const (
	DashboardListDataAttributesColorHashD7F5E1 DashboardListDataAttributesColor = "#D7F5E1"
	DashboardListDataAttributesColorHashE9E2FF DashboardListDataAttributesColor = "#E9E2FF"
	DashboardListDataAttributesColorHashFAE6E8 DashboardListDataAttributesColor = "#FAE6E8"
	DashboardListDataAttributesColorHashFAEEE6 DashboardListDataAttributesColor = "#FAEEE6"
	DashboardListDataAttributesColorHashFCF2CF DashboardListDataAttributesColor = "#FCF2CF"
)

// Defines values for DashboardListDataAttributesOwner.
const (
	DashboardListDataAttributesOwnerTeam DashboardListDataAttributesOwner = "team"
	DashboardListDataAttributesOwnerUser DashboardListDataAttributesOwner = "user"
)

// Defines values for DashboardListDataType.
const (
	DashboardListDataTypeDashboards DashboardListDataType = "dashboards"
)

// Defines values for DashboardResponseDataAttributesColor.
const (
	DashboardResponseDataAttributesColorHashD7F5E1 DashboardResponseDataAttributesColor = "#D7F5E1"
	DashboardResponseDataAttributesColorHashE9E2FF DashboardResponseDataAttributesColor = "#E9E2FF"
	DashboardResponseDataAttributesColorHashFAE6E8 DashboardResponseDataAttributesColor = "#FAE6E8"
	DashboardResponseDataAttributesColorHashFAEEE6 DashboardResponseDataAttributesColor = "#FAEEE6"
	DashboardResponseDataAttributesColorHashFCF2CF DashboardResponseDataAttributesColor = "#FCF2CF"
)

// Defines values for DashboardResponseDataAttributesOwner.
const (
	DashboardResponseDataAttributesOwnerTeam DashboardResponseDataAttributesOwner = "team"
	DashboardResponseDataAttributesOwnerUser DashboardResponseDataAttributesOwner = "user"
)

// Defines values for DashboardResponseDataType.
const (
	DashboardResponseDataTypeDashboards DashboardResponseDataType = "dashboards"
)

// Defines values for EnvironmentListDataType.
const (
	EnvironmentListDataTypeEnvironments EnvironmentListDataType = "environments"
)

// Defines values for EnvironmentResponseDataType.
const (
	EnvironmentResponseDataTypeEnvironments EnvironmentResponseDataType = "environments"
)

// Defines values for FormFieldInputKind.
const (
	FormFieldInputKindCheckbox    FormFieldInputKind = "checkbox"
	FormFieldInputKindDate        FormFieldInputKind = "date"
	FormFieldInputKindDatetime    FormFieldInputKind = "datetime"
	FormFieldInputKindMultiSelect FormFieldInputKind = "multi_select"
	FormFieldInputKindNumber      FormFieldInputKind = "number"
	FormFieldInputKindSelect      FormFieldInputKind = "select"
	FormFieldInputKindTags        FormFieldInputKind = "tags"
	FormFieldInputKindText        FormFieldInputKind = "text"
	FormFieldInputKindTextarea    FormFieldInputKind = "textarea"
	FormFieldInputKindUsers       FormFieldInputKind = "users"
)

// Defines values for FormFieldKind.
const (
	FormFieldKindAttachAlerts                FormFieldKind = "attach_alerts"
	FormFieldKindCauses                      FormFieldKind = "causes"
	FormFieldKindCustom                      FormFieldKind = "custom"
	FormFieldKindEnvironments                FormFieldKind = "environments"
	FormFieldKindFunctionalities             FormFieldKind = "functionalities"
	FormFieldKindLabels                      FormFieldKind = "labels"
	FormFieldKindManualStartingDatetimeField FormFieldKind = "manual_starting_datetime_field"
	FormFieldKindMarkAsBackfilled            FormFieldKind = "mark_as_backfilled"
	FormFieldKindMarkAsInTriage              FormFieldKind = "mark_as_in_triage"
	FormFieldKindMarkAsTest                  FormFieldKind = "mark_as_test"
	FormFieldKindNotifyEmails                FormFieldKind = "notify_emails"
	FormFieldKindServices                    FormFieldKind = "services"
	FormFieldKindSeverity                    FormFieldKind = "severity"
	FormFieldKindShowOngoingIncidents        FormFieldKind = "show_ongoing_incidents"
	FormFieldKindSummary                     FormFieldKind = "summary"
	FormFieldKindTeams                       FormFieldKind = "teams"
	FormFieldKindTitle                       FormFieldKind = "title"
	FormFieldKindTriggerManualWorkflows      FormFieldKind = "trigger_manual_workflows"
	FormFieldKindTypes                       FormFieldKind = "types"
	FormFieldKindVisibility                  FormFieldKind = "visibility"
)

// Defines values for FormFieldRequired.
const (
	FormFieldRequiredSlackIncidentCancellationForm    FormFieldRequired = "slack_incident_cancellation_form"
	FormFieldRequiredSlackIncidentMitigationForm      FormFieldRequired = "slack_incident_mitigation_form"
	FormFieldRequiredSlackIncidentResolutionForm      FormFieldRequired = "slack_incident_resolution_form"
	FormFieldRequiredSlackNewIncidentForm             FormFieldRequired = "slack_new_incident_form"
	FormFieldRequiredSlackScheduledIncidentForm       FormFieldRequired = "slack_scheduled_incident_form"
	FormFieldRequiredSlackUpdateIncidentForm          FormFieldRequired = "slack_update_incident_form"
	FormFieldRequiredSlackUpdateIncidentStatusForm    FormFieldRequired = "slack_update_incident_status_form"
	FormFieldRequiredSlackUpdateScheduledIncidentForm FormFieldRequired = "slack_update_scheduled_incident_form"
	FormFieldRequiredWebIncidentCancellationForm      FormFieldRequired = "web_incident_cancellation_form"
	FormFieldRequiredWebIncidentMitigationForm        FormFieldRequired = "web_incident_mitigation_form"
	FormFieldRequiredWebIncidentPostMortemForm        FormFieldRequired = "web_incident_post_mortem_form"
	FormFieldRequiredWebIncidentResolutionForm        FormFieldRequired = "web_incident_resolution_form"
	FormFieldRequiredWebNewIncidentForm               FormFieldRequired = "web_new_incident_form"
	FormFieldRequiredWebScheduledIncidentForm         FormFieldRequired = "web_scheduled_incident_form"
	FormFieldRequiredWebUpdateIncidentForm            FormFieldRequired = "web_update_incident_form"
	FormFieldRequiredWebUpdateScheduledIncidentForm   FormFieldRequired = "web_update_scheduled_incident_form"
)

// Defines values for FormFieldShown.
const (
	FormFieldShownIncidentPostMortem               FormFieldShown = "incident_post_mortem"
	FormFieldShownSlackIncidentCancellationForm    FormFieldShown = "slack_incident_cancellation_form"
	FormFieldShownSlackIncidentMitigationForm      FormFieldShown = "slack_incident_mitigation_form"
	FormFieldShownSlackIncidentResolutionForm      FormFieldShown = "slack_incident_resolution_form"
	FormFieldShownSlackNewIncidentForm             FormFieldShown = "slack_new_incident_form"
	FormFieldShownSlackScheduledIncidentForm       FormFieldShown = "slack_scheduled_incident_form"
	FormFieldShownSlackUpdateIncidentForm          FormFieldShown = "slack_update_incident_form"
	FormFieldShownSlackUpdateIncidentStatusForm    FormFieldShown = "slack_update_incident_status_form"
	FormFieldShownSlackUpdateScheduledIncidentForm FormFieldShown = "slack_update_scheduled_incident_form"
	FormFieldShownWebIncidentCancellationForm      FormFieldShown = "web_incident_cancellation_form"
	FormFieldShownWebIncidentMitigationForm        FormFieldShown = "web_incident_mitigation_form"
	FormFieldShownWebIncidentPostMortemForm        FormFieldShown = "web_incident_post_mortem_form"
	FormFieldShownWebIncidentResolutionForm        FormFieldShown = "web_incident_resolution_form"
	FormFieldShownWebNewIncidentForm               FormFieldShown = "web_new_incident_form"
	FormFieldShownWebScheduledIncidentForm         FormFieldShown = "web_scheduled_incident_form"
	FormFieldShownWebUpdateIncidentForm            FormFieldShown = "web_update_incident_form"
	FormFieldShownWebUpdateScheduledIncidentForm   FormFieldShown = "web_update_scheduled_incident_form"
)

// Defines values for FormFieldListDataAttributesInputKind.
const (
	FormFieldListDataAttributesInputKindCheckbox    FormFieldListDataAttributesInputKind = "checkbox"
	FormFieldListDataAttributesInputKindDate        FormFieldListDataAttributesInputKind = "date"
	FormFieldListDataAttributesInputKindDatetime    FormFieldListDataAttributesInputKind = "datetime"
	FormFieldListDataAttributesInputKindMultiSelect FormFieldListDataAttributesInputKind = "multi_select"
	FormFieldListDataAttributesInputKindNumber      FormFieldListDataAttributesInputKind = "number"
	FormFieldListDataAttributesInputKindSelect      FormFieldListDataAttributesInputKind = "select"
	FormFieldListDataAttributesInputKindTags        FormFieldListDataAttributesInputKind = "tags"
	FormFieldListDataAttributesInputKindText        FormFieldListDataAttributesInputKind = "text"
	FormFieldListDataAttributesInputKindTextarea    FormFieldListDataAttributesInputKind = "textarea"
	FormFieldListDataAttributesInputKindUsers       FormFieldListDataAttributesInputKind = "users"
)

// Defines values for FormFieldListDataAttributesKind.
const (
	FormFieldListDataAttributesKindAttachAlerts                FormFieldListDataAttributesKind = "attach_alerts"
	FormFieldListDataAttributesKindCauses                      FormFieldListDataAttributesKind = "causes"
	FormFieldListDataAttributesKindCustom                      FormFieldListDataAttributesKind = "custom"
	FormFieldListDataAttributesKindEnvironments                FormFieldListDataAttributesKind = "environments"
	FormFieldListDataAttributesKindFunctionalities             FormFieldListDataAttributesKind = "functionalities"
	FormFieldListDataAttributesKindLabels                      FormFieldListDataAttributesKind = "labels"
	FormFieldListDataAttributesKindManualStartingDatetimeField FormFieldListDataAttributesKind = "manual_starting_datetime_field"
	FormFieldListDataAttributesKindMarkAsBackfilled            FormFieldListDataAttributesKind = "mark_as_backfilled"
	FormFieldListDataAttributesKindMarkAsInTriage              FormFieldListDataAttributesKind = "mark_as_in_triage"
	FormFieldListDataAttributesKindMarkAsTest                  FormFieldListDataAttributesKind = "mark_as_test"
	FormFieldListDataAttributesKindNotifyEmails                FormFieldListDataAttributesKind = "notify_emails"
	FormFieldListDataAttributesKindServices                    FormFieldListDataAttributesKind = "services"
	FormFieldListDataAttributesKindSeverity                    FormFieldListDataAttributesKind = "severity"
	FormFieldListDataAttributesKindShowOngoingIncidents        FormFieldListDataAttributesKind = "show_ongoing_incidents"
	FormFieldListDataAttributesKindSummary                     FormFieldListDataAttributesKind = "summary"
	FormFieldListDataAttributesKindTeams                       FormFieldListDataAttributesKind = "teams"
	FormFieldListDataAttributesKindTitle                       FormFieldListDataAttributesKind = "title"
	FormFieldListDataAttributesKindTriggerManualWorkflows      FormFieldListDataAttributesKind = "trigger_manual_workflows"
	FormFieldListDataAttributesKindTypes                       FormFieldListDataAttributesKind = "types"
	FormFieldListDataAttributesKindVisibility                  FormFieldListDataAttributesKind = "visibility"
)

// Defines values for FormFieldListDataAttributesRequired.
const (
	FormFieldListDataAttributesRequiredSlackIncidentCancellationForm    FormFieldListDataAttributesRequired = "slack_incident_cancellation_form"
	FormFieldListDataAttributesRequiredSlackIncidentMitigationForm      FormFieldListDataAttributesRequired = "slack_incident_mitigation_form"
	FormFieldListDataAttributesRequiredSlackIncidentResolutionForm      FormFieldListDataAttributesRequired = "slack_incident_resolution_form"
	FormFieldListDataAttributesRequiredSlackNewIncidentForm             FormFieldListDataAttributesRequired = "slack_new_incident_form"
	FormFieldListDataAttributesRequiredSlackScheduledIncidentForm       FormFieldListDataAttributesRequired = "slack_scheduled_incident_form"
	FormFieldListDataAttributesRequiredSlackUpdateIncidentForm          FormFieldListDataAttributesRequired = "slack_update_incident_form"
	FormFieldListDataAttributesRequiredSlackUpdateIncidentStatusForm    FormFieldListDataAttributesRequired = "slack_update_incident_status_form"
	FormFieldListDataAttributesRequiredSlackUpdateScheduledIncidentForm FormFieldListDataAttributesRequired = "slack_update_scheduled_incident_form"
	FormFieldListDataAttributesRequiredWebIncidentCancellationForm      FormFieldListDataAttributesRequired = "web_incident_cancellation_form"
	FormFieldListDataAttributesRequiredWebIncidentMitigationForm        FormFieldListDataAttributesRequired = "web_incident_mitigation_form"
	FormFieldListDataAttributesRequiredWebIncidentPostMortemForm        FormFieldListDataAttributesRequired = "web_incident_post_mortem_form"
	FormFieldListDataAttributesRequiredWebIncidentResolutionForm        FormFieldListDataAttributesRequired = "web_incident_resolution_form"
	FormFieldListDataAttributesRequiredWebNewIncidentForm               FormFieldListDataAttributesRequired = "web_new_incident_form"
	FormFieldListDataAttributesRequiredWebScheduledIncidentForm         FormFieldListDataAttributesRequired = "web_scheduled_incident_form"
	FormFieldListDataAttributesRequiredWebUpdateIncidentForm            FormFieldListDataAttributesRequired = "web_update_incident_form"
	FormFieldListDataAttributesRequiredWebUpdateScheduledIncidentForm   FormFieldListDataAttributesRequired = "web_update_scheduled_incident_form"
)

// Defines values for FormFieldListDataAttributesShown.
const (
	FormFieldListDataAttributesShownIncidentPostMortem               FormFieldListDataAttributesShown = "incident_post_mortem"
	FormFieldListDataAttributesShownSlackIncidentCancellationForm    FormFieldListDataAttributesShown = "slack_incident_cancellation_form"
	FormFieldListDataAttributesShownSlackIncidentMitigationForm      FormFieldListDataAttributesShown = "slack_incident_mitigation_form"
	FormFieldListDataAttributesShownSlackIncidentResolutionForm      FormFieldListDataAttributesShown = "slack_incident_resolution_form"
	FormFieldListDataAttributesShownSlackNewIncidentForm             FormFieldListDataAttributesShown = "slack_new_incident_form"
	FormFieldListDataAttributesShownSlackScheduledIncidentForm       FormFieldListDataAttributesShown = "slack_scheduled_incident_form"
	FormFieldListDataAttributesShownSlackUpdateIncidentForm          FormFieldListDataAttributesShown = "slack_update_incident_form"
	FormFieldListDataAttributesShownSlackUpdateIncidentStatusForm    FormFieldListDataAttributesShown = "slack_update_incident_status_form"
	FormFieldListDataAttributesShownSlackUpdateScheduledIncidentForm FormFieldListDataAttributesShown = "slack_update_scheduled_incident_form"
	FormFieldListDataAttributesShownWebIncidentCancellationForm      FormFieldListDataAttributesShown = "web_incident_cancellation_form"
	FormFieldListDataAttributesShownWebIncidentMitigationForm        FormFieldListDataAttributesShown = "web_incident_mitigation_form"
	FormFieldListDataAttributesShownWebIncidentPostMortemForm        FormFieldListDataAttributesShown = "web_incident_post_mortem_form"
	FormFieldListDataAttributesShownWebIncidentResolutionForm        FormFieldListDataAttributesShown = "web_incident_resolution_form"
	FormFieldListDataAttributesShownWebNewIncidentForm               FormFieldListDataAttributesShown = "web_new_incident_form"
	FormFieldListDataAttributesShownWebScheduledIncidentForm         FormFieldListDataAttributesShown = "web_scheduled_incident_form"
	FormFieldListDataAttributesShownWebUpdateIncidentForm            FormFieldListDataAttributesShown = "web_update_incident_form"
	FormFieldListDataAttributesShownWebUpdateScheduledIncidentForm   FormFieldListDataAttributesShown = "web_update_scheduled_incident_form"
)

// Defines values for FormFieldListDataType.
const (
	FormFieldListDataTypeFormFields FormFieldListDataType = "form_fields"
)

// Defines values for FormFieldOptionListDataType.
const (
	FormFieldOptionListDataTypeFormFieldOptions FormFieldOptionListDataType = "form_field_options"
)

// Defines values for FormFieldOptionResponseDataType.
const (
	FormFieldOptionResponseDataTypeFormFieldOptions FormFieldOptionResponseDataType = "form_field_options"
)

// Defines values for FormFieldPositionForm.
const (
	FormFieldPositionFormIncidentPostMortem               FormFieldPositionForm = "incident_post_mortem"
	FormFieldPositionFormSlackIncidentCancellationForm    FormFieldPositionForm = "slack_incident_cancellation_form"
	FormFieldPositionFormSlackIncidentMitigationForm      FormFieldPositionForm = "slack_incident_mitigation_form"
	FormFieldPositionFormSlackIncidentResolutionForm      FormFieldPositionForm = "slack_incident_resolution_form"
	FormFieldPositionFormSlackNewIncidentForm             FormFieldPositionForm = "slack_new_incident_form"
	FormFieldPositionFormSlackScheduledIncidentForm       FormFieldPositionForm = "slack_scheduled_incident_form"
	FormFieldPositionFormSlackUpdateIncidentForm          FormFieldPositionForm = "slack_update_incident_form"
	FormFieldPositionFormSlackUpdateIncidentStatusForm    FormFieldPositionForm = "slack_update_incident_status_form"
	FormFieldPositionFormSlackUpdateScheduledIncidentForm FormFieldPositionForm = "slack_update_scheduled_incident_form"
	FormFieldPositionFormWebIncidentCancellationForm      FormFieldPositionForm = "web_incident_cancellation_form"
	FormFieldPositionFormWebIncidentMitigationForm        FormFieldPositionForm = "web_incident_mitigation_form"
	FormFieldPositionFormWebIncidentPostMortemForm        FormFieldPositionForm = "web_incident_post_mortem_form"
	FormFieldPositionFormWebIncidentResolutionForm        FormFieldPositionForm = "web_incident_resolution_form"
	FormFieldPositionFormWebNewIncidentForm               FormFieldPositionForm = "web_new_incident_form"
	FormFieldPositionFormWebScheduledIncidentForm         FormFieldPositionForm = "web_scheduled_incident_form"
	FormFieldPositionFormWebUpdateIncidentForm            FormFieldPositionForm = "web_update_incident_form"
	FormFieldPositionFormWebUpdateScheduledIncidentForm   FormFieldPositionForm = "web_update_scheduled_incident_form"
)

// Defines values for FormFieldPositionListDataAttributesForm.
const (
	FormFieldPositionListDataAttributesFormIncidentPostMortem               FormFieldPositionListDataAttributesForm = "incident_post_mortem"
	FormFieldPositionListDataAttributesFormSlackIncidentCancellationForm    FormFieldPositionListDataAttributesForm = "slack_incident_cancellation_form"
	FormFieldPositionListDataAttributesFormSlackIncidentMitigationForm      FormFieldPositionListDataAttributesForm = "slack_incident_mitigation_form"
	FormFieldPositionListDataAttributesFormSlackIncidentResolutionForm      FormFieldPositionListDataAttributesForm = "slack_incident_resolution_form"
	FormFieldPositionListDataAttributesFormSlackNewIncidentForm             FormFieldPositionListDataAttributesForm = "slack_new_incident_form"
	FormFieldPositionListDataAttributesFormSlackScheduledIncidentForm       FormFieldPositionListDataAttributesForm = "slack_scheduled_incident_form"
	FormFieldPositionListDataAttributesFormSlackUpdateIncidentForm          FormFieldPositionListDataAttributesForm = "slack_update_incident_form"
	FormFieldPositionListDataAttributesFormSlackUpdateIncidentStatusForm    FormFieldPositionListDataAttributesForm = "slack_update_incident_status_form"
	FormFieldPositionListDataAttributesFormSlackUpdateScheduledIncidentForm FormFieldPositionListDataAttributesForm = "slack_update_scheduled_incident_form"
	FormFieldPositionListDataAttributesFormWebIncidentCancellationForm      FormFieldPositionListDataAttributesForm = "web_incident_cancellation_form"
	FormFieldPositionListDataAttributesFormWebIncidentMitigationForm        FormFieldPositionListDataAttributesForm = "web_incident_mitigation_form"
	FormFieldPositionListDataAttributesFormWebIncidentPostMortemForm        FormFieldPositionListDataAttributesForm = "web_incident_post_mortem_form"
	FormFieldPositionListDataAttributesFormWebIncidentResolutionForm        FormFieldPositionListDataAttributesForm = "web_incident_resolution_form"
	FormFieldPositionListDataAttributesFormWebNewIncidentForm               FormFieldPositionListDataAttributesForm = "web_new_incident_form"
	FormFieldPositionListDataAttributesFormWebScheduledIncidentForm         FormFieldPositionListDataAttributesForm = "web_scheduled_incident_form"
	FormFieldPositionListDataAttributesFormWebUpdateIncidentForm            FormFieldPositionListDataAttributesForm = "web_update_incident_form"
	FormFieldPositionListDataAttributesFormWebUpdateScheduledIncidentForm   FormFieldPositionListDataAttributesForm = "web_update_scheduled_incident_form"
)

// Defines values for FormFieldPositionListDataType.
const (
	FormFieldPositionListDataTypeFormFieldPositions FormFieldPositionListDataType = "form_field_positions"
)

// Defines values for FormFieldPositionResponseDataAttributesForm.
const (
	FormFieldPositionResponseDataAttributesFormIncidentPostMortem               FormFieldPositionResponseDataAttributesForm = "incident_post_mortem"
	FormFieldPositionResponseDataAttributesFormSlackIncidentCancellationForm    FormFieldPositionResponseDataAttributesForm = "slack_incident_cancellation_form"
	FormFieldPositionResponseDataAttributesFormSlackIncidentMitigationForm      FormFieldPositionResponseDataAttributesForm = "slack_incident_mitigation_form"
	FormFieldPositionResponseDataAttributesFormSlackIncidentResolutionForm      FormFieldPositionResponseDataAttributesForm = "slack_incident_resolution_form"
	FormFieldPositionResponseDataAttributesFormSlackNewIncidentForm             FormFieldPositionResponseDataAttributesForm = "slack_new_incident_form"
	FormFieldPositionResponseDataAttributesFormSlackScheduledIncidentForm       FormFieldPositionResponseDataAttributesForm = "slack_scheduled_incident_form"
	FormFieldPositionResponseDataAttributesFormSlackUpdateIncidentForm          FormFieldPositionResponseDataAttributesForm = "slack_update_incident_form"
	FormFieldPositionResponseDataAttributesFormSlackUpdateIncidentStatusForm    FormFieldPositionResponseDataAttributesForm = "slack_update_incident_status_form"
	FormFieldPositionResponseDataAttributesFormSlackUpdateScheduledIncidentForm FormFieldPositionResponseDataAttributesForm = "slack_update_scheduled_incident_form"
	FormFieldPositionResponseDataAttributesFormWebIncidentCancellationForm      FormFieldPositionResponseDataAttributesForm = "web_incident_cancellation_form"
	FormFieldPositionResponseDataAttributesFormWebIncidentMitigationForm        FormFieldPositionResponseDataAttributesForm = "web_incident_mitigation_form"
	FormFieldPositionResponseDataAttributesFormWebIncidentPostMortemForm        FormFieldPositionResponseDataAttributesForm = "web_incident_post_mortem_form"
	FormFieldPositionResponseDataAttributesFormWebIncidentResolutionForm        FormFieldPositionResponseDataAttributesForm = "web_incident_resolution_form"
	FormFieldPositionResponseDataAttributesFormWebNewIncidentForm               FormFieldPositionResponseDataAttributesForm = "web_new_incident_form"
	FormFieldPositionResponseDataAttributesFormWebScheduledIncidentForm         FormFieldPositionResponseDataAttributesForm = "web_scheduled_incident_form"
	FormFieldPositionResponseDataAttributesFormWebUpdateIncidentForm            FormFieldPositionResponseDataAttributesForm = "web_update_incident_form"
	FormFieldPositionResponseDataAttributesFormWebUpdateScheduledIncidentForm   FormFieldPositionResponseDataAttributesForm = "web_update_scheduled_incident_form"
)

// Defines values for FormFieldPositionResponseDataType.
const (
	FormFieldPositionResponseDataTypeFormFieldPositions FormFieldPositionResponseDataType = "form_field_positions"
)

// Defines values for FormFieldResponseDataAttributesInputKind.
const (
	FormFieldResponseDataAttributesInputKindCheckbox    FormFieldResponseDataAttributesInputKind = "checkbox"
	FormFieldResponseDataAttributesInputKindDate        FormFieldResponseDataAttributesInputKind = "date"
	FormFieldResponseDataAttributesInputKindDatetime    FormFieldResponseDataAttributesInputKind = "datetime"
	FormFieldResponseDataAttributesInputKindMultiSelect FormFieldResponseDataAttributesInputKind = "multi_select"
	FormFieldResponseDataAttributesInputKindNumber      FormFieldResponseDataAttributesInputKind = "number"
	FormFieldResponseDataAttributesInputKindSelect      FormFieldResponseDataAttributesInputKind = "select"
	FormFieldResponseDataAttributesInputKindTags        FormFieldResponseDataAttributesInputKind = "tags"
	FormFieldResponseDataAttributesInputKindText        FormFieldResponseDataAttributesInputKind = "text"
	FormFieldResponseDataAttributesInputKindTextarea    FormFieldResponseDataAttributesInputKind = "textarea"
	FormFieldResponseDataAttributesInputKindUsers       FormFieldResponseDataAttributesInputKind = "users"
)

// Defines values for FormFieldResponseDataAttributesKind.
const (
	FormFieldResponseDataAttributesKindAttachAlerts                FormFieldResponseDataAttributesKind = "attach_alerts"
	FormFieldResponseDataAttributesKindCauses                      FormFieldResponseDataAttributesKind = "causes"
	FormFieldResponseDataAttributesKindCustom                      FormFieldResponseDataAttributesKind = "custom"
	FormFieldResponseDataAttributesKindEnvironments                FormFieldResponseDataAttributesKind = "environments"
	FormFieldResponseDataAttributesKindFunctionalities             FormFieldResponseDataAttributesKind = "functionalities"
	FormFieldResponseDataAttributesKindLabels                      FormFieldResponseDataAttributesKind = "labels"
	FormFieldResponseDataAttributesKindManualStartingDatetimeField FormFieldResponseDataAttributesKind = "manual_starting_datetime_field"
	FormFieldResponseDataAttributesKindMarkAsBackfilled            FormFieldResponseDataAttributesKind = "mark_as_backfilled"
	FormFieldResponseDataAttributesKindMarkAsInTriage              FormFieldResponseDataAttributesKind = "mark_as_in_triage"
	FormFieldResponseDataAttributesKindMarkAsTest                  FormFieldResponseDataAttributesKind = "mark_as_test"
	FormFieldResponseDataAttributesKindNotifyEmails                FormFieldResponseDataAttributesKind = "notify_emails"
	FormFieldResponseDataAttributesKindServices                    FormFieldResponseDataAttributesKind = "services"
	FormFieldResponseDataAttributesKindSeverity                    FormFieldResponseDataAttributesKind = "severity"
	FormFieldResponseDataAttributesKindShowOngoingIncidents        FormFieldResponseDataAttributesKind = "show_ongoing_incidents"
	FormFieldResponseDataAttributesKindSummary                     FormFieldResponseDataAttributesKind = "summary"
	FormFieldResponseDataAttributesKindTeams                       FormFieldResponseDataAttributesKind = "teams"
	FormFieldResponseDataAttributesKindTitle                       FormFieldResponseDataAttributesKind = "title"
	FormFieldResponseDataAttributesKindTriggerManualWorkflows      FormFieldResponseDataAttributesKind = "trigger_manual_workflows"
	FormFieldResponseDataAttributesKindTypes                       FormFieldResponseDataAttributesKind = "types"
	FormFieldResponseDataAttributesKindVisibility                  FormFieldResponseDataAttributesKind = "visibility"
)

// Defines values for FormFieldResponseDataAttributesRequired.
const (
	FormFieldResponseDataAttributesRequiredSlackIncidentCancellationForm    FormFieldResponseDataAttributesRequired = "slack_incident_cancellation_form"
	FormFieldResponseDataAttributesRequiredSlackIncidentMitigationForm      FormFieldResponseDataAttributesRequired = "slack_incident_mitigation_form"
	FormFieldResponseDataAttributesRequiredSlackIncidentResolutionForm      FormFieldResponseDataAttributesRequired = "slack_incident_resolution_form"
	FormFieldResponseDataAttributesRequiredSlackNewIncidentForm             FormFieldResponseDataAttributesRequired = "slack_new_incident_form"
	FormFieldResponseDataAttributesRequiredSlackScheduledIncidentForm       FormFieldResponseDataAttributesRequired = "slack_scheduled_incident_form"
	FormFieldResponseDataAttributesRequiredSlackUpdateIncidentForm          FormFieldResponseDataAttributesRequired = "slack_update_incident_form"
	FormFieldResponseDataAttributesRequiredSlackUpdateIncidentStatusForm    FormFieldResponseDataAttributesRequired = "slack_update_incident_status_form"
	FormFieldResponseDataAttributesRequiredSlackUpdateScheduledIncidentForm FormFieldResponseDataAttributesRequired = "slack_update_scheduled_incident_form"
	FormFieldResponseDataAttributesRequiredWebIncidentCancellationForm      FormFieldResponseDataAttributesRequired = "web_incident_cancellation_form"
	FormFieldResponseDataAttributesRequiredWebIncidentMitigationForm        FormFieldResponseDataAttributesRequired = "web_incident_mitigation_form"
	FormFieldResponseDataAttributesRequiredWebIncidentPostMortemForm        FormFieldResponseDataAttributesRequired = "web_incident_post_mortem_form"
	FormFieldResponseDataAttributesRequiredWebIncidentResolutionForm        FormFieldResponseDataAttributesRequired = "web_incident_resolution_form"
	FormFieldResponseDataAttributesRequiredWebNewIncidentForm               FormFieldResponseDataAttributesRequired = "web_new_incident_form"
	FormFieldResponseDataAttributesRequiredWebScheduledIncidentForm         FormFieldResponseDataAttributesRequired = "web_scheduled_incident_form"
	FormFieldResponseDataAttributesRequiredWebUpdateIncidentForm            FormFieldResponseDataAttributesRequired = "web_update_incident_form"
	FormFieldResponseDataAttributesRequiredWebUpdateScheduledIncidentForm   FormFieldResponseDataAttributesRequired = "web_update_scheduled_incident_form"
)

// Defines values for FormFieldResponseDataAttributesShown.
const (
	FormFieldResponseDataAttributesShownIncidentPostMortem               FormFieldResponseDataAttributesShown = "incident_post_mortem"
	FormFieldResponseDataAttributesShownSlackIncidentCancellationForm    FormFieldResponseDataAttributesShown = "slack_incident_cancellation_form"
	FormFieldResponseDataAttributesShownSlackIncidentMitigationForm      FormFieldResponseDataAttributesShown = "slack_incident_mitigation_form"
	FormFieldResponseDataAttributesShownSlackIncidentResolutionForm      FormFieldResponseDataAttributesShown = "slack_incident_resolution_form"
	FormFieldResponseDataAttributesShownSlackNewIncidentForm             FormFieldResponseDataAttributesShown = "slack_new_incident_form"
	FormFieldResponseDataAttributesShownSlackScheduledIncidentForm       FormFieldResponseDataAttributesShown = "slack_scheduled_incident_form"
	FormFieldResponseDataAttributesShownSlackUpdateIncidentForm          FormFieldResponseDataAttributesShown = "slack_update_incident_form"
	FormFieldResponseDataAttributesShownSlackUpdateIncidentStatusForm    FormFieldResponseDataAttributesShown = "slack_update_incident_status_form"
	FormFieldResponseDataAttributesShownSlackUpdateScheduledIncidentForm FormFieldResponseDataAttributesShown = "slack_update_scheduled_incident_form"
	FormFieldResponseDataAttributesShownWebIncidentCancellationForm      FormFieldResponseDataAttributesShown = "web_incident_cancellation_form"
	FormFieldResponseDataAttributesShownWebIncidentMitigationForm        FormFieldResponseDataAttributesShown = "web_incident_mitigation_form"
	FormFieldResponseDataAttributesShownWebIncidentPostMortemForm        FormFieldResponseDataAttributesShown = "web_incident_post_mortem_form"
	FormFieldResponseDataAttributesShownWebIncidentResolutionForm        FormFieldResponseDataAttributesShown = "web_incident_resolution_form"
	FormFieldResponseDataAttributesShownWebNewIncidentForm               FormFieldResponseDataAttributesShown = "web_new_incident_form"
	FormFieldResponseDataAttributesShownWebScheduledIncidentForm         FormFieldResponseDataAttributesShown = "web_scheduled_incident_form"
	FormFieldResponseDataAttributesShownWebUpdateIncidentForm            FormFieldResponseDataAttributesShown = "web_update_incident_form"
	FormFieldResponseDataAttributesShownWebUpdateScheduledIncidentForm   FormFieldResponseDataAttributesShown = "web_update_scheduled_incident_form"
)

// Defines values for FormFieldResponseDataType.
const (
	FormFieldResponseDataTypeFormFields FormFieldResponseDataType = "form_fields"
)

// Defines values for FunctionalityStatus.
const (
	FunctionalityStatusImpacted      FunctionalityStatus = "impacted"
	FunctionalityStatusMajorOutage   FunctionalityStatus = "major_outage"
	FunctionalityStatusOperational   FunctionalityStatus = "operational"
	FunctionalityStatusOutage        FunctionalityStatus = "outage"
	FunctionalityStatusPartialOutage FunctionalityStatus = "partial_outage"
)

// Defines values for FunctionalityListDataAttributesStatus.
const (
	FunctionalityListDataAttributesStatusImpacted      FunctionalityListDataAttributesStatus = "impacted"
	FunctionalityListDataAttributesStatusMajorOutage   FunctionalityListDataAttributesStatus = "major_outage"
	FunctionalityListDataAttributesStatusOperational   FunctionalityListDataAttributesStatus = "operational"
	FunctionalityListDataAttributesStatusOutage        FunctionalityListDataAttributesStatus = "outage"
	FunctionalityListDataAttributesStatusPartialOutage FunctionalityListDataAttributesStatus = "partial_outage"
)

// Defines values for FunctionalityListDataType.
const (
	FunctionalityListDataTypeFunctionalities FunctionalityListDataType = "functionalities"
)

// Defines values for FunctionalityResponseDataAttributesStatus.
const (
	FunctionalityResponseDataAttributesStatusImpacted      FunctionalityResponseDataAttributesStatus = "impacted"
	FunctionalityResponseDataAttributesStatusMajorOutage   FunctionalityResponseDataAttributesStatus = "major_outage"
	FunctionalityResponseDataAttributesStatusOperational   FunctionalityResponseDataAttributesStatus = "operational"
	FunctionalityResponseDataAttributesStatusOutage        FunctionalityResponseDataAttributesStatus = "outage"
	FunctionalityResponseDataAttributesStatusPartialOutage FunctionalityResponseDataAttributesStatus = "partial_outage"
)

// Defines values for FunctionalityResponseDataType.
const (
	FunctionalityResponseDataTypeFunctionalities FunctionalityResponseDataType = "functionalities"
)

// Defines values for GetAlertsTaskParamsTaskType.
const (
	GetAlerts GetAlertsTaskParamsTaskType = "get_alerts"
)

// Defines values for GetGithubCommitsTaskParamsTaskType.
const (
	GetGithubCommits GetGithubCommitsTaskParamsTaskType = "get_github_commits"
)

// Defines values for GetGitlabCommitsTaskParamsTaskType.
const (
	GetGitlabCommits GetGitlabCommitsTaskParamsTaskType = "get_gitlab_commits"
)

// Defines values for GetPulsesTaskParamsTaskType.
const (
	GetPulses GetPulsesTaskParamsTaskType = "get_pulses"
)

// Defines values for HttpClientTaskParamsMethod.
const (
	DELETE  HttpClientTaskParamsMethod = "DELETE"
	GET     HttpClientTaskParamsMethod = "GET"
	OPTIONS HttpClientTaskParamsMethod = "OPTIONS"
	POST    HttpClientTaskParamsMethod = "POST"
	PUT     HttpClientTaskParamsMethod = "PUT"
)

// Defines values for HttpClientTaskParamsTaskType.
const (
	HttpClient HttpClientTaskParamsTaskType = "http_client"
)

// Defines values for InTriageIncidentDataType.
const (
	InTriageIncidentDataTypeIncidents InTriageIncidentDataType = "incidents"
)

// Defines values for IncidentEnvironmentsDataType.
const (
	IncidentEnvironmentsDataTypeEnvironments IncidentEnvironmentsDataType = "environments"
)

// Defines values for IncidentFunctionalitiesDataAttributesStatus.
const (
	IncidentFunctionalitiesDataAttributesStatusImpacted      IncidentFunctionalitiesDataAttributesStatus = "impacted"
	IncidentFunctionalitiesDataAttributesStatusMajorOutage   IncidentFunctionalitiesDataAttributesStatus = "major_outage"
	IncidentFunctionalitiesDataAttributesStatusOperational   IncidentFunctionalitiesDataAttributesStatus = "operational"
	IncidentFunctionalitiesDataAttributesStatusOutage        IncidentFunctionalitiesDataAttributesStatus = "outage"
	IncidentFunctionalitiesDataAttributesStatusPartialOutage IncidentFunctionalitiesDataAttributesStatus = "partial_outage"
)

// Defines values for IncidentFunctionalitiesDataType.
const (
	IncidentFunctionalitiesDataTypeFunctionalities IncidentFunctionalitiesDataType = "functionalities"
)

// Defines values for IncidentGroupsDataType.
const (
	IncidentGroupsDataTypeGroups IncidentGroupsDataType = "groups"
)

// Defines values for IncidentIncidentTypesDataType.
const (
	IncidentIncidentTypesDataTypeIncidentTypes IncidentIncidentTypesDataType = "incident_types"
)

// Defines values for IncidentServicesDataAttributesStatus.
const (
	IncidentServicesDataAttributesStatusImpacted      IncidentServicesDataAttributesStatus = "impacted"
	IncidentServicesDataAttributesStatusMajorOutage   IncidentServicesDataAttributesStatus = "major_outage"
	IncidentServicesDataAttributesStatusOperational   IncidentServicesDataAttributesStatus = "operational"
	IncidentServicesDataAttributesStatusOutage        IncidentServicesDataAttributesStatus = "outage"
	IncidentServicesDataAttributesStatusPartialOutage IncidentServicesDataAttributesStatus = "partial_outage"
)

// Defines values for IncidentServicesDataType.
const (
	IncidentServicesDataTypeServices IncidentServicesDataType = "services"
)

// Defines values for IncidentSeverityDataAttributesSeverity.
const (
	IncidentSeverityDataAttributesSeverityCritical IncidentSeverityDataAttributesSeverity = "critical"
	IncidentSeverityDataAttributesSeverityHigh     IncidentSeverityDataAttributesSeverity = "high"
	IncidentSeverityDataAttributesSeverityLow      IncidentSeverityDataAttributesSeverity = "low"
	IncidentSeverityDataAttributesSeverityMedium   IncidentSeverityDataAttributesSeverity = "medium"
)

// Defines values for IncidentSeverityDataType.
const (
	IncidentSeverityDataTypeSeverities IncidentSeverityDataType = "severities"
)

// Defines values for IncidentActionItemKind.
const (
	IncidentActionItemKindFollowUp IncidentActionItemKind = "follow_up"
	IncidentActionItemKindTask     IncidentActionItemKind = "task"
)

// Defines values for IncidentActionItemPriority.
const (
	IncidentActionItemPriorityHigh   IncidentActionItemPriority = "high"
	IncidentActionItemPriorityLow    IncidentActionItemPriority = "low"
	IncidentActionItemPriorityMedium IncidentActionItemPriority = "medium"
)

// Defines values for IncidentActionItemStatus.
const (
	IncidentActionItemStatusCancelled  IncidentActionItemStatus = "cancelled"
	IncidentActionItemStatusDone       IncidentActionItemStatus = "done"
	IncidentActionItemStatusInProgress IncidentActionItemStatus = "in_progress"
	IncidentActionItemStatusOpen       IncidentActionItemStatus = "open"
)

// Defines values for IncidentActionItemListDataAttributesKind.
const (
	IncidentActionItemListDataAttributesKindFollowUp IncidentActionItemListDataAttributesKind = "follow_up"
	IncidentActionItemListDataAttributesKindTask     IncidentActionItemListDataAttributesKind = "task"
)

// Defines values for IncidentActionItemListDataAttributesPriority.
const (
	IncidentActionItemListDataAttributesPriorityHigh   IncidentActionItemListDataAttributesPriority = "high"
	IncidentActionItemListDataAttributesPriorityLow    IncidentActionItemListDataAttributesPriority = "low"
	IncidentActionItemListDataAttributesPriorityMedium IncidentActionItemListDataAttributesPriority = "medium"
)

// Defines values for IncidentActionItemListDataAttributesStatus.
const (
	IncidentActionItemListDataAttributesStatusCancelled  IncidentActionItemListDataAttributesStatus = "cancelled"
	IncidentActionItemListDataAttributesStatusDone       IncidentActionItemListDataAttributesStatus = "done"
	IncidentActionItemListDataAttributesStatusInProgress IncidentActionItemListDataAttributesStatus = "in_progress"
	IncidentActionItemListDataAttributesStatusOpen       IncidentActionItemListDataAttributesStatus = "open"
)

// Defines values for IncidentActionItemListDataType.
const (
	IncidentActionItemListDataTypeIncidentActionItems IncidentActionItemListDataType = "incident_action_items"
)

// Defines values for IncidentActionItemResponseDataAttributesKind.
const (
	IncidentActionItemResponseDataAttributesKindFollowUp IncidentActionItemResponseDataAttributesKind = "follow_up"
	IncidentActionItemResponseDataAttributesKindTask     IncidentActionItemResponseDataAttributesKind = "task"
)

// Defines values for IncidentActionItemResponseDataAttributesPriority.
const (
	IncidentActionItemResponseDataAttributesPriorityHigh   IncidentActionItemResponseDataAttributesPriority = "high"
	IncidentActionItemResponseDataAttributesPriorityLow    IncidentActionItemResponseDataAttributesPriority = "low"
	IncidentActionItemResponseDataAttributesPriorityMedium IncidentActionItemResponseDataAttributesPriority = "medium"
)

// Defines values for IncidentActionItemResponseDataAttributesStatus.
const (
	IncidentActionItemResponseDataAttributesStatusCancelled  IncidentActionItemResponseDataAttributesStatus = "cancelled"
	IncidentActionItemResponseDataAttributesStatusDone       IncidentActionItemResponseDataAttributesStatus = "done"
	IncidentActionItemResponseDataAttributesStatusInProgress IncidentActionItemResponseDataAttributesStatus = "in_progress"
	IncidentActionItemResponseDataAttributesStatusOpen       IncidentActionItemResponseDataAttributesStatus = "open"
)

// Defines values for IncidentActionItemResponseDataType.
const (
	IncidentActionItemResponseDataTypeIncidentActionItems IncidentActionItemResponseDataType = "incident_action_items"
)

// Defines values for IncidentCustomFieldSelectionListDataType.
const (
	IncidentCustomFieldSelectionListDataTypeIncidentCustomFieldSelections IncidentCustomFieldSelectionListDataType = "incident_custom_field_selections"
)

// Defines values for IncidentCustomFieldSelectionResponseDataType.
const (
	IncidentCustomFieldSelectionResponseDataTypeIncidentCustomFieldSelections IncidentCustomFieldSelectionResponseDataType = "incident_custom_field_selections"
)

// Defines values for IncidentEventVisibility.
const (
	IncidentEventVisibilityExternal IncidentEventVisibility = "external"
	IncidentEventVisibilityInternal IncidentEventVisibility = "internal"
)

// Defines values for IncidentEventFunctionalityStatus.
const (
	IncidentEventFunctionalityStatusMajorOutage   IncidentEventFunctionalityStatus = "major_outage"
	IncidentEventFunctionalityStatusOperational   IncidentEventFunctionalityStatus = "operational"
	IncidentEventFunctionalityStatusPartialOutage IncidentEventFunctionalityStatus = "partial_outage"
)

// Defines values for IncidentEventFunctionalityListDataAttributesStatus.
const (
	IncidentEventFunctionalityListDataAttributesStatusMajorOutage   IncidentEventFunctionalityListDataAttributesStatus = "major_outage"
	IncidentEventFunctionalityListDataAttributesStatusOperational   IncidentEventFunctionalityListDataAttributesStatus = "operational"
	IncidentEventFunctionalityListDataAttributesStatusPartialOutage IncidentEventFunctionalityListDataAttributesStatus = "partial_outage"
)

// Defines values for IncidentEventFunctionalityListDataType.
const (
	IncidentEventFunctionalityListDataTypeIncidentEventFunctionalities IncidentEventFunctionalityListDataType = "incident_event_functionalities"
)

// Defines values for IncidentEventFunctionalityResponseDataAttributesStatus.
const (
	IncidentEventFunctionalityResponseDataAttributesStatusMajorOutage   IncidentEventFunctionalityResponseDataAttributesStatus = "major_outage"
	IncidentEventFunctionalityResponseDataAttributesStatusOperational   IncidentEventFunctionalityResponseDataAttributesStatus = "operational"
	IncidentEventFunctionalityResponseDataAttributesStatusPartialOutage IncidentEventFunctionalityResponseDataAttributesStatus = "partial_outage"
)

// Defines values for IncidentEventFunctionalityResponseDataType.
const (
	IncidentEventFunctionalityResponseDataTypeIncidentEventFunctionalities IncidentEventFunctionalityResponseDataType = "incident_event_functionalities"
)

// Defines values for IncidentEventListDataAttributesVisibility.
const (
	IncidentEventListDataAttributesVisibilityExternal IncidentEventListDataAttributesVisibility = "external"
	IncidentEventListDataAttributesVisibilityInternal IncidentEventListDataAttributesVisibility = "internal"
)

// Defines values for IncidentEventListDataType.
const (
	IncidentEventListDataTypeIncidentEvents IncidentEventListDataType = "incident_events"
)

// Defines values for IncidentEventResponseDataAttributesVisibility.
const (
	IncidentEventResponseDataAttributesVisibilityExternal IncidentEventResponseDataAttributesVisibility = "external"
	IncidentEventResponseDataAttributesVisibilityInternal IncidentEventResponseDataAttributesVisibility = "internal"
)

// Defines values for IncidentEventResponseDataType.
const (
	IncidentEventResponseDataTypeIncidentEvents IncidentEventResponseDataType = "incident_events"
)

// Defines values for IncidentEventServiceStatus.
const (
	IncidentEventServiceStatusMajorOutage   IncidentEventServiceStatus = "major_outage"
	IncidentEventServiceStatusOperational   IncidentEventServiceStatus = "operational"
	IncidentEventServiceStatusPartialOutage IncidentEventServiceStatus = "partial_outage"
)

// Defines values for IncidentEventServiceListDataAttributesStatus.
const (
	IncidentEventServiceListDataAttributesStatusMajorOutage   IncidentEventServiceListDataAttributesStatus = "major_outage"
	IncidentEventServiceListDataAttributesStatusOperational   IncidentEventServiceListDataAttributesStatus = "operational"
	IncidentEventServiceListDataAttributesStatusPartialOutage IncidentEventServiceListDataAttributesStatus = "partial_outage"
)

// Defines values for IncidentEventServiceListDataType.
const (
	IncidentEventServiceListDataTypeIncidentEventServices IncidentEventServiceListDataType = "incident_event_services"
)

// Defines values for IncidentEventServiceResponseDataAttributesStatus.
const (
	IncidentEventServiceResponseDataAttributesStatusMajorOutage   IncidentEventServiceResponseDataAttributesStatus = "major_outage"
	IncidentEventServiceResponseDataAttributesStatusOperational   IncidentEventServiceResponseDataAttributesStatus = "operational"
	IncidentEventServiceResponseDataAttributesStatusPartialOutage IncidentEventServiceResponseDataAttributesStatus = "partial_outage"
)

// Defines values for IncidentEventServiceResponseDataType.
const (
	IncidentEventServiceResponseDataTypeIncidentEventServices IncidentEventServiceResponseDataType = "incident_event_services"
)

// Defines values for IncidentFeedbackRating.
const (
	IncidentFeedbackRatingN0 IncidentFeedbackRating = 0
	IncidentFeedbackRatingN1 IncidentFeedbackRating = 1
	IncidentFeedbackRatingN2 IncidentFeedbackRating = 2
	IncidentFeedbackRatingN3 IncidentFeedbackRating = 3
	IncidentFeedbackRatingN4 IncidentFeedbackRating = 4
)

// Defines values for IncidentFeedbackListDataAttributesRating.
const (
	IncidentFeedbackListDataAttributesRatingN0 IncidentFeedbackListDataAttributesRating = 0
	IncidentFeedbackListDataAttributesRatingN1 IncidentFeedbackListDataAttributesRating = 1
	IncidentFeedbackListDataAttributesRatingN2 IncidentFeedbackListDataAttributesRating = 2
	IncidentFeedbackListDataAttributesRatingN3 IncidentFeedbackListDataAttributesRating = 3
	IncidentFeedbackListDataAttributesRatingN4 IncidentFeedbackListDataAttributesRating = 4
)

// Defines values for IncidentFeedbackListDataType.
const (
	IncidentFeedbackListDataTypeIncidentFeedbacks IncidentFeedbackListDataType = "incident_feedbacks"
)

// Defines values for IncidentFeedbackResponseDataAttributesRating.
const (
	IncidentFeedbackResponseDataAttributesRatingN0 IncidentFeedbackResponseDataAttributesRating = 0
	IncidentFeedbackResponseDataAttributesRatingN1 IncidentFeedbackResponseDataAttributesRating = 1
	IncidentFeedbackResponseDataAttributesRatingN2 IncidentFeedbackResponseDataAttributesRating = 2
	IncidentFeedbackResponseDataAttributesRatingN3 IncidentFeedbackResponseDataAttributesRating = 3
	IncidentFeedbackResponseDataAttributesRatingN4 IncidentFeedbackResponseDataAttributesRating = 4
)

// Defines values for IncidentFeedbackResponseDataType.
const (
	IncidentFeedbackResponseDataTypeIncidentFeedbacks IncidentFeedbackResponseDataType = "incident_feedbacks"
)

// Defines values for IncidentFormFieldSelectionListDataType.
const (
	IncidentFormFieldSelectionListDataTypeIncidentFormFieldSelections IncidentFormFieldSelectionListDataType = "incident_form_field_selections"
)

// Defines values for IncidentFormFieldSelectionResponseDataType.
const (
	IncidentFormFieldSelectionResponseDataTypeIncidentFormFieldSelections IncidentFormFieldSelectionResponseDataType = "incident_form_field_selections"
)

// Defines values for IncidentListDataAttributesEnvironmentsDataType.
const (
	IncidentListDataAttributesEnvironmentsDataTypeEnvironments IncidentListDataAttributesEnvironmentsDataType = "environments"
)

// Defines values for IncidentListDataAttributesFunctionalitiesDataAttributesStatus.
const (
	IncidentListDataAttributesFunctionalitiesDataAttributesStatusImpacted      IncidentListDataAttributesFunctionalitiesDataAttributesStatus = "impacted"
	IncidentListDataAttributesFunctionalitiesDataAttributesStatusMajorOutage   IncidentListDataAttributesFunctionalitiesDataAttributesStatus = "major_outage"
	IncidentListDataAttributesFunctionalitiesDataAttributesStatusOperational   IncidentListDataAttributesFunctionalitiesDataAttributesStatus = "operational"
	IncidentListDataAttributesFunctionalitiesDataAttributesStatusOutage        IncidentListDataAttributesFunctionalitiesDataAttributesStatus = "outage"
	IncidentListDataAttributesFunctionalitiesDataAttributesStatusPartialOutage IncidentListDataAttributesFunctionalitiesDataAttributesStatus = "partial_outage"
)

// Defines values for IncidentListDataAttributesFunctionalitiesDataType.
const (
	IncidentListDataAttributesFunctionalitiesDataTypeFunctionalities IncidentListDataAttributesFunctionalitiesDataType = "functionalities"
)

// Defines values for IncidentListDataAttributesGroupsDataType.
const (
	IncidentListDataAttributesGroupsDataTypeGroups IncidentListDataAttributesGroupsDataType = "groups"
)

// Defines values for IncidentListDataAttributesIncidentTypesDataType.
const (
	IncidentListDataAttributesIncidentTypesDataTypeIncidentTypes IncidentListDataAttributesIncidentTypesDataType = "incident_types"
)

// Defines values for IncidentListDataAttributesServicesDataAttributesStatus.
const (
	IncidentListDataAttributesServicesDataAttributesStatusImpacted      IncidentListDataAttributesServicesDataAttributesStatus = "impacted"
	IncidentListDataAttributesServicesDataAttributesStatusMajorOutage   IncidentListDataAttributesServicesDataAttributesStatus = "major_outage"
	IncidentListDataAttributesServicesDataAttributesStatusOperational   IncidentListDataAttributesServicesDataAttributesStatus = "operational"
	IncidentListDataAttributesServicesDataAttributesStatusOutage        IncidentListDataAttributesServicesDataAttributesStatus = "outage"
	IncidentListDataAttributesServicesDataAttributesStatusPartialOutage IncidentListDataAttributesServicesDataAttributesStatus = "partial_outage"
)

// Defines values for IncidentListDataAttributesServicesDataType.
const (
	IncidentListDataAttributesServicesDataTypeServices IncidentListDataAttributesServicesDataType = "services"
)

// Defines values for IncidentListDataAttributesSeverityDataAttributesSeverity.
const (
	IncidentListDataAttributesSeverityDataAttributesSeverityCritical IncidentListDataAttributesSeverityDataAttributesSeverity = "critical"
	IncidentListDataAttributesSeverityDataAttributesSeverityHigh     IncidentListDataAttributesSeverityDataAttributesSeverity = "high"
	IncidentListDataAttributesSeverityDataAttributesSeverityLow      IncidentListDataAttributesSeverityDataAttributesSeverity = "low"
	IncidentListDataAttributesSeverityDataAttributesSeverityMedium   IncidentListDataAttributesSeverityDataAttributesSeverity = "medium"
)

// Defines values for IncidentListDataAttributesSeverityDataType.
const (
	IncidentListDataAttributesSeverityDataTypeSeverities IncidentListDataAttributesSeverityDataType = "severities"
)

// Defines values for IncidentListDataType.
const (
	IncidentListDataTypeIncidents IncidentListDataType = "incidents"
)

// Defines values for IncidentPermissionSetPrivateIncidentPermissions.
const (
	IncidentPermissionSetPrivateIncidentPermissionsCreate IncidentPermissionSetPrivateIncidentPermissions = "create"
	IncidentPermissionSetPrivateIncidentPermissionsDelete IncidentPermissionSetPrivateIncidentPermissions = "delete"
	IncidentPermissionSetPrivateIncidentPermissionsRead   IncidentPermissionSetPrivateIncidentPermissions = "read"
	IncidentPermissionSetPrivateIncidentPermissionsUpdate IncidentPermissionSetPrivateIncidentPermissions = "update"
)

// Defines values for IncidentPermissionSetPublicIncidentPermissions.
const (
	IncidentPermissionSetPublicIncidentPermissionsCreate IncidentPermissionSetPublicIncidentPermissions = "create"
	IncidentPermissionSetPublicIncidentPermissionsDelete IncidentPermissionSetPublicIncidentPermissions = "delete"
	IncidentPermissionSetPublicIncidentPermissionsRead   IncidentPermissionSetPublicIncidentPermissions = "read"
	IncidentPermissionSetPublicIncidentPermissionsUpdate IncidentPermissionSetPublicIncidentPermissions = "update"
)

// Defines values for IncidentPermissionSetBooleanKind.
const (
	IncidentPermissionSetBooleanKindAssignIncidentRoles IncidentPermissionSetBooleanKind = "assign_incident_roles"
	IncidentPermissionSetBooleanKindInviteSubscribers   IncidentPermissionSetBooleanKind = "invite_subscribers"
	IncidentPermissionSetBooleanKindModifyCustomFields  IncidentPermissionSetBooleanKind = "modify_custom_fields"
	IncidentPermissionSetBooleanKindPublishToStatusPage IncidentPermissionSetBooleanKind = "publish_to_status_page"
	IncidentPermissionSetBooleanKindTriggerWorkflows    IncidentPermissionSetBooleanKind = "trigger_workflows"
	IncidentPermissionSetBooleanKindUpdateSummary       IncidentPermissionSetBooleanKind = "update_summary"
	IncidentPermissionSetBooleanKindUpdateTimeline      IncidentPermissionSetBooleanKind = "update_timeline"
)

// Defines values for IncidentPermissionSetBooleanListDataAttributesKind.
const (
	IncidentPermissionSetBooleanListDataAttributesKindAssignIncidentRoles IncidentPermissionSetBooleanListDataAttributesKind = "assign_incident_roles"
	IncidentPermissionSetBooleanListDataAttributesKindInviteSubscribers   IncidentPermissionSetBooleanListDataAttributesKind = "invite_subscribers"
	IncidentPermissionSetBooleanListDataAttributesKindModifyCustomFields  IncidentPermissionSetBooleanListDataAttributesKind = "modify_custom_fields"
	IncidentPermissionSetBooleanListDataAttributesKindPublishToStatusPage IncidentPermissionSetBooleanListDataAttributesKind = "publish_to_status_page"
	IncidentPermissionSetBooleanListDataAttributesKindTriggerWorkflows    IncidentPermissionSetBooleanListDataAttributesKind = "trigger_workflows"
	IncidentPermissionSetBooleanListDataAttributesKindUpdateSummary       IncidentPermissionSetBooleanListDataAttributesKind = "update_summary"
	IncidentPermissionSetBooleanListDataAttributesKindUpdateTimeline      IncidentPermissionSetBooleanListDataAttributesKind = "update_timeline"
)

// Defines values for IncidentPermissionSetBooleanListDataType.
const (
	IncidentPermissionSetBooleanListDataTypeIncidentPermissionSetBooleans IncidentPermissionSetBooleanListDataType = "incident_permission_set_booleans"
)

// Defines values for IncidentPermissionSetBooleanResponseDataAttributesKind.
const (
	IncidentPermissionSetBooleanResponseDataAttributesKindAssignIncidentRoles IncidentPermissionSetBooleanResponseDataAttributesKind = "assign_incident_roles"
	IncidentPermissionSetBooleanResponseDataAttributesKindInviteSubscribers   IncidentPermissionSetBooleanResponseDataAttributesKind = "invite_subscribers"
	IncidentPermissionSetBooleanResponseDataAttributesKindModifyCustomFields  IncidentPermissionSetBooleanResponseDataAttributesKind = "modify_custom_fields"
	IncidentPermissionSetBooleanResponseDataAttributesKindPublishToStatusPage IncidentPermissionSetBooleanResponseDataAttributesKind = "publish_to_status_page"
	IncidentPermissionSetBooleanResponseDataAttributesKindTriggerWorkflows    IncidentPermissionSetBooleanResponseDataAttributesKind = "trigger_workflows"
	IncidentPermissionSetBooleanResponseDataAttributesKindUpdateSummary       IncidentPermissionSetBooleanResponseDataAttributesKind = "update_summary"
	IncidentPermissionSetBooleanResponseDataAttributesKindUpdateTimeline      IncidentPermissionSetBooleanResponseDataAttributesKind = "update_timeline"
)

// Defines values for IncidentPermissionSetBooleanResponseDataType.
const (
	IncidentPermissionSetBooleanResponseDataTypeIncidentPermissionSetBooleans IncidentPermissionSetBooleanResponseDataType = "incident_permission_set_booleans"
)

// Defines values for IncidentPermissionSetListDataAttributesPrivateIncidentPermissions.
const (
	IncidentPermissionSetListDataAttributesPrivateIncidentPermissionsCreate IncidentPermissionSetListDataAttributesPrivateIncidentPermissions = "create"
	IncidentPermissionSetListDataAttributesPrivateIncidentPermissionsDelete IncidentPermissionSetListDataAttributesPrivateIncidentPermissions = "delete"
	IncidentPermissionSetListDataAttributesPrivateIncidentPermissionsRead   IncidentPermissionSetListDataAttributesPrivateIncidentPermissions = "read"
	IncidentPermissionSetListDataAttributesPrivateIncidentPermissionsUpdate IncidentPermissionSetListDataAttributesPrivateIncidentPermissions = "update"
)

// Defines values for IncidentPermissionSetListDataAttributesPublicIncidentPermissions.
const (
	IncidentPermissionSetListDataAttributesPublicIncidentPermissionsCreate IncidentPermissionSetListDataAttributesPublicIncidentPermissions = "create"
	IncidentPermissionSetListDataAttributesPublicIncidentPermissionsDelete IncidentPermissionSetListDataAttributesPublicIncidentPermissions = "delete"
	IncidentPermissionSetListDataAttributesPublicIncidentPermissionsRead   IncidentPermissionSetListDataAttributesPublicIncidentPermissions = "read"
	IncidentPermissionSetListDataAttributesPublicIncidentPermissionsUpdate IncidentPermissionSetListDataAttributesPublicIncidentPermissions = "update"
)

// Defines values for IncidentPermissionSetListDataType.
const (
	IncidentPermissionSetListDataTypeIncidentPermissionSets IncidentPermissionSetListDataType = "incident_permission_sets"
)

// Defines values for IncidentPermissionSetResourceKind.
const (
	IncidentPermissionSetResourceKindIncidentTypes IncidentPermissionSetResourceKind = "incident_types"
	IncidentPermissionSetResourceKindSeverities    IncidentPermissionSetResourceKind = "severities"
	IncidentPermissionSetResourceKindStatuses      IncidentPermissionSetResourceKind = "statuses"
)

// Defines values for IncidentPermissionSetResourceListDataAttributesKind.
const (
	IncidentPermissionSetResourceListDataAttributesKindIncidentTypes IncidentPermissionSetResourceListDataAttributesKind = "incident_types"
	IncidentPermissionSetResourceListDataAttributesKindSeverities    IncidentPermissionSetResourceListDataAttributesKind = "severities"
	IncidentPermissionSetResourceListDataAttributesKindStatuses      IncidentPermissionSetResourceListDataAttributesKind = "statuses"
)

// Defines values for IncidentPermissionSetResourceListDataType.
const (
	IncidentPermissionSetResourceListDataTypeIncidentPermissionSetResources IncidentPermissionSetResourceListDataType = "incident_permission_set_resources"
)

// Defines values for IncidentPermissionSetResourceResponseDataAttributesKind.
const (
	IncidentPermissionSetResourceResponseDataAttributesKindIncidentTypes IncidentPermissionSetResourceResponseDataAttributesKind = "incident_types"
	IncidentPermissionSetResourceResponseDataAttributesKindSeverities    IncidentPermissionSetResourceResponseDataAttributesKind = "severities"
	IncidentPermissionSetResourceResponseDataAttributesKindStatuses      IncidentPermissionSetResourceResponseDataAttributesKind = "statuses"
)

// Defines values for IncidentPermissionSetResourceResponseDataType.
const (
	IncidentPermissionSetResourceResponseDataTypeIncidentPermissionSetResources IncidentPermissionSetResourceResponseDataType = "incident_permission_set_resources"
)

// Defines values for IncidentPermissionSetResponseDataAttributesPrivateIncidentPermissions.
const (
	IncidentPermissionSetResponseDataAttributesPrivateIncidentPermissionsCreate IncidentPermissionSetResponseDataAttributesPrivateIncidentPermissions = "create"
	IncidentPermissionSetResponseDataAttributesPrivateIncidentPermissionsDelete IncidentPermissionSetResponseDataAttributesPrivateIncidentPermissions = "delete"
	IncidentPermissionSetResponseDataAttributesPrivateIncidentPermissionsRead   IncidentPermissionSetResponseDataAttributesPrivateIncidentPermissions = "read"
	IncidentPermissionSetResponseDataAttributesPrivateIncidentPermissionsUpdate IncidentPermissionSetResponseDataAttributesPrivateIncidentPermissions = "update"
)

// Defines values for IncidentPermissionSetResponseDataAttributesPublicIncidentPermissions.
const (
	IncidentPermissionSetResponseDataAttributesPublicIncidentPermissionsCreate IncidentPermissionSetResponseDataAttributesPublicIncidentPermissions = "create"
	IncidentPermissionSetResponseDataAttributesPublicIncidentPermissionsDelete IncidentPermissionSetResponseDataAttributesPublicIncidentPermissions = "delete"
	IncidentPermissionSetResponseDataAttributesPublicIncidentPermissionsRead   IncidentPermissionSetResponseDataAttributesPublicIncidentPermissions = "read"
	IncidentPermissionSetResponseDataAttributesPublicIncidentPermissionsUpdate IncidentPermissionSetResponseDataAttributesPublicIncidentPermissions = "update"
)

// Defines values for IncidentPermissionSetResponseDataType.
const (
	IncidentPermissionSetResponseDataTypeIncidentPermissionSets IncidentPermissionSetResponseDataType = "incident_permission_sets"
)

// Defines values for IncidentPostMortemShowTimelineOrder.
const (
	IncidentPostMortemShowTimelineOrderAsc  IncidentPostMortemShowTimelineOrder = "asc"
	IncidentPostMortemShowTimelineOrderDesc IncidentPostMortemShowTimelineOrder = "desc"
)

// Defines values for IncidentPostMortemStatus.
const (
	IncidentPostMortemStatusDraft     IncidentPostMortemStatus = "draft"
	IncidentPostMortemStatusPublished IncidentPostMortemStatus = "published"
)

// Defines values for IncidentPostMortemListDataAttributesShowTimelineOrder.
const (
	IncidentPostMortemListDataAttributesShowTimelineOrderAsc  IncidentPostMortemListDataAttributesShowTimelineOrder = "asc"
	IncidentPostMortemListDataAttributesShowTimelineOrderDesc IncidentPostMortemListDataAttributesShowTimelineOrder = "desc"
)

// Defines values for IncidentPostMortemListDataAttributesStatus.
const (
	IncidentPostMortemListDataAttributesStatusDraft     IncidentPostMortemListDataAttributesStatus = "draft"
	IncidentPostMortemListDataAttributesStatusPublished IncidentPostMortemListDataAttributesStatus = "published"
)

// Defines values for IncidentPostMortemListDataType.
const (
	IncidentPostMortemListDataTypeIncidentPostMortems IncidentPostMortemListDataType = "incident_post_mortems"
)

// Defines values for IncidentPostMortemResponseDataAttributesShowTimelineOrder.
const (
	Asc  IncidentPostMortemResponseDataAttributesShowTimelineOrder = "asc"
	Desc IncidentPostMortemResponseDataAttributesShowTimelineOrder = "desc"
)

// Defines values for IncidentPostMortemResponseDataAttributesStatus.
const (
	IncidentPostMortemResponseDataAttributesStatusDraft     IncidentPostMortemResponseDataAttributesStatus = "draft"
	IncidentPostMortemResponseDataAttributesStatusPublished IncidentPostMortemResponseDataAttributesStatus = "published"
)

// Defines values for IncidentPostMortemResponseDataType.
const (
	IncidentPostMortemResponseDataTypeIncidentPostMortems IncidentPostMortemResponseDataType = "incident_post_mortems"
)

// Defines values for IncidentResponseDataAttributesEnvironmentsDataType.
const (
	IncidentResponseDataAttributesEnvironmentsDataTypeEnvironments IncidentResponseDataAttributesEnvironmentsDataType = "environments"
)

// Defines values for IncidentResponseDataAttributesFunctionalitiesDataAttributesStatus.
const (
	IncidentResponseDataAttributesFunctionalitiesDataAttributesStatusImpacted      IncidentResponseDataAttributesFunctionalitiesDataAttributesStatus = "impacted"
	IncidentResponseDataAttributesFunctionalitiesDataAttributesStatusMajorOutage   IncidentResponseDataAttributesFunctionalitiesDataAttributesStatus = "major_outage"
	IncidentResponseDataAttributesFunctionalitiesDataAttributesStatusOperational   IncidentResponseDataAttributesFunctionalitiesDataAttributesStatus = "operational"
	IncidentResponseDataAttributesFunctionalitiesDataAttributesStatusOutage        IncidentResponseDataAttributesFunctionalitiesDataAttributesStatus = "outage"
	IncidentResponseDataAttributesFunctionalitiesDataAttributesStatusPartialOutage IncidentResponseDataAttributesFunctionalitiesDataAttributesStatus = "partial_outage"
)

// Defines values for IncidentResponseDataAttributesFunctionalitiesDataType.
const (
	IncidentResponseDataAttributesFunctionalitiesDataTypeFunctionalities IncidentResponseDataAttributesFunctionalitiesDataType = "functionalities"
)

// Defines values for IncidentResponseDataAttributesGroupsDataType.
const (
	IncidentResponseDataAttributesGroupsDataTypeGroups IncidentResponseDataAttributesGroupsDataType = "groups"
)

// Defines values for IncidentResponseDataAttributesIncidentTypesDataType.
const (
	IncidentResponseDataAttributesIncidentTypesDataTypeIncidentTypes IncidentResponseDataAttributesIncidentTypesDataType = "incident_types"
)

// Defines values for IncidentResponseDataAttributesServicesDataAttributesStatus.
const (
	IncidentResponseDataAttributesServicesDataAttributesStatusImpacted      IncidentResponseDataAttributesServicesDataAttributesStatus = "impacted"
	IncidentResponseDataAttributesServicesDataAttributesStatusMajorOutage   IncidentResponseDataAttributesServicesDataAttributesStatus = "major_outage"
	IncidentResponseDataAttributesServicesDataAttributesStatusOperational   IncidentResponseDataAttributesServicesDataAttributesStatus = "operational"
	IncidentResponseDataAttributesServicesDataAttributesStatusOutage        IncidentResponseDataAttributesServicesDataAttributesStatus = "outage"
	IncidentResponseDataAttributesServicesDataAttributesStatusPartialOutage IncidentResponseDataAttributesServicesDataAttributesStatus = "partial_outage"
)

// Defines values for IncidentResponseDataAttributesServicesDataType.
const (
	IncidentResponseDataAttributesServicesDataTypeServices IncidentResponseDataAttributesServicesDataType = "services"
)

// Defines values for IncidentResponseDataAttributesSeverityDataAttributesSeverity.
const (
	IncidentResponseDataAttributesSeverityDataAttributesSeverityCritical IncidentResponseDataAttributesSeverityDataAttributesSeverity = "critical"
	IncidentResponseDataAttributesSeverityDataAttributesSeverityHigh     IncidentResponseDataAttributesSeverityDataAttributesSeverity = "high"
	IncidentResponseDataAttributesSeverityDataAttributesSeverityLow      IncidentResponseDataAttributesSeverityDataAttributesSeverity = "low"
	IncidentResponseDataAttributesSeverityDataAttributesSeverityMedium   IncidentResponseDataAttributesSeverityDataAttributesSeverity = "medium"
)

// Defines values for IncidentResponseDataAttributesSeverityDataType.
const (
	IncidentResponseDataAttributesSeverityDataTypeSeverities IncidentResponseDataAttributesSeverityDataType = "severities"
)

// Defines values for IncidentResponseDataType.
const (
	IncidentResponseDataTypeIncidents IncidentResponseDataType = "incidents"
)

// Defines values for IncidentRoleListDataType.
const (
	IncidentRoleListDataTypeIncidentRoles IncidentRoleListDataType = "incident_roles"
)

// Defines values for IncidentRoleResponseDataType.
const (
	IncidentRoleResponseDataTypeIncidentRoles IncidentRoleResponseDataType = "incident_roles"
)

// Defines values for IncidentRoleTaskPriority.
const (
	IncidentRoleTaskPriorityHigh   IncidentRoleTaskPriority = "high"
	IncidentRoleTaskPriorityLow    IncidentRoleTaskPriority = "low"
	IncidentRoleTaskPriorityMedium IncidentRoleTaskPriority = "medium"
)

// Defines values for IncidentRoleTaskListDataAttributesPriority.
const (
	IncidentRoleTaskListDataAttributesPriorityHigh   IncidentRoleTaskListDataAttributesPriority = "high"
	IncidentRoleTaskListDataAttributesPriorityLow    IncidentRoleTaskListDataAttributesPriority = "low"
	IncidentRoleTaskListDataAttributesPriorityMedium IncidentRoleTaskListDataAttributesPriority = "medium"
)

// Defines values for IncidentRoleTaskListDataType.
const (
	IncidentRoleTaskListDataTypeIncidentRoleTasks IncidentRoleTaskListDataType = "incident_role_tasks"
)

// Defines values for IncidentRoleTaskResponseDataAttributesPriority.
const (
	IncidentRoleTaskResponseDataAttributesPriorityHigh   IncidentRoleTaskResponseDataAttributesPriority = "high"
	IncidentRoleTaskResponseDataAttributesPriorityLow    IncidentRoleTaskResponseDataAttributesPriority = "low"
	IncidentRoleTaskResponseDataAttributesPriorityMedium IncidentRoleTaskResponseDataAttributesPriority = "medium"
)

// Defines values for IncidentRoleTaskResponseDataType.
const (
	IncidentRoleTaskResponseDataTypeIncidentRoleTasks IncidentRoleTaskResponseDataType = "incident_role_tasks"
)

// Defines values for IncidentStatusPageEventStatus.
const (
	IncidentStatusPageEventStatusCompleted     IncidentStatusPageEventStatus = "completed"
	IncidentStatusPageEventStatusIdentified    IncidentStatusPageEventStatus = "identified"
	IncidentStatusPageEventStatusInProgress    IncidentStatusPageEventStatus = "in_progress"
	IncidentStatusPageEventStatusInvestigating IncidentStatusPageEventStatus = "investigating"
	IncidentStatusPageEventStatusMonitoring    IncidentStatusPageEventStatus = "monitoring"
	IncidentStatusPageEventStatusResolved      IncidentStatusPageEventStatus = "resolved"
	IncidentStatusPageEventStatusScheduled     IncidentStatusPageEventStatus = "scheduled"
	IncidentStatusPageEventStatusVerifying     IncidentStatusPageEventStatus = "verifying"
)

// Defines values for IncidentStatusPageEventListDataAttributesStatus.
const (
	IncidentStatusPageEventListDataAttributesStatusCompleted     IncidentStatusPageEventListDataAttributesStatus = "completed"
	IncidentStatusPageEventListDataAttributesStatusIdentified    IncidentStatusPageEventListDataAttributesStatus = "identified"
	IncidentStatusPageEventListDataAttributesStatusInProgress    IncidentStatusPageEventListDataAttributesStatus = "in_progress"
	IncidentStatusPageEventListDataAttributesStatusInvestigating IncidentStatusPageEventListDataAttributesStatus = "investigating"
	IncidentStatusPageEventListDataAttributesStatusMonitoring    IncidentStatusPageEventListDataAttributesStatus = "monitoring"
	IncidentStatusPageEventListDataAttributesStatusResolved      IncidentStatusPageEventListDataAttributesStatus = "resolved"
	IncidentStatusPageEventListDataAttributesStatusScheduled     IncidentStatusPageEventListDataAttributesStatus = "scheduled"
	IncidentStatusPageEventListDataAttributesStatusVerifying     IncidentStatusPageEventListDataAttributesStatus = "verifying"
)

// Defines values for IncidentStatusPageEventListDataType.
const (
	IncidentStatusPageEventListDataTypeIncidentStatusPageEvents IncidentStatusPageEventListDataType = "incident_status_page_events"
)

// Defines values for IncidentStatusPageEventResponseDataAttributesStatus.
const (
	IncidentStatusPageEventResponseDataAttributesStatusCompleted     IncidentStatusPageEventResponseDataAttributesStatus = "completed"
	IncidentStatusPageEventResponseDataAttributesStatusIdentified    IncidentStatusPageEventResponseDataAttributesStatus = "identified"
	IncidentStatusPageEventResponseDataAttributesStatusInProgress    IncidentStatusPageEventResponseDataAttributesStatus = "in_progress"
	IncidentStatusPageEventResponseDataAttributesStatusInvestigating IncidentStatusPageEventResponseDataAttributesStatus = "investigating"
	IncidentStatusPageEventResponseDataAttributesStatusMonitoring    IncidentStatusPageEventResponseDataAttributesStatus = "monitoring"
	IncidentStatusPageEventResponseDataAttributesStatusResolved      IncidentStatusPageEventResponseDataAttributesStatus = "resolved"
	IncidentStatusPageEventResponseDataAttributesStatusScheduled     IncidentStatusPageEventResponseDataAttributesStatus = "scheduled"
	IncidentStatusPageEventResponseDataAttributesStatusVerifying     IncidentStatusPageEventResponseDataAttributesStatus = "verifying"
)

// Defines values for IncidentStatusPageEventResponseDataType.
const (
	IncidentStatusPageEventResponseDataTypeIncidentStatusPageEvents IncidentStatusPageEventResponseDataType = "incident_status_page_events"
)

// Defines values for IncidentTriggerParamsIncidentCondition.
const (
	IncidentTriggerParamsIncidentConditionALL  IncidentTriggerParamsIncidentCondition = "ALL"
	IncidentTriggerParamsIncidentConditionANY  IncidentTriggerParamsIncidentCondition = "ANY"
	IncidentTriggerParamsIncidentConditionNONE IncidentTriggerParamsIncidentCondition = "NONE"
)

// Defines values for IncidentTriggerParamsIncidentConditionCause.
const (
	IncidentTriggerParamsIncidentConditionCauseANY          IncidentTriggerParamsIncidentConditionCause = "ANY"
	IncidentTriggerParamsIncidentConditionCauseCONTAINS     IncidentTriggerParamsIncidentConditionCause = "CONTAINS"
	IncidentTriggerParamsIncidentConditionCauseCONTAINSALL  IncidentTriggerParamsIncidentConditionCause = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionCauseCONTAINSNONE IncidentTriggerParamsIncidentConditionCause = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionCauseIS           IncidentTriggerParamsIncidentConditionCause = "IS"
	IncidentTriggerParamsIncidentConditionCauseNONE         IncidentTriggerParamsIncidentConditionCause = "NONE"
	IncidentTriggerParamsIncidentConditionCauseSET          IncidentTriggerParamsIncidentConditionCause = "SET"
	IncidentTriggerParamsIncidentConditionCauseUNSET        IncidentTriggerParamsIncidentConditionCause = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionEnvironment.
const (
	IncidentTriggerParamsIncidentConditionEnvironmentANY          IncidentTriggerParamsIncidentConditionEnvironment = "ANY"
	IncidentTriggerParamsIncidentConditionEnvironmentCONTAINS     IncidentTriggerParamsIncidentConditionEnvironment = "CONTAINS"
	IncidentTriggerParamsIncidentConditionEnvironmentCONTAINSALL  IncidentTriggerParamsIncidentConditionEnvironment = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionEnvironmentCONTAINSNONE IncidentTriggerParamsIncidentConditionEnvironment = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionEnvironmentIS           IncidentTriggerParamsIncidentConditionEnvironment = "IS"
	IncidentTriggerParamsIncidentConditionEnvironmentNONE         IncidentTriggerParamsIncidentConditionEnvironment = "NONE"
	IncidentTriggerParamsIncidentConditionEnvironmentSET          IncidentTriggerParamsIncidentConditionEnvironment = "SET"
	IncidentTriggerParamsIncidentConditionEnvironmentUNSET        IncidentTriggerParamsIncidentConditionEnvironment = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionFunctionality.
const (
	IncidentTriggerParamsIncidentConditionFunctionalityANY          IncidentTriggerParamsIncidentConditionFunctionality = "ANY"
	IncidentTriggerParamsIncidentConditionFunctionalityCONTAINS     IncidentTriggerParamsIncidentConditionFunctionality = "CONTAINS"
	IncidentTriggerParamsIncidentConditionFunctionalityCONTAINSALL  IncidentTriggerParamsIncidentConditionFunctionality = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionFunctionalityCONTAINSNONE IncidentTriggerParamsIncidentConditionFunctionality = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionFunctionalityIS           IncidentTriggerParamsIncidentConditionFunctionality = "IS"
	IncidentTriggerParamsIncidentConditionFunctionalityNONE         IncidentTriggerParamsIncidentConditionFunctionality = "NONE"
	IncidentTriggerParamsIncidentConditionFunctionalitySET          IncidentTriggerParamsIncidentConditionFunctionality = "SET"
	IncidentTriggerParamsIncidentConditionFunctionalityUNSET        IncidentTriggerParamsIncidentConditionFunctionality = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionGroup.
const (
	IncidentTriggerParamsIncidentConditionGroupANY          IncidentTriggerParamsIncidentConditionGroup = "ANY"
	IncidentTriggerParamsIncidentConditionGroupCONTAINS     IncidentTriggerParamsIncidentConditionGroup = "CONTAINS"
	IncidentTriggerParamsIncidentConditionGroupCONTAINSALL  IncidentTriggerParamsIncidentConditionGroup = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionGroupCONTAINSNONE IncidentTriggerParamsIncidentConditionGroup = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionGroupIS           IncidentTriggerParamsIncidentConditionGroup = "IS"
	IncidentTriggerParamsIncidentConditionGroupNONE         IncidentTriggerParamsIncidentConditionGroup = "NONE"
	IncidentTriggerParamsIncidentConditionGroupSET          IncidentTriggerParamsIncidentConditionGroup = "SET"
	IncidentTriggerParamsIncidentConditionGroupUNSET        IncidentTriggerParamsIncidentConditionGroup = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionIncidentRoles.
const (
	IncidentTriggerParamsIncidentConditionIncidentRolesANY          IncidentTriggerParamsIncidentConditionIncidentRoles = "ANY"
	IncidentTriggerParamsIncidentConditionIncidentRolesCONTAINS     IncidentTriggerParamsIncidentConditionIncidentRoles = "CONTAINS"
	IncidentTriggerParamsIncidentConditionIncidentRolesCONTAINSALL  IncidentTriggerParamsIncidentConditionIncidentRoles = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionIncidentRolesCONTAINSNONE IncidentTriggerParamsIncidentConditionIncidentRoles = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionIncidentRolesIS           IncidentTriggerParamsIncidentConditionIncidentRoles = "IS"
	IncidentTriggerParamsIncidentConditionIncidentRolesNONE         IncidentTriggerParamsIncidentConditionIncidentRoles = "NONE"
	IncidentTriggerParamsIncidentConditionIncidentRolesSET          IncidentTriggerParamsIncidentConditionIncidentRoles = "SET"
	IncidentTriggerParamsIncidentConditionIncidentRolesUNSET        IncidentTriggerParamsIncidentConditionIncidentRoles = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionIncidentType.
const (
	IncidentTriggerParamsIncidentConditionIncidentTypeANY          IncidentTriggerParamsIncidentConditionIncidentType = "ANY"
	IncidentTriggerParamsIncidentConditionIncidentTypeCONTAINS     IncidentTriggerParamsIncidentConditionIncidentType = "CONTAINS"
	IncidentTriggerParamsIncidentConditionIncidentTypeCONTAINSALL  IncidentTriggerParamsIncidentConditionIncidentType = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionIncidentTypeCONTAINSNONE IncidentTriggerParamsIncidentConditionIncidentType = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionIncidentTypeIS           IncidentTriggerParamsIncidentConditionIncidentType = "IS"
	IncidentTriggerParamsIncidentConditionIncidentTypeNONE         IncidentTriggerParamsIncidentConditionIncidentType = "NONE"
	IncidentTriggerParamsIncidentConditionIncidentTypeSET          IncidentTriggerParamsIncidentConditionIncidentType = "SET"
	IncidentTriggerParamsIncidentConditionIncidentTypeUNSET        IncidentTriggerParamsIncidentConditionIncidentType = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionKind.
const (
	IncidentTriggerParamsIncidentConditionKindANY          IncidentTriggerParamsIncidentConditionKind = "ANY"
	IncidentTriggerParamsIncidentConditionKindCONTAINS     IncidentTriggerParamsIncidentConditionKind = "CONTAINS"
	IncidentTriggerParamsIncidentConditionKindCONTAINSALL  IncidentTriggerParamsIncidentConditionKind = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionKindCONTAINSNONE IncidentTriggerParamsIncidentConditionKind = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionKindIS           IncidentTriggerParamsIncidentConditionKind = "IS"
	IncidentTriggerParamsIncidentConditionKindNONE         IncidentTriggerParamsIncidentConditionKind = "NONE"
	IncidentTriggerParamsIncidentConditionKindSET          IncidentTriggerParamsIncidentConditionKind = "SET"
	IncidentTriggerParamsIncidentConditionKindUNSET        IncidentTriggerParamsIncidentConditionKind = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionService.
const (
	IncidentTriggerParamsIncidentConditionServiceANY          IncidentTriggerParamsIncidentConditionService = "ANY"
	IncidentTriggerParamsIncidentConditionServiceCONTAINS     IncidentTriggerParamsIncidentConditionService = "CONTAINS"
	IncidentTriggerParamsIncidentConditionServiceCONTAINSALL  IncidentTriggerParamsIncidentConditionService = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionServiceCONTAINSNONE IncidentTriggerParamsIncidentConditionService = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionServiceIS           IncidentTriggerParamsIncidentConditionService = "IS"
	IncidentTriggerParamsIncidentConditionServiceNONE         IncidentTriggerParamsIncidentConditionService = "NONE"
	IncidentTriggerParamsIncidentConditionServiceSET          IncidentTriggerParamsIncidentConditionService = "SET"
	IncidentTriggerParamsIncidentConditionServiceUNSET        IncidentTriggerParamsIncidentConditionService = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionSeverity.
const (
	IncidentTriggerParamsIncidentConditionSeverityANY          IncidentTriggerParamsIncidentConditionSeverity = "ANY"
	IncidentTriggerParamsIncidentConditionSeverityCONTAINS     IncidentTriggerParamsIncidentConditionSeverity = "CONTAINS"
	IncidentTriggerParamsIncidentConditionSeverityCONTAINSALL  IncidentTriggerParamsIncidentConditionSeverity = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionSeverityCONTAINSNONE IncidentTriggerParamsIncidentConditionSeverity = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionSeverityIS           IncidentTriggerParamsIncidentConditionSeverity = "IS"
	IncidentTriggerParamsIncidentConditionSeverityNONE         IncidentTriggerParamsIncidentConditionSeverity = "NONE"
	IncidentTriggerParamsIncidentConditionSeveritySET          IncidentTriggerParamsIncidentConditionSeverity = "SET"
	IncidentTriggerParamsIncidentConditionSeverityUNSET        IncidentTriggerParamsIncidentConditionSeverity = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionStatus.
const (
	IncidentTriggerParamsIncidentConditionStatusANY          IncidentTriggerParamsIncidentConditionStatus = "ANY"
	IncidentTriggerParamsIncidentConditionStatusCONTAINS     IncidentTriggerParamsIncidentConditionStatus = "CONTAINS"
	IncidentTriggerParamsIncidentConditionStatusCONTAINSALL  IncidentTriggerParamsIncidentConditionStatus = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionStatusCONTAINSNONE IncidentTriggerParamsIncidentConditionStatus = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionStatusIS           IncidentTriggerParamsIncidentConditionStatus = "IS"
	IncidentTriggerParamsIncidentConditionStatusNONE         IncidentTriggerParamsIncidentConditionStatus = "NONE"
	IncidentTriggerParamsIncidentConditionStatusSET          IncidentTriggerParamsIncidentConditionStatus = "SET"
	IncidentTriggerParamsIncidentConditionStatusUNSET        IncidentTriggerParamsIncidentConditionStatus = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionVisibility.
const (
	IncidentTriggerParamsIncidentConditionVisibilityANY          IncidentTriggerParamsIncidentConditionVisibility = "ANY"
	IncidentTriggerParamsIncidentConditionVisibilityCONTAINS     IncidentTriggerParamsIncidentConditionVisibility = "CONTAINS"
	IncidentTriggerParamsIncidentConditionVisibilityCONTAINSALL  IncidentTriggerParamsIncidentConditionVisibility = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentConditionVisibilityCONTAINSNONE IncidentTriggerParamsIncidentConditionVisibility = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentConditionVisibilityIS           IncidentTriggerParamsIncidentConditionVisibility = "IS"
	IncidentTriggerParamsIncidentConditionVisibilityNONE         IncidentTriggerParamsIncidentConditionVisibility = "NONE"
	IncidentTriggerParamsIncidentConditionVisibilitySET          IncidentTriggerParamsIncidentConditionVisibility = "SET"
	IncidentTriggerParamsIncidentConditionVisibilityUNSET        IncidentTriggerParamsIncidentConditionVisibility = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentKinds.
const (
	IncidentTriggerParamsIncidentKindsBackfilled IncidentTriggerParamsIncidentKinds = "backfilled"
	IncidentTriggerParamsIncidentKindsExample    IncidentTriggerParamsIncidentKinds = "example"
	IncidentTriggerParamsIncidentKindsExampleSub IncidentTriggerParamsIncidentKinds = "example_sub"
	IncidentTriggerParamsIncidentKindsNormal     IncidentTriggerParamsIncidentKinds = "normal"
	IncidentTriggerParamsIncidentKindsNormalSub  IncidentTriggerParamsIncidentKinds = "normal_sub"
	IncidentTriggerParamsIncidentKindsScheduled  IncidentTriggerParamsIncidentKinds = "scheduled"
	IncidentTriggerParamsIncidentKindsTest       IncidentTriggerParamsIncidentKinds = "test"
	IncidentTriggerParamsIncidentKindsTestSub    IncidentTriggerParamsIncidentKinds = "test_sub"
)

// Defines values for IncidentTriggerParamsIncidentPostMortemConditionCause.
const (
	IncidentTriggerParamsIncidentPostMortemConditionCauseANY          IncidentTriggerParamsIncidentPostMortemConditionCause = "ANY"
	IncidentTriggerParamsIncidentPostMortemConditionCauseCONTAINS     IncidentTriggerParamsIncidentPostMortemConditionCause = "CONTAINS"
	IncidentTriggerParamsIncidentPostMortemConditionCauseCONTAINSALL  IncidentTriggerParamsIncidentPostMortemConditionCause = "CONTAINS_ALL"
	IncidentTriggerParamsIncidentPostMortemConditionCauseCONTAINSNONE IncidentTriggerParamsIncidentPostMortemConditionCause = "CONTAINS_NONE"
	IncidentTriggerParamsIncidentPostMortemConditionCauseIS           IncidentTriggerParamsIncidentPostMortemConditionCause = "IS"
	IncidentTriggerParamsIncidentPostMortemConditionCauseNONE         IncidentTriggerParamsIncidentPostMortemConditionCause = "NONE"
	IncidentTriggerParamsIncidentPostMortemConditionCauseSET          IncidentTriggerParamsIncidentPostMortemConditionCause = "SET"
	IncidentTriggerParamsIncidentPostMortemConditionCauseUNSET        IncidentTriggerParamsIncidentPostMortemConditionCause = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentStatuses.
const (
	IncidentTriggerParamsIncidentStatusesAcknowledged IncidentTriggerParamsIncidentStatuses = "acknowledged"
	IncidentTriggerParamsIncidentStatusesCancelled    IncidentTriggerParamsIncidentStatuses = "cancelled"
	IncidentTriggerParamsIncidentStatusesCompleted    IncidentTriggerParamsIncidentStatuses = "completed"
	IncidentTriggerParamsIncidentStatusesDetected     IncidentTriggerParamsIncidentStatuses = "detected"
	IncidentTriggerParamsIncidentStatusesInProgress   IncidentTriggerParamsIncidentStatuses = "in_progress"
	IncidentTriggerParamsIncidentStatusesInTriage     IncidentTriggerParamsIncidentStatuses = "in_triage"
	IncidentTriggerParamsIncidentStatusesMitigated    IncidentTriggerParamsIncidentStatuses = "mitigated"
	IncidentTriggerParamsIncidentStatusesResolved     IncidentTriggerParamsIncidentStatuses = "resolved"
	IncidentTriggerParamsIncidentStatusesScheduled    IncidentTriggerParamsIncidentStatuses = "scheduled"
	IncidentTriggerParamsIncidentStatusesStarted      IncidentTriggerParamsIncidentStatuses = "started"
)

// Defines values for IncidentTriggerParamsTriggerType.
const (
	IncidentTriggerParamsTriggerTypeIncident IncidentTriggerParamsTriggerType = "incident"
)

// Defines values for IncidentTypeListDataType.
const (
	IncidentTypeListDataTypeIncidentTypes IncidentTypeListDataType = "incident_types"
)

// Defines values for IncidentTypeResponseDataType.
const (
	IncidentTypeResponseDataTypeIncidentTypes IncidentTypeResponseDataType = "incident_types"
)

// Defines values for InviteToSlackChannelOpsgenieTaskParamsTaskType.
const (
	InviteToSlackChannelOpsgenie InviteToSlackChannelOpsgenieTaskParamsTaskType = "invite_to_slack_channel_opsgenie"
)

// Defines values for InviteToSlackChannelPagerdutyTaskParamsTaskType.
const (
	InviteToSlackChannelPagerduty InviteToSlackChannelPagerdutyTaskParamsTaskType = "invite_to_slack_channel_pagerduty"
)

// Defines values for InviteToSlackChannelTaskParamsTaskType.
const (
	InviteToSlackChannel InviteToSlackChannelTaskParamsTaskType = "invite_to_slack_channel"
)

// Defines values for InviteToSlackChannelVictorOpsTaskParamsTaskType.
const (
	InviteToSlackChannelVictorOps InviteToSlackChannelVictorOpsTaskParamsTaskType = "invite_to_slack_channel_victor_ops"
)

// Defines values for IpRangesResponseDataType.
const (
	IpRangesResponseDataTypeIpRanges IpRangesResponseDataType = "ip_ranges"
)

// Defines values for MitigateIncidentDataType.
const (
	MitigateIncidentDataTypeIncidents MitigateIncidentDataType = "incidents"
)

// Defines values for NewAlertDataType.
const (
	Alerts NewAlertDataType = "alerts"
)

// Defines values for NewAuthorizationDataAttributesAuthorizableType.
const (
	NewAuthorizationDataAttributesAuthorizableTypeDashboard NewAuthorizationDataAttributesAuthorizableType = "Dashboard"
)

// Defines values for NewAuthorizationDataAttributesGranteeType.
const (
	NewAuthorizationDataAttributesGranteeTypeTeam NewAuthorizationDataAttributesGranteeType = "Team"
	NewAuthorizationDataAttributesGranteeTypeUser NewAuthorizationDataAttributesGranteeType = "User"
)

// Defines values for NewAuthorizationDataAttributesPermissions.
const (
	NewAuthorizationDataAttributesPermissionsAuthorize NewAuthorizationDataAttributesPermissions = "authorize"
	NewAuthorizationDataAttributesPermissionsDestroy   NewAuthorizationDataAttributesPermissions = "destroy"
	NewAuthorizationDataAttributesPermissionsRead      NewAuthorizationDataAttributesPermissions = "read"
	NewAuthorizationDataAttributesPermissionsUpdate    NewAuthorizationDataAttributesPermissions = "update"
)

// Defines values for NewAuthorizationDataType.
const (
	NewAuthorizationDataTypeAuthorizations NewAuthorizationDataType = "authorizations"
)

// Defines values for NewCauseDataType.
const (
	NewCauseDataTypeCauses NewCauseDataType = "causes"
)

// Defines values for NewCustomFieldDataAttributesRequired.
const (
	NewCustomFieldDataAttributesRequiredIncidentForm                NewCustomFieldDataAttributesRequired = "incident_form"
	NewCustomFieldDataAttributesRequiredIncidentMitigationForm      NewCustomFieldDataAttributesRequired = "incident_mitigation_form"
	NewCustomFieldDataAttributesRequiredIncidentMitigationSlackForm NewCustomFieldDataAttributesRequired = "incident_mitigation_slack_form"
	NewCustomFieldDataAttributesRequiredIncidentPostMortemForm      NewCustomFieldDataAttributesRequired = "incident_post_mortem_form"
	NewCustomFieldDataAttributesRequiredIncidentResolutionForm      NewCustomFieldDataAttributesRequired = "incident_resolution_form"
	NewCustomFieldDataAttributesRequiredIncidentResolutionSlackForm NewCustomFieldDataAttributesRequired = "incident_resolution_slack_form"
	NewCustomFieldDataAttributesRequiredIncidentSlackForm           NewCustomFieldDataAttributesRequired = "incident_slack_form"
)

// Defines values for NewCustomFieldDataAttributesShown.
const (
	NewCustomFieldDataAttributesShownIncidentForm                NewCustomFieldDataAttributesShown = "incident_form"
	NewCustomFieldDataAttributesShownIncidentMitigationForm      NewCustomFieldDataAttributesShown = "incident_mitigation_form"
	NewCustomFieldDataAttributesShownIncidentMitigationSlackForm NewCustomFieldDataAttributesShown = "incident_mitigation_slack_form"
	NewCustomFieldDataAttributesShownIncidentPostMortem          NewCustomFieldDataAttributesShown = "incident_post_mortem"
	NewCustomFieldDataAttributesShownIncidentPostMortemForm      NewCustomFieldDataAttributesShown = "incident_post_mortem_form"
	NewCustomFieldDataAttributesShownIncidentResolutionForm      NewCustomFieldDataAttributesShown = "incident_resolution_form"
	NewCustomFieldDataAttributesShownIncidentResolutionSlackForm NewCustomFieldDataAttributesShown = "incident_resolution_slack_form"
	NewCustomFieldDataAttributesShownIncidentSlackForm           NewCustomFieldDataAttributesShown = "incident_slack_form"
)

// Defines values for NewCustomFieldDataType.
const (
	NewCustomFieldDataTypeCustomFields NewCustomFieldDataType = "custom_fields"
)

// Defines values for NewCustomFieldOptionDataType.
const (
	NewCustomFieldOptionDataTypeCustomFieldOptions NewCustomFieldOptionDataType = "custom_field_options"
)

// Defines values for NewDashboardDataAttributesColor.
const (
	NewDashboardDataAttributesColorHashD7F5E1 NewDashboardDataAttributesColor = "#D7F5E1"
	NewDashboardDataAttributesColorHashE9E2FF NewDashboardDataAttributesColor = "#E9E2FF"
	NewDashboardDataAttributesColorHashFAE6E8 NewDashboardDataAttributesColor = "#FAE6E8"
	NewDashboardDataAttributesColorHashFAEEE6 NewDashboardDataAttributesColor = "#FAEEE6"
	NewDashboardDataAttributesColorHashFCF2CF NewDashboardDataAttributesColor = "#FCF2CF"
)

// Defines values for NewDashboardDataAttributesOwner.
const (
	NewDashboardDataAttributesOwnerTeam NewDashboardDataAttributesOwner = "team"
	NewDashboardDataAttributesOwnerUser NewDashboardDataAttributesOwner = "user"
)

// Defines values for NewDashboardDataAttributesPeriod.
const (
	NewDashboardDataAttributesPeriodDay   NewDashboardDataAttributesPeriod = "day"
	NewDashboardDataAttributesPeriodMonth NewDashboardDataAttributesPeriod = "month"
	NewDashboardDataAttributesPeriodWeek  NewDashboardDataAttributesPeriod = "week"
)

// Defines values for NewDashboardDataType.
const (
	NewDashboardDataTypeDashboards NewDashboardDataType = "dashboards"
)

// Defines values for NewEnvironmentDataType.
const (
	NewEnvironmentDataTypeEnvironments NewEnvironmentDataType = "environments"
)

// Defines values for NewFormFieldDataAttributesInputKind.
const (
	NewFormFieldDataAttributesInputKindCheckbox    NewFormFieldDataAttributesInputKind = "checkbox"
	NewFormFieldDataAttributesInputKindDate        NewFormFieldDataAttributesInputKind = "date"
	NewFormFieldDataAttributesInputKindDatetime    NewFormFieldDataAttributesInputKind = "datetime"
	NewFormFieldDataAttributesInputKindMultiSelect NewFormFieldDataAttributesInputKind = "multi_select"
	NewFormFieldDataAttributesInputKindNumber      NewFormFieldDataAttributesInputKind = "number"
	NewFormFieldDataAttributesInputKindSelect      NewFormFieldDataAttributesInputKind = "select"
	NewFormFieldDataAttributesInputKindTags        NewFormFieldDataAttributesInputKind = "tags"
	NewFormFieldDataAttributesInputKindText        NewFormFieldDataAttributesInputKind = "text"
	NewFormFieldDataAttributesInputKindTextarea    NewFormFieldDataAttributesInputKind = "textarea"
	NewFormFieldDataAttributesInputKindUsers       NewFormFieldDataAttributesInputKind = "users"
)

// Defines values for NewFormFieldDataAttributesKind.
const (
	NewFormFieldDataAttributesKindAttachAlerts                NewFormFieldDataAttributesKind = "attach_alerts"
	NewFormFieldDataAttributesKindCauses                      NewFormFieldDataAttributesKind = "causes"
	NewFormFieldDataAttributesKindCustom                      NewFormFieldDataAttributesKind = "custom"
	NewFormFieldDataAttributesKindEnvironments                NewFormFieldDataAttributesKind = "environments"
	NewFormFieldDataAttributesKindFunctionalities             NewFormFieldDataAttributesKind = "functionalities"
	NewFormFieldDataAttributesKindLabels                      NewFormFieldDataAttributesKind = "labels"
	NewFormFieldDataAttributesKindManualStartingDatetimeField NewFormFieldDataAttributesKind = "manual_starting_datetime_field"
	NewFormFieldDataAttributesKindMarkAsBackfilled            NewFormFieldDataAttributesKind = "mark_as_backfilled"
	NewFormFieldDataAttributesKindMarkAsInTriage              NewFormFieldDataAttributesKind = "mark_as_in_triage"
	NewFormFieldDataAttributesKindMarkAsTest                  NewFormFieldDataAttributesKind = "mark_as_test"
	NewFormFieldDataAttributesKindNotifyEmails                NewFormFieldDataAttributesKind = "notify_emails"
	NewFormFieldDataAttributesKindServices                    NewFormFieldDataAttributesKind = "services"
	NewFormFieldDataAttributesKindSeverity                    NewFormFieldDataAttributesKind = "severity"
	NewFormFieldDataAttributesKindShowOngoingIncidents        NewFormFieldDataAttributesKind = "show_ongoing_incidents"
	NewFormFieldDataAttributesKindSummary                     NewFormFieldDataAttributesKind = "summary"
	NewFormFieldDataAttributesKindTeams                       NewFormFieldDataAttributesKind = "teams"
	NewFormFieldDataAttributesKindTitle                       NewFormFieldDataAttributesKind = "title"
	NewFormFieldDataAttributesKindTriggerManualWorkflows      NewFormFieldDataAttributesKind = "trigger_manual_workflows"
	NewFormFieldDataAttributesKindTypes                       NewFormFieldDataAttributesKind = "types"
	NewFormFieldDataAttributesKindVisibility                  NewFormFieldDataAttributesKind = "visibility"
)

// Defines values for NewFormFieldDataAttributesRequired.
const (
	NewFormFieldDataAttributesRequiredSlackIncidentCancellationForm    NewFormFieldDataAttributesRequired = "slack_incident_cancellation_form"
	NewFormFieldDataAttributesRequiredSlackIncidentMitigationForm      NewFormFieldDataAttributesRequired = "slack_incident_mitigation_form"
	NewFormFieldDataAttributesRequiredSlackIncidentResolutionForm      NewFormFieldDataAttributesRequired = "slack_incident_resolution_form"
	NewFormFieldDataAttributesRequiredSlackNewIncidentForm             NewFormFieldDataAttributesRequired = "slack_new_incident_form"
	NewFormFieldDataAttributesRequiredSlackScheduledIncidentForm       NewFormFieldDataAttributesRequired = "slack_scheduled_incident_form"
	NewFormFieldDataAttributesRequiredSlackUpdateIncidentForm          NewFormFieldDataAttributesRequired = "slack_update_incident_form"
	NewFormFieldDataAttributesRequiredSlackUpdateIncidentStatusForm    NewFormFieldDataAttributesRequired = "slack_update_incident_status_form"
	NewFormFieldDataAttributesRequiredSlackUpdateScheduledIncidentForm NewFormFieldDataAttributesRequired = "slack_update_scheduled_incident_form"
	NewFormFieldDataAttributesRequiredWebIncidentCancellationForm      NewFormFieldDataAttributesRequired = "web_incident_cancellation_form"
	NewFormFieldDataAttributesRequiredWebIncidentMitigationForm        NewFormFieldDataAttributesRequired = "web_incident_mitigation_form"
	NewFormFieldDataAttributesRequiredWebIncidentPostMortemForm        NewFormFieldDataAttributesRequired = "web_incident_post_mortem_form"
	NewFormFieldDataAttributesRequiredWebIncidentResolutionForm        NewFormFieldDataAttributesRequired = "web_incident_resolution_form"
	NewFormFieldDataAttributesRequiredWebNewIncidentForm               NewFormFieldDataAttributesRequired = "web_new_incident_form"
	NewFormFieldDataAttributesRequiredWebScheduledIncidentForm         NewFormFieldDataAttributesRequired = "web_scheduled_incident_form"
	NewFormFieldDataAttributesRequiredWebUpdateIncidentForm            NewFormFieldDataAttributesRequired = "web_update_incident_form"
	NewFormFieldDataAttributesRequiredWebUpdateScheduledIncidentForm   NewFormFieldDataAttributesRequired = "web_update_scheduled_incident_form"
)

// Defines values for NewFormFieldDataAttributesShown.
const (
	NewFormFieldDataAttributesShownIncidentPostMortem               NewFormFieldDataAttributesShown = "incident_post_mortem"
	NewFormFieldDataAttributesShownSlackIncidentCancellationForm    NewFormFieldDataAttributesShown = "slack_incident_cancellation_form"
	NewFormFieldDataAttributesShownSlackIncidentMitigationForm      NewFormFieldDataAttributesShown = "slack_incident_mitigation_form"
	NewFormFieldDataAttributesShownSlackIncidentResolutionForm      NewFormFieldDataAttributesShown = "slack_incident_resolution_form"
	NewFormFieldDataAttributesShownSlackNewIncidentForm             NewFormFieldDataAttributesShown = "slack_new_incident_form"
	NewFormFieldDataAttributesShownSlackScheduledIncidentForm       NewFormFieldDataAttributesShown = "slack_scheduled_incident_form"
	NewFormFieldDataAttributesShownSlackUpdateIncidentForm          NewFormFieldDataAttributesShown = "slack_update_incident_form"
	NewFormFieldDataAttributesShownSlackUpdateIncidentStatusForm    NewFormFieldDataAttributesShown = "slack_update_incident_status_form"
	NewFormFieldDataAttributesShownSlackUpdateScheduledIncidentForm NewFormFieldDataAttributesShown = "slack_update_scheduled_incident_form"
	NewFormFieldDataAttributesShownWebIncidentCancellationForm      NewFormFieldDataAttributesShown = "web_incident_cancellation_form"
	NewFormFieldDataAttributesShownWebIncidentMitigationForm        NewFormFieldDataAttributesShown = "web_incident_mitigation_form"
	NewFormFieldDataAttributesShownWebIncidentPostMortemForm        NewFormFieldDataAttributesShown = "web_incident_post_mortem_form"
	NewFormFieldDataAttributesShownWebIncidentResolutionForm        NewFormFieldDataAttributesShown = "web_incident_resolution_form"
	NewFormFieldDataAttributesShownWebNewIncidentForm               NewFormFieldDataAttributesShown = "web_new_incident_form"
	NewFormFieldDataAttributesShownWebScheduledIncidentForm         NewFormFieldDataAttributesShown = "web_scheduled_incident_form"
	NewFormFieldDataAttributesShownWebUpdateIncidentForm            NewFormFieldDataAttributesShown = "web_update_incident_form"
	NewFormFieldDataAttributesShownWebUpdateScheduledIncidentForm   NewFormFieldDataAttributesShown = "web_update_scheduled_incident_form"
)

// Defines values for NewFormFieldDataType.
const (
	NewFormFieldDataTypeFormFields NewFormFieldDataType = "form_fields"
)

// Defines values for NewFormFieldOptionDataType.
const (
	NewFormFieldOptionDataTypeFormFieldOptions NewFormFieldOptionDataType = "form_field_options"
)

// Defines values for NewFormFieldPositionDataAttributesForm.
const (
	NewFormFieldPositionDataAttributesFormIncidentPostMortem               NewFormFieldPositionDataAttributesForm = "incident_post_mortem"
	NewFormFieldPositionDataAttributesFormSlackIncidentCancellationForm    NewFormFieldPositionDataAttributesForm = "slack_incident_cancellation_form"
	NewFormFieldPositionDataAttributesFormSlackIncidentMitigationForm      NewFormFieldPositionDataAttributesForm = "slack_incident_mitigation_form"
	NewFormFieldPositionDataAttributesFormSlackIncidentResolutionForm      NewFormFieldPositionDataAttributesForm = "slack_incident_resolution_form"
	NewFormFieldPositionDataAttributesFormSlackNewIncidentForm             NewFormFieldPositionDataAttributesForm = "slack_new_incident_form"
	NewFormFieldPositionDataAttributesFormSlackScheduledIncidentForm       NewFormFieldPositionDataAttributesForm = "slack_scheduled_incident_form"
	NewFormFieldPositionDataAttributesFormSlackUpdateIncidentForm          NewFormFieldPositionDataAttributesForm = "slack_update_incident_form"
	NewFormFieldPositionDataAttributesFormSlackUpdateIncidentStatusForm    NewFormFieldPositionDataAttributesForm = "slack_update_incident_status_form"
	NewFormFieldPositionDataAttributesFormSlackUpdateScheduledIncidentForm NewFormFieldPositionDataAttributesForm = "slack_update_scheduled_incident_form"
	NewFormFieldPositionDataAttributesFormWebIncidentCancellationForm      NewFormFieldPositionDataAttributesForm = "web_incident_cancellation_form"
	NewFormFieldPositionDataAttributesFormWebIncidentMitigationForm        NewFormFieldPositionDataAttributesForm = "web_incident_mitigation_form"
	NewFormFieldPositionDataAttributesFormWebIncidentPostMortemForm        NewFormFieldPositionDataAttributesForm = "web_incident_post_mortem_form"
	NewFormFieldPositionDataAttributesFormWebIncidentResolutionForm        NewFormFieldPositionDataAttributesForm = "web_incident_resolution_form"
	NewFormFieldPositionDataAttributesFormWebNewIncidentForm               NewFormFieldPositionDataAttributesForm = "web_new_incident_form"
	NewFormFieldPositionDataAttributesFormWebScheduledIncidentForm         NewFormFieldPositionDataAttributesForm = "web_scheduled_incident_form"
	NewFormFieldPositionDataAttributesFormWebUpdateIncidentForm            NewFormFieldPositionDataAttributesForm = "web_update_incident_form"
	NewFormFieldPositionDataAttributesFormWebUpdateScheduledIncidentForm   NewFormFieldPositionDataAttributesForm = "web_update_scheduled_incident_form"
)

// Defines values for NewFormFieldPositionDataType.
const (
	NewFormFieldPositionDataTypeFormFieldPositions NewFormFieldPositionDataType = "form_field_positions"
)

// Defines values for NewFunctionalityDataAttributesShowUptimeLastDays.
const (
	NewFunctionalityDataAttributesShowUptimeLastDaysN30 NewFunctionalityDataAttributesShowUptimeLastDays = 30
	NewFunctionalityDataAttributesShowUptimeLastDaysN60 NewFunctionalityDataAttributesShowUptimeLastDays = 60
	NewFunctionalityDataAttributesShowUptimeLastDaysN90 NewFunctionalityDataAttributesShowUptimeLastDays = 90
)

// Defines values for NewFunctionalityDataAttributesStatus.
const (
	NewFunctionalityDataAttributesStatusImpacted      NewFunctionalityDataAttributesStatus = "impacted"
	NewFunctionalityDataAttributesStatusMajorOutage   NewFunctionalityDataAttributesStatus = "major_outage"
	NewFunctionalityDataAttributesStatusOperational   NewFunctionalityDataAttributesStatus = "operational"
	NewFunctionalityDataAttributesStatusOutage        NewFunctionalityDataAttributesStatus = "outage"
	NewFunctionalityDataAttributesStatusPartialOutage NewFunctionalityDataAttributesStatus = "partial_outage"
)

// Defines values for NewFunctionalityDataType.
const (
	NewFunctionalityDataTypeFunctionalities NewFunctionalityDataType = "functionalities"
)

// Defines values for NewIncidentDataAttributesKind.
const (
	NewIncidentDataAttributesKindBackfilled NewIncidentDataAttributesKind = "backfilled"
	NewIncidentDataAttributesKindExample    NewIncidentDataAttributesKind = "example"
	NewIncidentDataAttributesKindExampleSub NewIncidentDataAttributesKind = "example_sub"
	NewIncidentDataAttributesKindNormal     NewIncidentDataAttributesKind = "normal"
	NewIncidentDataAttributesKindNormalSub  NewIncidentDataAttributesKind = "normal_sub"
	NewIncidentDataAttributesKindScheduled  NewIncidentDataAttributesKind = "scheduled"
	NewIncidentDataAttributesKindTest       NewIncidentDataAttributesKind = "test"
	NewIncidentDataAttributesKindTestSub    NewIncidentDataAttributesKind = "test_sub"
)

// Defines values for NewIncidentDataAttributesStatus.
const (
	NewIncidentDataAttributesStatusAcknowledged NewIncidentDataAttributesStatus = "acknowledged"
	NewIncidentDataAttributesStatusCancelled    NewIncidentDataAttributesStatus = "cancelled"
	NewIncidentDataAttributesStatusCompleted    NewIncidentDataAttributesStatus = "completed"
	NewIncidentDataAttributesStatusDetected     NewIncidentDataAttributesStatus = "detected"
	NewIncidentDataAttributesStatusInProgress   NewIncidentDataAttributesStatus = "in_progress"
	NewIncidentDataAttributesStatusInTriage     NewIncidentDataAttributesStatus = "in_triage"
	NewIncidentDataAttributesStatusMitigated    NewIncidentDataAttributesStatus = "mitigated"
	NewIncidentDataAttributesStatusResolved     NewIncidentDataAttributesStatus = "resolved"
	NewIncidentDataAttributesStatusScheduled    NewIncidentDataAttributesStatus = "scheduled"
	NewIncidentDataAttributesStatusStarted      NewIncidentDataAttributesStatus = "started"
)

// Defines values for NewIncidentDataType.
const (
	NewIncidentDataTypeIncidents NewIncidentDataType = "incidents"
)

// Defines values for NewIncidentActionItemDataAttributesKind.
const (
	NewIncidentActionItemDataAttributesKindFollowUp NewIncidentActionItemDataAttributesKind = "follow_up"
	NewIncidentActionItemDataAttributesKindTask     NewIncidentActionItemDataAttributesKind = "task"
)

// Defines values for NewIncidentActionItemDataAttributesPriority.
const (
	NewIncidentActionItemDataAttributesPriorityHigh   NewIncidentActionItemDataAttributesPriority = "high"
	NewIncidentActionItemDataAttributesPriorityLow    NewIncidentActionItemDataAttributesPriority = "low"
	NewIncidentActionItemDataAttributesPriorityMedium NewIncidentActionItemDataAttributesPriority = "medium"
)

// Defines values for NewIncidentActionItemDataAttributesStatus.
const (
	NewIncidentActionItemDataAttributesStatusCancelled  NewIncidentActionItemDataAttributesStatus = "cancelled"
	NewIncidentActionItemDataAttributesStatusDone       NewIncidentActionItemDataAttributesStatus = "done"
	NewIncidentActionItemDataAttributesStatusInProgress NewIncidentActionItemDataAttributesStatus = "in_progress"
	NewIncidentActionItemDataAttributesStatusOpen       NewIncidentActionItemDataAttributesStatus = "open"
)

// Defines values for NewIncidentActionItemDataType.
const (
	NewIncidentActionItemDataTypeIncidentActionItems NewIncidentActionItemDataType = "incident_action_items"
)

// Defines values for NewIncidentCustomFieldSelectionDataType.
const (
	NewIncidentCustomFieldSelectionDataTypeIncidentCustomFieldSelections NewIncidentCustomFieldSelectionDataType = "incident_custom_field_selections"
)

// Defines values for NewIncidentEventDataAttributesVisibility.
const (
	NewIncidentEventDataAttributesVisibilityExternal NewIncidentEventDataAttributesVisibility = "external"
	NewIncidentEventDataAttributesVisibilityInternal NewIncidentEventDataAttributesVisibility = "internal"
)

// Defines values for NewIncidentEventDataType.
const (
	NewIncidentEventDataTypeIncidentEvents NewIncidentEventDataType = "incident_events"
)

// Defines values for NewIncidentEventFunctionalityDataAttributesStatus.
const (
	NewIncidentEventFunctionalityDataAttributesStatusMajorOutage   NewIncidentEventFunctionalityDataAttributesStatus = "major_outage"
	NewIncidentEventFunctionalityDataAttributesStatusOperational   NewIncidentEventFunctionalityDataAttributesStatus = "operational"
	NewIncidentEventFunctionalityDataAttributesStatusPartialOutage NewIncidentEventFunctionalityDataAttributesStatus = "partial_outage"
)

// Defines values for NewIncidentEventFunctionalityDataType.
const (
	NewIncidentEventFunctionalityDataTypeIncidentEventFunctionalities NewIncidentEventFunctionalityDataType = "incident_event_functionalities"
)

// Defines values for NewIncidentEventServiceDataAttributesStatus.
const (
	NewIncidentEventServiceDataAttributesStatusMajorOutage   NewIncidentEventServiceDataAttributesStatus = "major_outage"
	NewIncidentEventServiceDataAttributesStatusOperational   NewIncidentEventServiceDataAttributesStatus = "operational"
	NewIncidentEventServiceDataAttributesStatusPartialOutage NewIncidentEventServiceDataAttributesStatus = "partial_outage"
)

// Defines values for NewIncidentEventServiceDataType.
const (
	NewIncidentEventServiceDataTypeIncidentEventServices NewIncidentEventServiceDataType = "incident_event_services"
)

// Defines values for NewIncidentFeedbackDataAttributesRating.
const (
	NewIncidentFeedbackDataAttributesRatingN0 NewIncidentFeedbackDataAttributesRating = 0
	NewIncidentFeedbackDataAttributesRatingN1 NewIncidentFeedbackDataAttributesRating = 1
	NewIncidentFeedbackDataAttributesRatingN2 NewIncidentFeedbackDataAttributesRating = 2
	NewIncidentFeedbackDataAttributesRatingN3 NewIncidentFeedbackDataAttributesRating = 3
	NewIncidentFeedbackDataAttributesRatingN4 NewIncidentFeedbackDataAttributesRating = 4
)

// Defines values for NewIncidentFeedbackDataType.
const (
	NewIncidentFeedbackDataTypeIncidentFeedbacks NewIncidentFeedbackDataType = "incident_feedbacks"
)

// Defines values for NewIncidentFormFieldSelectionDataType.
const (
	NewIncidentFormFieldSelectionDataTypeIncidentFormFieldSelections NewIncidentFormFieldSelectionDataType = "incident_form_field_selections"
)

// Defines values for NewIncidentPermissionSetDataAttributesPrivateIncidentPermissions.
const (
	NewIncidentPermissionSetDataAttributesPrivateIncidentPermissionsCreate NewIncidentPermissionSetDataAttributesPrivateIncidentPermissions = "create"
	NewIncidentPermissionSetDataAttributesPrivateIncidentPermissionsDelete NewIncidentPermissionSetDataAttributesPrivateIncidentPermissions = "delete"
	NewIncidentPermissionSetDataAttributesPrivateIncidentPermissionsRead   NewIncidentPermissionSetDataAttributesPrivateIncidentPermissions = "read"
	NewIncidentPermissionSetDataAttributesPrivateIncidentPermissionsUpdate NewIncidentPermissionSetDataAttributesPrivateIncidentPermissions = "update"
)

// Defines values for NewIncidentPermissionSetDataAttributesPublicIncidentPermissions.
const (
	NewIncidentPermissionSetDataAttributesPublicIncidentPermissionsCreate NewIncidentPermissionSetDataAttributesPublicIncidentPermissions = "create"
	NewIncidentPermissionSetDataAttributesPublicIncidentPermissionsDelete NewIncidentPermissionSetDataAttributesPublicIncidentPermissions = "delete"
	NewIncidentPermissionSetDataAttributesPublicIncidentPermissionsRead   NewIncidentPermissionSetDataAttributesPublicIncidentPermissions = "read"
	NewIncidentPermissionSetDataAttributesPublicIncidentPermissionsUpdate NewIncidentPermissionSetDataAttributesPublicIncidentPermissions = "update"
)

// Defines values for NewIncidentPermissionSetDataType.
const (
	NewIncidentPermissionSetDataTypeIncidentPermissionSets NewIncidentPermissionSetDataType = "incident_permission_sets"
)

// Defines values for NewIncidentPermissionSetBooleanDataAttributesKind.
const (
	NewIncidentPermissionSetBooleanDataAttributesKindAssignIncidentRoles NewIncidentPermissionSetBooleanDataAttributesKind = "assign_incident_roles"
	NewIncidentPermissionSetBooleanDataAttributesKindInviteSubscribers   NewIncidentPermissionSetBooleanDataAttributesKind = "invite_subscribers"
	NewIncidentPermissionSetBooleanDataAttributesKindModifyCustomFields  NewIncidentPermissionSetBooleanDataAttributesKind = "modify_custom_fields"
	NewIncidentPermissionSetBooleanDataAttributesKindPublishToStatusPage NewIncidentPermissionSetBooleanDataAttributesKind = "publish_to_status_page"
	NewIncidentPermissionSetBooleanDataAttributesKindTriggerWorkflows    NewIncidentPermissionSetBooleanDataAttributesKind = "trigger_workflows"
	NewIncidentPermissionSetBooleanDataAttributesKindUpdateSummary       NewIncidentPermissionSetBooleanDataAttributesKind = "update_summary"
	NewIncidentPermissionSetBooleanDataAttributesKindUpdateTimeline      NewIncidentPermissionSetBooleanDataAttributesKind = "update_timeline"
)

// Defines values for NewIncidentPermissionSetBooleanDataType.
const (
	NewIncidentPermissionSetBooleanDataTypeIncidentPermissionSetBooleans NewIncidentPermissionSetBooleanDataType = "incident_permission_set_booleans"
)

// Defines values for NewIncidentPermissionSetResourceDataAttributesKind.
const (
	NewIncidentPermissionSetResourceDataAttributesKindIncidentTypes NewIncidentPermissionSetResourceDataAttributesKind = "incident_types"
	NewIncidentPermissionSetResourceDataAttributesKindSeverities    NewIncidentPermissionSetResourceDataAttributesKind = "severities"
	NewIncidentPermissionSetResourceDataAttributesKindStatuses      NewIncidentPermissionSetResourceDataAttributesKind = "statuses"
)

// Defines values for NewIncidentPermissionSetResourceDataType.
const (
	NewIncidentPermissionSetResourceDataTypeIncidentPermissionSetResources NewIncidentPermissionSetResourceDataType = "incident_permission_set_resources"
)

// Defines values for NewIncidentRoleDataType.
const (
	NewIncidentRoleDataTypeIncidentRoles NewIncidentRoleDataType = "incident_roles"
)

// Defines values for NewIncidentRoleTaskDataAttributesPriority.
const (
	NewIncidentRoleTaskDataAttributesPriorityHigh   NewIncidentRoleTaskDataAttributesPriority = "high"
	NewIncidentRoleTaskDataAttributesPriorityLow    NewIncidentRoleTaskDataAttributesPriority = "low"
	NewIncidentRoleTaskDataAttributesPriorityMedium NewIncidentRoleTaskDataAttributesPriority = "medium"
)

// Defines values for NewIncidentRoleTaskDataType.
const (
	NewIncidentRoleTaskDataTypeIncidentRoleTasks NewIncidentRoleTaskDataType = "incident_role_tasks"
)

// Defines values for NewIncidentStatusPageEventDataAttributesStatus.
const (
	NewIncidentStatusPageEventDataAttributesStatusCompleted     NewIncidentStatusPageEventDataAttributesStatus = "completed"
	NewIncidentStatusPageEventDataAttributesStatusIdentified    NewIncidentStatusPageEventDataAttributesStatus = "identified"
	NewIncidentStatusPageEventDataAttributesStatusInProgress    NewIncidentStatusPageEventDataAttributesStatus = "in_progress"
	NewIncidentStatusPageEventDataAttributesStatusInvestigating NewIncidentStatusPageEventDataAttributesStatus = "investigating"
	NewIncidentStatusPageEventDataAttributesStatusMonitoring    NewIncidentStatusPageEventDataAttributesStatus = "monitoring"
	NewIncidentStatusPageEventDataAttributesStatusResolved      NewIncidentStatusPageEventDataAttributesStatus = "resolved"
	NewIncidentStatusPageEventDataAttributesStatusScheduled     NewIncidentStatusPageEventDataAttributesStatus = "scheduled"
	NewIncidentStatusPageEventDataAttributesStatusVerifying     NewIncidentStatusPageEventDataAttributesStatus = "verifying"
)

// Defines values for NewIncidentStatusPageEventDataType.
const (
	NewIncidentStatusPageEventDataTypeIncidentStatusPageEvents NewIncidentStatusPageEventDataType = "incident_status_page_events"
)

// Defines values for NewIncidentTypeDataType.
const (
	NewIncidentTypeDataTypeIncidentTypes NewIncidentTypeDataType = "incident_types"
)

// Defines values for NewPlaybookDataType.
const (
	NewPlaybookDataTypePlaybooks NewPlaybookDataType = "playbooks"
)

// Defines values for NewPlaybookTaskDataType.
const (
	NewPlaybookTaskDataTypePlaybookTasks NewPlaybookTaskDataType = "playbook_tasks"
)

// Defines values for NewPostMortemTemplateDataAttributesFormat.
const (
	NewPostMortemTemplateDataAttributesFormatHtml     NewPostMortemTemplateDataAttributesFormat = "html"
	NewPostMortemTemplateDataAttributesFormatMarkdown NewPostMortemTemplateDataAttributesFormat = "markdown"
)

// Defines values for NewPostMortemTemplateDataType.
const (
	NewPostMortemTemplateDataTypePostMortemTemplates NewPostMortemTemplateDataType = "post_mortem_templates"
)

// Defines values for NewPulseDataType.
const (
	NewPulseDataTypePulses NewPulseDataType = "pulses"
)

// Defines values for NewRetrospectiveStepDataType.
const (
	NewRetrospectiveStepDataTypeRetrospectiveSteps NewRetrospectiveStepDataType = "retrospective_steps"
)

// Defines values for NewRoleDataAttributesApiKeysPermissions.
const (
	NewRoleDataAttributesApiKeysPermissionsCreate NewRoleDataAttributesApiKeysPermissions = "create"
	NewRoleDataAttributesApiKeysPermissionsDelete NewRoleDataAttributesApiKeysPermissions = "delete"
	NewRoleDataAttributesApiKeysPermissionsRead   NewRoleDataAttributesApiKeysPermissions = "read"
	NewRoleDataAttributesApiKeysPermissionsUpdate NewRoleDataAttributesApiKeysPermissions = "update"
)

// Defines values for NewRoleDataAttributesAuditsPermissions.
const (
	NewRoleDataAttributesAuditsPermissionsCreate NewRoleDataAttributesAuditsPermissions = "create"
	NewRoleDataAttributesAuditsPermissionsDelete NewRoleDataAttributesAuditsPermissions = "delete"
	NewRoleDataAttributesAuditsPermissionsRead   NewRoleDataAttributesAuditsPermissions = "read"
	NewRoleDataAttributesAuditsPermissionsUpdate NewRoleDataAttributesAuditsPermissions = "update"
)

// Defines values for NewRoleDataAttributesBillingPermissions.
const (
	NewRoleDataAttributesBillingPermissionsCreate NewRoleDataAttributesBillingPermissions = "create"
	NewRoleDataAttributesBillingPermissionsDelete NewRoleDataAttributesBillingPermissions = "delete"
	NewRoleDataAttributesBillingPermissionsRead   NewRoleDataAttributesBillingPermissions = "read"
	NewRoleDataAttributesBillingPermissionsUpdate NewRoleDataAttributesBillingPermissions = "update"
)

// Defines values for NewRoleDataAttributesEnvironmentsPermissions.
const (
	NewRoleDataAttributesEnvironmentsPermissionsCreate NewRoleDataAttributesEnvironmentsPermissions = "create"
	NewRoleDataAttributesEnvironmentsPermissionsDelete NewRoleDataAttributesEnvironmentsPermissions = "delete"
	NewRoleDataAttributesEnvironmentsPermissionsRead   NewRoleDataAttributesEnvironmentsPermissions = "read"
	NewRoleDataAttributesEnvironmentsPermissionsUpdate NewRoleDataAttributesEnvironmentsPermissions = "update"
)

// Defines values for NewRoleDataAttributesFormFieldsPermissions.
const (
	NewRoleDataAttributesFormFieldsPermissionsCreate NewRoleDataAttributesFormFieldsPermissions = "create"
	NewRoleDataAttributesFormFieldsPermissionsDelete NewRoleDataAttributesFormFieldsPermissions = "delete"
	NewRoleDataAttributesFormFieldsPermissionsRead   NewRoleDataAttributesFormFieldsPermissions = "read"
	NewRoleDataAttributesFormFieldsPermissionsUpdate NewRoleDataAttributesFormFieldsPermissions = "update"
)

// Defines values for NewRoleDataAttributesFunctionalitiesPermissions.
const (
	NewRoleDataAttributesFunctionalitiesPermissionsCreate NewRoleDataAttributesFunctionalitiesPermissions = "create"
	NewRoleDataAttributesFunctionalitiesPermissionsDelete NewRoleDataAttributesFunctionalitiesPermissions = "delete"
	NewRoleDataAttributesFunctionalitiesPermissionsRead   NewRoleDataAttributesFunctionalitiesPermissions = "read"
	NewRoleDataAttributesFunctionalitiesPermissionsUpdate NewRoleDataAttributesFunctionalitiesPermissions = "update"
)

// Defines values for NewRoleDataAttributesGroupsPermissions.
const (
	NewRoleDataAttributesGroupsPermissionsCreate NewRoleDataAttributesGroupsPermissions = "create"
	NewRoleDataAttributesGroupsPermissionsDelete NewRoleDataAttributesGroupsPermissions = "delete"
	NewRoleDataAttributesGroupsPermissionsRead   NewRoleDataAttributesGroupsPermissions = "read"
	NewRoleDataAttributesGroupsPermissionsUpdate NewRoleDataAttributesGroupsPermissions = "update"
)

// Defines values for NewRoleDataAttributesIncidentCausesPermissions.
const (
	NewRoleDataAttributesIncidentCausesPermissionsCreate NewRoleDataAttributesIncidentCausesPermissions = "create"
	NewRoleDataAttributesIncidentCausesPermissionsDelete NewRoleDataAttributesIncidentCausesPermissions = "delete"
	NewRoleDataAttributesIncidentCausesPermissionsRead   NewRoleDataAttributesIncidentCausesPermissions = "read"
	NewRoleDataAttributesIncidentCausesPermissionsUpdate NewRoleDataAttributesIncidentCausesPermissions = "update"
)

// Defines values for NewRoleDataAttributesIncidentFeedbacksPermissions.
const (
	NewRoleDataAttributesIncidentFeedbacksPermissionsCreate NewRoleDataAttributesIncidentFeedbacksPermissions = "create"
	NewRoleDataAttributesIncidentFeedbacksPermissionsDelete NewRoleDataAttributesIncidentFeedbacksPermissions = "delete"
	NewRoleDataAttributesIncidentFeedbacksPermissionsRead   NewRoleDataAttributesIncidentFeedbacksPermissions = "read"
	NewRoleDataAttributesIncidentFeedbacksPermissionsUpdate NewRoleDataAttributesIncidentFeedbacksPermissions = "update"
)

// Defines values for NewRoleDataAttributesIncidentPostMortemsPermissions.
const (
	NewRoleDataAttributesIncidentPostMortemsPermissionsCreate NewRoleDataAttributesIncidentPostMortemsPermissions = "create"
	NewRoleDataAttributesIncidentPostMortemsPermissionsDelete NewRoleDataAttributesIncidentPostMortemsPermissions = "delete"
	NewRoleDataAttributesIncidentPostMortemsPermissionsRead   NewRoleDataAttributesIncidentPostMortemsPermissions = "read"
	NewRoleDataAttributesIncidentPostMortemsPermissionsUpdate NewRoleDataAttributesIncidentPostMortemsPermissions = "update"
)

// Defines values for NewRoleDataAttributesIncidentRolesPermissions.
const (
	NewRoleDataAttributesIncidentRolesPermissionsCreate NewRoleDataAttributesIncidentRolesPermissions = "create"
	NewRoleDataAttributesIncidentRolesPermissionsDelete NewRoleDataAttributesIncidentRolesPermissions = "delete"
	NewRoleDataAttributesIncidentRolesPermissionsRead   NewRoleDataAttributesIncidentRolesPermissions = "read"
	NewRoleDataAttributesIncidentRolesPermissionsUpdate NewRoleDataAttributesIncidentRolesPermissions = "update"
)

// Defines values for NewRoleDataAttributesIncidentTypesPermissions.
const (
	NewRoleDataAttributesIncidentTypesPermissionsCreate NewRoleDataAttributesIncidentTypesPermissions = "create"
	NewRoleDataAttributesIncidentTypesPermissionsDelete NewRoleDataAttributesIncidentTypesPermissions = "delete"
	NewRoleDataAttributesIncidentTypesPermissionsRead   NewRoleDataAttributesIncidentTypesPermissions = "read"
	NewRoleDataAttributesIncidentTypesPermissionsUpdate NewRoleDataAttributesIncidentTypesPermissions = "update"
)

// Defines values for NewRoleDataAttributesIncidentsPermissions.
const (
	NewRoleDataAttributesIncidentsPermissionsCreate NewRoleDataAttributesIncidentsPermissions = "create"
	NewRoleDataAttributesIncidentsPermissionsDelete NewRoleDataAttributesIncidentsPermissions = "delete"
	NewRoleDataAttributesIncidentsPermissionsRead   NewRoleDataAttributesIncidentsPermissions = "read"
	NewRoleDataAttributesIncidentsPermissionsUpdate NewRoleDataAttributesIncidentsPermissions = "update"
)

// Defines values for NewRoleDataAttributesInvitationsPermissions.
const (
	NewRoleDataAttributesInvitationsPermissionsCreate NewRoleDataAttributesInvitationsPermissions = "create"
	NewRoleDataAttributesInvitationsPermissionsDelete NewRoleDataAttributesInvitationsPermissions = "delete"
	NewRoleDataAttributesInvitationsPermissionsRead   NewRoleDataAttributesInvitationsPermissions = "read"
	NewRoleDataAttributesInvitationsPermissionsUpdate NewRoleDataAttributesInvitationsPermissions = "update"
)

// Defines values for NewRoleDataAttributesPlaybooksPermissions.
const (
	NewRoleDataAttributesPlaybooksPermissionsCreate NewRoleDataAttributesPlaybooksPermissions = "create"
	NewRoleDataAttributesPlaybooksPermissionsDelete NewRoleDataAttributesPlaybooksPermissions = "delete"
	NewRoleDataAttributesPlaybooksPermissionsRead   NewRoleDataAttributesPlaybooksPermissions = "read"
	NewRoleDataAttributesPlaybooksPermissionsUpdate NewRoleDataAttributesPlaybooksPermissions = "update"
)

// Defines values for NewRoleDataAttributesPrivateIncidentsPermissions.
const (
	NewRoleDataAttributesPrivateIncidentsPermissionsCreate NewRoleDataAttributesPrivateIncidentsPermissions = "create"
	NewRoleDataAttributesPrivateIncidentsPermissionsDelete NewRoleDataAttributesPrivateIncidentsPermissions = "delete"
	NewRoleDataAttributesPrivateIncidentsPermissionsRead   NewRoleDataAttributesPrivateIncidentsPermissions = "read"
	NewRoleDataAttributesPrivateIncidentsPermissionsUpdate NewRoleDataAttributesPrivateIncidentsPermissions = "update"
)

// Defines values for NewRoleDataAttributesRetrospectivePermissions.
const (
	NewRoleDataAttributesRetrospectivePermissionsCreate NewRoleDataAttributesRetrospectivePermissions = "create"
	NewRoleDataAttributesRetrospectivePermissionsDelete NewRoleDataAttributesRetrospectivePermissions = "delete"
	NewRoleDataAttributesRetrospectivePermissionsRead   NewRoleDataAttributesRetrospectivePermissions = "read"
	NewRoleDataAttributesRetrospectivePermissionsUpdate NewRoleDataAttributesRetrospectivePermissions = "update"
)

// Defines values for NewRoleDataAttributesRolesPermissions.
const (
	NewRoleDataAttributesRolesPermissionsCreate NewRoleDataAttributesRolesPermissions = "create"
	NewRoleDataAttributesRolesPermissionsDelete NewRoleDataAttributesRolesPermissions = "delete"
	NewRoleDataAttributesRolesPermissionsRead   NewRoleDataAttributesRolesPermissions = "read"
	NewRoleDataAttributesRolesPermissionsUpdate NewRoleDataAttributesRolesPermissions = "update"
)

// Defines values for NewRoleDataAttributesSecretsPermissions.
const (
	NewRoleDataAttributesSecretsPermissionsCreate NewRoleDataAttributesSecretsPermissions = "create"
	NewRoleDataAttributesSecretsPermissionsDelete NewRoleDataAttributesSecretsPermissions = "delete"
	NewRoleDataAttributesSecretsPermissionsRead   NewRoleDataAttributesSecretsPermissions = "read"
	NewRoleDataAttributesSecretsPermissionsUpdate NewRoleDataAttributesSecretsPermissions = "update"
)

// Defines values for NewRoleDataAttributesServicesPermissions.
const (
	NewRoleDataAttributesServicesPermissionsCreate NewRoleDataAttributesServicesPermissions = "create"
	NewRoleDataAttributesServicesPermissionsDelete NewRoleDataAttributesServicesPermissions = "delete"
	NewRoleDataAttributesServicesPermissionsRead   NewRoleDataAttributesServicesPermissions = "read"
	NewRoleDataAttributesServicesPermissionsUpdate NewRoleDataAttributesServicesPermissions = "update"
)

// Defines values for NewRoleDataAttributesSeveritiesPermissions.
const (
	NewRoleDataAttributesSeveritiesPermissionsCreate NewRoleDataAttributesSeveritiesPermissions = "create"
	NewRoleDataAttributesSeveritiesPermissionsDelete NewRoleDataAttributesSeveritiesPermissions = "delete"
	NewRoleDataAttributesSeveritiesPermissionsRead   NewRoleDataAttributesSeveritiesPermissions = "read"
	NewRoleDataAttributesSeveritiesPermissionsUpdate NewRoleDataAttributesSeveritiesPermissions = "update"
)

// Defines values for NewRoleDataAttributesStatusPagesPermissions.
const (
	NewRoleDataAttributesStatusPagesPermissionsCreate NewRoleDataAttributesStatusPagesPermissions = "create"
	NewRoleDataAttributesStatusPagesPermissionsDelete NewRoleDataAttributesStatusPagesPermissions = "delete"
	NewRoleDataAttributesStatusPagesPermissionsRead   NewRoleDataAttributesStatusPagesPermissions = "read"
	NewRoleDataAttributesStatusPagesPermissionsUpdate NewRoleDataAttributesStatusPagesPermissions = "update"
)

// Defines values for NewRoleDataAttributesWebhooksPermissions.
const (
	NewRoleDataAttributesWebhooksPermissionsCreate NewRoleDataAttributesWebhooksPermissions = "create"
	NewRoleDataAttributesWebhooksPermissionsDelete NewRoleDataAttributesWebhooksPermissions = "delete"
	NewRoleDataAttributesWebhooksPermissionsRead   NewRoleDataAttributesWebhooksPermissions = "read"
	NewRoleDataAttributesWebhooksPermissionsUpdate NewRoleDataAttributesWebhooksPermissions = "update"
)

// Defines values for NewRoleDataAttributesWorkflowsPermissions.
const (
	NewRoleDataAttributesWorkflowsPermissionsCreate NewRoleDataAttributesWorkflowsPermissions = "create"
	NewRoleDataAttributesWorkflowsPermissionsDelete NewRoleDataAttributesWorkflowsPermissions = "delete"
	NewRoleDataAttributesWorkflowsPermissionsRead   NewRoleDataAttributesWorkflowsPermissions = "read"
	NewRoleDataAttributesWorkflowsPermissionsUpdate NewRoleDataAttributesWorkflowsPermissions = "update"
)

// Defines values for NewRoleDataType.
const (
	NewRoleDataTypeRoles NewRoleDataType = "roles"
)

// Defines values for NewSecretDataAttributesKind.
const (
	BuiltIn        NewSecretDataAttributesKind = "built_in"
	HashicorpVault NewSecretDataAttributesKind = "hashicorp_vault"
)

// Defines values for NewSecretDataType.
const (
	NewSecretDataTypeSecrets NewSecretDataType = "secrets"
)

// Defines values for NewServiceDataAttributesShowUptimeLastDays.
const (
	NewServiceDataAttributesShowUptimeLastDaysN30 NewServiceDataAttributesShowUptimeLastDays = 30
	NewServiceDataAttributesShowUptimeLastDaysN60 NewServiceDataAttributesShowUptimeLastDays = 60
	NewServiceDataAttributesShowUptimeLastDaysN90 NewServiceDataAttributesShowUptimeLastDays = 90
)

// Defines values for NewServiceDataAttributesStatus.
const (
	NewServiceDataAttributesStatusImpacted      NewServiceDataAttributesStatus = "impacted"
	NewServiceDataAttributesStatusMajorOutage   NewServiceDataAttributesStatus = "major_outage"
	NewServiceDataAttributesStatusOperational   NewServiceDataAttributesStatus = "operational"
	NewServiceDataAttributesStatusOutage        NewServiceDataAttributesStatus = "outage"
	NewServiceDataAttributesStatusPartialOutage NewServiceDataAttributesStatus = "partial_outage"
)

// Defines values for NewServiceDataType.
const (
	NewServiceDataTypeServices NewServiceDataType = "services"
)

// Defines values for NewSeverityDataAttributesSeverity.
const (
	NewSeverityDataAttributesSeverityCritical NewSeverityDataAttributesSeverity = "critical"
	NewSeverityDataAttributesSeverityHigh     NewSeverityDataAttributesSeverity = "high"
	NewSeverityDataAttributesSeverityLow      NewSeverityDataAttributesSeverity = "low"
	NewSeverityDataAttributesSeverityMedium   NewSeverityDataAttributesSeverity = "medium"
)

// Defines values for NewSeverityDataType.
const (
	NewSeverityDataTypeSeverities NewSeverityDataType = "severities"
)

// Defines values for NewStatusPageDataAttributesShowUptimeLastDays.
const (
	NewStatusPageDataAttributesShowUptimeLastDaysN180 NewStatusPageDataAttributesShowUptimeLastDays = 180
	NewStatusPageDataAttributesShowUptimeLastDaysN30  NewStatusPageDataAttributesShowUptimeLastDays = 30
	NewStatusPageDataAttributesShowUptimeLastDaysN360 NewStatusPageDataAttributesShowUptimeLastDays = 360
	NewStatusPageDataAttributesShowUptimeLastDaysN60  NewStatusPageDataAttributesShowUptimeLastDays = 60
	NewStatusPageDataAttributesShowUptimeLastDaysN90  NewStatusPageDataAttributesShowUptimeLastDays = 90
)

// Defines values for NewStatusPageDataAttributesTimeZone.
const (
	NewStatusPageDataAttributesTimeZoneAbuDhabi                  NewStatusPageDataAttributesTimeZone = "Abu Dhabi"
	NewStatusPageDataAttributesTimeZoneAdelaide                  NewStatusPageDataAttributesTimeZone = "Adelaide"
	NewStatusPageDataAttributesTimeZoneAlaska                    NewStatusPageDataAttributesTimeZone = "Alaska"
	NewStatusPageDataAttributesTimeZoneAlmaty                    NewStatusPageDataAttributesTimeZone = "Almaty"
	NewStatusPageDataAttributesTimeZoneAmericanSamoa             NewStatusPageDataAttributesTimeZone = "American Samoa"
	NewStatusPageDataAttributesTimeZoneAmsterdam                 NewStatusPageDataAttributesTimeZone = "Amsterdam"
	NewStatusPageDataAttributesTimeZoneArizona                   NewStatusPageDataAttributesTimeZone = "Arizona"
	NewStatusPageDataAttributesTimeZoneAstana                    NewStatusPageDataAttributesTimeZone = "Astana"
	NewStatusPageDataAttributesTimeZoneAthens                    NewStatusPageDataAttributesTimeZone = "Athens"
	NewStatusPageDataAttributesTimeZoneAtlanticTimeCanada        NewStatusPageDataAttributesTimeZone = "Atlantic Time (Canada)"
	NewStatusPageDataAttributesTimeZoneAuckland                  NewStatusPageDataAttributesTimeZone = "Auckland"
	NewStatusPageDataAttributesTimeZoneAzores                    NewStatusPageDataAttributesTimeZone = "Azores"
	NewStatusPageDataAttributesTimeZoneBaghdad                   NewStatusPageDataAttributesTimeZone = "Baghdad"
	NewStatusPageDataAttributesTimeZoneBaku                      NewStatusPageDataAttributesTimeZone = "Baku"
	NewStatusPageDataAttributesTimeZoneBangkok                   NewStatusPageDataAttributesTimeZone = "Bangkok"
	NewStatusPageDataAttributesTimeZoneBeijing                   NewStatusPageDataAttributesTimeZone = "Beijing"
	NewStatusPageDataAttributesTimeZoneBelgrade                  NewStatusPageDataAttributesTimeZone = "Belgrade"
	NewStatusPageDataAttributesTimeZoneBerlin                    NewStatusPageDataAttributesTimeZone = "Berlin"
	NewStatusPageDataAttributesTimeZoneBern                      NewStatusPageDataAttributesTimeZone = "Bern"
	NewStatusPageDataAttributesTimeZoneBogota                    NewStatusPageDataAttributesTimeZone = "Bogota"
	NewStatusPageDataAttributesTimeZoneBrasilia                  NewStatusPageDataAttributesTimeZone = "Brasilia"
	NewStatusPageDataAttributesTimeZoneBratislava                NewStatusPageDataAttributesTimeZone = "Bratislava"
	NewStatusPageDataAttributesTimeZoneBrisbane                  NewStatusPageDataAttributesTimeZone = "Brisbane"
	NewStatusPageDataAttributesTimeZoneBrussels                  NewStatusPageDataAttributesTimeZone = "Brussels"
	NewStatusPageDataAttributesTimeZoneBucharest                 NewStatusPageDataAttributesTimeZone = "Bucharest"
	NewStatusPageDataAttributesTimeZoneBudapest                  NewStatusPageDataAttributesTimeZone = "Budapest"
	NewStatusPageDataAttributesTimeZoneBuenosAires               NewStatusPageDataAttributesTimeZone = "Buenos Aires"
	NewStatusPageDataAttributesTimeZoneCairo                     NewStatusPageDataAttributesTimeZone = "Cairo"
	NewStatusPageDataAttributesTimeZoneCanberra                  NewStatusPageDataAttributesTimeZone = "Canberra"
	NewStatusPageDataAttributesTimeZoneCapeVerdeIs               NewStatusPageDataAttributesTimeZone = "Cape Verde Is."
	NewStatusPageDataAttributesTimeZoneCaracas                   NewStatusPageDataAttributesTimeZone = "Caracas"
	NewStatusPageDataAttributesTimeZoneCasablanca                NewStatusPageDataAttributesTimeZone = "Casablanca"
	NewStatusPageDataAttributesTimeZoneCentralAmerica            NewStatusPageDataAttributesTimeZone = "Central America"
	NewStatusPageDataAttributesTimeZoneCentralTimeUSCanada       NewStatusPageDataAttributesTimeZone = "Central Time (US & Canada)"
	NewStatusPageDataAttributesTimeZoneChathamIs                 NewStatusPageDataAttributesTimeZone = "Chatham Is."
	NewStatusPageDataAttributesTimeZoneChennai                   NewStatusPageDataAttributesTimeZone = "Chennai"
	NewStatusPageDataAttributesTimeZoneChihuahua                 NewStatusPageDataAttributesTimeZone = "Chihuahua"
	NewStatusPageDataAttributesTimeZoneChongqing                 NewStatusPageDataAttributesTimeZone = "Chongqing"
	NewStatusPageDataAttributesTimeZoneCopenhagen                NewStatusPageDataAttributesTimeZone = "Copenhagen"
	NewStatusPageDataAttributesTimeZoneDarwin                    NewStatusPageDataAttributesTimeZone = "Darwin"
	NewStatusPageDataAttributesTimeZoneDhaka                     NewStatusPageDataAttributesTimeZone = "Dhaka"
	NewStatusPageDataAttributesTimeZoneDublin                    NewStatusPageDataAttributesTimeZone = "Dublin"
	NewStatusPageDataAttributesTimeZoneEasternTimeUSCanada       NewStatusPageDataAttributesTimeZone = "Eastern Time (US & Canada)"
	NewStatusPageDataAttributesTimeZoneEdinburgh                 NewStatusPageDataAttributesTimeZone = "Edinburgh"
	NewStatusPageDataAttributesTimeZoneEkaterinburg              NewStatusPageDataAttributesTimeZone = "Ekaterinburg"
	NewStatusPageDataAttributesTimeZoneFiji                      NewStatusPageDataAttributesTimeZone = "Fiji"
	NewStatusPageDataAttributesTimeZoneGeorgetown                NewStatusPageDataAttributesTimeZone = "Georgetown"
	NewStatusPageDataAttributesTimeZoneGreenland                 NewStatusPageDataAttributesTimeZone = "Greenland"
	NewStatusPageDataAttributesTimeZoneGuadalajara               NewStatusPageDataAttributesTimeZone = "Guadalajara"
	NewStatusPageDataAttributesTimeZoneGuam                      NewStatusPageDataAttributesTimeZone = "Guam"
	NewStatusPageDataAttributesTimeZoneHanoi                     NewStatusPageDataAttributesTimeZone = "Hanoi"
	NewStatusPageDataAttributesTimeZoneHarare                    NewStatusPageDataAttributesTimeZone = "Harare"
	NewStatusPageDataAttributesTimeZoneHawaii                    NewStatusPageDataAttributesTimeZone = "Hawaii"
	NewStatusPageDataAttributesTimeZoneHelsinki                  NewStatusPageDataAttributesTimeZone = "Helsinki"
	NewStatusPageDataAttributesTimeZoneHobart                    NewStatusPageDataAttributesTimeZone = "Hobart"
	NewStatusPageDataAttributesTimeZoneHongKong                  NewStatusPageDataAttributesTimeZone = "Hong Kong"
	NewStatusPageDataAttributesTimeZoneIndianaEast               NewStatusPageDataAttributesTimeZone = "Indiana (East)"
	NewStatusPageDataAttributesTimeZoneInternationalDateLineWest NewStatusPageDataAttributesTimeZone = "International Date Line West"
	NewStatusPageDataAttributesTimeZoneIrkutsk                   NewStatusPageDataAttributesTimeZone = "Irkutsk"
	NewStatusPageDataAttributesTimeZoneIslamabad                 NewStatusPageDataAttributesTimeZone = "Islamabad"
	NewStatusPageDataAttributesTimeZoneIstanbul                  NewStatusPageDataAttributesTimeZone = "Istanbul"
	NewStatusPageDataAttributesTimeZoneJakarta                   NewStatusPageDataAttributesTimeZone = "Jakarta"
	NewStatusPageDataAttributesTimeZoneJerusalem                 NewStatusPageDataAttributesTimeZone = "Jerusalem"
	NewStatusPageDataAttributesTimeZoneKabul                     NewStatusPageDataAttributesTimeZone = "Kabul"
	NewStatusPageDataAttributesTimeZoneKaliningrad               NewStatusPageDataAttributesTimeZone = "Kaliningrad"
	NewStatusPageDataAttributesTimeZoneKamchatka                 NewStatusPageDataAttributesTimeZone = "Kamchatka"
	NewStatusPageDataAttributesTimeZoneKarachi                   NewStatusPageDataAttributesTimeZone = "Karachi"
	NewStatusPageDataAttributesTimeZoneKathmandu                 NewStatusPageDataAttributesTimeZone = "Kathmandu"
	NewStatusPageDataAttributesTimeZoneKolkata                   NewStatusPageDataAttributesTimeZone = "Kolkata"
	NewStatusPageDataAttributesTimeZoneKrasnoyarsk               NewStatusPageDataAttributesTimeZone = "Krasnoyarsk"
	NewStatusPageDataAttributesTimeZoneKualaLumpur               NewStatusPageDataAttributesTimeZone = "Kuala Lumpur"
	NewStatusPageDataAttributesTimeZoneKuwait                    NewStatusPageDataAttributesTimeZone = "Kuwait"
	NewStatusPageDataAttributesTimeZoneKyiv                      NewStatusPageDataAttributesTimeZone = "Kyiv"
	NewStatusPageDataAttributesTimeZoneLaPaz                     NewStatusPageDataAttributesTimeZone = "La Paz"
	NewStatusPageDataAttributesTimeZoneLima                      NewStatusPageDataAttributesTimeZone = "Lima"
	NewStatusPageDataAttributesTimeZoneLisbon                    NewStatusPageDataAttributesTimeZone = "Lisbon"
	NewStatusPageDataAttributesTimeZoneLjubljana                 NewStatusPageDataAttributesTimeZone = "Ljubljana"
	NewStatusPageDataAttributesTimeZoneLondon                    NewStatusPageDataAttributesTimeZone = "London"
	NewStatusPageDataAttributesTimeZoneMadrid                    NewStatusPageDataAttributesTimeZone = "Madrid"
	NewStatusPageDataAttributesTimeZoneMagadan                   NewStatusPageDataAttributesTimeZone = "Magadan"
	NewStatusPageDataAttributesTimeZoneMarshallIs                NewStatusPageDataAttributesTimeZone = "Marshall Is."
	NewStatusPageDataAttributesTimeZoneMazatlan                  NewStatusPageDataAttributesTimeZone = "Mazatlan"
	NewStatusPageDataAttributesTimeZoneMelbourne                 NewStatusPageDataAttributesTimeZone = "Melbourne"
	NewStatusPageDataAttributesTimeZoneMexicoCity                NewStatusPageDataAttributesTimeZone = "Mexico City"
	NewStatusPageDataAttributesTimeZoneMidAtlantic               NewStatusPageDataAttributesTimeZone = "Mid-Atlantic"
	NewStatusPageDataAttributesTimeZoneMidwayIsland              NewStatusPageDataAttributesTimeZone = "Midway Island"
	NewStatusPageDataAttributesTimeZoneMinsk                     NewStatusPageDataAttributesTimeZone = "Minsk"
	NewStatusPageDataAttributesTimeZoneMonrovia                  NewStatusPageDataAttributesTimeZone = "Monrovia"
	NewStatusPageDataAttributesTimeZoneMonterrey                 NewStatusPageDataAttributesTimeZone = "Monterrey"
	NewStatusPageDataAttributesTimeZoneMontevideo                NewStatusPageDataAttributesTimeZone = "Montevideo"
	NewStatusPageDataAttributesTimeZoneMoscow                    NewStatusPageDataAttributesTimeZone = "Moscow"
	NewStatusPageDataAttributesTimeZoneMountainTimeUSCanada      NewStatusPageDataAttributesTimeZone = "Mountain Time (US & Canada)"
	NewStatusPageDataAttributesTimeZoneMumbai                    NewStatusPageDataAttributesTimeZone = "Mumbai"
	NewStatusPageDataAttributesTimeZoneMuscat                    NewStatusPageDataAttributesTimeZone = "Muscat"
	NewStatusPageDataAttributesTimeZoneNairobi                   NewStatusPageDataAttributesTimeZone = "Nairobi"
	NewStatusPageDataAttributesTimeZoneNewCaledonia              NewStatusPageDataAttributesTimeZone = "New Caledonia"
	NewStatusPageDataAttributesTimeZoneNewDelhi                  NewStatusPageDataAttributesTimeZone = "New Delhi"
	NewStatusPageDataAttributesTimeZoneNewfoundland              NewStatusPageDataAttributesTimeZone = "Newfoundland"
	NewStatusPageDataAttributesTimeZoneNovosibirsk               NewStatusPageDataAttributesTimeZone = "Novosibirsk"
	NewStatusPageDataAttributesTimeZoneNukualofa                 NewStatusPageDataAttributesTimeZone = "Nuku'alofa"
	NewStatusPageDataAttributesTimeZoneOsaka                     NewStatusPageDataAttributesTimeZone = "Osaka"
	NewStatusPageDataAttributesTimeZonePacificTimeUSCanada       NewStatusPageDataAttributesTimeZone = "Pacific Time (US & Canada)"
	NewStatusPageDataAttributesTimeZoneParis                     NewStatusPageDataAttributesTimeZone = "Paris"
	NewStatusPageDataAttributesTimeZonePerth                     NewStatusPageDataAttributesTimeZone = "Perth"
	NewStatusPageDataAttributesTimeZonePortMoresby               NewStatusPageDataAttributesTimeZone = "Port Moresby"
	NewStatusPageDataAttributesTimeZonePrague                    NewStatusPageDataAttributesTimeZone = "Prague"
	NewStatusPageDataAttributesTimeZonePretoria                  NewStatusPageDataAttributesTimeZone = "Pretoria"
	NewStatusPageDataAttributesTimeZonePuertoRico                NewStatusPageDataAttributesTimeZone = "Puerto Rico"
	NewStatusPageDataAttributesTimeZoneQuito                     NewStatusPageDataAttributesTimeZone = "Quito"
	NewStatusPageDataAttributesTimeZoneRangoon                   NewStatusPageDataAttributesTimeZone = "Rangoon"
	NewStatusPageDataAttributesTimeZoneRiga                      NewStatusPageDataAttributesTimeZone = "Riga"
	NewStatusPageDataAttributesTimeZoneRiyadh                    NewStatusPageDataAttributesTimeZone = "Riyadh"
	NewStatusPageDataAttributesTimeZoneRome                      NewStatusPageDataAttributesTimeZone = "Rome"
	NewStatusPageDataAttributesTimeZoneSamara                    NewStatusPageDataAttributesTimeZone = "Samara"
	NewStatusPageDataAttributesTimeZoneSamoa                     NewStatusPageDataAttributesTimeZone = "Samoa"
	NewStatusPageDataAttributesTimeZoneSantiago                  NewStatusPageDataAttributesTimeZone = "Santiago"
	NewStatusPageDataAttributesTimeZoneSapporo                   NewStatusPageDataAttributesTimeZone = "Sapporo"
	NewStatusPageDataAttributesTimeZoneSarajevo                  NewStatusPageDataAttributesTimeZone = "Sarajevo"
	NewStatusPageDataAttributesTimeZoneSaskatchewan              NewStatusPageDataAttributesTimeZone = "Saskatchewan"
	NewStatusPageDataAttributesTimeZoneSeoul                     NewStatusPageDataAttributesTimeZone = "Seoul"
	NewStatusPageDataAttributesTimeZoneSingapore                 NewStatusPageDataAttributesTimeZone = "Singapore"
	NewStatusPageDataAttributesTimeZoneSkopje                    NewStatusPageDataAttributesTimeZone = "Skopje"
	NewStatusPageDataAttributesTimeZoneSofia                     NewStatusPageDataAttributesTimeZone = "Sofia"
	NewStatusPageDataAttributesTimeZoneSolomonIs                 NewStatusPageDataAttributesTimeZone = "Solomon Is."
	NewStatusPageDataAttributesTimeZoneSrednekolymsk             NewStatusPageDataAttributesTimeZone = "Srednekolymsk"
	NewStatusPageDataAttributesTimeZoneSriJayawardenepura        NewStatusPageDataAttributesTimeZone = "Sri Jayawardenepura"
	NewStatusPageDataAttributesTimeZoneStPetersburg              NewStatusPageDataAttributesTimeZone = "St. Petersburg"
	NewStatusPageDataAttributesTimeZoneStockholm                 NewStatusPageDataAttributesTimeZone = "Stockholm"
	NewStatusPageDataAttributesTimeZoneSydney                    NewStatusPageDataAttributesTimeZone = "Sydney"
	NewStatusPageDataAttributesTimeZoneTaipei                    NewStatusPageDataAttributesTimeZone = "Taipei"
	NewStatusPageDataAttributesTimeZoneTallinn                   NewStatusPageDataAttributesTimeZone = "Tallinn"
	NewStatusPageDataAttributesTimeZoneTashkent                  NewStatusPageDataAttributesTimeZone = "Tashkent"
	NewStatusPageDataAttributesTimeZoneTbilisi                   NewStatusPageDataAttributesTimeZone = "Tbilisi"
	NewStatusPageDataAttributesTimeZoneTehran                    NewStatusPageDataAttributesTimeZone = "Tehran"
	NewStatusPageDataAttributesTimeZoneTijuana                   NewStatusPageDataAttributesTimeZone = "Tijuana"
	NewStatusPageDataAttributesTimeZoneTokelauIs                 NewStatusPageDataAttributesTimeZone = "Tokelau Is."
	NewStatusPageDataAttributesTimeZoneTokyo                     NewStatusPageDataAttributesTimeZone = "Tokyo"
	NewStatusPageDataAttributesTimeZoneUTC                       NewStatusPageDataAttributesTimeZone = "UTC"
	NewStatusPageDataAttributesTimeZoneUlaanbaatar               NewStatusPageDataAttributesTimeZone = "Ulaanbaatar"
	NewStatusPageDataAttributesTimeZoneUrumqi                    NewStatusPageDataAttributesTimeZone = "Urumqi"
	NewStatusPageDataAttributesTimeZoneVienna                    NewStatusPageDataAttributesTimeZone = "Vienna"
	NewStatusPageDataAttributesTimeZoneVilnius                   NewStatusPageDataAttributesTimeZone = "Vilnius"
	NewStatusPageDataAttributesTimeZoneVladivostok               NewStatusPageDataAttributesTimeZone = "Vladivostok"
	NewStatusPageDataAttributesTimeZoneVolgograd                 NewStatusPageDataAttributesTimeZone = "Volgograd"
	NewStatusPageDataAttributesTimeZoneWarsaw                    NewStatusPageDataAttributesTimeZone = "Warsaw"
	NewStatusPageDataAttributesTimeZoneWellington                NewStatusPageDataAttributesTimeZone = "Wellington"
	NewStatusPageDataAttributesTimeZoneWestCentralAfrica         NewStatusPageDataAttributesTimeZone = "West Central Africa"
	NewStatusPageDataAttributesTimeZoneYakutsk                   NewStatusPageDataAttributesTimeZone = "Yakutsk"
	NewStatusPageDataAttributesTimeZoneYerevan                   NewStatusPageDataAttributesTimeZone = "Yerevan"
	NewStatusPageDataAttributesTimeZoneZagreb                    NewStatusPageDataAttributesTimeZone = "Zagreb"
	NewStatusPageDataAttributesTimeZoneZurich                    NewStatusPageDataAttributesTimeZone = "Zurich"
)

// Defines values for NewStatusPageDataType.
const (
	NewStatusPageDataTypeStatusPages NewStatusPageDataType = "status_pages"
)

// Defines values for NewTeamDataType.
const (
	NewTeamDataTypeGroups NewTeamDataType = "groups"
)

// Defines values for NewWebhooksEndpointDataAttributesEventTypes.
const (
	NewWebhooksEndpointDataAttributesEventTypesAlertCreated                NewWebhooksEndpointDataAttributesEventTypes = "alert.created"
	NewWebhooksEndpointDataAttributesEventTypesGeniusWorkflowRunCanceled   NewWebhooksEndpointDataAttributesEventTypes = "genius_workflow_run.canceled"
	NewWebhooksEndpointDataAttributesEventTypesGeniusWorkflowRunCompleted  NewWebhooksEndpointDataAttributesEventTypes = "genius_workflow_run.completed"
	NewWebhooksEndpointDataAttributesEventTypesGeniusWorkflowRunFailed     NewWebhooksEndpointDataAttributesEventTypes = "genius_workflow_run.failed"
	NewWebhooksEndpointDataAttributesEventTypesGeniusWorkflowRunQueued     NewWebhooksEndpointDataAttributesEventTypes = "genius_workflow_run.queued"
	NewWebhooksEndpointDataAttributesEventTypesGeniusWorkflowRunStarted    NewWebhooksEndpointDataAttributesEventTypes = "genius_workflow_run.started"
	NewWebhooksEndpointDataAttributesEventTypesIncidentCancelled           NewWebhooksEndpointDataAttributesEventTypes = "incident.cancelled"
	NewWebhooksEndpointDataAttributesEventTypesIncidentCreated             NewWebhooksEndpointDataAttributesEventTypes = "incident.created"
	NewWebhooksEndpointDataAttributesEventTypesIncidentDeleted             NewWebhooksEndpointDataAttributesEventTypes = "incident.deleted"
	NewWebhooksEndpointDataAttributesEventTypesIncidentInTriage            NewWebhooksEndpointDataAttributesEventTypes = "incident.in_triage"
	NewWebhooksEndpointDataAttributesEventTypesIncidentMitigated           NewWebhooksEndpointDataAttributesEventTypes = "incident.mitigated"
	NewWebhooksEndpointDataAttributesEventTypesIncidentPostMortemCreated   NewWebhooksEndpointDataAttributesEventTypes = "incident_post_mortem.created"
	NewWebhooksEndpointDataAttributesEventTypesIncidentPostMortemDeleted   NewWebhooksEndpointDataAttributesEventTypes = "incident_post_mortem.deleted"
	NewWebhooksEndpointDataAttributesEventTypesIncidentPostMortemPublished NewWebhooksEndpointDataAttributesEventTypes = "incident_post_mortem.published"
	NewWebhooksEndpointDataAttributesEventTypesIncidentPostMortemUpdated   NewWebhooksEndpointDataAttributesEventTypes = "incident_post_mortem.updated"
	NewWebhooksEndpointDataAttributesEventTypesIncidentResolved            NewWebhooksEndpointDataAttributesEventTypes = "incident.resolved"
	NewWebhooksEndpointDataAttributesEventTypesIncidentScheduledCompleted  NewWebhooksEndpointDataAttributesEventTypes = "incident.scheduled.completed"
	NewWebhooksEndpointDataAttributesEventTypesIncidentScheduledCreated    NewWebhooksEndpointDataAttributesEventTypes = "incident.scheduled.created"
	NewWebhooksEndpointDataAttributesEventTypesIncidentScheduledDeleted    NewWebhooksEndpointDataAttributesEventTypes = "incident.scheduled.deleted"
	NewWebhooksEndpointDataAttributesEventTypesIncidentScheduledInProgress NewWebhooksEndpointDataAttributesEventTypes = "incident.scheduled.in_progress"
	NewWebhooksEndpointDataAttributesEventTypesIncidentScheduledUpdated    NewWebhooksEndpointDataAttributesEventTypes = "incident.scheduled.updated"
	NewWebhooksEndpointDataAttributesEventTypesIncidentUpdated             NewWebhooksEndpointDataAttributesEventTypes = "incident.updated"
	NewWebhooksEndpointDataAttributesEventTypesPulseCreated                NewWebhooksEndpointDataAttributesEventTypes = "pulse.created"
)

// Defines values for NewWebhooksEndpointDataType.
const (
	NewWebhooksEndpointDataTypeWebhooksEndpoints NewWebhooksEndpointDataType = "webhooks_endpoints"
)

// Defines values for NewWorkflowDataAttributesPriority.
const (
	NewWorkflowDataAttributesPriorityHigh   NewWorkflowDataAttributesPriority = "high"
	NewWorkflowDataAttributesPriorityLow    NewWorkflowDataAttributesPriority = "low"
	NewWorkflowDataAttributesPriorityNormal NewWorkflowDataAttributesPriority = "normal"
)

// Defines values for NewWorkflowDataAttributesRepeatOn.
const (
	NewWorkflowDataAttributesRepeatOnF NewWorkflowDataAttributesRepeatOn = "F"
	NewWorkflowDataAttributesRepeatOnM NewWorkflowDataAttributesRepeatOn = "M"
	NewWorkflowDataAttributesRepeatOnR NewWorkflowDataAttributesRepeatOn = "R"
	NewWorkflowDataAttributesRepeatOnS NewWorkflowDataAttributesRepeatOn = "S"
	NewWorkflowDataAttributesRepeatOnT NewWorkflowDataAttributesRepeatOn = "T"
	NewWorkflowDataAttributesRepeatOnU NewWorkflowDataAttributesRepeatOn = "U"
	NewWorkflowDataAttributesRepeatOnW NewWorkflowDataAttributesRepeatOn = "W"
)

// Defines values for NewWorkflowDataType.
const (
	NewWorkflowDataTypeWorkflows NewWorkflowDataType = "workflows"
)

// Defines values for NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition.
const (
	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionANY          NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "ANY"
	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionCONTAINS     NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "CONTAINS"
	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionCONTAINSALL  NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "CONTAINS_ALL"
	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionCONTAINSNONE NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "CONTAINS_NONE"
	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionIS           NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "IS"
	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionNONE         NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "NONE"
	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionSET          NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "SET"
	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionUNSET        NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "UNSET"
)

// Defines values for NewWorkflowCustomFieldSelectionDataType.
const (
	NewWorkflowCustomFieldSelectionDataTypeWorkflowCustomFieldSelections NewWorkflowCustomFieldSelectionDataType = "workflow_custom_field_selections"
)

// Defines values for NewWorkflowFormFieldConditionDataAttributesIncidentCondition.
const (
	NewWorkflowFormFieldConditionDataAttributesIncidentConditionANY          NewWorkflowFormFieldConditionDataAttributesIncidentCondition = "ANY"
	NewWorkflowFormFieldConditionDataAttributesIncidentConditionCONTAINS     NewWorkflowFormFieldConditionDataAttributesIncidentCondition = "CONTAINS"
	NewWorkflowFormFieldConditionDataAttributesIncidentConditionCONTAINSALL  NewWorkflowFormFieldConditionDataAttributesIncidentCondition = "CONTAINS_ALL"
	NewWorkflowFormFieldConditionDataAttributesIncidentConditionCONTAINSNONE NewWorkflowFormFieldConditionDataAttributesIncidentCondition = "CONTAINS_NONE"
	NewWorkflowFormFieldConditionDataAttributesIncidentConditionIS           NewWorkflowFormFieldConditionDataAttributesIncidentCondition = "IS"
	NewWorkflowFormFieldConditionDataAttributesIncidentConditionNONE         NewWorkflowFormFieldConditionDataAttributesIncidentCondition = "NONE"
	NewWorkflowFormFieldConditionDataAttributesIncidentConditionSET          NewWorkflowFormFieldConditionDataAttributesIncidentCondition = "SET"
	NewWorkflowFormFieldConditionDataAttributesIncidentConditionUNSET        NewWorkflowFormFieldConditionDataAttributesIncidentCondition = "UNSET"
)

// Defines values for NewWorkflowFormFieldConditionDataType.
const (
	NewWorkflowFormFieldConditionDataTypeWorkflowFormFieldConditions NewWorkflowFormFieldConditionDataType = "workflow_form_field_conditions"
)

// Defines values for NewWorkflowGroupDataAttributesKind.
const (
	NewWorkflowGroupDataAttributesKindActionItem NewWorkflowGroupDataAttributesKind = "action_item"
	NewWorkflowGroupDataAttributesKindAlert      NewWorkflowGroupDataAttributesKind = "alert"
	NewWorkflowGroupDataAttributesKindIncident   NewWorkflowGroupDataAttributesKind = "incident"
	NewWorkflowGroupDataAttributesKindPostMortem NewWorkflowGroupDataAttributesKind = "post_mortem"
	NewWorkflowGroupDataAttributesKindPulse      NewWorkflowGroupDataAttributesKind = "pulse"
	NewWorkflowGroupDataAttributesKindSimple     NewWorkflowGroupDataAttributesKind = "simple"
)

// Defines values for NewWorkflowGroupDataType.
const (
	NewWorkflowGroupDataTypeWorkflowGroups NewWorkflowGroupDataType = "workflow_groups"
)

// Defines values for NewWorkflowRunDataType.
const (
	NewWorkflowRunDataTypeWorkflowRuns NewWorkflowRunDataType = "workflow_runs"
)

// Defines values for NewWorkflowTaskDataType.
const (
	NewWorkflowTaskDataTypeWorkflowTasks NewWorkflowTaskDataType = "workflow_tasks"
)

// Defines values for PageOpsgenieOnCallRespondersTaskParamsPriority.
const (
	PageOpsgenieOnCallRespondersTaskParamsPriorityAuto PageOpsgenieOnCallRespondersTaskParamsPriority = "auto"
	PageOpsgenieOnCallRespondersTaskParamsPriorityP1   PageOpsgenieOnCallRespondersTaskParamsPriority = "P1"
	PageOpsgenieOnCallRespondersTaskParamsPriorityP2   PageOpsgenieOnCallRespondersTaskParamsPriority = "P2"
	PageOpsgenieOnCallRespondersTaskParamsPriorityP3   PageOpsgenieOnCallRespondersTaskParamsPriority = "P3"
	PageOpsgenieOnCallRespondersTaskParamsPriorityP4   PageOpsgenieOnCallRespondersTaskParamsPriority = "P4"
	PageOpsgenieOnCallRespondersTaskParamsPriorityP5   PageOpsgenieOnCallRespondersTaskParamsPriority = "P5"
)

// Defines values for PageOpsgenieOnCallRespondersTaskParamsTaskType.
const (
	PageOpsgenieOnCallResponders PageOpsgenieOnCallRespondersTaskParamsTaskType = "page_opsgenie_on_call_responders"
)

// Defines values for PagePagerdutyOnCallRespondersTaskParamsTaskType.
const (
	PagePagerdutyOnCallResponders PagePagerdutyOnCallRespondersTaskParamsTaskType = "page_pagerduty_on_call_responders"
)

// Defines values for PagePagerdutyOnCallRespondersTaskParamsUrgency.
const (
	PagePagerdutyOnCallRespondersTaskParamsUrgencyAuto PagePagerdutyOnCallRespondersTaskParamsUrgency = "auto"
	PagePagerdutyOnCallRespondersTaskParamsUrgencyHigh PagePagerdutyOnCallRespondersTaskParamsUrgency = "high"
	PagePagerdutyOnCallRespondersTaskParamsUrgencyLow  PagePagerdutyOnCallRespondersTaskParamsUrgency = "low"
)

// Defines values for PageVictorOpsOnCallRespondersTaskParamsTaskType.
const (
	PageVictorOpsOnCallResponders PageVictorOpsOnCallRespondersTaskParamsTaskType = "page_victor_ops_on_call_responders"
)

// Defines values for PlaybookListDataType.
const (
	PlaybookListDataTypePlaybooks PlaybookListDataType = "playbooks"
)

// Defines values for PlaybookResponseDataType.
const (
	PlaybookResponseDataTypePlaybooks PlaybookResponseDataType = "playbooks"
)

// Defines values for PlaybookTaskListDataType.
const (
	PlaybookTaskListDataTypePlaybookTasks PlaybookTaskListDataType = "playbook_tasks"
)

// Defines values for PlaybookTaskResponseDataType.
const (
	PlaybookTaskResponseDataTypePlaybookTasks PlaybookTaskResponseDataType = "playbook_tasks"
)

// Defines values for PostMortemTemplateFormat.
const (
	PostMortemTemplateFormatHtml     PostMortemTemplateFormat = "html"
	PostMortemTemplateFormatMarkdown PostMortemTemplateFormat = "markdown"
)

// Defines values for PostMortemTemplateListDataAttributesFormat.
const (
	PostMortemTemplateListDataAttributesFormatHtml     PostMortemTemplateListDataAttributesFormat = "html"
	PostMortemTemplateListDataAttributesFormatMarkdown PostMortemTemplateListDataAttributesFormat = "markdown"
)

// Defines values for PostMortemTemplateListDataType.
const (
	PostMortemTemplateListDataTypePostMortemTemplates PostMortemTemplateListDataType = "post_mortem_templates"
)

// Defines values for PostMortemTemplateResponseDataAttributesFormat.
const (
	PostMortemTemplateResponseDataAttributesFormatHtml     PostMortemTemplateResponseDataAttributesFormat = "html"
	PostMortemTemplateResponseDataAttributesFormatMarkdown PostMortemTemplateResponseDataAttributesFormat = "markdown"
)

// Defines values for PostMortemTemplateResponseDataType.
const (
	PostMortemTemplateResponseDataTypePostMortemTemplates PostMortemTemplateResponseDataType = "post_mortem_templates"
)

// Defines values for PrintTaskParamsTaskType.
const (
	Print PrintTaskParamsTaskType = "print"
)

// Defines values for PublishIncidentTaskParamsStatus.
const (
	PublishIncidentTaskParamsStatusCompleted     PublishIncidentTaskParamsStatus = "completed"
	PublishIncidentTaskParamsStatusIdentified    PublishIncidentTaskParamsStatus = "identified"
	PublishIncidentTaskParamsStatusInProgress    PublishIncidentTaskParamsStatus = "in_progress"
	PublishIncidentTaskParamsStatusInvestigating PublishIncidentTaskParamsStatus = "investigating"
	PublishIncidentTaskParamsStatusMonitoring    PublishIncidentTaskParamsStatus = "monitoring"
	PublishIncidentTaskParamsStatusResolved      PublishIncidentTaskParamsStatus = "resolved"
	PublishIncidentTaskParamsStatusScheduled     PublishIncidentTaskParamsStatus = "scheduled"
	PublishIncidentTaskParamsStatusVerifying     PublishIncidentTaskParamsStatus = "verifying"
)

// Defines values for PublishIncidentTaskParamsTaskType.
const (
	PublishIncident PublishIncidentTaskParamsTaskType = "publish_incident"
)

// Defines values for PulseServicesStatus.
const (
	PulseServicesStatusImpacted      PulseServicesStatus = "impacted"
	PulseServicesStatusMajorOutage   PulseServicesStatus = "major_outage"
	PulseServicesStatusOperational   PulseServicesStatus = "operational"
	PulseServicesStatusOutage        PulseServicesStatus = "outage"
	PulseServicesStatusPartialOutage PulseServicesStatus = "partial_outage"
)

// Defines values for PulseListDataAttributesServicesStatus.
const (
	PulseListDataAttributesServicesStatusImpacted      PulseListDataAttributesServicesStatus = "impacted"
	PulseListDataAttributesServicesStatusMajorOutage   PulseListDataAttributesServicesStatus = "major_outage"
	PulseListDataAttributesServicesStatusOperational   PulseListDataAttributesServicesStatus = "operational"
	PulseListDataAttributesServicesStatusOutage        PulseListDataAttributesServicesStatus = "outage"
	PulseListDataAttributesServicesStatusPartialOutage PulseListDataAttributesServicesStatus = "partial_outage"
)

// Defines values for PulseListDataType.
const (
	PulseListDataTypePulses PulseListDataType = "pulses"
)

// Defines values for PulseResponseDataAttributesServicesStatus.
const (
	PulseResponseDataAttributesServicesStatusImpacted      PulseResponseDataAttributesServicesStatus = "impacted"
	PulseResponseDataAttributesServicesStatusMajorOutage   PulseResponseDataAttributesServicesStatus = "major_outage"
	PulseResponseDataAttributesServicesStatusOperational   PulseResponseDataAttributesServicesStatus = "operational"
	PulseResponseDataAttributesServicesStatusOutage        PulseResponseDataAttributesServicesStatus = "outage"
	PulseResponseDataAttributesServicesStatusPartialOutage PulseResponseDataAttributesServicesStatus = "partial_outage"
)

// Defines values for PulseResponseDataType.
const (
	PulseResponseDataTypePulses PulseResponseDataType = "pulses"
)

// Defines values for PulseTriggerParamsPulseCondition.
const (
	PulseTriggerParamsPulseConditionALL  PulseTriggerParamsPulseCondition = "ALL"
	PulseTriggerParamsPulseConditionANY  PulseTriggerParamsPulseCondition = "ANY"
	PulseTriggerParamsPulseConditionNONE PulseTriggerParamsPulseCondition = "NONE"
)

// Defines values for PulseTriggerParamsPulseConditionLabel.
const (
	PulseTriggerParamsPulseConditionLabelANY          PulseTriggerParamsPulseConditionLabel = "ANY"
	PulseTriggerParamsPulseConditionLabelCONTAINS     PulseTriggerParamsPulseConditionLabel = "CONTAINS"
	PulseTriggerParamsPulseConditionLabelCONTAINSALL  PulseTriggerParamsPulseConditionLabel = "CONTAINS_ALL"
	PulseTriggerParamsPulseConditionLabelCONTAINSNONE PulseTriggerParamsPulseConditionLabel = "CONTAINS_NONE"
	PulseTriggerParamsPulseConditionLabelIS           PulseTriggerParamsPulseConditionLabel = "IS"
	PulseTriggerParamsPulseConditionLabelNONE         PulseTriggerParamsPulseConditionLabel = "NONE"
	PulseTriggerParamsPulseConditionLabelSET          PulseTriggerParamsPulseConditionLabel = "SET"
	PulseTriggerParamsPulseConditionLabelUNSET        PulseTriggerParamsPulseConditionLabel = "UNSET"
)

// Defines values for PulseTriggerParamsPulseConditionPayload.
const (
	PulseTriggerParamsPulseConditionPayloadANY          PulseTriggerParamsPulseConditionPayload = "ANY"
	PulseTriggerParamsPulseConditionPayloadCONTAINS     PulseTriggerParamsPulseConditionPayload = "CONTAINS"
	PulseTriggerParamsPulseConditionPayloadCONTAINSALL  PulseTriggerParamsPulseConditionPayload = "CONTAINS_ALL"
	PulseTriggerParamsPulseConditionPayloadCONTAINSNONE PulseTriggerParamsPulseConditionPayload = "CONTAINS_NONE"
	PulseTriggerParamsPulseConditionPayloadIS           PulseTriggerParamsPulseConditionPayload = "IS"
	PulseTriggerParamsPulseConditionPayloadNONE         PulseTriggerParamsPulseConditionPayload = "NONE"
	PulseTriggerParamsPulseConditionPayloadSET          PulseTriggerParamsPulseConditionPayload = "SET"
	PulseTriggerParamsPulseConditionPayloadUNSET        PulseTriggerParamsPulseConditionPayload = "UNSET"
)

// Defines values for PulseTriggerParamsPulseConditionSource.
const (
	PulseTriggerParamsPulseConditionSourceANY          PulseTriggerParamsPulseConditionSource = "ANY"
	PulseTriggerParamsPulseConditionSourceCONTAINS     PulseTriggerParamsPulseConditionSource = "CONTAINS"
	PulseTriggerParamsPulseConditionSourceCONTAINSALL  PulseTriggerParamsPulseConditionSource = "CONTAINS_ALL"
	PulseTriggerParamsPulseConditionSourceCONTAINSNONE PulseTriggerParamsPulseConditionSource = "CONTAINS_NONE"
	PulseTriggerParamsPulseConditionSourceIS           PulseTriggerParamsPulseConditionSource = "IS"
	PulseTriggerParamsPulseConditionSourceNONE         PulseTriggerParamsPulseConditionSource = "NONE"
	PulseTriggerParamsPulseConditionSourceSET          PulseTriggerParamsPulseConditionSource = "SET"
	PulseTriggerParamsPulseConditionSourceUNSET        PulseTriggerParamsPulseConditionSource = "UNSET"
)

// Defines values for PulseTriggerParamsTriggerType.
const (
	PulseTriggerParamsTriggerTypePulse PulseTriggerParamsTriggerType = "pulse"
)

// Defines values for PulseTriggerParamsTriggers.
const (
	PulseTriggerParamsTriggersPulseCreated PulseTriggerParamsTriggers = "pulse_created"
)

// Defines values for RedisClientTaskParamsTaskType.
const (
	RedisClient RedisClientTaskParamsTaskType = "redis_client"
)

// Defines values for RemoveGoogleDocsPermissionsTaskParamsAttributeToQueryBy.
const (
	RemoveGoogleDocsPermissionsTaskParamsAttributeToQueryByEmailAddress RemoveGoogleDocsPermissionsTaskParamsAttributeToQueryBy = "email_address"
	RemoveGoogleDocsPermissionsTaskParamsAttributeToQueryByRole         RemoveGoogleDocsPermissionsTaskParamsAttributeToQueryBy = "role"
	RemoveGoogleDocsPermissionsTaskParamsAttributeToQueryByType         RemoveGoogleDocsPermissionsTaskParamsAttributeToQueryBy = "type"
)

// Defines values for RemoveGoogleDocsPermissionsTaskParamsTaskType.
const (
	RemoveGoogleDocsPermissions RemoveGoogleDocsPermissionsTaskParamsTaskType = "remove_google_docs_permissions"
)

// Defines values for RemoveSubscribersDataType.
const (
	RemoveSubscribersDataTypeIncidents RemoveSubscribersDataType = "incidents"
)

// Defines values for RenameSlackChannelTaskParamsTaskType.
const (
	RenameSlackChannel RenameSlackChannelTaskParamsTaskType = "rename_slack_channel"
)

// Defines values for ResolveIncidentDataType.
const (
	ResolveIncidentDataTypeIncidents ResolveIncidentDataType = "incidents"
)

// Defines values for RestartIncidentDataType.
const (
	RestartIncidentDataTypeIncidents RestartIncidentDataType = "incidents"
)

// Defines values for RetrospectiveStepListDataType.
const (
	RetrospectiveStepListDataTypeRetrospectiveSteps RetrospectiveStepListDataType = "retrospective_steps"
)

// Defines values for RetrospectiveStepResponseDataType.
const (
	RetrospectiveStepResponseDataTypeRetrospectiveSteps RetrospectiveStepResponseDataType = "retrospective_steps"
)

// Defines values for RoleApiKeysPermissions.
const (
	RoleApiKeysPermissionsCreate RoleApiKeysPermissions = "create"
	RoleApiKeysPermissionsDelete RoleApiKeysPermissions = "delete"
	RoleApiKeysPermissionsRead   RoleApiKeysPermissions = "read"
	RoleApiKeysPermissionsUpdate RoleApiKeysPermissions = "update"
)

// Defines values for RoleAuditsPermissions.
const (
	RoleAuditsPermissionsCreate RoleAuditsPermissions = "create"
	RoleAuditsPermissionsDelete RoleAuditsPermissions = "delete"
	RoleAuditsPermissionsRead   RoleAuditsPermissions = "read"
	RoleAuditsPermissionsUpdate RoleAuditsPermissions = "update"
)

// Defines values for RoleBillingPermissions.
const (
	RoleBillingPermissionsCreate RoleBillingPermissions = "create"
	RoleBillingPermissionsDelete RoleBillingPermissions = "delete"
	RoleBillingPermissionsRead   RoleBillingPermissions = "read"
	RoleBillingPermissionsUpdate RoleBillingPermissions = "update"
)

// Defines values for RoleEnvironmentsPermissions.
const (
	RoleEnvironmentsPermissionsCreate RoleEnvironmentsPermissions = "create"
	RoleEnvironmentsPermissionsDelete RoleEnvironmentsPermissions = "delete"
	RoleEnvironmentsPermissionsRead   RoleEnvironmentsPermissions = "read"
	RoleEnvironmentsPermissionsUpdate RoleEnvironmentsPermissions = "update"
)

// Defines values for RoleFormFieldsPermissions.
const (
	RoleFormFieldsPermissionsCreate RoleFormFieldsPermissions = "create"
	RoleFormFieldsPermissionsDelete RoleFormFieldsPermissions = "delete"
	RoleFormFieldsPermissionsRead   RoleFormFieldsPermissions = "read"
	RoleFormFieldsPermissionsUpdate RoleFormFieldsPermissions = "update"
)

// Defines values for RoleFunctionalitiesPermissions.
const (
	RoleFunctionalitiesPermissionsCreate RoleFunctionalitiesPermissions = "create"
	RoleFunctionalitiesPermissionsDelete RoleFunctionalitiesPermissions = "delete"
	RoleFunctionalitiesPermissionsRead   RoleFunctionalitiesPermissions = "read"
	RoleFunctionalitiesPermissionsUpdate RoleFunctionalitiesPermissions = "update"
)

// Defines values for RoleGroupsPermissions.
const (
	RoleGroupsPermissionsCreate RoleGroupsPermissions = "create"
	RoleGroupsPermissionsDelete RoleGroupsPermissions = "delete"
	RoleGroupsPermissionsRead   RoleGroupsPermissions = "read"
	RoleGroupsPermissionsUpdate RoleGroupsPermissions = "update"
)

// Defines values for RoleIncidentCausesPermissions.
const (
	RoleIncidentCausesPermissionsCreate RoleIncidentCausesPermissions = "create"
	RoleIncidentCausesPermissionsDelete RoleIncidentCausesPermissions = "delete"
	RoleIncidentCausesPermissionsRead   RoleIncidentCausesPermissions = "read"
	RoleIncidentCausesPermissionsUpdate RoleIncidentCausesPermissions = "update"
)

// Defines values for RoleIncidentFeedbacksPermissions.
const (
	RoleIncidentFeedbacksPermissionsCreate RoleIncidentFeedbacksPermissions = "create"
	RoleIncidentFeedbacksPermissionsDelete RoleIncidentFeedbacksPermissions = "delete"
	RoleIncidentFeedbacksPermissionsRead   RoleIncidentFeedbacksPermissions = "read"
	RoleIncidentFeedbacksPermissionsUpdate RoleIncidentFeedbacksPermissions = "update"
)

// Defines values for RoleIncidentPostMortemsPermissions.
const (
	RoleIncidentPostMortemsPermissionsCreate RoleIncidentPostMortemsPermissions = "create"
	RoleIncidentPostMortemsPermissionsDelete RoleIncidentPostMortemsPermissions = "delete"
	RoleIncidentPostMortemsPermissionsRead   RoleIncidentPostMortemsPermissions = "read"
	RoleIncidentPostMortemsPermissionsUpdate RoleIncidentPostMortemsPermissions = "update"
)

// Defines values for RoleIncidentRolesPermissions.
const (
	RoleIncidentRolesPermissionsCreate RoleIncidentRolesPermissions = "create"
	RoleIncidentRolesPermissionsDelete RoleIncidentRolesPermissions = "delete"
	RoleIncidentRolesPermissionsRead   RoleIncidentRolesPermissions = "read"
	RoleIncidentRolesPermissionsUpdate RoleIncidentRolesPermissions = "update"
)

// Defines values for RoleIncidentTypesPermissions.
const (
	RoleIncidentTypesPermissionsCreate RoleIncidentTypesPermissions = "create"
	RoleIncidentTypesPermissionsDelete RoleIncidentTypesPermissions = "delete"
	RoleIncidentTypesPermissionsRead   RoleIncidentTypesPermissions = "read"
	RoleIncidentTypesPermissionsUpdate RoleIncidentTypesPermissions = "update"
)

// Defines values for RoleIncidentsPermissions.
const (
	RoleIncidentsPermissionsCreate RoleIncidentsPermissions = "create"
	RoleIncidentsPermissionsDelete RoleIncidentsPermissions = "delete"
	RoleIncidentsPermissionsRead   RoleIncidentsPermissions = "read"
	RoleIncidentsPermissionsUpdate RoleIncidentsPermissions = "update"
)

// Defines values for RoleInvitationsPermissions.
const (
	RoleInvitationsPermissionsCreate RoleInvitationsPermissions = "create"
	RoleInvitationsPermissionsDelete RoleInvitationsPermissions = "delete"
	RoleInvitationsPermissionsRead   RoleInvitationsPermissions = "read"
	RoleInvitationsPermissionsUpdate RoleInvitationsPermissions = "update"
)

// Defines values for RolePlaybooksPermissions.
const (
	RolePlaybooksPermissionsCreate RolePlaybooksPermissions = "create"
	RolePlaybooksPermissionsDelete RolePlaybooksPermissions = "delete"
	RolePlaybooksPermissionsRead   RolePlaybooksPermissions = "read"
	RolePlaybooksPermissionsUpdate RolePlaybooksPermissions = "update"
)

// Defines values for RolePrivateIncidentsPermissions.
const (
	RolePrivateIncidentsPermissionsCreate RolePrivateIncidentsPermissions = "create"
	RolePrivateIncidentsPermissionsDelete RolePrivateIncidentsPermissions = "delete"
	RolePrivateIncidentsPermissionsRead   RolePrivateIncidentsPermissions = "read"
	RolePrivateIncidentsPermissionsUpdate RolePrivateIncidentsPermissions = "update"
)

// Defines values for RoleRetrospectivePermissions.
const (
	RoleRetrospectivePermissionsCreate RoleRetrospectivePermissions = "create"
	RoleRetrospectivePermissionsDelete RoleRetrospectivePermissions = "delete"
	RoleRetrospectivePermissionsRead   RoleRetrospectivePermissions = "read"
	RoleRetrospectivePermissionsUpdate RoleRetrospectivePermissions = "update"
)

// Defines values for RoleRolesPermissions.
const (
	RoleRolesPermissionsCreate RoleRolesPermissions = "create"
	RoleRolesPermissionsDelete RoleRolesPermissions = "delete"
	RoleRolesPermissionsRead   RoleRolesPermissions = "read"
	RoleRolesPermissionsUpdate RoleRolesPermissions = "update"
)

// Defines values for RoleSecretsPermissions.
const (
	RoleSecretsPermissionsCreate RoleSecretsPermissions = "create"
	RoleSecretsPermissionsDelete RoleSecretsPermissions = "delete"
	RoleSecretsPermissionsRead   RoleSecretsPermissions = "read"
	RoleSecretsPermissionsUpdate RoleSecretsPermissions = "update"
)

// Defines values for RoleServicesPermissions.
const (
	RoleServicesPermissionsCreate RoleServicesPermissions = "create"
	RoleServicesPermissionsDelete RoleServicesPermissions = "delete"
	RoleServicesPermissionsRead   RoleServicesPermissions = "read"
	RoleServicesPermissionsUpdate RoleServicesPermissions = "update"
)

// Defines values for RoleSeveritiesPermissions.
const (
	RoleSeveritiesPermissionsCreate RoleSeveritiesPermissions = "create"
	RoleSeveritiesPermissionsDelete RoleSeveritiesPermissions = "delete"
	RoleSeveritiesPermissionsRead   RoleSeveritiesPermissions = "read"
	RoleSeveritiesPermissionsUpdate RoleSeveritiesPermissions = "update"
)

// Defines values for RoleStatusPagesPermissions.
const (
	RoleStatusPagesPermissionsCreate RoleStatusPagesPermissions = "create"
	RoleStatusPagesPermissionsDelete RoleStatusPagesPermissions = "delete"
	RoleStatusPagesPermissionsRead   RoleStatusPagesPermissions = "read"
	RoleStatusPagesPermissionsUpdate RoleStatusPagesPermissions = "update"
)

// Defines values for RoleWebhooksPermissions.
const (
	RoleWebhooksPermissionsCreate RoleWebhooksPermissions = "create"
	RoleWebhooksPermissionsDelete RoleWebhooksPermissions = "delete"
	RoleWebhooksPermissionsRead   RoleWebhooksPermissions = "read"
	RoleWebhooksPermissionsUpdate RoleWebhooksPermissions = "update"
)

// Defines values for RoleWorkflowsPermissions.
const (
	RoleWorkflowsPermissionsCreate RoleWorkflowsPermissions = "create"
	RoleWorkflowsPermissionsDelete RoleWorkflowsPermissions = "delete"
	RoleWorkflowsPermissionsRead   RoleWorkflowsPermissions = "read"
	RoleWorkflowsPermissionsUpdate RoleWorkflowsPermissions = "update"
)

// Defines values for RoleListDataAttributesApiKeysPermissions.
const (
	RoleListDataAttributesApiKeysPermissionsCreate RoleListDataAttributesApiKeysPermissions = "create"
	RoleListDataAttributesApiKeysPermissionsDelete RoleListDataAttributesApiKeysPermissions = "delete"
	RoleListDataAttributesApiKeysPermissionsRead   RoleListDataAttributesApiKeysPermissions = "read"
	RoleListDataAttributesApiKeysPermissionsUpdate RoleListDataAttributesApiKeysPermissions = "update"
)

// Defines values for RoleListDataAttributesAuditsPermissions.
const (
	RoleListDataAttributesAuditsPermissionsCreate RoleListDataAttributesAuditsPermissions = "create"
	RoleListDataAttributesAuditsPermissionsDelete RoleListDataAttributesAuditsPermissions = "delete"
	RoleListDataAttributesAuditsPermissionsRead   RoleListDataAttributesAuditsPermissions = "read"
	RoleListDataAttributesAuditsPermissionsUpdate RoleListDataAttributesAuditsPermissions = "update"
)

// Defines values for RoleListDataAttributesBillingPermissions.
const (
	RoleListDataAttributesBillingPermissionsCreate RoleListDataAttributesBillingPermissions = "create"
	RoleListDataAttributesBillingPermissionsDelete RoleListDataAttributesBillingPermissions = "delete"
	RoleListDataAttributesBillingPermissionsRead   RoleListDataAttributesBillingPermissions = "read"
	RoleListDataAttributesBillingPermissionsUpdate RoleListDataAttributesBillingPermissions = "update"
)

// Defines values for RoleListDataAttributesEnvironmentsPermissions.
const (
	RoleListDataAttributesEnvironmentsPermissionsCreate RoleListDataAttributesEnvironmentsPermissions = "create"
	RoleListDataAttributesEnvironmentsPermissionsDelete RoleListDataAttributesEnvironmentsPermissions = "delete"
	RoleListDataAttributesEnvironmentsPermissionsRead   RoleListDataAttributesEnvironmentsPermissions = "read"
	RoleListDataAttributesEnvironmentsPermissionsUpdate RoleListDataAttributesEnvironmentsPermissions = "update"
)

// Defines values for RoleListDataAttributesFormFieldsPermissions.
const (
	RoleListDataAttributesFormFieldsPermissionsCreate RoleListDataAttributesFormFieldsPermissions = "create"
	RoleListDataAttributesFormFieldsPermissionsDelete RoleListDataAttributesFormFieldsPermissions = "delete"
	RoleListDataAttributesFormFieldsPermissionsRead   RoleListDataAttributesFormFieldsPermissions = "read"
	RoleListDataAttributesFormFieldsPermissionsUpdate RoleListDataAttributesFormFieldsPermissions = "update"
)

// Defines values for RoleListDataAttributesFunctionalitiesPermissions.
const (
	RoleListDataAttributesFunctionalitiesPermissionsCreate RoleListDataAttributesFunctionalitiesPermissions = "create"
	RoleListDataAttributesFunctionalitiesPermissionsDelete RoleListDataAttributesFunctionalitiesPermissions = "delete"
	RoleListDataAttributesFunctionalitiesPermissionsRead   RoleListDataAttributesFunctionalitiesPermissions = "read"
	RoleListDataAttributesFunctionalitiesPermissionsUpdate RoleListDataAttributesFunctionalitiesPermissions = "update"
)

// Defines values for RoleListDataAttributesGroupsPermissions.
const (
	RoleListDataAttributesGroupsPermissionsCreate RoleListDataAttributesGroupsPermissions = "create"
	RoleListDataAttributesGroupsPermissionsDelete RoleListDataAttributesGroupsPermissions = "delete"
	RoleListDataAttributesGroupsPermissionsRead   RoleListDataAttributesGroupsPermissions = "read"
	RoleListDataAttributesGroupsPermissionsUpdate RoleListDataAttributesGroupsPermissions = "update"
)

// Defines values for RoleListDataAttributesIncidentCausesPermissions.
const (
	RoleListDataAttributesIncidentCausesPermissionsCreate RoleListDataAttributesIncidentCausesPermissions = "create"
	RoleListDataAttributesIncidentCausesPermissionsDelete RoleListDataAttributesIncidentCausesPermissions = "delete"
	RoleListDataAttributesIncidentCausesPermissionsRead   RoleListDataAttributesIncidentCausesPermissions = "read"
	RoleListDataAttributesIncidentCausesPermissionsUpdate RoleListDataAttributesIncidentCausesPermissions = "update"
)

// Defines values for RoleListDataAttributesIncidentFeedbacksPermissions.
const (
	RoleListDataAttributesIncidentFeedbacksPermissionsCreate RoleListDataAttributesIncidentFeedbacksPermissions = "create"
	RoleListDataAttributesIncidentFeedbacksPermissionsDelete RoleListDataAttributesIncidentFeedbacksPermissions = "delete"
	RoleListDataAttributesIncidentFeedbacksPermissionsRead   RoleListDataAttributesIncidentFeedbacksPermissions = "read"
	RoleListDataAttributesIncidentFeedbacksPermissionsUpdate RoleListDataAttributesIncidentFeedbacksPermissions = "update"
)

// Defines values for RoleListDataAttributesIncidentPostMortemsPermissions.
const (
	RoleListDataAttributesIncidentPostMortemsPermissionsCreate RoleListDataAttributesIncidentPostMortemsPermissions = "create"
	RoleListDataAttributesIncidentPostMortemsPermissionsDelete RoleListDataAttributesIncidentPostMortemsPermissions = "delete"
	RoleListDataAttributesIncidentPostMortemsPermissionsRead   RoleListDataAttributesIncidentPostMortemsPermissions = "read"
	RoleListDataAttributesIncidentPostMortemsPermissionsUpdate RoleListDataAttributesIncidentPostMortemsPermissions = "update"
)

// Defines values for RoleListDataAttributesIncidentRolesPermissions.
const (
	RoleListDataAttributesIncidentRolesPermissionsCreate RoleListDataAttributesIncidentRolesPermissions = "create"
	RoleListDataAttributesIncidentRolesPermissionsDelete RoleListDataAttributesIncidentRolesPermissions = "delete"
	RoleListDataAttributesIncidentRolesPermissionsRead   RoleListDataAttributesIncidentRolesPermissions = "read"
	RoleListDataAttributesIncidentRolesPermissionsUpdate RoleListDataAttributesIncidentRolesPermissions = "update"
)

// Defines values for RoleListDataAttributesIncidentTypesPermissions.
const (
	RoleListDataAttributesIncidentTypesPermissionsCreate RoleListDataAttributesIncidentTypesPermissions = "create"
	RoleListDataAttributesIncidentTypesPermissionsDelete RoleListDataAttributesIncidentTypesPermissions = "delete"
	RoleListDataAttributesIncidentTypesPermissionsRead   RoleListDataAttributesIncidentTypesPermissions = "read"
	RoleListDataAttributesIncidentTypesPermissionsUpdate RoleListDataAttributesIncidentTypesPermissions = "update"
)

// Defines values for RoleListDataAttributesIncidentsPermissions.
const (
	RoleListDataAttributesIncidentsPermissionsCreate RoleListDataAttributesIncidentsPermissions = "create"
	RoleListDataAttributesIncidentsPermissionsDelete RoleListDataAttributesIncidentsPermissions = "delete"
	RoleListDataAttributesIncidentsPermissionsRead   RoleListDataAttributesIncidentsPermissions = "read"
	RoleListDataAttributesIncidentsPermissionsUpdate RoleListDataAttributesIncidentsPermissions = "update"
)

// Defines values for RoleListDataAttributesInvitationsPermissions.
const (
	RoleListDataAttributesInvitationsPermissionsCreate RoleListDataAttributesInvitationsPermissions = "create"
	RoleListDataAttributesInvitationsPermissionsDelete RoleListDataAttributesInvitationsPermissions = "delete"
	RoleListDataAttributesInvitationsPermissionsRead   RoleListDataAttributesInvitationsPermissions = "read"
	RoleListDataAttributesInvitationsPermissionsUpdate RoleListDataAttributesInvitationsPermissions = "update"
)

// Defines values for RoleListDataAttributesPlaybooksPermissions.
const (
	RoleListDataAttributesPlaybooksPermissionsCreate RoleListDataAttributesPlaybooksPermissions = "create"
	RoleListDataAttributesPlaybooksPermissionsDelete RoleListDataAttributesPlaybooksPermissions = "delete"
	RoleListDataAttributesPlaybooksPermissionsRead   RoleListDataAttributesPlaybooksPermissions = "read"
	RoleListDataAttributesPlaybooksPermissionsUpdate RoleListDataAttributesPlaybooksPermissions = "update"
)

// Defines values for RoleListDataAttributesPrivateIncidentsPermissions.
const (
	RoleListDataAttributesPrivateIncidentsPermissionsCreate RoleListDataAttributesPrivateIncidentsPermissions = "create"
	RoleListDataAttributesPrivateIncidentsPermissionsDelete RoleListDataAttributesPrivateIncidentsPermissions = "delete"
	RoleListDataAttributesPrivateIncidentsPermissionsRead   RoleListDataAttributesPrivateIncidentsPermissions = "read"
	RoleListDataAttributesPrivateIncidentsPermissionsUpdate RoleListDataAttributesPrivateIncidentsPermissions = "update"
)

// Defines values for RoleListDataAttributesRetrospectivePermissions.
const (
	RoleListDataAttributesRetrospectivePermissionsCreate RoleListDataAttributesRetrospectivePermissions = "create"
	RoleListDataAttributesRetrospectivePermissionsDelete RoleListDataAttributesRetrospectivePermissions = "delete"
	RoleListDataAttributesRetrospectivePermissionsRead   RoleListDataAttributesRetrospectivePermissions = "read"
	RoleListDataAttributesRetrospectivePermissionsUpdate RoleListDataAttributesRetrospectivePermissions = "update"
)

// Defines values for RoleListDataAttributesRolesPermissions.
const (
	RoleListDataAttributesRolesPermissionsCreate RoleListDataAttributesRolesPermissions = "create"
	RoleListDataAttributesRolesPermissionsDelete RoleListDataAttributesRolesPermissions = "delete"
	RoleListDataAttributesRolesPermissionsRead   RoleListDataAttributesRolesPermissions = "read"
	RoleListDataAttributesRolesPermissionsUpdate RoleListDataAttributesRolesPermissions = "update"
)

// Defines values for RoleListDataAttributesSecretsPermissions.
const (
	RoleListDataAttributesSecretsPermissionsCreate RoleListDataAttributesSecretsPermissions = "create"
	RoleListDataAttributesSecretsPermissionsDelete RoleListDataAttributesSecretsPermissions = "delete"
	RoleListDataAttributesSecretsPermissionsRead   RoleListDataAttributesSecretsPermissions = "read"
	RoleListDataAttributesSecretsPermissionsUpdate RoleListDataAttributesSecretsPermissions = "update"
)

// Defines values for RoleListDataAttributesServicesPermissions.
const (
	RoleListDataAttributesServicesPermissionsCreate RoleListDataAttributesServicesPermissions = "create"
	RoleListDataAttributesServicesPermissionsDelete RoleListDataAttributesServicesPermissions = "delete"
	RoleListDataAttributesServicesPermissionsRead   RoleListDataAttributesServicesPermissions = "read"
	RoleListDataAttributesServicesPermissionsUpdate RoleListDataAttributesServicesPermissions = "update"
)

// Defines values for RoleListDataAttributesSeveritiesPermissions.
const (
	RoleListDataAttributesSeveritiesPermissionsCreate RoleListDataAttributesSeveritiesPermissions = "create"
	RoleListDataAttributesSeveritiesPermissionsDelete RoleListDataAttributesSeveritiesPermissions = "delete"
	RoleListDataAttributesSeveritiesPermissionsRead   RoleListDataAttributesSeveritiesPermissions = "read"
	RoleListDataAttributesSeveritiesPermissionsUpdate RoleListDataAttributesSeveritiesPermissions = "update"
)

// Defines values for RoleListDataAttributesStatusPagesPermissions.
const (
	RoleListDataAttributesStatusPagesPermissionsCreate RoleListDataAttributesStatusPagesPermissions = "create"
	RoleListDataAttributesStatusPagesPermissionsDelete RoleListDataAttributesStatusPagesPermissions = "delete"
	RoleListDataAttributesStatusPagesPermissionsRead   RoleListDataAttributesStatusPagesPermissions = "read"
	RoleListDataAttributesStatusPagesPermissionsUpdate RoleListDataAttributesStatusPagesPermissions = "update"
)

// Defines values for RoleListDataAttributesWebhooksPermissions.
const (
	RoleListDataAttributesWebhooksPermissionsCreate RoleListDataAttributesWebhooksPermissions = "create"
	RoleListDataAttributesWebhooksPermissionsDelete RoleListDataAttributesWebhooksPermissions = "delete"
	RoleListDataAttributesWebhooksPermissionsRead   RoleListDataAttributesWebhooksPermissions = "read"
	RoleListDataAttributesWebhooksPermissionsUpdate RoleListDataAttributesWebhooksPermissions = "update"
)

// Defines values for RoleListDataAttributesWorkflowsPermissions.
const (
	RoleListDataAttributesWorkflowsPermissionsCreate RoleListDataAttributesWorkflowsPermissions = "create"
	RoleListDataAttributesWorkflowsPermissionsDelete RoleListDataAttributesWorkflowsPermissions = "delete"
	RoleListDataAttributesWorkflowsPermissionsRead   RoleListDataAttributesWorkflowsPermissions = "read"
	RoleListDataAttributesWorkflowsPermissionsUpdate RoleListDataAttributesWorkflowsPermissions = "update"
)

// Defines values for RoleListDataType.
const (
	RoleListDataTypeRoles RoleListDataType = "roles"
)

// Defines values for RoleResponseDataAttributesApiKeysPermissions.
const (
	RoleResponseDataAttributesApiKeysPermissionsCreate RoleResponseDataAttributesApiKeysPermissions = "create"
	RoleResponseDataAttributesApiKeysPermissionsDelete RoleResponseDataAttributesApiKeysPermissions = "delete"
	RoleResponseDataAttributesApiKeysPermissionsRead   RoleResponseDataAttributesApiKeysPermissions = "read"
	RoleResponseDataAttributesApiKeysPermissionsUpdate RoleResponseDataAttributesApiKeysPermissions = "update"
)

// Defines values for RoleResponseDataAttributesAuditsPermissions.
const (
	RoleResponseDataAttributesAuditsPermissionsCreate RoleResponseDataAttributesAuditsPermissions = "create"
	RoleResponseDataAttributesAuditsPermissionsDelete RoleResponseDataAttributesAuditsPermissions = "delete"
	RoleResponseDataAttributesAuditsPermissionsRead   RoleResponseDataAttributesAuditsPermissions = "read"
	RoleResponseDataAttributesAuditsPermissionsUpdate RoleResponseDataAttributesAuditsPermissions = "update"
)

// Defines values for RoleResponseDataAttributesBillingPermissions.
const (
	RoleResponseDataAttributesBillingPermissionsCreate RoleResponseDataAttributesBillingPermissions = "create"
	RoleResponseDataAttributesBillingPermissionsDelete RoleResponseDataAttributesBillingPermissions = "delete"
	RoleResponseDataAttributesBillingPermissionsRead   RoleResponseDataAttributesBillingPermissions = "read"
	RoleResponseDataAttributesBillingPermissionsUpdate RoleResponseDataAttributesBillingPermissions = "update"
)

// Defines values for RoleResponseDataAttributesEnvironmentsPermissions.
const (
	RoleResponseDataAttributesEnvironmentsPermissionsCreate RoleResponseDataAttributesEnvironmentsPermissions = "create"
	RoleResponseDataAttributesEnvironmentsPermissionsDelete RoleResponseDataAttributesEnvironmentsPermissions = "delete"
	RoleResponseDataAttributesEnvironmentsPermissionsRead   RoleResponseDataAttributesEnvironmentsPermissions = "read"
	RoleResponseDataAttributesEnvironmentsPermissionsUpdate RoleResponseDataAttributesEnvironmentsPermissions = "update"
)

// Defines values for RoleResponseDataAttributesFormFieldsPermissions.
const (
	RoleResponseDataAttributesFormFieldsPermissionsCreate RoleResponseDataAttributesFormFieldsPermissions = "create"
	RoleResponseDataAttributesFormFieldsPermissionsDelete RoleResponseDataAttributesFormFieldsPermissions = "delete"
	RoleResponseDataAttributesFormFieldsPermissionsRead   RoleResponseDataAttributesFormFieldsPermissions = "read"
	RoleResponseDataAttributesFormFieldsPermissionsUpdate RoleResponseDataAttributesFormFieldsPermissions = "update"
)

// Defines values for RoleResponseDataAttributesFunctionalitiesPermissions.
const (
	RoleResponseDataAttributesFunctionalitiesPermissionsCreate RoleResponseDataAttributesFunctionalitiesPermissions = "create"
	RoleResponseDataAttributesFunctionalitiesPermissionsDelete RoleResponseDataAttributesFunctionalitiesPermissions = "delete"
	RoleResponseDataAttributesFunctionalitiesPermissionsRead   RoleResponseDataAttributesFunctionalitiesPermissions = "read"
	RoleResponseDataAttributesFunctionalitiesPermissionsUpdate RoleResponseDataAttributesFunctionalitiesPermissions = "update"
)

// Defines values for RoleResponseDataAttributesGroupsPermissions.
const (
	RoleResponseDataAttributesGroupsPermissionsCreate RoleResponseDataAttributesGroupsPermissions = "create"
	RoleResponseDataAttributesGroupsPermissionsDelete RoleResponseDataAttributesGroupsPermissions = "delete"
	RoleResponseDataAttributesGroupsPermissionsRead   RoleResponseDataAttributesGroupsPermissions = "read"
	RoleResponseDataAttributesGroupsPermissionsUpdate RoleResponseDataAttributesGroupsPermissions = "update"
)

// Defines values for RoleResponseDataAttributesIncidentCausesPermissions.
const (
	RoleResponseDataAttributesIncidentCausesPermissionsCreate RoleResponseDataAttributesIncidentCausesPermissions = "create"
	RoleResponseDataAttributesIncidentCausesPermissionsDelete RoleResponseDataAttributesIncidentCausesPermissions = "delete"
	RoleResponseDataAttributesIncidentCausesPermissionsRead   RoleResponseDataAttributesIncidentCausesPermissions = "read"
	RoleResponseDataAttributesIncidentCausesPermissionsUpdate RoleResponseDataAttributesIncidentCausesPermissions = "update"
)

// Defines values for RoleResponseDataAttributesIncidentFeedbacksPermissions.
const (
	RoleResponseDataAttributesIncidentFeedbacksPermissionsCreate RoleResponseDataAttributesIncidentFeedbacksPermissions = "create"
	RoleResponseDataAttributesIncidentFeedbacksPermissionsDelete RoleResponseDataAttributesIncidentFeedbacksPermissions = "delete"
	RoleResponseDataAttributesIncidentFeedbacksPermissionsRead   RoleResponseDataAttributesIncidentFeedbacksPermissions = "read"
	RoleResponseDataAttributesIncidentFeedbacksPermissionsUpdate RoleResponseDataAttributesIncidentFeedbacksPermissions = "update"
)

// Defines values for RoleResponseDataAttributesIncidentPostMortemsPermissions.
const (
	RoleResponseDataAttributesIncidentPostMortemsPermissionsCreate RoleResponseDataAttributesIncidentPostMortemsPermissions = "create"
	RoleResponseDataAttributesIncidentPostMortemsPermissionsDelete RoleResponseDataAttributesIncidentPostMortemsPermissions = "delete"
	RoleResponseDataAttributesIncidentPostMortemsPermissionsRead   RoleResponseDataAttributesIncidentPostMortemsPermissions = "read"
	RoleResponseDataAttributesIncidentPostMortemsPermissionsUpdate RoleResponseDataAttributesIncidentPostMortemsPermissions = "update"
)

// Defines values for RoleResponseDataAttributesIncidentRolesPermissions.
const (
	RoleResponseDataAttributesIncidentRolesPermissionsCreate RoleResponseDataAttributesIncidentRolesPermissions = "create"
	RoleResponseDataAttributesIncidentRolesPermissionsDelete RoleResponseDataAttributesIncidentRolesPermissions = "delete"
	RoleResponseDataAttributesIncidentRolesPermissionsRead   RoleResponseDataAttributesIncidentRolesPermissions = "read"
	RoleResponseDataAttributesIncidentRolesPermissionsUpdate RoleResponseDataAttributesIncidentRolesPermissions = "update"
)

// Defines values for RoleResponseDataAttributesIncidentTypesPermissions.
const (
	RoleResponseDataAttributesIncidentTypesPermissionsCreate RoleResponseDataAttributesIncidentTypesPermissions = "create"
	RoleResponseDataAttributesIncidentTypesPermissionsDelete RoleResponseDataAttributesIncidentTypesPermissions = "delete"
	RoleResponseDataAttributesIncidentTypesPermissionsRead   RoleResponseDataAttributesIncidentTypesPermissions = "read"
	RoleResponseDataAttributesIncidentTypesPermissionsUpdate RoleResponseDataAttributesIncidentTypesPermissions = "update"
)

// Defines values for RoleResponseDataAttributesIncidentsPermissions.
const (
	RoleResponseDataAttributesIncidentsPermissionsCreate RoleResponseDataAttributesIncidentsPermissions = "create"
	RoleResponseDataAttributesIncidentsPermissionsDelete RoleResponseDataAttributesIncidentsPermissions = "delete"
	RoleResponseDataAttributesIncidentsPermissionsRead   RoleResponseDataAttributesIncidentsPermissions = "read"
	RoleResponseDataAttributesIncidentsPermissionsUpdate RoleResponseDataAttributesIncidentsPermissions = "update"
)

// Defines values for RoleResponseDataAttributesInvitationsPermissions.
const (
	RoleResponseDataAttributesInvitationsPermissionsCreate RoleResponseDataAttributesInvitationsPermissions = "create"
	RoleResponseDataAttributesInvitationsPermissionsDelete RoleResponseDataAttributesInvitationsPermissions = "delete"
	RoleResponseDataAttributesInvitationsPermissionsRead   RoleResponseDataAttributesInvitationsPermissions = "read"
	RoleResponseDataAttributesInvitationsPermissionsUpdate RoleResponseDataAttributesInvitationsPermissions = "update"
)

// Defines values for RoleResponseDataAttributesPlaybooksPermissions.
const (
	RoleResponseDataAttributesPlaybooksPermissionsCreate RoleResponseDataAttributesPlaybooksPermissions = "create"
	RoleResponseDataAttributesPlaybooksPermissionsDelete RoleResponseDataAttributesPlaybooksPermissions = "delete"
	RoleResponseDataAttributesPlaybooksPermissionsRead   RoleResponseDataAttributesPlaybooksPermissions = "read"
	RoleResponseDataAttributesPlaybooksPermissionsUpdate RoleResponseDataAttributesPlaybooksPermissions = "update"
)

// Defines values for RoleResponseDataAttributesPrivateIncidentsPermissions.
const (
	RoleResponseDataAttributesPrivateIncidentsPermissionsCreate RoleResponseDataAttributesPrivateIncidentsPermissions = "create"
	RoleResponseDataAttributesPrivateIncidentsPermissionsDelete RoleResponseDataAttributesPrivateIncidentsPermissions = "delete"
	RoleResponseDataAttributesPrivateIncidentsPermissionsRead   RoleResponseDataAttributesPrivateIncidentsPermissions = "read"
	RoleResponseDataAttributesPrivateIncidentsPermissionsUpdate RoleResponseDataAttributesPrivateIncidentsPermissions = "update"
)

// Defines values for RoleResponseDataAttributesRetrospectivePermissions.
const (
	RoleResponseDataAttributesRetrospectivePermissionsCreate RoleResponseDataAttributesRetrospectivePermissions = "create"
	RoleResponseDataAttributesRetrospectivePermissionsDelete RoleResponseDataAttributesRetrospectivePermissions = "delete"
	RoleResponseDataAttributesRetrospectivePermissionsRead   RoleResponseDataAttributesRetrospectivePermissions = "read"
	RoleResponseDataAttributesRetrospectivePermissionsUpdate RoleResponseDataAttributesRetrospectivePermissions = "update"
)

// Defines values for RoleResponseDataAttributesRolesPermissions.
const (
	RoleResponseDataAttributesRolesPermissionsCreate RoleResponseDataAttributesRolesPermissions = "create"
	RoleResponseDataAttributesRolesPermissionsDelete RoleResponseDataAttributesRolesPermissions = "delete"
	RoleResponseDataAttributesRolesPermissionsRead   RoleResponseDataAttributesRolesPermissions = "read"
	RoleResponseDataAttributesRolesPermissionsUpdate RoleResponseDataAttributesRolesPermissions = "update"
)

// Defines values for RoleResponseDataAttributesSecretsPermissions.
const (
	RoleResponseDataAttributesSecretsPermissionsCreate RoleResponseDataAttributesSecretsPermissions = "create"
	RoleResponseDataAttributesSecretsPermissionsDelete RoleResponseDataAttributesSecretsPermissions = "delete"
	RoleResponseDataAttributesSecretsPermissionsRead   RoleResponseDataAttributesSecretsPermissions = "read"
	RoleResponseDataAttributesSecretsPermissionsUpdate RoleResponseDataAttributesSecretsPermissions = "update"
)

// Defines values for RoleResponseDataAttributesServicesPermissions.
const (
	RoleResponseDataAttributesServicesPermissionsCreate RoleResponseDataAttributesServicesPermissions = "create"
	RoleResponseDataAttributesServicesPermissionsDelete RoleResponseDataAttributesServicesPermissions = "delete"
	RoleResponseDataAttributesServicesPermissionsRead   RoleResponseDataAttributesServicesPermissions = "read"
	RoleResponseDataAttributesServicesPermissionsUpdate RoleResponseDataAttributesServicesPermissions = "update"
)

// Defines values for RoleResponseDataAttributesSeveritiesPermissions.
const (
	RoleResponseDataAttributesSeveritiesPermissionsCreate RoleResponseDataAttributesSeveritiesPermissions = "create"
	RoleResponseDataAttributesSeveritiesPermissionsDelete RoleResponseDataAttributesSeveritiesPermissions = "delete"
	RoleResponseDataAttributesSeveritiesPermissionsRead   RoleResponseDataAttributesSeveritiesPermissions = "read"
	RoleResponseDataAttributesSeveritiesPermissionsUpdate RoleResponseDataAttributesSeveritiesPermissions = "update"
)

// Defines values for RoleResponseDataAttributesStatusPagesPermissions.
const (
	RoleResponseDataAttributesStatusPagesPermissionsCreate RoleResponseDataAttributesStatusPagesPermissions = "create"
	RoleResponseDataAttributesStatusPagesPermissionsDelete RoleResponseDataAttributesStatusPagesPermissions = "delete"
	RoleResponseDataAttributesStatusPagesPermissionsRead   RoleResponseDataAttributesStatusPagesPermissions = "read"
	RoleResponseDataAttributesStatusPagesPermissionsUpdate RoleResponseDataAttributesStatusPagesPermissions = "update"
)

// Defines values for RoleResponseDataAttributesWebhooksPermissions.
const (
	RoleResponseDataAttributesWebhooksPermissionsCreate RoleResponseDataAttributesWebhooksPermissions = "create"
	RoleResponseDataAttributesWebhooksPermissionsDelete RoleResponseDataAttributesWebhooksPermissions = "delete"
	RoleResponseDataAttributesWebhooksPermissionsRead   RoleResponseDataAttributesWebhooksPermissions = "read"
	RoleResponseDataAttributesWebhooksPermissionsUpdate RoleResponseDataAttributesWebhooksPermissions = "update"
)

// Defines values for RoleResponseDataAttributesWorkflowsPermissions.
const (
	RoleResponseDataAttributesWorkflowsPermissionsCreate RoleResponseDataAttributesWorkflowsPermissions = "create"
	RoleResponseDataAttributesWorkflowsPermissionsDelete RoleResponseDataAttributesWorkflowsPermissions = "delete"
	RoleResponseDataAttributesWorkflowsPermissionsRead   RoleResponseDataAttributesWorkflowsPermissions = "read"
	RoleResponseDataAttributesWorkflowsPermissionsUpdate RoleResponseDataAttributesWorkflowsPermissions = "update"
)

// Defines values for RoleResponseDataType.
const (
	RoleResponseDataTypeRoles RoleResponseDataType = "roles"
)

// Defines values for RunCommandHerokuTaskParamsSize.
const (
	Standard1X RunCommandHerokuTaskParamsSize = "standard-1X"
	Standard2X RunCommandHerokuTaskParamsSize = "standard-2X"
)

// Defines values for RunCommandHerokuTaskParamsTaskType.
const (
	RunCommandHeroku RunCommandHerokuTaskParamsTaskType = "run_command_heroku"
)

// Defines values for SecretListDataType.
const (
	SecretListDataTypeSecrets SecretListDataType = "secrets"
)

// Defines values for SecretResponseDataType.
const (
	SecretResponseDataTypeSecrets SecretResponseDataType = "secrets"
)

// Defines values for SendDashboardReportTaskParamsTaskType.
const (
	SendDashboardReport SendDashboardReportTaskParamsTaskType = "send_dashboard_report"
)

// Defines values for SendEmailTaskParamsTaskType.
const (
	SendEmail SendEmailTaskParamsTaskType = "send_email"
)

// Defines values for SendSlackBlocksTaskParamsTaskType.
const (
	SendSlackBlocks SendSlackBlocksTaskParamsTaskType = "send_slack_blocks"
)

// Defines values for SendSlackMessageTaskParamsActionables.
const (
	SendSlackMessageTaskParamsActionablesAddOpsgenieResponders  SendSlackMessageTaskParamsActionables = "add_opsgenie_responders"
	SendSlackMessageTaskParamsActionablesAddPagerdutyResponders SendSlackMessageTaskParamsActionables = "add_pagerduty_responders"
	SendSlackMessageTaskParamsActionablesAddVictorOpsResponders SendSlackMessageTaskParamsActionables = "add_victor_ops_responders"
	SendSlackMessageTaskParamsActionablesAllCommands            SendSlackMessageTaskParamsActionables = "all_commands"
	SendSlackMessageTaskParamsActionablesArchiveChannel         SendSlackMessageTaskParamsActionables = "archive_channel"
	SendSlackMessageTaskParamsActionablesCancelIncident         SendSlackMessageTaskParamsActionables = "cancel_incident"
	SendSlackMessageTaskParamsActionablesLeaveFeedback          SendSlackMessageTaskParamsActionables = "leave_feedback"
	SendSlackMessageTaskParamsActionablesManageActionItems      SendSlackMessageTaskParamsActionables = "manage_action_items"
	SendSlackMessageTaskParamsActionablesManageFormFields       SendSlackMessageTaskParamsActionables = "manage_form_fields"
	SendSlackMessageTaskParamsActionablesManageIncidentRoles    SendSlackMessageTaskParamsActionables = "manage_incident_roles"
	SendSlackMessageTaskParamsActionablesPauseReminder          SendSlackMessageTaskParamsActionables = "pause_reminder"
	SendSlackMessageTaskParamsActionablesRestartReminder        SendSlackMessageTaskParamsActionables = "restart_reminder"
	SendSlackMessageTaskParamsActionablesSnoozeReminder         SendSlackMessageTaskParamsActionables = "snooze_reminder"
	SendSlackMessageTaskParamsActionablesUpdateIncident         SendSlackMessageTaskParamsActionables = "update_incident"
	SendSlackMessageTaskParamsActionablesUpdateStatus           SendSlackMessageTaskParamsActionables = "update_status"
	SendSlackMessageTaskParamsActionablesUpdateStatusPage       SendSlackMessageTaskParamsActionables = "update_status_page"
	SendSlackMessageTaskParamsActionablesUpdateSummary          SendSlackMessageTaskParamsActionables = "update_summary"
	SendSlackMessageTaskParamsActionablesViewTasks              SendSlackMessageTaskParamsActionables = "view_tasks"
)

// Defines values for SendSlackMessageTaskParamsTaskType.
const (
	SendSlackMessage SendSlackMessageTaskParamsTaskType = "send_slack_message"
)

// Defines values for SendSmsTaskParamsTaskType.
const (
	SendSms SendSmsTaskParamsTaskType = "send_sms"
)

// Defines values for SendWhatsappMessageTaskParamsTaskType.
const (
	SendWhatsappMessage SendWhatsappMessageTaskParamsTaskType = "send_whatsapp_message"
)

// Defines values for ServiceStatus.
const (
	ServiceStatusImpacted      ServiceStatus = "impacted"
	ServiceStatusMajorOutage   ServiceStatus = "major_outage"
	ServiceStatusOperational   ServiceStatus = "operational"
	ServiceStatusOutage        ServiceStatus = "outage"
	ServiceStatusPartialOutage ServiceStatus = "partial_outage"
)

// Defines values for ServiceListDataAttributesStatus.
const (
	ServiceListDataAttributesStatusImpacted      ServiceListDataAttributesStatus = "impacted"
	ServiceListDataAttributesStatusMajorOutage   ServiceListDataAttributesStatus = "major_outage"
	ServiceListDataAttributesStatusOperational   ServiceListDataAttributesStatus = "operational"
	ServiceListDataAttributesStatusOutage        ServiceListDataAttributesStatus = "outage"
	ServiceListDataAttributesStatusPartialOutage ServiceListDataAttributesStatus = "partial_outage"
)

// Defines values for ServiceListDataType.
const (
	ServiceListDataTypeServices ServiceListDataType = "services"
)

// Defines values for ServiceResponseDataAttributesStatus.
const (
	ServiceResponseDataAttributesStatusImpacted      ServiceResponseDataAttributesStatus = "impacted"
	ServiceResponseDataAttributesStatusMajorOutage   ServiceResponseDataAttributesStatus = "major_outage"
	ServiceResponseDataAttributesStatusOperational   ServiceResponseDataAttributesStatus = "operational"
	ServiceResponseDataAttributesStatusOutage        ServiceResponseDataAttributesStatus = "outage"
	ServiceResponseDataAttributesStatusPartialOutage ServiceResponseDataAttributesStatus = "partial_outage"
)

// Defines values for ServiceResponseDataType.
const (
	ServiceResponseDataTypeServices ServiceResponseDataType = "services"
)

// Defines values for SeveritySeverity.
const (
	SeveritySeverityCritical SeveritySeverity = "critical"
	SeveritySeverityHigh     SeveritySeverity = "high"
	SeveritySeverityLow      SeveritySeverity = "low"
	SeveritySeverityMedium   SeveritySeverity = "medium"
)

// Defines values for SeverityListDataAttributesSeverity.
const (
	SeverityListDataAttributesSeverityCritical SeverityListDataAttributesSeverity = "critical"
	SeverityListDataAttributesSeverityHigh     SeverityListDataAttributesSeverity = "high"
	SeverityListDataAttributesSeverityLow      SeverityListDataAttributesSeverity = "low"
	SeverityListDataAttributesSeverityMedium   SeverityListDataAttributesSeverity = "medium"
)

// Defines values for SeverityListDataType.
const (
	SeverityListDataTypeSeverities SeverityListDataType = "severities"
)

// Defines values for SeverityResponseDataAttributesSeverity.
const (
	SeverityResponseDataAttributesSeverityCritical SeverityResponseDataAttributesSeverity = "critical"
	SeverityResponseDataAttributesSeverityHigh     SeverityResponseDataAttributesSeverity = "high"
	SeverityResponseDataAttributesSeverityLow      SeverityResponseDataAttributesSeverity = "low"
	SeverityResponseDataAttributesSeverityMedium   SeverityResponseDataAttributesSeverity = "medium"
)

// Defines values for SeverityResponseDataType.
const (
	SeverityResponseDataTypeSeverities SeverityResponseDataType = "severities"
)

// Defines values for SimpleTriggerParamsTriggerType.
const (
	SimpleTriggerParamsTriggerTypeSimple SimpleTriggerParamsTriggerType = "simple"
)

// Defines values for SimpleTriggerParamsTriggers.
const (
	SlackCommand SimpleTriggerParamsTriggers = "slack_command"
)

// Defines values for SnapshotDatadogGraphTaskParamsTaskType.
const (
	SnapshotDatadogGraph SnapshotDatadogGraphTaskParamsTaskType = "snapshot_datadog_graph"
)

// Defines values for SnapshotGrafanaDashboardTaskParamsTaskType.
const (
	SnapshotGrafanaDashboard SnapshotGrafanaDashboardTaskParamsTaskType = "snapshot_grafana_dashboard"
)

// Defines values for SnapshotLookerLookTaskParamsTaskType.
const (
	SnapshotLookerLook SnapshotLookerLookTaskParamsTaskType = "snapshot_looker_look"
)

// Defines values for SnapshotNewRelicGraphTaskParamsMetricType.
const (
	APDEX                SnapshotNewRelicGraphTaskParamsMetricType = "APDEX"
	AREA                 SnapshotNewRelicGraphTaskParamsMetricType = "AREA"
	BAR                  SnapshotNewRelicGraphTaskParamsMetricType = "BAR"
	BASELINE             SnapshotNewRelicGraphTaskParamsMetricType = "BASELINE"
	BILLBOARD            SnapshotNewRelicGraphTaskParamsMetricType = "BILLBOARD"
	BULLET               SnapshotNewRelicGraphTaskParamsMetricType = "BULLET"
	EVENTFEED            SnapshotNewRelicGraphTaskParamsMetricType = "EVENT_FEED"
	FUNNEL               SnapshotNewRelicGraphTaskParamsMetricType = "FUNNEL"
	HEATMAP              SnapshotNewRelicGraphTaskParamsMetricType = "HEATMAP"
	HISTOGRAM            SnapshotNewRelicGraphTaskParamsMetricType = "HISTOGRAM"
	LINE                 SnapshotNewRelicGraphTaskParamsMetricType = "LINE"
	PIE                  SnapshotNewRelicGraphTaskParamsMetricType = "PIE"
	SCATTER              SnapshotNewRelicGraphTaskParamsMetricType = "SCATTER"
	STACKEDHORIZONTALBAR SnapshotNewRelicGraphTaskParamsMetricType = "STACKED_HORIZONTAL_BAR"
	TABLE                SnapshotNewRelicGraphTaskParamsMetricType = "TABLE"
	VERTICALBAR          SnapshotNewRelicGraphTaskParamsMetricType = "VERTICAL_BAR"
)

// Defines values for SnapshotNewRelicGraphTaskParamsTaskType.
const (
	SnapshotLookerGraph SnapshotNewRelicGraphTaskParamsTaskType = "snapshot_looker_graph"
)

// Defines values for StatusPageShowUptimeLastDays.
const (
	StatusPageShowUptimeLastDaysN180 StatusPageShowUptimeLastDays = 180
	StatusPageShowUptimeLastDaysN30  StatusPageShowUptimeLastDays = 30
	StatusPageShowUptimeLastDaysN360 StatusPageShowUptimeLastDays = 360
	StatusPageShowUptimeLastDaysN60  StatusPageShowUptimeLastDays = 60
	StatusPageShowUptimeLastDaysN90  StatusPageShowUptimeLastDays = 90
)

// Defines values for StatusPageTimeZone.
const (
	StatusPageTimeZoneAbuDhabi                  StatusPageTimeZone = "Abu Dhabi"
	StatusPageTimeZoneAdelaide                  StatusPageTimeZone = "Adelaide"
	StatusPageTimeZoneAlaska                    StatusPageTimeZone = "Alaska"
	StatusPageTimeZoneAlmaty                    StatusPageTimeZone = "Almaty"
	StatusPageTimeZoneAmericanSamoa             StatusPageTimeZone = "American Samoa"
	StatusPageTimeZoneAmsterdam                 StatusPageTimeZone = "Amsterdam"
	StatusPageTimeZoneArizona                   StatusPageTimeZone = "Arizona"
	StatusPageTimeZoneAstana                    StatusPageTimeZone = "Astana"
	StatusPageTimeZoneAthens                    StatusPageTimeZone = "Athens"
	StatusPageTimeZoneAtlanticTimeCanada        StatusPageTimeZone = "Atlantic Time (Canada)"
	StatusPageTimeZoneAuckland                  StatusPageTimeZone = "Auckland"
	StatusPageTimeZoneAzores                    StatusPageTimeZone = "Azores"
	StatusPageTimeZoneBaghdad                   StatusPageTimeZone = "Baghdad"
	StatusPageTimeZoneBaku                      StatusPageTimeZone = "Baku"
	StatusPageTimeZoneBangkok                   StatusPageTimeZone = "Bangkok"
	StatusPageTimeZoneBeijing                   StatusPageTimeZone = "Beijing"
	StatusPageTimeZoneBelgrade                  StatusPageTimeZone = "Belgrade"
	StatusPageTimeZoneBerlin                    StatusPageTimeZone = "Berlin"
	StatusPageTimeZoneBern                      StatusPageTimeZone = "Bern"
	StatusPageTimeZoneBogota                    StatusPageTimeZone = "Bogota"
	StatusPageTimeZoneBrasilia                  StatusPageTimeZone = "Brasilia"
	StatusPageTimeZoneBratislava                StatusPageTimeZone = "Bratislava"
	StatusPageTimeZoneBrisbane                  StatusPageTimeZone = "Brisbane"
	StatusPageTimeZoneBrussels                  StatusPageTimeZone = "Brussels"
	StatusPageTimeZoneBucharest                 StatusPageTimeZone = "Bucharest"
	StatusPageTimeZoneBudapest                  StatusPageTimeZone = "Budapest"
	StatusPageTimeZoneBuenosAires               StatusPageTimeZone = "Buenos Aires"
	StatusPageTimeZoneCairo                     StatusPageTimeZone = "Cairo"
	StatusPageTimeZoneCanberra                  StatusPageTimeZone = "Canberra"
	StatusPageTimeZoneCapeVerdeIs               StatusPageTimeZone = "Cape Verde Is."
	StatusPageTimeZoneCaracas                   StatusPageTimeZone = "Caracas"
	StatusPageTimeZoneCasablanca                StatusPageTimeZone = "Casablanca"
	StatusPageTimeZoneCentralAmerica            StatusPageTimeZone = "Central America"
	StatusPageTimeZoneCentralTimeUSCanada       StatusPageTimeZone = "Central Time (US & Canada)"
	StatusPageTimeZoneChathamIs                 StatusPageTimeZone = "Chatham Is."
	StatusPageTimeZoneChennai                   StatusPageTimeZone = "Chennai"
	StatusPageTimeZoneChihuahua                 StatusPageTimeZone = "Chihuahua"
	StatusPageTimeZoneChongqing                 StatusPageTimeZone = "Chongqing"
	StatusPageTimeZoneCopenhagen                StatusPageTimeZone = "Copenhagen"
	StatusPageTimeZoneDarwin                    StatusPageTimeZone = "Darwin"
	StatusPageTimeZoneDhaka                     StatusPageTimeZone = "Dhaka"
	StatusPageTimeZoneDublin                    StatusPageTimeZone = "Dublin"
	StatusPageTimeZoneEasternTimeUSCanada       StatusPageTimeZone = "Eastern Time (US & Canada)"
	StatusPageTimeZoneEdinburgh                 StatusPageTimeZone = "Edinburgh"
	StatusPageTimeZoneEkaterinburg              StatusPageTimeZone = "Ekaterinburg"
	StatusPageTimeZoneFiji                      StatusPageTimeZone = "Fiji"
	StatusPageTimeZoneGeorgetown                StatusPageTimeZone = "Georgetown"
	StatusPageTimeZoneGreenland                 StatusPageTimeZone = "Greenland"
	StatusPageTimeZoneGuadalajara               StatusPageTimeZone = "Guadalajara"
	StatusPageTimeZoneGuam                      StatusPageTimeZone = "Guam"
	StatusPageTimeZoneHanoi                     StatusPageTimeZone = "Hanoi"
	StatusPageTimeZoneHarare                    StatusPageTimeZone = "Harare"
	StatusPageTimeZoneHawaii                    StatusPageTimeZone = "Hawaii"
	StatusPageTimeZoneHelsinki                  StatusPageTimeZone = "Helsinki"
	StatusPageTimeZoneHobart                    StatusPageTimeZone = "Hobart"
	StatusPageTimeZoneHongKong                  StatusPageTimeZone = "Hong Kong"
	StatusPageTimeZoneIndianaEast               StatusPageTimeZone = "Indiana (East)"
	StatusPageTimeZoneInternationalDateLineWest StatusPageTimeZone = "International Date Line West"
	StatusPageTimeZoneIrkutsk                   StatusPageTimeZone = "Irkutsk"
	StatusPageTimeZoneIslamabad                 StatusPageTimeZone = "Islamabad"
	StatusPageTimeZoneIstanbul                  StatusPageTimeZone = "Istanbul"
	StatusPageTimeZoneJakarta                   StatusPageTimeZone = "Jakarta"
	StatusPageTimeZoneJerusalem                 StatusPageTimeZone = "Jerusalem"
	StatusPageTimeZoneKabul                     StatusPageTimeZone = "Kabul"
	StatusPageTimeZoneKaliningrad               StatusPageTimeZone = "Kaliningrad"
	StatusPageTimeZoneKamchatka                 StatusPageTimeZone = "Kamchatka"
	StatusPageTimeZoneKarachi                   StatusPageTimeZone = "Karachi"
	StatusPageTimeZoneKathmandu                 StatusPageTimeZone = "Kathmandu"
	StatusPageTimeZoneKolkata                   StatusPageTimeZone = "Kolkata"
	StatusPageTimeZoneKrasnoyarsk               StatusPageTimeZone = "Krasnoyarsk"
	StatusPageTimeZoneKualaLumpur               StatusPageTimeZone = "Kuala Lumpur"
	StatusPageTimeZoneKuwait                    StatusPageTimeZone = "Kuwait"
	StatusPageTimeZoneKyiv                      StatusPageTimeZone = "Kyiv"
	StatusPageTimeZoneLaPaz                     StatusPageTimeZone = "La Paz"
	StatusPageTimeZoneLima                      StatusPageTimeZone = "Lima"
	StatusPageTimeZoneLisbon                    StatusPageTimeZone = "Lisbon"
	StatusPageTimeZoneLjubljana                 StatusPageTimeZone = "Ljubljana"
	StatusPageTimeZoneLondon                    StatusPageTimeZone = "London"
	StatusPageTimeZoneMadrid                    StatusPageTimeZone = "Madrid"
	StatusPageTimeZoneMagadan                   StatusPageTimeZone = "Magadan"
	StatusPageTimeZoneMarshallIs                StatusPageTimeZone = "Marshall Is."
	StatusPageTimeZoneMazatlan                  StatusPageTimeZone = "Mazatlan"
	StatusPageTimeZoneMelbourne                 StatusPageTimeZone = "Melbourne"
	StatusPageTimeZoneMexicoCity                StatusPageTimeZone = "Mexico City"
	StatusPageTimeZoneMidAtlantic               StatusPageTimeZone = "Mid-Atlantic"
	StatusPageTimeZoneMidwayIsland              StatusPageTimeZone = "Midway Island"
	StatusPageTimeZoneMinsk                     StatusPageTimeZone = "Minsk"
	StatusPageTimeZoneMonrovia                  StatusPageTimeZone = "Monrovia"
	StatusPageTimeZoneMonterrey                 StatusPageTimeZone = "Monterrey"
	StatusPageTimeZoneMontevideo                StatusPageTimeZone = "Montevideo"
	StatusPageTimeZoneMoscow                    StatusPageTimeZone = "Moscow"
	StatusPageTimeZoneMountainTimeUSCanada      StatusPageTimeZone = "Mountain Time (US & Canada)"
	StatusPageTimeZoneMumbai                    StatusPageTimeZone = "Mumbai"
	StatusPageTimeZoneMuscat                    StatusPageTimeZone = "Muscat"
	StatusPageTimeZoneNairobi                   StatusPageTimeZone = "Nairobi"
	StatusPageTimeZoneNewCaledonia              StatusPageTimeZone = "New Caledonia"
	StatusPageTimeZoneNewDelhi                  StatusPageTimeZone = "New Delhi"
	StatusPageTimeZoneNewfoundland              StatusPageTimeZone = "Newfoundland"
	StatusPageTimeZoneNovosibirsk               StatusPageTimeZone = "Novosibirsk"
	StatusPageTimeZoneNukualofa                 StatusPageTimeZone = "Nuku'alofa"
	StatusPageTimeZoneOsaka                     StatusPageTimeZone = "Osaka"
	StatusPageTimeZonePacificTimeUSCanada       StatusPageTimeZone = "Pacific Time (US & Canada)"
	StatusPageTimeZoneParis                     StatusPageTimeZone = "Paris"
	StatusPageTimeZonePerth                     StatusPageTimeZone = "Perth"
	StatusPageTimeZonePortMoresby               StatusPageTimeZone = "Port Moresby"
	StatusPageTimeZonePrague                    StatusPageTimeZone = "Prague"
	StatusPageTimeZonePretoria                  StatusPageTimeZone = "Pretoria"
	StatusPageTimeZonePuertoRico                StatusPageTimeZone = "Puerto Rico"
	StatusPageTimeZoneQuito                     StatusPageTimeZone = "Quito"
	StatusPageTimeZoneRangoon                   StatusPageTimeZone = "Rangoon"
	StatusPageTimeZoneRiga                      StatusPageTimeZone = "Riga"
	StatusPageTimeZoneRiyadh                    StatusPageTimeZone = "Riyadh"
	StatusPageTimeZoneRome                      StatusPageTimeZone = "Rome"
	StatusPageTimeZoneSamara                    StatusPageTimeZone = "Samara"
	StatusPageTimeZoneSamoa                     StatusPageTimeZone = "Samoa"
	StatusPageTimeZoneSantiago                  StatusPageTimeZone = "Santiago"
	StatusPageTimeZoneSapporo                   StatusPageTimeZone = "Sapporo"
	StatusPageTimeZoneSarajevo                  StatusPageTimeZone = "Sarajevo"
	StatusPageTimeZoneSaskatchewan              StatusPageTimeZone = "Saskatchewan"
	StatusPageTimeZoneSeoul                     StatusPageTimeZone = "Seoul"
	StatusPageTimeZoneSingapore                 StatusPageTimeZone = "Singapore"
	StatusPageTimeZoneSkopje                    StatusPageTimeZone = "Skopje"
	StatusPageTimeZoneSofia                     StatusPageTimeZone = "Sofia"
	StatusPageTimeZoneSolomonIs                 StatusPageTimeZone = "Solomon Is."
	StatusPageTimeZoneSrednekolymsk             StatusPageTimeZone = "Srednekolymsk"
	StatusPageTimeZoneSriJayawardenepura        StatusPageTimeZone = "Sri Jayawardenepura"
	StatusPageTimeZoneStPetersburg              StatusPageTimeZone = "St. Petersburg"
	StatusPageTimeZoneStockholm                 StatusPageTimeZone = "Stockholm"
	StatusPageTimeZoneSydney                    StatusPageTimeZone = "Sydney"
	StatusPageTimeZoneTaipei                    StatusPageTimeZone = "Taipei"
	StatusPageTimeZoneTallinn                   StatusPageTimeZone = "Tallinn"
	StatusPageTimeZoneTashkent                  StatusPageTimeZone = "Tashkent"
	StatusPageTimeZoneTbilisi                   StatusPageTimeZone = "Tbilisi"
	StatusPageTimeZoneTehran                    StatusPageTimeZone = "Tehran"
	StatusPageTimeZoneTijuana                   StatusPageTimeZone = "Tijuana"
	StatusPageTimeZoneTokelauIs                 StatusPageTimeZone = "Tokelau Is."
	StatusPageTimeZoneTokyo                     StatusPageTimeZone = "Tokyo"
	StatusPageTimeZoneUTC                       StatusPageTimeZone = "UTC"
	StatusPageTimeZoneUlaanbaatar               StatusPageTimeZone = "Ulaanbaatar"
	StatusPageTimeZoneUrumqi                    StatusPageTimeZone = "Urumqi"
	StatusPageTimeZoneVienna                    StatusPageTimeZone = "Vienna"
	StatusPageTimeZoneVilnius                   StatusPageTimeZone = "Vilnius"
	StatusPageTimeZoneVladivostok               StatusPageTimeZone = "Vladivostok"
	StatusPageTimeZoneVolgograd                 StatusPageTimeZone = "Volgograd"
	StatusPageTimeZoneWarsaw                    StatusPageTimeZone = "Warsaw"
	StatusPageTimeZoneWellington                StatusPageTimeZone = "Wellington"
	StatusPageTimeZoneWestCentralAfrica         StatusPageTimeZone = "West Central Africa"
	StatusPageTimeZoneYakutsk                   StatusPageTimeZone = "Yakutsk"
	StatusPageTimeZoneYerevan                   StatusPageTimeZone = "Yerevan"
	StatusPageTimeZoneZagreb                    StatusPageTimeZone = "Zagreb"
	StatusPageTimeZoneZurich                    StatusPageTimeZone = "Zurich"
)

// Defines values for StatusPageListDataAttributesShowUptimeLastDays.
const (
	StatusPageListDataAttributesShowUptimeLastDaysN180 StatusPageListDataAttributesShowUptimeLastDays = 180
	StatusPageListDataAttributesShowUptimeLastDaysN30  StatusPageListDataAttributesShowUptimeLastDays = 30
	StatusPageListDataAttributesShowUptimeLastDaysN360 StatusPageListDataAttributesShowUptimeLastDays = 360
	StatusPageListDataAttributesShowUptimeLastDaysN60  StatusPageListDataAttributesShowUptimeLastDays = 60
	StatusPageListDataAttributesShowUptimeLastDaysN90  StatusPageListDataAttributesShowUptimeLastDays = 90
)

// Defines values for StatusPageListDataAttributesTimeZone.
const (
	StatusPageListDataAttributesTimeZoneAbuDhabi                  StatusPageListDataAttributesTimeZone = "Abu Dhabi"
	StatusPageListDataAttributesTimeZoneAdelaide                  StatusPageListDataAttributesTimeZone = "Adelaide"
	StatusPageListDataAttributesTimeZoneAlaska                    StatusPageListDataAttributesTimeZone = "Alaska"
	StatusPageListDataAttributesTimeZoneAlmaty                    StatusPageListDataAttributesTimeZone = "Almaty"
	StatusPageListDataAttributesTimeZoneAmericanSamoa             StatusPageListDataAttributesTimeZone = "American Samoa"
	StatusPageListDataAttributesTimeZoneAmsterdam                 StatusPageListDataAttributesTimeZone = "Amsterdam"
	StatusPageListDataAttributesTimeZoneArizona                   StatusPageListDataAttributesTimeZone = "Arizona"
	StatusPageListDataAttributesTimeZoneAstana                    StatusPageListDataAttributesTimeZone = "Astana"
	StatusPageListDataAttributesTimeZoneAthens                    StatusPageListDataAttributesTimeZone = "Athens"
	StatusPageListDataAttributesTimeZoneAtlanticTimeCanada        StatusPageListDataAttributesTimeZone = "Atlantic Time (Canada)"
	StatusPageListDataAttributesTimeZoneAuckland                  StatusPageListDataAttributesTimeZone = "Auckland"
	StatusPageListDataAttributesTimeZoneAzores                    StatusPageListDataAttributesTimeZone = "Azores"
	StatusPageListDataAttributesTimeZoneBaghdad                   StatusPageListDataAttributesTimeZone = "Baghdad"
	StatusPageListDataAttributesTimeZoneBaku                      StatusPageListDataAttributesTimeZone = "Baku"
	StatusPageListDataAttributesTimeZoneBangkok                   StatusPageListDataAttributesTimeZone = "Bangkok"
	StatusPageListDataAttributesTimeZoneBeijing                   StatusPageListDataAttributesTimeZone = "Beijing"
	StatusPageListDataAttributesTimeZoneBelgrade                  StatusPageListDataAttributesTimeZone = "Belgrade"
	StatusPageListDataAttributesTimeZoneBerlin                    StatusPageListDataAttributesTimeZone = "Berlin"
	StatusPageListDataAttributesTimeZoneBern                      StatusPageListDataAttributesTimeZone = "Bern"
	StatusPageListDataAttributesTimeZoneBogota                    StatusPageListDataAttributesTimeZone = "Bogota"
	StatusPageListDataAttributesTimeZoneBrasilia                  StatusPageListDataAttributesTimeZone = "Brasilia"
	StatusPageListDataAttributesTimeZoneBratislava                StatusPageListDataAttributesTimeZone = "Bratislava"
	StatusPageListDataAttributesTimeZoneBrisbane                  StatusPageListDataAttributesTimeZone = "Brisbane"
	StatusPageListDataAttributesTimeZoneBrussels                  StatusPageListDataAttributesTimeZone = "Brussels"
	StatusPageListDataAttributesTimeZoneBucharest                 StatusPageListDataAttributesTimeZone = "Bucharest"
	StatusPageListDataAttributesTimeZoneBudapest                  StatusPageListDataAttributesTimeZone = "Budapest"
	StatusPageListDataAttributesTimeZoneBuenosAires               StatusPageListDataAttributesTimeZone = "Buenos Aires"
	StatusPageListDataAttributesTimeZoneCairo                     StatusPageListDataAttributesTimeZone = "Cairo"
	StatusPageListDataAttributesTimeZoneCanberra                  StatusPageListDataAttributesTimeZone = "Canberra"
	StatusPageListDataAttributesTimeZoneCapeVerdeIs               StatusPageListDataAttributesTimeZone = "Cape Verde Is."
	StatusPageListDataAttributesTimeZoneCaracas                   StatusPageListDataAttributesTimeZone = "Caracas"
	StatusPageListDataAttributesTimeZoneCasablanca                StatusPageListDataAttributesTimeZone = "Casablanca"
	StatusPageListDataAttributesTimeZoneCentralAmerica            StatusPageListDataAttributesTimeZone = "Central America"
	StatusPageListDataAttributesTimeZoneCentralTimeUSCanada       StatusPageListDataAttributesTimeZone = "Central Time (US & Canada)"
	StatusPageListDataAttributesTimeZoneChathamIs                 StatusPageListDataAttributesTimeZone = "Chatham Is."
	StatusPageListDataAttributesTimeZoneChennai                   StatusPageListDataAttributesTimeZone = "Chennai"
	StatusPageListDataAttributesTimeZoneChihuahua                 StatusPageListDataAttributesTimeZone = "Chihuahua"
	StatusPageListDataAttributesTimeZoneChongqing                 StatusPageListDataAttributesTimeZone = "Chongqing"
	StatusPageListDataAttributesTimeZoneCopenhagen                StatusPageListDataAttributesTimeZone = "Copenhagen"
	StatusPageListDataAttributesTimeZoneDarwin                    StatusPageListDataAttributesTimeZone = "Darwin"
	StatusPageListDataAttributesTimeZoneDhaka                     StatusPageListDataAttributesTimeZone = "Dhaka"
	StatusPageListDataAttributesTimeZoneDublin                    StatusPageListDataAttributesTimeZone = "Dublin"
	StatusPageListDataAttributesTimeZoneEasternTimeUSCanada       StatusPageListDataAttributesTimeZone = "Eastern Time (US & Canada)"
	StatusPageListDataAttributesTimeZoneEdinburgh                 StatusPageListDataAttributesTimeZone = "Edinburgh"
	StatusPageListDataAttributesTimeZoneEkaterinburg              StatusPageListDataAttributesTimeZone = "Ekaterinburg"
	StatusPageListDataAttributesTimeZoneFiji                      StatusPageListDataAttributesTimeZone = "Fiji"
	StatusPageListDataAttributesTimeZoneGeorgetown                StatusPageListDataAttributesTimeZone = "Georgetown"
	StatusPageListDataAttributesTimeZoneGreenland                 StatusPageListDataAttributesTimeZone = "Greenland"
	StatusPageListDataAttributesTimeZoneGuadalajara               StatusPageListDataAttributesTimeZone = "Guadalajara"
	StatusPageListDataAttributesTimeZoneGuam                      StatusPageListDataAttributesTimeZone = "Guam"
	StatusPageListDataAttributesTimeZoneHanoi                     StatusPageListDataAttributesTimeZone = "Hanoi"
	StatusPageListDataAttributesTimeZoneHarare                    StatusPageListDataAttributesTimeZone = "Harare"
	StatusPageListDataAttributesTimeZoneHawaii                    StatusPageListDataAttributesTimeZone = "Hawaii"
	StatusPageListDataAttributesTimeZoneHelsinki                  StatusPageListDataAttributesTimeZone = "Helsinki"
	StatusPageListDataAttributesTimeZoneHobart                    StatusPageListDataAttributesTimeZone = "Hobart"
	StatusPageListDataAttributesTimeZoneHongKong                  StatusPageListDataAttributesTimeZone = "Hong Kong"
	StatusPageListDataAttributesTimeZoneIndianaEast               StatusPageListDataAttributesTimeZone = "Indiana (East)"
	StatusPageListDataAttributesTimeZoneInternationalDateLineWest StatusPageListDataAttributesTimeZone = "International Date Line West"
	StatusPageListDataAttributesTimeZoneIrkutsk                   StatusPageListDataAttributesTimeZone = "Irkutsk"
	StatusPageListDataAttributesTimeZoneIslamabad                 StatusPageListDataAttributesTimeZone = "Islamabad"
	StatusPageListDataAttributesTimeZoneIstanbul                  StatusPageListDataAttributesTimeZone = "Istanbul"
	StatusPageListDataAttributesTimeZoneJakarta                   StatusPageListDataAttributesTimeZone = "Jakarta"
	StatusPageListDataAttributesTimeZoneJerusalem                 StatusPageListDataAttributesTimeZone = "Jerusalem"
	StatusPageListDataAttributesTimeZoneKabul                     StatusPageListDataAttributesTimeZone = "Kabul"
	StatusPageListDataAttributesTimeZoneKaliningrad               StatusPageListDataAttributesTimeZone = "Kaliningrad"
	StatusPageListDataAttributesTimeZoneKamchatka                 StatusPageListDataAttributesTimeZone = "Kamchatka"
	StatusPageListDataAttributesTimeZoneKarachi                   StatusPageListDataAttributesTimeZone = "Karachi"
	StatusPageListDataAttributesTimeZoneKathmandu                 StatusPageListDataAttributesTimeZone = "Kathmandu"
	StatusPageListDataAttributesTimeZoneKolkata                   StatusPageListDataAttributesTimeZone = "Kolkata"
	StatusPageListDataAttributesTimeZoneKrasnoyarsk               StatusPageListDataAttributesTimeZone = "Krasnoyarsk"
	StatusPageListDataAttributesTimeZoneKualaLumpur               StatusPageListDataAttributesTimeZone = "Kuala Lumpur"
	StatusPageListDataAttributesTimeZoneKuwait                    StatusPageListDataAttributesTimeZone = "Kuwait"
	StatusPageListDataAttributesTimeZoneKyiv                      StatusPageListDataAttributesTimeZone = "Kyiv"
	StatusPageListDataAttributesTimeZoneLaPaz                     StatusPageListDataAttributesTimeZone = "La Paz"
	StatusPageListDataAttributesTimeZoneLima                      StatusPageListDataAttributesTimeZone = "Lima"
	StatusPageListDataAttributesTimeZoneLisbon                    StatusPageListDataAttributesTimeZone = "Lisbon"
	StatusPageListDataAttributesTimeZoneLjubljana                 StatusPageListDataAttributesTimeZone = "Ljubljana"
	StatusPageListDataAttributesTimeZoneLondon                    StatusPageListDataAttributesTimeZone = "London"
	StatusPageListDataAttributesTimeZoneMadrid                    StatusPageListDataAttributesTimeZone = "Madrid"
	StatusPageListDataAttributesTimeZoneMagadan                   StatusPageListDataAttributesTimeZone = "Magadan"
	StatusPageListDataAttributesTimeZoneMarshallIs                StatusPageListDataAttributesTimeZone = "Marshall Is."
	StatusPageListDataAttributesTimeZoneMazatlan                  StatusPageListDataAttributesTimeZone = "Mazatlan"
	StatusPageListDataAttributesTimeZoneMelbourne                 StatusPageListDataAttributesTimeZone = "Melbourne"
	StatusPageListDataAttributesTimeZoneMexicoCity                StatusPageListDataAttributesTimeZone = "Mexico City"
	StatusPageListDataAttributesTimeZoneMidAtlantic               StatusPageListDataAttributesTimeZone = "Mid-Atlantic"
	StatusPageListDataAttributesTimeZoneMidwayIsland              StatusPageListDataAttributesTimeZone = "Midway Island"
	StatusPageListDataAttributesTimeZoneMinsk                     StatusPageListDataAttributesTimeZone = "Minsk"
	StatusPageListDataAttributesTimeZoneMonrovia                  StatusPageListDataAttributesTimeZone = "Monrovia"
	StatusPageListDataAttributesTimeZoneMonterrey                 StatusPageListDataAttributesTimeZone = "Monterrey"
	StatusPageListDataAttributesTimeZoneMontevideo                StatusPageListDataAttributesTimeZone = "Montevideo"
	StatusPageListDataAttributesTimeZoneMoscow                    StatusPageListDataAttributesTimeZone = "Moscow"
	StatusPageListDataAttributesTimeZoneMountainTimeUSCanada      StatusPageListDataAttributesTimeZone = "Mountain Time (US & Canada)"
	StatusPageListDataAttributesTimeZoneMumbai                    StatusPageListDataAttributesTimeZone = "Mumbai"
	StatusPageListDataAttributesTimeZoneMuscat                    StatusPageListDataAttributesTimeZone = "Muscat"
	StatusPageListDataAttributesTimeZoneNairobi                   StatusPageListDataAttributesTimeZone = "Nairobi"
	StatusPageListDataAttributesTimeZoneNewCaledonia              StatusPageListDataAttributesTimeZone = "New Caledonia"
	StatusPageListDataAttributesTimeZoneNewDelhi                  StatusPageListDataAttributesTimeZone = "New Delhi"
	StatusPageListDataAttributesTimeZoneNewfoundland              StatusPageListDataAttributesTimeZone = "Newfoundland"
	StatusPageListDataAttributesTimeZoneNovosibirsk               StatusPageListDataAttributesTimeZone = "Novosibirsk"
	StatusPageListDataAttributesTimeZoneNukualofa                 StatusPageListDataAttributesTimeZone = "Nuku'alofa"
	StatusPageListDataAttributesTimeZoneOsaka                     StatusPageListDataAttributesTimeZone = "Osaka"
	StatusPageListDataAttributesTimeZonePacificTimeUSCanada       StatusPageListDataAttributesTimeZone = "Pacific Time (US & Canada)"
	StatusPageListDataAttributesTimeZoneParis                     StatusPageListDataAttributesTimeZone = "Paris"
	StatusPageListDataAttributesTimeZonePerth                     StatusPageListDataAttributesTimeZone = "Perth"
	StatusPageListDataAttributesTimeZonePortMoresby               StatusPageListDataAttributesTimeZone = "Port Moresby"
	StatusPageListDataAttributesTimeZonePrague                    StatusPageListDataAttributesTimeZone = "Prague"
	StatusPageListDataAttributesTimeZonePretoria                  StatusPageListDataAttributesTimeZone = "Pretoria"
	StatusPageListDataAttributesTimeZonePuertoRico                StatusPageListDataAttributesTimeZone = "Puerto Rico"
	StatusPageListDataAttributesTimeZoneQuito                     StatusPageListDataAttributesTimeZone = "Quito"
	StatusPageListDataAttributesTimeZoneRangoon                   StatusPageListDataAttributesTimeZone = "Rangoon"
	StatusPageListDataAttributesTimeZoneRiga                      StatusPageListDataAttributesTimeZone = "Riga"
	StatusPageListDataAttributesTimeZoneRiyadh                    StatusPageListDataAttributesTimeZone = "Riyadh"
	StatusPageListDataAttributesTimeZoneRome                      StatusPageListDataAttributesTimeZone = "Rome"
	StatusPageListDataAttributesTimeZoneSamara                    StatusPageListDataAttributesTimeZone = "Samara"
	StatusPageListDataAttributesTimeZoneSamoa                     StatusPageListDataAttributesTimeZone = "Samoa"
	StatusPageListDataAttributesTimeZoneSantiago                  StatusPageListDataAttributesTimeZone = "Santiago"
	StatusPageListDataAttributesTimeZoneSapporo                   StatusPageListDataAttributesTimeZone = "Sapporo"
	StatusPageListDataAttributesTimeZoneSarajevo                  StatusPageListDataAttributesTimeZone = "Sarajevo"
	StatusPageListDataAttributesTimeZoneSaskatchewan              StatusPageListDataAttributesTimeZone = "Saskatchewan"
	StatusPageListDataAttributesTimeZoneSeoul                     StatusPageListDataAttributesTimeZone = "Seoul"
	StatusPageListDataAttributesTimeZoneSingapore                 StatusPageListDataAttributesTimeZone = "Singapore"
	StatusPageListDataAttributesTimeZoneSkopje                    StatusPageListDataAttributesTimeZone = "Skopje"
	StatusPageListDataAttributesTimeZoneSofia                     StatusPageListDataAttributesTimeZone = "Sofia"
	StatusPageListDataAttributesTimeZoneSolomonIs                 StatusPageListDataAttributesTimeZone = "Solomon Is."
	StatusPageListDataAttributesTimeZoneSrednekolymsk             StatusPageListDataAttributesTimeZone = "Srednekolymsk"
	StatusPageListDataAttributesTimeZoneSriJayawardenepura        StatusPageListDataAttributesTimeZone = "Sri Jayawardenepura"
	StatusPageListDataAttributesTimeZoneStPetersburg              StatusPageListDataAttributesTimeZone = "St. Petersburg"
	StatusPageListDataAttributesTimeZoneStockholm                 StatusPageListDataAttributesTimeZone = "Stockholm"
	StatusPageListDataAttributesTimeZoneSydney                    StatusPageListDataAttributesTimeZone = "Sydney"
	StatusPageListDataAttributesTimeZoneTaipei                    StatusPageListDataAttributesTimeZone = "Taipei"
	StatusPageListDataAttributesTimeZoneTallinn                   StatusPageListDataAttributesTimeZone = "Tallinn"
	StatusPageListDataAttributesTimeZoneTashkent                  StatusPageListDataAttributesTimeZone = "Tashkent"
	StatusPageListDataAttributesTimeZoneTbilisi                   StatusPageListDataAttributesTimeZone = "Tbilisi"
	StatusPageListDataAttributesTimeZoneTehran                    StatusPageListDataAttributesTimeZone = "Tehran"
	StatusPageListDataAttributesTimeZoneTijuana                   StatusPageListDataAttributesTimeZone = "Tijuana"
	StatusPageListDataAttributesTimeZoneTokelauIs                 StatusPageListDataAttributesTimeZone = "Tokelau Is."
	StatusPageListDataAttributesTimeZoneTokyo                     StatusPageListDataAttributesTimeZone = "Tokyo"
	StatusPageListDataAttributesTimeZoneUTC                       StatusPageListDataAttributesTimeZone = "UTC"
	StatusPageListDataAttributesTimeZoneUlaanbaatar               StatusPageListDataAttributesTimeZone = "Ulaanbaatar"
	StatusPageListDataAttributesTimeZoneUrumqi                    StatusPageListDataAttributesTimeZone = "Urumqi"
	StatusPageListDataAttributesTimeZoneVienna                    StatusPageListDataAttributesTimeZone = "Vienna"
	StatusPageListDataAttributesTimeZoneVilnius                   StatusPageListDataAttributesTimeZone = "Vilnius"
	StatusPageListDataAttributesTimeZoneVladivostok               StatusPageListDataAttributesTimeZone = "Vladivostok"
	StatusPageListDataAttributesTimeZoneVolgograd                 StatusPageListDataAttributesTimeZone = "Volgograd"
	StatusPageListDataAttributesTimeZoneWarsaw                    StatusPageListDataAttributesTimeZone = "Warsaw"
	StatusPageListDataAttributesTimeZoneWellington                StatusPageListDataAttributesTimeZone = "Wellington"
	StatusPageListDataAttributesTimeZoneWestCentralAfrica         StatusPageListDataAttributesTimeZone = "West Central Africa"
	StatusPageListDataAttributesTimeZoneYakutsk                   StatusPageListDataAttributesTimeZone = "Yakutsk"
	StatusPageListDataAttributesTimeZoneYerevan                   StatusPageListDataAttributesTimeZone = "Yerevan"
	StatusPageListDataAttributesTimeZoneZagreb                    StatusPageListDataAttributesTimeZone = "Zagreb"
	StatusPageListDataAttributesTimeZoneZurich                    StatusPageListDataAttributesTimeZone = "Zurich"
)

// Defines values for StatusPageListDataType.
const (
	StatusPageListDataTypeStatusPages StatusPageListDataType = "status_pages"
)

// Defines values for StatusPageResponseDataAttributesShowUptimeLastDays.
const (
	StatusPageResponseDataAttributesShowUptimeLastDaysN180 StatusPageResponseDataAttributesShowUptimeLastDays = 180
	StatusPageResponseDataAttributesShowUptimeLastDaysN30  StatusPageResponseDataAttributesShowUptimeLastDays = 30
	StatusPageResponseDataAttributesShowUptimeLastDaysN360 StatusPageResponseDataAttributesShowUptimeLastDays = 360
	StatusPageResponseDataAttributesShowUptimeLastDaysN60  StatusPageResponseDataAttributesShowUptimeLastDays = 60
	StatusPageResponseDataAttributesShowUptimeLastDaysN90  StatusPageResponseDataAttributesShowUptimeLastDays = 90
)

// Defines values for StatusPageResponseDataAttributesTimeZone.
const (
	StatusPageResponseDataAttributesTimeZoneAbuDhabi                  StatusPageResponseDataAttributesTimeZone = "Abu Dhabi"
	StatusPageResponseDataAttributesTimeZoneAdelaide                  StatusPageResponseDataAttributesTimeZone = "Adelaide"
	StatusPageResponseDataAttributesTimeZoneAlaska                    StatusPageResponseDataAttributesTimeZone = "Alaska"
	StatusPageResponseDataAttributesTimeZoneAlmaty                    StatusPageResponseDataAttributesTimeZone = "Almaty"
	StatusPageResponseDataAttributesTimeZoneAmericanSamoa             StatusPageResponseDataAttributesTimeZone = "American Samoa"
	StatusPageResponseDataAttributesTimeZoneAmsterdam                 StatusPageResponseDataAttributesTimeZone = "Amsterdam"
	StatusPageResponseDataAttributesTimeZoneArizona                   StatusPageResponseDataAttributesTimeZone = "Arizona"
	StatusPageResponseDataAttributesTimeZoneAstana                    StatusPageResponseDataAttributesTimeZone = "Astana"
	StatusPageResponseDataAttributesTimeZoneAthens                    StatusPageResponseDataAttributesTimeZone = "Athens"
	StatusPageResponseDataAttributesTimeZoneAtlanticTimeCanada        StatusPageResponseDataAttributesTimeZone = "Atlantic Time (Canada)"
	StatusPageResponseDataAttributesTimeZoneAuckland                  StatusPageResponseDataAttributesTimeZone = "Auckland"
	StatusPageResponseDataAttributesTimeZoneAzores                    StatusPageResponseDataAttributesTimeZone = "Azores"
	StatusPageResponseDataAttributesTimeZoneBaghdad                   StatusPageResponseDataAttributesTimeZone = "Baghdad"
	StatusPageResponseDataAttributesTimeZoneBaku                      StatusPageResponseDataAttributesTimeZone = "Baku"
	StatusPageResponseDataAttributesTimeZoneBangkok                   StatusPageResponseDataAttributesTimeZone = "Bangkok"
	StatusPageResponseDataAttributesTimeZoneBeijing                   StatusPageResponseDataAttributesTimeZone = "Beijing"
	StatusPageResponseDataAttributesTimeZoneBelgrade                  StatusPageResponseDataAttributesTimeZone = "Belgrade"
	StatusPageResponseDataAttributesTimeZoneBerlin                    StatusPageResponseDataAttributesTimeZone = "Berlin"
	StatusPageResponseDataAttributesTimeZoneBern                      StatusPageResponseDataAttributesTimeZone = "Bern"
	StatusPageResponseDataAttributesTimeZoneBogota                    StatusPageResponseDataAttributesTimeZone = "Bogota"
	StatusPageResponseDataAttributesTimeZoneBrasilia                  StatusPageResponseDataAttributesTimeZone = "Brasilia"
	StatusPageResponseDataAttributesTimeZoneBratislava                StatusPageResponseDataAttributesTimeZone = "Bratislava"
	StatusPageResponseDataAttributesTimeZoneBrisbane                  StatusPageResponseDataAttributesTimeZone = "Brisbane"
	StatusPageResponseDataAttributesTimeZoneBrussels                  StatusPageResponseDataAttributesTimeZone = "Brussels"
	StatusPageResponseDataAttributesTimeZoneBucharest                 StatusPageResponseDataAttributesTimeZone = "Bucharest"
	StatusPageResponseDataAttributesTimeZoneBudapest                  StatusPageResponseDataAttributesTimeZone = "Budapest"
	StatusPageResponseDataAttributesTimeZoneBuenosAires               StatusPageResponseDataAttributesTimeZone = "Buenos Aires"
	StatusPageResponseDataAttributesTimeZoneCairo                     StatusPageResponseDataAttributesTimeZone = "Cairo"
	StatusPageResponseDataAttributesTimeZoneCanberra                  StatusPageResponseDataAttributesTimeZone = "Canberra"
	StatusPageResponseDataAttributesTimeZoneCapeVerdeIs               StatusPageResponseDataAttributesTimeZone = "Cape Verde Is."
	StatusPageResponseDataAttributesTimeZoneCaracas                   StatusPageResponseDataAttributesTimeZone = "Caracas"
	StatusPageResponseDataAttributesTimeZoneCasablanca                StatusPageResponseDataAttributesTimeZone = "Casablanca"
	StatusPageResponseDataAttributesTimeZoneCentralAmerica            StatusPageResponseDataAttributesTimeZone = "Central America"
	StatusPageResponseDataAttributesTimeZoneCentralTimeUSCanada       StatusPageResponseDataAttributesTimeZone = "Central Time (US & Canada)"
	StatusPageResponseDataAttributesTimeZoneChathamIs                 StatusPageResponseDataAttributesTimeZone = "Chatham Is."
	StatusPageResponseDataAttributesTimeZoneChennai                   StatusPageResponseDataAttributesTimeZone = "Chennai"
	StatusPageResponseDataAttributesTimeZoneChihuahua                 StatusPageResponseDataAttributesTimeZone = "Chihuahua"
	StatusPageResponseDataAttributesTimeZoneChongqing                 StatusPageResponseDataAttributesTimeZone = "Chongqing"
	StatusPageResponseDataAttributesTimeZoneCopenhagen                StatusPageResponseDataAttributesTimeZone = "Copenhagen"
	StatusPageResponseDataAttributesTimeZoneDarwin                    StatusPageResponseDataAttributesTimeZone = "Darwin"
	StatusPageResponseDataAttributesTimeZoneDhaka                     StatusPageResponseDataAttributesTimeZone = "Dhaka"
	StatusPageResponseDataAttributesTimeZoneDublin                    StatusPageResponseDataAttributesTimeZone = "Dublin"
	StatusPageResponseDataAttributesTimeZoneEasternTimeUSCanada       StatusPageResponseDataAttributesTimeZone = "Eastern Time (US & Canada)"
	StatusPageResponseDataAttributesTimeZoneEdinburgh                 StatusPageResponseDataAttributesTimeZone = "Edinburgh"
	StatusPageResponseDataAttributesTimeZoneEkaterinburg              StatusPageResponseDataAttributesTimeZone = "Ekaterinburg"
	StatusPageResponseDataAttributesTimeZoneFiji                      StatusPageResponseDataAttributesTimeZone = "Fiji"
	StatusPageResponseDataAttributesTimeZoneGeorgetown                StatusPageResponseDataAttributesTimeZone = "Georgetown"
	StatusPageResponseDataAttributesTimeZoneGreenland                 StatusPageResponseDataAttributesTimeZone = "Greenland"
	StatusPageResponseDataAttributesTimeZoneGuadalajara               StatusPageResponseDataAttributesTimeZone = "Guadalajara"
	StatusPageResponseDataAttributesTimeZoneGuam                      StatusPageResponseDataAttributesTimeZone = "Guam"
	StatusPageResponseDataAttributesTimeZoneHanoi                     StatusPageResponseDataAttributesTimeZone = "Hanoi"
	StatusPageResponseDataAttributesTimeZoneHarare                    StatusPageResponseDataAttributesTimeZone = "Harare"
	StatusPageResponseDataAttributesTimeZoneHawaii                    StatusPageResponseDataAttributesTimeZone = "Hawaii"
	StatusPageResponseDataAttributesTimeZoneHelsinki                  StatusPageResponseDataAttributesTimeZone = "Helsinki"
	StatusPageResponseDataAttributesTimeZoneHobart                    StatusPageResponseDataAttributesTimeZone = "Hobart"
	StatusPageResponseDataAttributesTimeZoneHongKong                  StatusPageResponseDataAttributesTimeZone = "Hong Kong"
	StatusPageResponseDataAttributesTimeZoneIndianaEast               StatusPageResponseDataAttributesTimeZone = "Indiana (East)"
	StatusPageResponseDataAttributesTimeZoneInternationalDateLineWest StatusPageResponseDataAttributesTimeZone = "International Date Line West"
	StatusPageResponseDataAttributesTimeZoneIrkutsk                   StatusPageResponseDataAttributesTimeZone = "Irkutsk"
	StatusPageResponseDataAttributesTimeZoneIslamabad                 StatusPageResponseDataAttributesTimeZone = "Islamabad"
	StatusPageResponseDataAttributesTimeZoneIstanbul                  StatusPageResponseDataAttributesTimeZone = "Istanbul"
	StatusPageResponseDataAttributesTimeZoneJakarta                   StatusPageResponseDataAttributesTimeZone = "Jakarta"
	StatusPageResponseDataAttributesTimeZoneJerusalem                 StatusPageResponseDataAttributesTimeZone = "Jerusalem"
	StatusPageResponseDataAttributesTimeZoneKabul                     StatusPageResponseDataAttributesTimeZone = "Kabul"
	StatusPageResponseDataAttributesTimeZoneKaliningrad               StatusPageResponseDataAttributesTimeZone = "Kaliningrad"
	StatusPageResponseDataAttributesTimeZoneKamchatka                 StatusPageResponseDataAttributesTimeZone = "Kamchatka"
	StatusPageResponseDataAttributesTimeZoneKarachi                   StatusPageResponseDataAttributesTimeZone = "Karachi"
	StatusPageResponseDataAttributesTimeZoneKathmandu                 StatusPageResponseDataAttributesTimeZone = "Kathmandu"
	StatusPageResponseDataAttributesTimeZoneKolkata                   StatusPageResponseDataAttributesTimeZone = "Kolkata"
	StatusPageResponseDataAttributesTimeZoneKrasnoyarsk               StatusPageResponseDataAttributesTimeZone = "Krasnoyarsk"
	StatusPageResponseDataAttributesTimeZoneKualaLumpur               StatusPageResponseDataAttributesTimeZone = "Kuala Lumpur"
	StatusPageResponseDataAttributesTimeZoneKuwait                    StatusPageResponseDataAttributesTimeZone = "Kuwait"
	StatusPageResponseDataAttributesTimeZoneKyiv                      StatusPageResponseDataAttributesTimeZone = "Kyiv"
	StatusPageResponseDataAttributesTimeZoneLaPaz                     StatusPageResponseDataAttributesTimeZone = "La Paz"
	StatusPageResponseDataAttributesTimeZoneLima                      StatusPageResponseDataAttributesTimeZone = "Lima"
	StatusPageResponseDataAttributesTimeZoneLisbon                    StatusPageResponseDataAttributesTimeZone = "Lisbon"
	StatusPageResponseDataAttributesTimeZoneLjubljana                 StatusPageResponseDataAttributesTimeZone = "Ljubljana"
	StatusPageResponseDataAttributesTimeZoneLondon                    StatusPageResponseDataAttributesTimeZone = "London"
	StatusPageResponseDataAttributesTimeZoneMadrid                    StatusPageResponseDataAttributesTimeZone = "Madrid"
	StatusPageResponseDataAttributesTimeZoneMagadan                   StatusPageResponseDataAttributesTimeZone = "Magadan"
	StatusPageResponseDataAttributesTimeZoneMarshallIs                StatusPageResponseDataAttributesTimeZone = "Marshall Is."
	StatusPageResponseDataAttributesTimeZoneMazatlan                  StatusPageResponseDataAttributesTimeZone = "Mazatlan"
	StatusPageResponseDataAttributesTimeZoneMelbourne                 StatusPageResponseDataAttributesTimeZone = "Melbourne"
	StatusPageResponseDataAttributesTimeZoneMexicoCity                StatusPageResponseDataAttributesTimeZone = "Mexico City"
	StatusPageResponseDataAttributesTimeZoneMidAtlantic               StatusPageResponseDataAttributesTimeZone = "Mid-Atlantic"
	StatusPageResponseDataAttributesTimeZoneMidwayIsland              StatusPageResponseDataAttributesTimeZone = "Midway Island"
	StatusPageResponseDataAttributesTimeZoneMinsk                     StatusPageResponseDataAttributesTimeZone = "Minsk"
	StatusPageResponseDataAttributesTimeZoneMonrovia                  StatusPageResponseDataAttributesTimeZone = "Monrovia"
	StatusPageResponseDataAttributesTimeZoneMonterrey                 StatusPageResponseDataAttributesTimeZone = "Monterrey"
	StatusPageResponseDataAttributesTimeZoneMontevideo                StatusPageResponseDataAttributesTimeZone = "Montevideo"
	StatusPageResponseDataAttributesTimeZoneMoscow                    StatusPageResponseDataAttributesTimeZone = "Moscow"
	StatusPageResponseDataAttributesTimeZoneMountainTimeUSCanada      StatusPageResponseDataAttributesTimeZone = "Mountain Time (US & Canada)"
	StatusPageResponseDataAttributesTimeZoneMumbai                    StatusPageResponseDataAttributesTimeZone = "Mumbai"
	StatusPageResponseDataAttributesTimeZoneMuscat                    StatusPageResponseDataAttributesTimeZone = "Muscat"
	StatusPageResponseDataAttributesTimeZoneNairobi                   StatusPageResponseDataAttributesTimeZone = "Nairobi"
	StatusPageResponseDataAttributesTimeZoneNewCaledonia              StatusPageResponseDataAttributesTimeZone = "New Caledonia"
	StatusPageResponseDataAttributesTimeZoneNewDelhi                  StatusPageResponseDataAttributesTimeZone = "New Delhi"
	StatusPageResponseDataAttributesTimeZoneNewfoundland              StatusPageResponseDataAttributesTimeZone = "Newfoundland"
	StatusPageResponseDataAttributesTimeZoneNovosibirsk               StatusPageResponseDataAttributesTimeZone = "Novosibirsk"
	StatusPageResponseDataAttributesTimeZoneNukualofa                 StatusPageResponseDataAttributesTimeZone = "Nuku'alofa"
	StatusPageResponseDataAttributesTimeZoneOsaka                     StatusPageResponseDataAttributesTimeZone = "Osaka"
	StatusPageResponseDataAttributesTimeZonePacificTimeUSCanada       StatusPageResponseDataAttributesTimeZone = "Pacific Time (US & Canada)"
	StatusPageResponseDataAttributesTimeZoneParis                     StatusPageResponseDataAttributesTimeZone = "Paris"
	StatusPageResponseDataAttributesTimeZonePerth                     StatusPageResponseDataAttributesTimeZone = "Perth"
	StatusPageResponseDataAttributesTimeZonePortMoresby               StatusPageResponseDataAttributesTimeZone = "Port Moresby"
	StatusPageResponseDataAttributesTimeZonePrague                    StatusPageResponseDataAttributesTimeZone = "Prague"
	StatusPageResponseDataAttributesTimeZonePretoria                  StatusPageResponseDataAttributesTimeZone = "Pretoria"
	StatusPageResponseDataAttributesTimeZonePuertoRico                StatusPageResponseDataAttributesTimeZone = "Puerto Rico"
	StatusPageResponseDataAttributesTimeZoneQuito                     StatusPageResponseDataAttributesTimeZone = "Quito"
	StatusPageResponseDataAttributesTimeZoneRangoon                   StatusPageResponseDataAttributesTimeZone = "Rangoon"
	StatusPageResponseDataAttributesTimeZoneRiga                      StatusPageResponseDataAttributesTimeZone = "Riga"
	StatusPageResponseDataAttributesTimeZoneRiyadh                    StatusPageResponseDataAttributesTimeZone = "Riyadh"
	StatusPageResponseDataAttributesTimeZoneRome                      StatusPageResponseDataAttributesTimeZone = "Rome"
	StatusPageResponseDataAttributesTimeZoneSamara                    StatusPageResponseDataAttributesTimeZone = "Samara"
	StatusPageResponseDataAttributesTimeZoneSamoa                     StatusPageResponseDataAttributesTimeZone = "Samoa"
	StatusPageResponseDataAttributesTimeZoneSantiago                  StatusPageResponseDataAttributesTimeZone = "Santiago"
	StatusPageResponseDataAttributesTimeZoneSapporo                   StatusPageResponseDataAttributesTimeZone = "Sapporo"
	StatusPageResponseDataAttributesTimeZoneSarajevo                  StatusPageResponseDataAttributesTimeZone = "Sarajevo"
	StatusPageResponseDataAttributesTimeZoneSaskatchewan              StatusPageResponseDataAttributesTimeZone = "Saskatchewan"
	StatusPageResponseDataAttributesTimeZoneSeoul                     StatusPageResponseDataAttributesTimeZone = "Seoul"
	StatusPageResponseDataAttributesTimeZoneSingapore                 StatusPageResponseDataAttributesTimeZone = "Singapore"
	StatusPageResponseDataAttributesTimeZoneSkopje                    StatusPageResponseDataAttributesTimeZone = "Skopje"
	StatusPageResponseDataAttributesTimeZoneSofia                     StatusPageResponseDataAttributesTimeZone = "Sofia"
	StatusPageResponseDataAttributesTimeZoneSolomonIs                 StatusPageResponseDataAttributesTimeZone = "Solomon Is."
	StatusPageResponseDataAttributesTimeZoneSrednekolymsk             StatusPageResponseDataAttributesTimeZone = "Srednekolymsk"
	StatusPageResponseDataAttributesTimeZoneSriJayawardenepura        StatusPageResponseDataAttributesTimeZone = "Sri Jayawardenepura"
	StatusPageResponseDataAttributesTimeZoneStPetersburg              StatusPageResponseDataAttributesTimeZone = "St. Petersburg"
	StatusPageResponseDataAttributesTimeZoneStockholm                 StatusPageResponseDataAttributesTimeZone = "Stockholm"
	StatusPageResponseDataAttributesTimeZoneSydney                    StatusPageResponseDataAttributesTimeZone = "Sydney"
	StatusPageResponseDataAttributesTimeZoneTaipei                    StatusPageResponseDataAttributesTimeZone = "Taipei"
	StatusPageResponseDataAttributesTimeZoneTallinn                   StatusPageResponseDataAttributesTimeZone = "Tallinn"
	StatusPageResponseDataAttributesTimeZoneTashkent                  StatusPageResponseDataAttributesTimeZone = "Tashkent"
	StatusPageResponseDataAttributesTimeZoneTbilisi                   StatusPageResponseDataAttributesTimeZone = "Tbilisi"
	StatusPageResponseDataAttributesTimeZoneTehran                    StatusPageResponseDataAttributesTimeZone = "Tehran"
	StatusPageResponseDataAttributesTimeZoneTijuana                   StatusPageResponseDataAttributesTimeZone = "Tijuana"
	StatusPageResponseDataAttributesTimeZoneTokelauIs                 StatusPageResponseDataAttributesTimeZone = "Tokelau Is."
	StatusPageResponseDataAttributesTimeZoneTokyo                     StatusPageResponseDataAttributesTimeZone = "Tokyo"
	StatusPageResponseDataAttributesTimeZoneUTC                       StatusPageResponseDataAttributesTimeZone = "UTC"
	StatusPageResponseDataAttributesTimeZoneUlaanbaatar               StatusPageResponseDataAttributesTimeZone = "Ulaanbaatar"
	StatusPageResponseDataAttributesTimeZoneUrumqi                    StatusPageResponseDataAttributesTimeZone = "Urumqi"
	StatusPageResponseDataAttributesTimeZoneVienna                    StatusPageResponseDataAttributesTimeZone = "Vienna"
	StatusPageResponseDataAttributesTimeZoneVilnius                   StatusPageResponseDataAttributesTimeZone = "Vilnius"
	StatusPageResponseDataAttributesTimeZoneVladivostok               StatusPageResponseDataAttributesTimeZone = "Vladivostok"
	StatusPageResponseDataAttributesTimeZoneVolgograd                 StatusPageResponseDataAttributesTimeZone = "Volgograd"
	StatusPageResponseDataAttributesTimeZoneWarsaw                    StatusPageResponseDataAttributesTimeZone = "Warsaw"
	StatusPageResponseDataAttributesTimeZoneWellington                StatusPageResponseDataAttributesTimeZone = "Wellington"
	StatusPageResponseDataAttributesTimeZoneWestCentralAfrica         StatusPageResponseDataAttributesTimeZone = "West Central Africa"
	StatusPageResponseDataAttributesTimeZoneYakutsk                   StatusPageResponseDataAttributesTimeZone = "Yakutsk"
	StatusPageResponseDataAttributesTimeZoneYerevan                   StatusPageResponseDataAttributesTimeZone = "Yerevan"
	StatusPageResponseDataAttributesTimeZoneZagreb                    StatusPageResponseDataAttributesTimeZone = "Zagreb"
	StatusPageResponseDataAttributesTimeZoneZurich                    StatusPageResponseDataAttributesTimeZone = "Zurich"
)

// Defines values for StatusPageResponseDataType.
const (
	StatusPageResponseDataTypeStatusPages StatusPageResponseDataType = "status_pages"
)

// Defines values for StatusPageTemplateKind.
const (
	StatusPageTemplateKindNormal    StatusPageTemplateKind = "normal"
	StatusPageTemplateKindScheduled StatusPageTemplateKind = "scheduled"
)

// Defines values for StatusPageTemplateListDataAttributesKind.
const (
	StatusPageTemplateListDataAttributesKindNormal    StatusPageTemplateListDataAttributesKind = "normal"
	StatusPageTemplateListDataAttributesKindScheduled StatusPageTemplateListDataAttributesKind = "scheduled"
)

// Defines values for StatusPageTemplateListDataType.
const (
	StatusPageTemplateListDataTypeStatusPageTemplates StatusPageTemplateListDataType = "status_page_templates"
)

// Defines values for StatusPageTemplateResponseDataAttributesKind.
const (
	StatusPageTemplateResponseDataAttributesKindNormal    StatusPageTemplateResponseDataAttributesKind = "normal"
	StatusPageTemplateResponseDataAttributesKindScheduled StatusPageTemplateResponseDataAttributesKind = "scheduled"
)

// Defines values for StatusPageTemplateResponseDataType.
const (
	StatusPageTemplateResponseDataTypeStatusPageTemplates StatusPageTemplateResponseDataType = "status_page_templates"
)

// Defines values for TeamListDataType.
const (
	TeamListDataTypeGroups TeamListDataType = "groups"
)

// Defines values for TeamResponseDataType.
const (
	TeamResponseDataTypeGroups TeamResponseDataType = "groups"
)

// Defines values for TriggerWorkflowTaskParamsKind.
const (
	TriggerWorkflowTaskParamsKindActionItem TriggerWorkflowTaskParamsKind = "action_item"
	TriggerWorkflowTaskParamsKindAlert      TriggerWorkflowTaskParamsKind = "alert"
	TriggerWorkflowTaskParamsKindIncident   TriggerWorkflowTaskParamsKind = "incident"
	TriggerWorkflowTaskParamsKindPostMortem TriggerWorkflowTaskParamsKind = "post_mortem"
	TriggerWorkflowTaskParamsKindPulse      TriggerWorkflowTaskParamsKind = "pulse"
	TriggerWorkflowTaskParamsKindSimple     TriggerWorkflowTaskParamsKind = "simple"
)

// Defines values for TriggerWorkflowTaskParamsTaskType.
const (
	TriggerWorkflow TriggerWorkflowTaskParamsTaskType = "trigger_workflow"
)

// Defines values for TweetTwitterMessageTaskParamsTaskType.
const (
	TweetTwitterMessage TweetTwitterMessageTaskParamsTaskType = "tweet_twitter_message"
)

// Defines values for UnassignRoleFromUserDataType.
const (
	UnassignRoleFromUserDataTypeIncidents UnassignRoleFromUserDataType = "incidents"
)

// Defines values for UpdateActionItemTaskParamsAttributeToQueryBy.
const (
	UpdateActionItemTaskParamsAttributeToQueryByAirtableRecordId     UpdateActionItemTaskParamsAttributeToQueryBy = "airtable_record_id"
	UpdateActionItemTaskParamsAttributeToQueryByAsanaTaskId          UpdateActionItemTaskParamsAttributeToQueryBy = "asana_task_id"
	UpdateActionItemTaskParamsAttributeToQueryByClickupTaskId        UpdateActionItemTaskParamsAttributeToQueryBy = "clickup_task_id"
	UpdateActionItemTaskParamsAttributeToQueryByFreshserviceTaskId   UpdateActionItemTaskParamsAttributeToQueryBy = "freshservice_task_id"
	UpdateActionItemTaskParamsAttributeToQueryByFreshserviceTicketId UpdateActionItemTaskParamsAttributeToQueryBy = "freshservice_ticket_id"
	UpdateActionItemTaskParamsAttributeToQueryByGithubIssueId        UpdateActionItemTaskParamsAttributeToQueryBy = "github_issue_id"
	UpdateActionItemTaskParamsAttributeToQueryById                   UpdateActionItemTaskParamsAttributeToQueryBy = "id"
	UpdateActionItemTaskParamsAttributeToQueryByJiraIssueId          UpdateActionItemTaskParamsAttributeToQueryBy = "jira_issue_id"
	UpdateActionItemTaskParamsAttributeToQueryByLinearIssueId        UpdateActionItemTaskParamsAttributeToQueryBy = "linear_issue_id"
	UpdateActionItemTaskParamsAttributeToQueryByShortcutStoryId      UpdateActionItemTaskParamsAttributeToQueryBy = "shortcut_story_id"
	UpdateActionItemTaskParamsAttributeToQueryByShortcutTaskId       UpdateActionItemTaskParamsAttributeToQueryBy = "shortcut_task_id"
	UpdateActionItemTaskParamsAttributeToQueryByTrelloCardId         UpdateActionItemTaskParamsAttributeToQueryBy = "trello_card_id"
	UpdateActionItemTaskParamsAttributeToQueryByZendeskTicketId      UpdateActionItemTaskParamsAttributeToQueryBy = "zendesk_ticket_id"
)

// Defines values for UpdateActionItemTaskParamsPriority.
const (
	UpdateActionItemTaskParamsPriorityHigh   UpdateActionItemTaskParamsPriority = "high"
	UpdateActionItemTaskParamsPriorityLow    UpdateActionItemTaskParamsPriority = "low"
	UpdateActionItemTaskParamsPriorityMedium UpdateActionItemTaskParamsPriority = "medium"
)

// Defines values for UpdateActionItemTaskParamsStatus.
const (
	UpdateActionItemTaskParamsStatusCancelled  UpdateActionItemTaskParamsStatus = "cancelled"
	UpdateActionItemTaskParamsStatusDone       UpdateActionItemTaskParamsStatus = "done"
	UpdateActionItemTaskParamsStatusInProgress UpdateActionItemTaskParamsStatus = "in_progress"
	UpdateActionItemTaskParamsStatusOpen       UpdateActionItemTaskParamsStatus = "open"
)

// Defines values for UpdateActionItemTaskParamsTaskType.
const (
	UpdateActionItem UpdateActionItemTaskParamsTaskType = "update_action_item"
)

// Defines values for UpdateAirtableTableRecordTaskParamsTaskType.
const (
	UpdateAirtableTableRecord UpdateAirtableTableRecordTaskParamsTaskType = "update_airtable_table_record"
)

// Defines values for UpdateAsanaTaskTaskParamsDependencyDirection.
const (
	BlockedBy UpdateAsanaTaskTaskParamsDependencyDirection = "blocked_by"
	Blocking  UpdateAsanaTaskTaskParamsDependencyDirection = "blocking"
)

// Defines values for UpdateAsanaTaskTaskParamsTaskType.
const (
	UpdateAsanaTask UpdateAsanaTaskTaskParamsTaskType = "update_asana_task"
)

// Defines values for UpdateAuthorizationDataAttributesPermissions.
const (
	UpdateAuthorizationDataAttributesPermissionsAuthorize UpdateAuthorizationDataAttributesPermissions = "authorize"
	UpdateAuthorizationDataAttributesPermissionsDestroy   UpdateAuthorizationDataAttributesPermissions = "destroy"
	UpdateAuthorizationDataAttributesPermissionsRead      UpdateAuthorizationDataAttributesPermissions = "read"
	UpdateAuthorizationDataAttributesPermissionsUpdate    UpdateAuthorizationDataAttributesPermissions = "update"
)

// Defines values for UpdateAuthorizationDataType.
const (
	UpdateAuthorizationDataTypeAuthorizations UpdateAuthorizationDataType = "authorizations"
)

// Defines values for UpdateCauseDataType.
const (
	UpdateCauseDataTypeCauses UpdateCauseDataType = "causes"
)

// Defines values for UpdateClickupTaskTaskParamsTaskType.
const (
	UpdateClickupTask UpdateClickupTaskTaskParamsTaskType = "update_clickup_task"
)

// Defines values for UpdateCustomFieldDataAttributesRequired.
const (
	UpdateCustomFieldDataAttributesRequiredIncidentForm                UpdateCustomFieldDataAttributesRequired = "incident_form"
	UpdateCustomFieldDataAttributesRequiredIncidentMitigationForm      UpdateCustomFieldDataAttributesRequired = "incident_mitigation_form"
	UpdateCustomFieldDataAttributesRequiredIncidentMitigationSlackForm UpdateCustomFieldDataAttributesRequired = "incident_mitigation_slack_form"
	UpdateCustomFieldDataAttributesRequiredIncidentPostMortemForm      UpdateCustomFieldDataAttributesRequired = "incident_post_mortem_form"
	UpdateCustomFieldDataAttributesRequiredIncidentResolutionForm      UpdateCustomFieldDataAttributesRequired = "incident_resolution_form"
	UpdateCustomFieldDataAttributesRequiredIncidentResolutionSlackForm UpdateCustomFieldDataAttributesRequired = "incident_resolution_slack_form"
	UpdateCustomFieldDataAttributesRequiredIncidentSlackForm           UpdateCustomFieldDataAttributesRequired = "incident_slack_form"
)

// Defines values for UpdateCustomFieldDataAttributesShown.
const (
	UpdateCustomFieldDataAttributesShownIncidentForm                UpdateCustomFieldDataAttributesShown = "incident_form"
	UpdateCustomFieldDataAttributesShownIncidentMitigationForm      UpdateCustomFieldDataAttributesShown = "incident_mitigation_form"
	UpdateCustomFieldDataAttributesShownIncidentMitigationSlackForm UpdateCustomFieldDataAttributesShown = "incident_mitigation_slack_form"
	UpdateCustomFieldDataAttributesShownIncidentPostMortem          UpdateCustomFieldDataAttributesShown = "incident_post_mortem"
	UpdateCustomFieldDataAttributesShownIncidentPostMortemForm      UpdateCustomFieldDataAttributesShown = "incident_post_mortem_form"
	UpdateCustomFieldDataAttributesShownIncidentResolutionForm      UpdateCustomFieldDataAttributesShown = "incident_resolution_form"
	UpdateCustomFieldDataAttributesShownIncidentResolutionSlackForm UpdateCustomFieldDataAttributesShown = "incident_resolution_slack_form"
	UpdateCustomFieldDataAttributesShownIncidentSlackForm           UpdateCustomFieldDataAttributesShown = "incident_slack_form"
)

// Defines values for UpdateCustomFieldDataType.
const (
	UpdateCustomFieldDataTypeCustomFields UpdateCustomFieldDataType = "custom_fields"
)

// Defines values for UpdateCustomFieldOptionDataType.
const (
	UpdateCustomFieldOptionDataTypeCustomFieldOptions UpdateCustomFieldOptionDataType = "custom_field_options"
)

// Defines values for UpdateDashboardDataAttributesColor.
const (
	HashD7F5E1 UpdateDashboardDataAttributesColor = "#D7F5E1"
	HashE9E2FF UpdateDashboardDataAttributesColor = "#E9E2FF"
	HashFAE6E8 UpdateDashboardDataAttributesColor = "#FAE6E8"
	HashFAEEE6 UpdateDashboardDataAttributesColor = "#FAEEE6"
	HashFCF2CF UpdateDashboardDataAttributesColor = "#FCF2CF"
)

// Defines values for UpdateDashboardDataAttributesOwner.
const (
	UpdateDashboardDataAttributesOwnerTeam UpdateDashboardDataAttributesOwner = "team"
	UpdateDashboardDataAttributesOwnerUser UpdateDashboardDataAttributesOwner = "user"
)

// Defines values for UpdateDashboardDataAttributesPeriod.
const (
	UpdateDashboardDataAttributesPeriodDay   UpdateDashboardDataAttributesPeriod = "day"
	UpdateDashboardDataAttributesPeriodMonth UpdateDashboardDataAttributesPeriod = "month"
	UpdateDashboardDataAttributesPeriodWeek  UpdateDashboardDataAttributesPeriod = "week"
)

// Defines values for UpdateDashboardDataType.
const (
	UpdateDashboardDataTypeDashboards UpdateDashboardDataType = "dashboards"
)

// Defines values for UpdateEnvironmentDataType.
const (
	Environments UpdateEnvironmentDataType = "environments"
)

// Defines values for UpdateFormFieldDataAttributesInputKind.
const (
	UpdateFormFieldDataAttributesInputKindCheckbox    UpdateFormFieldDataAttributesInputKind = "checkbox"
	UpdateFormFieldDataAttributesInputKindDate        UpdateFormFieldDataAttributesInputKind = "date"
	UpdateFormFieldDataAttributesInputKindDatetime    UpdateFormFieldDataAttributesInputKind = "datetime"
	UpdateFormFieldDataAttributesInputKindMultiSelect UpdateFormFieldDataAttributesInputKind = "multi_select"
	UpdateFormFieldDataAttributesInputKindNumber      UpdateFormFieldDataAttributesInputKind = "number"
	UpdateFormFieldDataAttributesInputKindSelect      UpdateFormFieldDataAttributesInputKind = "select"
	UpdateFormFieldDataAttributesInputKindTags        UpdateFormFieldDataAttributesInputKind = "tags"
	UpdateFormFieldDataAttributesInputKindText        UpdateFormFieldDataAttributesInputKind = "text"
	UpdateFormFieldDataAttributesInputKindTextarea    UpdateFormFieldDataAttributesInputKind = "textarea"
	UpdateFormFieldDataAttributesInputKindUsers       UpdateFormFieldDataAttributesInputKind = "users"
)

// Defines values for UpdateFormFieldDataAttributesKind.
const (
	UpdateFormFieldDataAttributesKindAttachAlerts                UpdateFormFieldDataAttributesKind = "attach_alerts"
	UpdateFormFieldDataAttributesKindCauses                      UpdateFormFieldDataAttributesKind = "causes"
	UpdateFormFieldDataAttributesKindCustom                      UpdateFormFieldDataAttributesKind = "custom"
	UpdateFormFieldDataAttributesKindEnvironments                UpdateFormFieldDataAttributesKind = "environments"
	UpdateFormFieldDataAttributesKindFunctionalities             UpdateFormFieldDataAttributesKind = "functionalities"
	UpdateFormFieldDataAttributesKindLabels                      UpdateFormFieldDataAttributesKind = "labels"
	UpdateFormFieldDataAttributesKindManualStartingDatetimeField UpdateFormFieldDataAttributesKind = "manual_starting_datetime_field"
	UpdateFormFieldDataAttributesKindMarkAsBackfilled            UpdateFormFieldDataAttributesKind = "mark_as_backfilled"
	UpdateFormFieldDataAttributesKindMarkAsInTriage              UpdateFormFieldDataAttributesKind = "mark_as_in_triage"
	UpdateFormFieldDataAttributesKindMarkAsTest                  UpdateFormFieldDataAttributesKind = "mark_as_test"
	UpdateFormFieldDataAttributesKindNotifyEmails                UpdateFormFieldDataAttributesKind = "notify_emails"
	UpdateFormFieldDataAttributesKindServices                    UpdateFormFieldDataAttributesKind = "services"
	UpdateFormFieldDataAttributesKindSeverity                    UpdateFormFieldDataAttributesKind = "severity"
	UpdateFormFieldDataAttributesKindShowOngoingIncidents        UpdateFormFieldDataAttributesKind = "show_ongoing_incidents"
	UpdateFormFieldDataAttributesKindSummary                     UpdateFormFieldDataAttributesKind = "summary"
	UpdateFormFieldDataAttributesKindTeams                       UpdateFormFieldDataAttributesKind = "teams"
	UpdateFormFieldDataAttributesKindTitle                       UpdateFormFieldDataAttributesKind = "title"
	UpdateFormFieldDataAttributesKindTriggerManualWorkflows      UpdateFormFieldDataAttributesKind = "trigger_manual_workflows"
	UpdateFormFieldDataAttributesKindTypes                       UpdateFormFieldDataAttributesKind = "types"
	UpdateFormFieldDataAttributesKindVisibility                  UpdateFormFieldDataAttributesKind = "visibility"
)

// Defines values for UpdateFormFieldDataAttributesRequired.
const (
	UpdateFormFieldDataAttributesRequiredSlackIncidentCancellationForm    UpdateFormFieldDataAttributesRequired = "slack_incident_cancellation_form"
	UpdateFormFieldDataAttributesRequiredSlackIncidentMitigationForm      UpdateFormFieldDataAttributesRequired = "slack_incident_mitigation_form"
	UpdateFormFieldDataAttributesRequiredSlackIncidentResolutionForm      UpdateFormFieldDataAttributesRequired = "slack_incident_resolution_form"
	UpdateFormFieldDataAttributesRequiredSlackNewIncidentForm             UpdateFormFieldDataAttributesRequired = "slack_new_incident_form"
	UpdateFormFieldDataAttributesRequiredSlackScheduledIncidentForm       UpdateFormFieldDataAttributesRequired = "slack_scheduled_incident_form"
	UpdateFormFieldDataAttributesRequiredSlackUpdateIncidentForm          UpdateFormFieldDataAttributesRequired = "slack_update_incident_form"
	UpdateFormFieldDataAttributesRequiredSlackUpdateIncidentStatusForm    UpdateFormFieldDataAttributesRequired = "slack_update_incident_status_form"
	UpdateFormFieldDataAttributesRequiredSlackUpdateScheduledIncidentForm UpdateFormFieldDataAttributesRequired = "slack_update_scheduled_incident_form"
	UpdateFormFieldDataAttributesRequiredWebIncidentCancellationForm      UpdateFormFieldDataAttributesRequired = "web_incident_cancellation_form"
	UpdateFormFieldDataAttributesRequiredWebIncidentMitigationForm        UpdateFormFieldDataAttributesRequired = "web_incident_mitigation_form"
	UpdateFormFieldDataAttributesRequiredWebIncidentPostMortemForm        UpdateFormFieldDataAttributesRequired = "web_incident_post_mortem_form"
	UpdateFormFieldDataAttributesRequiredWebIncidentResolutionForm        UpdateFormFieldDataAttributesRequired = "web_incident_resolution_form"
	UpdateFormFieldDataAttributesRequiredWebNewIncidentForm               UpdateFormFieldDataAttributesRequired = "web_new_incident_form"
	UpdateFormFieldDataAttributesRequiredWebScheduledIncidentForm         UpdateFormFieldDataAttributesRequired = "web_scheduled_incident_form"
	UpdateFormFieldDataAttributesRequiredWebUpdateIncidentForm            UpdateFormFieldDataAttributesRequired = "web_update_incident_form"
	UpdateFormFieldDataAttributesRequiredWebUpdateScheduledIncidentForm   UpdateFormFieldDataAttributesRequired = "web_update_scheduled_incident_form"
)

// Defines values for UpdateFormFieldDataAttributesShown.
const (
	UpdateFormFieldDataAttributesShownIncidentPostMortem               UpdateFormFieldDataAttributesShown = "incident_post_mortem"
	UpdateFormFieldDataAttributesShownSlackIncidentCancellationForm    UpdateFormFieldDataAttributesShown = "slack_incident_cancellation_form"
	UpdateFormFieldDataAttributesShownSlackIncidentMitigationForm      UpdateFormFieldDataAttributesShown = "slack_incident_mitigation_form"
	UpdateFormFieldDataAttributesShownSlackIncidentResolutionForm      UpdateFormFieldDataAttributesShown = "slack_incident_resolution_form"
	UpdateFormFieldDataAttributesShownSlackNewIncidentForm             UpdateFormFieldDataAttributesShown = "slack_new_incident_form"
	UpdateFormFieldDataAttributesShownSlackScheduledIncidentForm       UpdateFormFieldDataAttributesShown = "slack_scheduled_incident_form"
	UpdateFormFieldDataAttributesShownSlackUpdateIncidentForm          UpdateFormFieldDataAttributesShown = "slack_update_incident_form"
	UpdateFormFieldDataAttributesShownSlackUpdateIncidentStatusForm    UpdateFormFieldDataAttributesShown = "slack_update_incident_status_form"
	UpdateFormFieldDataAttributesShownSlackUpdateScheduledIncidentForm UpdateFormFieldDataAttributesShown = "slack_update_scheduled_incident_form"
	UpdateFormFieldDataAttributesShownWebIncidentCancellationForm      UpdateFormFieldDataAttributesShown = "web_incident_cancellation_form"
	UpdateFormFieldDataAttributesShownWebIncidentMitigationForm        UpdateFormFieldDataAttributesShown = "web_incident_mitigation_form"
	UpdateFormFieldDataAttributesShownWebIncidentPostMortemForm        UpdateFormFieldDataAttributesShown = "web_incident_post_mortem_form"
	UpdateFormFieldDataAttributesShownWebIncidentResolutionForm        UpdateFormFieldDataAttributesShown = "web_incident_resolution_form"
	UpdateFormFieldDataAttributesShownWebNewIncidentForm               UpdateFormFieldDataAttributesShown = "web_new_incident_form"
	UpdateFormFieldDataAttributesShownWebScheduledIncidentForm         UpdateFormFieldDataAttributesShown = "web_scheduled_incident_form"
	UpdateFormFieldDataAttributesShownWebUpdateIncidentForm            UpdateFormFieldDataAttributesShown = "web_update_incident_form"
	UpdateFormFieldDataAttributesShownWebUpdateScheduledIncidentForm   UpdateFormFieldDataAttributesShown = "web_update_scheduled_incident_form"
)

// Defines values for UpdateFormFieldDataType.
const (
	UpdateFormFieldDataTypeFormFields UpdateFormFieldDataType = "form_fields"
)

// Defines values for UpdateFormFieldOptionDataType.
const (
	UpdateFormFieldOptionDataTypeFormFieldOptions UpdateFormFieldOptionDataType = "form_field_options"
)

// Defines values for UpdateFormFieldPositionDataAttributesForm.
const (
	UpdateFormFieldPositionDataAttributesFormIncidentPostMortem               UpdateFormFieldPositionDataAttributesForm = "incident_post_mortem"
	UpdateFormFieldPositionDataAttributesFormSlackIncidentCancellationForm    UpdateFormFieldPositionDataAttributesForm = "slack_incident_cancellation_form"
	UpdateFormFieldPositionDataAttributesFormSlackIncidentMitigationForm      UpdateFormFieldPositionDataAttributesForm = "slack_incident_mitigation_form"
	UpdateFormFieldPositionDataAttributesFormSlackIncidentResolutionForm      UpdateFormFieldPositionDataAttributesForm = "slack_incident_resolution_form"
	UpdateFormFieldPositionDataAttributesFormSlackNewIncidentForm             UpdateFormFieldPositionDataAttributesForm = "slack_new_incident_form"
	UpdateFormFieldPositionDataAttributesFormSlackScheduledIncidentForm       UpdateFormFieldPositionDataAttributesForm = "slack_scheduled_incident_form"
	UpdateFormFieldPositionDataAttributesFormSlackUpdateIncidentForm          UpdateFormFieldPositionDataAttributesForm = "slack_update_incident_form"
	UpdateFormFieldPositionDataAttributesFormSlackUpdateIncidentStatusForm    UpdateFormFieldPositionDataAttributesForm = "slack_update_incident_status_form"
	UpdateFormFieldPositionDataAttributesFormSlackUpdateScheduledIncidentForm UpdateFormFieldPositionDataAttributesForm = "slack_update_scheduled_incident_form"
	UpdateFormFieldPositionDataAttributesFormWebIncidentCancellationForm      UpdateFormFieldPositionDataAttributesForm = "web_incident_cancellation_form"
	UpdateFormFieldPositionDataAttributesFormWebIncidentMitigationForm        UpdateFormFieldPositionDataAttributesForm = "web_incident_mitigation_form"
	UpdateFormFieldPositionDataAttributesFormWebIncidentPostMortemForm        UpdateFormFieldPositionDataAttributesForm = "web_incident_post_mortem_form"
	UpdateFormFieldPositionDataAttributesFormWebIncidentResolutionForm        UpdateFormFieldPositionDataAttributesForm = "web_incident_resolution_form"
	UpdateFormFieldPositionDataAttributesFormWebNewIncidentForm               UpdateFormFieldPositionDataAttributesForm = "web_new_incident_form"
	UpdateFormFieldPositionDataAttributesFormWebScheduledIncidentForm         UpdateFormFieldPositionDataAttributesForm = "web_scheduled_incident_form"
	UpdateFormFieldPositionDataAttributesFormWebUpdateIncidentForm            UpdateFormFieldPositionDataAttributesForm = "web_update_incident_form"
	UpdateFormFieldPositionDataAttributesFormWebUpdateScheduledIncidentForm   UpdateFormFieldPositionDataAttributesForm = "web_update_scheduled_incident_form"
)

// Defines values for UpdateFormFieldPositionDataType.
const (
	UpdateFormFieldPositionDataTypeFormFieldPositions UpdateFormFieldPositionDataType = "form_field_positions"
)

// Defines values for UpdateFunctionalityDataAttributesStatus.
const (
	UpdateFunctionalityDataAttributesStatusImpacted      UpdateFunctionalityDataAttributesStatus = "impacted"
	UpdateFunctionalityDataAttributesStatusMajorOutage   UpdateFunctionalityDataAttributesStatus = "major_outage"
	UpdateFunctionalityDataAttributesStatusOperational   UpdateFunctionalityDataAttributesStatus = "operational"
	UpdateFunctionalityDataAttributesStatusOutage        UpdateFunctionalityDataAttributesStatus = "outage"
	UpdateFunctionalityDataAttributesStatusPartialOutage UpdateFunctionalityDataAttributesStatus = "partial_outage"
)

// Defines values for UpdateFunctionalityDataType.
const (
	Functionalities UpdateFunctionalityDataType = "functionalities"
)

// Defines values for UpdateGithubIssueTaskParamsTaskType.
const (
	UpdateGithubIssue UpdateGithubIssueTaskParamsTaskType = "update_github_issue"
)

// Defines values for UpdateGoogleCalendarEventTaskParamsConferenceSolutionKey.
const (
	AddOn             UpdateGoogleCalendarEventTaskParamsConferenceSolutionKey = "addOn"
	EventHangout      UpdateGoogleCalendarEventTaskParamsConferenceSolutionKey = "eventHangout"
	EventNamedHangout UpdateGoogleCalendarEventTaskParamsConferenceSolutionKey = "eventNamedHangout"
	HangoutsMeet      UpdateGoogleCalendarEventTaskParamsConferenceSolutionKey = "hangoutsMeet"
)

// Defines values for UpdateGoogleCalendarEventTaskParamsTaskType.
const (
	UpdateGoogleCalendarEventTaskParamsTaskTypeCreateGoogleCalendarEvent UpdateGoogleCalendarEventTaskParamsTaskType = "create_google_calendar_event"
)

// Defines values for UpdateGoogleDocsPageTaskParamsTaskType.
const (
	UpdateGoogleDocsPage UpdateGoogleDocsPageTaskParamsTaskType = "update_google_docs_page"
)

// Defines values for UpdateIncidentDataAttributesKind.
const (
	UpdateIncidentDataAttributesKindBackfilled UpdateIncidentDataAttributesKind = "backfilled"
	UpdateIncidentDataAttributesKindExample    UpdateIncidentDataAttributesKind = "example"
	UpdateIncidentDataAttributesKindExampleSub UpdateIncidentDataAttributesKind = "example_sub"
	UpdateIncidentDataAttributesKindNormal     UpdateIncidentDataAttributesKind = "normal"
	UpdateIncidentDataAttributesKindNormalSub  UpdateIncidentDataAttributesKind = "normal_sub"
	UpdateIncidentDataAttributesKindScheduled  UpdateIncidentDataAttributesKind = "scheduled"
	UpdateIncidentDataAttributesKindTest       UpdateIncidentDataAttributesKind = "test"
	UpdateIncidentDataAttributesKindTestSub    UpdateIncidentDataAttributesKind = "test_sub"
)

// Defines values for UpdateIncidentDataType.
const (
	Incidents UpdateIncidentDataType = "incidents"
)

// Defines values for UpdateIncidentActionItemDataAttributesKind.
const (
	FollowUp UpdateIncidentActionItemDataAttributesKind = "follow_up"
	Task     UpdateIncidentActionItemDataAttributesKind = "task"
)

// Defines values for UpdateIncidentActionItemDataAttributesPriority.
const (
	UpdateIncidentActionItemDataAttributesPriorityHigh   UpdateIncidentActionItemDataAttributesPriority = "high"
	UpdateIncidentActionItemDataAttributesPriorityLow    UpdateIncidentActionItemDataAttributesPriority = "low"
	UpdateIncidentActionItemDataAttributesPriorityMedium UpdateIncidentActionItemDataAttributesPriority = "medium"
)

// Defines values for UpdateIncidentActionItemDataAttributesStatus.
const (
	UpdateIncidentActionItemDataAttributesStatusCancelled  UpdateIncidentActionItemDataAttributesStatus = "cancelled"
	UpdateIncidentActionItemDataAttributesStatusDone       UpdateIncidentActionItemDataAttributesStatus = "done"
	UpdateIncidentActionItemDataAttributesStatusInProgress UpdateIncidentActionItemDataAttributesStatus = "in_progress"
	UpdateIncidentActionItemDataAttributesStatusOpen       UpdateIncidentActionItemDataAttributesStatus = "open"
)

// Defines values for UpdateIncidentActionItemDataType.
const (
	UpdateIncidentActionItemDataTypeIncidentActionItems UpdateIncidentActionItemDataType = "incident_action_items"
)

// Defines values for UpdateIncidentCustomFieldSelectionDataType.
const (
	UpdateIncidentCustomFieldSelectionDataTypeIncidentCustomFieldSelections UpdateIncidentCustomFieldSelectionDataType = "incident_custom_field_selections"
)

// Defines values for UpdateIncidentEventDataAttributesVisibility.
const (
	External UpdateIncidentEventDataAttributesVisibility = "external"
	Internal UpdateIncidentEventDataAttributesVisibility = "internal"
)

// Defines values for UpdateIncidentEventDataType.
const (
	UpdateIncidentEventDataTypeIncidentEvents UpdateIncidentEventDataType = "incident_events"
)

// Defines values for UpdateIncidentEventFunctionalityDataAttributesStatus.
const (
	UpdateIncidentEventFunctionalityDataAttributesStatusMajorOutage   UpdateIncidentEventFunctionalityDataAttributesStatus = "major_outage"
	UpdateIncidentEventFunctionalityDataAttributesStatusOperational   UpdateIncidentEventFunctionalityDataAttributesStatus = "operational"
	UpdateIncidentEventFunctionalityDataAttributesStatusPartialOutage UpdateIncidentEventFunctionalityDataAttributesStatus = "partial_outage"
)

// Defines values for UpdateIncidentEventFunctionalityDataType.
const (
	UpdateIncidentEventFunctionalityDataTypeIncidentEventFunctionalities UpdateIncidentEventFunctionalityDataType = "incident_event_functionalities"
)

// Defines values for UpdateIncidentEventServiceDataAttributesStatus.
const (
	UpdateIncidentEventServiceDataAttributesStatusMajorOutage   UpdateIncidentEventServiceDataAttributesStatus = "major_outage"
	UpdateIncidentEventServiceDataAttributesStatusOperational   UpdateIncidentEventServiceDataAttributesStatus = "operational"
	UpdateIncidentEventServiceDataAttributesStatusPartialOutage UpdateIncidentEventServiceDataAttributesStatus = "partial_outage"
)

// Defines values for UpdateIncidentEventServiceDataType.
const (
	UpdateIncidentEventServiceDataTypeIncidentEventServices UpdateIncidentEventServiceDataType = "incident_event_services"
)

// Defines values for UpdateIncidentFeedbackDataAttributesRating.
const (
	N0 UpdateIncidentFeedbackDataAttributesRating = 0
	N1 UpdateIncidentFeedbackDataAttributesRating = 1
	N2 UpdateIncidentFeedbackDataAttributesRating = 2
	N3 UpdateIncidentFeedbackDataAttributesRating = 3
	N4 UpdateIncidentFeedbackDataAttributesRating = 4
)

// Defines values for UpdateIncidentFeedbackDataType.
const (
	UpdateIncidentFeedbackDataTypeIncidentFeedbacks UpdateIncidentFeedbackDataType = "incident_feedbacks"
)

// Defines values for UpdateIncidentFormFieldSelectionDataType.
const (
	UpdateIncidentFormFieldSelectionDataTypeIncidentFormFieldSelections UpdateIncidentFormFieldSelectionDataType = "incident_form_field_selections"
)

// Defines values for UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissions.
const (
	UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissionsCreate UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissions = "create"
	UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissionsDelete UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissions = "delete"
	UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissionsRead   UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissions = "read"
	UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissionsUpdate UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissions = "update"
)

// Defines values for UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissions.
const (
	UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissionsCreate UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissions = "create"
	UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissionsDelete UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissions = "delete"
	UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissionsRead   UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissions = "read"
	UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissionsUpdate UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissions = "update"
)

// Defines values for UpdateIncidentPermissionSetDataType.
const (
	UpdateIncidentPermissionSetDataTypeIncidentPermissionSets UpdateIncidentPermissionSetDataType = "incident_permission_sets"
)

// Defines values for UpdateIncidentPermissionSetBooleanDataAttributesKind.
const (
	UpdateIncidentPermissionSetBooleanDataAttributesKindAssignIncidentRoles UpdateIncidentPermissionSetBooleanDataAttributesKind = "assign_incident_roles"
	UpdateIncidentPermissionSetBooleanDataAttributesKindInviteSubscribers   UpdateIncidentPermissionSetBooleanDataAttributesKind = "invite_subscribers"
	UpdateIncidentPermissionSetBooleanDataAttributesKindModifyCustomFields  UpdateIncidentPermissionSetBooleanDataAttributesKind = "modify_custom_fields"
	UpdateIncidentPermissionSetBooleanDataAttributesKindPublishToStatusPage UpdateIncidentPermissionSetBooleanDataAttributesKind = "publish_to_status_page"
	UpdateIncidentPermissionSetBooleanDataAttributesKindTriggerWorkflows    UpdateIncidentPermissionSetBooleanDataAttributesKind = "trigger_workflows"
	UpdateIncidentPermissionSetBooleanDataAttributesKindUpdateSummary       UpdateIncidentPermissionSetBooleanDataAttributesKind = "update_summary"
	UpdateIncidentPermissionSetBooleanDataAttributesKindUpdateTimeline      UpdateIncidentPermissionSetBooleanDataAttributesKind = "update_timeline"
)

// Defines values for UpdateIncidentPermissionSetBooleanDataType.
const (
	UpdateIncidentPermissionSetBooleanDataTypeIncidentPermissionSetBooleans UpdateIncidentPermissionSetBooleanDataType = "incident_permission_set_booleans"
)

// Defines values for UpdateIncidentPermissionSetResourceDataAttributesKind.
const (
	UpdateIncidentPermissionSetResourceDataAttributesKindIncidentTypes UpdateIncidentPermissionSetResourceDataAttributesKind = "incident_types"
	UpdateIncidentPermissionSetResourceDataAttributesKindSeverities    UpdateIncidentPermissionSetResourceDataAttributesKind = "severities"
	UpdateIncidentPermissionSetResourceDataAttributesKindStatuses      UpdateIncidentPermissionSetResourceDataAttributesKind = "statuses"
)

// Defines values for UpdateIncidentPermissionSetResourceDataType.
const (
	UpdateIncidentPermissionSetResourceDataTypeIncidentPermissionSetResources UpdateIncidentPermissionSetResourceDataType = "incident_permission_set_resources"
)

// Defines values for UpdateIncidentPostMortemDataAttributesStatus.
const (
	UpdateIncidentPostMortemDataAttributesStatusDraft     UpdateIncidentPostMortemDataAttributesStatus = "draft"
	UpdateIncidentPostMortemDataAttributesStatusPublished UpdateIncidentPostMortemDataAttributesStatus = "published"
)

// Defines values for UpdateIncidentPostMortemDataType.
const (
	IncidentPostMortems UpdateIncidentPostMortemDataType = "incident_post_mortems"
)

// Defines values for UpdateIncidentPostmortemTaskParamsTaskType.
const (
	UpdateIncidentPostmortem UpdateIncidentPostmortemTaskParamsTaskType = "update_incident_postmortem"
)

// Defines values for UpdateIncidentRoleDataType.
const (
	UpdateIncidentRoleDataTypeIncidentRoles UpdateIncidentRoleDataType = "incident_roles"
)

// Defines values for UpdateIncidentRoleTaskDataAttributesPriority.
const (
	UpdateIncidentRoleTaskDataAttributesPriorityHigh   UpdateIncidentRoleTaskDataAttributesPriority = "high"
	UpdateIncidentRoleTaskDataAttributesPriorityLow    UpdateIncidentRoleTaskDataAttributesPriority = "low"
	UpdateIncidentRoleTaskDataAttributesPriorityMedium UpdateIncidentRoleTaskDataAttributesPriority = "medium"
)

// Defines values for UpdateIncidentRoleTaskDataType.
const (
	UpdateIncidentRoleTaskDataTypeIncidentRoleTasks UpdateIncidentRoleTaskDataType = "incident_role_tasks"
)

// Defines values for UpdateIncidentStatusPageEventDataAttributesStatus.
const (
	UpdateIncidentStatusPageEventDataAttributesStatusCompleted     UpdateIncidentStatusPageEventDataAttributesStatus = "completed"
	UpdateIncidentStatusPageEventDataAttributesStatusIdentified    UpdateIncidentStatusPageEventDataAttributesStatus = "identified"
	UpdateIncidentStatusPageEventDataAttributesStatusInProgress    UpdateIncidentStatusPageEventDataAttributesStatus = "in_progress"
	UpdateIncidentStatusPageEventDataAttributesStatusInvestigating UpdateIncidentStatusPageEventDataAttributesStatus = "investigating"
	UpdateIncidentStatusPageEventDataAttributesStatusMonitoring    UpdateIncidentStatusPageEventDataAttributesStatus = "monitoring"
	UpdateIncidentStatusPageEventDataAttributesStatusResolved      UpdateIncidentStatusPageEventDataAttributesStatus = "resolved"
	UpdateIncidentStatusPageEventDataAttributesStatusScheduled     UpdateIncidentStatusPageEventDataAttributesStatus = "scheduled"
	UpdateIncidentStatusPageEventDataAttributesStatusVerifying     UpdateIncidentStatusPageEventDataAttributesStatus = "verifying"
)

// Defines values for UpdateIncidentStatusPageEventDataType.
const (
	UpdateIncidentStatusPageEventDataTypeIncidentStatusPageEvents UpdateIncidentStatusPageEventDataType = "incident_status_page_events"
)

// Defines values for UpdateIncidentTaskParamsAttributeToQueryBy.
const (
	UpdateIncidentTaskParamsAttributeToQueryByAirtableRecordId     UpdateIncidentTaskParamsAttributeToQueryBy = "airtable_record_id"
	UpdateIncidentTaskParamsAttributeToQueryByAsanaTaskId          UpdateIncidentTaskParamsAttributeToQueryBy = "asana_task_id"
	UpdateIncidentTaskParamsAttributeToQueryByClickupTaskId        UpdateIncidentTaskParamsAttributeToQueryBy = "clickup_task_id"
	UpdateIncidentTaskParamsAttributeToQueryByFreshserviceTaskId   UpdateIncidentTaskParamsAttributeToQueryBy = "freshservice_task_id"
	UpdateIncidentTaskParamsAttributeToQueryByFreshserviceTicketId UpdateIncidentTaskParamsAttributeToQueryBy = "freshservice_ticket_id"
	UpdateIncidentTaskParamsAttributeToQueryByGithubIssueId        UpdateIncidentTaskParamsAttributeToQueryBy = "github_issue_id"
	UpdateIncidentTaskParamsAttributeToQueryById                   UpdateIncidentTaskParamsAttributeToQueryBy = "id"
	UpdateIncidentTaskParamsAttributeToQueryByJiraIssueId          UpdateIncidentTaskParamsAttributeToQueryBy = "jira_issue_id"
	UpdateIncidentTaskParamsAttributeToQueryByLinearIssueId        UpdateIncidentTaskParamsAttributeToQueryBy = "linear_issue_id"
	UpdateIncidentTaskParamsAttributeToQueryByOpsgenieIncidentId   UpdateIncidentTaskParamsAttributeToQueryBy = "opsgenie_incident_id"
	UpdateIncidentTaskParamsAttributeToQueryByPagerdutyIncidentId  UpdateIncidentTaskParamsAttributeToQueryBy = "pagerduty_incident_id"
	UpdateIncidentTaskParamsAttributeToQueryBySequentialId         UpdateIncidentTaskParamsAttributeToQueryBy = "sequential_id"
	UpdateIncidentTaskParamsAttributeToQueryByShortcutStoryId      UpdateIncidentTaskParamsAttributeToQueryBy = "shortcut_story_id"
	UpdateIncidentTaskParamsAttributeToQueryByShortcutTaskId       UpdateIncidentTaskParamsAttributeToQueryBy = "shortcut_task_id"
	UpdateIncidentTaskParamsAttributeToQueryBySlug                 UpdateIncidentTaskParamsAttributeToQueryBy = "slug"
	UpdateIncidentTaskParamsAttributeToQueryByTrelloCardId         UpdateIncidentTaskParamsAttributeToQueryBy = "trello_card_id"
	UpdateIncidentTaskParamsAttributeToQueryByVictorOpsIncidentId  UpdateIncidentTaskParamsAttributeToQueryBy = "victor_ops_incident_id"
	UpdateIncidentTaskParamsAttributeToQueryByZendeskTicketId      UpdateIncidentTaskParamsAttributeToQueryBy = "zendesk_ticket_id"
)

// Defines values for UpdateIncidentTaskParamsTaskType.
const (
	UpdateIncidentTaskParamsTaskTypeUpdateIncident UpdateIncidentTaskParamsTaskType = "update_incident"
)

// Defines values for UpdateIncidentTypeDataType.
const (
	IncidentTypes UpdateIncidentTypeDataType = "incident_types"
)

// Defines values for UpdateJiraIssueTaskParamsTaskType.
const (
	UpdateJiraIssue UpdateJiraIssueTaskParamsTaskType = "update_jira_issue"
)

// Defines values for UpdateLinearIssueTaskParamsTaskType.
const (
	UpdateLinearIssue UpdateLinearIssueTaskParamsTaskType = "update_linear_issue"
)

// Defines values for UpdateNotionPageTaskParamsTaskType.
const (
	UpdateNotionPage UpdateNotionPageTaskParamsTaskType = "update_notion_page"
)

// Defines values for UpdateOpsgenieAlertTaskParamsPriority.
const (
	UpdateOpsgenieAlertTaskParamsPriorityAuto UpdateOpsgenieAlertTaskParamsPriority = "auto"
	UpdateOpsgenieAlertTaskParamsPriorityP1   UpdateOpsgenieAlertTaskParamsPriority = "P1"
	UpdateOpsgenieAlertTaskParamsPriorityP2   UpdateOpsgenieAlertTaskParamsPriority = "P2"
	UpdateOpsgenieAlertTaskParamsPriorityP3   UpdateOpsgenieAlertTaskParamsPriority = "P3"
	UpdateOpsgenieAlertTaskParamsPriorityP4   UpdateOpsgenieAlertTaskParamsPriority = "P4"
	UpdateOpsgenieAlertTaskParamsPriorityP5   UpdateOpsgenieAlertTaskParamsPriority = "P5"
)

// Defines values for UpdateOpsgenieAlertTaskParamsTaskType.
const (
	UpdateOpsgenieAlert UpdateOpsgenieAlertTaskParamsTaskType = "update_opsgenie_alert"
)

// Defines values for UpdateOpsgenieIncidentTaskParamsPriority.
const (
	UpdateOpsgenieIncidentTaskParamsPriorityAuto UpdateOpsgenieIncidentTaskParamsPriority = "auto"
	UpdateOpsgenieIncidentTaskParamsPriorityP1   UpdateOpsgenieIncidentTaskParamsPriority = "P1"
	UpdateOpsgenieIncidentTaskParamsPriorityP2   UpdateOpsgenieIncidentTaskParamsPriority = "P2"
	UpdateOpsgenieIncidentTaskParamsPriorityP3   UpdateOpsgenieIncidentTaskParamsPriority = "P3"
	UpdateOpsgenieIncidentTaskParamsPriorityP4   UpdateOpsgenieIncidentTaskParamsPriority = "P4"
	UpdateOpsgenieIncidentTaskParamsPriorityP5   UpdateOpsgenieIncidentTaskParamsPriority = "P5"
)

// Defines values for UpdateOpsgenieIncidentTaskParamsStatus.
const (
	UpdateOpsgenieIncidentTaskParamsStatusAuto    UpdateOpsgenieIncidentTaskParamsStatus = "auto"
	UpdateOpsgenieIncidentTaskParamsStatusClose   UpdateOpsgenieIncidentTaskParamsStatus = "close"
	UpdateOpsgenieIncidentTaskParamsStatusOpen    UpdateOpsgenieIncidentTaskParamsStatus = "open"
	UpdateOpsgenieIncidentTaskParamsStatusResolve UpdateOpsgenieIncidentTaskParamsStatus = "resolve"
)

// Defines values for UpdateOpsgenieIncidentTaskParamsTaskType.
const (
	UpdateOpsgenieIncident UpdateOpsgenieIncidentTaskParamsTaskType = "update_opsgenie_incident"
)

// Defines values for UpdatePagerdutyIncidentTaskParamsStatus.
const (
	UpdatePagerdutyIncidentTaskParamsStatusAcknowledged UpdatePagerdutyIncidentTaskParamsStatus = "acknowledged"
	UpdatePagerdutyIncidentTaskParamsStatusAuto         UpdatePagerdutyIncidentTaskParamsStatus = "auto"
	UpdatePagerdutyIncidentTaskParamsStatusResolved     UpdatePagerdutyIncidentTaskParamsStatus = "resolved"
)

// Defines values for UpdatePagerdutyIncidentTaskParamsTaskType.
const (
	UpdatePagerdutyIncident UpdatePagerdutyIncidentTaskParamsTaskType = "update_pagerduty_incident"
)

// Defines values for UpdatePagerdutyIncidentTaskParamsUrgency.
const (
	UpdatePagerdutyIncidentTaskParamsUrgencyAuto UpdatePagerdutyIncidentTaskParamsUrgency = "auto"
	UpdatePagerdutyIncidentTaskParamsUrgencyHigh UpdatePagerdutyIncidentTaskParamsUrgency = "high"
	UpdatePagerdutyIncidentTaskParamsUrgencyLow  UpdatePagerdutyIncidentTaskParamsUrgency = "low"
)

// Defines values for UpdatePagertreeAlertTaskParamsSeverity.
const (
	UpdatePagertreeAlertTaskParamsSeverityAuto UpdatePagertreeAlertTaskParamsSeverity = "auto"
	UpdatePagertreeAlertTaskParamsSeveritySEV1 UpdatePagertreeAlertTaskParamsSeverity = "SEV-1"
	UpdatePagertreeAlertTaskParamsSeveritySEV2 UpdatePagertreeAlertTaskParamsSeverity = "SEV-2"
	UpdatePagertreeAlertTaskParamsSeveritySEV3 UpdatePagertreeAlertTaskParamsSeverity = "SEV-3"
	UpdatePagertreeAlertTaskParamsSeveritySEV4 UpdatePagertreeAlertTaskParamsSeverity = "SEV-4"
)

// Defines values for UpdatePagertreeAlertTaskParamsTaskType.
const (
	UpdatePagertreeAlert UpdatePagertreeAlertTaskParamsTaskType = "update_pagertree_alert"
)

// Defines values for UpdatePagertreeAlertTaskParamsUrgency.
const (
	UpdatePagertreeAlertTaskParamsUrgencyAuto     UpdatePagertreeAlertTaskParamsUrgency = "auto"
	UpdatePagertreeAlertTaskParamsUrgencyCritical UpdatePagertreeAlertTaskParamsUrgency = "critical"
	UpdatePagertreeAlertTaskParamsUrgencyHigh     UpdatePagertreeAlertTaskParamsUrgency = "high"
	UpdatePagertreeAlertTaskParamsUrgencyLow      UpdatePagertreeAlertTaskParamsUrgency = "low"
	UpdatePagertreeAlertTaskParamsUrgencyMedium   UpdatePagertreeAlertTaskParamsUrgency = "medium"
)

// Defines values for UpdatePlaybookDataType.
const (
	UpdatePlaybookDataTypePlaybooks UpdatePlaybookDataType = "playbooks"
)

// Defines values for UpdatePlaybookTaskDataType.
const (
	UpdatePlaybookTaskDataTypePlaybookTasks UpdatePlaybookTaskDataType = "playbook_tasks"
)

// Defines values for UpdatePostMortemTemplateDataAttributesFormat.
const (
	Html     UpdatePostMortemTemplateDataAttributesFormat = "html"
	Markdown UpdatePostMortemTemplateDataAttributesFormat = "markdown"
)

// Defines values for UpdatePostMortemTemplateDataType.
const (
	UpdatePostMortemTemplateDataTypePostMortemTemplates UpdatePostMortemTemplateDataType = "post_mortem_templates"
)

// Defines values for UpdatePulseDataType.
const (
	UpdatePulseDataTypePulses UpdatePulseDataType = "pulses"
)

// Defines values for UpdateRetrospectiveStepDataType.
const (
	UpdateRetrospectiveStepDataTypeRetrospectiveSteps UpdateRetrospectiveStepDataType = "retrospective_steps"
)

// Defines values for UpdateRoleDataAttributesApiKeysPermissions.
const (
	UpdateRoleDataAttributesApiKeysPermissionsCreate UpdateRoleDataAttributesApiKeysPermissions = "create"
	UpdateRoleDataAttributesApiKeysPermissionsDelete UpdateRoleDataAttributesApiKeysPermissions = "delete"
	UpdateRoleDataAttributesApiKeysPermissionsRead   UpdateRoleDataAttributesApiKeysPermissions = "read"
	UpdateRoleDataAttributesApiKeysPermissionsUpdate UpdateRoleDataAttributesApiKeysPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesAuditsPermissions.
const (
	UpdateRoleDataAttributesAuditsPermissionsCreate UpdateRoleDataAttributesAuditsPermissions = "create"
	UpdateRoleDataAttributesAuditsPermissionsDelete UpdateRoleDataAttributesAuditsPermissions = "delete"
	UpdateRoleDataAttributesAuditsPermissionsRead   UpdateRoleDataAttributesAuditsPermissions = "read"
	UpdateRoleDataAttributesAuditsPermissionsUpdate UpdateRoleDataAttributesAuditsPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesBillingPermissions.
const (
	UpdateRoleDataAttributesBillingPermissionsCreate UpdateRoleDataAttributesBillingPermissions = "create"
	UpdateRoleDataAttributesBillingPermissionsDelete UpdateRoleDataAttributesBillingPermissions = "delete"
	UpdateRoleDataAttributesBillingPermissionsRead   UpdateRoleDataAttributesBillingPermissions = "read"
	UpdateRoleDataAttributesBillingPermissionsUpdate UpdateRoleDataAttributesBillingPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesEnvironmentsPermissions.
const (
	UpdateRoleDataAttributesEnvironmentsPermissionsCreate UpdateRoleDataAttributesEnvironmentsPermissions = "create"
	UpdateRoleDataAttributesEnvironmentsPermissionsDelete UpdateRoleDataAttributesEnvironmentsPermissions = "delete"
	UpdateRoleDataAttributesEnvironmentsPermissionsRead   UpdateRoleDataAttributesEnvironmentsPermissions = "read"
	UpdateRoleDataAttributesEnvironmentsPermissionsUpdate UpdateRoleDataAttributesEnvironmentsPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesFormFieldsPermissions.
const (
	UpdateRoleDataAttributesFormFieldsPermissionsCreate UpdateRoleDataAttributesFormFieldsPermissions = "create"
	UpdateRoleDataAttributesFormFieldsPermissionsDelete UpdateRoleDataAttributesFormFieldsPermissions = "delete"
	UpdateRoleDataAttributesFormFieldsPermissionsRead   UpdateRoleDataAttributesFormFieldsPermissions = "read"
	UpdateRoleDataAttributesFormFieldsPermissionsUpdate UpdateRoleDataAttributesFormFieldsPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesFunctionalitiesPermissions.
const (
	UpdateRoleDataAttributesFunctionalitiesPermissionsCreate UpdateRoleDataAttributesFunctionalitiesPermissions = "create"
	UpdateRoleDataAttributesFunctionalitiesPermissionsDelete UpdateRoleDataAttributesFunctionalitiesPermissions = "delete"
	UpdateRoleDataAttributesFunctionalitiesPermissionsRead   UpdateRoleDataAttributesFunctionalitiesPermissions = "read"
	UpdateRoleDataAttributesFunctionalitiesPermissionsUpdate UpdateRoleDataAttributesFunctionalitiesPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesGroupsPermissions.
const (
	UpdateRoleDataAttributesGroupsPermissionsCreate UpdateRoleDataAttributesGroupsPermissions = "create"
	UpdateRoleDataAttributesGroupsPermissionsDelete UpdateRoleDataAttributesGroupsPermissions = "delete"
	UpdateRoleDataAttributesGroupsPermissionsRead   UpdateRoleDataAttributesGroupsPermissions = "read"
	UpdateRoleDataAttributesGroupsPermissionsUpdate UpdateRoleDataAttributesGroupsPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesIncidentCausesPermissions.
const (
	UpdateRoleDataAttributesIncidentCausesPermissionsCreate UpdateRoleDataAttributesIncidentCausesPermissions = "create"
	UpdateRoleDataAttributesIncidentCausesPermissionsDelete UpdateRoleDataAttributesIncidentCausesPermissions = "delete"
	UpdateRoleDataAttributesIncidentCausesPermissionsRead   UpdateRoleDataAttributesIncidentCausesPermissions = "read"
	UpdateRoleDataAttributesIncidentCausesPermissionsUpdate UpdateRoleDataAttributesIncidentCausesPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesIncidentFeedbacksPermissions.
const (
	UpdateRoleDataAttributesIncidentFeedbacksPermissionsCreate UpdateRoleDataAttributesIncidentFeedbacksPermissions = "create"
	UpdateRoleDataAttributesIncidentFeedbacksPermissionsDelete UpdateRoleDataAttributesIncidentFeedbacksPermissions = "delete"
	UpdateRoleDataAttributesIncidentFeedbacksPermissionsRead   UpdateRoleDataAttributesIncidentFeedbacksPermissions = "read"
	UpdateRoleDataAttributesIncidentFeedbacksPermissionsUpdate UpdateRoleDataAttributesIncidentFeedbacksPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesIncidentPostMortemsPermissions.
const (
	UpdateRoleDataAttributesIncidentPostMortemsPermissionsCreate UpdateRoleDataAttributesIncidentPostMortemsPermissions = "create"
	UpdateRoleDataAttributesIncidentPostMortemsPermissionsDelete UpdateRoleDataAttributesIncidentPostMortemsPermissions = "delete"
	UpdateRoleDataAttributesIncidentPostMortemsPermissionsRead   UpdateRoleDataAttributesIncidentPostMortemsPermissions = "read"
	UpdateRoleDataAttributesIncidentPostMortemsPermissionsUpdate UpdateRoleDataAttributesIncidentPostMortemsPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesIncidentRolesPermissions.
const (
	UpdateRoleDataAttributesIncidentRolesPermissionsCreate UpdateRoleDataAttributesIncidentRolesPermissions = "create"
	UpdateRoleDataAttributesIncidentRolesPermissionsDelete UpdateRoleDataAttributesIncidentRolesPermissions = "delete"
	UpdateRoleDataAttributesIncidentRolesPermissionsRead   UpdateRoleDataAttributesIncidentRolesPermissions = "read"
	UpdateRoleDataAttributesIncidentRolesPermissionsUpdate UpdateRoleDataAttributesIncidentRolesPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesIncidentTypesPermissions.
const (
	UpdateRoleDataAttributesIncidentTypesPermissionsCreate UpdateRoleDataAttributesIncidentTypesPermissions = "create"
	UpdateRoleDataAttributesIncidentTypesPermissionsDelete UpdateRoleDataAttributesIncidentTypesPermissions = "delete"
	UpdateRoleDataAttributesIncidentTypesPermissionsRead   UpdateRoleDataAttributesIncidentTypesPermissions = "read"
	UpdateRoleDataAttributesIncidentTypesPermissionsUpdate UpdateRoleDataAttributesIncidentTypesPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesIncidentsPermissions.
const (
	UpdateRoleDataAttributesIncidentsPermissionsCreate UpdateRoleDataAttributesIncidentsPermissions = "create"
	UpdateRoleDataAttributesIncidentsPermissionsDelete UpdateRoleDataAttributesIncidentsPermissions = "delete"
	UpdateRoleDataAttributesIncidentsPermissionsRead   UpdateRoleDataAttributesIncidentsPermissions = "read"
	UpdateRoleDataAttributesIncidentsPermissionsUpdate UpdateRoleDataAttributesIncidentsPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesInvitationsPermissions.
const (
	UpdateRoleDataAttributesInvitationsPermissionsCreate UpdateRoleDataAttributesInvitationsPermissions = "create"
	UpdateRoleDataAttributesInvitationsPermissionsDelete UpdateRoleDataAttributesInvitationsPermissions = "delete"
	UpdateRoleDataAttributesInvitationsPermissionsRead   UpdateRoleDataAttributesInvitationsPermissions = "read"
	UpdateRoleDataAttributesInvitationsPermissionsUpdate UpdateRoleDataAttributesInvitationsPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesPlaybooksPermissions.
const (
	UpdateRoleDataAttributesPlaybooksPermissionsCreate UpdateRoleDataAttributesPlaybooksPermissions = "create"
	UpdateRoleDataAttributesPlaybooksPermissionsDelete UpdateRoleDataAttributesPlaybooksPermissions = "delete"
	UpdateRoleDataAttributesPlaybooksPermissionsRead   UpdateRoleDataAttributesPlaybooksPermissions = "read"
	UpdateRoleDataAttributesPlaybooksPermissionsUpdate UpdateRoleDataAttributesPlaybooksPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesPrivateIncidentsPermissions.
const (
	UpdateRoleDataAttributesPrivateIncidentsPermissionsCreate UpdateRoleDataAttributesPrivateIncidentsPermissions = "create"
	UpdateRoleDataAttributesPrivateIncidentsPermissionsDelete UpdateRoleDataAttributesPrivateIncidentsPermissions = "delete"
	UpdateRoleDataAttributesPrivateIncidentsPermissionsRead   UpdateRoleDataAttributesPrivateIncidentsPermissions = "read"
	UpdateRoleDataAttributesPrivateIncidentsPermissionsUpdate UpdateRoleDataAttributesPrivateIncidentsPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesRetrospectivePermissions.
const (
	UpdateRoleDataAttributesRetrospectivePermissionsCreate UpdateRoleDataAttributesRetrospectivePermissions = "create"
	UpdateRoleDataAttributesRetrospectivePermissionsDelete UpdateRoleDataAttributesRetrospectivePermissions = "delete"
	UpdateRoleDataAttributesRetrospectivePermissionsRead   UpdateRoleDataAttributesRetrospectivePermissions = "read"
	UpdateRoleDataAttributesRetrospectivePermissionsUpdate UpdateRoleDataAttributesRetrospectivePermissions = "update"
)

// Defines values for UpdateRoleDataAttributesRolesPermissions.
const (
	UpdateRoleDataAttributesRolesPermissionsCreate UpdateRoleDataAttributesRolesPermissions = "create"
	UpdateRoleDataAttributesRolesPermissionsDelete UpdateRoleDataAttributesRolesPermissions = "delete"
	UpdateRoleDataAttributesRolesPermissionsRead   UpdateRoleDataAttributesRolesPermissions = "read"
	UpdateRoleDataAttributesRolesPermissionsUpdate UpdateRoleDataAttributesRolesPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesSecretsPermissions.
const (
	UpdateRoleDataAttributesSecretsPermissionsCreate UpdateRoleDataAttributesSecretsPermissions = "create"
	UpdateRoleDataAttributesSecretsPermissionsDelete UpdateRoleDataAttributesSecretsPermissions = "delete"
	UpdateRoleDataAttributesSecretsPermissionsRead   UpdateRoleDataAttributesSecretsPermissions = "read"
	UpdateRoleDataAttributesSecretsPermissionsUpdate UpdateRoleDataAttributesSecretsPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesServicesPermissions.
const (
	UpdateRoleDataAttributesServicesPermissionsCreate UpdateRoleDataAttributesServicesPermissions = "create"
	UpdateRoleDataAttributesServicesPermissionsDelete UpdateRoleDataAttributesServicesPermissions = "delete"
	UpdateRoleDataAttributesServicesPermissionsRead   UpdateRoleDataAttributesServicesPermissions = "read"
	UpdateRoleDataAttributesServicesPermissionsUpdate UpdateRoleDataAttributesServicesPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesSeveritiesPermissions.
const (
	UpdateRoleDataAttributesSeveritiesPermissionsCreate UpdateRoleDataAttributesSeveritiesPermissions = "create"
	UpdateRoleDataAttributesSeveritiesPermissionsDelete UpdateRoleDataAttributesSeveritiesPermissions = "delete"
	UpdateRoleDataAttributesSeveritiesPermissionsRead   UpdateRoleDataAttributesSeveritiesPermissions = "read"
	UpdateRoleDataAttributesSeveritiesPermissionsUpdate UpdateRoleDataAttributesSeveritiesPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesStatusPagesPermissions.
const (
	UpdateRoleDataAttributesStatusPagesPermissionsCreate UpdateRoleDataAttributesStatusPagesPermissions = "create"
	UpdateRoleDataAttributesStatusPagesPermissionsDelete UpdateRoleDataAttributesStatusPagesPermissions = "delete"
	UpdateRoleDataAttributesStatusPagesPermissionsRead   UpdateRoleDataAttributesStatusPagesPermissions = "read"
	UpdateRoleDataAttributesStatusPagesPermissionsUpdate UpdateRoleDataAttributesStatusPagesPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesWebhooksPermissions.
const (
	UpdateRoleDataAttributesWebhooksPermissionsCreate UpdateRoleDataAttributesWebhooksPermissions = "create"
	UpdateRoleDataAttributesWebhooksPermissionsDelete UpdateRoleDataAttributesWebhooksPermissions = "delete"
	UpdateRoleDataAttributesWebhooksPermissionsRead   UpdateRoleDataAttributesWebhooksPermissions = "read"
	UpdateRoleDataAttributesWebhooksPermissionsUpdate UpdateRoleDataAttributesWebhooksPermissions = "update"
)

// Defines values for UpdateRoleDataAttributesWorkflowsPermissions.
const (
	Create UpdateRoleDataAttributesWorkflowsPermissions = "create"
	Delete UpdateRoleDataAttributesWorkflowsPermissions = "delete"
	Read   UpdateRoleDataAttributesWorkflowsPermissions = "read"
	Update UpdateRoleDataAttributesWorkflowsPermissions = "update"
)

// Defines values for UpdateRoleDataType.
const (
	UpdateRoleDataTypeRoles UpdateRoleDataType = "roles"
)

// Defines values for UpdateSecretDataType.
const (
	UpdateSecretDataTypeSecrets UpdateSecretDataType = "secrets"
)

// Defines values for UpdateServiceDataAttributesStatus.
const (
	UpdateServiceDataAttributesStatusImpacted      UpdateServiceDataAttributesStatus = "impacted"
	UpdateServiceDataAttributesStatusMajorOutage   UpdateServiceDataAttributesStatus = "major_outage"
	UpdateServiceDataAttributesStatusOperational   UpdateServiceDataAttributesStatus = "operational"
	UpdateServiceDataAttributesStatusOutage        UpdateServiceDataAttributesStatus = "outage"
	UpdateServiceDataAttributesStatusPartialOutage UpdateServiceDataAttributesStatus = "partial_outage"
)

// Defines values for UpdateServiceDataType.
const (
	UpdateServiceDataTypeServices UpdateServiceDataType = "services"
)

// Defines values for UpdateServiceNowIncidentTaskParamsTaskType.
const (
	UpdateServiceNowIncident UpdateServiceNowIncidentTaskParamsTaskType = "update_service_now_incident"
)

// Defines values for UpdateSeverityDataAttributesSeverity.
const (
	Critical UpdateSeverityDataAttributesSeverity = "critical"
	High     UpdateSeverityDataAttributesSeverity = "high"
	Low      UpdateSeverityDataAttributesSeverity = "low"
	Medium   UpdateSeverityDataAttributesSeverity = "medium"
)

// Defines values for UpdateSeverityDataType.
const (
	UpdateSeverityDataTypeSeverities UpdateSeverityDataType = "severities"
)

// Defines values for UpdateShortcutStoryTaskParamsTaskType.
const (
	UpdateShortcutStory UpdateShortcutStoryTaskParamsTaskType = "update_shortcut_story"
)

// Defines values for UpdateShortcutTaskTaskParamsTaskType.
const (
	UpdateShortcutTask UpdateShortcutTaskTaskParamsTaskType = "update_shortcut_task"
)

// Defines values for UpdateSlackChannelTopicTaskParamsTaskType.
const (
	UpdateSlackChannelTopic UpdateSlackChannelTopicTaskParamsTaskType = "update_slack_channel_topic"
)

// Defines values for UpdateStatusPageDataAttributesShowUptimeLastDays.
const (
	N180 UpdateStatusPageDataAttributesShowUptimeLastDays = 180
	N30  UpdateStatusPageDataAttributesShowUptimeLastDays = 30
	N360 UpdateStatusPageDataAttributesShowUptimeLastDays = 360
	N60  UpdateStatusPageDataAttributesShowUptimeLastDays = 60
	N90  UpdateStatusPageDataAttributesShowUptimeLastDays = 90
)

// Defines values for UpdateStatusPageDataAttributesTimeZone.
const (
	UpdateStatusPageDataAttributesTimeZoneAbuDhabi                  UpdateStatusPageDataAttributesTimeZone = "Abu Dhabi"
	UpdateStatusPageDataAttributesTimeZoneAdelaide                  UpdateStatusPageDataAttributesTimeZone = "Adelaide"
	UpdateStatusPageDataAttributesTimeZoneAlaska                    UpdateStatusPageDataAttributesTimeZone = "Alaska"
	UpdateStatusPageDataAttributesTimeZoneAlmaty                    UpdateStatusPageDataAttributesTimeZone = "Almaty"
	UpdateStatusPageDataAttributesTimeZoneAmericanSamoa             UpdateStatusPageDataAttributesTimeZone = "American Samoa"
	UpdateStatusPageDataAttributesTimeZoneAmsterdam                 UpdateStatusPageDataAttributesTimeZone = "Amsterdam"
	UpdateStatusPageDataAttributesTimeZoneArizona                   UpdateStatusPageDataAttributesTimeZone = "Arizona"
	UpdateStatusPageDataAttributesTimeZoneAstana                    UpdateStatusPageDataAttributesTimeZone = "Astana"
	UpdateStatusPageDataAttributesTimeZoneAthens                    UpdateStatusPageDataAttributesTimeZone = "Athens"
	UpdateStatusPageDataAttributesTimeZoneAtlanticTimeCanada        UpdateStatusPageDataAttributesTimeZone = "Atlantic Time (Canada)"
	UpdateStatusPageDataAttributesTimeZoneAuckland                  UpdateStatusPageDataAttributesTimeZone = "Auckland"
	UpdateStatusPageDataAttributesTimeZoneAzores                    UpdateStatusPageDataAttributesTimeZone = "Azores"
	UpdateStatusPageDataAttributesTimeZoneBaghdad                   UpdateStatusPageDataAttributesTimeZone = "Baghdad"
	UpdateStatusPageDataAttributesTimeZoneBaku                      UpdateStatusPageDataAttributesTimeZone = "Baku"
	UpdateStatusPageDataAttributesTimeZoneBangkok                   UpdateStatusPageDataAttributesTimeZone = "Bangkok"
	UpdateStatusPageDataAttributesTimeZoneBeijing                   UpdateStatusPageDataAttributesTimeZone = "Beijing"
	UpdateStatusPageDataAttributesTimeZoneBelgrade                  UpdateStatusPageDataAttributesTimeZone = "Belgrade"
	UpdateStatusPageDataAttributesTimeZoneBerlin                    UpdateStatusPageDataAttributesTimeZone = "Berlin"
	UpdateStatusPageDataAttributesTimeZoneBern                      UpdateStatusPageDataAttributesTimeZone = "Bern"
	UpdateStatusPageDataAttributesTimeZoneBogota                    UpdateStatusPageDataAttributesTimeZone = "Bogota"
	UpdateStatusPageDataAttributesTimeZoneBrasilia                  UpdateStatusPageDataAttributesTimeZone = "Brasilia"
	UpdateStatusPageDataAttributesTimeZoneBratislava                UpdateStatusPageDataAttributesTimeZone = "Bratislava"
	UpdateStatusPageDataAttributesTimeZoneBrisbane                  UpdateStatusPageDataAttributesTimeZone = "Brisbane"
	UpdateStatusPageDataAttributesTimeZoneBrussels                  UpdateStatusPageDataAttributesTimeZone = "Brussels"
	UpdateStatusPageDataAttributesTimeZoneBucharest                 UpdateStatusPageDataAttributesTimeZone = "Bucharest"
	UpdateStatusPageDataAttributesTimeZoneBudapest                  UpdateStatusPageDataAttributesTimeZone = "Budapest"
	UpdateStatusPageDataAttributesTimeZoneBuenosAires               UpdateStatusPageDataAttributesTimeZone = "Buenos Aires"
	UpdateStatusPageDataAttributesTimeZoneCairo                     UpdateStatusPageDataAttributesTimeZone = "Cairo"
	UpdateStatusPageDataAttributesTimeZoneCanberra                  UpdateStatusPageDataAttributesTimeZone = "Canberra"
	UpdateStatusPageDataAttributesTimeZoneCapeVerdeIs               UpdateStatusPageDataAttributesTimeZone = "Cape Verde Is."
	UpdateStatusPageDataAttributesTimeZoneCaracas                   UpdateStatusPageDataAttributesTimeZone = "Caracas"
	UpdateStatusPageDataAttributesTimeZoneCasablanca                UpdateStatusPageDataAttributesTimeZone = "Casablanca"
	UpdateStatusPageDataAttributesTimeZoneCentralAmerica            UpdateStatusPageDataAttributesTimeZone = "Central America"
	UpdateStatusPageDataAttributesTimeZoneCentralTimeUSCanada       UpdateStatusPageDataAttributesTimeZone = "Central Time (US & Canada)"
	UpdateStatusPageDataAttributesTimeZoneChathamIs                 UpdateStatusPageDataAttributesTimeZone = "Chatham Is."
	UpdateStatusPageDataAttributesTimeZoneChennai                   UpdateStatusPageDataAttributesTimeZone = "Chennai"
	UpdateStatusPageDataAttributesTimeZoneChihuahua                 UpdateStatusPageDataAttributesTimeZone = "Chihuahua"
	UpdateStatusPageDataAttributesTimeZoneChongqing                 UpdateStatusPageDataAttributesTimeZone = "Chongqing"
	UpdateStatusPageDataAttributesTimeZoneCopenhagen                UpdateStatusPageDataAttributesTimeZone = "Copenhagen"
	UpdateStatusPageDataAttributesTimeZoneDarwin                    UpdateStatusPageDataAttributesTimeZone = "Darwin"
	UpdateStatusPageDataAttributesTimeZoneDhaka                     UpdateStatusPageDataAttributesTimeZone = "Dhaka"
	UpdateStatusPageDataAttributesTimeZoneDublin                    UpdateStatusPageDataAttributesTimeZone = "Dublin"
	UpdateStatusPageDataAttributesTimeZoneEasternTimeUSCanada       UpdateStatusPageDataAttributesTimeZone = "Eastern Time (US & Canada)"
	UpdateStatusPageDataAttributesTimeZoneEdinburgh                 UpdateStatusPageDataAttributesTimeZone = "Edinburgh"
	UpdateStatusPageDataAttributesTimeZoneEkaterinburg              UpdateStatusPageDataAttributesTimeZone = "Ekaterinburg"
	UpdateStatusPageDataAttributesTimeZoneFiji                      UpdateStatusPageDataAttributesTimeZone = "Fiji"
	UpdateStatusPageDataAttributesTimeZoneGeorgetown                UpdateStatusPageDataAttributesTimeZone = "Georgetown"
	UpdateStatusPageDataAttributesTimeZoneGreenland                 UpdateStatusPageDataAttributesTimeZone = "Greenland"
	UpdateStatusPageDataAttributesTimeZoneGuadalajara               UpdateStatusPageDataAttributesTimeZone = "Guadalajara"
	UpdateStatusPageDataAttributesTimeZoneGuam                      UpdateStatusPageDataAttributesTimeZone = "Guam"
	UpdateStatusPageDataAttributesTimeZoneHanoi                     UpdateStatusPageDataAttributesTimeZone = "Hanoi"
	UpdateStatusPageDataAttributesTimeZoneHarare                    UpdateStatusPageDataAttributesTimeZone = "Harare"
	UpdateStatusPageDataAttributesTimeZoneHawaii                    UpdateStatusPageDataAttributesTimeZone = "Hawaii"
	UpdateStatusPageDataAttributesTimeZoneHelsinki                  UpdateStatusPageDataAttributesTimeZone = "Helsinki"
	UpdateStatusPageDataAttributesTimeZoneHobart                    UpdateStatusPageDataAttributesTimeZone = "Hobart"
	UpdateStatusPageDataAttributesTimeZoneHongKong                  UpdateStatusPageDataAttributesTimeZone = "Hong Kong"
	UpdateStatusPageDataAttributesTimeZoneIndianaEast               UpdateStatusPageDataAttributesTimeZone = "Indiana (East)"
	UpdateStatusPageDataAttributesTimeZoneInternationalDateLineWest UpdateStatusPageDataAttributesTimeZone = "International Date Line West"
	UpdateStatusPageDataAttributesTimeZoneIrkutsk                   UpdateStatusPageDataAttributesTimeZone = "Irkutsk"
	UpdateStatusPageDataAttributesTimeZoneIslamabad                 UpdateStatusPageDataAttributesTimeZone = "Islamabad"
	UpdateStatusPageDataAttributesTimeZoneIstanbul                  UpdateStatusPageDataAttributesTimeZone = "Istanbul"
	UpdateStatusPageDataAttributesTimeZoneJakarta                   UpdateStatusPageDataAttributesTimeZone = "Jakarta"
	UpdateStatusPageDataAttributesTimeZoneJerusalem                 UpdateStatusPageDataAttributesTimeZone = "Jerusalem"
	UpdateStatusPageDataAttributesTimeZoneKabul                     UpdateStatusPageDataAttributesTimeZone = "Kabul"
	UpdateStatusPageDataAttributesTimeZoneKaliningrad               UpdateStatusPageDataAttributesTimeZone = "Kaliningrad"
	UpdateStatusPageDataAttributesTimeZoneKamchatka                 UpdateStatusPageDataAttributesTimeZone = "Kamchatka"
	UpdateStatusPageDataAttributesTimeZoneKarachi                   UpdateStatusPageDataAttributesTimeZone = "Karachi"
	UpdateStatusPageDataAttributesTimeZoneKathmandu                 UpdateStatusPageDataAttributesTimeZone = "Kathmandu"
	UpdateStatusPageDataAttributesTimeZoneKolkata                   UpdateStatusPageDataAttributesTimeZone = "Kolkata"
	UpdateStatusPageDataAttributesTimeZoneKrasnoyarsk               UpdateStatusPageDataAttributesTimeZone = "Krasnoyarsk"
	UpdateStatusPageDataAttributesTimeZoneKualaLumpur               UpdateStatusPageDataAttributesTimeZone = "Kuala Lumpur"
	UpdateStatusPageDataAttributesTimeZoneKuwait                    UpdateStatusPageDataAttributesTimeZone = "Kuwait"
	UpdateStatusPageDataAttributesTimeZoneKyiv                      UpdateStatusPageDataAttributesTimeZone = "Kyiv"
	UpdateStatusPageDataAttributesTimeZoneLaPaz                     UpdateStatusPageDataAttributesTimeZone = "La Paz"
	UpdateStatusPageDataAttributesTimeZoneLima                      UpdateStatusPageDataAttributesTimeZone = "Lima"
	UpdateStatusPageDataAttributesTimeZoneLisbon                    UpdateStatusPageDataAttributesTimeZone = "Lisbon"
	UpdateStatusPageDataAttributesTimeZoneLjubljana                 UpdateStatusPageDataAttributesTimeZone = "Ljubljana"
	UpdateStatusPageDataAttributesTimeZoneLondon                    UpdateStatusPageDataAttributesTimeZone = "London"
	UpdateStatusPageDataAttributesTimeZoneMadrid                    UpdateStatusPageDataAttributesTimeZone = "Madrid"
	UpdateStatusPageDataAttributesTimeZoneMagadan                   UpdateStatusPageDataAttributesTimeZone = "Magadan"
	UpdateStatusPageDataAttributesTimeZoneMarshallIs                UpdateStatusPageDataAttributesTimeZone = "Marshall Is."
	UpdateStatusPageDataAttributesTimeZoneMazatlan                  UpdateStatusPageDataAttributesTimeZone = "Mazatlan"
	UpdateStatusPageDataAttributesTimeZoneMelbourne                 UpdateStatusPageDataAttributesTimeZone = "Melbourne"
	UpdateStatusPageDataAttributesTimeZoneMexicoCity                UpdateStatusPageDataAttributesTimeZone = "Mexico City"
	UpdateStatusPageDataAttributesTimeZoneMidAtlantic               UpdateStatusPageDataAttributesTimeZone = "Mid-Atlantic"
	UpdateStatusPageDataAttributesTimeZoneMidwayIsland              UpdateStatusPageDataAttributesTimeZone = "Midway Island"
	UpdateStatusPageDataAttributesTimeZoneMinsk                     UpdateStatusPageDataAttributesTimeZone = "Minsk"
	UpdateStatusPageDataAttributesTimeZoneMonrovia                  UpdateStatusPageDataAttributesTimeZone = "Monrovia"
	UpdateStatusPageDataAttributesTimeZoneMonterrey                 UpdateStatusPageDataAttributesTimeZone = "Monterrey"
	UpdateStatusPageDataAttributesTimeZoneMontevideo                UpdateStatusPageDataAttributesTimeZone = "Montevideo"
	UpdateStatusPageDataAttributesTimeZoneMoscow                    UpdateStatusPageDataAttributesTimeZone = "Moscow"
	UpdateStatusPageDataAttributesTimeZoneMountainTimeUSCanada      UpdateStatusPageDataAttributesTimeZone = "Mountain Time (US & Canada)"
	UpdateStatusPageDataAttributesTimeZoneMumbai                    UpdateStatusPageDataAttributesTimeZone = "Mumbai"
	UpdateStatusPageDataAttributesTimeZoneMuscat                    UpdateStatusPageDataAttributesTimeZone = "Muscat"
	UpdateStatusPageDataAttributesTimeZoneNairobi                   UpdateStatusPageDataAttributesTimeZone = "Nairobi"
	UpdateStatusPageDataAttributesTimeZoneNewCaledonia              UpdateStatusPageDataAttributesTimeZone = "New Caledonia"
	UpdateStatusPageDataAttributesTimeZoneNewDelhi                  UpdateStatusPageDataAttributesTimeZone = "New Delhi"
	UpdateStatusPageDataAttributesTimeZoneNewfoundland              UpdateStatusPageDataAttributesTimeZone = "Newfoundland"
	UpdateStatusPageDataAttributesTimeZoneNovosibirsk               UpdateStatusPageDataAttributesTimeZone = "Novosibirsk"
	UpdateStatusPageDataAttributesTimeZoneNukualofa                 UpdateStatusPageDataAttributesTimeZone = "Nuku'alofa"
	UpdateStatusPageDataAttributesTimeZoneOsaka                     UpdateStatusPageDataAttributesTimeZone = "Osaka"
	UpdateStatusPageDataAttributesTimeZonePacificTimeUSCanada       UpdateStatusPageDataAttributesTimeZone = "Pacific Time (US & Canada)"
	UpdateStatusPageDataAttributesTimeZoneParis                     UpdateStatusPageDataAttributesTimeZone = "Paris"
	UpdateStatusPageDataAttributesTimeZonePerth                     UpdateStatusPageDataAttributesTimeZone = "Perth"
	UpdateStatusPageDataAttributesTimeZonePortMoresby               UpdateStatusPageDataAttributesTimeZone = "Port Moresby"
	UpdateStatusPageDataAttributesTimeZonePrague                    UpdateStatusPageDataAttributesTimeZone = "Prague"
	UpdateStatusPageDataAttributesTimeZonePretoria                  UpdateStatusPageDataAttributesTimeZone = "Pretoria"
	UpdateStatusPageDataAttributesTimeZonePuertoRico                UpdateStatusPageDataAttributesTimeZone = "Puerto Rico"
	UpdateStatusPageDataAttributesTimeZoneQuito                     UpdateStatusPageDataAttributesTimeZone = "Quito"
	UpdateStatusPageDataAttributesTimeZoneRangoon                   UpdateStatusPageDataAttributesTimeZone = "Rangoon"
	UpdateStatusPageDataAttributesTimeZoneRiga                      UpdateStatusPageDataAttributesTimeZone = "Riga"
	UpdateStatusPageDataAttributesTimeZoneRiyadh                    UpdateStatusPageDataAttributesTimeZone = "Riyadh"
	UpdateStatusPageDataAttributesTimeZoneRome                      UpdateStatusPageDataAttributesTimeZone = "Rome"
	UpdateStatusPageDataAttributesTimeZoneSamara                    UpdateStatusPageDataAttributesTimeZone = "Samara"
	UpdateStatusPageDataAttributesTimeZoneSamoa                     UpdateStatusPageDataAttributesTimeZone = "Samoa"
	UpdateStatusPageDataAttributesTimeZoneSantiago                  UpdateStatusPageDataAttributesTimeZone = "Santiago"
	UpdateStatusPageDataAttributesTimeZoneSapporo                   UpdateStatusPageDataAttributesTimeZone = "Sapporo"
	UpdateStatusPageDataAttributesTimeZoneSarajevo                  UpdateStatusPageDataAttributesTimeZone = "Sarajevo"
	UpdateStatusPageDataAttributesTimeZoneSaskatchewan              UpdateStatusPageDataAttributesTimeZone = "Saskatchewan"
	UpdateStatusPageDataAttributesTimeZoneSeoul                     UpdateStatusPageDataAttributesTimeZone = "Seoul"
	UpdateStatusPageDataAttributesTimeZoneSingapore                 UpdateStatusPageDataAttributesTimeZone = "Singapore"
	UpdateStatusPageDataAttributesTimeZoneSkopje                    UpdateStatusPageDataAttributesTimeZone = "Skopje"
	UpdateStatusPageDataAttributesTimeZoneSofia                     UpdateStatusPageDataAttributesTimeZone = "Sofia"
	UpdateStatusPageDataAttributesTimeZoneSolomonIs                 UpdateStatusPageDataAttributesTimeZone = "Solomon Is."
	UpdateStatusPageDataAttributesTimeZoneSrednekolymsk             UpdateStatusPageDataAttributesTimeZone = "Srednekolymsk"
	UpdateStatusPageDataAttributesTimeZoneSriJayawardenepura        UpdateStatusPageDataAttributesTimeZone = "Sri Jayawardenepura"
	UpdateStatusPageDataAttributesTimeZoneStPetersburg              UpdateStatusPageDataAttributesTimeZone = "St. Petersburg"
	UpdateStatusPageDataAttributesTimeZoneStockholm                 UpdateStatusPageDataAttributesTimeZone = "Stockholm"
	UpdateStatusPageDataAttributesTimeZoneSydney                    UpdateStatusPageDataAttributesTimeZone = "Sydney"
	UpdateStatusPageDataAttributesTimeZoneTaipei                    UpdateStatusPageDataAttributesTimeZone = "Taipei"
	UpdateStatusPageDataAttributesTimeZoneTallinn                   UpdateStatusPageDataAttributesTimeZone = "Tallinn"
	UpdateStatusPageDataAttributesTimeZoneTashkent                  UpdateStatusPageDataAttributesTimeZone = "Tashkent"
	UpdateStatusPageDataAttributesTimeZoneTbilisi                   UpdateStatusPageDataAttributesTimeZone = "Tbilisi"
	UpdateStatusPageDataAttributesTimeZoneTehran                    UpdateStatusPageDataAttributesTimeZone = "Tehran"
	UpdateStatusPageDataAttributesTimeZoneTijuana                   UpdateStatusPageDataAttributesTimeZone = "Tijuana"
	UpdateStatusPageDataAttributesTimeZoneTokelauIs                 UpdateStatusPageDataAttributesTimeZone = "Tokelau Is."
	UpdateStatusPageDataAttributesTimeZoneTokyo                     UpdateStatusPageDataAttributesTimeZone = "Tokyo"
	UpdateStatusPageDataAttributesTimeZoneUTC                       UpdateStatusPageDataAttributesTimeZone = "UTC"
	UpdateStatusPageDataAttributesTimeZoneUlaanbaatar               UpdateStatusPageDataAttributesTimeZone = "Ulaanbaatar"
	UpdateStatusPageDataAttributesTimeZoneUrumqi                    UpdateStatusPageDataAttributesTimeZone = "Urumqi"
	UpdateStatusPageDataAttributesTimeZoneVienna                    UpdateStatusPageDataAttributesTimeZone = "Vienna"
	UpdateStatusPageDataAttributesTimeZoneVilnius                   UpdateStatusPageDataAttributesTimeZone = "Vilnius"
	UpdateStatusPageDataAttributesTimeZoneVladivostok               UpdateStatusPageDataAttributesTimeZone = "Vladivostok"
	UpdateStatusPageDataAttributesTimeZoneVolgograd                 UpdateStatusPageDataAttributesTimeZone = "Volgograd"
	UpdateStatusPageDataAttributesTimeZoneWarsaw                    UpdateStatusPageDataAttributesTimeZone = "Warsaw"
	UpdateStatusPageDataAttributesTimeZoneWellington                UpdateStatusPageDataAttributesTimeZone = "Wellington"
	UpdateStatusPageDataAttributesTimeZoneWestCentralAfrica         UpdateStatusPageDataAttributesTimeZone = "West Central Africa"
	UpdateStatusPageDataAttributesTimeZoneYakutsk                   UpdateStatusPageDataAttributesTimeZone = "Yakutsk"
	UpdateStatusPageDataAttributesTimeZoneYerevan                   UpdateStatusPageDataAttributesTimeZone = "Yerevan"
	UpdateStatusPageDataAttributesTimeZoneZagreb                    UpdateStatusPageDataAttributesTimeZone = "Zagreb"
	UpdateStatusPageDataAttributesTimeZoneZurich                    UpdateStatusPageDataAttributesTimeZone = "Zurich"
)

// Defines values for UpdateStatusPageDataType.
const (
	UpdateStatusPageDataTypeStatusPages UpdateStatusPageDataType = "status_pages"
)

// Defines values for UpdateStatusTaskParamsStatus.
const (
	UpdateStatusTaskParamsStatusCancelled UpdateStatusTaskParamsStatus = "cancelled"
	UpdateStatusTaskParamsStatusInTriage  UpdateStatusTaskParamsStatus = "in_triage"
	UpdateStatusTaskParamsStatusMitigated UpdateStatusTaskParamsStatus = "mitigated"
	UpdateStatusTaskParamsStatusResolved  UpdateStatusTaskParamsStatus = "resolved"
	UpdateStatusTaskParamsStatusStarted   UpdateStatusTaskParamsStatus = "started"
)

// Defines values for UpdateStatusTaskParamsTaskType.
const (
	UpdateStatus UpdateStatusTaskParamsTaskType = "update_status"
)

// Defines values for UpdateTeamDataType.
const (
	Groups UpdateTeamDataType = "groups"
)

// Defines values for UpdateTrelloCardTaskParamsTaskType.
const (
	UpdateTrelloCard UpdateTrelloCardTaskParamsTaskType = "update_trello_card"
)

// Defines values for UpdateVictorOpsIncidentTaskParamsStatus.
const (
	Ack     UpdateVictorOpsIncidentTaskParamsStatus = "ack"
	Auto    UpdateVictorOpsIncidentTaskParamsStatus = "auto"
	Resolve UpdateVictorOpsIncidentTaskParamsStatus = "resolve"
)

// Defines values for UpdateVictorOpsIncidentTaskParamsTaskType.
const (
	UpdateVictorOpsIncident UpdateVictorOpsIncidentTaskParamsTaskType = "update_victor_ops_incident"
)

// Defines values for UpdateWebhooksEndpointDataAttributesEventTypes.
const (
	UpdateWebhooksEndpointDataAttributesEventTypesAlertCreated                UpdateWebhooksEndpointDataAttributesEventTypes = "alert.created"
	UpdateWebhooksEndpointDataAttributesEventTypesGeniusWorkflowRunCanceled   UpdateWebhooksEndpointDataAttributesEventTypes = "genius_workflow_run.canceled"
	UpdateWebhooksEndpointDataAttributesEventTypesGeniusWorkflowRunCompleted  UpdateWebhooksEndpointDataAttributesEventTypes = "genius_workflow_run.completed"
	UpdateWebhooksEndpointDataAttributesEventTypesGeniusWorkflowRunFailed     UpdateWebhooksEndpointDataAttributesEventTypes = "genius_workflow_run.failed"
	UpdateWebhooksEndpointDataAttributesEventTypesGeniusWorkflowRunQueued     UpdateWebhooksEndpointDataAttributesEventTypes = "genius_workflow_run.queued"
	UpdateWebhooksEndpointDataAttributesEventTypesGeniusWorkflowRunStarted    UpdateWebhooksEndpointDataAttributesEventTypes = "genius_workflow_run.started"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentCancelled           UpdateWebhooksEndpointDataAttributesEventTypes = "incident.cancelled"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentCreated             UpdateWebhooksEndpointDataAttributesEventTypes = "incident.created"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentDeleted             UpdateWebhooksEndpointDataAttributesEventTypes = "incident.deleted"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentInTriage            UpdateWebhooksEndpointDataAttributesEventTypes = "incident.in_triage"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentMitigated           UpdateWebhooksEndpointDataAttributesEventTypes = "incident.mitigated"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentPostMortemCreated   UpdateWebhooksEndpointDataAttributesEventTypes = "incident_post_mortem.created"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentPostMortemDeleted   UpdateWebhooksEndpointDataAttributesEventTypes = "incident_post_mortem.deleted"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentPostMortemPublished UpdateWebhooksEndpointDataAttributesEventTypes = "incident_post_mortem.published"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentPostMortemUpdated   UpdateWebhooksEndpointDataAttributesEventTypes = "incident_post_mortem.updated"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentResolved            UpdateWebhooksEndpointDataAttributesEventTypes = "incident.resolved"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentScheduledCompleted  UpdateWebhooksEndpointDataAttributesEventTypes = "incident.scheduled.completed"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentScheduledCreated    UpdateWebhooksEndpointDataAttributesEventTypes = "incident.scheduled.created"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentScheduledDeleted    UpdateWebhooksEndpointDataAttributesEventTypes = "incident.scheduled.deleted"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentScheduledInProgress UpdateWebhooksEndpointDataAttributesEventTypes = "incident.scheduled.in_progress"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentScheduledUpdated    UpdateWebhooksEndpointDataAttributesEventTypes = "incident.scheduled.updated"
	UpdateWebhooksEndpointDataAttributesEventTypesIncidentUpdated             UpdateWebhooksEndpointDataAttributesEventTypes = "incident.updated"
	UpdateWebhooksEndpointDataAttributesEventTypesPulseCreated                UpdateWebhooksEndpointDataAttributesEventTypes = "pulse.created"
)

// Defines values for UpdateWebhooksEndpointDataType.
const (
	UpdateWebhooksEndpointDataTypeWebhooksEndpoints UpdateWebhooksEndpointDataType = "webhooks_endpoints"
)

// Defines values for UpdateWorkflowDataType.
const (
	UpdateWorkflowDataTypeWorkflows UpdateWorkflowDataType = "workflows"
)

// Defines values for UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition.
const (
	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionANY          UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "ANY"
	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionCONTAINS     UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "CONTAINS"
	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionCONTAINSALL  UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "CONTAINS_ALL"
	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionCONTAINSNONE UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "CONTAINS_NONE"
	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionIS           UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "IS"
	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionNONE         UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "NONE"
	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionSET          UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "SET"
	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionUNSET        UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "UNSET"
)

// Defines values for UpdateWorkflowCustomFieldSelectionDataType.
const (
	UpdateWorkflowCustomFieldSelectionDataTypeWorkflowCustomFieldSelections UpdateWorkflowCustomFieldSelectionDataType = "workflow_custom_field_selections"
)

// Defines values for UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition.
const (
	UpdateWorkflowFormFieldConditionDataAttributesIncidentConditionANY          UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition = "ANY"
	UpdateWorkflowFormFieldConditionDataAttributesIncidentConditionCONTAINS     UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition = "CONTAINS"
	UpdateWorkflowFormFieldConditionDataAttributesIncidentConditionCONTAINSALL  UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition = "CONTAINS_ALL"
	UpdateWorkflowFormFieldConditionDataAttributesIncidentConditionCONTAINSNONE UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition = "CONTAINS_NONE"
	UpdateWorkflowFormFieldConditionDataAttributesIncidentConditionIS           UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition = "IS"
	UpdateWorkflowFormFieldConditionDataAttributesIncidentConditionNONE         UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition = "NONE"
	UpdateWorkflowFormFieldConditionDataAttributesIncidentConditionSET          UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition = "SET"
	UpdateWorkflowFormFieldConditionDataAttributesIncidentConditionUNSET        UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition = "UNSET"
)

// Defines values for UpdateWorkflowFormFieldConditionDataType.
const (
	UpdateWorkflowFormFieldConditionDataTypeWorkflowFormFieldConditions UpdateWorkflowFormFieldConditionDataType = "workflow_form_field_conditions"
)

// Defines values for UpdateWorkflowGroupDataAttributesKind.
const (
	UpdateWorkflowGroupDataAttributesKindActionItem UpdateWorkflowGroupDataAttributesKind = "action_item"
	UpdateWorkflowGroupDataAttributesKindAlert      UpdateWorkflowGroupDataAttributesKind = "alert"
	UpdateWorkflowGroupDataAttributesKindIncident   UpdateWorkflowGroupDataAttributesKind = "incident"
	UpdateWorkflowGroupDataAttributesKindPostMortem UpdateWorkflowGroupDataAttributesKind = "post_mortem"
	UpdateWorkflowGroupDataAttributesKindPulse      UpdateWorkflowGroupDataAttributesKind = "pulse"
	UpdateWorkflowGroupDataAttributesKindSimple     UpdateWorkflowGroupDataAttributesKind = "simple"
)

// Defines values for UpdateWorkflowGroupDataType.
const (
	UpdateWorkflowGroupDataTypeWorkflowGroups UpdateWorkflowGroupDataType = "workflow_groups"
)

// Defines values for UpdateWorkflowTaskDataType.
const (
	UpdateWorkflowTaskDataTypeWorkflowTasks UpdateWorkflowTaskDataType = "workflow_tasks"
)

// Defines values for UpdateZendeskTicketTaskParamsTaskType.
const (
	UpdateZendeskTicket UpdateZendeskTicketTaskParamsTaskType = "update_zendesk_ticket"
)

// Defines values for UserListDataType.
const (
	UserListDataTypeUsers UserListDataType = "users"
)

// Defines values for UserResponseDataType.
const (
	Users UserResponseDataType = "users"
)

// Defines values for WebhooksDeliveryListDataType.
const (
	WebhooksDeliveryListDataTypeWebhooksDeliveries WebhooksDeliveryListDataType = "webhooks_deliveries"
)

// Defines values for WebhooksDeliveryResponseDataType.
const (
	WebhooksDeliveryResponseDataTypeWebhooksDeliveries WebhooksDeliveryResponseDataType = "webhooks_deliveries"
)

// Defines values for WebhooksEndpointEventTypes.
const (
	WebhooksEndpointEventTypesAlertCreated                WebhooksEndpointEventTypes = "alert.created"
	WebhooksEndpointEventTypesGeniusWorkflowRunCanceled   WebhooksEndpointEventTypes = "genius_workflow_run.canceled"
	WebhooksEndpointEventTypesGeniusWorkflowRunCompleted  WebhooksEndpointEventTypes = "genius_workflow_run.completed"
	WebhooksEndpointEventTypesGeniusWorkflowRunFailed     WebhooksEndpointEventTypes = "genius_workflow_run.failed"
	WebhooksEndpointEventTypesGeniusWorkflowRunQueued     WebhooksEndpointEventTypes = "genius_workflow_run.queued"
	WebhooksEndpointEventTypesGeniusWorkflowRunStarted    WebhooksEndpointEventTypes = "genius_workflow_run.started"
	WebhooksEndpointEventTypesIncidentCancelled           WebhooksEndpointEventTypes = "incident.cancelled"
	WebhooksEndpointEventTypesIncidentCreated             WebhooksEndpointEventTypes = "incident.created"
	WebhooksEndpointEventTypesIncidentDeleted             WebhooksEndpointEventTypes = "incident.deleted"
	WebhooksEndpointEventTypesIncidentInTriage            WebhooksEndpointEventTypes = "incident.in_triage"
	WebhooksEndpointEventTypesIncidentMitigated           WebhooksEndpointEventTypes = "incident.mitigated"
	WebhooksEndpointEventTypesIncidentPostMortemCreated   WebhooksEndpointEventTypes = "incident_post_mortem.created"
	WebhooksEndpointEventTypesIncidentPostMortemDeleted   WebhooksEndpointEventTypes = "incident_post_mortem.deleted"
	WebhooksEndpointEventTypesIncidentPostMortemPublished WebhooksEndpointEventTypes = "incident_post_mortem.published"
	WebhooksEndpointEventTypesIncidentPostMortemUpdated   WebhooksEndpointEventTypes = "incident_post_mortem.updated"
	WebhooksEndpointEventTypesIncidentResolved            WebhooksEndpointEventTypes = "incident.resolved"
	WebhooksEndpointEventTypesIncidentScheduledCompleted  WebhooksEndpointEventTypes = "incident.scheduled.completed"
	WebhooksEndpointEventTypesIncidentScheduledCreated    WebhooksEndpointEventTypes = "incident.scheduled.created"
	WebhooksEndpointEventTypesIncidentScheduledDeleted    WebhooksEndpointEventTypes = "incident.scheduled.deleted"
	WebhooksEndpointEventTypesIncidentScheduledInProgress WebhooksEndpointEventTypes = "incident.scheduled.in_progress"
	WebhooksEndpointEventTypesIncidentScheduledUpdated    WebhooksEndpointEventTypes = "incident.scheduled.updated"
	WebhooksEndpointEventTypesIncidentUpdated             WebhooksEndpointEventTypes = "incident.updated"
	WebhooksEndpointEventTypesPulseCreated                WebhooksEndpointEventTypes = "pulse.created"
)

// Defines values for WebhooksEndpointListDataAttributesEventTypes.
const (
	WebhooksEndpointListDataAttributesEventTypesAlertCreated                WebhooksEndpointListDataAttributesEventTypes = "alert.created"
	WebhooksEndpointListDataAttributesEventTypesGeniusWorkflowRunCanceled   WebhooksEndpointListDataAttributesEventTypes = "genius_workflow_run.canceled"
	WebhooksEndpointListDataAttributesEventTypesGeniusWorkflowRunCompleted  WebhooksEndpointListDataAttributesEventTypes = "genius_workflow_run.completed"
	WebhooksEndpointListDataAttributesEventTypesGeniusWorkflowRunFailed     WebhooksEndpointListDataAttributesEventTypes = "genius_workflow_run.failed"
	WebhooksEndpointListDataAttributesEventTypesGeniusWorkflowRunQueued     WebhooksEndpointListDataAttributesEventTypes = "genius_workflow_run.queued"
	WebhooksEndpointListDataAttributesEventTypesGeniusWorkflowRunStarted    WebhooksEndpointListDataAttributesEventTypes = "genius_workflow_run.started"
	WebhooksEndpointListDataAttributesEventTypesIncidentCancelled           WebhooksEndpointListDataAttributesEventTypes = "incident.cancelled"
	WebhooksEndpointListDataAttributesEventTypesIncidentCreated             WebhooksEndpointListDataAttributesEventTypes = "incident.created"
	WebhooksEndpointListDataAttributesEventTypesIncidentDeleted             WebhooksEndpointListDataAttributesEventTypes = "incident.deleted"
	WebhooksEndpointListDataAttributesEventTypesIncidentInTriage            WebhooksEndpointListDataAttributesEventTypes = "incident.in_triage"
	WebhooksEndpointListDataAttributesEventTypesIncidentMitigated           WebhooksEndpointListDataAttributesEventTypes = "incident.mitigated"
	WebhooksEndpointListDataAttributesEventTypesIncidentPostMortemCreated   WebhooksEndpointListDataAttributesEventTypes = "incident_post_mortem.created"
	WebhooksEndpointListDataAttributesEventTypesIncidentPostMortemDeleted   WebhooksEndpointListDataAttributesEventTypes = "incident_post_mortem.deleted"
	WebhooksEndpointListDataAttributesEventTypesIncidentPostMortemPublished WebhooksEndpointListDataAttributesEventTypes = "incident_post_mortem.published"
	WebhooksEndpointListDataAttributesEventTypesIncidentPostMortemUpdated   WebhooksEndpointListDataAttributesEventTypes = "incident_post_mortem.updated"
	WebhooksEndpointListDataAttributesEventTypesIncidentResolved            WebhooksEndpointListDataAttributesEventTypes = "incident.resolved"
	WebhooksEndpointListDataAttributesEventTypesIncidentScheduledCompleted  WebhooksEndpointListDataAttributesEventTypes = "incident.scheduled.completed"
	WebhooksEndpointListDataAttributesEventTypesIncidentScheduledCreated    WebhooksEndpointListDataAttributesEventTypes = "incident.scheduled.created"
	WebhooksEndpointListDataAttributesEventTypesIncidentScheduledDeleted    WebhooksEndpointListDataAttributesEventTypes = "incident.scheduled.deleted"
	WebhooksEndpointListDataAttributesEventTypesIncidentScheduledInProgress WebhooksEndpointListDataAttributesEventTypes = "incident.scheduled.in_progress"
	WebhooksEndpointListDataAttributesEventTypesIncidentScheduledUpdated    WebhooksEndpointListDataAttributesEventTypes = "incident.scheduled.updated"
	WebhooksEndpointListDataAttributesEventTypesIncidentUpdated             WebhooksEndpointListDataAttributesEventTypes = "incident.updated"
	WebhooksEndpointListDataAttributesEventTypesPulseCreated                WebhooksEndpointListDataAttributesEventTypes = "pulse.created"
)

// Defines values for WebhooksEndpointListDataType.
const (
	WebhooksEndpointListDataTypeWebhooksEndpoints WebhooksEndpointListDataType = "webhooks_endpoints"
)

// Defines values for WebhooksEndpointResponseDataAttributesEventTypes.
const (
	AlertCreated                WebhooksEndpointResponseDataAttributesEventTypes = "alert.created"
	GeniusWorkflowRunCanceled   WebhooksEndpointResponseDataAttributesEventTypes = "genius_workflow_run.canceled"
	GeniusWorkflowRunCompleted  WebhooksEndpointResponseDataAttributesEventTypes = "genius_workflow_run.completed"
	GeniusWorkflowRunFailed     WebhooksEndpointResponseDataAttributesEventTypes = "genius_workflow_run.failed"
	GeniusWorkflowRunQueued     WebhooksEndpointResponseDataAttributesEventTypes = "genius_workflow_run.queued"
	GeniusWorkflowRunStarted    WebhooksEndpointResponseDataAttributesEventTypes = "genius_workflow_run.started"
	IncidentCancelled           WebhooksEndpointResponseDataAttributesEventTypes = "incident.cancelled"
	IncidentCreated             WebhooksEndpointResponseDataAttributesEventTypes = "incident.created"
	IncidentDeleted             WebhooksEndpointResponseDataAttributesEventTypes = "incident.deleted"
	IncidentInTriage            WebhooksEndpointResponseDataAttributesEventTypes = "incident.in_triage"
	IncidentMitigated           WebhooksEndpointResponseDataAttributesEventTypes = "incident.mitigated"
	IncidentPostMortemCreated   WebhooksEndpointResponseDataAttributesEventTypes = "incident_post_mortem.created"
	IncidentPostMortemDeleted   WebhooksEndpointResponseDataAttributesEventTypes = "incident_post_mortem.deleted"
	IncidentPostMortemPublished WebhooksEndpointResponseDataAttributesEventTypes = "incident_post_mortem.published"
	IncidentPostMortemUpdated   WebhooksEndpointResponseDataAttributesEventTypes = "incident_post_mortem.updated"
	IncidentResolved            WebhooksEndpointResponseDataAttributesEventTypes = "incident.resolved"
	IncidentScheduledCompleted  WebhooksEndpointResponseDataAttributesEventTypes = "incident.scheduled.completed"
	IncidentScheduledCreated    WebhooksEndpointResponseDataAttributesEventTypes = "incident.scheduled.created"
	IncidentScheduledDeleted    WebhooksEndpointResponseDataAttributesEventTypes = "incident.scheduled.deleted"
	IncidentScheduledInProgress WebhooksEndpointResponseDataAttributesEventTypes = "incident.scheduled.in_progress"
	IncidentScheduledUpdated    WebhooksEndpointResponseDataAttributesEventTypes = "incident.scheduled.updated"
	IncidentUpdated             WebhooksEndpointResponseDataAttributesEventTypes = "incident.updated"
	PulseCreated                WebhooksEndpointResponseDataAttributesEventTypes = "pulse.created"
)

// Defines values for WebhooksEndpointResponseDataType.
const (
	WebhooksEndpointResponseDataTypeWebhooksEndpoints WebhooksEndpointResponseDataType = "webhooks_endpoints"
)

// Defines values for WorkflowRepeatOn.
const (
	WorkflowRepeatOnF WorkflowRepeatOn = "F"
	WorkflowRepeatOnM WorkflowRepeatOn = "M"
	WorkflowRepeatOnR WorkflowRepeatOn = "R"
	WorkflowRepeatOnS WorkflowRepeatOn = "S"
	WorkflowRepeatOnT WorkflowRepeatOn = "T"
	WorkflowRepeatOnU WorkflowRepeatOn = "U"
	WorkflowRepeatOnW WorkflowRepeatOn = "W"
)

// Defines values for WorkflowCustomFieldSelectionIncidentCondition.
const (
	WorkflowCustomFieldSelectionIncidentConditionANY          WorkflowCustomFieldSelectionIncidentCondition = "ANY"
	WorkflowCustomFieldSelectionIncidentConditionCONTAINS     WorkflowCustomFieldSelectionIncidentCondition = "CONTAINS"
	WorkflowCustomFieldSelectionIncidentConditionCONTAINSALL  WorkflowCustomFieldSelectionIncidentCondition = "CONTAINS_ALL"
	WorkflowCustomFieldSelectionIncidentConditionCONTAINSNONE WorkflowCustomFieldSelectionIncidentCondition = "CONTAINS_NONE"
	WorkflowCustomFieldSelectionIncidentConditionIS           WorkflowCustomFieldSelectionIncidentCondition = "IS"
	WorkflowCustomFieldSelectionIncidentConditionNONE         WorkflowCustomFieldSelectionIncidentCondition = "NONE"
	WorkflowCustomFieldSelectionIncidentConditionSET          WorkflowCustomFieldSelectionIncidentCondition = "SET"
	WorkflowCustomFieldSelectionIncidentConditionUNSET        WorkflowCustomFieldSelectionIncidentCondition = "UNSET"
)

// Defines values for WorkflowCustomFieldSelectionListDataAttributesIncidentCondition.
const (
	WorkflowCustomFieldSelectionListDataAttributesIncidentConditionANY          WorkflowCustomFieldSelectionListDataAttributesIncidentCondition = "ANY"
	WorkflowCustomFieldSelectionListDataAttributesIncidentConditionCONTAINS     WorkflowCustomFieldSelectionListDataAttributesIncidentCondition = "CONTAINS"
	WorkflowCustomFieldSelectionListDataAttributesIncidentConditionCONTAINSALL  WorkflowCustomFieldSelectionListDataAttributesIncidentCondition = "CONTAINS_ALL"
	WorkflowCustomFieldSelectionListDataAttributesIncidentConditionCONTAINSNONE WorkflowCustomFieldSelectionListDataAttributesIncidentCondition = "CONTAINS_NONE"
	WorkflowCustomFieldSelectionListDataAttributesIncidentConditionIS           WorkflowCustomFieldSelectionListDataAttributesIncidentCondition = "IS"
	WorkflowCustomFieldSelectionListDataAttributesIncidentConditionNONE         WorkflowCustomFieldSelectionListDataAttributesIncidentCondition = "NONE"
	WorkflowCustomFieldSelectionListDataAttributesIncidentConditionSET          WorkflowCustomFieldSelectionListDataAttributesIncidentCondition = "SET"
	WorkflowCustomFieldSelectionListDataAttributesIncidentConditionUNSET        WorkflowCustomFieldSelectionListDataAttributesIncidentCondition = "UNSET"
)

// Defines values for WorkflowCustomFieldSelectionListDataType.
const (
	WorkflowCustomFieldSelectionListDataTypeWorkflowCustomFieldSelections WorkflowCustomFieldSelectionListDataType = "workflow_custom_field_selections"
)

// Defines values for WorkflowCustomFieldSelectionResponseDataAttributesIncidentCondition.
const (
	WorkflowCustomFieldSelectionResponseDataAttributesIncidentConditionANY          WorkflowCustomFieldSelectionResponseDataAttributesIncidentCondition = "ANY"
	WorkflowCustomFieldSelectionResponseDataAttributesIncidentConditionCONTAINS     WorkflowCustomFieldSelectionResponseDataAttributesIncidentCondition = "CONTAINS"
	WorkflowCustomFieldSelectionResponseDataAttributesIncidentConditionCONTAINSALL  WorkflowCustomFieldSelectionResponseDataAttributesIncidentCondition = "CONTAINS_ALL"
	WorkflowCustomFieldSelectionResponseDataAttributesIncidentConditionCONTAINSNONE WorkflowCustomFieldSelectionResponseDataAttributesIncidentCondition = "CONTAINS_NONE"
	WorkflowCustomFieldSelectionResponseDataAttributesIncidentConditionIS           WorkflowCustomFieldSelectionResponseDataAttributesIncidentCondition = "IS"
	WorkflowCustomFieldSelectionResponseDataAttributesIncidentConditionNONE         WorkflowCustomFieldSelectionResponseDataAttributesIncidentCondition = "NONE"
	WorkflowCustomFieldSelectionResponseDataAttributesIncidentConditionSET          WorkflowCustomFieldSelectionResponseDataAttributesIncidentCondition = "SET"
	WorkflowCustomFieldSelectionResponseDataAttributesIncidentConditionUNSET        WorkflowCustomFieldSelectionResponseDataAttributesIncidentCondition = "UNSET"
)

// Defines values for WorkflowCustomFieldSelectionResponseDataType.
const (
	WorkflowCustomFieldSelectionResponseDataTypeWorkflowCustomFieldSelections WorkflowCustomFieldSelectionResponseDataType = "workflow_custom_field_selections"
)

// Defines values for WorkflowFormFieldConditionIncidentCondition.
const (
	WorkflowFormFieldConditionIncidentConditionANY          WorkflowFormFieldConditionIncidentCondition = "ANY"
	WorkflowFormFieldConditionIncidentConditionCONTAINS     WorkflowFormFieldConditionIncidentCondition = "CONTAINS"
	WorkflowFormFieldConditionIncidentConditionCONTAINSALL  WorkflowFormFieldConditionIncidentCondition = "CONTAINS_ALL"
	WorkflowFormFieldConditionIncidentConditionCONTAINSNONE WorkflowFormFieldConditionIncidentCondition = "CONTAINS_NONE"
	WorkflowFormFieldConditionIncidentConditionIS           WorkflowFormFieldConditionIncidentCondition = "IS"
	WorkflowFormFieldConditionIncidentConditionNONE         WorkflowFormFieldConditionIncidentCondition = "NONE"
	WorkflowFormFieldConditionIncidentConditionSET          WorkflowFormFieldConditionIncidentCondition = "SET"
	WorkflowFormFieldConditionIncidentConditionUNSET        WorkflowFormFieldConditionIncidentCondition = "UNSET"
)

// Defines values for WorkflowFormFieldConditionListDataAttributesIncidentCondition.
const (
	WorkflowFormFieldConditionListDataAttributesIncidentConditionANY          WorkflowFormFieldConditionListDataAttributesIncidentCondition = "ANY"
	WorkflowFormFieldConditionListDataAttributesIncidentConditionCONTAINS     WorkflowFormFieldConditionListDataAttributesIncidentCondition = "CONTAINS"
	WorkflowFormFieldConditionListDataAttributesIncidentConditionCONTAINSALL  WorkflowFormFieldConditionListDataAttributesIncidentCondition = "CONTAINS_ALL"
	WorkflowFormFieldConditionListDataAttributesIncidentConditionCONTAINSNONE WorkflowFormFieldConditionListDataAttributesIncidentCondition = "CONTAINS_NONE"
	WorkflowFormFieldConditionListDataAttributesIncidentConditionIS           WorkflowFormFieldConditionListDataAttributesIncidentCondition = "IS"
	WorkflowFormFieldConditionListDataAttributesIncidentConditionNONE         WorkflowFormFieldConditionListDataAttributesIncidentCondition = "NONE"
	WorkflowFormFieldConditionListDataAttributesIncidentConditionSET          WorkflowFormFieldConditionListDataAttributesIncidentCondition = "SET"
	WorkflowFormFieldConditionListDataAttributesIncidentConditionUNSET        WorkflowFormFieldConditionListDataAttributesIncidentCondition = "UNSET"
)

// Defines values for WorkflowFormFieldConditionListDataType.
const (
	WorkflowFormFieldConditionListDataTypeWorkflowFormFieldConditions WorkflowFormFieldConditionListDataType = "workflow_form_field_conditions"
)

// Defines values for WorkflowFormFieldConditionResponseDataAttributesIncidentCondition.
const (
	ANY          WorkflowFormFieldConditionResponseDataAttributesIncidentCondition = "ANY"
	CONTAINS     WorkflowFormFieldConditionResponseDataAttributesIncidentCondition = "CONTAINS"
	CONTAINSALL  WorkflowFormFieldConditionResponseDataAttributesIncidentCondition = "CONTAINS_ALL"
	CONTAINSNONE WorkflowFormFieldConditionResponseDataAttributesIncidentCondition = "CONTAINS_NONE"
	IS           WorkflowFormFieldConditionResponseDataAttributesIncidentCondition = "IS"
	NONE         WorkflowFormFieldConditionResponseDataAttributesIncidentCondition = "NONE"
	SET          WorkflowFormFieldConditionResponseDataAttributesIncidentCondition = "SET"
	UNSET        WorkflowFormFieldConditionResponseDataAttributesIncidentCondition = "UNSET"
)

// Defines values for WorkflowFormFieldConditionResponseDataType.
const (
	WorkflowFormFieldConditionResponseDataTypeWorkflowFormFieldConditions WorkflowFormFieldConditionResponseDataType = "workflow_form_field_conditions"
)

// Defines values for WorkflowGroupKind.
const (
	WorkflowGroupKindActionItem WorkflowGroupKind = "action_item"
	WorkflowGroupKindAlert      WorkflowGroupKind = "alert"
	WorkflowGroupKindIncident   WorkflowGroupKind = "incident"
	WorkflowGroupKindPostMortem WorkflowGroupKind = "post_mortem"
	WorkflowGroupKindPulse      WorkflowGroupKind = "pulse"
	WorkflowGroupKindSimple     WorkflowGroupKind = "simple"
)

// Defines values for WorkflowGroupListDataAttributesKind.
const (
	WorkflowGroupListDataAttributesKindActionItem WorkflowGroupListDataAttributesKind = "action_item"
	WorkflowGroupListDataAttributesKindAlert      WorkflowGroupListDataAttributesKind = "alert"
	WorkflowGroupListDataAttributesKindIncident   WorkflowGroupListDataAttributesKind = "incident"
	WorkflowGroupListDataAttributesKindPostMortem WorkflowGroupListDataAttributesKind = "post_mortem"
	WorkflowGroupListDataAttributesKindPulse      WorkflowGroupListDataAttributesKind = "pulse"
	WorkflowGroupListDataAttributesKindSimple     WorkflowGroupListDataAttributesKind = "simple"
)

// Defines values for WorkflowGroupListDataType.
const (
	WorkflowGroupListDataTypeWorkflowGroups WorkflowGroupListDataType = "workflow_groups"
)

// Defines values for WorkflowGroupResponseDataAttributesKind.
const (
	WorkflowGroupResponseDataAttributesKindActionItem WorkflowGroupResponseDataAttributesKind = "action_item"
	WorkflowGroupResponseDataAttributesKindAlert      WorkflowGroupResponseDataAttributesKind = "alert"
	WorkflowGroupResponseDataAttributesKindIncident   WorkflowGroupResponseDataAttributesKind = "incident"
	WorkflowGroupResponseDataAttributesKindPostMortem WorkflowGroupResponseDataAttributesKind = "post_mortem"
	WorkflowGroupResponseDataAttributesKindPulse      WorkflowGroupResponseDataAttributesKind = "pulse"
	WorkflowGroupResponseDataAttributesKindSimple     WorkflowGroupResponseDataAttributesKind = "simple"
)

// Defines values for WorkflowGroupResponseDataType.
const (
	WorkflowGroupResponseDataTypeWorkflowGroups WorkflowGroupResponseDataType = "workflow_groups"
)

// Defines values for WorkflowListDataAttributesRepeatOn.
const (
	WorkflowListDataAttributesRepeatOnF WorkflowListDataAttributesRepeatOn = "F"
	WorkflowListDataAttributesRepeatOnM WorkflowListDataAttributesRepeatOn = "M"
	WorkflowListDataAttributesRepeatOnR WorkflowListDataAttributesRepeatOn = "R"
	WorkflowListDataAttributesRepeatOnS WorkflowListDataAttributesRepeatOn = "S"
	WorkflowListDataAttributesRepeatOnT WorkflowListDataAttributesRepeatOn = "T"
	WorkflowListDataAttributesRepeatOnU WorkflowListDataAttributesRepeatOn = "U"
	WorkflowListDataAttributesRepeatOnW WorkflowListDataAttributesRepeatOn = "W"
)

// Defines values for WorkflowListDataType.
const (
	WorkflowListDataTypeWorkflows WorkflowListDataType = "workflows"
)

// Defines values for WorkflowResponseDataAttributesRepeatOn.
const (
	WorkflowResponseDataAttributesRepeatOnF WorkflowResponseDataAttributesRepeatOn = "F"
	WorkflowResponseDataAttributesRepeatOnM WorkflowResponseDataAttributesRepeatOn = "M"
	WorkflowResponseDataAttributesRepeatOnR WorkflowResponseDataAttributesRepeatOn = "R"
	WorkflowResponseDataAttributesRepeatOnS WorkflowResponseDataAttributesRepeatOn = "S"
	WorkflowResponseDataAttributesRepeatOnT WorkflowResponseDataAttributesRepeatOn = "T"
	WorkflowResponseDataAttributesRepeatOnU WorkflowResponseDataAttributesRepeatOn = "U"
	WorkflowResponseDataAttributesRepeatOnW WorkflowResponseDataAttributesRepeatOn = "W"
)

// Defines values for WorkflowResponseDataType.
const (
	WorkflowResponseDataTypeWorkflows WorkflowResponseDataType = "workflows"
)

// Defines values for WorkflowRunStatus.
const (
	WorkflowRunStatusCanceled  WorkflowRunStatus = "canceled"
	WorkflowRunStatusCompleted WorkflowRunStatus = "completed"
	WorkflowRunStatusFailed    WorkflowRunStatus = "failed"
	WorkflowRunStatusQueued    WorkflowRunStatus = "queued"
	WorkflowRunStatusStarted   WorkflowRunStatus = "started"
)

// Defines values for WorkflowRunTriggeredBy.
const (
	WorkflowRunTriggeredBySystem WorkflowRunTriggeredBy = "system"
	WorkflowRunTriggeredByUser   WorkflowRunTriggeredBy = "user"
)

// Defines values for WorkflowRunResponseDataAttributesStatus.
const (
	WorkflowRunResponseDataAttributesStatusCanceled  WorkflowRunResponseDataAttributesStatus = "canceled"
	WorkflowRunResponseDataAttributesStatusCompleted WorkflowRunResponseDataAttributesStatus = "completed"
	WorkflowRunResponseDataAttributesStatusFailed    WorkflowRunResponseDataAttributesStatus = "failed"
	WorkflowRunResponseDataAttributesStatusQueued    WorkflowRunResponseDataAttributesStatus = "queued"
	WorkflowRunResponseDataAttributesStatusStarted   WorkflowRunResponseDataAttributesStatus = "started"
)

// Defines values for WorkflowRunResponseDataAttributesTriggeredBy.
const (
	WorkflowRunResponseDataAttributesTriggeredBySystem WorkflowRunResponseDataAttributesTriggeredBy = "system"
	WorkflowRunResponseDataAttributesTriggeredByUser   WorkflowRunResponseDataAttributesTriggeredBy = "user"
)

// Defines values for WorkflowRunResponseDataType.
const (
	WorkflowRunResponseDataTypeWorkflowRuns WorkflowRunResponseDataType = "workflow_runs"
)

// Defines values for WorkflowRunsListDataAttributesStatus.
const (
	WorkflowRunsListDataAttributesStatusCanceled  WorkflowRunsListDataAttributesStatus = "canceled"
	WorkflowRunsListDataAttributesStatusCompleted WorkflowRunsListDataAttributesStatus = "completed"
	WorkflowRunsListDataAttributesStatusFailed    WorkflowRunsListDataAttributesStatus = "failed"
	WorkflowRunsListDataAttributesStatusQueued    WorkflowRunsListDataAttributesStatus = "queued"
	WorkflowRunsListDataAttributesStatusStarted   WorkflowRunsListDataAttributesStatus = "started"
)

// Defines values for WorkflowRunsListDataAttributesTriggeredBy.
const (
	WorkflowRunsListDataAttributesTriggeredBySystem WorkflowRunsListDataAttributesTriggeredBy = "system"
	WorkflowRunsListDataAttributesTriggeredByUser   WorkflowRunsListDataAttributesTriggeredBy = "user"
)

// Defines values for WorkflowRunsListDataType.
const (
	WorkflowRuns WorkflowRunsListDataType = "workflow_runs"
)

// Defines values for WorkflowTaskListDataType.
const (
	WorkflowTaskListDataTypeWorkflowTasks WorkflowTaskListDataType = "workflow_tasks"
)

// Defines values for WorkflowTaskResponseDataType.
const (
	WorkflowTaskResponseDataTypeWorkflowTasks WorkflowTaskResponseDataType = "workflow_tasks"
)

// ActionItemTriggerParams defines model for action_item_trigger_params.
type ActionItemTriggerParams struct {
	IncidentActionItemCondition         *ActionItemTriggerParamsIncidentActionItemCondition         `json:"incident_action_item_condition,omitempty"`
	IncidentActionItemConditionGroup    *ActionItemTriggerParamsIncidentActionItemConditionGroup    `json:"incident_action_item_condition_group,omitempty"`
	IncidentActionItemConditionKind     *ActionItemTriggerParamsIncidentActionItemConditionKind     `json:"incident_action_item_condition_kind,omitempty"`
	IncidentActionItemConditionPriority *ActionItemTriggerParamsIncidentActionItemConditionPriority `json:"incident_action_item_condition_priority,omitempty"`
	IncidentActionItemConditionStatus   *ActionItemTriggerParamsIncidentActionItemConditionStatus   `json:"incident_action_item_condition_status,omitempty"`
	IncidentActionItemGroupIds          *[]string                                                   `json:"incident_action_item_group_ids,omitempty"`
	IncidentActionItemKinds             *[]ActionItemTriggerParamsIncidentActionItemKinds           `json:"incident_action_item_kinds,omitempty"`
	IncidentActionItemPriorities        *[]ActionItemTriggerParamsIncidentActionItemPriorities      `json:"incident_action_item_priorities,omitempty"`
	IncidentActionItemStatuses          *[]ActionItemTriggerParamsIncidentActionItemStatuses        `json:"incident_action_item_statuses,omitempty"`
	IncidentCondition                   *ActionItemTriggerParamsIncidentCondition                   `json:"incident_condition,omitempty"`
	IncidentConditionAcknowledgedAt     *interface{}                                                `json:"incident_condition_acknowledged_at,omitempty"`
	IncidentConditionDetectedAt         *interface{}                                                `json:"incident_condition_detected_at,omitempty"`
	IncidentConditionEnvironment        *ActionItemTriggerParamsIncidentConditionEnvironment        `json:"incident_condition_environment,omitempty"`
	IncidentConditionFunctionality      *ActionItemTriggerParamsIncidentConditionFunctionality      `json:"incident_condition_functionality,omitempty"`
	IncidentConditionGroup              *ActionItemTriggerParamsIncidentConditionGroup              `json:"incident_condition_group,omitempty"`
	IncidentConditionIncidentRoles      *ActionItemTriggerParamsIncidentConditionIncidentRoles      `json:"incident_condition_incident_roles,omitempty"`
	IncidentConditionIncidentType       *ActionItemTriggerParamsIncidentConditionIncidentType       `json:"incident_condition_incident_type,omitempty"`
	IncidentConditionKind               *ActionItemTriggerParamsIncidentConditionKind               `json:"incident_condition_kind,omitempty"`
	IncidentConditionMitigatedAt        *interface{}                                                `json:"incident_condition_mitigated_at,omitempty"`
	IncidentConditionResolvedAt         *interface{}                                                `json:"incident_condition_resolved_at,omitempty"`
	IncidentConditionService            *ActionItemTriggerParamsIncidentConditionService            `json:"incident_condition_service,omitempty"`
	IncidentConditionSeverity           *ActionItemTriggerParamsIncidentConditionSeverity           `json:"incident_condition_severity,omitempty"`
	IncidentConditionStartedAt          *interface{}                                                `json:"incident_condition_started_at,omitempty"`
	IncidentConditionStatus             *ActionItemTriggerParamsIncidentConditionStatus             `json:"incident_condition_status,omitempty"`
	IncidentConditionSummary            *interface{}                                                `json:"incident_condition_summary,omitempty"`
	IncidentConditionVisibility         *ActionItemTriggerParamsIncidentConditionVisibility         `json:"incident_condition_visibility,omitempty"`
	IncidentConditionalInactivity       *interface{}                                                `json:"incident_conditional_inactivity,omitempty"`
	IncidentInactivityDuration          *interface{}                                                `json:"incident_inactivity_duration,omitempty"`
	IncidentKinds                       *[]ActionItemTriggerParamsIncidentKinds                     `json:"incident_kinds,omitempty"`
	IncidentStatuses                    *[]ActionItemTriggerParamsIncidentStatuses                  `json:"incident_statuses,omitempty"`
	IncidentVisibilities                *[]bool                                                     `json:"incident_visibilities,omitempty"`
	TriggerType                         ActionItemTriggerParamsTriggerType                          `json:"trigger_type"`
	Triggers                            *[]string                                                   `json:"triggers,omitempty"`
}

// ActionItemTriggerParamsIncidentActionItemCondition defines model for ActionItemTriggerParams.IncidentActionItemCondition.
type ActionItemTriggerParamsIncidentActionItemCondition string

// ActionItemTriggerParamsIncidentActionItemConditionGroup defines model for ActionItemTriggerParams.IncidentActionItemConditionGroup.
type ActionItemTriggerParamsIncidentActionItemConditionGroup string

// ActionItemTriggerParamsIncidentActionItemConditionKind defines model for ActionItemTriggerParams.IncidentActionItemConditionKind.
type ActionItemTriggerParamsIncidentActionItemConditionKind string

// ActionItemTriggerParamsIncidentActionItemConditionPriority defines model for ActionItemTriggerParams.IncidentActionItemConditionPriority.
type ActionItemTriggerParamsIncidentActionItemConditionPriority string

// ActionItemTriggerParamsIncidentActionItemConditionStatus defines model for ActionItemTriggerParams.IncidentActionItemConditionStatus.
type ActionItemTriggerParamsIncidentActionItemConditionStatus string

// ActionItemTriggerParamsIncidentActionItemKinds defines model for ActionItemTriggerParams.IncidentActionItemKinds.
type ActionItemTriggerParamsIncidentActionItemKinds string

// ActionItemTriggerParamsIncidentActionItemPriorities defines model for ActionItemTriggerParams.IncidentActionItemPriorities.
type ActionItemTriggerParamsIncidentActionItemPriorities string

// ActionItemTriggerParamsIncidentActionItemStatuses defines model for ActionItemTriggerParams.IncidentActionItemStatuses.
type ActionItemTriggerParamsIncidentActionItemStatuses string

// ActionItemTriggerParamsIncidentCondition defines model for ActionItemTriggerParams.IncidentCondition.
type ActionItemTriggerParamsIncidentCondition string

// ActionItemTriggerParamsIncidentConditionEnvironment defines model for ActionItemTriggerParams.IncidentConditionEnvironment.
type ActionItemTriggerParamsIncidentConditionEnvironment string

// ActionItemTriggerParamsIncidentConditionFunctionality defines model for ActionItemTriggerParams.IncidentConditionFunctionality.
type ActionItemTriggerParamsIncidentConditionFunctionality string

// ActionItemTriggerParamsIncidentConditionGroup defines model for ActionItemTriggerParams.IncidentConditionGroup.
type ActionItemTriggerParamsIncidentConditionGroup string

// ActionItemTriggerParamsIncidentConditionIncidentRoles defines model for ActionItemTriggerParams.IncidentConditionIncidentRoles.
type ActionItemTriggerParamsIncidentConditionIncidentRoles string

// ActionItemTriggerParamsIncidentConditionIncidentType defines model for ActionItemTriggerParams.IncidentConditionIncidentType.
type ActionItemTriggerParamsIncidentConditionIncidentType string

// ActionItemTriggerParamsIncidentConditionKind defines model for ActionItemTriggerParams.IncidentConditionKind.
type ActionItemTriggerParamsIncidentConditionKind string

// ActionItemTriggerParamsIncidentConditionService defines model for ActionItemTriggerParams.IncidentConditionService.
type ActionItemTriggerParamsIncidentConditionService string

// ActionItemTriggerParamsIncidentConditionSeverity defines model for ActionItemTriggerParams.IncidentConditionSeverity.
type ActionItemTriggerParamsIncidentConditionSeverity string

// ActionItemTriggerParamsIncidentConditionStatus defines model for ActionItemTriggerParams.IncidentConditionStatus.
type ActionItemTriggerParamsIncidentConditionStatus string

// ActionItemTriggerParamsIncidentConditionVisibility defines model for ActionItemTriggerParams.IncidentConditionVisibility.
type ActionItemTriggerParamsIncidentConditionVisibility string

// ActionItemTriggerParamsIncidentKinds defines model for ActionItemTriggerParams.IncidentKinds.
type ActionItemTriggerParamsIncidentKinds string

// ActionItemTriggerParamsIncidentStatuses defines model for ActionItemTriggerParams.IncidentStatuses.
type ActionItemTriggerParamsIncidentStatuses string

// ActionItemTriggerParamsTriggerType defines model for ActionItemTriggerParams.TriggerType.
type ActionItemTriggerParamsTriggerType string

// AddActionItemTaskParams defines model for add_action_item_task_params.
type AddActionItemTaskParams struct {
	//  The user this action item is assigned to
	AssignedToUser *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"assigned_to_user,omitempty"`

	// [DEPRECATED] Use assigned_to_user attribute instead. The user id this action item is assigned to
	AssignedToUserId *string `json:"assigned_to_user_id,omitempty"`

	// The action item description
	Description *string `json:"description,omitempty"`

	// The role id this action item is associated with
	IncidentRoleId *string `json:"incident_role_id,omitempty"`

	// The action item kind
	Kind                   *string `json:"kind,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// The action item priority
	Priority AddActionItemTaskParamsPriority `json:"priority"`

	// The action item status
	Status AddActionItemTaskParamsStatus `json:"status"`

	// The action item summary
	Summary  string                           `json:"summary"`
	TaskType *AddActionItemTaskParamsTaskType `json:"task_type,omitempty"`
}

// The action item priority
type AddActionItemTaskParamsPriority string

// The action item status
type AddActionItemTaskParamsStatus string

// AddActionItemTaskParamsTaskType defines model for AddActionItemTaskParams.TaskType.
type AddActionItemTaskParamsTaskType string

// AddRoleTaskParams defines model for add_role_task_params.
type AddRoleTaskParams struct {
	//  The user this role is assigned to
	AssignedToUser *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"assigned_to_user,omitempty"`

	// [DEPRECATED] Use assigned_to_user attribute instead. The user id this role is assigned to
	AssignedToUserId *string `json:"assigned_to_user_id,omitempty"`

	// The role id to add to the incident
	IncidentRoleId string                     `json:"incident_role_id"`
	TaskType       *AddRoleTaskParamsTaskType `json:"task_type,omitempty"`
}

// AddRoleTaskParamsTaskType defines model for AddRoleTaskParams.TaskType.
type AddRoleTaskParamsTaskType string

// AddSlackBookmarkTaskParams defines model for add_slack_bookmark_task_params.
type AddSlackBookmarkTaskParams struct {
	Channel struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channel"`

	// The bookmark emoji
	Emoji *string `json:"emoji,omitempty"`

	// The bookmark link. Required if not a playbook bookmark
	Link *string `json:"link"`

	// The playbook id if bookmark is of an incident playbook
	PlaybookId *string                             `json:"playbook_id,omitempty"`
	TaskType   *AddSlackBookmarkTaskParamsTaskType `json:"task_type,omitempty"`

	// The bookmark title. Required if not a playbook bookmark
	Title *string `json:"title"`
}

// AddSlackBookmarkTaskParamsTaskType defines model for AddSlackBookmarkTaskParams.TaskType.
type AddSlackBookmarkTaskParamsTaskType string

// AddSubscribers defines model for add_subscribers.
type AddSubscribers struct {
	Data struct {
		Attributes struct {
			// Users without read permissions for private incidents will be removed from the subscriber list of this incident
			RemoveUsersWithNoPrivateIncidentAccess *bool `json:"remove_users_with_no_private_incident_access"`

			// IDs of users you wish to add to list of subscribers for this incident
			UserIds *[]string `json:"user_ids"`
		} `json:"attributes"`
		Type AddSubscribersDataType `json:"type"`
	} `json:"data"`
}

// AddSubscribersDataType defines model for AddSubscribers.Data.Type.
type AddSubscribersDataType string

// AddTeamTaskParams defines model for add_team_task_params.
type AddTeamTaskParams struct {
	// The team id
	GroupId  string                     `json:"group_id"`
	TaskType *AddTeamTaskParamsTaskType `json:"task_type,omitempty"`
}

// AddTeamTaskParamsTaskType defines model for AddTeamTaskParams.TaskType.
type AddTeamTaskParamsTaskType string

// AddToTimelineTaskParams defines model for add_to_timeline_task_params.
type AddToTimelineTaskParams struct {
	// The timeline event description
	Event               string `json:"event"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *AddToTimelineTaskParamsTaskType `json:"task_type,omitempty"`

	// A URL for the timeline event
	Url *string `json:"url,omitempty"`
}

// AddToTimelineTaskParamsTaskType defines model for AddToTimelineTaskParams.TaskType.
type AddToTimelineTaskParamsTaskType string

// Alert defines model for alert.
type Alert struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// Additional data
	Data *map[string]interface{} `json:"data"`

	// Environments attached to the alert
	Environments *[]struct {
		// The hex color of the environment
		Color *string `json:"color"`

		// Date of creation
		CreatedAt string `json:"created_at"`

		// The description of the environment
		Description *string `json:"description"`

		// The name of the environment
		Name string `json:"name"`

		// Emails attached to the environment
		NotifyEmails *[]string `json:"notify_emails"`

		// Position of the environment
		Position *int `json:"position"`

		// Slack Aliases associated with this environment
		SlackAliases *[]struct {
			// Slack alias ID
			Id string `json:"id"`

			// Slack alias name
			Name string `json:"name"`
		} `json:"slack_aliases"`

		// Slack Channels associated with this environment
		SlackChannels *[]struct {
			// Slack channel ID
			Id string `json:"id"`

			// Slack channel name
			Name string `json:"name"`
		} `json:"slack_channels"`

		// The slug of the environment
		Slug *string `json:"slug,omitempty"`

		// Date of last update
		UpdatedAt string `json:"updated_at"`
	} `json:"environments,omitempty"`

	// External ID
	ExternalId *string `json:"external_id"`

	// External Url
	ExternalUrl *string `json:"external_url"`
	Labels      *[]struct {
		// Key of the tag
		Key string `json:"key"`

		// Value of the tag
		Value string `json:"value"`
	} `json:"labels,omitempty"`

	// Services attached to the alert
	Services *[]struct {
		// The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
		BackstageId *string `json:"backstage_id"`

		// The hex color of the service
		Color *string `json:"color"`

		// Date of creation
		CreatedAt string `json:"created_at"`

		// The description of the service
		Description *string `json:"description"`

		// Environments associated with this service
		EnvironmentIds *[]string `json:"environment_ids"`

		// The GitHub repository branch associated to this service. eg: main
		GithubRepositoryBranch *string `json:"github_repository_branch"`

		// The GitHub repository name associated to this service. eg: rootlyhq/my-service
		GithubRepositoryName *string `json:"github_repository_name"`

		// The Gitlab repository branch associated to this service. eg: main
		GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

		// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
		GitlabRepositoryName *string `json:"gitlab_repository_name"`

		// The name of the service
		Name string `json:"name"`

		// Emails attached to the service
		NotifyEmails *[]string `json:"notify_emails"`

		// The Opsgenie service id associated to this service
		OpsgenieId *string `json:"opsgenie_id"`

		// Owner Teams associated with this service
		OwnersGroupIds *[]string `json:"owners_group_ids"`

		// Owner Users associated with this service
		OwnersUserIds *[]int `json:"owners_user_ids"`

		// The PagerDuty service id associated to this service
		PagerdutyId *string `json:"pagerduty_id"`

		// Position of the service
		Position *int `json:"position"`

		// The public description of the service
		PublicDescription *string `json:"public_description"`

		// Services dependent on this service
		ServiceIds *[]string `json:"service_ids"`

		// Slack Aliases associated with this service
		SlackAliases *[]struct {
			// Slack alias ID
			Id string `json:"id"`

			// Slack alias name
			Name string `json:"name"`
		} `json:"slack_aliases"`

		// Slack Channels associated with this service
		SlackChannels *[]struct {
			// Slack channel ID
			Id string `json:"id"`

			// Slack channel name
			Name string `json:"name"`
		} `json:"slack_channels"`

		// The slug of the service
		Slug *string `json:"slug,omitempty"`

		// The status of the service
		Status *AlertServicesStatus `json:"status,omitempty"`

		// Date of last update
		UpdatedAt string `json:"updated_at"`
	} `json:"services,omitempty"`

	// The source of the alert (eg: zendesk)
	Source string `json:"source"`

	// The summary of the alert
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The status of the service
type AlertServicesStatus string

// AlertList defines model for alert_list.
type AlertList struct {
	Data []struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// Additional data
			Data *map[string]interface{} `json:"data"`

			// Environments attached to the alert
			Environments *[]struct {
				// The hex color of the environment
				Color *string `json:"color"`

				// Date of creation
				CreatedAt string `json:"created_at"`

				// The description of the environment
				Description *string `json:"description"`

				// The name of the environment
				Name string `json:"name"`

				// Emails attached to the environment
				NotifyEmails *[]string `json:"notify_emails"`

				// Position of the environment
				Position *int `json:"position"`

				// Slack Aliases associated with this environment
				SlackAliases *[]struct {
					// Slack alias ID
					Id string `json:"id"`

					// Slack alias name
					Name string `json:"name"`
				} `json:"slack_aliases"`

				// Slack Channels associated with this environment
				SlackChannels *[]struct {
					// Slack channel ID
					Id string `json:"id"`

					// Slack channel name
					Name string `json:"name"`
				} `json:"slack_channels"`

				// The slug of the environment
				Slug *string `json:"slug,omitempty"`

				// Date of last update
				UpdatedAt string `json:"updated_at"`
			} `json:"environments,omitempty"`

			// External ID
			ExternalId *string `json:"external_id"`

			// External Url
			ExternalUrl *string `json:"external_url"`
			Labels      *[]struct {
				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`

			// Services attached to the alert
			Services *[]struct {
				// The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
				BackstageId *string `json:"backstage_id"`

				// The hex color of the service
				Color *string `json:"color"`

				// Date of creation
				CreatedAt string `json:"created_at"`

				// The description of the service
				Description *string `json:"description"`

				// Environments associated with this service
				EnvironmentIds *[]string `json:"environment_ids"`

				// The GitHub repository branch associated to this service. eg: main
				GithubRepositoryBranch *string `json:"github_repository_branch"`

				// The GitHub repository name associated to this service. eg: rootlyhq/my-service
				GithubRepositoryName *string `json:"github_repository_name"`

				// The Gitlab repository branch associated to this service. eg: main
				GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

				// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
				GitlabRepositoryName *string `json:"gitlab_repository_name"`

				// The name of the service
				Name string `json:"name"`

				// Emails attached to the service
				NotifyEmails *[]string `json:"notify_emails"`

				// The Opsgenie service id associated to this service
				OpsgenieId *string `json:"opsgenie_id"`

				// Owner Teams associated with this service
				OwnersGroupIds *[]string `json:"owners_group_ids"`

				// Owner Users associated with this service
				OwnersUserIds *[]int `json:"owners_user_ids"`

				// The PagerDuty service id associated to this service
				PagerdutyId *string `json:"pagerduty_id"`

				// Position of the service
				Position *int `json:"position"`

				// The public description of the service
				PublicDescription *string `json:"public_description"`

				// Services dependent on this service
				ServiceIds *[]string `json:"service_ids"`

				// Slack Aliases associated with this service
				SlackAliases *[]struct {
					// Slack alias ID
					Id string `json:"id"`

					// Slack alias name
					Name string `json:"name"`
				} `json:"slack_aliases"`

				// Slack Channels associated with this service
				SlackChannels *[]struct {
					// Slack channel ID
					Id string `json:"id"`

					// Slack channel name
					Name string `json:"name"`
				} `json:"slack_channels"`

				// The slug of the service
				Slug *string `json:"slug,omitempty"`

				// The status of the service
				Status *AlertListDataAttributesServicesStatus `json:"status,omitempty"`

				// Date of last update
				UpdatedAt string `json:"updated_at"`
			} `json:"services,omitempty"`

			// The source of the alert (eg: zendesk)
			Source string `json:"source"`

			// The summary of the alert
			Summary string `json:"summary"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the alert
		Id string `json:"id"`

		// The source of the alert (eg: zendesk)
		Source *string           `json:"source,omitempty"`
		Type   AlertListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The status of the service
type AlertListDataAttributesServicesStatus string

// AlertListDataType defines model for AlertList.Data.Type.
type AlertListDataType string

// AlertResponse defines model for alert_response.
type AlertResponse struct {
	Data struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// Additional data
			Data *map[string]interface{} `json:"data"`

			// Environments attached to the alert
			Environments *[]struct {
				// The hex color of the environment
				Color *string `json:"color"`

				// Date of creation
				CreatedAt string `json:"created_at"`

				// The description of the environment
				Description *string `json:"description"`

				// The name of the environment
				Name string `json:"name"`

				// Emails attached to the environment
				NotifyEmails *[]string `json:"notify_emails"`

				// Position of the environment
				Position *int `json:"position"`

				// Slack Aliases associated with this environment
				SlackAliases *[]struct {
					// Slack alias ID
					Id string `json:"id"`

					// Slack alias name
					Name string `json:"name"`
				} `json:"slack_aliases"`

				// Slack Channels associated with this environment
				SlackChannels *[]struct {
					// Slack channel ID
					Id string `json:"id"`

					// Slack channel name
					Name string `json:"name"`
				} `json:"slack_channels"`

				// The slug of the environment
				Slug *string `json:"slug,omitempty"`

				// Date of last update
				UpdatedAt string `json:"updated_at"`
			} `json:"environments,omitempty"`

			// External ID
			ExternalId *string `json:"external_id"`

			// External Url
			ExternalUrl *string `json:"external_url"`
			Labels      *[]struct {
				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`

			// Services attached to the alert
			Services *[]struct {
				// The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
				BackstageId *string `json:"backstage_id"`

				// The hex color of the service
				Color *string `json:"color"`

				// Date of creation
				CreatedAt string `json:"created_at"`

				// The description of the service
				Description *string `json:"description"`

				// Environments associated with this service
				EnvironmentIds *[]string `json:"environment_ids"`

				// The GitHub repository branch associated to this service. eg: main
				GithubRepositoryBranch *string `json:"github_repository_branch"`

				// The GitHub repository name associated to this service. eg: rootlyhq/my-service
				GithubRepositoryName *string `json:"github_repository_name"`

				// The Gitlab repository branch associated to this service. eg: main
				GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

				// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
				GitlabRepositoryName *string `json:"gitlab_repository_name"`

				// The name of the service
				Name string `json:"name"`

				// Emails attached to the service
				NotifyEmails *[]string `json:"notify_emails"`

				// The Opsgenie service id associated to this service
				OpsgenieId *string `json:"opsgenie_id"`

				// Owner Teams associated with this service
				OwnersGroupIds *[]string `json:"owners_group_ids"`

				// Owner Users associated with this service
				OwnersUserIds *[]int `json:"owners_user_ids"`

				// The PagerDuty service id associated to this service
				PagerdutyId *string `json:"pagerduty_id"`

				// Position of the service
				Position *int `json:"position"`

				// The public description of the service
				PublicDescription *string `json:"public_description"`

				// Services dependent on this service
				ServiceIds *[]string `json:"service_ids"`

				// Slack Aliases associated with this service
				SlackAliases *[]struct {
					// Slack alias ID
					Id string `json:"id"`

					// Slack alias name
					Name string `json:"name"`
				} `json:"slack_aliases"`

				// Slack Channels associated with this service
				SlackChannels *[]struct {
					// Slack channel ID
					Id string `json:"id"`

					// Slack channel name
					Name string `json:"name"`
				} `json:"slack_channels"`

				// The slug of the service
				Slug *string `json:"slug,omitempty"`

				// The status of the service
				Status *AlertResponseDataAttributesServicesStatus `json:"status,omitempty"`

				// Date of last update
				UpdatedAt string `json:"updated_at"`
			} `json:"services,omitempty"`

			// The source of the alert (eg: zendesk)
			Source string `json:"source"`

			// The summary of the alert
			Summary string `json:"summary"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the alert
		Id string `json:"id"`

		// The source of the alert (eg: zendesk)
		Source *string               `json:"source,omitempty"`
		Type   AlertResponseDataType `json:"type"`
	} `json:"data"`
}

// The status of the service
type AlertResponseDataAttributesServicesStatus string

// AlertResponseDataType defines model for AlertResponse.Data.Type.
type AlertResponseDataType string

// AlertTriggerParams defines model for alert_trigger_params.
type AlertTriggerParams struct {
	AlertCondition                 *AlertTriggerParamsAlertCondition        `json:"alert_condition,omitempty"`
	AlertConditionLabel            *AlertTriggerParamsAlertConditionLabel   `json:"alert_condition_label,omitempty"`
	AlertConditionLabelUseRegexp   *bool                                    `json:"alert_condition_label_use_regexp,omitempty"`
	AlertConditionPayload          *AlertTriggerParamsAlertConditionPayload `json:"alert_condition_payload,omitempty"`
	AlertConditionPayloadUseRegexp *bool                                    `json:"alert_condition_payload_use_regexp,omitempty"`
	AlertConditionSource           *AlertTriggerParamsAlertConditionSource  `json:"alert_condition_source,omitempty"`
	AlertConditionSourceUseRegexp  *bool                                    `json:"alert_condition_source_use_regexp,omitempty"`
	AlertLabels                    *[]string                                `json:"alert_labels,omitempty"`
	AlertPayload                   *[]string                                `json:"alert_payload,omitempty"`

	// You can use jsonpath syntax. eg: $.incident.teams[*]
	AlertQueryPayload *string                       `json:"alert_query_payload"`
	AlertSources      *[]string                     `json:"alert_sources,omitempty"`
	TriggerType       AlertTriggerParamsTriggerType `json:"trigger_type"`
	Triggers          *[]AlertTriggerParamsTriggers `json:"triggers,omitempty"`
}

// AlertTriggerParamsAlertCondition defines model for AlertTriggerParams.AlertCondition.
type AlertTriggerParamsAlertCondition string

// AlertTriggerParamsAlertConditionLabel defines model for AlertTriggerParams.AlertConditionLabel.
type AlertTriggerParamsAlertConditionLabel string

// AlertTriggerParamsAlertConditionPayload defines model for AlertTriggerParams.AlertConditionPayload.
type AlertTriggerParamsAlertConditionPayload string

// AlertTriggerParamsAlertConditionSource defines model for AlertTriggerParams.AlertConditionSource.
type AlertTriggerParamsAlertConditionSource string

// AlertTriggerParamsTriggerType defines model for AlertTriggerParams.TriggerType.
type AlertTriggerParamsTriggerType string

// Actions that trigger the workflow
type AlertTriggerParamsTriggers string

// ArchiveSlackChannelsTaskParams defines model for archive_slack_channels_task_params.
type ArchiveSlackChannelsTaskParams struct {
	Channels []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channels"`
	TaskType *ArchiveSlackChannelsTaskParamsTaskType `json:"task_type,omitempty"`
}

// ArchiveSlackChannelsTaskParamsTaskType defines model for ArchiveSlackChannelsTaskParams.TaskType.
type ArchiveSlackChannelsTaskParamsTaskType string

// AssignRoleToUser defines model for assign_role_to_user.
type AssignRoleToUser struct {
	Data struct {
		Attributes struct {
			// ID of the incident role
			IncidentRoleId *string `json:"incident_role_id,omitempty"`

			// ID of user you wish to assign this incident
			UserId *string `json:"user_id,omitempty"`
		} `json:"attributes"`
		Type AssignRoleToUserDataType `json:"type"`
	} `json:"data"`
}

// AssignRoleToUserDataType defines model for AssignRoleToUser.Data.Type.
type AssignRoleToUserDataType string

// AttachDatadogDashboardsTaskParams defines model for attach_datadog_dashboards_task_params.
type AttachDatadogDashboardsTaskParams struct {
	Dashboards []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"dashboards"`
	PostToIncidentTimeline *bool `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *AttachDatadogDashboardsTaskParamsTaskType `json:"task_type,omitempty"`
}

// AttachDatadogDashboardsTaskParamsTaskType defines model for AttachDatadogDashboardsTaskParams.TaskType.
type AttachDatadogDashboardsTaskParamsTaskType string

// Audit defines model for audit.
type Audit struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// Describes the action that was taken.
	Event string `json:"event"`

	// ID of audit
	Id *float32 `json:"id"`

	// ID of the affected object
	ItemId *string `json:"item_id"`

	// Describes the object in which the action was taken on
	ItemType *AuditItemType `json:"item_type"`

	// The object in which the action was taken on
	Object *map[string]interface{} `json:"object"`

	// The changes that occurred on the object
	ObjectChanges *map[string]interface{} `json:"object_changes"`

	// The ID of who took action on the object. Together with whodunnit_type can be used to find the user
	UserId *float32 `json:"user_id"`
}

// Describes the object in which the action was taken on
type AuditItemType string

// AuditsList defines model for audits_list.
type AuditsList struct {
	Data []struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// Describes the action that was taken.
			Event string `json:"event"`

			// ID of audit
			Id *float32 `json:"id"`

			// ID of the affected object
			ItemId *string `json:"item_id"`

			// Describes the object in which the action was taken on
			ItemType *AuditsListDataAttributesItemType `json:"item_type"`

			// The object in which the action was taken on
			Object *map[string]interface{} `json:"object"`

			// The changes that occurred on the object
			ObjectChanges *map[string]interface{} `json:"object_changes"`

			// The ID of who took action on the object. Together with whodunnit_type can be used to find the user
			UserId *float32 `json:"user_id"`
		} `json:"attributes"`

		// Unique ID of the audit log item
		Id   string             `json:"id"`
		Type AuditsListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// Describes the object in which the action was taken on
type AuditsListDataAttributesItemType string

// AuditsListDataType defines model for AuditsList.Data.Type.
type AuditsListDataType string

// Authorization defines model for authorization.
type Authorization struct {
	// The id of the resource being accessed.
	AuthorizableId string `json:"authorizable_id"`

	// The type of resource being accessed.
	AuthorizableType AuthorizationAuthorizableType `json:"authorizable_type"`
	CreatedAt        string                        `json:"created_at"`

	// The resource id granted access.
	GranteeId string `json:"grantee_id"`

	// The type of resource granted access.
	GranteeType AuthorizationGranteeType   `json:"grantee_type"`
	Permissions []AuthorizationPermissions `json:"permissions"`
	UpdatedAt   string                     `json:"updated_at"`
}

// The type of resource being accessed.
type AuthorizationAuthorizableType string

// The type of resource granted access.
type AuthorizationGranteeType string

// AuthorizationPermissions defines model for Authorization.Permissions.
type AuthorizationPermissions string

// AuthorizationList defines model for authorization_list.
type AuthorizationList struct {
	Data []struct {
		Attributes struct {
			// The id of the resource being accessed.
			AuthorizableId string `json:"authorizable_id"`

			// The type of resource being accessed.
			AuthorizableType AuthorizationListDataAttributesAuthorizableType `json:"authorizable_type"`
			CreatedAt        string                                          `json:"created_at"`

			// The resource id granted access.
			GranteeId string `json:"grantee_id"`

			// The type of resource granted access.
			GranteeType AuthorizationListDataAttributesGranteeType   `json:"grantee_type"`
			Permissions []AuthorizationListDataAttributesPermissions `json:"permissions"`
			UpdatedAt   string                                       `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the authorization
		Id   string                    `json:"id"`
		Type AuthorizationListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The type of resource being accessed.
type AuthorizationListDataAttributesAuthorizableType string

// The type of resource granted access.
type AuthorizationListDataAttributesGranteeType string

// AuthorizationListDataAttributesPermissions defines model for AuthorizationList.Data.Attributes.Permissions.
type AuthorizationListDataAttributesPermissions string

// AuthorizationListDataType defines model for AuthorizationList.Data.Type.
type AuthorizationListDataType string

// AuthorizationResponse defines model for authorization_response.
type AuthorizationResponse struct {
	Data struct {
		Attributes struct {
			// The id of the resource being accessed.
			AuthorizableId string `json:"authorizable_id"`

			// The type of resource being accessed.
			AuthorizableType AuthorizationResponseDataAttributesAuthorizableType `json:"authorizable_type"`
			CreatedAt        string                                              `json:"created_at"`

			// The resource id granted access.
			GranteeId string `json:"grantee_id"`

			// The type of resource granted access.
			GranteeType AuthorizationResponseDataAttributesGranteeType   `json:"grantee_type"`
			Permissions []AuthorizationResponseDataAttributesPermissions `json:"permissions"`
			UpdatedAt   string                                           `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the authorization
		Id   string                        `json:"id"`
		Type AuthorizationResponseDataType `json:"type"`
	} `json:"data"`
}

// The type of resource being accessed.
type AuthorizationResponseDataAttributesAuthorizableType string

// The type of resource granted access.
type AuthorizationResponseDataAttributesGranteeType string

// AuthorizationResponseDataAttributesPermissions defines model for AuthorizationResponse.Data.Attributes.Permissions.
type AuthorizationResponseDataAttributesPermissions string

// AuthorizationResponseDataType defines model for AuthorizationResponse.Data.Type.
type AuthorizationResponseDataType string

// AutoAssignRoleOpsgenieTaskParams defines model for auto_assign_role_opsgenie_task_params.
type AutoAssignRoleOpsgenieTaskParams struct {
	// The role id
	IncidentRoleId string `json:"incident_role_id"`
	Schedule       struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule"`
	TaskType *AutoAssignRoleOpsgenieTaskParamsTaskType `json:"task_type,omitempty"`
}

// AutoAssignRoleOpsgenieTaskParamsTaskType defines model for AutoAssignRoleOpsgenieTaskParams.TaskType.
type AutoAssignRoleOpsgenieTaskParamsTaskType string

// AutoAssignRolePagerdutyTaskParams defines model for auto_assign_role_pagerduty_task_params.
type AutoAssignRolePagerdutyTaskParams struct {
	EscalationPolicy *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"escalation_policy,omitempty"`

	// The role id
	IncidentRoleId string `json:"incident_role_id"`
	Schedule       *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule,omitempty"`
	Service *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"service,omitempty"`
	TaskType *AutoAssignRolePagerdutyTaskParamsTaskType `json:"task_type,omitempty"`
}

// AutoAssignRolePagerdutyTaskParamsTaskType defines model for AutoAssignRolePagerdutyTaskParams.TaskType.
type AutoAssignRolePagerdutyTaskParamsTaskType string

// AutoAssignRoleVictorOpsTaskParams defines model for auto_assign_role_victor_ops_task_params.
type AutoAssignRoleVictorOpsTaskParams struct {
	// The role id
	IncidentRoleId string                                     `json:"incident_role_id"`
	TaskType       *AutoAssignRoleVictorOpsTaskParamsTaskType `json:"task_type,omitempty"`
	Team           struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"team"`
}

// AutoAssignRoleVictorOpsTaskParamsTaskType defines model for AutoAssignRoleVictorOpsTaskParams.TaskType.
type AutoAssignRoleVictorOpsTaskParamsTaskType string

// CallPeopleTaskParams defines model for call_people_task_params.
type CallPeopleTaskParams struct {
	// The message to be read by text-to-voice
	Content string `json:"content"`

	// The name
	Name         string                        `json:"name"`
	PhoneNumbers []string                      `json:"phone_numbers"`
	TaskType     *CallPeopleTaskParamsTaskType `json:"task_type,omitempty"`
}

// CallPeopleTaskParamsTaskType defines model for CallPeopleTaskParams.TaskType.
type CallPeopleTaskParamsTaskType string

// CancelIncident defines model for cancel_incident.
type CancelIncident struct {
	Data struct {
		Attributes struct {
			// Why was the incident cancelled?
			CancellationMessage *string `json:"cancellation_message"`
		} `json:"attributes"`
		Type CancelIncidentDataType `json:"type"`
	} `json:"data"`
}

// CancelIncidentDataType defines model for CancelIncident.Data.Type.
type CancelIncidentDataType string

// Cause defines model for cause.
type Cause struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the cause
	Description *string `json:"description"`

	// The name of the cause
	Name string `json:"name"`

	// Position of the cause
	Position *int `json:"position"`

	// The slug of the cause
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// CauseList defines model for cause_list.
type CauseList struct {
	Data []struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the cause
			Description *string `json:"description"`

			// The name of the cause
			Name string `json:"name"`

			// Position of the cause
			Position *int `json:"position"`

			// The slug of the cause
			Slug *string `json:"slug,omitempty"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the cause
		Id   string            `json:"id"`
		Type CauseListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// CauseListDataType defines model for CauseList.Data.Type.
type CauseListDataType string

// CauseResponse defines model for cause_response.
type CauseResponse struct {
	Data struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the cause
			Description *string `json:"description"`

			// The name of the cause
			Name string `json:"name"`

			// Position of the cause
			Position *int `json:"position"`

			// The slug of the cause
			Slug *string `json:"slug,omitempty"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the cause
		Id   string                `json:"id"`
		Type CauseResponseDataType `json:"type"`
	} `json:"data"`
}

// CauseResponseDataType defines model for CauseResponse.Data.Type.
type CauseResponseDataType string

// CreateAirtableTableRecordTaskParams defines model for create_airtable_table_record_task_params.
type CreateAirtableTableRecordTaskParams struct {
	Base struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"base"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`
	Table               struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"table"`
	TaskType *CreateAirtableTableRecordTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateAirtableTableRecordTaskParamsTaskType defines model for CreateAirtableTableRecordTaskParams.TaskType.
type CreateAirtableTableRecordTaskParamsTaskType string

// CreateAsanaSubtaskTaskParams defines model for create_asana_subtask_task_params.
type CreateAsanaSubtaskTaskParams struct {
	// The assigned user's email
	AssignUserEmail *string `json:"assign_user_email,omitempty"`
	Completion      struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string                                          `json:"custom_fields_mapping"`
	DependencyDirection *CreateAsanaSubtaskTaskParamsDependencyDirection `json:"dependency_direction,omitempty"`

	// Dependent task ids. Supports liquid syntax
	DependentTaskIds *[]string `json:"dependent_task_ids"`

	// The due date
	DueDate *string `json:"due_date,omitempty"`
	Notes   *string `json:"notes,omitempty"`

	// The parent task id
	ParentTaskId string                                `json:"parent_task_id"`
	TaskType     *CreateAsanaSubtaskTaskParamsTaskType `json:"task_type,omitempty"`

	// The subtask title
	Title string `json:"title"`
}

// CreateAsanaSubtaskTaskParamsDependencyDirection defines model for CreateAsanaSubtaskTaskParams.DependencyDirection.
type CreateAsanaSubtaskTaskParamsDependencyDirection string

// CreateAsanaSubtaskTaskParamsTaskType defines model for CreateAsanaSubtaskTaskParams.TaskType.
type CreateAsanaSubtaskTaskParamsTaskType string

// CreateAsanaTaskTaskParams defines model for create_asana_task_task_params.
type CreateAsanaTaskTaskParams struct {
	// The assigned user's email
	AssignUserEmail *string `json:"assign_user_email,omitempty"`
	Completion      struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string                                       `json:"custom_fields_mapping"`
	DependencyDirection *CreateAsanaTaskTaskParamsDependencyDirection `json:"dependency_direction,omitempty"`

	// Dependent task ids. Supports liquid syntax
	DependentTaskIds *[]string `json:"dependent_task_ids"`

	// The due date
	DueDate  *string `json:"due_date,omitempty"`
	Notes    *string `json:"notes,omitempty"`
	Projects []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"projects"`
	TaskType *CreateAsanaTaskTaskParamsTaskType `json:"task_type,omitempty"`

	// The task title
	Title     string `json:"title"`
	Workspace struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"workspace"`
}

// CreateAsanaTaskTaskParamsDependencyDirection defines model for CreateAsanaTaskTaskParams.DependencyDirection.
type CreateAsanaTaskTaskParamsDependencyDirection string

// CreateAsanaTaskTaskParamsTaskType defines model for CreateAsanaTaskTaskParams.TaskType.
type CreateAsanaTaskTaskParamsTaskType string

// CreateClickupTaskTaskParams defines model for create_clickup_task_task_params.
type CreateClickupTaskTaskParams struct {
	// Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The task description
	Description *string `json:"description,omitempty"`

	// The due date
	DueDate *string `json:"due_date,omitempty"`

	// The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The task tags
	Tags *string `json:"tags,omitempty"`

	// Additional ClickUp task attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON
	TaskPayload *string                              `json:"task_payload"`
	TaskType    *CreateClickupTaskTaskParamsTaskType `json:"task_type,omitempty"`

	// The task title
	Title string `json:"title"`
}

// CreateClickupTaskTaskParamsTaskType defines model for CreateClickupTaskTaskParams.TaskType.
type CreateClickupTaskTaskParamsTaskType string

// CreateConfluencePageTaskParams defines model for create_confluence_page_task_params.
type CreateConfluencePageTaskParams struct {
	Ancestor *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"ancestor,omitempty"`

	// The page content
	Content *string `json:"content,omitempty"`

	// Specify integration id if you have more than one Confluence instance
	Integration *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"integration,omitempty"`
	MarkPostMortemAsPublished *bool `json:"mark_post_mortem_as_published,omitempty"`

	// The Retrospective template to use
	PostMortemTemplateId *string `json:"post_mortem_template_id,omitempty"`
	Space                struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"space"`
	TaskType *CreateConfluencePageTaskParamsTaskType `json:"task_type,omitempty"`
	Template *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"template,omitempty"`

	// The page title
	Title string `json:"title"`
}

// CreateConfluencePageTaskParamsTaskType defines model for CreateConfluencePageTaskParams.TaskType.
type CreateConfluencePageTaskParamsTaskType string

// CreateDatadogNotebookTaskParams defines model for create_datadog_notebook_task_params.
type CreateDatadogNotebookTaskParams struct {
	// The notebook content
	Content *string `json:"content,omitempty"`

	// The notebook kind
	Kind                      CreateDatadogNotebookTaskParamsKind `json:"kind"`
	MarkPostMortemAsPublished *bool                               `json:"mark_post_mortem_as_published,omitempty"`

	// Retrospective template to use when creating notebook, if desired
	PostMortemTemplateId *string                                  `json:"post_mortem_template_id,omitempty"`
	TaskType             *CreateDatadogNotebookTaskParamsTaskType `json:"task_type,omitempty"`
	Template             *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"template,omitempty"`

	// The notebook title
	Title string `json:"title"`
}

// The notebook kind
type CreateDatadogNotebookTaskParamsKind string

// CreateDatadogNotebookTaskParamsTaskType defines model for CreateDatadogNotebookTaskParams.TaskType.
type CreateDatadogNotebookTaskParamsTaskType string

// CreateDropboxPaperPageTaskParams defines model for create_dropbox_paper_page_task_params.
type CreateDropboxPaperPageTaskParams struct {
	// The page content
	Content                   *string `json:"content,omitempty"`
	MarkPostMortemAsPublished *bool   `json:"mark_post_mortem_as_published,omitempty"`
	Namespace                 *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"namespace,omitempty"`
	ParentFolder *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_folder,omitempty"`

	// Retrospective template to use when creating page task, if desired
	PostMortemTemplateId *string                                   `json:"post_mortem_template_id,omitempty"`
	TaskType             *CreateDropboxPaperPageTaskParamsTaskType `json:"task_type,omitempty"`

	// The page task title
	Title string `json:"title"`
}

// CreateDropboxPaperPageTaskParamsTaskType defines model for CreateDropboxPaperPageTaskParams.TaskType.
type CreateDropboxPaperPageTaskParamsTaskType string

// CreateGithubIssueTaskParams defines model for create_github_issue_task_params.
type CreateGithubIssueTaskParams struct {
	// The issue body
	Body       *string `json:"body,omitempty"`
	Repository struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"repository"`
	TaskType *CreateGithubIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title
	Title string `json:"title"`
}

// CreateGithubIssueTaskParamsTaskType defines model for CreateGithubIssueTaskParams.TaskType.
type CreateGithubIssueTaskParamsTaskType string

// CreateGoToMeetingTaskParams defines model for create_go_to_meeting_task_params.
type CreateGoToMeetingTaskParams struct {
	ConferenceCallInfo     *CreateGoToMeetingTaskParamsConferenceCallInfo `json:"conference_call_info"`
	PasswordRequired       *bool                                          `json:"password_required"`
	PostToIncidentTimeline *bool                                          `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// The meeting subject
	Subject  string                               `json:"subject"`
	TaskType *CreateGoToMeetingTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateGoToMeetingTaskParamsConferenceCallInfo defines model for CreateGoToMeetingTaskParams.ConferenceCallInfo.
type CreateGoToMeetingTaskParamsConferenceCallInfo string

// CreateGoToMeetingTaskParamsTaskType defines model for CreateGoToMeetingTaskParams.TaskType.
type CreateGoToMeetingTaskParamsTaskType string

// CreateGoogleCalendarEventTaskParams defines model for create_google_calendar_event_task_params.
type CreateGoogleCalendarEventTaskParams struct {
	// Emails of attendees
	Attendees               []string `json:"attendees"`
	CanGuestsInviteOthers   *bool    `json:"can_guests_invite_others,omitempty"`
	CanGuestsModifyEvent    *bool    `json:"can_guests_modify_event,omitempty"`
	CanGuestsSeeOtherGuests *bool    `json:"can_guests_see_other_guests,omitempty"`

	// Sets the video conference type attached to the meeting
	ConferenceSolutionKey *CreateGoogleCalendarEventTaskParamsConferenceSolutionKey `json:"conference_solution_key"`

	// The days until meeting
	DaysUntilMeeting float32 `json:"days_until_meeting"`

	// The event description
	Description     string `json:"description"`
	ExcludeWeekends *bool  `json:"exclude_weekends,omitempty"`

	// Meeting duration in format like '1 hour', '30 minutes'
	MeetingDuration        string `json:"meeting_duration"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// Send an email to the attendees notifying them of the event
	SendUpdates *bool `json:"send_updates,omitempty"`

	// The event summary
	Summary  string                                       `json:"summary"`
	TaskType *CreateGoogleCalendarEventTaskParamsTaskType `json:"task_type,omitempty"`

	// Time of meeting in format HH:MM
	TimeOfMeeting string                                       `json:"time_of_meeting"`
	TimeZone      *CreateGoogleCalendarEventTaskParamsTimeZone `json:"time_zone"`
}

// Sets the video conference type attached to the meeting
type CreateGoogleCalendarEventTaskParamsConferenceSolutionKey string

// CreateGoogleCalendarEventTaskParamsTaskType defines model for CreateGoogleCalendarEventTaskParams.TaskType.
type CreateGoogleCalendarEventTaskParamsTaskType string

// CreateGoogleCalendarEventTaskParamsTimeZone defines model for CreateGoogleCalendarEventTaskParams.TimeZone.
type CreateGoogleCalendarEventTaskParamsTimeZone string

// CreateGoogleDocsPageTaskParams defines model for create_google_docs_page_task_params.
type CreateGoogleDocsPageTaskParams struct {
	// The page content
	Content *string `json:"content,omitempty"`
	Drive   *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"drive,omitempty"`
	MarkPostMortemAsPublished *bool `json:"mark_post_mortem_as_published,omitempty"`
	ParentFolder              *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_folder,omitempty"`

	// Page permissions JSON
	Permissions *string `json:"permissions,omitempty"`

	// Retrospective template to use when creating page, if desired
	PostMortemTemplateId *string                                 `json:"post_mortem_template_id,omitempty"`
	TaskType             *CreateGoogleDocsPageTaskParamsTaskType `json:"task_type,omitempty"`

	// The Google Doc file ID to use as a template
	TemplateId *string `json:"template_id,omitempty"`

	// The page title
	Title string `json:"title"`
}

// CreateGoogleDocsPageTaskParamsTaskType defines model for CreateGoogleDocsPageTaskParams.TaskType.
type CreateGoogleDocsPageTaskParamsTaskType string

// CreateGoogleDocsPermissionsTaskParams defines model for create_google_docs_permissions_task_params.
type CreateGoogleDocsPermissionsTaskParams struct {
	// Email message notification
	EmailMessage *string `json:"email_message"`

	// The Google Doc file ID
	FileId string `json:"file_id"`

	// Page permissions JSON
	Permissions           string                                         `json:"permissions"`
	SendNotificationEmail *bool                                          `json:"send_notification_email,omitempty"`
	TaskType              *CreateGoogleDocsPermissionsTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateGoogleDocsPermissionsTaskParamsTaskType defines model for CreateGoogleDocsPermissionsTaskParams.TaskType.
type CreateGoogleDocsPermissionsTaskParamsTaskType string

// CreateGoogleMeetingTaskParams defines model for create_google_meeting_task_params.
type CreateGoogleMeetingTaskParams struct {
	// Sets the video conference type attached to the meeting
	ConferenceSolutionKey *CreateGoogleMeetingTaskParamsConferenceSolutionKey `json:"conference_solution_key,omitempty"`

	// The meeting description
	Description            string `json:"description"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// The meeting summary
	Summary  string                                 `json:"summary"`
	TaskType *CreateGoogleMeetingTaskParamsTaskType `json:"task_type,omitempty"`
}

// Sets the video conference type attached to the meeting
type CreateGoogleMeetingTaskParamsConferenceSolutionKey string

// CreateGoogleMeetingTaskParamsTaskType defines model for CreateGoogleMeetingTaskParams.TaskType.
type CreateGoogleMeetingTaskParamsTaskType string

// CreateIncidentPostmortemTaskParams defines model for create_incident_postmortem_task_params.
type CreateIncidentPostmortemTaskParams struct {
	// UUID of the incident that needs a retrospective
	IncidentId string                                      `json:"incident_id"`
	Status     *string                                     `json:"status"`
	TaskType   *CreateIncidentPostmortemTaskParamsTaskType `json:"task_type,omitempty"`

	// Retrospective template to use
	Template *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"template"`

	// The retrospective title
	Title string `json:"title"`
}

// CreateIncidentPostmortemTaskParamsTaskType defines model for CreateIncidentPostmortemTaskParams.TaskType.
type CreateIncidentPostmortemTaskParamsTaskType string

// CreateIncidentTaskParams defines model for create_incident_task_params.
type CreateIncidentTaskParams struct {
	// Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string   `json:"custom_fields_mapping"`
	EnvironmentIds      *[]string `json:"environment_ids,omitempty"`
	FunctionalityIds    *[]string `json:"functionality_ids,omitempty"`
	GroupIds            *[]string `json:"group_ids,omitempty"`
	IncidentTypeIds     *[]string `json:"incident_type_ids,omitempty"`
	Private             *bool     `json:"private,omitempty"`
	ServiceIds          *[]string `json:"service_ids,omitempty"`
	SeverityId          *string   `json:"severity_id,omitempty"`

	// The incident summary
	Summary  *string                           `json:"summary,omitempty"`
	TaskType *CreateIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title string `json:"title"`
}

// CreateIncidentTaskParamsTaskType defines model for CreateIncidentTaskParams.TaskType.
type CreateIncidentTaskParamsTaskType string

// CreateJiraIssueTaskParams defines model for create_jira_issue_task_params.
type CreateJiraIssueTaskParams struct {
	// The assigned user's email
	AssignUserEmail *string `json:"assign_user_email,omitempty"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The issue description
	Description *string `json:"description,omitempty"`

	// The due date
	DueDate *string `json:"due_date,omitempty"`

	// Specify integration id if you have more than one Jira instance
	Integration *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"integration,omitempty"`

	// The issue type id and display name
	IssueType struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"issue_type"`

	// The issue labels
	Labels *string `json:"labels,omitempty"`

	// The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The project key
	ProjectKey string `json:"project_key"`

	// The reporter user's email
	ReporterUserEmail *string `json:"reporter_user_email,omitempty"`

	// The status id and display name
	Status *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"status,omitempty"`
	TaskType *CreateJiraIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title
	Title string `json:"title"`

	// Update payload. Can contain liquid markup and need to be valid JSON
	UpdatePayload *string `json:"update_payload"`
}

// CreateJiraIssueTaskParamsTaskType defines model for CreateJiraIssueTaskParams.TaskType.
type CreateJiraIssueTaskParamsTaskType string

// CreateJiraSubtaskTaskParams defines model for create_jira_subtask_task_params.
type CreateJiraSubtaskTaskParams struct {
	// The assigned user's email
	AssignUserEmail *string `json:"assign_user_email,omitempty"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The issue description
	Description *string `json:"description,omitempty"`

	// The due date
	DueDate *string `json:"due_date,omitempty"`

	// Specify integration id if you have more than one Jira instance
	Integration *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"integration,omitempty"`

	// The issue labels
	Labels *string `json:"labels,omitempty"`

	// The parent issue
	ParentIssueId string `json:"parent_issue_id"`

	// The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The project key
	ProjectKey string `json:"project_key"`

	// The reporter user's email
	ReporterUserEmail *string `json:"reporter_user_email,omitempty"`

	// The status id and display name
	Status *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"status,omitempty"`

	// The issue type id and display name
	SubtaskIssueType struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"subtask_issue_type"`
	TaskType *CreateJiraSubtaskTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title
	Title string `json:"title"`

	// Update payload. Can contain liquid markup and need to be valid JSON
	UpdatePayload *string `json:"update_payload"`
}

// CreateJiraSubtaskTaskParamsTaskType defines model for CreateJiraSubtaskTaskParams.TaskType.
type CreateJiraSubtaskTaskParamsTaskType string

// CreateLinearIssueCommentTaskParams defines model for create_linear_issue_comment_task_params.
type CreateLinearIssueCommentTaskParams struct {
	// The issue description
	Body string `json:"body"`

	// The issue id
	IssueId  string                                      `json:"issue_id"`
	TaskType *CreateLinearIssueCommentTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateLinearIssueCommentTaskParamsTaskType defines model for CreateLinearIssueCommentTaskParams.TaskType.
type CreateLinearIssueCommentTaskParamsTaskType string

// CreateLinearIssueTaskParams defines model for create_linear_issue_task_params.
type CreateLinearIssueTaskParams struct {
	// The assigned user's email
	AssignUserEmail *string `json:"assign_user_email,omitempty"`

	// The issue description
	Description *string `json:"description,omitempty"`
	Labels      *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"labels,omitempty"`

	// The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The project id and display name
	Project *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"project,omitempty"`

	// The state id and display name
	State struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"state"`
	TaskType *CreateLinearIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The team id and display name
	Team struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"team"`

	// The issue title
	Title string `json:"title"`
}

// CreateLinearIssueTaskParamsTaskType defines model for CreateLinearIssueTaskParams.TaskType.
type CreateLinearIssueTaskParamsTaskType string

// CreateLinearSubtaskIssueTaskParams defines model for create_linear_subtask_issue_task_params.
type CreateLinearSubtaskIssueTaskParams struct {
	// The assigned user's email
	AssignUserEmail *string `json:"assign_user_email,omitempty"`

	// The issue description
	Description *string `json:"description,omitempty"`

	// The parent issue
	ParentIssueId string `json:"parent_issue_id"`

	// The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The state id and display name
	State struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"state"`
	TaskType *CreateLinearSubtaskIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title
	Title string `json:"title"`
}

// CreateLinearSubtaskIssueTaskParamsTaskType defines model for CreateLinearSubtaskIssueTaskParams.TaskType.
type CreateLinearSubtaskIssueTaskParamsTaskType string

// CreateMicrosoftTeamsMeetingTaskParams defines model for create_microsoft_teams_meeting_task_params.
type CreateMicrosoftTeamsMeetingTaskParams struct {
	// The meeting name
	Name                   string `json:"name"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// The meeting subject
	Subject  string                                         `json:"subject"`
	TaskType *CreateMicrosoftTeamsMeetingTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateMicrosoftTeamsMeetingTaskParamsTaskType defines model for CreateMicrosoftTeamsMeetingTaskParams.TaskType.
type CreateMicrosoftTeamsMeetingTaskParamsTaskType string

// CreateNotionPageTaskParams defines model for create_notion_page_task_params.
type CreateNotionPageTaskParams struct {
	MarkPostMortemAsPublished *bool `json:"mark_post_mortem_as_published,omitempty"`

	// The parent page id and display name
	ParentPage struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_page"`

	// Retrospective template to use when creating page task, if desired
	PostMortemTemplateId   *string                             `json:"post_mortem_template_id,omitempty"`
	ShowActionItemsAsTable *bool                               `json:"show_action_items_as_table,omitempty"`
	ShowTimelineAsTable    *bool                               `json:"show_timeline_as_table,omitempty"`
	TaskType               *CreateNotionPageTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateNotionPageTaskParamsTaskType defines model for CreateNotionPageTaskParams.TaskType.
type CreateNotionPageTaskParamsTaskType string

// CreateOpsgenieAlertTaskParams defines model for create_opsgenie_alert_task_params.
type CreateOpsgenieAlertTaskParams struct {
	// Description field of the alert that is generally used to provide a detailed information about the alert
	Description *string `json:"description,omitempty"`
	Escalations *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"escalations,omitempty"`

	// Message of the alert
	Message   string                                 `json:"message"`
	Priority  *CreateOpsgenieAlertTaskParamsPriority `json:"priority,omitempty"`
	Schedules *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedules,omitempty"`
	TaskType *CreateOpsgenieAlertTaskParamsTaskType `json:"task_type,omitempty"`
	Teams    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"teams,omitempty"`
	Users *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"users,omitempty"`
}

// CreateOpsgenieAlertTaskParamsPriority defines model for CreateOpsgenieAlertTaskParams.Priority.
type CreateOpsgenieAlertTaskParamsPriority string

// CreateOpsgenieAlertTaskParamsTaskType defines model for CreateOpsgenieAlertTaskParams.TaskType.
type CreateOpsgenieAlertTaskParamsTaskType string

// CreatePagerdutyStatusUpdateParams defines model for create_pagerduty_status_update_params.
type CreatePagerdutyStatusUpdateParams struct {
	// A message outlining the incident's resolution in Pagerduty
	Message string `json:"message"`

	// Pagerduty incident id
	PagerdutyIncidentId string                                     `json:"pagerduty_incident_id"`
	TaskType            *CreatePagerdutyStatusUpdateParamsTaskType `json:"task_type,omitempty"`
}

// CreatePagerdutyStatusUpdateParamsTaskType defines model for CreatePagerdutyStatusUpdateParams.TaskType.
type CreatePagerdutyStatusUpdateParamsTaskType string

// CreatePagertreeAlertTaskParams defines model for create_pagertree_alert_task_params.
type CreatePagertreeAlertTaskParams struct {
	// Description of alert as text
	Description *string `json:"description,omitempty"`

	// Setting to true makes an alert a Pagertree incident
	Incident *bool                                   `json:"incident,omitempty"`
	Severity *CreatePagertreeAlertTaskParamsSeverity `json:"severity,omitempty"`
	TaskType *CreatePagertreeAlertTaskParamsTaskType `json:"task_type,omitempty"`
	Teams    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"teams,omitempty"`

	// Title of alert as text
	Title   *string                                `json:"title,omitempty"`
	Urgency *CreatePagertreeAlertTaskParamsUrgency `json:"urgency,omitempty"`
	Users   *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"users,omitempty"`
}

// CreatePagertreeAlertTaskParamsSeverity defines model for CreatePagertreeAlertTaskParams.Severity.
type CreatePagertreeAlertTaskParamsSeverity string

// CreatePagertreeAlertTaskParamsTaskType defines model for CreatePagertreeAlertTaskParams.TaskType.
type CreatePagertreeAlertTaskParamsTaskType string

// CreatePagertreeAlertTaskParamsUrgency defines model for CreatePagertreeAlertTaskParams.Urgency.
type CreatePagertreeAlertTaskParamsUrgency string

// CreateQuipPageTaskParams defines model for create_quip_page_task_params.
type CreateQuipPageTaskParams struct {
	// The page content
	Content                   *string `json:"content,omitempty"`
	MarkPostMortemAsPublished *bool   `json:"mark_post_mortem_as_published,omitempty"`

	// The parent folder id
	ParentFolderId *string `json:"parent_folder_id,omitempty"`

	// Retrospective template to use when creating page, if desired
	PostMortemTemplateId *string                           `json:"post_mortem_template_id,omitempty"`
	TaskType             *CreateQuipPageTaskParamsTaskType `json:"task_type,omitempty"`

	// The Quip file ID to use as a template
	TemplateId *string `json:"template_id,omitempty"`

	// The page title
	Title string `json:"title"`
}

// CreateQuipPageTaskParamsTaskType defines model for CreateQuipPageTaskParams.TaskType.
type CreateQuipPageTaskParamsTaskType string

// CreateServiceNowIncidentTaskParams defines model for create_service_now_incident_task_params.
type CreateServiceNowIncidentTaskParams struct {
	// The completion id and display name
	Completion *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion,omitempty"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The incident description
	Description *string `json:"description,omitempty"`

	// The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`
	TaskType *CreateServiceNowIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title string `json:"title"`
}

// CreateServiceNowIncidentTaskParamsTaskType defines model for CreateServiceNowIncidentTaskParams.TaskType.
type CreateServiceNowIncidentTaskParamsTaskType string

// CreateShortcutStoryTaskParams defines model for create_shortcut_story_task_params.
type CreateShortcutStoryTaskParams struct {
	// The archivation id and display name
	Archivation struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"archivation"`

	// The incident description
	Description *string `json:"description,omitempty"`

	// The due date
	DueDate *string                           `json:"due_date,omitempty"`
	Kind    CreateShortcutStoryTaskParamsKind `json:"kind"`

	// The story labels
	Labels *string `json:"labels,omitempty"`

	// The project id and display name
	Project struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"project"`
	TaskType *CreateShortcutStoryTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title string `json:"title"`
}

// CreateShortcutStoryTaskParamsKind defines model for CreateShortcutStoryTaskParams.Kind.
type CreateShortcutStoryTaskParamsKind string

// CreateShortcutStoryTaskParamsTaskType defines model for CreateShortcutStoryTaskParams.TaskType.
type CreateShortcutStoryTaskParamsTaskType string

// CreateShortcutTaskTaskParams defines model for create_shortcut_task_task_params.
type CreateShortcutTaskTaskParams struct {
	// The completion id and display name
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// The task description
	Description string `json:"description"`

	// The parent story
	ParentStoryId string                                `json:"parent_story_id"`
	TaskType      *CreateShortcutTaskTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateShortcutTaskTaskParamsTaskType defines model for CreateShortcutTaskTaskParams.TaskType.
type CreateShortcutTaskTaskParamsTaskType string

// CreateSlackChannelTaskParams defines model for create_slack_channel_task_params.
type CreateSlackChannelTaskParams struct {
	Private  *CreateSlackChannelTaskParamsPrivate  `json:"private,omitempty"`
	TaskType *CreateSlackChannelTaskParamsTaskType `json:"task_type,omitempty"`

	// Slack channel title
	Title     string `json:"title"`
	Workspace struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"workspace"`
}

// CreateSlackChannelTaskParamsPrivate defines model for CreateSlackChannelTaskParams.Private.
type CreateSlackChannelTaskParamsPrivate string

// CreateSlackChannelTaskParamsTaskType defines model for CreateSlackChannelTaskParams.TaskType.
type CreateSlackChannelTaskParamsTaskType string

// CreateTrelloCardTaskParams defines model for create_trello_card_task_params.
type CreateTrelloCardTaskParams struct {
	// The archivation id and display name
	Archivation *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"archivation,omitempty"`

	// The board id and display name
	Board struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"board"`

	// The card description
	Description *string `json:"description,omitempty"`

	// The due date
	DueDate *string `json:"due_date,omitempty"`
	Labels  *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"labels,omitempty"`

	// The list id and display name
	List struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"list"`
	TaskType *CreateTrelloCardTaskParamsTaskType `json:"task_type,omitempty"`

	// The card title
	Title string `json:"title"`
}

// CreateTrelloCardTaskParamsTaskType defines model for CreateTrelloCardTaskParams.TaskType.
type CreateTrelloCardTaskParamsTaskType string

// CreateWebexMeetingTaskParams defines model for create_webex_meeting_task_params.
type CreateWebexMeetingTaskParams struct {
	// The meeting password
	Password               *string `json:"password,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *CreateWebexMeetingTaskParamsTaskType `json:"task_type,omitempty"`

	// The meeting topic
	Topic string `json:"topic"`
}

// CreateWebexMeetingTaskParamsTaskType defines model for CreateWebexMeetingTaskParams.TaskType.
type CreateWebexMeetingTaskParamsTaskType string

// CreateZendeskJiraLinkParams defines model for create_zendesk_jira_link_params.
type CreateZendeskJiraLinkParams struct {
	// Jira Issue Id.
	JiraIssueId string `json:"jira_issue_id"`

	// Jira Issue Key.
	JiraIssueKey string                               `json:"jira_issue_key"`
	TaskType     *CreateZendeskJiraLinkParamsTaskType `json:"task_type,omitempty"`

	// Zendesk Ticket Id.
	ZendeskTicketId string `json:"zendesk_ticket_id"`
}

// CreateZendeskJiraLinkParamsTaskType defines model for CreateZendeskJiraLinkParams.TaskType.
type CreateZendeskJiraLinkParamsTaskType string

// CreateZendeskTicketTaskParams defines model for create_zendesk_ticket_task_params.
type CreateZendeskTicketTaskParams struct {
	// The ticket comment
	Comment *string `json:"comment,omitempty"`

	// The completion id and display name
	Completion *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion,omitempty"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string                           `json:"custom_fields_mapping"`
	Kind                CreateZendeskTicketTaskParamsKind `json:"kind"`

	// The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The ticket subject
	Subject string `json:"subject"`

	// The ticket tags
	Tags     *string                                `json:"tags,omitempty"`
	TaskType *CreateZendeskTicketTaskParamsTaskType `json:"task_type,omitempty"`

	// Additional Zendesk ticket attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON
	TicketPayload *string `json:"ticket_payload"`
}

// CreateZendeskTicketTaskParamsKind defines model for CreateZendeskTicketTaskParams.Kind.
type CreateZendeskTicketTaskParamsKind string

// CreateZendeskTicketTaskParamsTaskType defines model for CreateZendeskTicketTaskParams.TaskType.
type CreateZendeskTicketTaskParamsTaskType string

// CreateZoomMeetingTaskParams defines model for create_zoom_meeting_task_params.
type CreateZoomMeetingTaskParams struct {
	AlternativeHosts *[]string                                 `json:"alternative_hosts,omitempty"`
	AutoRecording    *CreateZoomMeetingTaskParamsAutoRecording `json:"auto_recording,omitempty"`

	// The email to use if creating as email
	CreateAsEmail *string `json:"create_as_email,omitempty"`

	// The meeting password
	Password               *string `json:"password,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *CreateZoomMeetingTaskParamsTaskType `json:"task_type,omitempty"`

	// The meeting topic
	Topic string `json:"topic"`
}

// CreateZoomMeetingTaskParamsAutoRecording defines model for CreateZoomMeetingTaskParams.AutoRecording.
type CreateZoomMeetingTaskParamsAutoRecording string

// CreateZoomMeetingTaskParamsTaskType defines model for CreateZoomMeetingTaskParams.TaskType.
type CreateZoomMeetingTaskParamsTaskType string

// CustomField defines model for custom_field.
type CustomField struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The default value for text field kinds
	Default *string `json:"default"`

	// The description of the custom_field
	Description *string `json:"description"`

	// Whether the custom_field is enabled
	Enabled *bool `json:"enabled,omitempty"`

	// The kind of the custom_field
	Kind *string `json:"kind,omitempty"`

	// The name of the custom_field
	Label string `json:"label"`

	// The position of the custom_field
	Position float32                `json:"position"`
	Required *[]CustomFieldRequired `json:"required"`
	Shown    []CustomFieldShown     `json:"shown"`

	// The slug of the custom_field
	Slug string `json:"slug"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// Where the custom_field is required
type CustomFieldRequired string

// Where the custom_field is shown
type CustomFieldShown string

// CustomFieldList defines model for custom_field_list.
type CustomFieldList struct {
	Data []struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The default value for text field kinds
			Default *string `json:"default"`

			// The description of the custom_field
			Description *string `json:"description"`

			// Whether the custom_field is enabled
			Enabled *bool `json:"enabled,omitempty"`

			// The kind of the custom_field
			Kind *string `json:"kind,omitempty"`

			// The name of the custom_field
			Label string `json:"label"`

			// The position of the custom_field
			Position float32                                  `json:"position"`
			Required *[]CustomFieldListDataAttributesRequired `json:"required"`
			Shown    []CustomFieldListDataAttributesShown     `json:"shown"`

			// The slug of the custom_field
			Slug string `json:"slug"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the custom_field
		Id   string                  `json:"id"`
		Type CustomFieldListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// Where the custom_field is required
type CustomFieldListDataAttributesRequired string

// Where the custom_field is shown
type CustomFieldListDataAttributesShown string

// CustomFieldListDataType defines model for CustomFieldList.Data.Type.
type CustomFieldListDataType string

// CustomFieldOption defines model for custom_field_option.
type CustomFieldOption struct {
	// The hex color of the custom_field_option
	Color string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The ID of the parent custom field
	CustomFieldId *float32 `json:"custom_field_id,omitempty"`
	Default       *bool    `json:"default,omitempty"`

	// The position of the custom_field_option
	Position float32 `json:"position"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The value of the custom_field_option
	Value string `json:"value"`
}

// CustomFieldOptionList defines model for custom_field_option_list.
type CustomFieldOptionList struct {
	Data []struct {
		Attributes struct {
			// The hex color of the custom_field_option
			Color string `json:"color"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The ID of the parent custom field
			CustomFieldId *float32 `json:"custom_field_id,omitempty"`
			Default       *bool    `json:"default,omitempty"`

			// The position of the custom_field_option
			Position float32 `json:"position"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`

			// The value of the custom_field_option
			Value string `json:"value"`
		} `json:"attributes"`

		// Unique ID of the custom_field_option
		Id   string                        `json:"id"`
		Type CustomFieldOptionListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// CustomFieldOptionListDataType defines model for CustomFieldOptionList.Data.Type.
type CustomFieldOptionListDataType string

// CustomFieldOptionResponse defines model for custom_field_option_response.
type CustomFieldOptionResponse struct {
	Data struct {
		Attributes struct {
			// The hex color of the custom_field_option
			Color string `json:"color"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The ID of the parent custom field
			CustomFieldId *float32 `json:"custom_field_id,omitempty"`
			Default       *bool    `json:"default,omitempty"`

			// The position of the custom_field_option
			Position float32 `json:"position"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`

			// The value of the custom_field_option
			Value string `json:"value"`
		} `json:"attributes"`

		// Unique ID of the custom_field_option
		Id   string                            `json:"id"`
		Type CustomFieldOptionResponseDataType `json:"type"`
	} `json:"data"`
}

// CustomFieldOptionResponseDataType defines model for CustomFieldOptionResponse.Data.Type.
type CustomFieldOptionResponseDataType string

// CustomFieldResponse defines model for custom_field_response.
type CustomFieldResponse struct {
	Data struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The default value for text field kinds
			Default *string `json:"default"`

			// The description of the custom_field
			Description *string `json:"description"`

			// Whether the custom_field is enabled
			Enabled *bool `json:"enabled,omitempty"`

			// The kind of the custom_field
			Kind *string `json:"kind,omitempty"`

			// The name of the custom_field
			Label string `json:"label"`

			// The position of the custom_field
			Position float32                                      `json:"position"`
			Required *[]CustomFieldResponseDataAttributesRequired `json:"required"`
			Shown    []CustomFieldResponseDataAttributesShown     `json:"shown"`

			// The slug of the custom_field
			Slug string `json:"slug"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the custom_field
		Id   string                      `json:"id"`
		Type CustomFieldResponseDataType `json:"type"`
	} `json:"data"`
}

// Where the custom_field is required
type CustomFieldResponseDataAttributesRequired string

// Where the custom_field is shown
type CustomFieldResponseDataAttributesShown string

// CustomFieldResponseDataType defines model for CustomFieldResponse.Data.Type.
type CustomFieldResponseDataType string

// Dashboard defines model for dashboard.
type Dashboard struct {
	// Whether the dashboard auto-updates the UI with new data.
	AutoRefresh *bool `json:"auto_refresh,omitempty"`

	// The hex color of the dashboard
	Color *DashboardColor `json:"color"`

	// Date of creation
	CreatedAt *string `json:"created_at,omitempty"`

	// The description of the dashboard
	Description *string `json:"description"`

	// The emoji icon of the dashboard
	Icon *string `json:"icon,omitempty"`

	// The name of the dashboard
	Name string `json:"name"`

	// The owner type of the dashboard
	Owner DashboardOwner `json:"owner"`

	// The grouping period for dashboard panel data
	Period *string `json:"period"`

	// Whether the dashboard is public
	Public bool `json:"public"`

	// The date range for dashboard panel data
	Range *string `json:"range"`

	// The dashboard team
	TeamId *float32 `json:"team_id,omitempty"`

	// Date of last update
	UpdatedAt *string `json:"updated_at,omitempty"`

	// The dashboard user owner if owner is of type user
	UserId *float32 `json:"user_id"`
}

// The hex color of the dashboard
type DashboardColor string

// The owner type of the dashboard
type DashboardOwner string

// DashboardList defines model for dashboard_list.
type DashboardList struct {
	Data []struct {
		Attributes struct {
			// Whether the dashboard auto-updates the UI with new data.
			AutoRefresh *bool `json:"auto_refresh,omitempty"`

			// The hex color of the dashboard
			Color *DashboardListDataAttributesColor `json:"color"`

			// Date of creation
			CreatedAt *string `json:"created_at,omitempty"`

			// The description of the dashboard
			Description *string `json:"description"`

			// The emoji icon of the dashboard
			Icon *string `json:"icon,omitempty"`

			// The name of the dashboard
			Name string `json:"name"`

			// The owner type of the dashboard
			Owner DashboardListDataAttributesOwner `json:"owner"`

			// The grouping period for dashboard panel data
			Period *string `json:"period"`

			// Whether the dashboard is public
			Public bool `json:"public"`

			// The date range for dashboard panel data
			Range *string `json:"range"`

			// The dashboard team
			TeamId *float32 `json:"team_id,omitempty"`

			// Date of last update
			UpdatedAt *string `json:"updated_at,omitempty"`

			// The dashboard user owner if owner is of type user
			UserId *float32 `json:"user_id"`
		} `json:"attributes"`

		// Unique ID of the dashboard
		Id   string                `json:"id"`
		Type DashboardListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The hex color of the dashboard
type DashboardListDataAttributesColor string

// The owner type of the dashboard
type DashboardListDataAttributesOwner string

// DashboardListDataType defines model for DashboardList.Data.Type.
type DashboardListDataType string

// DashboardResponse defines model for dashboard_response.
type DashboardResponse struct {
	Data struct {
		Attributes struct {
			// Whether the dashboard auto-updates the UI with new data.
			AutoRefresh *bool `json:"auto_refresh,omitempty"`

			// The hex color of the dashboard
			Color *DashboardResponseDataAttributesColor `json:"color"`

			// Date of creation
			CreatedAt *string `json:"created_at,omitempty"`

			// The description of the dashboard
			Description *string `json:"description"`

			// The emoji icon of the dashboard
			Icon *string `json:"icon,omitempty"`

			// The name of the dashboard
			Name string `json:"name"`

			// The owner type of the dashboard
			Owner DashboardResponseDataAttributesOwner `json:"owner"`

			// The grouping period for dashboard panel data
			Period *string `json:"period"`

			// Whether the dashboard is public
			Public bool `json:"public"`

			// The date range for dashboard panel data
			Range *string `json:"range"`

			// The dashboard team
			TeamId *float32 `json:"team_id,omitempty"`

			// Date of last update
			UpdatedAt *string `json:"updated_at,omitempty"`

			// The dashboard user owner if owner is of type user
			UserId *float32 `json:"user_id"`
		} `json:"attributes"`

		// Unique ID of the dashboard
		Id   string                    `json:"id"`
		Type DashboardResponseDataType `json:"type"`
	} `json:"data"`
}

// The hex color of the dashboard
type DashboardResponseDataAttributesColor string

// The owner type of the dashboard
type DashboardResponseDataAttributesOwner string

// DashboardResponseDataType defines model for DashboardResponse.Data.Type.
type DashboardResponseDataType string

// Environment defines model for environment.
type Environment struct {
	// The hex color of the environment
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the environment
	Description *string `json:"description"`

	// The name of the environment
	Name string `json:"name"`

	// Emails attached to the environment
	NotifyEmails *[]string `json:"notify_emails"`

	// Position of the environment
	Position *int `json:"position"`

	// Slack Aliases associated with this environment
	SlackAliases *[]struct {
		// Slack alias ID
		Id string `json:"id"`

		// Slack alias name
		Name string `json:"name"`
	} `json:"slack_aliases"`

	// Slack Channels associated with this environment
	SlackChannels *[]struct {
		// Slack channel ID
		Id string `json:"id"`

		// Slack channel name
		Name string `json:"name"`
	} `json:"slack_channels"`

	// The slug of the environment
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// EnvironmentList defines model for environment_list.
type EnvironmentList struct {
	Data []struct {
		Attributes struct {
			// The hex color of the environment
			Color *string `json:"color"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the environment
			Description *string `json:"description"`

			// The name of the environment
			Name string `json:"name"`

			// Emails attached to the environment
			NotifyEmails *[]string `json:"notify_emails"`

			// Position of the environment
			Position *int `json:"position"`

			// Slack Aliases associated with this environment
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this environment
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`

			// The slug of the environment
			Slug *string `json:"slug,omitempty"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the environment
		Id   string                  `json:"id"`
		Type EnvironmentListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// EnvironmentListDataType defines model for EnvironmentList.Data.Type.
type EnvironmentListDataType string

// EnvironmentResponse defines model for environment_response.
type EnvironmentResponse struct {
	Data struct {
		Attributes struct {
			// The hex color of the environment
			Color *string `json:"color"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the environment
			Description *string `json:"description"`

			// The name of the environment
			Name string `json:"name"`

			// Emails attached to the environment
			NotifyEmails *[]string `json:"notify_emails"`

			// Position of the environment
			Position *int `json:"position"`

			// Slack Aliases associated with this environment
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this environment
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`

			// The slug of the environment
			Slug *string `json:"slug,omitempty"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the environment
		Id   string                      `json:"id"`
		Type EnvironmentResponseDataType `json:"type"`
	} `json:"data"`
}

// EnvironmentResponseDataType defines model for EnvironmentResponse.Data.Type.
type EnvironmentResponseDataType string

// ErrorsList defines model for errors_list.
type ErrorsList struct {
	Errors *[]struct {
		Code   *string `json:"code"`
		Detail *string `json:"detail"`
		Status string  `json:"status"`
		Title  string  `json:"title"`
	} `json:"errors,omitempty"`
}

// FormField defines model for form_field.
type FormField struct {
	// Date of creation
	CreatedAt     string   `json:"created_at"`
	DefaultValues []string `json:"default_values"`

	// The description of the form field
	Description *string `json:"description"`

	// Whether the form field is enabled
	Enabled *bool `json:"enabled,omitempty"`

	// The input kind of the form field
	InputKind FormFieldInputKind `json:"input_kind"`

	// The kind of the form field
	Kind FormFieldKind `json:"kind"`

	// The name of the form field
	Name     string              `json:"name"`
	Required []FormFieldRequired `json:"required"`
	Shown    []FormFieldShown    `json:"shown"`

	// The slug of the form field
	Slug string `json:"slug"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The input kind of the form field
type FormFieldInputKind string

// The kind of the form field
type FormFieldKind string

// Where the form field is required
type FormFieldRequired string

// Where the form field is shown
type FormFieldShown string

// FormFieldList defines model for form_field_list.
type FormFieldList struct {
	Data []struct {
		Attributes struct {
			// Date of creation
			CreatedAt     string   `json:"created_at"`
			DefaultValues []string `json:"default_values"`

			// The description of the form field
			Description *string `json:"description"`

			// Whether the form field is enabled
			Enabled *bool `json:"enabled,omitempty"`

			// The input kind of the form field
			InputKind FormFieldListDataAttributesInputKind `json:"input_kind"`

			// The kind of the form field
			Kind FormFieldListDataAttributesKind `json:"kind"`

			// The name of the form field
			Name     string                                `json:"name"`
			Required []FormFieldListDataAttributesRequired `json:"required"`
			Shown    []FormFieldListDataAttributesShown    `json:"shown"`

			// The slug of the form field
			Slug string `json:"slug"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the form field
		Id   string                `json:"id"`
		Type FormFieldListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The input kind of the form field
type FormFieldListDataAttributesInputKind string

// The kind of the form field
type FormFieldListDataAttributesKind string

// Where the form field is required
type FormFieldListDataAttributesRequired string

// Where the form field is shown
type FormFieldListDataAttributesShown string

// FormFieldListDataType defines model for FormFieldList.Data.Type.
type FormFieldListDataType string

// FormFieldOption defines model for form_field_option.
type FormFieldOption struct {
	// The hex color of the form_field_option
	Color string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`
	Default   *bool  `json:"default,omitempty"`

	// The ID of the parent custom field
	FormFieldId *string `json:"form_field_id,omitempty"`

	// The position of the form_field_option
	Position float32 `json:"position"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The value of the form_field_option
	Value string `json:"value"`
}

// FormFieldOptionList defines model for form_field_option_list.
type FormFieldOptionList struct {
	Data []struct {
		Attributes struct {
			// The hex color of the form_field_option
			Color string `json:"color"`

			// Date of creation
			CreatedAt string `json:"created_at"`
			Default   *bool  `json:"default,omitempty"`

			// The ID of the parent custom field
			FormFieldId *string `json:"form_field_id,omitempty"`

			// The position of the form_field_option
			Position float32 `json:"position"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`

			// The value of the form_field_option
			Value string `json:"value"`
		} `json:"attributes"`

		// Unique ID of the form_field_option
		Id   string                      `json:"id"`
		Type FormFieldOptionListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// FormFieldOptionListDataType defines model for FormFieldOptionList.Data.Type.
type FormFieldOptionListDataType string

// FormFieldOptionResponse defines model for form_field_option_response.
type FormFieldOptionResponse struct {
	Data struct {
		Attributes struct {
			// The hex color of the form_field_option
			Color string `json:"color"`

			// Date of creation
			CreatedAt string `json:"created_at"`
			Default   *bool  `json:"default,omitempty"`

			// The ID of the parent custom field
			FormFieldId *string `json:"form_field_id,omitempty"`

			// The position of the form_field_option
			Position float32 `json:"position"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`

			// The value of the form_field_option
			Value string `json:"value"`
		} `json:"attributes"`

		// Unique ID of the form_field_option
		Id   string                          `json:"id"`
		Type FormFieldOptionResponseDataType `json:"type"`
	} `json:"data"`
}

// FormFieldOptionResponseDataType defines model for FormFieldOptionResponse.Data.Type.
type FormFieldOptionResponseDataType string

// FormFieldPosition defines model for form_field_position.
type FormFieldPosition struct {
	// The form for the position
	Form FormFieldPositionForm `json:"form"`

	// The ID of the form field.
	FormFieldId string `json:"form_field_id"`

	// The position of the form_field_position
	Position float32 `json:"position"`
}

// The form for the position
type FormFieldPositionForm string

// FormFieldPositionList defines model for form_field_position_list.
type FormFieldPositionList struct {
	Data []struct {
		Attributes struct {
			// The form for the position
			Form FormFieldPositionListDataAttributesForm `json:"form"`

			// The ID of the form field.
			FormFieldId string `json:"form_field_id"`

			// The position of the form_field_position
			Position float32 `json:"position"`
		} `json:"attributes"`

		// Unique ID of the form_field_position
		Id   string                        `json:"id"`
		Type FormFieldPositionListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The form for the position
type FormFieldPositionListDataAttributesForm string

// FormFieldPositionListDataType defines model for FormFieldPositionList.Data.Type.
type FormFieldPositionListDataType string

// FormFieldPositionResponse defines model for form_field_position_response.
type FormFieldPositionResponse struct {
	Data struct {
		Attributes struct {
			// The form for the position
			Form FormFieldPositionResponseDataAttributesForm `json:"form"`

			// The ID of the form field.
			FormFieldId string `json:"form_field_id"`

			// The position of the form_field_position
			Position float32 `json:"position"`
		} `json:"attributes"`

		// Unique ID of the form_field_position
		Id   string                            `json:"id"`
		Type FormFieldPositionResponseDataType `json:"type"`
	} `json:"data"`
}

// The form for the position
type FormFieldPositionResponseDataAttributesForm string

// FormFieldPositionResponseDataType defines model for FormFieldPositionResponse.Data.Type.
type FormFieldPositionResponseDataType string

// FormFieldResponse defines model for form_field_response.
type FormFieldResponse struct {
	Data struct {
		Attributes struct {
			// Date of creation
			CreatedAt     string   `json:"created_at"`
			DefaultValues []string `json:"default_values"`

			// The description of the form field
			Description *string `json:"description"`

			// Whether the form field is enabled
			Enabled *bool `json:"enabled,omitempty"`

			// The input kind of the form field
			InputKind FormFieldResponseDataAttributesInputKind `json:"input_kind"`

			// The kind of the form field
			Kind FormFieldResponseDataAttributesKind `json:"kind"`

			// The name of the form field
			Name     string                                    `json:"name"`
			Required []FormFieldResponseDataAttributesRequired `json:"required"`
			Shown    []FormFieldResponseDataAttributesShown    `json:"shown"`

			// The slug of the form field
			Slug string `json:"slug"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the form field
		Id   string                    `json:"id"`
		Type FormFieldResponseDataType `json:"type"`
	} `json:"data"`
}

// The input kind of the form field
type FormFieldResponseDataAttributesInputKind string

// The kind of the form field
type FormFieldResponseDataAttributesKind string

// Where the form field is required
type FormFieldResponseDataAttributesRequired string

// Where the form field is shown
type FormFieldResponseDataAttributesShown string

// FormFieldResponseDataType defines model for FormFieldResponse.Data.Type.
type FormFieldResponseDataType string

// Functionality defines model for functionality.
type Functionality struct {
	// The hex color of the functionality
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the functionality
	Description *string `json:"description"`

	// Environments associated with this functionality
	EnvironmentIds *[]string `json:"environment_ids"`

	// The name of the functionality
	Name string `json:"name"`

	// Emails attached to the functionality
	NotifyEmails *[]string `json:"notify_emails"`

	// Owner Teams associated with this functionality
	OwnersGroupIds *[]string `json:"owners_group_ids"`

	// Owner Users associated with this service
	OwnersUserIds *[]int `json:"owners_user_ids"`

	// Position of the functionality
	Position *int `json:"position"`

	// The public description of the functionality
	PublicDescription *string `json:"public_description"`

	// Services associated with this functionality
	ServiceIds *[]string `json:"service_ids"`

	// Slack Aliases associated with this service
	SlackAliases *[]struct {
		// Slack alias ID
		Id string `json:"id"`

		// Slack alias name
		Name string `json:"name"`
	} `json:"slack_aliases"`

	// Slack Channels associated with this service
	SlackChannels *[]struct {
		// Slack channel ID
		Id string `json:"id"`

		// Slack channel name
		Name string `json:"name"`
	} `json:"slack_channels"`

	// The slug of the functionality
	Slug *string `json:"slug,omitempty"`

	// The status of the functionality
	Status *FunctionalityStatus `json:"status,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The status of the functionality
type FunctionalityStatus string

// FunctionalityList defines model for functionality_list.
type FunctionalityList struct {
	Data []struct {
		Attributes struct {
			// The hex color of the functionality
			Color *string `json:"color"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the functionality
			Description *string `json:"description"`

			// Environments associated with this functionality
			EnvironmentIds *[]string `json:"environment_ids"`

			// The name of the functionality
			Name string `json:"name"`

			// Emails attached to the functionality
			NotifyEmails *[]string `json:"notify_emails"`

			// Owner Teams associated with this functionality
			OwnersGroupIds *[]string `json:"owners_group_ids"`

			// Owner Users associated with this service
			OwnersUserIds *[]int `json:"owners_user_ids"`

			// Position of the functionality
			Position *int `json:"position"`

			// The public description of the functionality
			PublicDescription *string `json:"public_description"`

			// Services associated with this functionality
			ServiceIds *[]string `json:"service_ids"`

			// Slack Aliases associated with this service
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this service
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`

			// The slug of the functionality
			Slug *string `json:"slug,omitempty"`

			// The status of the functionality
			Status *FunctionalityListDataAttributesStatus `json:"status,omitempty"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the functionality
		Id   string                    `json:"id"`
		Type FunctionalityListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The status of the functionality
type FunctionalityListDataAttributesStatus string

// FunctionalityListDataType defines model for FunctionalityList.Data.Type.
type FunctionalityListDataType string

// FunctionalityResponse defines model for functionality_response.
type FunctionalityResponse struct {
	Data struct {
		Attributes struct {
			// The hex color of the functionality
			Color *string `json:"color"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the functionality
			Description *string `json:"description"`

			// Environments associated with this functionality
			EnvironmentIds *[]string `json:"environment_ids"`

			// The name of the functionality
			Name string `json:"name"`

			// Emails attached to the functionality
			NotifyEmails *[]string `json:"notify_emails"`

			// Owner Teams associated with this functionality
			OwnersGroupIds *[]string `json:"owners_group_ids"`

			// Owner Users associated with this service
			OwnersUserIds *[]int `json:"owners_user_ids"`

			// Position of the functionality
			Position *int `json:"position"`

			// The public description of the functionality
			PublicDescription *string `json:"public_description"`

			// Services associated with this functionality
			ServiceIds *[]string `json:"service_ids"`

			// Slack Aliases associated with this service
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this service
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`

			// The slug of the functionality
			Slug *string `json:"slug,omitempty"`

			// The status of the functionality
			Status *FunctionalityResponseDataAttributesStatus `json:"status,omitempty"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the functionality
		Id   string                        `json:"id"`
		Type FunctionalityResponseDataType `json:"type"`
	} `json:"data"`
}

// The status of the functionality
type FunctionalityResponseDataAttributesStatus string

// FunctionalityResponseDataType defines model for FunctionalityResponse.Data.Type.
type FunctionalityResponseDataType string

// GetAlertsTaskParams defines model for get_alerts_task_params.
type GetAlertsTaskParams struct {
	EnvironmentIds *[]string `json:"environment_ids,omitempty"`
	Labels         *[]string `json:"labels,omitempty"`

	// How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)
	PastDuration           string `json:"past_duration"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	ServiceIds *[]string                    `json:"service_ids,omitempty"`
	Sources    *[]string                    `json:"sources,omitempty"`
	TaskType   *GetAlertsTaskParamsTaskType `json:"task_type,omitempty"`
}

// GetAlertsTaskParamsTaskType defines model for GetAlertsTaskParams.TaskType.
type GetAlertsTaskParamsTaskType string

// GetGithubCommitsTaskParams defines model for get_github_commits_task_params.
type GetGithubCommitsTaskParams struct {
	// The branch
	Branch                string    `json:"branch"`
	GithubRepositoryNames *[]string `json:"github_repository_names,omitempty"`

	// How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)
	PastDuration           string `json:"past_duration"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	ServiceIds *[]string                           `json:"service_ids,omitempty"`
	TaskType   *GetGithubCommitsTaskParamsTaskType `json:"task_type,omitempty"`
}

// GetGithubCommitsTaskParamsTaskType defines model for GetGithubCommitsTaskParams.TaskType.
type GetGithubCommitsTaskParamsTaskType string

// GetGitlabCommitsTaskParams defines model for get_gitlab_commits_task_params.
type GetGitlabCommitsTaskParams struct {
	// The branch
	Branch                string    `json:"branch"`
	GitlabRepositoryNames *[]string `json:"gitlab_repository_names,omitempty"`

	// How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)
	PastDuration           string `json:"past_duration"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	ServiceIds *[]string                           `json:"service_ids,omitempty"`
	TaskType   *GetGitlabCommitsTaskParamsTaskType `json:"task_type,omitempty"`
}

// GetGitlabCommitsTaskParamsTaskType defines model for GetGitlabCommitsTaskParams.TaskType.
type GetGitlabCommitsTaskParamsTaskType string

// GetPulsesTaskParams defines model for get_pulses_task_params.
type GetPulsesTaskParams struct {
	EnvironmentIds *[]string `json:"environment_ids,omitempty"`
	Labels         *[]string `json:"labels,omitempty"`

	// How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)
	PastDuration           string `json:"past_duration"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	Refs       *[]string                    `json:"refs,omitempty"`
	ServiceIds *[]string                    `json:"service_ids,omitempty"`
	Sources    *[]string                    `json:"sources,omitempty"`
	TaskType   *GetPulsesTaskParamsTaskType `json:"task_type,omitempty"`
}

// GetPulsesTaskParamsTaskType defines model for GetPulsesTaskParams.TaskType.
type GetPulsesTaskParamsTaskType string

// HttpClientTaskParams defines model for http_client_task_params.
type HttpClientTaskParams struct {
	// HTTP body
	Body         *string `json:"body,omitempty"`
	EventMessage *string `json:"event_message,omitempty"`
	EventUrl     *string `json:"event_url,omitempty"`

	// JSON map of HTTP headers
	Headers *string `json:"headers,omitempty"`

	// HTTP method
	Method *HttpClientTaskParamsMethod `json:"method,omitempty"`

	// JSON map of HTTP query parameters
	Params                 *string `json:"params,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// HTTP status code expected. Can be a regular expression. Eg: 200, 200|203, 20[0-3]
	SucceedOnStatus string                        `json:"succeed_on_status"`
	TaskType        *HttpClientTaskParamsTaskType `json:"task_type,omitempty"`

	// URL endpoint
	Url string `json:"url"`
}

// HTTP method
type HttpClientTaskParamsMethod string

// HttpClientTaskParamsTaskType defines model for HttpClientTaskParams.TaskType.
type HttpClientTaskParamsTaskType string

// InTriageIncident defines model for in_triage_incident.
type InTriageIncident struct {
	Data struct {
		Type InTriageIncidentDataType `json:"type"`
	} `json:"data"`
}

// InTriageIncidentDataType defines model for InTriageIncident.Data.Type.
type InTriageIncidentDataType string

// Incident defines model for incident.
type Incident struct {
	// Date of acknowledgment
	AcknowledgedAt *string `json:"acknowledged_at"`

	// Why was the incident cancelled?
	CancellationMessage *string `json:"cancellation_message"`

	// Date of cancellation
	CancelledAt *string `json:"cancelled_at"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Date of detection
	DetectedAt *string `json:"detected_at"`

	// The Environments of the incident
	Environments *[]struct {
		Data struct {
			Attributes struct {
				// The hex color of the environment
				Color *string `json:"color"`

				// Date of creation
				CreatedAt string `json:"created_at"`

				// The description of the environment
				Description *string `json:"description"`

				// The name of the environment
				Name string `json:"name"`

				// Emails attached to the environment
				NotifyEmails *[]string `json:"notify_emails"`

				// Position of the environment
				Position *int `json:"position"`

				// Slack Aliases associated with this environment
				SlackAliases *[]struct {
					// Slack alias ID
					Id string `json:"id"`

					// Slack alias name
					Name string `json:"name"`
				} `json:"slack_aliases"`

				// Slack Channels associated with this environment
				SlackChannels *[]struct {
					// Slack channel ID
					Id string `json:"id"`

					// Slack channel name
					Name string `json:"name"`
				} `json:"slack_channels"`

				// The slug of the environment
				Slug *string `json:"slug,omitempty"`

				// Date of last update
				UpdatedAt string `json:"updated_at"`
			} `json:"attributes"`

			// Unique ID of the environment
			Id   string                       `json:"id"`
			Type IncidentEnvironmentsDataType `json:"type"`
		} `json:"data"`
	} `json:"environments"`

	// The Functionalities of the incident
	Functionalities *[]struct {
		Data struct {
			Attributes struct {
				// The hex color of the functionality
				Color *string `json:"color"`

				// Date of creation
				CreatedAt string `json:"created_at"`

				// The description of the functionality
				Description *string `json:"description"`

				// Environments associated with this functionality
				EnvironmentIds *[]string `json:"environment_ids"`

				// The name of the functionality
				Name string `json:"name"`

				// Emails attached to the functionality
				NotifyEmails *[]string `json:"notify_emails"`

				// Owner Teams associated with this functionality
				OwnersGroupIds *[]string `json:"owners_group_ids"`

				// Owner Users associated with this service
				OwnersUserIds *[]int `json:"owners_user_ids"`

				// Position of the functionality
				Position *int `json:"position"`

				// The public description of the functionality
				PublicDescription *string `json:"public_description"`

				// Services associated with this functionality
				ServiceIds *[]string `json:"service_ids"`

				// Slack Aliases associated with this service
				SlackAliases *[]struct {
					// Slack alias ID
					Id string `json:"id"`

					// Slack alias name
					Name string `json:"name"`
				} `json:"slack_aliases"`

				// Slack Channels associated with this service
				SlackChannels *[]struct {
					// Slack channel ID
					Id string `json:"id"`

					// Slack channel name
					Name string `json:"name"`
				} `json:"slack_channels"`

				// The slug of the functionality
				Slug *string `json:"slug,omitempty"`

				// The status of the functionality
				Status *IncidentFunctionalitiesDataAttributesStatus `json:"status,omitempty"`

				// Date of last update
				UpdatedAt string `json:"updated_at"`
			} `json:"attributes"`

			// Unique ID of the functionality
			Id   string                          `json:"id"`
			Type IncidentFunctionalitiesDataType `json:"type"`
		} `json:"data"`
	} `json:"functionalities"`

	// The Teams of to the incident
	Groups *[]struct {
		Data struct {
			Attributes struct {
				// The hex color of the team
				Color *string `json:"color"`

				// Date of creation
				CreatedAt string `json:"created_at"`

				// The description of the team
				Description *string `json:"description"`

				// The name of the team
				Name string `json:"name"`

				// Emails to attach to the team
				NotifyEmails *[]string `json:"notify_emails"`

				// The Opsgenie group id associated to this team
				OpsgenieId *string `json:"opsgenie_id"`

				// The PagerDuty group id associated to this team
				PagerdutyId *string `json:"pagerduty_id"`

				// The PagerTree group id associated to this team
				PagertreeId *string `json:"pagertree_id"`

				// Position of the team
				Position *int `json:"position"`

				// Slack Aliases associated with this service
				SlackAliases *[]struct {
					// Slack alias ID
					Id string `json:"id"`

					// Slack alias name
					Name string `json:"name"`
				} `json:"slack_aliases"`

				// Slack Channels associated with this service
				SlackChannels *[]struct {
					// Slack channel ID
					Id string `json:"id"`

					// Slack channel name
					Name string `json:"name"`
				} `json:"slack_channels"`
				Slug *string `json:"slug,omitempty"`

				// Date of last update
				UpdatedAt string `json:"updated_at"`

				// The User ID's members of this team
				UserIds *[]int `json:"user_ids"`

				// The VictorOps group id associated to this team
				VictorOpsId *string `json:"victor_ops_id"`
			} `json:"attributes"`

			// Unique ID of the team
			Id   string                 `json:"id"`
			Type IncidentGroupsDataType `json:"type"`
		} `json:"data"`
	} `json:"groups"`

	// Date of triage
	InTriageAt *string `json:"in_triage_at"`

	// The Incident Types of the incident
	IncidentTypes *[]struct {
		Data struct {
			Attributes struct {
				// The hex color of the incident type
				Color *string `json:"color"`

				// Date of creation
				CreatedAt string `json:"created_at"`

				// The description of the incident type
				Description *string `json:"description"`

				// The name of the incident type
				Name string `json:"name"`

				// Emails to attach to the incident type
				NotifyEmails *[]string `json:"notify_emails"`

				// Position of the incident type
				Position *int `json:"position"`

				// Slack Aliases associated with this incident type
				SlackAliases *[]struct {
					// Slack alias ID
					Id string `json:"id"`

					// Slack alias name
					Name string `json:"name"`
				} `json:"slack_aliases"`

				// Slack Channels associated with this incident type
				SlackChannels *[]struct {
					// Slack channel ID
					Id string `json:"id"`

					// Slack channel name
					Name string `json:"name"`
				} `json:"slack_channels"`

				// The slug of the incident type
				Slug *string `json:"slug,omitempty"`

				// Date of last update
				UpdatedAt string `json:"updated_at"`
			} `json:"attributes"`

			// Unique ID of the incident type
			Id   string                        `json:"id"`
			Type IncidentIncidentTypesDataType `json:"type"`
		} `json:"data"`
	} `json:"incident_types"`

	// The kind of the incident
	Kind *string `json:"kind,omitempty"`

	// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
	Labels *map[string]interface{} `json:"labels"`

	// Date of mitigation
	MitigatedAt *string `json:"mitigated_at"`

	// How was the incident mitigated?
	MitigationMessage *string `json:"mitigation_message"`

	// ID of parent incident
	ParentIncidentId *string `json:"parent_incident_id"`

	// Create an incident as private
	Private *bool `json:"private"`

	// How was the incident resolved?
	ResolutionMessage *string `json:"resolution_message"`

	// Date of resolution
	ResolvedAt *string `json:"resolved_at"`

	// Date of when the maintenance begins
	ScheduledFor *string `json:"scheduled_for"`

	// Date of when the maintenance ends
	ScheduledUntil *string `json:"scheduled_until"`

	// The Services of the incident
	Services *[]struct {
		Data struct {
			Attributes struct {
				// The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
				BackstageId *string `json:"backstage_id"`

				// The hex color of the service
				Color *string `json:"color"`

				// Date of creation
				CreatedAt string `json:"created_at"`

				// The description of the service
				Description *string `json:"description"`

				// Environments associated with this service
				EnvironmentIds *[]string `json:"environment_ids"`

				// The GitHub repository branch associated to this service. eg: main
				GithubRepositoryBranch *string `json:"github_repository_branch"`

				// The GitHub repository name associated to this service. eg: rootlyhq/my-service
				GithubRepositoryName *string `json:"github_repository_name"`

				// The Gitlab repository branch associated to this service. eg: main
				GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

				// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
				GitlabRepositoryName *string `json:"gitlab_repository_name"`

				// The name of the service
				Name string `json:"name"`

				// Emails attached to the service
				NotifyEmails *[]string `json:"notify_emails"`

				// The Opsgenie service id associated to this service
				OpsgenieId *string `json:"opsgenie_id"`

				// Owner Teams associated with this service
				OwnersGroupIds *[]string `json:"owners_group_ids"`

				// Owner Users associated with this service
				OwnersUserIds *[]int `json:"owners_user_ids"`

				// The PagerDuty service id associated to this service
				PagerdutyId *string `json:"pagerduty_id"`

				// Position of the service
				Position *int `json:"position"`

				// The public description of the service
				PublicDescription *string `json:"public_description"`

				// Services dependent on this service
				ServiceIds *[]string `json:"service_ids"`

				// Slack Aliases associated with this service
				SlackAliases *[]struct {
					// Slack alias ID
					Id string `json:"id"`

					// Slack alias name
					Name string `json:"name"`
				} `json:"slack_aliases"`

				// Slack Channels associated with this service
				SlackChannels *[]struct {
					// Slack channel ID
					Id string `json:"id"`

					// Slack channel name
					Name string `json:"name"`
				} `json:"slack_channels"`

				// The slug of the service
				Slug *string `json:"slug,omitempty"`

				// The status of the service
				Status *IncidentServicesDataAttributesStatus `json:"status,omitempty"`

				// Date of last update
				UpdatedAt string `json:"updated_at"`
			} `json:"attributes"`

			// Unique ID of the service
			Id   string                   `json:"id"`
			Type IncidentServicesDataType `json:"type"`
		} `json:"data"`
	} `json:"services"`

	// The Severity of the incident
	Severity *struct {
		Data struct {
			Attributes struct {
				// The hex color of the severity
				Color *string `json:"color"`

				// Date of creation
				CreatedAt string `json:"created_at"`

				// The description of the severity
				Description *string `json:"description"`

				// The name of the severity
				Name string `json:"name"`

				// Emails to attach to the severity
				NotifyEmails *[]string `json:"notify_emails"`

				// Position of the severity
				Position *int `json:"position"`

				// The severity of the severity
				Severity *IncidentSeverityDataAttributesSeverity `json:"severity,omitempty"`

				// Slack Aliases associated with this severity
				SlackAliases *[]struct {
					// Slack alias ID
					Id string `json:"id"`

					// Slack alias name
					Name string `json:"name"`
				} `json:"slack_aliases"`

				// Slack Channels associated with this severity
				SlackChannels *[]struct {
					// Slack channel ID
					Id string `json:"id"`

					// Slack channel name
					Name string `json:"name"`
				} `json:"slack_channels"`

				// The slug of the severity
				Slug *string `json:"slug,omitempty"`

				// Date of last update
				UpdatedAt string `json:"updated_at"`
			} `json:"attributes"`

			// Unique ID of the severity
			Id   string                   `json:"id"`
			Type IncidentSeverityDataType `json:"type"`
		} `json:"data"`
	} `json:"severity"`

	// Slack channel id
	SlackChannelId *string `json:"slack_channel_id"`

	// Slack channel name
	SlackChannelName *string `json:"slack_channel_name"`

	// Slack channel url
	SlackChannelUrl *string `json:"slack_channel_url"`

	// The slug of the incident
	Slug string `json:"slug"`

	// Date of start
	StartedAt *string `json:"started_at"`

	// The summary of the incident
	Summary *string `json:"summary"`

	// The title of the incident
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentEnvironmentsDataType defines model for Incident.Environments.Data.Type.
type IncidentEnvironmentsDataType string

// The status of the functionality
type IncidentFunctionalitiesDataAttributesStatus string

// IncidentFunctionalitiesDataType defines model for Incident.Functionalities.Data.Type.
type IncidentFunctionalitiesDataType string

// IncidentGroupsDataType defines model for Incident.Groups.Data.Type.
type IncidentGroupsDataType string

// IncidentIncidentTypesDataType defines model for Incident.IncidentTypes.Data.Type.
type IncidentIncidentTypesDataType string

// The status of the service
type IncidentServicesDataAttributesStatus string

// IncidentServicesDataType defines model for Incident.Services.Data.Type.
type IncidentServicesDataType string

// The severity of the severity
type IncidentSeverityDataAttributesSeverity string

// IncidentSeverityDataType defines model for Incident.Severity.Data.Type.
type IncidentSeverityDataType string

// IncidentActionItem defines model for incident_action_item.
type IncidentActionItem struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident action item
	Description *string `json:"description"`

	// The due date of the action item
	DueDate *string `json:"due_date"`

	// The kind of the action item
	Kind *IncidentActionItemKind `json:"kind,omitempty"`

	// The priority of the action item
	Priority *IncidentActionItemPriority `json:"priority,omitempty"`

	// The status of the action item
	Status *IncidentActionItemStatus `json:"status,omitempty"`

	// The summary of the action item
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The kind of the action item
type IncidentActionItemKind string

// The priority of the action item
type IncidentActionItemPriority string

// The status of the action item
type IncidentActionItemStatus string

// IncidentActionItemList defines model for incident_action_item_list.
type IncidentActionItemList struct {
	Data []struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of incident action item
			Description *string `json:"description"`

			// The due date of the action item
			DueDate *string `json:"due_date"`

			// The kind of the action item
			Kind *IncidentActionItemListDataAttributesKind `json:"kind,omitempty"`

			// The priority of the action item
			Priority *IncidentActionItemListDataAttributesPriority `json:"priority,omitempty"`

			// The status of the action item
			Status *IncidentActionItemListDataAttributesStatus `json:"status,omitempty"`

			// The summary of the action item
			Summary string `json:"summary"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the action item
		Id   string                         `json:"id"`
		Type IncidentActionItemListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The kind of the action item
type IncidentActionItemListDataAttributesKind string

// The priority of the action item
type IncidentActionItemListDataAttributesPriority string

// The status of the action item
type IncidentActionItemListDataAttributesStatus string

// IncidentActionItemListDataType defines model for IncidentActionItemList.Data.Type.
type IncidentActionItemListDataType string

// IncidentActionItemResponse defines model for incident_action_item_response.
type IncidentActionItemResponse struct {
	Data struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of incident action item
			Description *string `json:"description"`

			// The due date of the action item
			DueDate *string `json:"due_date"`

			// The kind of the action item
			Kind *IncidentActionItemResponseDataAttributesKind `json:"kind,omitempty"`

			// The priority of the action item
			Priority *IncidentActionItemResponseDataAttributesPriority `json:"priority,omitempty"`

			// The status of the action item
			Status *IncidentActionItemResponseDataAttributesStatus `json:"status,omitempty"`

			// The summary of the action item
			Summary string `json:"summary"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the action item
		Id   string                             `json:"id"`
		Type IncidentActionItemResponseDataType `json:"type"`
	} `json:"data"`
}

// The kind of the action item
type IncidentActionItemResponseDataAttributesKind string

// The priority of the action item
type IncidentActionItemResponseDataAttributesPriority string

// The status of the action item
type IncidentActionItemResponseDataAttributesStatus string

// IncidentActionItemResponseDataType defines model for IncidentActionItemResponse.Data.Type.
type IncidentActionItemResponseDataType string

// IncidentCustomFieldSelection defines model for incident_custom_field_selection.
type IncidentCustomFieldSelection struct {
	CustomFieldId     *float32  `json:"custom_field_id,omitempty"`
	IncidentId        *string   `json:"incident_id,omitempty"`
	SelectedOptionIds []float32 `json:"selected_option_ids"`

	// The value of the incident_custom_field_selection
	Value *string `json:"value"`
}

// IncidentCustomFieldSelectionList defines model for incident_custom_field_selection_list.
type IncidentCustomFieldSelectionList struct {
	Data []struct {
		Attributes struct {
			CustomFieldId     *float32  `json:"custom_field_id,omitempty"`
			IncidentId        *string   `json:"incident_id,omitempty"`
			SelectedOptionIds []float32 `json:"selected_option_ids"`

			// The value of the incident_custom_field_selection
			Value *string `json:"value"`
		} `json:"attributes"`

		// Unique ID of the incident_custom_field_selection
		Id   string                                   `json:"id"`
		Type IncidentCustomFieldSelectionListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// IncidentCustomFieldSelectionListDataType defines model for IncidentCustomFieldSelectionList.Data.Type.
type IncidentCustomFieldSelectionListDataType string

// IncidentCustomFieldSelectionResponse defines model for incident_custom_field_selection_response.
type IncidentCustomFieldSelectionResponse struct {
	Data struct {
		Attributes struct {
			CustomFieldId     *float32  `json:"custom_field_id,omitempty"`
			IncidentId        *string   `json:"incident_id,omitempty"`
			SelectedOptionIds []float32 `json:"selected_option_ids"`

			// The value of the incident_custom_field_selection
			Value *string `json:"value"`
		} `json:"attributes"`

		// Unique ID of the incident_custom_field_selection
		Id   string                                       `json:"id"`
		Type IncidentCustomFieldSelectionResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentCustomFieldSelectionResponseDataType defines model for IncidentCustomFieldSelectionResponse.Data.Type.
type IncidentCustomFieldSelectionResponseDataType string

// IncidentEvent defines model for incident_event.
type IncidentEvent struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The summary of the incident event
	Event string `json:"event"`

	// Date of occurence
	OccurredAt string `json:"occurred_at"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The visibility of the incident action item
	Visibility *IncidentEventVisibility `json:"visibility,omitempty"`
}

// The visibility of the incident action item
type IncidentEventVisibility string

// IncidentEventFunctionality defines model for incident_event_functionality.
type IncidentEventFunctionality struct {
	// The ID of the functionality.
	FunctionalityId string `json:"functionality_id"`

	// The ID of the incident event.
	IncidentEventId string `json:"incident_event_id"`

	// The status of the affected functionality
	Status IncidentEventFunctionalityStatus `json:"status"`
}

// The status of the affected functionality
type IncidentEventFunctionalityStatus string

// IncidentEventFunctionalityList defines model for incident_event_functionality_list.
type IncidentEventFunctionalityList struct {
	Data []struct {
		Attributes struct {
			// The ID of the functionality.
			FunctionalityId string `json:"functionality_id"`

			// The ID of the incident event.
			IncidentEventId string `json:"incident_event_id"`

			// The status of the affected functionality
			Status IncidentEventFunctionalityListDataAttributesStatus `json:"status"`
		} `json:"attributes"`

		// Unique ID of the incident event functionality
		Id   string                                 `json:"id"`
		Type IncidentEventFunctionalityListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The status of the affected functionality
type IncidentEventFunctionalityListDataAttributesStatus string

// IncidentEventFunctionalityListDataType defines model for IncidentEventFunctionalityList.Data.Type.
type IncidentEventFunctionalityListDataType string

// IncidentEventFunctionalityResponse defines model for incident_event_functionality_response.
type IncidentEventFunctionalityResponse struct {
	Data struct {
		Attributes struct {
			// The ID of the functionality.
			FunctionalityId string `json:"functionality_id"`

			// The ID of the incident event.
			IncidentEventId string `json:"incident_event_id"`

			// The status of the affected functionality
			Status IncidentEventFunctionalityResponseDataAttributesStatus `json:"status"`
		} `json:"attributes"`

		// Unique ID of the incident event functionality
		Id   string                                     `json:"id"`
		Type IncidentEventFunctionalityResponseDataType `json:"type"`
	} `json:"data"`
}

// The status of the affected functionality
type IncidentEventFunctionalityResponseDataAttributesStatus string

// IncidentEventFunctionalityResponseDataType defines model for IncidentEventFunctionalityResponse.Data.Type.
type IncidentEventFunctionalityResponseDataType string

// IncidentEventList defines model for incident_event_list.
type IncidentEventList struct {
	Data []struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The summary of the incident event
			Event string `json:"event"`

			// Date of occurence
			OccurredAt string `json:"occurred_at"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`

			// The visibility of the incident action item
			Visibility *IncidentEventListDataAttributesVisibility `json:"visibility,omitempty"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string                    `json:"id"`
		Type IncidentEventListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The visibility of the incident action item
type IncidentEventListDataAttributesVisibility string

// IncidentEventListDataType defines model for IncidentEventList.Data.Type.
type IncidentEventListDataType string

// IncidentEventResponse defines model for incident_event_response.
type IncidentEventResponse struct {
	Data struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The summary of the incident event
			Event string `json:"event"`

			// Date of occurence
			OccurredAt string `json:"occurred_at"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`

			// The visibility of the incident action item
			Visibility *IncidentEventResponseDataAttributesVisibility `json:"visibility,omitempty"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string                        `json:"id"`
		Type IncidentEventResponseDataType `json:"type"`
	} `json:"data"`
}

// The visibility of the incident action item
type IncidentEventResponseDataAttributesVisibility string

// IncidentEventResponseDataType defines model for IncidentEventResponse.Data.Type.
type IncidentEventResponseDataType string

// IncidentEventService defines model for incident_event_service.
type IncidentEventService struct {
	// The ID of the incident event.
	IncidentEventId string `json:"incident_event_id"`

	// The ID of the service.
	ServiceId string `json:"service_id"`

	// The status of the affected service
	Status IncidentEventServiceStatus `json:"status"`
}

// The status of the affected service
type IncidentEventServiceStatus string

// IncidentEventServiceList defines model for incident_event_service_list.
type IncidentEventServiceList struct {
	Data []struct {
		Attributes struct {
			// The ID of the incident event.
			IncidentEventId string `json:"incident_event_id"`

			// The ID of the service.
			ServiceId string `json:"service_id"`

			// The status of the affected service
			Status IncidentEventServiceListDataAttributesStatus `json:"status"`
		} `json:"attributes"`

		// Unique ID of the incident event service
		Id   string                           `json:"id"`
		Type IncidentEventServiceListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The status of the affected service
type IncidentEventServiceListDataAttributesStatus string

// IncidentEventServiceListDataType defines model for IncidentEventServiceList.Data.Type.
type IncidentEventServiceListDataType string

// IncidentEventServiceResponse defines model for incident_event_service_response.
type IncidentEventServiceResponse struct {
	Data struct {
		Attributes struct {
			// The ID of the incident event.
			IncidentEventId string `json:"incident_event_id"`

			// The ID of the service.
			ServiceId string `json:"service_id"`

			// The status of the affected service
			Status IncidentEventServiceResponseDataAttributesStatus `json:"status"`
		} `json:"attributes"`

		// Unique ID of the incident event service
		Id   string                               `json:"id"`
		Type IncidentEventServiceResponseDataType `json:"type"`
	} `json:"data"`
}

// The status of the affected service
type IncidentEventServiceResponseDataAttributesStatus string

// IncidentEventServiceResponseDataType defines model for IncidentEventServiceResponse.Data.Type.
type IncidentEventServiceResponseDataType string

// IncidentFeedback defines model for incident_feedback.
type IncidentFeedback struct {
	// Is the feedback anonymous?
	Anonymous bool `json:"anonymous"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The feedback of the incident feedback
	Feedback string `json:"feedback"`

	// The rating of the incident feedback
	Rating IncidentFeedbackRating `json:"rating"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The rating of the incident feedback
type IncidentFeedbackRating int

// IncidentFeedbackList defines model for incident_feedback_list.
type IncidentFeedbackList struct {
	Data []struct {
		Attributes struct {
			// Is the feedback anonymous?
			Anonymous bool `json:"anonymous"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The feedback of the incident feedback
			Feedback string `json:"feedback"`

			// The rating of the incident feedback
			Rating IncidentFeedbackListDataAttributesRating `json:"rating"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the incident feedback
		Id   string                       `json:"id"`
		Type IncidentFeedbackListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The rating of the incident feedback
type IncidentFeedbackListDataAttributesRating int

// IncidentFeedbackListDataType defines model for IncidentFeedbackList.Data.Type.
type IncidentFeedbackListDataType string

// IncidentFeedbackResponse defines model for incident_feedback_response.
type IncidentFeedbackResponse struct {
	Data struct {
		Attributes struct {
			// Is the feedback anonymous?
			Anonymous bool `json:"anonymous"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The feedback of the incident feedback
			Feedback string `json:"feedback"`

			// The rating of the incident feedback
			Rating IncidentFeedbackResponseDataAttributesRating `json:"rating"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the incident feedback
		Id   string                           `json:"id"`
		Type IncidentFeedbackResponseDataType `json:"type"`
	} `json:"data"`
}

// The rating of the incident feedback
type IncidentFeedbackResponseDataAttributesRating int

// IncidentFeedbackResponseDataType defines model for IncidentFeedbackResponse.Data.Type.
type IncidentFeedbackResponseDataType string

// IncidentFormFieldSelection defines model for incident_form_field_selection.
type IncidentFormFieldSelection struct {
	// The custom field for this selection
	FormFieldId       string     `json:"form_field_id"`
	IncidentId        string     `json:"incident_id"`
	SelectedOptionIds *[]string  `json:"selected_option_ids,omitempty"`
	SelectedUserIds   *[]float32 `json:"selected_user_ids,omitempty"`

	// The selected value for text kind custom fields
	Value *string `json:"value"`
}

// IncidentFormFieldSelectionList defines model for incident_form_field_selection_list.
type IncidentFormFieldSelectionList struct {
	Data []struct {
		Attributes struct {
			// The custom field for this selection
			FormFieldId       string     `json:"form_field_id"`
			IncidentId        string     `json:"incident_id"`
			SelectedOptionIds *[]string  `json:"selected_option_ids,omitempty"`
			SelectedUserIds   *[]float32 `json:"selected_user_ids,omitempty"`

			// The selected value for text kind custom fields
			Value *string `json:"value"`
		} `json:"attributes"`

		// Unique ID of the incident_form_field_selection
		Id   string                                 `json:"id"`
		Type IncidentFormFieldSelectionListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// IncidentFormFieldSelectionListDataType defines model for IncidentFormFieldSelectionList.Data.Type.
type IncidentFormFieldSelectionListDataType string

// IncidentFormFieldSelectionResponse defines model for incident_form_field_selection_response.
type IncidentFormFieldSelectionResponse struct {
	Data struct {
		Attributes struct {
			// The custom field for this selection
			FormFieldId       string     `json:"form_field_id"`
			IncidentId        string     `json:"incident_id"`
			SelectedOptionIds *[]string  `json:"selected_option_ids,omitempty"`
			SelectedUserIds   *[]float32 `json:"selected_user_ids,omitempty"`

			// The selected value for text kind custom fields
			Value *string `json:"value"`
		} `json:"attributes"`

		// Unique ID of the incident_form_field_selection
		Id   string                                     `json:"id"`
		Type IncidentFormFieldSelectionResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentFormFieldSelectionResponseDataType defines model for IncidentFormFieldSelectionResponse.Data.Type.
type IncidentFormFieldSelectionResponseDataType string

// IncidentList defines model for incident_list.
type IncidentList struct {
	Data []struct {
		Attributes struct {
			// Date of acknowledgment
			AcknowledgedAt *string `json:"acknowledged_at"`

			// Why was the incident cancelled?
			CancellationMessage *string `json:"cancellation_message"`

			// Date of cancellation
			CancelledAt *string `json:"cancelled_at"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// Date of detection
			DetectedAt *string `json:"detected_at"`

			// The Environments of the incident
			Environments *[]struct {
				Data struct {
					Attributes struct {
						// The hex color of the environment
						Color *string `json:"color"`

						// Date of creation
						CreatedAt string `json:"created_at"`

						// The description of the environment
						Description *string `json:"description"`

						// The name of the environment
						Name string `json:"name"`

						// Emails attached to the environment
						NotifyEmails *[]string `json:"notify_emails"`

						// Position of the environment
						Position *int `json:"position"`

						// Slack Aliases associated with this environment
						SlackAliases *[]struct {
							// Slack alias ID
							Id string `json:"id"`

							// Slack alias name
							Name string `json:"name"`
						} `json:"slack_aliases"`

						// Slack Channels associated with this environment
						SlackChannels *[]struct {
							// Slack channel ID
							Id string `json:"id"`

							// Slack channel name
							Name string `json:"name"`
						} `json:"slack_channels"`

						// The slug of the environment
						Slug *string `json:"slug,omitempty"`

						// Date of last update
						UpdatedAt string `json:"updated_at"`
					} `json:"attributes"`

					// Unique ID of the environment
					Id   string                                         `json:"id"`
					Type IncidentListDataAttributesEnvironmentsDataType `json:"type"`
				} `json:"data"`
			} `json:"environments"`

			// The Functionalities of the incident
			Functionalities *[]struct {
				Data struct {
					Attributes struct {
						// The hex color of the functionality
						Color *string `json:"color"`

						// Date of creation
						CreatedAt string `json:"created_at"`

						// The description of the functionality
						Description *string `json:"description"`

						// Environments associated with this functionality
						EnvironmentIds *[]string `json:"environment_ids"`

						// The name of the functionality
						Name string `json:"name"`

						// Emails attached to the functionality
						NotifyEmails *[]string `json:"notify_emails"`

						// Owner Teams associated with this functionality
						OwnersGroupIds *[]string `json:"owners_group_ids"`

						// Owner Users associated with this service
						OwnersUserIds *[]int `json:"owners_user_ids"`

						// Position of the functionality
						Position *int `json:"position"`

						// The public description of the functionality
						PublicDescription *string `json:"public_description"`

						// Services associated with this functionality
						ServiceIds *[]string `json:"service_ids"`

						// Slack Aliases associated with this service
						SlackAliases *[]struct {
							// Slack alias ID
							Id string `json:"id"`

							// Slack alias name
							Name string `json:"name"`
						} `json:"slack_aliases"`

						// Slack Channels associated with this service
						SlackChannels *[]struct {
							// Slack channel ID
							Id string `json:"id"`

							// Slack channel name
							Name string `json:"name"`
						} `json:"slack_channels"`

						// The slug of the functionality
						Slug *string `json:"slug,omitempty"`

						// The status of the functionality
						Status *IncidentListDataAttributesFunctionalitiesDataAttributesStatus `json:"status,omitempty"`

						// Date of last update
						UpdatedAt string `json:"updated_at"`
					} `json:"attributes"`

					// Unique ID of the functionality
					Id   string                                            `json:"id"`
					Type IncidentListDataAttributesFunctionalitiesDataType `json:"type"`
				} `json:"data"`
			} `json:"functionalities"`

			// The Teams of to the incident
			Groups *[]struct {
				Data struct {
					Attributes struct {
						// The hex color of the team
						Color *string `json:"color"`

						// Date of creation
						CreatedAt string `json:"created_at"`

						// The description of the team
						Description *string `json:"description"`

						// The name of the team
						Name string `json:"name"`

						// Emails to attach to the team
						NotifyEmails *[]string `json:"notify_emails"`

						// The Opsgenie group id associated to this team
						OpsgenieId *string `json:"opsgenie_id"`

						// The PagerDuty group id associated to this team
						PagerdutyId *string `json:"pagerduty_id"`

						// The PagerTree group id associated to this team
						PagertreeId *string `json:"pagertree_id"`

						// Position of the team
						Position *int `json:"position"`

						// Slack Aliases associated with this service
						SlackAliases *[]struct {
							// Slack alias ID
							Id string `json:"id"`

							// Slack alias name
							Name string `json:"name"`
						} `json:"slack_aliases"`

						// Slack Channels associated with this service
						SlackChannels *[]struct {
							// Slack channel ID
							Id string `json:"id"`

							// Slack channel name
							Name string `json:"name"`
						} `json:"slack_channels"`
						Slug *string `json:"slug,omitempty"`

						// Date of last update
						UpdatedAt string `json:"updated_at"`

						// The User ID's members of this team
						UserIds *[]int `json:"user_ids"`

						// The VictorOps group id associated to this team
						VictorOpsId *string `json:"victor_ops_id"`
					} `json:"attributes"`

					// Unique ID of the team
					Id   string                                   `json:"id"`
					Type IncidentListDataAttributesGroupsDataType `json:"type"`
				} `json:"data"`
			} `json:"groups"`

			// Date of triage
			InTriageAt *string `json:"in_triage_at"`

			// The Incident Types of the incident
			IncidentTypes *[]struct {
				Data struct {
					Attributes struct {
						// The hex color of the incident type
						Color *string `json:"color"`

						// Date of creation
						CreatedAt string `json:"created_at"`

						// The description of the incident type
						Description *string `json:"description"`

						// The name of the incident type
						Name string `json:"name"`

						// Emails to attach to the incident type
						NotifyEmails *[]string `json:"notify_emails"`

						// Position of the incident type
						Position *int `json:"position"`

						// Slack Aliases associated with this incident type
						SlackAliases *[]struct {
							// Slack alias ID
							Id string `json:"id"`

							// Slack alias name
							Name string `json:"name"`
						} `json:"slack_aliases"`

						// Slack Channels associated with this incident type
						SlackChannels *[]struct {
							// Slack channel ID
							Id string `json:"id"`

							// Slack channel name
							Name string `json:"name"`
						} `json:"slack_channels"`

						// The slug of the incident type
						Slug *string `json:"slug,omitempty"`

						// Date of last update
						UpdatedAt string `json:"updated_at"`
					} `json:"attributes"`

					// Unique ID of the incident type
					Id   string                                          `json:"id"`
					Type IncidentListDataAttributesIncidentTypesDataType `json:"type"`
				} `json:"data"`
			} `json:"incident_types"`

			// The kind of the incident
			Kind *string `json:"kind,omitempty"`

			// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// How was the incident mitigated?
			MitigationMessage *string `json:"mitigation_message"`

			// ID of parent incident
			ParentIncidentId *string `json:"parent_incident_id"`

			// Create an incident as private
			Private *bool `json:"private"`

			// How was the incident resolved?
			ResolutionMessage *string `json:"resolution_message"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// Date of when the maintenance begins
			ScheduledFor *string `json:"scheduled_for"`

			// Date of when the maintenance ends
			ScheduledUntil *string `json:"scheduled_until"`

			// The Services of the incident
			Services *[]struct {
				Data struct {
					Attributes struct {
						// The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
						BackstageId *string `json:"backstage_id"`

						// The hex color of the service
						Color *string `json:"color"`

						// Date of creation
						CreatedAt string `json:"created_at"`

						// The description of the service
						Description *string `json:"description"`

						// Environments associated with this service
						EnvironmentIds *[]string `json:"environment_ids"`

						// The GitHub repository branch associated to this service. eg: main
						GithubRepositoryBranch *string `json:"github_repository_branch"`

						// The GitHub repository name associated to this service. eg: rootlyhq/my-service
						GithubRepositoryName *string `json:"github_repository_name"`

						// The Gitlab repository branch associated to this service. eg: main
						GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

						// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
						GitlabRepositoryName *string `json:"gitlab_repository_name"`

						// The name of the service
						Name string `json:"name"`

						// Emails attached to the service
						NotifyEmails *[]string `json:"notify_emails"`

						// The Opsgenie service id associated to this service
						OpsgenieId *string `json:"opsgenie_id"`

						// Owner Teams associated with this service
						OwnersGroupIds *[]string `json:"owners_group_ids"`

						// Owner Users associated with this service
						OwnersUserIds *[]int `json:"owners_user_ids"`

						// The PagerDuty service id associated to this service
						PagerdutyId *string `json:"pagerduty_id"`

						// Position of the service
						Position *int `json:"position"`

						// The public description of the service
						PublicDescription *string `json:"public_description"`

						// Services dependent on this service
						ServiceIds *[]string `json:"service_ids"`

						// Slack Aliases associated with this service
						SlackAliases *[]struct {
							// Slack alias ID
							Id string `json:"id"`

							// Slack alias name
							Name string `json:"name"`
						} `json:"slack_aliases"`

						// Slack Channels associated with this service
						SlackChannels *[]struct {
							// Slack channel ID
							Id string `json:"id"`

							// Slack channel name
							Name string `json:"name"`
						} `json:"slack_channels"`

						// The slug of the service
						Slug *string `json:"slug,omitempty"`

						// The status of the service
						Status *IncidentListDataAttributesServicesDataAttributesStatus `json:"status,omitempty"`

						// Date of last update
						UpdatedAt string `json:"updated_at"`
					} `json:"attributes"`

					// Unique ID of the service
					Id   string                                     `json:"id"`
					Type IncidentListDataAttributesServicesDataType `json:"type"`
				} `json:"data"`
			} `json:"services"`

			// The Severity of the incident
			Severity *struct {
				Data struct {
					Attributes struct {
						// The hex color of the severity
						Color *string `json:"color"`

						// Date of creation
						CreatedAt string `json:"created_at"`

						// The description of the severity
						Description *string `json:"description"`

						// The name of the severity
						Name string `json:"name"`

						// Emails to attach to the severity
						NotifyEmails *[]string `json:"notify_emails"`

						// Position of the severity
						Position *int `json:"position"`

						// The severity of the severity
						Severity *IncidentListDataAttributesSeverityDataAttributesSeverity `json:"severity,omitempty"`

						// Slack Aliases associated with this severity
						SlackAliases *[]struct {
							// Slack alias ID
							Id string `json:"id"`

							// Slack alias name
							Name string `json:"name"`
						} `json:"slack_aliases"`

						// Slack Channels associated with this severity
						SlackChannels *[]struct {
							// Slack channel ID
							Id string `json:"id"`

							// Slack channel name
							Name string `json:"name"`
						} `json:"slack_channels"`

						// The slug of the severity
						Slug *string `json:"slug,omitempty"`

						// Date of last update
						UpdatedAt string `json:"updated_at"`
					} `json:"attributes"`

					// Unique ID of the severity
					Id   string                                     `json:"id"`
					Type IncidentListDataAttributesSeverityDataType `json:"type"`
				} `json:"data"`
			} `json:"severity"`

			// Slack channel id
			SlackChannelId *string `json:"slack_channel_id"`

			// Slack channel name
			SlackChannelName *string `json:"slack_channel_name"`

			// Slack channel url
			SlackChannelUrl *string `json:"slack_channel_url"`

			// The slug of the incident
			Slug string `json:"slug"`

			// Date of start
			StartedAt *string `json:"started_at"`

			// The summary of the incident
			Summary *string `json:"summary"`

			// The title of the incident
			Title string `json:"title"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the incident
		Id   string               `json:"id"`
		Type IncidentListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// IncidentListDataAttributesEnvironmentsDataType defines model for IncidentList.Data.Attributes.Environments.Data.Type.
type IncidentListDataAttributesEnvironmentsDataType string

// The status of the functionality
type IncidentListDataAttributesFunctionalitiesDataAttributesStatus string

// IncidentListDataAttributesFunctionalitiesDataType defines model for IncidentList.Data.Attributes.Functionalities.Data.Type.
type IncidentListDataAttributesFunctionalitiesDataType string

// IncidentListDataAttributesGroupsDataType defines model for IncidentList.Data.Attributes.Groups.Data.Type.
type IncidentListDataAttributesGroupsDataType string

// IncidentListDataAttributesIncidentTypesDataType defines model for IncidentList.Data.Attributes.IncidentTypes.Data.Type.
type IncidentListDataAttributesIncidentTypesDataType string

// The status of the service
type IncidentListDataAttributesServicesDataAttributesStatus string

// IncidentListDataAttributesServicesDataType defines model for IncidentList.Data.Attributes.Services.Data.Type.
type IncidentListDataAttributesServicesDataType string

// The severity of the severity
type IncidentListDataAttributesSeverityDataAttributesSeverity string

// IncidentListDataAttributesSeverityDataType defines model for IncidentList.Data.Attributes.Severity.Data.Type.
type IncidentListDataAttributesSeverityDataType string

// IncidentListDataType defines model for IncidentList.Data.Type.
type IncidentListDataType string

// IncidentPermissionSet defines model for incident_permission_set.
type IncidentPermissionSet struct {
	CreatedAt string `json:"created_at"`

	// The incident permission set description.
	Description *string `json:"description"`

	// The incident permission set name.
	Name                       string                                             `json:"name"`
	PrivateIncidentPermissions *[]IncidentPermissionSetPrivateIncidentPermissions `json:"private_incident_permissions,omitempty"`
	PublicIncidentPermissions  *[]IncidentPermissionSetPublicIncidentPermissions  `json:"public_incident_permissions,omitempty"`

	// The incident permission set slug.
	Slug      string `json:"slug"`
	UpdatedAt string `json:"updated_at"`
}

// IncidentPermissionSetPrivateIncidentPermissions defines model for IncidentPermissionSet.PrivateIncidentPermissions.
type IncidentPermissionSetPrivateIncidentPermissions string

// IncidentPermissionSetPublicIncidentPermissions defines model for IncidentPermissionSet.PublicIncidentPermissions.
type IncidentPermissionSetPublicIncidentPermissions string

// IncidentPermissionSetBoolean defines model for incident_permission_set_boolean.
type IncidentPermissionSetBoolean struct {
	CreatedAt               string                           `json:"created_at"`
	Enabled                 *bool                            `json:"enabled,omitempty"`
	IncidentPermissionSetId *string                          `json:"incident_permission_set_id,omitempty"`
	Kind                    IncidentPermissionSetBooleanKind `json:"kind"`
	Private                 *bool                            `json:"private,omitempty"`
	UpdatedAt               string                           `json:"updated_at"`
}

// IncidentPermissionSetBooleanKind defines model for IncidentPermissionSetBoolean.Kind.
type IncidentPermissionSetBooleanKind string

// IncidentPermissionSetBooleanList defines model for incident_permission_set_boolean_list.
type IncidentPermissionSetBooleanList struct {
	Data []struct {
		Attributes struct {
			CreatedAt               string                                             `json:"created_at"`
			Enabled                 *bool                                              `json:"enabled,omitempty"`
			IncidentPermissionSetId *string                                            `json:"incident_permission_set_id,omitempty"`
			Kind                    IncidentPermissionSetBooleanListDataAttributesKind `json:"kind"`
			Private                 *bool                                              `json:"private,omitempty"`
			UpdatedAt               string                                             `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the incident permission set boolean
		Id   string                                   `json:"id"`
		Type IncidentPermissionSetBooleanListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// IncidentPermissionSetBooleanListDataAttributesKind defines model for IncidentPermissionSetBooleanList.Data.Attributes.Kind.
type IncidentPermissionSetBooleanListDataAttributesKind string

// IncidentPermissionSetBooleanListDataType defines model for IncidentPermissionSetBooleanList.Data.Type.
type IncidentPermissionSetBooleanListDataType string

// IncidentPermissionSetBooleanResponse defines model for incident_permission_set_boolean_response.
type IncidentPermissionSetBooleanResponse struct {
	Data struct {
		Attributes struct {
			CreatedAt               string                                                 `json:"created_at"`
			Enabled                 *bool                                                  `json:"enabled,omitempty"`
			IncidentPermissionSetId *string                                                `json:"incident_permission_set_id,omitempty"`
			Kind                    IncidentPermissionSetBooleanResponseDataAttributesKind `json:"kind"`
			Private                 *bool                                                  `json:"private,omitempty"`
			UpdatedAt               string                                                 `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the incident permission set boolean
		Id   string                                       `json:"id"`
		Type IncidentPermissionSetBooleanResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentPermissionSetBooleanResponseDataAttributesKind defines model for IncidentPermissionSetBooleanResponse.Data.Attributes.Kind.
type IncidentPermissionSetBooleanResponseDataAttributesKind string

// IncidentPermissionSetBooleanResponseDataType defines model for IncidentPermissionSetBooleanResponse.Data.Type.
type IncidentPermissionSetBooleanResponseDataType string

// IncidentPermissionSetList defines model for incident_permission_set_list.
type IncidentPermissionSetList struct {
	Data []struct {
		Attributes struct {
			CreatedAt string `json:"created_at"`

			// The incident permission set description.
			Description *string `json:"description"`

			// The incident permission set name.
			Name                       string                                                               `json:"name"`
			PrivateIncidentPermissions *[]IncidentPermissionSetListDataAttributesPrivateIncidentPermissions `json:"private_incident_permissions,omitempty"`
			PublicIncidentPermissions  *[]IncidentPermissionSetListDataAttributesPublicIncidentPermissions  `json:"public_incident_permissions,omitempty"`

			// The incident permission set slug.
			Slug      string `json:"slug"`
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the incident permission set
		Id   string                            `json:"id"`
		Type IncidentPermissionSetListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// IncidentPermissionSetListDataAttributesPrivateIncidentPermissions defines model for IncidentPermissionSetList.Data.Attributes.PrivateIncidentPermissions.
type IncidentPermissionSetListDataAttributesPrivateIncidentPermissions string

// IncidentPermissionSetListDataAttributesPublicIncidentPermissions defines model for IncidentPermissionSetList.Data.Attributes.PublicIncidentPermissions.
type IncidentPermissionSetListDataAttributesPublicIncidentPermissions string

// IncidentPermissionSetListDataType defines model for IncidentPermissionSetList.Data.Type.
type IncidentPermissionSetListDataType string

// IncidentPermissionSetResource defines model for incident_permission_set_resource.
type IncidentPermissionSetResource struct {
	CreatedAt               string                            `json:"created_at"`
	IncidentPermissionSetId string                            `json:"incident_permission_set_id"`
	Kind                    IncidentPermissionSetResourceKind `json:"kind"`
	Private                 *bool                             `json:"private,omitempty"`
	ResourceId              *string                           `json:"resource_id"`
	ResourceType            *string                           `json:"resource_type"`
	UpdatedAt               string                            `json:"updated_at"`
}

// IncidentPermissionSetResourceKind defines model for IncidentPermissionSetResource.Kind.
type IncidentPermissionSetResourceKind string

// IncidentPermissionSetResourceList defines model for incident_permission_set_resource_list.
type IncidentPermissionSetResourceList struct {
	Data []struct {
		Attributes struct {
			CreatedAt               string                                              `json:"created_at"`
			IncidentPermissionSetId string                                              `json:"incident_permission_set_id"`
			Kind                    IncidentPermissionSetResourceListDataAttributesKind `json:"kind"`
			Private                 *bool                                               `json:"private,omitempty"`
			ResourceId              *string                                             `json:"resource_id"`
			ResourceType            *string                                             `json:"resource_type"`
			UpdatedAt               string                                              `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the incident permission set resource
		Id   string                                    `json:"id"`
		Type IncidentPermissionSetResourceListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// IncidentPermissionSetResourceListDataAttributesKind defines model for IncidentPermissionSetResourceList.Data.Attributes.Kind.
type IncidentPermissionSetResourceListDataAttributesKind string

// IncidentPermissionSetResourceListDataType defines model for IncidentPermissionSetResourceList.Data.Type.
type IncidentPermissionSetResourceListDataType string

// IncidentPermissionSetResourceResponse defines model for incident_permission_set_resource_response.
type IncidentPermissionSetResourceResponse struct {
	Data struct {
		Attributes struct {
			CreatedAt               string                                                  `json:"created_at"`
			IncidentPermissionSetId string                                                  `json:"incident_permission_set_id"`
			Kind                    IncidentPermissionSetResourceResponseDataAttributesKind `json:"kind"`
			Private                 *bool                                                   `json:"private,omitempty"`
			ResourceId              *string                                                 `json:"resource_id"`
			ResourceType            *string                                                 `json:"resource_type"`
			UpdatedAt               string                                                  `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the incident permission set resource
		Id   string                                        `json:"id"`
		Type IncidentPermissionSetResourceResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentPermissionSetResourceResponseDataAttributesKind defines model for IncidentPermissionSetResourceResponse.Data.Attributes.Kind.
type IncidentPermissionSetResourceResponseDataAttributesKind string

// IncidentPermissionSetResourceResponseDataType defines model for IncidentPermissionSetResourceResponse.Data.Type.
type IncidentPermissionSetResourceResponseDataType string

// IncidentPermissionSetResponse defines model for incident_permission_set_response.
type IncidentPermissionSetResponse struct {
	Data struct {
		Attributes struct {
			CreatedAt string `json:"created_at"`

			// The incident permission set description.
			Description *string `json:"description"`

			// The incident permission set name.
			Name                       string                                                                   `json:"name"`
			PrivateIncidentPermissions *[]IncidentPermissionSetResponseDataAttributesPrivateIncidentPermissions `json:"private_incident_permissions,omitempty"`
			PublicIncidentPermissions  *[]IncidentPermissionSetResponseDataAttributesPublicIncidentPermissions  `json:"public_incident_permissions,omitempty"`

			// The incident permission set slug.
			Slug      string `json:"slug"`
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the incident permission set
		Id   string                                `json:"id"`
		Type IncidentPermissionSetResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentPermissionSetResponseDataAttributesPrivateIncidentPermissions defines model for IncidentPermissionSetResponse.Data.Attributes.PrivateIncidentPermissions.
type IncidentPermissionSetResponseDataAttributesPrivateIncidentPermissions string

// IncidentPermissionSetResponseDataAttributesPublicIncidentPermissions defines model for IncidentPermissionSetResponse.Data.Attributes.PublicIncidentPermissions.
type IncidentPermissionSetResponseDataAttributesPublicIncidentPermissions string

// IncidentPermissionSetResponseDataType defines model for IncidentPermissionSetResponse.Data.Type.
type IncidentPermissionSetResponseDataType string

// IncidentPostMortem defines model for incident_post_mortem.
type IncidentPostMortem struct {
	// The content of the incident retrospective (Only if internal)
	Content *string `json:"content"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Date of mitigation
	MitigatedAt *string `json:"mitigated_at"`

	// Date of resolution
	ResolvedAt *string `json:"resolved_at"`

	// Show alerts attached to the incident
	ShowAlertsAttached *bool `json:"show_alerts_attached,omitempty"`

	// Show services impacted of the incident retrospective
	ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

	// Show groups impacted of the incident retrospective
	ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

	// Show functionalities impacted of the incident retrospective
	ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

	// Show events timeline of the incident retrospective
	ShowTimeline *bool `json:"show_timeline,omitempty"`

	// Show action items in the timeline of the incident retrospective
	ShowTimelineActionItems *bool `json:"show_timeline_action_items,omitempty"`

	// Show workflow events in the timeline of the incident retrospective
	ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

	// The order of the incident retrospective timeline
	ShowTimelineOrder *IncidentPostMortemShowTimelineOrder `json:"show_timeline_order,omitempty"`

	// Show tasks in the timeline of the incident retrospective
	ShowTimelineTasks *bool `json:"show_timeline_tasks,omitempty"`

	// Show trail events in the timeline of the incident retrospective
	ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

	// Date of started at
	StartedAt *string `json:"started_at"`

	// The status of the incident retrospective
	Status *IncidentPostMortemStatus `json:"status,omitempty"`

	// The title of the incident retrospective
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The url to the incident retrospective
	Url *string `json:"url,omitempty"`
}

// The order of the incident retrospective timeline
type IncidentPostMortemShowTimelineOrder string

// The status of the incident retrospective
type IncidentPostMortemStatus string

// IncidentPostMortemList defines model for incident_post_mortem_list.
type IncidentPostMortemList struct {
	Data []struct {
		Attributes struct {
			// The content of the incident retrospective (Only if internal)
			Content *string `json:"content"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// Show alerts attached to the incident
			ShowAlertsAttached *bool `json:"show_alerts_attached,omitempty"`

			// Show services impacted of the incident retrospective
			ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

			// Show groups impacted of the incident retrospective
			ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

			// Show functionalities impacted of the incident retrospective
			ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

			// Show events timeline of the incident retrospective
			ShowTimeline *bool `json:"show_timeline,omitempty"`

			// Show action items in the timeline of the incident retrospective
			ShowTimelineActionItems *bool `json:"show_timeline_action_items,omitempty"`

			// Show workflow events in the timeline of the incident retrospective
			ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

			// The order of the incident retrospective timeline
			ShowTimelineOrder *IncidentPostMortemListDataAttributesShowTimelineOrder `json:"show_timeline_order,omitempty"`

			// Show tasks in the timeline of the incident retrospective
			ShowTimelineTasks *bool `json:"show_timeline_tasks,omitempty"`

			// Show trail events in the timeline of the incident retrospective
			ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

			// Date of started at
			StartedAt *string `json:"started_at"`

			// The status of the incident retrospective
			Status *IncidentPostMortemListDataAttributesStatus `json:"status,omitempty"`

			// The title of the incident retrospective
			Title string `json:"title"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`

			// The url to the incident retrospective
			Url *string `json:"url,omitempty"`
		} `json:"attributes"`

		// Unique ID of the incident retrospective
		Id   string                         `json:"id"`
		Type IncidentPostMortemListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The order of the incident retrospective timeline
type IncidentPostMortemListDataAttributesShowTimelineOrder string

// The status of the incident retrospective
type IncidentPostMortemListDataAttributesStatus string

// IncidentPostMortemListDataType defines model for IncidentPostMortemList.Data.Type.
type IncidentPostMortemListDataType string

// IncidentPostMortemResponse defines model for incident_post_mortem_response.
type IncidentPostMortemResponse struct {
	Data struct {
		Attributes struct {
			// The content of the incident retrospective (Only if internal)
			Content *string `json:"content"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// Show alerts attached to the incident
			ShowAlertsAttached *bool `json:"show_alerts_attached,omitempty"`

			// Show services impacted of the incident retrospective
			ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

			// Show groups impacted of the incident retrospective
			ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

			// Show functionalities impacted of the incident retrospective
			ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

			// Show events timeline of the incident retrospective
			ShowTimeline *bool `json:"show_timeline,omitempty"`

			// Show action items in the timeline of the incident retrospective
			ShowTimelineActionItems *bool `json:"show_timeline_action_items,omitempty"`

			// Show workflow events in the timeline of the incident retrospective
			ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

			// The order of the incident retrospective timeline
			ShowTimelineOrder *IncidentPostMortemResponseDataAttributesShowTimelineOrder `json:"show_timeline_order,omitempty"`

			// Show tasks in the timeline of the incident retrospective
			ShowTimelineTasks *bool `json:"show_timeline_tasks,omitempty"`

			// Show trail events in the timeline of the incident retrospective
			ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

			// Date of started at
			StartedAt *string `json:"started_at"`

			// The status of the incident retrospective
			Status *IncidentPostMortemResponseDataAttributesStatus `json:"status,omitempty"`

			// The title of the incident retrospective
			Title string `json:"title"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`

			// The url to the incident retrospective
			Url *string `json:"url,omitempty"`
		} `json:"attributes"`

		// Unique ID of the incident retrospective
		Id   string                             `json:"id"`
		Type IncidentPostMortemResponseDataType `json:"type"`
	} `json:"data"`
}

// The order of the incident retrospective timeline
type IncidentPostMortemResponseDataAttributesShowTimelineOrder string

// The status of the incident retrospective
type IncidentPostMortemResponseDataAttributesStatus string

// IncidentPostMortemResponseDataType defines model for IncidentPostMortemResponse.Data.Type.
type IncidentPostMortemResponseDataType string

// IncidentResponse defines model for incident_response.
type IncidentResponse struct {
	Data struct {
		Attributes struct {
			// Date of acknowledgment
			AcknowledgedAt *string `json:"acknowledged_at"`

			// Why was the incident cancelled?
			CancellationMessage *string `json:"cancellation_message"`

			// Date of cancellation
			CancelledAt *string `json:"cancelled_at"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// Date of detection
			DetectedAt *string `json:"detected_at"`

			// The Environments of the incident
			Environments *[]struct {
				Data struct {
					Attributes struct {
						// The hex color of the environment
						Color *string `json:"color"`

						// Date of creation
						CreatedAt string `json:"created_at"`

						// The description of the environment
						Description *string `json:"description"`

						// The name of the environment
						Name string `json:"name"`

						// Emails attached to the environment
						NotifyEmails *[]string `json:"notify_emails"`

						// Position of the environment
						Position *int `json:"position"`

						// Slack Aliases associated with this environment
						SlackAliases *[]struct {
							// Slack alias ID
							Id string `json:"id"`

							// Slack alias name
							Name string `json:"name"`
						} `json:"slack_aliases"`

						// Slack Channels associated with this environment
						SlackChannels *[]struct {
							// Slack channel ID
							Id string `json:"id"`

							// Slack channel name
							Name string `json:"name"`
						} `json:"slack_channels"`

						// The slug of the environment
						Slug *string `json:"slug,omitempty"`

						// Date of last update
						UpdatedAt string `json:"updated_at"`
					} `json:"attributes"`

					// Unique ID of the environment
					Id   string                                             `json:"id"`
					Type IncidentResponseDataAttributesEnvironmentsDataType `json:"type"`
				} `json:"data"`
			} `json:"environments"`

			// The Functionalities of the incident
			Functionalities *[]struct {
				Data struct {
					Attributes struct {
						// The hex color of the functionality
						Color *string `json:"color"`

						// Date of creation
						CreatedAt string `json:"created_at"`

						// The description of the functionality
						Description *string `json:"description"`

						// Environments associated with this functionality
						EnvironmentIds *[]string `json:"environment_ids"`

						// The name of the functionality
						Name string `json:"name"`

						// Emails attached to the functionality
						NotifyEmails *[]string `json:"notify_emails"`

						// Owner Teams associated with this functionality
						OwnersGroupIds *[]string `json:"owners_group_ids"`

						// Owner Users associated with this service
						OwnersUserIds *[]int `json:"owners_user_ids"`

						// Position of the functionality
						Position *int `json:"position"`

						// The public description of the functionality
						PublicDescription *string `json:"public_description"`

						// Services associated with this functionality
						ServiceIds *[]string `json:"service_ids"`

						// Slack Aliases associated with this service
						SlackAliases *[]struct {
							// Slack alias ID
							Id string `json:"id"`

							// Slack alias name
							Name string `json:"name"`
						} `json:"slack_aliases"`

						// Slack Channels associated with this service
						SlackChannels *[]struct {
							// Slack channel ID
							Id string `json:"id"`

							// Slack channel name
							Name string `json:"name"`
						} `json:"slack_channels"`

						// The slug of the functionality
						Slug *string `json:"slug,omitempty"`

						// The status of the functionality
						Status *IncidentResponseDataAttributesFunctionalitiesDataAttributesStatus `json:"status,omitempty"`

						// Date of last update
						UpdatedAt string `json:"updated_at"`
					} `json:"attributes"`

					// Unique ID of the functionality
					Id   string                                                `json:"id"`
					Type IncidentResponseDataAttributesFunctionalitiesDataType `json:"type"`
				} `json:"data"`
			} `json:"functionalities"`

			// The Teams of to the incident
			Groups *[]struct {
				Data struct {
					Attributes struct {
						// The hex color of the team
						Color *string `json:"color"`

						// Date of creation
						CreatedAt string `json:"created_at"`

						// The description of the team
						Description *string `json:"description"`

						// The name of the team
						Name string `json:"name"`

						// Emails to attach to the team
						NotifyEmails *[]string `json:"notify_emails"`

						// The Opsgenie group id associated to this team
						OpsgenieId *string `json:"opsgenie_id"`

						// The PagerDuty group id associated to this team
						PagerdutyId *string `json:"pagerduty_id"`

						// The PagerTree group id associated to this team
						PagertreeId *string `json:"pagertree_id"`

						// Position of the team
						Position *int `json:"position"`

						// Slack Aliases associated with this service
						SlackAliases *[]struct {
							// Slack alias ID
							Id string `json:"id"`

							// Slack alias name
							Name string `json:"name"`
						} `json:"slack_aliases"`

						// Slack Channels associated with this service
						SlackChannels *[]struct {
							// Slack channel ID
							Id string `json:"id"`

							// Slack channel name
							Name string `json:"name"`
						} `json:"slack_channels"`
						Slug *string `json:"slug,omitempty"`

						// Date of last update
						UpdatedAt string `json:"updated_at"`

						// The User ID's members of this team
						UserIds *[]int `json:"user_ids"`

						// The VictorOps group id associated to this team
						VictorOpsId *string `json:"victor_ops_id"`
					} `json:"attributes"`

					// Unique ID of the team
					Id   string                                       `json:"id"`
					Type IncidentResponseDataAttributesGroupsDataType `json:"type"`
				} `json:"data"`
			} `json:"groups"`

			// Date of triage
			InTriageAt *string `json:"in_triage_at"`

			// The Incident Types of the incident
			IncidentTypes *[]struct {
				Data struct {
					Attributes struct {
						// The hex color of the incident type
						Color *string `json:"color"`

						// Date of creation
						CreatedAt string `json:"created_at"`

						// The description of the incident type
						Description *string `json:"description"`

						// The name of the incident type
						Name string `json:"name"`

						// Emails to attach to the incident type
						NotifyEmails *[]string `json:"notify_emails"`

						// Position of the incident type
						Position *int `json:"position"`

						// Slack Aliases associated with this incident type
						SlackAliases *[]struct {
							// Slack alias ID
							Id string `json:"id"`

							// Slack alias name
							Name string `json:"name"`
						} `json:"slack_aliases"`

						// Slack Channels associated with this incident type
						SlackChannels *[]struct {
							// Slack channel ID
							Id string `json:"id"`

							// Slack channel name
							Name string `json:"name"`
						} `json:"slack_channels"`

						// The slug of the incident type
						Slug *string `json:"slug,omitempty"`

						// Date of last update
						UpdatedAt string `json:"updated_at"`
					} `json:"attributes"`

					// Unique ID of the incident type
					Id   string                                              `json:"id"`
					Type IncidentResponseDataAttributesIncidentTypesDataType `json:"type"`
				} `json:"data"`
			} `json:"incident_types"`

			// The kind of the incident
			Kind *string `json:"kind,omitempty"`

			// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// How was the incident mitigated?
			MitigationMessage *string `json:"mitigation_message"`

			// ID of parent incident
			ParentIncidentId *string `json:"parent_incident_id"`

			// Create an incident as private
			Private *bool `json:"private"`

			// How was the incident resolved?
			ResolutionMessage *string `json:"resolution_message"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// Date of when the maintenance begins
			ScheduledFor *string `json:"scheduled_for"`

			// Date of when the maintenance ends
			ScheduledUntil *string `json:"scheduled_until"`

			// The Services of the incident
			Services *[]struct {
				Data struct {
					Attributes struct {
						// The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
						BackstageId *string `json:"backstage_id"`

						// The hex color of the service
						Color *string `json:"color"`

						// Date of creation
						CreatedAt string `json:"created_at"`

						// The description of the service
						Description *string `json:"description"`

						// Environments associated with this service
						EnvironmentIds *[]string `json:"environment_ids"`

						// The GitHub repository branch associated to this service. eg: main
						GithubRepositoryBranch *string `json:"github_repository_branch"`

						// The GitHub repository name associated to this service. eg: rootlyhq/my-service
						GithubRepositoryName *string `json:"github_repository_name"`

						// The Gitlab repository branch associated to this service. eg: main
						GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

						// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
						GitlabRepositoryName *string `json:"gitlab_repository_name"`

						// The name of the service
						Name string `json:"name"`

						// Emails attached to the service
						NotifyEmails *[]string `json:"notify_emails"`

						// The Opsgenie service id associated to this service
						OpsgenieId *string `json:"opsgenie_id"`

						// Owner Teams associated with this service
						OwnersGroupIds *[]string `json:"owners_group_ids"`

						// Owner Users associated with this service
						OwnersUserIds *[]int `json:"owners_user_ids"`

						// The PagerDuty service id associated to this service
						PagerdutyId *string `json:"pagerduty_id"`

						// Position of the service
						Position *int `json:"position"`

						// The public description of the service
						PublicDescription *string `json:"public_description"`

						// Services dependent on this service
						ServiceIds *[]string `json:"service_ids"`

						// Slack Aliases associated with this service
						SlackAliases *[]struct {
							// Slack alias ID
							Id string `json:"id"`

							// Slack alias name
							Name string `json:"name"`
						} `json:"slack_aliases"`

						// Slack Channels associated with this service
						SlackChannels *[]struct {
							// Slack channel ID
							Id string `json:"id"`

							// Slack channel name
							Name string `json:"name"`
						} `json:"slack_channels"`

						// The slug of the service
						Slug *string `json:"slug,omitempty"`

						// The status of the service
						Status *IncidentResponseDataAttributesServicesDataAttributesStatus `json:"status,omitempty"`

						// Date of last update
						UpdatedAt string `json:"updated_at"`
					} `json:"attributes"`

					// Unique ID of the service
					Id   string                                         `json:"id"`
					Type IncidentResponseDataAttributesServicesDataType `json:"type"`
				} `json:"data"`
			} `json:"services"`

			// The Severity of the incident
			Severity *struct {
				Data struct {
					Attributes struct {
						// The hex color of the severity
						Color *string `json:"color"`

						// Date of creation
						CreatedAt string `json:"created_at"`

						// The description of the severity
						Description *string `json:"description"`

						// The name of the severity
						Name string `json:"name"`

						// Emails to attach to the severity
						NotifyEmails *[]string `json:"notify_emails"`

						// Position of the severity
						Position *int `json:"position"`

						// The severity of the severity
						Severity *IncidentResponseDataAttributesSeverityDataAttributesSeverity `json:"severity,omitempty"`

						// Slack Aliases associated with this severity
						SlackAliases *[]struct {
							// Slack alias ID
							Id string `json:"id"`

							// Slack alias name
							Name string `json:"name"`
						} `json:"slack_aliases"`

						// Slack Channels associated with this severity
						SlackChannels *[]struct {
							// Slack channel ID
							Id string `json:"id"`

							// Slack channel name
							Name string `json:"name"`
						} `json:"slack_channels"`

						// The slug of the severity
						Slug *string `json:"slug,omitempty"`

						// Date of last update
						UpdatedAt string `json:"updated_at"`
					} `json:"attributes"`

					// Unique ID of the severity
					Id   string                                         `json:"id"`
					Type IncidentResponseDataAttributesSeverityDataType `json:"type"`
				} `json:"data"`
			} `json:"severity"`

			// Slack channel id
			SlackChannelId *string `json:"slack_channel_id"`

			// Slack channel name
			SlackChannelName *string `json:"slack_channel_name"`

			// Slack channel url
			SlackChannelUrl *string `json:"slack_channel_url"`

			// The slug of the incident
			Slug string `json:"slug"`

			// Date of start
			StartedAt *string `json:"started_at"`

			// The summary of the incident
			Summary *string `json:"summary"`

			// The title of the incident
			Title string `json:"title"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the incident
		Id   string                   `json:"id"`
		Type IncidentResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentResponseDataAttributesEnvironmentsDataType defines model for IncidentResponse.Data.Attributes.Environments.Data.Type.
type IncidentResponseDataAttributesEnvironmentsDataType string

// The status of the functionality
type IncidentResponseDataAttributesFunctionalitiesDataAttributesStatus string

// IncidentResponseDataAttributesFunctionalitiesDataType defines model for IncidentResponse.Data.Attributes.Functionalities.Data.Type.
type IncidentResponseDataAttributesFunctionalitiesDataType string

// IncidentResponseDataAttributesGroupsDataType defines model for IncidentResponse.Data.Attributes.Groups.Data.Type.
type IncidentResponseDataAttributesGroupsDataType string

// IncidentResponseDataAttributesIncidentTypesDataType defines model for IncidentResponse.Data.Attributes.IncidentTypes.Data.Type.
type IncidentResponseDataAttributesIncidentTypesDataType string

// The status of the service
type IncidentResponseDataAttributesServicesDataAttributesStatus string

// IncidentResponseDataAttributesServicesDataType defines model for IncidentResponse.Data.Attributes.Services.Data.Type.
type IncidentResponseDataAttributesServicesDataType string

// The severity of the severity
type IncidentResponseDataAttributesSeverityDataAttributesSeverity string

// IncidentResponseDataAttributesSeverityDataType defines model for IncidentResponse.Data.Attributes.Severity.Data.Type.
type IncidentResponseDataAttributesSeverityDataType string

// IncidentResponseDataType defines model for IncidentResponse.Data.Type.
type IncidentResponseDataType string

// IncidentRole defines model for incident_role.
type IncidentRole struct {
	AllowMultiUserAssignment *bool `json:"allow_multi_user_assignment,omitempty"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident role
	Description *string `json:"description"`
	Enabled     *bool   `json:"enabled,omitempty"`

	// The name of the incident role
	Name     string `json:"name"`
	Optional *bool  `json:"optional,omitempty"`

	// Position of the incident role
	Position *int `json:"position"`

	// The slug of the incident role
	Slug *string `json:"slug,omitempty"`

	// The summary of the incident role
	Summary *string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentRoleList defines model for incident_role_list.
type IncidentRoleList struct {
	Data []struct {
		Attributes struct {
			AllowMultiUserAssignment *bool `json:"allow_multi_user_assignment,omitempty"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the incident role
			Description *string `json:"description"`
			Enabled     *bool   `json:"enabled,omitempty"`

			// The name of the incident role
			Name     string `json:"name"`
			Optional *bool  `json:"optional,omitempty"`

			// Position of the incident role
			Position *int `json:"position"`

			// The slug of the incident role
			Slug *string `json:"slug,omitempty"`

			// The summary of the incident role
			Summary *string `json:"summary"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the incident role
		Id   string                   `json:"id"`
		Type IncidentRoleListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// IncidentRoleListDataType defines model for IncidentRoleList.Data.Type.
type IncidentRoleListDataType string

// IncidentRoleResponse defines model for incident_role_response.
type IncidentRoleResponse struct {
	Data struct {
		Attributes struct {
			AllowMultiUserAssignment *bool `json:"allow_multi_user_assignment,omitempty"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the incident role
			Description *string `json:"description"`
			Enabled     *bool   `json:"enabled,omitempty"`

			// The name of the incident role
			Name     string `json:"name"`
			Optional *bool  `json:"optional,omitempty"`

			// Position of the incident role
			Position *int `json:"position"`

			// The slug of the incident role
			Slug *string `json:"slug,omitempty"`

			// The summary of the incident role
			Summary *string `json:"summary"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the incident role
		Id   string                       `json:"id"`
		Type IncidentRoleResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentRoleResponseDataType defines model for IncidentRoleResponse.Data.Type.
type IncidentRoleResponseDataType string

// IncidentRoleTask defines model for incident_role_task.
type IncidentRoleTask struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident task
	Description    *string `json:"description"`
	IncidentRoleId *string `json:"incident_role_id,omitempty"`

	// The priority of the incident task
	Priority *IncidentRoleTaskPriority `json:"priority,omitempty"`

	// The task of the incident task
	Task string `json:"task"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The priority of the incident task
type IncidentRoleTaskPriority string

// IncidentRoleTaskList defines model for incident_role_task_list.
type IncidentRoleTaskList struct {
	Data []struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of incident task
			Description    *string `json:"description"`
			IncidentRoleId *string `json:"incident_role_id,omitempty"`

			// The priority of the incident task
			Priority *IncidentRoleTaskListDataAttributesPriority `json:"priority,omitempty"`

			// The task of the incident task
			Task string `json:"task"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string                       `json:"id"`
		Type IncidentRoleTaskListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The priority of the incident task
type IncidentRoleTaskListDataAttributesPriority string

// IncidentRoleTaskListDataType defines model for IncidentRoleTaskList.Data.Type.
type IncidentRoleTaskListDataType string

// IncidentRoleTaskResponse defines model for incident_role_task_response.
type IncidentRoleTaskResponse struct {
	Data struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of incident task
			Description    *string `json:"description"`
			IncidentRoleId *string `json:"incident_role_id,omitempty"`

			// The priority of the incident task
			Priority *IncidentRoleTaskResponseDataAttributesPriority `json:"priority,omitempty"`

			// The task of the incident task
			Task string `json:"task"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string                           `json:"id"`
		Type IncidentRoleTaskResponseDataType `json:"type"`
	} `json:"data"`
}

// The priority of the incident task
type IncidentRoleTaskResponseDataAttributesPriority string

// IncidentRoleTaskResponseDataType defines model for IncidentRoleTaskResponse.Data.Type.
type IncidentRoleTaskResponseDataType string

// IncidentStatusPageEvent defines model for incident_status_page_event.
type IncidentStatusPageEvent struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The summary of the incident event
	Event string `json:"event"`

	// Notify all status pages subscribers
	NotifySubscribers *bool `json:"notify_subscribers,omitempty"`

	// For StatusPage.io integrated pages auto publishes a tweet for your update
	ShouldTweet *bool `json:"should_tweet,omitempty"`

	// Date of start
	StartedAt string `json:"started_at"`

	// The status of the incident event
	Status *IncidentStatusPageEventStatus `json:"status,omitempty"`

	// Unique ID of the status page you wish to post the event to
	StatusPageId *string `json:"status_page_id,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The status of the incident event
type IncidentStatusPageEventStatus string

// IncidentStatusPageEventList defines model for incident_status_page_event_list.
type IncidentStatusPageEventList struct {
	Data []struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The summary of the incident event
			Event string `json:"event"`

			// Notify all status pages subscribers
			NotifySubscribers *bool `json:"notify_subscribers,omitempty"`

			// For StatusPage.io integrated pages auto publishes a tweet for your update
			ShouldTweet *bool `json:"should_tweet,omitempty"`

			// Date of start
			StartedAt string `json:"started_at"`

			// The status of the incident event
			Status *IncidentStatusPageEventListDataAttributesStatus `json:"status,omitempty"`

			// Unique ID of the status page you wish to post the event to
			StatusPageId *string `json:"status_page_id,omitempty"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string                              `json:"id"`
		Type IncidentStatusPageEventListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The status of the incident event
type IncidentStatusPageEventListDataAttributesStatus string

// IncidentStatusPageEventListDataType defines model for IncidentStatusPageEventList.Data.Type.
type IncidentStatusPageEventListDataType string

// IncidentStatusPageEventResponse defines model for incident_status_page_event_response.
type IncidentStatusPageEventResponse struct {
	Data struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The summary of the incident event
			Event string `json:"event"`

			// Notify all status pages subscribers
			NotifySubscribers *bool `json:"notify_subscribers,omitempty"`

			// For StatusPage.io integrated pages auto publishes a tweet for your update
			ShouldTweet *bool `json:"should_tweet,omitempty"`

			// Date of start
			StartedAt string `json:"started_at"`

			// The status of the incident event
			Status *IncidentStatusPageEventResponseDataAttributesStatus `json:"status,omitempty"`

			// Unique ID of the status page you wish to post the event to
			StatusPageId *string `json:"status_page_id,omitempty"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string                                  `json:"id"`
		Type IncidentStatusPageEventResponseDataType `json:"type"`
	} `json:"data"`
}

// The status of the incident event
type IncidentStatusPageEventResponseDataAttributesStatus string

// IncidentStatusPageEventResponseDataType defines model for IncidentStatusPageEventResponse.Data.Type.
type IncidentStatusPageEventResponseDataType string

// IncidentTriggerParams defines model for incident_trigger_params.
type IncidentTriggerParams struct {
	IncidentCondition               *IncidentTriggerParamsIncidentCondition              `json:"incident_condition,omitempty"`
	IncidentConditionAcknowledgedAt *interface{}                                         `json:"incident_condition_acknowledged_at,omitempty"`
	IncidentConditionCause          *IncidentTriggerParamsIncidentConditionCause         `json:"incident_condition_cause,omitempty"`
	IncidentConditionDetectedAt     *interface{}                                         `json:"incident_condition_detected_at,omitempty"`
	IncidentConditionEnvironment    *IncidentTriggerParamsIncidentConditionEnvironment   `json:"incident_condition_environment,omitempty"`
	IncidentConditionFunctionality  *IncidentTriggerParamsIncidentConditionFunctionality `json:"incident_condition_functionality,omitempty"`
	IncidentConditionGroup          *IncidentTriggerParamsIncidentConditionGroup         `json:"incident_condition_group,omitempty"`
	IncidentConditionIncidentRoles  *IncidentTriggerParamsIncidentConditionIncidentRoles `json:"incident_condition_incident_roles,omitempty"`
	IncidentConditionIncidentType   *IncidentTriggerParamsIncidentConditionIncidentType  `json:"incident_condition_incident_type,omitempty"`
	IncidentConditionKind           *IncidentTriggerParamsIncidentConditionKind          `json:"incident_condition_kind,omitempty"`
	IncidentConditionMitigatedAt    *interface{}                                         `json:"incident_condition_mitigated_at,omitempty"`
	IncidentConditionResolvedAt     *interface{}                                         `json:"incident_condition_resolved_at,omitempty"`
	IncidentConditionService        *IncidentTriggerParamsIncidentConditionService       `json:"incident_condition_service,omitempty"`
	IncidentConditionSeverity       *IncidentTriggerParamsIncidentConditionSeverity      `json:"incident_condition_severity,omitempty"`
	IncidentConditionStartedAt      *interface{}                                         `json:"incident_condition_started_at,omitempty"`
	IncidentConditionStatus         *IncidentTriggerParamsIncidentConditionStatus        `json:"incident_condition_status,omitempty"`
	IncidentConditionSummary        *interface{}                                         `json:"incident_condition_summary,omitempty"`
	IncidentConditionVisibility     *IncidentTriggerParamsIncidentConditionVisibility    `json:"incident_condition_visibility,omitempty"`
	IncidentConditionalInactivity   *interface{}                                         `json:"incident_conditional_inactivity,omitempty"`
	IncidentInactivityDuration      *interface{}                                         `json:"incident_inactivity_duration,omitempty"`
	IncidentKinds                   *[]IncidentTriggerParamsIncidentKinds                `json:"incident_kinds,omitempty"`

	// [DEPRECATED] Use incident_condition_cause instead
	IncidentPostMortemConditionCause *IncidentTriggerParamsIncidentPostMortemConditionCause `json:"incident_post_mortem_condition_cause,omitempty"`
	IncidentStatuses                 *[]IncidentTriggerParamsIncidentStatuses               `json:"incident_statuses,omitempty"`
	IncidentVisibilities             *[]bool                                                `json:"incident_visibilities,omitempty"`
	TriggerType                      IncidentTriggerParamsTriggerType                       `json:"trigger_type"`
	Triggers                         *[]string                                              `json:"triggers,omitempty"`
}

// IncidentTriggerParamsIncidentCondition defines model for IncidentTriggerParams.IncidentCondition.
type IncidentTriggerParamsIncidentCondition string

// IncidentTriggerParamsIncidentConditionCause defines model for IncidentTriggerParams.IncidentConditionCause.
type IncidentTriggerParamsIncidentConditionCause string

// IncidentTriggerParamsIncidentConditionEnvironment defines model for IncidentTriggerParams.IncidentConditionEnvironment.
type IncidentTriggerParamsIncidentConditionEnvironment string

// IncidentTriggerParamsIncidentConditionFunctionality defines model for IncidentTriggerParams.IncidentConditionFunctionality.
type IncidentTriggerParamsIncidentConditionFunctionality string

// IncidentTriggerParamsIncidentConditionGroup defines model for IncidentTriggerParams.IncidentConditionGroup.
type IncidentTriggerParamsIncidentConditionGroup string

// IncidentTriggerParamsIncidentConditionIncidentRoles defines model for IncidentTriggerParams.IncidentConditionIncidentRoles.
type IncidentTriggerParamsIncidentConditionIncidentRoles string

// IncidentTriggerParamsIncidentConditionIncidentType defines model for IncidentTriggerParams.IncidentConditionIncidentType.
type IncidentTriggerParamsIncidentConditionIncidentType string

// IncidentTriggerParamsIncidentConditionKind defines model for IncidentTriggerParams.IncidentConditionKind.
type IncidentTriggerParamsIncidentConditionKind string

// IncidentTriggerParamsIncidentConditionService defines model for IncidentTriggerParams.IncidentConditionService.
type IncidentTriggerParamsIncidentConditionService string

// IncidentTriggerParamsIncidentConditionSeverity defines model for IncidentTriggerParams.IncidentConditionSeverity.
type IncidentTriggerParamsIncidentConditionSeverity string

// IncidentTriggerParamsIncidentConditionStatus defines model for IncidentTriggerParams.IncidentConditionStatus.
type IncidentTriggerParamsIncidentConditionStatus string

// IncidentTriggerParamsIncidentConditionVisibility defines model for IncidentTriggerParams.IncidentConditionVisibility.
type IncidentTriggerParamsIncidentConditionVisibility string

// IncidentTriggerParamsIncidentKinds defines model for IncidentTriggerParams.IncidentKinds.
type IncidentTriggerParamsIncidentKinds string

// [DEPRECATED] Use incident_condition_cause instead
type IncidentTriggerParamsIncidentPostMortemConditionCause string

// IncidentTriggerParamsIncidentStatuses defines model for IncidentTriggerParams.IncidentStatuses.
type IncidentTriggerParamsIncidentStatuses string

// IncidentTriggerParamsTriggerType defines model for IncidentTriggerParams.TriggerType.
type IncidentTriggerParamsTriggerType string

// IncidentType defines model for incident_type.
type IncidentType struct {
	// The hex color of the incident type
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident type
	Description *string `json:"description"`

	// The name of the incident type
	Name string `json:"name"`

	// Emails to attach to the incident type
	NotifyEmails *[]string `json:"notify_emails"`

	// Position of the incident type
	Position *int `json:"position"`

	// Slack Aliases associated with this incident type
	SlackAliases *[]struct {
		// Slack alias ID
		Id string `json:"id"`

		// Slack alias name
		Name string `json:"name"`
	} `json:"slack_aliases"`

	// Slack Channels associated with this incident type
	SlackChannels *[]struct {
		// Slack channel ID
		Id string `json:"id"`

		// Slack channel name
		Name string `json:"name"`
	} `json:"slack_channels"`

	// The slug of the incident type
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentTypeList defines model for incident_type_list.
type IncidentTypeList struct {
	Data []struct {
		Attributes struct {
			// The hex color of the incident type
			Color *string `json:"color"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the incident type
			Description *string `json:"description"`

			// The name of the incident type
			Name string `json:"name"`

			// Emails to attach to the incident type
			NotifyEmails *[]string `json:"notify_emails"`

			// Position of the incident type
			Position *int `json:"position"`

			// Slack Aliases associated with this incident type
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this incident type
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`

			// The slug of the incident type
			Slug *string `json:"slug,omitempty"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the incident type
		Id   string                   `json:"id"`
		Type IncidentTypeListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// IncidentTypeListDataType defines model for IncidentTypeList.Data.Type.
type IncidentTypeListDataType string

// IncidentTypeResponse defines model for incident_type_response.
type IncidentTypeResponse struct {
	Data struct {
		Attributes struct {
			// The hex color of the incident type
			Color *string `json:"color"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the incident type
			Description *string `json:"description"`

			// The name of the incident type
			Name string `json:"name"`

			// Emails to attach to the incident type
			NotifyEmails *[]string `json:"notify_emails"`

			// Position of the incident type
			Position *int `json:"position"`

			// Slack Aliases associated with this incident type
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this incident type
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`

			// The slug of the incident type
			Slug *string `json:"slug,omitempty"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the incident type
		Id   string                       `json:"id"`
		Type IncidentTypeResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentTypeResponseDataType defines model for IncidentTypeResponse.Data.Type.
type IncidentTypeResponseDataType string

// IncidentsChartResponse defines model for incidents_chart_response.
type IncidentsChartResponse = map[string]interface{}

// InviteToSlackChannelOpsgenieTaskParams defines model for invite_to_slack_channel_opsgenie_task_params.
type InviteToSlackChannelOpsgenieTaskParams struct {
	Channels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channels,omitempty"`
	Schedule struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule"`
	TaskType *InviteToSlackChannelOpsgenieTaskParamsTaskType `json:"task_type,omitempty"`
}

// InviteToSlackChannelOpsgenieTaskParamsTaskType defines model for InviteToSlackChannelOpsgenieTaskParams.TaskType.
type InviteToSlackChannelOpsgenieTaskParamsTaskType string

// InviteToSlackChannelPagerdutyTaskParams defines model for invite_to_slack_channel_pagerduty_task_params.
type InviteToSlackChannelPagerdutyTaskParams struct {
	Channels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channels,omitempty"`
	EscalationPolicy *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"escalation_policy,omitempty"`
	Schedule *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule,omitempty"`
	Service *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"service,omitempty"`
	TaskType *InviteToSlackChannelPagerdutyTaskParamsTaskType `json:"task_type,omitempty"`
}

// InviteToSlackChannelPagerdutyTaskParamsTaskType defines model for InviteToSlackChannelPagerdutyTaskParams.TaskType.
type InviteToSlackChannelPagerdutyTaskParamsTaskType string

// InviteToSlackChannelTaskParams defines model for invite_to_slack_channel_task_params.
type InviteToSlackChannelTaskParams struct {
	Channel struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channel"`
	SlackUserGroups *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"slack_user_groups,omitempty"`
	SlackUsers *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"slack_users,omitempty"`
	TaskType *InviteToSlackChannelTaskParamsTaskType `json:"task_type,omitempty"`
}

// InviteToSlackChannelTaskParamsTaskType defines model for InviteToSlackChannelTaskParams.TaskType.
type InviteToSlackChannelTaskParamsTaskType string

// InviteToSlackChannelVictorOpsTaskParams defines model for invite_to_slack_channel_victor_ops_task_params.
type InviteToSlackChannelVictorOpsTaskParams struct {
	Channels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channels,omitempty"`
	TaskType *InviteToSlackChannelVictorOpsTaskParamsTaskType `json:"task_type,omitempty"`
	Team     struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"team"`
}

// InviteToSlackChannelVictorOpsTaskParamsTaskType defines model for InviteToSlackChannelVictorOpsTaskParams.TaskType.
type InviteToSlackChannelVictorOpsTaskParamsTaskType string

// IpRanges defines model for ip_ranges.
type IpRanges struct {
	// IPv4 addresses associated with Rootly integrations.
	IntegrationsIpv4 []string `json:"integrations_ipv4"`

	// IPv6 addresses associated with Rootly integrations.
	IntegrationsIpv6 []string `json:"integrations_ipv6"`

	// IPv4 addresses associated with Rootly webhooks.
	WebhooksIpv4 []string `json:"webhooks_ipv4"`

	// IPv6 addresses associated with Rootly webhooks.
	WebhooksIpv6 []string `json:"webhooks_ipv6"`
}

// IpRangesResponse defines model for ip_ranges_response.
type IpRangesResponse struct {
	Data struct {
		Attributes struct {
			// IPv4 addresses associated with Rootly integrations.
			IntegrationsIpv4 []string `json:"integrations_ipv4"`

			// IPv6 addresses associated with Rootly integrations.
			IntegrationsIpv6 []string `json:"integrations_ipv6"`

			// IPv4 addresses associated with Rootly webhooks.
			WebhooksIpv4 []string `json:"webhooks_ipv4"`

			// IPv6 addresses associated with Rootly webhooks.
			WebhooksIpv6 []string `json:"webhooks_ipv6"`
		} `json:"attributes"`

		// Unique ID of the ip_ranges
		Id   string                   `json:"id"`
		Type IpRangesResponseDataType `json:"type"`
	} `json:"data"`
}

// IpRangesResponseDataType defines model for IpRangesResponse.Data.Type.
type IpRangesResponseDataType string

// Links defines model for links.
type Links struct {
	First string  `json:"first"`
	Last  string  `json:"last"`
	Next  *string `json:"next"`
	Prev  *string `json:"prev"`
	Self  string  `json:"self"`
}

// MitigateIncident defines model for mitigate_incident.
type MitigateIncident struct {
	Data struct {
		Attributes struct {
			// How was the incident mitigated?
			MitigationMessage *string `json:"mitigation_message"`
		} `json:"attributes"`
		Type MitigateIncidentDataType `json:"type"`
	} `json:"data"`
}

// MitigateIncidentDataType defines model for MitigateIncident.Data.Type.
type MitigateIncidentDataType string

// NewAlert defines model for new_alert.
type NewAlert struct {
	Data struct {
		Attributes struct {
			// Additional data
			Data *map[string]interface{} `json:"data"`

			// Alert end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the alert
			EnvironmentIds *[]string `json:"environment_ids"`

			// External ID
			ExternalId *string `json:"external_id"`

			// External Url
			ExternalUrl *string `json:"external_url"`
			Labels      *[]struct {
				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`

			// The Service ID's to attach to the alert
			ServiceIds *[]string `json:"service_ids"`

			// The source of the alert (eg: zendesk)
			Source string `json:"source"`

			// Alert start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the alert
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type NewAlertDataType `json:"type"`
	} `json:"data"`
}

// NewAlertDataType defines model for NewAlert.Data.Type.
type NewAlertDataType string

// NewAuthorization defines model for new_authorization.
type NewAuthorization struct {
	Data struct {
		Attributes struct {
			// The id of the resource being accessed.
			AuthorizableId string `json:"authorizable_id"`

			// The type of resource being accessed.
			AuthorizableType NewAuthorizationDataAttributesAuthorizableType `json:"authorizable_type"`

			// The resource id granted access.
			GranteeId string `json:"grantee_id"`

			// The type of resource granted access.
			GranteeType NewAuthorizationDataAttributesGranteeType   `json:"grantee_type"`
			Permissions []NewAuthorizationDataAttributesPermissions `json:"permissions"`
		} `json:"attributes"`
		Type NewAuthorizationDataType `json:"type"`
	} `json:"data"`
}

// The type of resource being accessed.
type NewAuthorizationDataAttributesAuthorizableType string

// The type of resource granted access.
type NewAuthorizationDataAttributesGranteeType string

// NewAuthorizationDataAttributesPermissions defines model for NewAuthorization.Data.Attributes.Permissions.
type NewAuthorizationDataAttributesPermissions string

// NewAuthorizationDataType defines model for NewAuthorization.Data.Type.
type NewAuthorizationDataType string

// NewCause defines model for new_cause.
type NewCause struct {
	Data struct {
		Attributes struct {
			// The description of the cause
			Description *string `json:"description"`

			// The name of the cause
			Name string `json:"name"`

			// Position of the cause
			Position *int `json:"position"`
		} `json:"attributes"`
		Type NewCauseDataType `json:"type"`
	} `json:"data"`
}

// NewCauseDataType defines model for NewCause.Data.Type.
type NewCauseDataType string

// NewCustomField defines model for new_custom_field.
type NewCustomField struct {
	Data struct {
		Attributes struct {
			// The default value for text field kinds
			Default *string `json:"default"`

			// The description of the custom_field
			Description *string `json:"description"`

			// The name of the custom_field
			Label string `json:"label"`

			// The position of the custom_field
			Position *float32                                `json:"position,omitempty"`
			Required *[]NewCustomFieldDataAttributesRequired `json:"required"`
			Shown    *[]NewCustomFieldDataAttributesShown    `json:"shown,omitempty"`
		} `json:"attributes"`
		Type NewCustomFieldDataType `json:"type"`
	} `json:"data"`
}

// Where the custom_field is required
type NewCustomFieldDataAttributesRequired string

// Where the custom_field is shown
type NewCustomFieldDataAttributesShown string

// NewCustomFieldDataType defines model for NewCustomField.Data.Type.
type NewCustomFieldDataType string

// NewCustomFieldOption defines model for new_custom_field_option.
type NewCustomFieldOption struct {
	Data struct {
		Attributes struct {
			// The hex color of the custom_field_option
			Color   *string `json:"color,omitempty"`
			Default *bool   `json:"default,omitempty"`

			// The position of the custom_field_option
			Position *float32 `json:"position,omitempty"`

			// The value of the custom_field_option
			Value string `json:"value"`
		} `json:"attributes"`
		Type NewCustomFieldOptionDataType `json:"type"`
	} `json:"data"`
}

// NewCustomFieldOptionDataType defines model for NewCustomFieldOption.Data.Type.
type NewCustomFieldOptionDataType string

// NewDashboard defines model for new_dashboard.
type NewDashboard struct {
	Data struct {
		Attributes struct {
			// Whether the dashboard auto-updates the UI with new data.
			AutoRefresh *bool `json:"auto_refresh,omitempty"`

			// The hex color of the dashboard
			Color *NewDashboardDataAttributesColor `json:"color"`

			// The description of the dashboard
			Description *string `json:"description"`

			// The emoji icon of the dashboard
			Icon *string `json:"icon,omitempty"`

			// The name of the dashboard
			Name string `json:"name"`

			// The owner type of the dashboard
			Owner NewDashboardDataAttributesOwner `json:"owner"`

			// The grouping period for dashboard panel data
			Period *NewDashboardDataAttributesPeriod `json:"period"`

			// Whether the dashboard is public
			Public *bool `json:"public,omitempty"`

			// The date range for dashboard panel data
			Range *string `json:"range"`
		} `json:"attributes"`
		Type NewDashboardDataType `json:"type"`
	} `json:"data"`
}

// The hex color of the dashboard
type NewDashboardDataAttributesColor string

// The owner type of the dashboard
type NewDashboardDataAttributesOwner string

// The grouping period for dashboard panel data
type NewDashboardDataAttributesPeriod string

// NewDashboardDataType defines model for NewDashboard.Data.Type.
type NewDashboardDataType string

// NewEnvironment defines model for new_environment.
type NewEnvironment struct {
	Data struct {
		Attributes struct {
			// The hex color of the environment
			Color *string `json:"color"`

			// The description of the environment
			Description *string `json:"description"`

			// The name of the environment
			Name string `json:"name"`

			// Emails to attach to the environment
			NotifyEmails *[]string `json:"notify_emails"`

			// Position of the environment
			Position *int `json:"position"`

			// Slack Aliases associated with this environment
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this environment
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type NewEnvironmentDataType `json:"type"`
	} `json:"data"`
}

// NewEnvironmentDataType defines model for NewEnvironment.Data.Type.
type NewEnvironmentDataType string

// NewFormField defines model for new_form_field.
type NewFormField struct {
	Data struct {
		Attributes struct {
			DefaultValues *[]string `json:"default_values,omitempty"`

			// The description of the form field
			Description *string `json:"description"`

			// Whether the form field is enabled
			Enabled *bool `json:"enabled,omitempty"`

			// The input kind of the form field
			InputKind *NewFormFieldDataAttributesInputKind `json:"input_kind,omitempty"`

			// The kind of the form field
			Kind NewFormFieldDataAttributesKind `json:"kind"`

			// The name of the form field
			Name     string                                `json:"name"`
			Required *[]NewFormFieldDataAttributesRequired `json:"required,omitempty"`

			// Whether the form field is shown on the incident details panel
			ShowOnIncidentDetails *bool                              `json:"show_on_incident_details,omitempty"`
			Shown                 *[]NewFormFieldDataAttributesShown `json:"shown,omitempty"`
		} `json:"attributes"`
		Type NewFormFieldDataType `json:"type"`
	} `json:"data"`
}

// The input kind of the form field
type NewFormFieldDataAttributesInputKind string

// The kind of the form field
type NewFormFieldDataAttributesKind string

// Where the form field is required
type NewFormFieldDataAttributesRequired string

// Where the form field is shown
type NewFormFieldDataAttributesShown string

// NewFormFieldDataType defines model for NewFormField.Data.Type.
type NewFormFieldDataType string

// NewFormFieldOption defines model for new_form_field_option.
type NewFormFieldOption struct {
	Data struct {
		Attributes struct {
			// The hex color of the form_field_option
			Color   *string `json:"color,omitempty"`
			Default *bool   `json:"default,omitempty"`

			// The ID of the form field
			FormFieldId string `json:"form_field_id"`

			// The position of the form_field_option
			Position *float32 `json:"position,omitempty"`

			// The value of the form_field_option
			Value string `json:"value"`
		} `json:"attributes"`
		Type NewFormFieldOptionDataType `json:"type"`
	} `json:"data"`
}

// NewFormFieldOptionDataType defines model for NewFormFieldOption.Data.Type.
type NewFormFieldOptionDataType string

// NewFormFieldPosition defines model for new_form_field_position.
type NewFormFieldPosition struct {
	Data struct {
		Attributes struct {
			// The form for the position
			Form NewFormFieldPositionDataAttributesForm `json:"form"`

			// The ID of the form field.
			FormFieldId string `json:"form_field_id"`

			// The position of the form_field_position
			Position float32 `json:"position"`
		} `json:"attributes"`
		Type NewFormFieldPositionDataType `json:"type"`
	} `json:"data"`
}

// The form for the position
type NewFormFieldPositionDataAttributesForm string

// NewFormFieldPositionDataType defines model for NewFormFieldPosition.Data.Type.
type NewFormFieldPositionDataType string

// NewFunctionality defines model for new_functionality.
type NewFunctionality struct {
	Data struct {
		Attributes struct {
			// The hex color of the functionality
			Color *string `json:"color"`

			// The description of the functionality
			Description *string `json:"description"`

			// Environments associated with this functionality
			EnvironmentIds *[]string `json:"environment_ids"`

			// The name of the functionality
			Name string `json:"name"`

			// Emails to attach to the functionality
			NotifyEmails *[]string `json:"notify_emails"`

			// Owner Teams associated with this functionality
			OwnersGroupIds *[]string `json:"owners_group_ids"`

			// Owner Users associated with this service
			OwnersUserIds *[]int `json:"owners_user_ids"`

			// Position of the functionality
			Position *int `json:"position"`

			// The public description of the functionality
			PublicDescription *string `json:"public_description"`

			// Services associated with this functionality
			ServiceIds *[]string `json:"service_ids"`

			// Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// Show uptime over x days
			ShowUptimeLastDays *NewFunctionalityDataAttributesShowUptimeLastDays `json:"show_uptime_last_days"`

			// Slack Aliases associated with this service
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this service
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`

			// The status of the functionality
			Status *NewFunctionalityDataAttributesStatus `json:"status,omitempty"`
		} `json:"attributes"`
		Type NewFunctionalityDataType `json:"type"`
	} `json:"data"`
}

// Show uptime over x days
type NewFunctionalityDataAttributesShowUptimeLastDays int

// The status of the functionality
type NewFunctionalityDataAttributesStatus string

// NewFunctionalityDataType defines model for NewFunctionality.Data.Type.
type NewFunctionalityDataType string

// NewIncident defines model for new_incident.
type NewIncident struct {
	Data struct {
		Attributes struct {
			// Date of acknowledgment
			AcknowledgedAt *string `json:"acknowledged_at"`

			// Date of cancellation
			CancelledAt *string `json:"cancelled_at"`

			// The Cause ID's to attach to the incident
			CauseIds *[]string `json:"cause_ids"`

			// Date of detection
			DetectedAt *string `json:"detected_at"`

			// The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// Date of triage
			InTriageAt *string `json:"in_triage_at"`

			// The Incident Type ID's to attach to the incident
			IncidentTypeIds *[]string `json:"incident_type_ids"`

			// The kind of the incident
			Kind *NewIncidentDataAttributesKind `json:"kind"`

			// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// Emails you want to notify
			NotifyEmails *[]string `json:"notify_emails"`

			// ID of parent incident
			ParentIncidentId *string `json:"parent_incident_id"`

			// Create an incident as private. Once an incident is made as private it cannot be undone
			Private *bool `json:"private"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// Date of when the maintenance begins
			ScheduledFor *string `json:"scheduled_for"`

			// Date of when the maintenance ends
			ScheduledUntil *string `json:"scheduled_until"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID to attach to the incident
			SeverityId *string `json:"severity_id"`

			// Slack channel name
			SlackChannelName *string `json:"slack_channel_name"`

			// Date of start
			StartedAt *string `json:"started_at"`

			// The status of the incident event
			Status *NewIncidentDataAttributesStatus `json:"status,omitempty"`

			// The summary of the incident
			Summary *string `json:"summary"`

			// The title of the incident. We will autogenerate one if null
			Title *string `json:"title"`

			// The url to the incident
			Url *string `json:"url,omitempty"`

			// User ID of the creator of the incident. Default to the user attached to the Api Key
			UserId *string `json:"user_id"`
		} `json:"attributes"`
		Type NewIncidentDataType `json:"type"`
	} `json:"data"`
}

// The kind of the incident
type NewIncidentDataAttributesKind string

// The status of the incident event
type NewIncidentDataAttributesStatus string

// NewIncidentDataType defines model for NewIncident.Data.Type.
type NewIncidentDataType string

// NewIncidentActionItem defines model for new_incident_action_item.
type NewIncidentActionItem struct {
	Data struct {
		Attributes struct {
			// The description of the action item
			Description *string `json:"description"`

			// The due date of the action item
			DueDate *string `json:"due_date"`

			// The kind of the action item
			Kind *NewIncidentActionItemDataAttributesKind `json:"kind,omitempty"`

			// The priority of the action item
			Priority *NewIncidentActionItemDataAttributesPriority `json:"priority,omitempty"`

			// The status of the action item
			Status *NewIncidentActionItemDataAttributesStatus `json:"status,omitempty"`

			// The summary of the action item
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type NewIncidentActionItemDataType `json:"type"`
	} `json:"data"`
}

// The kind of the action item
type NewIncidentActionItemDataAttributesKind string

// The priority of the action item
type NewIncidentActionItemDataAttributesPriority string

// The status of the action item
type NewIncidentActionItemDataAttributesStatus string

// NewIncidentActionItemDataType defines model for NewIncidentActionItem.Data.Type.
type NewIncidentActionItemDataType string

// NewIncidentCustomFieldSelection defines model for new_incident_custom_field_selection.
type NewIncidentCustomFieldSelection struct {
	Data struct {
		Attributes struct {
			// The custom field for this selection
			CustomFieldId     float32    `json:"custom_field_id"`
			SelectedOptionIds *[]float32 `json:"selected_option_ids,omitempty"`

			// The selected value for text kind custom fields
			Value *string `json:"value"`
		} `json:"attributes"`
		Type NewIncidentCustomFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentCustomFieldSelectionDataType defines model for NewIncidentCustomFieldSelection.Data.Type.
type NewIncidentCustomFieldSelectionDataType string

// NewIncidentEvent defines model for new_incident_event.
type NewIncidentEvent struct {
	Data struct {
		Attributes struct {
			// The summary of the incident event
			Event string `json:"event"`

			// The visibility of the incident action item
			Visibility *NewIncidentEventDataAttributesVisibility `json:"visibility,omitempty"`
		} `json:"attributes"`
		Type NewIncidentEventDataType `json:"type"`
	} `json:"data"`
}

// The visibility of the incident action item
type NewIncidentEventDataAttributesVisibility string

// NewIncidentEventDataType defines model for NewIncidentEvent.Data.Type.
type NewIncidentEventDataType string

// NewIncidentEventFunctionality defines model for new_incident_event_functionality.
type NewIncidentEventFunctionality struct {
	Data struct {
		Attributes struct {
			// The ID of the functionality.
			FunctionalityId string `json:"functionality_id"`

			// The ID of the incident event.
			IncidentEventId string `json:"incident_event_id"`

			// The status of the affected functionality
			Status NewIncidentEventFunctionalityDataAttributesStatus `json:"status"`
		} `json:"attributes"`
		Type NewIncidentEventFunctionalityDataType `json:"type"`
	} `json:"data"`
}

// The status of the affected functionality
type NewIncidentEventFunctionalityDataAttributesStatus string

// NewIncidentEventFunctionalityDataType defines model for NewIncidentEventFunctionality.Data.Type.
type NewIncidentEventFunctionalityDataType string

// NewIncidentEventService defines model for new_incident_event_service.
type NewIncidentEventService struct {
	Data struct {
		Attributes struct {
			// The ID of the incident event.
			IncidentEventId string `json:"incident_event_id"`

			// The ID of the service.
			ServiceId string `json:"service_id"`

			// The status of the affected service
			Status NewIncidentEventServiceDataAttributesStatus `json:"status"`
		} `json:"attributes"`
		Type NewIncidentEventServiceDataType `json:"type"`
	} `json:"data"`
}

// The status of the affected service
type NewIncidentEventServiceDataAttributesStatus string

// NewIncidentEventServiceDataType defines model for NewIncidentEventService.Data.Type.
type NewIncidentEventServiceDataType string

// NewIncidentFeedback defines model for new_incident_feedback.
type NewIncidentFeedback struct {
	Data struct {
		Attributes struct {
			// Is the feedback anonymous?
			Anonymous *bool `json:"anonymous,omitempty"`

			// The feedback of the incident feedback
			Feedback string `json:"feedback"`

			// The rating of the incident feedback
			Rating NewIncidentFeedbackDataAttributesRating `json:"rating"`
		} `json:"attributes"`
		Type NewIncidentFeedbackDataType `json:"type"`
	} `json:"data"`
}

// The rating of the incident feedback
type NewIncidentFeedbackDataAttributesRating int

// NewIncidentFeedbackDataType defines model for NewIncidentFeedback.Data.Type.
type NewIncidentFeedbackDataType string

// NewIncidentFormFieldSelection defines model for new_incident_form_field_selection.
type NewIncidentFormFieldSelection struct {
	Data struct {
		Attributes struct {
			// The custom field for this selection
			FormFieldId       string     `json:"form_field_id"`
			IncidentId        string     `json:"incident_id"`
			SelectedOptionIds *[]string  `json:"selected_option_ids,omitempty"`
			SelectedUserIds   *[]float32 `json:"selected_user_ids,omitempty"`

			// The selected value for text kind custom fields
			Value *string `json:"value"`
		} `json:"attributes"`
		Type NewIncidentFormFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentFormFieldSelectionDataType defines model for NewIncidentFormFieldSelection.Data.Type.
type NewIncidentFormFieldSelectionDataType string

// NewIncidentPermissionSet defines model for new_incident_permission_set.
type NewIncidentPermissionSet struct {
	Data struct {
		Attributes struct {
			// The incident permission set description.
			Description *string `json:"description"`

			// The incident permission set name.
			Name                       string                                                              `json:"name"`
			PrivateIncidentPermissions *[]NewIncidentPermissionSetDataAttributesPrivateIncidentPermissions `json:"private_incident_permissions,omitempty"`
			PublicIncidentPermissions  *[]NewIncidentPermissionSetDataAttributesPublicIncidentPermissions  `json:"public_incident_permissions,omitempty"`

			// The incident permission set slug.
			Slug *string `json:"slug,omitempty"`
		} `json:"attributes"`
		Type NewIncidentPermissionSetDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentPermissionSetDataAttributesPrivateIncidentPermissions defines model for NewIncidentPermissionSet.Data.Attributes.PrivateIncidentPermissions.
type NewIncidentPermissionSetDataAttributesPrivateIncidentPermissions string

// NewIncidentPermissionSetDataAttributesPublicIncidentPermissions defines model for NewIncidentPermissionSet.Data.Attributes.PublicIncidentPermissions.
type NewIncidentPermissionSetDataAttributesPublicIncidentPermissions string

// NewIncidentPermissionSetDataType defines model for NewIncidentPermissionSet.Data.Type.
type NewIncidentPermissionSetDataType string

// NewIncidentPermissionSetBoolean defines model for new_incident_permission_set_boolean.
type NewIncidentPermissionSetBoolean struct {
	Data struct {
		Attributes struct {
			Enabled                 *bool                                             `json:"enabled,omitempty"`
			IncidentPermissionSetId *string                                           `json:"incident_permission_set_id,omitempty"`
			Kind                    NewIncidentPermissionSetBooleanDataAttributesKind `json:"kind"`
			Private                 *bool                                             `json:"private,omitempty"`
		} `json:"attributes"`
		Type NewIncidentPermissionSetBooleanDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentPermissionSetBooleanDataAttributesKind defines model for NewIncidentPermissionSetBoolean.Data.Attributes.Kind.
type NewIncidentPermissionSetBooleanDataAttributesKind string

// NewIncidentPermissionSetBooleanDataType defines model for NewIncidentPermissionSetBoolean.Data.Type.
type NewIncidentPermissionSetBooleanDataType string

// NewIncidentPermissionSetResource defines model for new_incident_permission_set_resource.
type NewIncidentPermissionSetResource struct {
	Data struct {
		Attributes struct {
			IncidentPermissionSetId *string                                            `json:"incident_permission_set_id,omitempty"`
			Kind                    NewIncidentPermissionSetResourceDataAttributesKind `json:"kind"`
			Private                 *bool                                              `json:"private,omitempty"`
			ResourceId              *string                                            `json:"resource_id"`
			ResourceType            *string                                            `json:"resource_type"`
		} `json:"attributes"`
		Type NewIncidentPermissionSetResourceDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentPermissionSetResourceDataAttributesKind defines model for NewIncidentPermissionSetResource.Data.Attributes.Kind.
type NewIncidentPermissionSetResourceDataAttributesKind string

// NewIncidentPermissionSetResourceDataType defines model for NewIncidentPermissionSetResource.Data.Type.
type NewIncidentPermissionSetResourceDataType string

// NewIncidentRole defines model for new_incident_role.
type NewIncidentRole struct {
	Data struct {
		Attributes struct {
			AllowMultiUserAssignment *bool `json:"allow_multi_user_assignment,omitempty"`

			// The description of the incident role
			Description *string `json:"description"`
			Enabled     *bool   `json:"enabled,omitempty"`

			// The name of the incident role
			Name     string `json:"name"`
			Optional *bool  `json:"optional,omitempty"`

			// Position of the incident role
			Position *int `json:"position"`

			// The summary of the incident role
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type NewIncidentRoleDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentRoleDataType defines model for NewIncidentRole.Data.Type.
type NewIncidentRoleDataType string

// NewIncidentRoleTask defines model for new_incident_role_task.
type NewIncidentRoleTask struct {
	Data struct {
		Attributes struct {
			// The description of the incident task
			Description    *string `json:"description"`
			IncidentRoleId *string `json:"incident_role_id,omitempty"`

			// The priority of the incident task
			Priority *NewIncidentRoleTaskDataAttributesPriority `json:"priority,omitempty"`

			// The task of the incident task
			Task string `json:"task"`
		} `json:"attributes"`
		Type NewIncidentRoleTaskDataType `json:"type"`
	} `json:"data"`
}

// The priority of the incident task
type NewIncidentRoleTaskDataAttributesPriority string

// NewIncidentRoleTaskDataType defines model for NewIncidentRoleTask.Data.Type.
type NewIncidentRoleTaskDataType string

// NewIncidentStatusPageEvent defines model for new_incident_status_page_event.
type NewIncidentStatusPageEvent struct {
	Data struct {
		Attributes struct {
			// The summary of the incident event
			Event string `json:"event"`

			// Notify all status pages subscribers
			NotifySubscribers *bool `json:"notify_subscribers"`

			// For StatusPage.io integrated pages auto publishes a tweet for your update
			ShouldTweet *bool `json:"should_tweet"`

			// The status of the incident event
			Status *NewIncidentStatusPageEventDataAttributesStatus `json:"status,omitempty"`

			// Unique ID of the status page you wish to post the event to
			StatusPageId *string `json:"status_page_id,omitempty"`
		} `json:"attributes"`
		Type NewIncidentStatusPageEventDataType `json:"type"`
	} `json:"data"`
}

// The status of the incident event
type NewIncidentStatusPageEventDataAttributesStatus string

// NewIncidentStatusPageEventDataType defines model for NewIncidentStatusPageEvent.Data.Type.
type NewIncidentStatusPageEventDataType string

// NewIncidentType defines model for new_incident_type.
type NewIncidentType struct {
	Data struct {
		Attributes struct {
			// The hex color of the incident type
			Color *string `json:"color"`

			// The description of the incident type
			Description *string `json:"description"`

			// The name of the incident type
			Name string `json:"name"`

			// Emails to attach to the incident type
			NotifyEmails *[]string `json:"notify_emails"`

			// Position of the incident type
			Position *int `json:"position"`

			// Slack Aliases associated with this incident type
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this incident type
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type NewIncidentTypeDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentTypeDataType defines model for NewIncidentType.Data.Type.
type NewIncidentTypeDataType string

// NewPlaybook defines model for new_playbook.
type NewPlaybook struct {
	Data struct {
		Attributes struct {
			// The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// The external url of the playbook
			ExternalUrl *string `json:"external_url"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// The Incident Type ID's to attach to the incident
			IncidentTypeIds *[]string `json:"incident_type_ids"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID's to attach to the incident
			SeverityIds *[]string `json:"severity_ids"`

			// The summary of the playbook
			Summary *string `json:"summary"`

			// The title of the playbook
			Title string `json:"title"`
		} `json:"attributes"`
		Type NewPlaybookDataType `json:"type"`
	} `json:"data"`
}

// NewPlaybookDataType defines model for NewPlaybook.Data.Type.
type NewPlaybookDataType string

// NewPlaybookTask defines model for new_playbook_task.
type NewPlaybookTask struct {
	Data struct {
		Attributes struct {
			// The description of the task
			Description *string `json:"description"`

			// The position of the task
			Position *int `json:"position"`

			// The task of the task
			Task string `json:"task"`
		} `json:"attributes"`
		Type NewPlaybookTaskDataType `json:"type"`
	} `json:"data"`
}

// NewPlaybookTaskDataType defines model for NewPlaybookTask.Data.Type.
type NewPlaybookTaskDataType string

// NewPostMortemTemplate defines model for new_post_mortem_template.
type NewPostMortemTemplate struct {
	Data struct {
		Attributes struct {
			// The postmortem template. Liquid syntax is supported
			Content string `json:"content"`

			// Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// The format of the input
			Format *NewPostMortemTemplateDataAttributesFormat `json:"format"`

			// The name of the postmortem template
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewPostMortemTemplateDataType `json:"type"`
	} `json:"data"`
}

// The format of the input
type NewPostMortemTemplateDataAttributesFormat string

// NewPostMortemTemplateDataType defines model for NewPostMortemTemplate.Data.Type.
type NewPostMortemTemplateDataType string

// NewPulse defines model for new_pulse.
type NewPulse struct {
	Data struct {
		Attributes struct {
			// Additional data
			Data *map[string]interface{} `json:"data"`

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {
				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`
			Refs *[]struct {
				// Key of the ref
				Key string `json:"key"`

				// Value of the ref
				Value string `json:"value"`
			} `json:"refs,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// The source of the pulse (eg: k8s)
			Source *string `json:"source"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type NewPulseDataType `json:"type"`
	} `json:"data"`
}

// NewPulseDataType defines model for NewPulse.Data.Type.
type NewPulseDataType string

// NewRetrospectiveStep defines model for new_retrospective_step.
type NewRetrospectiveStep struct {
	Data struct {
		Attributes struct {
			// The description of the step
			Description *string `json:"description"`

			// Due date in days
			DueAfterDays *int `json:"due_after_days"`

			// Users assigned to the selected incident role will be the default owners for this step
			IncidentRoleId *string `json:"incident_role_id"`

			// Position of the step
			Position *int `json:"position"`

			// Is the step skippable?
			Skippable *bool `json:"skippable,omitempty"`

			// The name of the step
			Title string `json:"title"`
		} `json:"attributes"`
		Type NewRetrospectiveStepDataType `json:"type"`
	} `json:"data"`
}

// NewRetrospectiveStepDataType defines model for NewRetrospectiveStep.Data.Type.
type NewRetrospectiveStepDataType string

// NewRole defines model for new_role.
type NewRole struct {
	Data struct {
		Attributes struct {
			ApiKeysPermissions           *[]NewRoleDataAttributesApiKeysPermissions           `json:"api_keys_permissions,omitempty"`
			AuditsPermissions            *[]NewRoleDataAttributesAuditsPermissions            `json:"audits_permissions,omitempty"`
			BillingPermissions           *[]NewRoleDataAttributesBillingPermissions           `json:"billing_permissions,omitempty"`
			EnvironmentsPermissions      *[]NewRoleDataAttributesEnvironmentsPermissions      `json:"environments_permissions,omitempty"`
			FormFieldsPermissions        *[]NewRoleDataAttributesFormFieldsPermissions        `json:"form_fields_permissions,omitempty"`
			FunctionalitiesPermissions   *[]NewRoleDataAttributesFunctionalitiesPermissions   `json:"functionalities_permissions,omitempty"`
			GroupsPermissions            *[]NewRoleDataAttributesGroupsPermissions            `json:"groups_permissions,omitempty"`
			IncidentCausesPermissions    *[]NewRoleDataAttributesIncidentCausesPermissions    `json:"incident_causes_permissions,omitempty"`
			IncidentFeedbacksPermissions *[]NewRoleDataAttributesIncidentFeedbacksPermissions `json:"incident_feedbacks_permissions,omitempty"`

			// Associated incident permissions set.
			IncidentPermissionSetId        *string                                                `json:"incident_permission_set_id"`
			IncidentPostMortemsPermissions *[]NewRoleDataAttributesIncidentPostMortemsPermissions `json:"incident_post_mortems_permissions,omitempty"`
			IncidentRolesPermissions       *[]NewRoleDataAttributesIncidentRolesPermissions       `json:"incident_roles_permissions,omitempty"`
			IncidentTypesPermissions       *[]NewRoleDataAttributesIncidentTypesPermissions       `json:"incident_types_permissions,omitempty"`
			IncidentsPermissions           *[]NewRoleDataAttributesIncidentsPermissions           `json:"incidents_permissions,omitempty"`
			InvitationsPermissions         *[]NewRoleDataAttributesInvitationsPermissions         `json:"invitations_permissions,omitempty"`

			// The role name.
			Name                        string                                              `json:"name"`
			PlaybooksPermissions        *[]NewRoleDataAttributesPlaybooksPermissions        `json:"playbooks_permissions,omitempty"`
			PrivateIncidentsPermissions *[]NewRoleDataAttributesPrivateIncidentsPermissions `json:"private_incidents_permissions,omitempty"`
			RetrospectivePermissions    *[]NewRoleDataAttributesRetrospectivePermissions    `json:"retrospective_permissions,omitempty"`
			RolesPermissions            *[]NewRoleDataAttributesRolesPermissions            `json:"roles_permissions,omitempty"`
			SecretsPermissions          *[]NewRoleDataAttributesSecretsPermissions          `json:"secrets_permissions,omitempty"`
			ServicesPermissions         *[]NewRoleDataAttributesServicesPermissions         `json:"services_permissions,omitempty"`
			SeveritiesPermissions       *[]NewRoleDataAttributesSeveritiesPermissions       `json:"severities_permissions,omitempty"`

			// The role slug.
			Slug                   *string                                        `json:"slug,omitempty"`
			StatusPagesPermissions *[]NewRoleDataAttributesStatusPagesPermissions `json:"status_pages_permissions,omitempty"`
			WebhooksPermissions    *[]NewRoleDataAttributesWebhooksPermissions    `json:"webhooks_permissions,omitempty"`
			WorkflowsPermissions   *[]NewRoleDataAttributesWorkflowsPermissions   `json:"workflows_permissions,omitempty"`
		} `json:"attributes"`
		Type NewRoleDataType `json:"type"`
	} `json:"data"`
}

// NewRoleDataAttributesApiKeysPermissions defines model for NewRole.Data.Attributes.ApiKeysPermissions.
type NewRoleDataAttributesApiKeysPermissions string

// NewRoleDataAttributesAuditsPermissions defines model for NewRole.Data.Attributes.AuditsPermissions.
type NewRoleDataAttributesAuditsPermissions string

// NewRoleDataAttributesBillingPermissions defines model for NewRole.Data.Attributes.BillingPermissions.
type NewRoleDataAttributesBillingPermissions string

// NewRoleDataAttributesEnvironmentsPermissions defines model for NewRole.Data.Attributes.EnvironmentsPermissions.
type NewRoleDataAttributesEnvironmentsPermissions string

// NewRoleDataAttributesFormFieldsPermissions defines model for NewRole.Data.Attributes.FormFieldsPermissions.
type NewRoleDataAttributesFormFieldsPermissions string

// NewRoleDataAttributesFunctionalitiesPermissions defines model for NewRole.Data.Attributes.FunctionalitiesPermissions.
type NewRoleDataAttributesFunctionalitiesPermissions string

// NewRoleDataAttributesGroupsPermissions defines model for NewRole.Data.Attributes.GroupsPermissions.
type NewRoleDataAttributesGroupsPermissions string

// NewRoleDataAttributesIncidentCausesPermissions defines model for NewRole.Data.Attributes.IncidentCausesPermissions.
type NewRoleDataAttributesIncidentCausesPermissions string

// NewRoleDataAttributesIncidentFeedbacksPermissions defines model for NewRole.Data.Attributes.IncidentFeedbacksPermissions.
type NewRoleDataAttributesIncidentFeedbacksPermissions string

// NewRoleDataAttributesIncidentPostMortemsPermissions defines model for NewRole.Data.Attributes.IncidentPostMortemsPermissions.
type NewRoleDataAttributesIncidentPostMortemsPermissions string

// NewRoleDataAttributesIncidentRolesPermissions defines model for NewRole.Data.Attributes.IncidentRolesPermissions.
type NewRoleDataAttributesIncidentRolesPermissions string

// NewRoleDataAttributesIncidentTypesPermissions defines model for NewRole.Data.Attributes.IncidentTypesPermissions.
type NewRoleDataAttributesIncidentTypesPermissions string

// NewRoleDataAttributesIncidentsPermissions defines model for NewRole.Data.Attributes.IncidentsPermissions.
type NewRoleDataAttributesIncidentsPermissions string

// NewRoleDataAttributesInvitationsPermissions defines model for NewRole.Data.Attributes.InvitationsPermissions.
type NewRoleDataAttributesInvitationsPermissions string

// NewRoleDataAttributesPlaybooksPermissions defines model for NewRole.Data.Attributes.PlaybooksPermissions.
type NewRoleDataAttributesPlaybooksPermissions string

// NewRoleDataAttributesPrivateIncidentsPermissions defines model for NewRole.Data.Attributes.PrivateIncidentsPermissions.
type NewRoleDataAttributesPrivateIncidentsPermissions string

// NewRoleDataAttributesRetrospectivePermissions defines model for NewRole.Data.Attributes.RetrospectivePermissions.
type NewRoleDataAttributesRetrospectivePermissions string

// NewRoleDataAttributesRolesPermissions defines model for NewRole.Data.Attributes.RolesPermissions.
type NewRoleDataAttributesRolesPermissions string

// NewRoleDataAttributesSecretsPermissions defines model for NewRole.Data.Attributes.SecretsPermissions.
type NewRoleDataAttributesSecretsPermissions string

// NewRoleDataAttributesServicesPermissions defines model for NewRole.Data.Attributes.ServicesPermissions.
type NewRoleDataAttributesServicesPermissions string

// NewRoleDataAttributesSeveritiesPermissions defines model for NewRole.Data.Attributes.SeveritiesPermissions.
type NewRoleDataAttributesSeveritiesPermissions string

// NewRoleDataAttributesStatusPagesPermissions defines model for NewRole.Data.Attributes.StatusPagesPermissions.
type NewRoleDataAttributesStatusPagesPermissions string

// NewRoleDataAttributesWebhooksPermissions defines model for NewRole.Data.Attributes.WebhooksPermissions.
type NewRoleDataAttributesWebhooksPermissions string

// NewRoleDataAttributesWorkflowsPermissions defines model for NewRole.Data.Attributes.WorkflowsPermissions.
type NewRoleDataAttributesWorkflowsPermissions string

// NewRoleDataType defines model for NewRole.Data.Type.
type NewRoleDataType string

// NewSecret defines model for new_secret.
type NewSecret struct {
	Data struct {
		Attributes struct {
			// The HashiCorp Vault secret mount path
			HashicorpVaultMount *string `json:"hashicorp_vault_mount"`

			// The HashiCorp Vault secret path
			HashicorpVaultPath *string `json:"hashicorp_vault_path"`

			// The HashiCorp Vault secret version
			HashicorpVaultVersion *string `json:"hashicorp_vault_version"`

			// The kind of the secret
			Kind *NewSecretDataAttributesKind `json:"kind,omitempty"`

			// The name of the secret
			Name string `json:"name"`

			// The secret
			Secret string `json:"secret"`
		} `json:"attributes"`
		Type NewSecretDataType `json:"type"`
	} `json:"data"`
}

// The kind of the secret
type NewSecretDataAttributesKind string

// NewSecretDataType defines model for NewSecret.Data.Type.
type NewSecretDataType string

// NewService defines model for new_service.
type NewService struct {
	Data struct {
		Attributes struct {
			// The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
			BackstageId *string `json:"backstage_id"`

			// The hex color of the service
			Color *string `json:"color"`

			// The description of the service
			Description *string `json:"description"`

			// Environments associated with this service
			EnvironmentIds *[]string `json:"environment_ids"`

			// The GitHub repository branch associated to this service. eg: main
			GithubRepositoryBranch *string `json:"github_repository_branch"`

			// The GitHub repository name associated to this service. eg: rootlyhq/my-service
			GithubRepositoryName *string `json:"github_repository_name"`

			// The Gitlab repository branch associated to this service. eg: main
			GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

			// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
			GitlabRepositoryName *string `json:"gitlab_repository_name"`

			// The name of the service
			Name string `json:"name"`

			// Emails to attach to the service
			NotifyEmails *[]string `json:"notify_emails"`

			// The Opsgenie service id associated to this service
			OpsgenieId *string `json:"opsgenie_id"`

			// Owner Teams associated with this service
			OwnersGroupIds *[]string `json:"owners_group_ids"`

			// Owner Users associated with this service
			OwnersUserIds *[]int `json:"owners_user_ids"`

			// The PagerDuty service id associated to this service
			PagerdutyId *string `json:"pagerduty_id"`

			// Position of the service
			Position *int `json:"position"`

			// The public description of the service
			PublicDescription *string `json:"public_description"`

			// Services dependent on this service
			ServiceIds *[]string `json:"service_ids"`

			// Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// Show uptime over x days
			ShowUptimeLastDays *NewServiceDataAttributesShowUptimeLastDays `json:"show_uptime_last_days"`

			// Slack Aliases associated with this service
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this service
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`

			// The status of the service
			Status *NewServiceDataAttributesStatus `json:"status,omitempty"`
		} `json:"attributes"`
		Type NewServiceDataType `json:"type"`
	} `json:"data"`
}

// Show uptime over x days
type NewServiceDataAttributesShowUptimeLastDays int

// The status of the service
type NewServiceDataAttributesStatus string

// NewServiceDataType defines model for NewService.Data.Type.
type NewServiceDataType string

// NewSeverity defines model for new_severity.
type NewSeverity struct {
	Data struct {
		Attributes struct {
			// The hex color of the severity
			Color *string `json:"color"`

			// The description of the severity
			Description *string `json:"description"`

			// The name of the severity
			Name string `json:"name"`

			// Emails to attach to the severity
			NotifyEmails *[]string `json:"notify_emails"`

			// Position of the severity
			Position *int `json:"position"`

			// The severity of the severity
			Severity *NewSeverityDataAttributesSeverity `json:"severity,omitempty"`

			// Slack Aliases associated with this severity
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this severity
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type NewSeverityDataType `json:"type"`
	} `json:"data"`
}

// The severity of the severity
type NewSeverityDataAttributesSeverity string

// NewSeverityDataType defines model for NewSeverity.Data.Type.
type NewSeverityDataType string

// NewStatusPage defines model for new_status_page.
type NewStatusPage struct {
	Data struct {
		Attributes struct {
			// Allow search engines to include your public status page in search results
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// Enable authentication
			AuthenticationEnabled *bool `json:"authentication_enabled"`

			// Authentication password
			AuthenticationPassword *string `json:"authentication_password"`

			// The description of the status page
			Description *string `json:"description"`

			// Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// Message showing when at least one component is not operational
			FailureMessage *string `json:"failure_message"`

			// The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// Functionalities attached to the status page
			FunctionalityIds *[]string `json:"functionality_ids,omitempty"`

			// Google Analytics tracking ID
			GaTrackingId *string `json:"ga_tracking_id"`

			// The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Make the status page accessible to the public
			Public *bool `json:"public"`

			// The public description of the status page
			PublicDescription *string `json:"public_description"`

			// The public title of the status page
			PublicTitle *string `json:"public_title"`

			// Services attached to the status page
			ServiceIds *[]string `json:"service_ids,omitempty"`

			// Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// Show uptime over x days
			ShowUptimeLastDays *NewStatusPageDataAttributesShowUptimeLastDays `json:"show_uptime_last_days"`

			// Message showing when all components are operational
			SuccessMessage *string `json:"success_message"`

			// Status Page Timezone
			TimeZone *NewStatusPageDataAttributesTimeZone `json:"time_zone"`

			// The title of the status page
			Title string `json:"title"`

			// Website Privacy URL
			WebsitePrivacyUrl *string `json:"website_privacy_url"`

			// Website Support URL
			WebsiteSupportUrl *string `json:"website_support_url"`

			// Website URL
			WebsiteUrl *string `json:"website_url"`
		} `json:"attributes"`
		Type NewStatusPageDataType `json:"type"`
	} `json:"data"`
}

// Show uptime over x days
type NewStatusPageDataAttributesShowUptimeLastDays int

// Status Page Timezone
type NewStatusPageDataAttributesTimeZone string

// NewStatusPageDataType defines model for NewStatusPage.Data.Type.
type NewStatusPageDataType string

// NewTeam defines model for new_team.
type NewTeam struct {
	Data struct {
		Attributes struct {
			// The hex color of the team
			Color *string `json:"color"`

			// The description of the team
			Description *string `json:"description"`

			// The name of the team
			Name string `json:"name"`

			// Emails to attach to the team
			NotifyEmails *[]string `json:"notify_emails"`

			// The Opsgenie group id associated to this team
			OpsgenieId *string `json:"opsgenie_id"`

			// The PagerDuty group id associated to this team
			PagerdutyId *string `json:"pagerduty_id"`

			// The PagerTree group id associated to this team
			PagertreeId *string `json:"pagertree_id"`

			// Position of the team
			Position *int `json:"position"`

			// Slack Aliases associated with this service
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this service
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`

			// The User ID's members of this team
			UserIds *[]int `json:"user_ids"`

			// The VictorOps group id associated to this team
			VictorOpsId *string `json:"victor_ops_id"`
		} `json:"attributes"`
		Type NewTeamDataType `json:"type"`
	} `json:"data"`
}

// NewTeamDataType defines model for NewTeam.Data.Type.
type NewTeamDataType string

// NewWebhooksEndpoint defines model for new_webhooks_endpoint.
type NewWebhooksEndpoint struct {
	Data struct {
		Attributes struct {
			Enabled    *bool                                          `json:"enabled,omitempty"`
			EventTypes *[]NewWebhooksEndpointDataAttributesEventTypes `json:"event_types,omitempty"`

			// The name of the endpoint
			Name string `json:"name"`

			// The webhook signing secret used to verify webhook requests.
			Secret *string `json:"secret,omitempty"`

			// The URL of the endpoint.
			Url string `json:"url"`
		} `json:"attributes"`
		Type NewWebhooksEndpointDataType `json:"type"`
	} `json:"data"`
}

// NewWebhooksEndpointDataAttributesEventTypes defines model for NewWebhooksEndpoint.Data.Attributes.EventTypes.
type NewWebhooksEndpointDataAttributesEventTypes string

// NewWebhooksEndpointDataType defines model for NewWebhooksEndpoint.Data.Type.
type NewWebhooksEndpointDataType string

// NewWorkflow defines model for new_workflow.
type NewWorkflow struct {
	Data struct {
		Attributes struct {
			CauseIds *[]string `json:"cause_ids,omitempty"`

			// Workflow command
			Command *string `json:"command"`

			// This will notify you back when the workflow is starting
			CommandFeedbackEnabled *bool `json:"command_feedback_enabled"`

			// The description of the workflow
			Description      *string   `json:"description"`
			Enabled          *bool     `json:"enabled,omitempty"`
			EnvironmentIds   *[]string `json:"environment_ids,omitempty"`
			FunctionalityIds *[]string `json:"functionality_ids,omitempty"`
			GroupIds         *[]string `json:"group_ids,omitempty"`
			IncidentRoleIds  *[]string `json:"incident_role_ids,omitempty"`
			IncidentTypeIds  *[]string `json:"incident_type_ids,omitempty"`

			// The title of the workflow
			Name string `json:"name"`

			// The order which the workflow should run with other workflows.
			Position *float32 `json:"position,omitempty"`

			// Priority
			Priority *NewWorkflowDataAttributesPriority `json:"priority"`

			// Repeat workflow every duration
			RepeatEveryDuration *string                              `json:"repeat_every_duration"`
			RepeatOn            *[]NewWorkflowDataAttributesRepeatOn `json:"repeat_on,omitempty"`
			ServiceIds          *[]string                            `json:"service_ids,omitempty"`
			SeverityIds         *[]string                            `json:"severity_ids,omitempty"`

			// The slug of the workflow
			Slug          *string      `json:"slug,omitempty"`
			TriggerParams *interface{} `json:"trigger_params,omitempty"`

			// Wait this duration before executing
			Wait *string `json:"wait"`

			// The group this workflow belongs to.
			WorkflowGroupId *string `json:"workflow_group_id,omitempty"`
		} `json:"attributes"`
		Type NewWorkflowDataType `json:"type"`
	} `json:"data"`
}

// Priority
type NewWorkflowDataAttributesPriority string

// Repeat on weekdays
type NewWorkflowDataAttributesRepeatOn string

// NewWorkflowDataType defines model for NewWorkflow.Data.Type.
type NewWorkflowDataType string

// NewWorkflowCustomFieldSelection defines model for new_workflow_custom_field_selection.
type NewWorkflowCustomFieldSelection struct {
	Data struct {
		Attributes struct {
			// The custom field for this selection
			CustomFieldId float32 `json:"custom_field_id"`

			// The trigger condition
			IncidentCondition NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition `json:"incident_condition"`
			SelectedOptionIds *[]float32                                                     `json:"selected_option_ids,omitempty"`
			Values            *[]string                                                      `json:"values,omitempty"`

			// The workflow for this selection
			WorkflowId *string `json:"workflow_id,omitempty"`
		} `json:"attributes"`
		Type NewWorkflowCustomFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// The trigger condition
type NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition string

// NewWorkflowCustomFieldSelectionDataType defines model for NewWorkflowCustomFieldSelection.Data.Type.
type NewWorkflowCustomFieldSelectionDataType string

// NewWorkflowFormFieldCondition defines model for new_workflow_form_field_condition.
type NewWorkflowFormFieldCondition struct {
	Data struct {
		Attributes struct {
			// The custom field for this condition
			FormFieldId string `json:"form_field_id"`

			// The trigger condition
			IncidentCondition NewWorkflowFormFieldConditionDataAttributesIncidentCondition `json:"incident_condition"`
			SelectedOptionIds *[]string                                                    `json:"selected_option_ids,omitempty"`
			SelectedUserIds   *[]float32                                                   `json:"selected_user_ids,omitempty"`
			Values            *[]string                                                    `json:"values,omitempty"`

			// The workflow for this condition
			WorkflowId *string `json:"workflow_id,omitempty"`
		} `json:"attributes"`
		Type NewWorkflowFormFieldConditionDataType `json:"type"`
	} `json:"data"`
}

// The trigger condition
type NewWorkflowFormFieldConditionDataAttributesIncidentCondition string

// NewWorkflowFormFieldConditionDataType defines model for NewWorkflowFormFieldCondition.Data.Type.
type NewWorkflowFormFieldConditionDataType string

// NewWorkflowGroup defines model for new_workflow_group.
type NewWorkflowGroup struct {
	Data struct {
		Attributes struct {
			// Whether the group is expanded or collapsed.
			Expanded *bool `json:"expanded,omitempty"`

			// The kind of the workflow group
			Kind NewWorkflowGroupDataAttributesKind `json:"kind"`

			// The name of the workflow group.
			Name string `json:"name"`

			// The position of the workflow group
			Position *float32 `json:"position,omitempty"`
		} `json:"attributes"`
		Type NewWorkflowGroupDataType `json:"type"`
	} `json:"data"`
}

// The kind of the workflow group
type NewWorkflowGroupDataAttributesKind string

// NewWorkflowGroupDataType defines model for NewWorkflowGroup.Data.Type.
type NewWorkflowGroupDataType string

// NewWorkflowRun defines model for new_workflow_run.
type NewWorkflowRun struct {
	Data struct {
		Attributes interface{}            `json:"attributes"`
		Type       NewWorkflowRunDataType `json:"type"`
	} `json:"data"`
}

// NewWorkflowRunDataType defines model for NewWorkflowRun.Data.Type.
type NewWorkflowRunDataType string

// NewWorkflowTask defines model for new_workflow_task.
type NewWorkflowTask struct {
	Data struct {
		Attributes struct {
			// Enable/disable workflow task
			Enabled *bool `json:"enabled,omitempty"`

			// Name of the workflow task
			Name *string `json:"name,omitempty"`

			// The position of the workflow task
			Position *float32 `json:"position,omitempty"`

			// Skip workflow task if any failures
			SkipOnFailure *bool       `json:"skip_on_failure,omitempty"`
			TaskParams    interface{} `json:"task_params"`
		} `json:"attributes"`
		Type NewWorkflowTaskDataType `json:"type"`
	} `json:"data"`
}

// NewWorkflowTaskDataType defines model for NewWorkflowTask.Data.Type.
type NewWorkflowTaskDataType string

// PageOpsgenieOnCallRespondersTaskParams defines model for page_opsgenie_on_call_responders_task_params.
type PageOpsgenieOnCallRespondersTaskParams struct {
	// Description field of the incident that is generally used to provide a detailed information about the incident
	Description *string `json:"description,omitempty"`

	// Message of the incident
	Message  *string                                         `json:"message,omitempty"`
	Priority *PageOpsgenieOnCallRespondersTaskParamsPriority `json:"priority,omitempty"`
	TaskType *PageOpsgenieOnCallRespondersTaskParamsTaskType `json:"task_type,omitempty"`
	Teams    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"teams,omitempty"`
	Users *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"users,omitempty"`
}

// PageOpsgenieOnCallRespondersTaskParamsPriority defines model for PageOpsgenieOnCallRespondersTaskParams.Priority.
type PageOpsgenieOnCallRespondersTaskParamsPriority string

// PageOpsgenieOnCallRespondersTaskParamsTaskType defines model for PageOpsgenieOnCallRespondersTaskParams.TaskType.
type PageOpsgenieOnCallRespondersTaskParamsTaskType string

// PagePagerdutyOnCallRespondersTaskParams defines model for page_pagerduty_on_call_responders_task_params.
type PagePagerdutyOnCallRespondersTaskParams struct {
	// Rootly only supports linking to a single Pagerduty incident. If this feature is disabled Rootly will add responders from any additional pages to the existing Pagerduty incident that is linked to the Rootly incident. If enabled, Rootly will create a new Pagerduty incident that is not linked to any Rootly incidents
	CreateNewIncidentOnConflict *bool `json:"create_new_incident_on_conflict,omitempty"`
	EscalationPolicies          *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"escalation_policies,omitempty"`
	Message *string `json:"message,omitempty"`
	Service struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"service"`
	TaskType *PagePagerdutyOnCallRespondersTaskParamsTaskType `json:"task_type,omitempty"`
	Urgency  *PagePagerdutyOnCallRespondersTaskParamsUrgency  `json:"urgency,omitempty"`
	Users    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"users,omitempty"`
}

// PagePagerdutyOnCallRespondersTaskParamsTaskType defines model for PagePagerdutyOnCallRespondersTaskParams.TaskType.
type PagePagerdutyOnCallRespondersTaskParamsTaskType string

// PagePagerdutyOnCallRespondersTaskParamsUrgency defines model for PagePagerdutyOnCallRespondersTaskParams.Urgency.
type PagePagerdutyOnCallRespondersTaskParamsUrgency string

// PageVictorOpsOnCallRespondersTaskParams defines model for page_victor_ops_on_call_responders_task_params.
type PageVictorOpsOnCallRespondersTaskParams struct {
	EscalationPolicies *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"escalation_policies,omitempty"`
	TaskType *PageVictorOpsOnCallRespondersTaskParamsTaskType `json:"task_type,omitempty"`
	Users    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"users,omitempty"`
}

// PageVictorOpsOnCallRespondersTaskParamsTaskType defines model for PageVictorOpsOnCallRespondersTaskParams.TaskType.
type PageVictorOpsOnCallRespondersTaskParamsTaskType string

// Playbook defines model for playbook.
type Playbook struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The Environment ID's to attach to the incident
	EnvironmentIds *[]string `json:"environment_ids"`

	// The external url of the playbook
	ExternalUrl *string `json:"external_url"`

	// The Functionality ID's to attach to the incident
	FunctionalityIds *[]string `json:"functionality_ids"`

	// The Team ID's to attach to the incident
	GroupIds *[]string `json:"group_ids"`

	// The Incident Type ID's to attach to the incident
	IncidentTypeIds *[]string `json:"incident_type_ids"`

	// The Service ID's to attach to the incident
	ServiceIds *[]string `json:"service_ids"`

	// The Severity ID's to attach to the incident
	SeverityIds *[]string `json:"severity_ids"`

	// The summary of the playbook
	Summary *string `json:"summary"`

	// The title of the playbook
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PlaybookList defines model for playbook_list.
type PlaybookList struct {
	Data []struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// The external url of the playbook
			ExternalUrl *string `json:"external_url"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// The Incident Type ID's to attach to the incident
			IncidentTypeIds *[]string `json:"incident_type_ids"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID's to attach to the incident
			SeverityIds *[]string `json:"severity_ids"`

			// The summary of the playbook
			Summary *string `json:"summary"`

			// The title of the playbook
			Title string `json:"title"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the playbook
		Id   string               `json:"id"`
		Type PlaybookListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// PlaybookListDataType defines model for PlaybookList.Data.Type.
type PlaybookListDataType string

// PlaybookResponse defines model for playbook_response.
type PlaybookResponse struct {
	Data struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// The external url of the playbook
			ExternalUrl *string `json:"external_url"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// The Incident Type ID's to attach to the incident
			IncidentTypeIds *[]string `json:"incident_type_ids"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID's to attach to the incident
			SeverityIds *[]string `json:"severity_ids"`

			// The summary of the playbook
			Summary *string `json:"summary"`

			// The title of the playbook
			Title string `json:"title"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the playbook
		Id   string                   `json:"id"`
		Type PlaybookResponseDataType `json:"type"`
	} `json:"data"`
}

// PlaybookResponseDataType defines model for PlaybookResponse.Data.Type.
type PlaybookResponseDataType string

// PlaybookTask defines model for playbook_task.
type PlaybookTask struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of task
	Description *string `json:"description"`
	PlaybookId  *string `json:"playbook_id,omitempty"`

	// The position of the task
	Position *int `json:"position"`

	// The task of the task
	Task string `json:"task"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PlaybookTaskList defines model for playbook_task_list.
type PlaybookTaskList struct {
	Data []struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of task
			Description *string `json:"description"`
			PlaybookId  *string `json:"playbook_id,omitempty"`

			// The position of the task
			Position *int `json:"position"`

			// The task of the task
			Task string `json:"task"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the task
		Id   string                   `json:"id"`
		Type PlaybookTaskListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// PlaybookTaskListDataType defines model for PlaybookTaskList.Data.Type.
type PlaybookTaskListDataType string

// PlaybookTaskResponse defines model for playbook_task_response.
type PlaybookTaskResponse struct {
	Data struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of task
			Description *string `json:"description"`
			PlaybookId  *string `json:"playbook_id,omitempty"`

			// The position of the task
			Position *int `json:"position"`

			// The task of the task
			Task string `json:"task"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the task
		Id   string                       `json:"id"`
		Type PlaybookTaskResponseDataType `json:"type"`
	} `json:"data"`
}

// PlaybookTaskResponseDataType defines model for PlaybookTaskResponse.Data.Type.
type PlaybookTaskResponseDataType string

// PostMortemTemplate defines model for post_mortem_template.
type PostMortemTemplate struct {
	// The postmortem template. Liquid syntax and markdown are supported
	Content *string `json:"content,omitempty"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Default selected template when editing a postmortem
	Default *bool `json:"default"`

	// The format of the input
	Format *PostMortemTemplateFormat `json:"format,omitempty"`

	// The name of the postmortem template
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The format of the input
type PostMortemTemplateFormat string

// PostMortemTemplateList defines model for post_mortem_template_list.
type PostMortemTemplateList struct {
	Data []struct {
		Attributes struct {
			// The postmortem template. Liquid syntax and markdown are supported
			Content *string `json:"content,omitempty"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// The format of the input
			Format *PostMortemTemplateListDataAttributesFormat `json:"format,omitempty"`

			// The name of the postmortem template
			Name string `json:"name"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the post_mortem_template
		Id   string                         `json:"id"`
		Type PostMortemTemplateListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The format of the input
type PostMortemTemplateListDataAttributesFormat string

// PostMortemTemplateListDataType defines model for PostMortemTemplateList.Data.Type.
type PostMortemTemplateListDataType string

// PostMortemTemplateResponse defines model for post_mortem_template_response.
type PostMortemTemplateResponse struct {
	Data struct {
		Attributes struct {
			// The postmortem template. Liquid syntax and markdown are supported
			Content *string `json:"content,omitempty"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// The format of the input
			Format *PostMortemTemplateResponseDataAttributesFormat `json:"format,omitempty"`

			// The name of the postmortem template
			Name string `json:"name"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the post_mortem_template
		Id   string                             `json:"id"`
		Type PostMortemTemplateResponseDataType `json:"type"`
	} `json:"data"`
}

// The format of the input
type PostMortemTemplateResponseDataAttributesFormat string

// PostMortemTemplateResponseDataType defines model for PostMortemTemplateResponse.Data.Type.
type PostMortemTemplateResponseDataType string

// PrintTaskParams defines model for print_task_params.
type PrintTaskParams struct {
	// The message to print
	Message  string                   `json:"message"`
	TaskType *PrintTaskParamsTaskType `json:"task_type,omitempty"`
}

// PrintTaskParamsTaskType defines model for PrintTaskParams.TaskType.
type PrintTaskParamsTaskType string

// PublishIncidentTaskParams defines model for publish_incident_task_params.
type PublishIncidentTaskParams struct {
	// Incident event description
	Event    *string `json:"event,omitempty"`
	Incident struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"incident"`

	// Additional API Payload you can pass to statuspage.io for example. Can contain liquid markup and need to be valid JSON
	IntegrationPayload *string `json:"integration_payload"`

	// When true notifies subscribers of the status page by email/text
	NotifySubscribers *bool  `json:"notify_subscribers,omitempty"`
	PublicTitle       string `json:"public_title"`

	// For StatusPage.io integrated pages auto publishes a tweet for your update
	ShouldTweet        *bool                           `json:"should_tweet,omitempty"`
	Status             PublishIncidentTaskParamsStatus `json:"status"`
	StatusPageId       string                          `json:"status_page_id"`
	StatusPageTemplate *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"status_page_template,omitempty"`
	TaskType *PublishIncidentTaskParamsTaskType `json:"task_type,omitempty"`
}

// PublishIncidentTaskParamsStatus defines model for PublishIncidentTaskParams.Status.
type PublishIncidentTaskParamsStatus string

// PublishIncidentTaskParamsTaskType defines model for PublishIncidentTaskParams.TaskType.
type PublishIncidentTaskParamsTaskType string

// Pulse defines model for pulse.
type Pulse struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// Additional data
	Data *map[string]interface{} `json:"data"`

	// Environments attached to the pulse
	Environments *[]struct {
		// The hex color of the environment
		Color *string `json:"color"`

		// Date of creation
		CreatedAt string `json:"created_at"`

		// The description of the environment
		Description *string `json:"description"`

		// The name of the environment
		Name string `json:"name"`

		// Emails attached to the environment
		NotifyEmails *[]string `json:"notify_emails"`

		// Position of the environment
		Position *int `json:"position"`

		// Slack Aliases associated with this environment
		SlackAliases *[]struct {
			// Slack alias ID
			Id string `json:"id"`

			// Slack alias name
			Name string `json:"name"`
		} `json:"slack_aliases"`

		// Slack Channels associated with this environment
		SlackChannels *[]struct {
			// Slack channel ID
			Id string `json:"id"`

			// Slack channel name
			Name string `json:"name"`
		} `json:"slack_channels"`

		// The slug of the environment
		Slug *string `json:"slug,omitempty"`

		// Date of last update
		UpdatedAt string `json:"updated_at"`
	} `json:"environments,omitempty"`
	Labels *[]struct {
		// Key of the tag
		Key string `json:"key"`

		// Value of the tag
		Value string `json:"value"`
	} `json:"labels,omitempty"`
	Refs *[]struct {
		// Key of the ref
		Key string `json:"key"`

		// Value of the ref
		Value string `json:"value"`
	} `json:"refs,omitempty"`

	// Services attached to the pulse
	Services *[]struct {
		// The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
		BackstageId *string `json:"backstage_id"`

		// The hex color of the service
		Color *string `json:"color"`

		// Date of creation
		CreatedAt string `json:"created_at"`

		// The description of the service
		Description *string `json:"description"`

		// Environments associated with this service
		EnvironmentIds *[]string `json:"environment_ids"`

		// The GitHub repository branch associated to this service. eg: main
		GithubRepositoryBranch *string `json:"github_repository_branch"`

		// The GitHub repository name associated to this service. eg: rootlyhq/my-service
		GithubRepositoryName *string `json:"github_repository_name"`

		// The Gitlab repository branch associated to this service. eg: main
		GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

		// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
		GitlabRepositoryName *string `json:"gitlab_repository_name"`

		// The name of the service
		Name string `json:"name"`

		// Emails attached to the service
		NotifyEmails *[]string `json:"notify_emails"`

		// The Opsgenie service id associated to this service
		OpsgenieId *string `json:"opsgenie_id"`

		// Owner Teams associated with this service
		OwnersGroupIds *[]string `json:"owners_group_ids"`

		// Owner Users associated with this service
		OwnersUserIds *[]int `json:"owners_user_ids"`

		// The PagerDuty service id associated to this service
		PagerdutyId *string `json:"pagerduty_id"`

		// Position of the service
		Position *int `json:"position"`

		// The public description of the service
		PublicDescription *string `json:"public_description"`

		// Services dependent on this service
		ServiceIds *[]string `json:"service_ids"`

		// Slack Aliases associated with this service
		SlackAliases *[]struct {
			// Slack alias ID
			Id string `json:"id"`

			// Slack alias name
			Name string `json:"name"`
		} `json:"slack_aliases"`

		// Slack Channels associated with this service
		SlackChannels *[]struct {
			// Slack channel ID
			Id string `json:"id"`

			// Slack channel name
			Name string `json:"name"`
		} `json:"slack_channels"`

		// The slug of the service
		Slug *string `json:"slug,omitempty"`

		// The status of the service
		Status *PulseServicesStatus `json:"status,omitempty"`

		// Date of last update
		UpdatedAt string `json:"updated_at"`
	} `json:"services,omitempty"`

	// The source of the pulse (eg: k8s)
	Source *string `json:"source"`

	// The summary of the pulse
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The status of the service
type PulseServicesStatus string

// PulseList defines model for pulse_list.
type PulseList struct {
	Data []struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// Additional data
			Data *map[string]interface{} `json:"data"`

			// Environments attached to the pulse
			Environments *[]struct {
				// The hex color of the environment
				Color *string `json:"color"`

				// Date of creation
				CreatedAt string `json:"created_at"`

				// The description of the environment
				Description *string `json:"description"`

				// The name of the environment
				Name string `json:"name"`

				// Emails attached to the environment
				NotifyEmails *[]string `json:"notify_emails"`

				// Position of the environment
				Position *int `json:"position"`

				// Slack Aliases associated with this environment
				SlackAliases *[]struct {
					// Slack alias ID
					Id string `json:"id"`

					// Slack alias name
					Name string `json:"name"`
				} `json:"slack_aliases"`

				// Slack Channels associated with this environment
				SlackChannels *[]struct {
					// Slack channel ID
					Id string `json:"id"`

					// Slack channel name
					Name string `json:"name"`
				} `json:"slack_channels"`

				// The slug of the environment
				Slug *string `json:"slug,omitempty"`

				// Date of last update
				UpdatedAt string `json:"updated_at"`
			} `json:"environments,omitempty"`
			Labels *[]struct {
				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`
			Refs *[]struct {
				// Key of the ref
				Key string `json:"key"`

				// Value of the ref
				Value string `json:"value"`
			} `json:"refs,omitempty"`

			// Services attached to the pulse
			Services *[]struct {
				// The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
				BackstageId *string `json:"backstage_id"`

				// The hex color of the service
				Color *string `json:"color"`

				// Date of creation
				CreatedAt string `json:"created_at"`

				// The description of the service
				Description *string `json:"description"`

				// Environments associated with this service
				EnvironmentIds *[]string `json:"environment_ids"`

				// The GitHub repository branch associated to this service. eg: main
				GithubRepositoryBranch *string `json:"github_repository_branch"`

				// The GitHub repository name associated to this service. eg: rootlyhq/my-service
				GithubRepositoryName *string `json:"github_repository_name"`

				// The Gitlab repository branch associated to this service. eg: main
				GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

				// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
				GitlabRepositoryName *string `json:"gitlab_repository_name"`

				// The name of the service
				Name string `json:"name"`

				// Emails attached to the service
				NotifyEmails *[]string `json:"notify_emails"`

				// The Opsgenie service id associated to this service
				OpsgenieId *string `json:"opsgenie_id"`

				// Owner Teams associated with this service
				OwnersGroupIds *[]string `json:"owners_group_ids"`

				// Owner Users associated with this service
				OwnersUserIds *[]int `json:"owners_user_ids"`

				// The PagerDuty service id associated to this service
				PagerdutyId *string `json:"pagerduty_id"`

				// Position of the service
				Position *int `json:"position"`

				// The public description of the service
				PublicDescription *string `json:"public_description"`

				// Services dependent on this service
				ServiceIds *[]string `json:"service_ids"`

				// Slack Aliases associated with this service
				SlackAliases *[]struct {
					// Slack alias ID
					Id string `json:"id"`

					// Slack alias name
					Name string `json:"name"`
				} `json:"slack_aliases"`

				// Slack Channels associated with this service
				SlackChannels *[]struct {
					// Slack channel ID
					Id string `json:"id"`

					// Slack channel name
					Name string `json:"name"`
				} `json:"slack_channels"`

				// The slug of the service
				Slug *string `json:"slug,omitempty"`

				// The status of the service
				Status *PulseListDataAttributesServicesStatus `json:"status,omitempty"`

				// Date of last update
				UpdatedAt string `json:"updated_at"`
			} `json:"services,omitempty"`

			// The source of the pulse (eg: k8s)
			Source *string `json:"source"`

			// The summary of the pulse
			Summary string `json:"summary"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the pulse
		Id   string            `json:"id"`
		Type PulseListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The status of the service
type PulseListDataAttributesServicesStatus string

// PulseListDataType defines model for PulseList.Data.Type.
type PulseListDataType string

// PulseResponse defines model for pulse_response.
type PulseResponse struct {
	Data struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// Additional data
			Data *map[string]interface{} `json:"data"`

			// Environments attached to the pulse
			Environments *[]struct {
				// The hex color of the environment
				Color *string `json:"color"`

				// Date of creation
				CreatedAt string `json:"created_at"`

				// The description of the environment
				Description *string `json:"description"`

				// The name of the environment
				Name string `json:"name"`

				// Emails attached to the environment
				NotifyEmails *[]string `json:"notify_emails"`

				// Position of the environment
				Position *int `json:"position"`

				// Slack Aliases associated with this environment
				SlackAliases *[]struct {
					// Slack alias ID
					Id string `json:"id"`

					// Slack alias name
					Name string `json:"name"`
				} `json:"slack_aliases"`

				// Slack Channels associated with this environment
				SlackChannels *[]struct {
					// Slack channel ID
					Id string `json:"id"`

					// Slack channel name
					Name string `json:"name"`
				} `json:"slack_channels"`

				// The slug of the environment
				Slug *string `json:"slug,omitempty"`

				// Date of last update
				UpdatedAt string `json:"updated_at"`
			} `json:"environments,omitempty"`
			Labels *[]struct {
				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`
			Refs *[]struct {
				// Key of the ref
				Key string `json:"key"`

				// Value of the ref
				Value string `json:"value"`
			} `json:"refs,omitempty"`

			// Services attached to the pulse
			Services *[]struct {
				// The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
				BackstageId *string `json:"backstage_id"`

				// The hex color of the service
				Color *string `json:"color"`

				// Date of creation
				CreatedAt string `json:"created_at"`

				// The description of the service
				Description *string `json:"description"`

				// Environments associated with this service
				EnvironmentIds *[]string `json:"environment_ids"`

				// The GitHub repository branch associated to this service. eg: main
				GithubRepositoryBranch *string `json:"github_repository_branch"`

				// The GitHub repository name associated to this service. eg: rootlyhq/my-service
				GithubRepositoryName *string `json:"github_repository_name"`

				// The Gitlab repository branch associated to this service. eg: main
				GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

				// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
				GitlabRepositoryName *string `json:"gitlab_repository_name"`

				// The name of the service
				Name string `json:"name"`

				// Emails attached to the service
				NotifyEmails *[]string `json:"notify_emails"`

				// The Opsgenie service id associated to this service
				OpsgenieId *string `json:"opsgenie_id"`

				// Owner Teams associated with this service
				OwnersGroupIds *[]string `json:"owners_group_ids"`

				// Owner Users associated with this service
				OwnersUserIds *[]int `json:"owners_user_ids"`

				// The PagerDuty service id associated to this service
				PagerdutyId *string `json:"pagerduty_id"`

				// Position of the service
				Position *int `json:"position"`

				// The public description of the service
				PublicDescription *string `json:"public_description"`

				// Services dependent on this service
				ServiceIds *[]string `json:"service_ids"`

				// Slack Aliases associated with this service
				SlackAliases *[]struct {
					// Slack alias ID
					Id string `json:"id"`

					// Slack alias name
					Name string `json:"name"`
				} `json:"slack_aliases"`

				// Slack Channels associated with this service
				SlackChannels *[]struct {
					// Slack channel ID
					Id string `json:"id"`

					// Slack channel name
					Name string `json:"name"`
				} `json:"slack_channels"`

				// The slug of the service
				Slug *string `json:"slug,omitempty"`

				// The status of the service
				Status *PulseResponseDataAttributesServicesStatus `json:"status,omitempty"`

				// Date of last update
				UpdatedAt string `json:"updated_at"`
			} `json:"services,omitempty"`

			// The source of the pulse (eg: k8s)
			Source *string `json:"source"`

			// The summary of the pulse
			Summary string `json:"summary"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the pulse
		Id   string                `json:"id"`
		Type PulseResponseDataType `json:"type"`
	} `json:"data"`
}

// The status of the service
type PulseResponseDataAttributesServicesStatus string

// PulseResponseDataType defines model for PulseResponse.Data.Type.
type PulseResponseDataType string

// PulseTriggerParams defines model for pulse_trigger_params.
type PulseTriggerParams struct {
	PulseCondition                 *PulseTriggerParamsPulseCondition        `json:"pulse_condition,omitempty"`
	PulseConditionLabel            *PulseTriggerParamsPulseConditionLabel   `json:"pulse_condition_label,omitempty"`
	PulseConditionLabelUseRegexp   *bool                                    `json:"pulse_condition_label_use_regexp,omitempty"`
	PulseConditionPayload          *PulseTriggerParamsPulseConditionPayload `json:"pulse_condition_payload,omitempty"`
	PulseConditionPayloadUseRegexp *bool                                    `json:"pulse_condition_payload_use_regexp,omitempty"`
	PulseConditionSource           *PulseTriggerParamsPulseConditionSource  `json:"pulse_condition_source,omitempty"`
	PulseConditionSourceUseRegexp  *bool                                    `json:"pulse_condition_source_use_regexp,omitempty"`
	PulseLabels                    *[]string                                `json:"pulse_labels,omitempty"`
	PulsePayload                   *[]string                                `json:"pulse_payload,omitempty"`

	// You can use jsonpath syntax. eg: $.incident.teams[*]
	PulseQueryPayload *string                       `json:"pulse_query_payload"`
	PulseSources      *[]string                     `json:"pulse_sources,omitempty"`
	TriggerType       PulseTriggerParamsTriggerType `json:"trigger_type"`
	Triggers          *[]PulseTriggerParamsTriggers `json:"triggers,omitempty"`
}

// PulseTriggerParamsPulseCondition defines model for PulseTriggerParams.PulseCondition.
type PulseTriggerParamsPulseCondition string

// PulseTriggerParamsPulseConditionLabel defines model for PulseTriggerParams.PulseConditionLabel.
type PulseTriggerParamsPulseConditionLabel string

// PulseTriggerParamsPulseConditionPayload defines model for PulseTriggerParams.PulseConditionPayload.
type PulseTriggerParamsPulseConditionPayload string

// PulseTriggerParamsPulseConditionSource defines model for PulseTriggerParams.PulseConditionSource.
type PulseTriggerParamsPulseConditionSource string

// PulseTriggerParamsTriggerType defines model for PulseTriggerParams.TriggerType.
type PulseTriggerParamsTriggerType string

// Actions that trigger the workflow
type PulseTriggerParamsTriggers string

// RedisClientTaskParams defines model for redis_client_task_params.
type RedisClientTaskParams struct {
	Commands               string  `json:"commands"`
	EventMessage           *string `json:"event_message,omitempty"`
	EventUrl               *string `json:"event_url,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *RedisClientTaskParamsTaskType `json:"task_type,omitempty"`
	Url      string                         `json:"url"`
}

// RedisClientTaskParamsTaskType defines model for RedisClientTaskParams.TaskType.
type RedisClientTaskParamsTaskType string

// RemoveGoogleDocsPermissionsTaskParams defines model for remove_google_docs_permissions_task_params.
type RemoveGoogleDocsPermissionsTaskParams struct {
	AttributeToQueryBy RemoveGoogleDocsPermissionsTaskParamsAttributeToQueryBy `json:"attribute_to_query_by"`

	// The Google Doc file ID
	FileId   string                                         `json:"file_id"`
	TaskType *RemoveGoogleDocsPermissionsTaskParamsTaskType `json:"task_type,omitempty"`
	Value    string                                         `json:"value"`
}

// RemoveGoogleDocsPermissionsTaskParamsAttributeToQueryBy defines model for RemoveGoogleDocsPermissionsTaskParams.AttributeToQueryBy.
type RemoveGoogleDocsPermissionsTaskParamsAttributeToQueryBy string

// RemoveGoogleDocsPermissionsTaskParamsTaskType defines model for RemoveGoogleDocsPermissionsTaskParams.TaskType.
type RemoveGoogleDocsPermissionsTaskParamsTaskType string

// RemoveSubscribers defines model for remove_subscribers.
type RemoveSubscribers struct {
	Data struct {
		Attributes struct {
			// Users without read permissions for private incidents will be removed from the subscriber list of this incident
			RemoveUsersWithNoPrivateIncidentAccess *bool `json:"remove_users_with_no_private_incident_access"`

			// IDs of users you wish to remove from the list of subscribers for this incident
			UserIds *[]string `json:"user_ids"`
		} `json:"attributes"`
		Type RemoveSubscribersDataType `json:"type"`
	} `json:"data"`
}

// RemoveSubscribersDataType defines model for RemoveSubscribers.Data.Type.
type RemoveSubscribersDataType string

// RenameSlackChannelTaskParams defines model for rename_slack_channel_task_params.
type RenameSlackChannelTaskParams struct {
	Channel struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channel"`
	TaskType *RenameSlackChannelTaskParamsTaskType `json:"task_type,omitempty"`
	Title    string                                `json:"title"`
}

// RenameSlackChannelTaskParamsTaskType defines model for RenameSlackChannelTaskParams.TaskType.
type RenameSlackChannelTaskParamsTaskType string

// ResolveIncident defines model for resolve_incident.
type ResolveIncident struct {
	Data struct {
		Attributes struct {
			// How was the incident resolved?
			ResolutionMessage *string `json:"resolution_message"`
		} `json:"attributes"`
		Type ResolveIncidentDataType `json:"type"`
	} `json:"data"`
}

// ResolveIncidentDataType defines model for ResolveIncident.Data.Type.
type ResolveIncidentDataType string

// RestartIncident defines model for restart_incident.
type RestartIncident struct {
	Data struct {
		Attributes *map[string]interface{} `json:"attributes,omitempty"`
		Type       RestartIncidentDataType `json:"type"`
	} `json:"data"`
}

// RestartIncidentDataType defines model for RestartIncident.Data.Type.
type RestartIncidentDataType string

// RetrospectiveStep defines model for retrospective_step.
type RetrospectiveStep struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the step
	Description *string `json:"description"`

	// Due date in days
	DueAfterDays *int `json:"due_after_days"`

	// Users assigned to the selected incident role will be the default owners for this step
	IncidentRoleId *string `json:"incident_role_id"`

	// Position of the step
	Position *int `json:"position,omitempty"`

	// Is the step skippable?
	Skippable *bool `json:"skippable,omitempty"`

	// The slug of the step
	Slug *string `json:"slug,omitempty"`

	// The name of the step
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// RetrospectiveStepList defines model for retrospective_step_list.
type RetrospectiveStepList struct {
	Data []struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the step
			Description *string `json:"description"`

			// Due date in days
			DueAfterDays *int `json:"due_after_days"`

			// Users assigned to the selected incident role will be the default owners for this step
			IncidentRoleId *string `json:"incident_role_id"`

			// Position of the step
			Position *int `json:"position,omitempty"`

			// Is the step skippable?
			Skippable *bool `json:"skippable,omitempty"`

			// The slug of the step
			Slug *string `json:"slug,omitempty"`

			// The name of the step
			Title string `json:"title"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the step
		Id   string                        `json:"id"`
		Type RetrospectiveStepListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// RetrospectiveStepListDataType defines model for RetrospectiveStepList.Data.Type.
type RetrospectiveStepListDataType string

// RetrospectiveStepResponse defines model for retrospective_step_response.
type RetrospectiveStepResponse struct {
	Data struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the step
			Description *string `json:"description"`

			// Due date in days
			DueAfterDays *int `json:"due_after_days"`

			// Users assigned to the selected incident role will be the default owners for this step
			IncidentRoleId *string `json:"incident_role_id"`

			// Position of the step
			Position *int `json:"position,omitempty"`

			// Is the step skippable?
			Skippable *bool `json:"skippable,omitempty"`

			// The slug of the step
			Slug *string `json:"slug,omitempty"`

			// The name of the step
			Title string `json:"title"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the step
		Id   string                            `json:"id"`
		Type RetrospectiveStepResponseDataType `json:"type"`
	} `json:"data"`
}

// RetrospectiveStepResponseDataType defines model for RetrospectiveStepResponse.Data.Type.
type RetrospectiveStepResponseDataType string

// Role defines model for role.
type Role struct {
	ApiKeysPermissions           *[]RoleApiKeysPermissions           `json:"api_keys_permissions,omitempty"`
	AuditsPermissions            *[]RoleAuditsPermissions            `json:"audits_permissions,omitempty"`
	BillingPermissions           *[]RoleBillingPermissions           `json:"billing_permissions,omitempty"`
	CreatedAt                    string                              `json:"created_at"`
	EnvironmentsPermissions      *[]RoleEnvironmentsPermissions      `json:"environments_permissions,omitempty"`
	FormFieldsPermissions        *[]RoleFormFieldsPermissions        `json:"form_fields_permissions,omitempty"`
	FunctionalitiesPermissions   *[]RoleFunctionalitiesPermissions   `json:"functionalities_permissions,omitempty"`
	GroupsPermissions            *[]RoleGroupsPermissions            `json:"groups_permissions,omitempty"`
	IncidentCausesPermissions    *[]RoleIncidentCausesPermissions    `json:"incident_causes_permissions,omitempty"`
	IncidentFeedbacksPermissions *[]RoleIncidentFeedbacksPermissions `json:"incident_feedbacks_permissions,omitempty"`

	// Associated incident permissions set.
	IncidentPermissionSetId        *string                               `json:"incident_permission_set_id"`
	IncidentPostMortemsPermissions *[]RoleIncidentPostMortemsPermissions `json:"incident_post_mortems_permissions,omitempty"`
	IncidentRolesPermissions       *[]RoleIncidentRolesPermissions       `json:"incident_roles_permissions,omitempty"`
	IncidentTypesPermissions       *[]RoleIncidentTypesPermissions       `json:"incident_types_permissions,omitempty"`
	IncidentsPermissions           *[]RoleIncidentsPermissions           `json:"incidents_permissions,omitempty"`
	InvitationsPermissions         *[]RoleInvitationsPermissions         `json:"invitations_permissions,omitempty"`

	// Whether the role can be deleted.
	IsDeletable *bool `json:"is_deletable,omitempty"`

	// Whether the role can be edited.
	IsEditable *bool `json:"is_editable,omitempty"`

	// The role name.
	Name                        string                             `json:"name"`
	PlaybooksPermissions        *[]RolePlaybooksPermissions        `json:"playbooks_permissions,omitempty"`
	PrivateIncidentsPermissions *[]RolePrivateIncidentsPermissions `json:"private_incidents_permissions,omitempty"`
	RetrospectivePermissions    *[]RoleRetrospectivePermissions    `json:"retrospective_permissions,omitempty"`
	RolesPermissions            *[]RoleRolesPermissions            `json:"roles_permissions,omitempty"`
	SecretsPermissions          *[]RoleSecretsPermissions          `json:"secrets_permissions,omitempty"`
	ServicesPermissions         *[]RoleServicesPermissions         `json:"services_permissions,omitempty"`
	SeveritiesPermissions       *[]RoleSeveritiesPermissions       `json:"severities_permissions,omitempty"`

	// The role slug.
	Slug                   string                        `json:"slug"`
	StatusPagesPermissions *[]RoleStatusPagesPermissions `json:"status_pages_permissions,omitempty"`
	UpdatedAt              string                        `json:"updated_at"`
	WebhooksPermissions    *[]RoleWebhooksPermissions    `json:"webhooks_permissions,omitempty"`
	WorkflowsPermissions   *[]RoleWorkflowsPermissions   `json:"workflows_permissions,omitempty"`
}

// RoleApiKeysPermissions defines model for Role.ApiKeysPermissions.
type RoleApiKeysPermissions string

// RoleAuditsPermissions defines model for Role.AuditsPermissions.
type RoleAuditsPermissions string

// RoleBillingPermissions defines model for Role.BillingPermissions.
type RoleBillingPermissions string

// RoleEnvironmentsPermissions defines model for Role.EnvironmentsPermissions.
type RoleEnvironmentsPermissions string

// RoleFormFieldsPermissions defines model for Role.FormFieldsPermissions.
type RoleFormFieldsPermissions string

// RoleFunctionalitiesPermissions defines model for Role.FunctionalitiesPermissions.
type RoleFunctionalitiesPermissions string

// RoleGroupsPermissions defines model for Role.GroupsPermissions.
type RoleGroupsPermissions string

// RoleIncidentCausesPermissions defines model for Role.IncidentCausesPermissions.
type RoleIncidentCausesPermissions string

// RoleIncidentFeedbacksPermissions defines model for Role.IncidentFeedbacksPermissions.
type RoleIncidentFeedbacksPermissions string

// RoleIncidentPostMortemsPermissions defines model for Role.IncidentPostMortemsPermissions.
type RoleIncidentPostMortemsPermissions string

// RoleIncidentRolesPermissions defines model for Role.IncidentRolesPermissions.
type RoleIncidentRolesPermissions string

// RoleIncidentTypesPermissions defines model for Role.IncidentTypesPermissions.
type RoleIncidentTypesPermissions string

// RoleIncidentsPermissions defines model for Role.IncidentsPermissions.
type RoleIncidentsPermissions string

// RoleInvitationsPermissions defines model for Role.InvitationsPermissions.
type RoleInvitationsPermissions string

// RolePlaybooksPermissions defines model for Role.PlaybooksPermissions.
type RolePlaybooksPermissions string

// RolePrivateIncidentsPermissions defines model for Role.PrivateIncidentsPermissions.
type RolePrivateIncidentsPermissions string

// RoleRetrospectivePermissions defines model for Role.RetrospectivePermissions.
type RoleRetrospectivePermissions string

// RoleRolesPermissions defines model for Role.RolesPermissions.
type RoleRolesPermissions string

// RoleSecretsPermissions defines model for Role.SecretsPermissions.
type RoleSecretsPermissions string

// RoleServicesPermissions defines model for Role.ServicesPermissions.
type RoleServicesPermissions string

// RoleSeveritiesPermissions defines model for Role.SeveritiesPermissions.
type RoleSeveritiesPermissions string

// RoleStatusPagesPermissions defines model for Role.StatusPagesPermissions.
type RoleStatusPagesPermissions string

// RoleWebhooksPermissions defines model for Role.WebhooksPermissions.
type RoleWebhooksPermissions string

// RoleWorkflowsPermissions defines model for Role.WorkflowsPermissions.
type RoleWorkflowsPermissions string

// RoleList defines model for role_list.
type RoleList struct {
	Data []struct {
		Attributes struct {
			ApiKeysPermissions           *[]RoleListDataAttributesApiKeysPermissions           `json:"api_keys_permissions,omitempty"`
			AuditsPermissions            *[]RoleListDataAttributesAuditsPermissions            `json:"audits_permissions,omitempty"`
			BillingPermissions           *[]RoleListDataAttributesBillingPermissions           `json:"billing_permissions,omitempty"`
			CreatedAt                    string                                                `json:"created_at"`
			EnvironmentsPermissions      *[]RoleListDataAttributesEnvironmentsPermissions      `json:"environments_permissions,omitempty"`
			FormFieldsPermissions        *[]RoleListDataAttributesFormFieldsPermissions        `json:"form_fields_permissions,omitempty"`
			FunctionalitiesPermissions   *[]RoleListDataAttributesFunctionalitiesPermissions   `json:"functionalities_permissions,omitempty"`
			GroupsPermissions            *[]RoleListDataAttributesGroupsPermissions            `json:"groups_permissions,omitempty"`
			IncidentCausesPermissions    *[]RoleListDataAttributesIncidentCausesPermissions    `json:"incident_causes_permissions,omitempty"`
			IncidentFeedbacksPermissions *[]RoleListDataAttributesIncidentFeedbacksPermissions `json:"incident_feedbacks_permissions,omitempty"`

			// Associated incident permissions set.
			IncidentPermissionSetId        *string                                                 `json:"incident_permission_set_id"`
			IncidentPostMortemsPermissions *[]RoleListDataAttributesIncidentPostMortemsPermissions `json:"incident_post_mortems_permissions,omitempty"`
			IncidentRolesPermissions       *[]RoleListDataAttributesIncidentRolesPermissions       `json:"incident_roles_permissions,omitempty"`
			IncidentTypesPermissions       *[]RoleListDataAttributesIncidentTypesPermissions       `json:"incident_types_permissions,omitempty"`
			IncidentsPermissions           *[]RoleListDataAttributesIncidentsPermissions           `json:"incidents_permissions,omitempty"`
			InvitationsPermissions         *[]RoleListDataAttributesInvitationsPermissions         `json:"invitations_permissions,omitempty"`

			// Whether the role can be deleted.
			IsDeletable *bool `json:"is_deletable,omitempty"`

			// Whether the role can be edited.
			IsEditable *bool `json:"is_editable,omitempty"`

			// The role name.
			Name                        string                                               `json:"name"`
			PlaybooksPermissions        *[]RoleListDataAttributesPlaybooksPermissions        `json:"playbooks_permissions,omitempty"`
			PrivateIncidentsPermissions *[]RoleListDataAttributesPrivateIncidentsPermissions `json:"private_incidents_permissions,omitempty"`
			RetrospectivePermissions    *[]RoleListDataAttributesRetrospectivePermissions    `json:"retrospective_permissions,omitempty"`
			RolesPermissions            *[]RoleListDataAttributesRolesPermissions            `json:"roles_permissions,omitempty"`
			SecretsPermissions          *[]RoleListDataAttributesSecretsPermissions          `json:"secrets_permissions,omitempty"`
			ServicesPermissions         *[]RoleListDataAttributesServicesPermissions         `json:"services_permissions,omitempty"`
			SeveritiesPermissions       *[]RoleListDataAttributesSeveritiesPermissions       `json:"severities_permissions,omitempty"`

			// The role slug.
			Slug                   string                                          `json:"slug"`
			StatusPagesPermissions *[]RoleListDataAttributesStatusPagesPermissions `json:"status_pages_permissions,omitempty"`
			UpdatedAt              string                                          `json:"updated_at"`
			WebhooksPermissions    *[]RoleListDataAttributesWebhooksPermissions    `json:"webhooks_permissions,omitempty"`
			WorkflowsPermissions   *[]RoleListDataAttributesWorkflowsPermissions   `json:"workflows_permissions,omitempty"`
		} `json:"attributes"`

		// Unique ID of the role
		Id   string           `json:"id"`
		Type RoleListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// RoleListDataAttributesApiKeysPermissions defines model for RoleList.Data.Attributes.ApiKeysPermissions.
type RoleListDataAttributesApiKeysPermissions string

// RoleListDataAttributesAuditsPermissions defines model for RoleList.Data.Attributes.AuditsPermissions.
type RoleListDataAttributesAuditsPermissions string

// RoleListDataAttributesBillingPermissions defines model for RoleList.Data.Attributes.BillingPermissions.
type RoleListDataAttributesBillingPermissions string

// RoleListDataAttributesEnvironmentsPermissions defines model for RoleList.Data.Attributes.EnvironmentsPermissions.
type RoleListDataAttributesEnvironmentsPermissions string

// RoleListDataAttributesFormFieldsPermissions defines model for RoleList.Data.Attributes.FormFieldsPermissions.
type RoleListDataAttributesFormFieldsPermissions string

// RoleListDataAttributesFunctionalitiesPermissions defines model for RoleList.Data.Attributes.FunctionalitiesPermissions.
type RoleListDataAttributesFunctionalitiesPermissions string

// RoleListDataAttributesGroupsPermissions defines model for RoleList.Data.Attributes.GroupsPermissions.
type RoleListDataAttributesGroupsPermissions string

// RoleListDataAttributesIncidentCausesPermissions defines model for RoleList.Data.Attributes.IncidentCausesPermissions.
type RoleListDataAttributesIncidentCausesPermissions string

// RoleListDataAttributesIncidentFeedbacksPermissions defines model for RoleList.Data.Attributes.IncidentFeedbacksPermissions.
type RoleListDataAttributesIncidentFeedbacksPermissions string

// RoleListDataAttributesIncidentPostMortemsPermissions defines model for RoleList.Data.Attributes.IncidentPostMortemsPermissions.
type RoleListDataAttributesIncidentPostMortemsPermissions string

// RoleListDataAttributesIncidentRolesPermissions defines model for RoleList.Data.Attributes.IncidentRolesPermissions.
type RoleListDataAttributesIncidentRolesPermissions string

// RoleListDataAttributesIncidentTypesPermissions defines model for RoleList.Data.Attributes.IncidentTypesPermissions.
type RoleListDataAttributesIncidentTypesPermissions string

// RoleListDataAttributesIncidentsPermissions defines model for RoleList.Data.Attributes.IncidentsPermissions.
type RoleListDataAttributesIncidentsPermissions string

// RoleListDataAttributesInvitationsPermissions defines model for RoleList.Data.Attributes.InvitationsPermissions.
type RoleListDataAttributesInvitationsPermissions string

// RoleListDataAttributesPlaybooksPermissions defines model for RoleList.Data.Attributes.PlaybooksPermissions.
type RoleListDataAttributesPlaybooksPermissions string

// RoleListDataAttributesPrivateIncidentsPermissions defines model for RoleList.Data.Attributes.PrivateIncidentsPermissions.
type RoleListDataAttributesPrivateIncidentsPermissions string

// RoleListDataAttributesRetrospectivePermissions defines model for RoleList.Data.Attributes.RetrospectivePermissions.
type RoleListDataAttributesRetrospectivePermissions string

// RoleListDataAttributesRolesPermissions defines model for RoleList.Data.Attributes.RolesPermissions.
type RoleListDataAttributesRolesPermissions string

// RoleListDataAttributesSecretsPermissions defines model for RoleList.Data.Attributes.SecretsPermissions.
type RoleListDataAttributesSecretsPermissions string

// RoleListDataAttributesServicesPermissions defines model for RoleList.Data.Attributes.ServicesPermissions.
type RoleListDataAttributesServicesPermissions string

// RoleListDataAttributesSeveritiesPermissions defines model for RoleList.Data.Attributes.SeveritiesPermissions.
type RoleListDataAttributesSeveritiesPermissions string

// RoleListDataAttributesStatusPagesPermissions defines model for RoleList.Data.Attributes.StatusPagesPermissions.
type RoleListDataAttributesStatusPagesPermissions string

// RoleListDataAttributesWebhooksPermissions defines model for RoleList.Data.Attributes.WebhooksPermissions.
type RoleListDataAttributesWebhooksPermissions string

// RoleListDataAttributesWorkflowsPermissions defines model for RoleList.Data.Attributes.WorkflowsPermissions.
type RoleListDataAttributesWorkflowsPermissions string

// RoleListDataType defines model for RoleList.Data.Type.
type RoleListDataType string

// RoleResponse defines model for role_response.
type RoleResponse struct {
	Data struct {
		Attributes struct {
			ApiKeysPermissions           *[]RoleResponseDataAttributesApiKeysPermissions           `json:"api_keys_permissions,omitempty"`
			AuditsPermissions            *[]RoleResponseDataAttributesAuditsPermissions            `json:"audits_permissions,omitempty"`
			BillingPermissions           *[]RoleResponseDataAttributesBillingPermissions           `json:"billing_permissions,omitempty"`
			CreatedAt                    string                                                    `json:"created_at"`
			EnvironmentsPermissions      *[]RoleResponseDataAttributesEnvironmentsPermissions      `json:"environments_permissions,omitempty"`
			FormFieldsPermissions        *[]RoleResponseDataAttributesFormFieldsPermissions        `json:"form_fields_permissions,omitempty"`
			FunctionalitiesPermissions   *[]RoleResponseDataAttributesFunctionalitiesPermissions   `json:"functionalities_permissions,omitempty"`
			GroupsPermissions            *[]RoleResponseDataAttributesGroupsPermissions            `json:"groups_permissions,omitempty"`
			IncidentCausesPermissions    *[]RoleResponseDataAttributesIncidentCausesPermissions    `json:"incident_causes_permissions,omitempty"`
			IncidentFeedbacksPermissions *[]RoleResponseDataAttributesIncidentFeedbacksPermissions `json:"incident_feedbacks_permissions,omitempty"`

			// Associated incident permissions set.
			IncidentPermissionSetId        *string                                                     `json:"incident_permission_set_id"`
			IncidentPostMortemsPermissions *[]RoleResponseDataAttributesIncidentPostMortemsPermissions `json:"incident_post_mortems_permissions,omitempty"`
			IncidentRolesPermissions       *[]RoleResponseDataAttributesIncidentRolesPermissions       `json:"incident_roles_permissions,omitempty"`
			IncidentTypesPermissions       *[]RoleResponseDataAttributesIncidentTypesPermissions       `json:"incident_types_permissions,omitempty"`
			IncidentsPermissions           *[]RoleResponseDataAttributesIncidentsPermissions           `json:"incidents_permissions,omitempty"`
			InvitationsPermissions         *[]RoleResponseDataAttributesInvitationsPermissions         `json:"invitations_permissions,omitempty"`

			// Whether the role can be deleted.
			IsDeletable *bool `json:"is_deletable,omitempty"`

			// Whether the role can be edited.
			IsEditable *bool `json:"is_editable,omitempty"`

			// The role name.
			Name                        string                                                   `json:"name"`
			PlaybooksPermissions        *[]RoleResponseDataAttributesPlaybooksPermissions        `json:"playbooks_permissions,omitempty"`
			PrivateIncidentsPermissions *[]RoleResponseDataAttributesPrivateIncidentsPermissions `json:"private_incidents_permissions,omitempty"`
			RetrospectivePermissions    *[]RoleResponseDataAttributesRetrospectivePermissions    `json:"retrospective_permissions,omitempty"`
			RolesPermissions            *[]RoleResponseDataAttributesRolesPermissions            `json:"roles_permissions,omitempty"`
			SecretsPermissions          *[]RoleResponseDataAttributesSecretsPermissions          `json:"secrets_permissions,omitempty"`
			ServicesPermissions         *[]RoleResponseDataAttributesServicesPermissions         `json:"services_permissions,omitempty"`
			SeveritiesPermissions       *[]RoleResponseDataAttributesSeveritiesPermissions       `json:"severities_permissions,omitempty"`

			// The role slug.
			Slug                   string                                              `json:"slug"`
			StatusPagesPermissions *[]RoleResponseDataAttributesStatusPagesPermissions `json:"status_pages_permissions,omitempty"`
			UpdatedAt              string                                              `json:"updated_at"`
			WebhooksPermissions    *[]RoleResponseDataAttributesWebhooksPermissions    `json:"webhooks_permissions,omitempty"`
			WorkflowsPermissions   *[]RoleResponseDataAttributesWorkflowsPermissions   `json:"workflows_permissions,omitempty"`
		} `json:"attributes"`

		// Unique ID of the role
		Id   string               `json:"id"`
		Type RoleResponseDataType `json:"type"`
	} `json:"data"`
}

// RoleResponseDataAttributesApiKeysPermissions defines model for RoleResponse.Data.Attributes.ApiKeysPermissions.
type RoleResponseDataAttributesApiKeysPermissions string

// RoleResponseDataAttributesAuditsPermissions defines model for RoleResponse.Data.Attributes.AuditsPermissions.
type RoleResponseDataAttributesAuditsPermissions string

// RoleResponseDataAttributesBillingPermissions defines model for RoleResponse.Data.Attributes.BillingPermissions.
type RoleResponseDataAttributesBillingPermissions string

// RoleResponseDataAttributesEnvironmentsPermissions defines model for RoleResponse.Data.Attributes.EnvironmentsPermissions.
type RoleResponseDataAttributesEnvironmentsPermissions string

// RoleResponseDataAttributesFormFieldsPermissions defines model for RoleResponse.Data.Attributes.FormFieldsPermissions.
type RoleResponseDataAttributesFormFieldsPermissions string

// RoleResponseDataAttributesFunctionalitiesPermissions defines model for RoleResponse.Data.Attributes.FunctionalitiesPermissions.
type RoleResponseDataAttributesFunctionalitiesPermissions string

// RoleResponseDataAttributesGroupsPermissions defines model for RoleResponse.Data.Attributes.GroupsPermissions.
type RoleResponseDataAttributesGroupsPermissions string

// RoleResponseDataAttributesIncidentCausesPermissions defines model for RoleResponse.Data.Attributes.IncidentCausesPermissions.
type RoleResponseDataAttributesIncidentCausesPermissions string

// RoleResponseDataAttributesIncidentFeedbacksPermissions defines model for RoleResponse.Data.Attributes.IncidentFeedbacksPermissions.
type RoleResponseDataAttributesIncidentFeedbacksPermissions string

// RoleResponseDataAttributesIncidentPostMortemsPermissions defines model for RoleResponse.Data.Attributes.IncidentPostMortemsPermissions.
type RoleResponseDataAttributesIncidentPostMortemsPermissions string

// RoleResponseDataAttributesIncidentRolesPermissions defines model for RoleResponse.Data.Attributes.IncidentRolesPermissions.
type RoleResponseDataAttributesIncidentRolesPermissions string

// RoleResponseDataAttributesIncidentTypesPermissions defines model for RoleResponse.Data.Attributes.IncidentTypesPermissions.
type RoleResponseDataAttributesIncidentTypesPermissions string

// RoleResponseDataAttributesIncidentsPermissions defines model for RoleResponse.Data.Attributes.IncidentsPermissions.
type RoleResponseDataAttributesIncidentsPermissions string

// RoleResponseDataAttributesInvitationsPermissions defines model for RoleResponse.Data.Attributes.InvitationsPermissions.
type RoleResponseDataAttributesInvitationsPermissions string

// RoleResponseDataAttributesPlaybooksPermissions defines model for RoleResponse.Data.Attributes.PlaybooksPermissions.
type RoleResponseDataAttributesPlaybooksPermissions string

// RoleResponseDataAttributesPrivateIncidentsPermissions defines model for RoleResponse.Data.Attributes.PrivateIncidentsPermissions.
type RoleResponseDataAttributesPrivateIncidentsPermissions string

// RoleResponseDataAttributesRetrospectivePermissions defines model for RoleResponse.Data.Attributes.RetrospectivePermissions.
type RoleResponseDataAttributesRetrospectivePermissions string

// RoleResponseDataAttributesRolesPermissions defines model for RoleResponse.Data.Attributes.RolesPermissions.
type RoleResponseDataAttributesRolesPermissions string

// RoleResponseDataAttributesSecretsPermissions defines model for RoleResponse.Data.Attributes.SecretsPermissions.
type RoleResponseDataAttributesSecretsPermissions string

// RoleResponseDataAttributesServicesPermissions defines model for RoleResponse.Data.Attributes.ServicesPermissions.
type RoleResponseDataAttributesServicesPermissions string

// RoleResponseDataAttributesSeveritiesPermissions defines model for RoleResponse.Data.Attributes.SeveritiesPermissions.
type RoleResponseDataAttributesSeveritiesPermissions string

// RoleResponseDataAttributesStatusPagesPermissions defines model for RoleResponse.Data.Attributes.StatusPagesPermissions.
type RoleResponseDataAttributesStatusPagesPermissions string

// RoleResponseDataAttributesWebhooksPermissions defines model for RoleResponse.Data.Attributes.WebhooksPermissions.
type RoleResponseDataAttributesWebhooksPermissions string

// RoleResponseDataAttributesWorkflowsPermissions defines model for RoleResponse.Data.Attributes.WorkflowsPermissions.
type RoleResponseDataAttributesWorkflowsPermissions string

// RoleResponseDataType defines model for RoleResponse.Data.Type.
type RoleResponseDataType string

// RunCommandHerokuTaskParams defines model for run_command_heroku_task_params.
type RunCommandHerokuTaskParams struct {
	AppName                string `json:"app_name"`
	Command                string `json:"command"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	Size     RunCommandHerokuTaskParamsSize      `json:"size"`
	TaskType *RunCommandHerokuTaskParamsTaskType `json:"task_type,omitempty"`
}

// RunCommandHerokuTaskParamsSize defines model for RunCommandHerokuTaskParams.Size.
type RunCommandHerokuTaskParamsSize string

// RunCommandHerokuTaskParamsTaskType defines model for RunCommandHerokuTaskParams.TaskType.
type RunCommandHerokuTaskParamsTaskType string

// Secret defines model for secret.
type Secret struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The HashiCorp Vault secret mount path
	HashicorpVaultMount *string `json:"hashicorp_vault_mount,omitempty"`

	// The HashiCorp Vault secret path
	HashicorpVaultPath *string `json:"hashicorp_vault_path"`

	// The HashiCorp Vault secret version
	HashicorpVaultVersion *int `json:"hashicorp_vault_version,omitempty"`

	// The name of the secret
	Name string `json:"name"`

	// The redacted secret
	Secret *string `json:"secret,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// SecretList defines model for secret_list.
type SecretList struct {
	Data []struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The HashiCorp Vault secret mount path
			HashicorpVaultMount *string `json:"hashicorp_vault_mount,omitempty"`

			// The HashiCorp Vault secret path
			HashicorpVaultPath *string `json:"hashicorp_vault_path"`

			// The HashiCorp Vault secret version
			HashicorpVaultVersion *int `json:"hashicorp_vault_version,omitempty"`

			// The name of the secret
			Name string `json:"name"`

			// The redacted secret
			Secret *string `json:"secret,omitempty"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the secret
		Id   string             `json:"id"`
		Type SecretListDataType `json:"type"`
	} `json:"data"`
	Links *struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links,omitempty"`
}

// SecretListDataType defines model for SecretList.Data.Type.
type SecretListDataType string

// SecretResponse defines model for secret_response.
type SecretResponse struct {
	Data struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The HashiCorp Vault secret mount path
			HashicorpVaultMount *string `json:"hashicorp_vault_mount,omitempty"`

			// The HashiCorp Vault secret path
			HashicorpVaultPath *string `json:"hashicorp_vault_path"`

			// The HashiCorp Vault secret version
			HashicorpVaultVersion *int `json:"hashicorp_vault_version,omitempty"`

			// The name of the secret
			Name string `json:"name"`

			// The redacted secret
			Secret *string `json:"secret,omitempty"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the secret
		Id   string                 `json:"id"`
		Type SecretResponseDataType `json:"type"`
	} `json:"data"`
}

// SecretResponseDataType defines model for SecretResponse.Data.Type.
type SecretResponseDataType string

// SendDashboardReportTaskParams defines model for send_dashboard_report_task_params.
type SendDashboardReportTaskParams struct {
	// The email body
	Body         *string  `json:"body"`
	DashboardIds []string `json:"dashboard_ids"`

	// The from email address. Need to use SMTP integration if different than rootly.com
	From *string `json:"from,omitempty"`

	// The preheader
	Preheader *string `json:"preheader"`

	// The subject
	Subject  string                                 `json:"subject"`
	TaskType *SendDashboardReportTaskParamsTaskType `json:"task_type,omitempty"`
	To       []string                               `json:"to"`
}

// SendDashboardReportTaskParamsTaskType defines model for SendDashboardReportTaskParams.TaskType.
type SendDashboardReportTaskParamsTaskType string

// SendEmailTaskParams defines model for send_email_task_params.
type SendEmailTaskParams struct {
	Bcc *[]string `json:"bcc,omitempty"`

	// The email body
	Body *string   `json:"body"`
	Cc   *[]string `json:"cc,omitempty"`

	// URL to your custom email logo
	CustomLogoUrl *string `json:"custom_logo_url"`

	// The from email address. Need to use SMTP integration if different than rootly.com
	From          *string `json:"from,omitempty"`
	IncludeFooter *bool   `json:"include_footer,omitempty"`
	IncludeHeader *bool   `json:"include_header,omitempty"`

	// The preheader
	Preheader *string `json:"preheader"`

	// The subject
	Subject  string                       `json:"subject"`
	TaskType *SendEmailTaskParamsTaskType `json:"task_type,omitempty"`
	To       []string                     `json:"to"`
}

// SendEmailTaskParamsTaskType defines model for SendEmailTaskParams.TaskType.
type SendEmailTaskParamsTaskType string

// SendSlackBlocksTaskParams defines model for send_slack_blocks_task_params.
type SendSlackBlocksTaskParams struct {
	// Support liquid markup. Needs to be a valid JSON string after liquid is parsed
	Attachments *string `json:"attachments,omitempty"`

	// Support liquid markup. Needs to be a valid JSON string after liquid is parsed
	Blocks                        string `json:"blocks"`
	BroadcastThreadReplyToChannel *bool  `json:"broadcast_thread_reply_to_channel,omitempty"`
	Channels                      *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channels,omitempty"`
	Message *string `json:"message,omitempty"`

	// A hash where [id] is the task id of the parent task that sent a message, and [name] is the name of the parent task
	ParentMessageThreadTask *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_message_thread_task,omitempty"`
	PinToChannel    *bool `json:"pin_to_channel,omitempty"`
	SendAsEphemeral *bool `json:"send_as_ephemeral,omitempty"`
	SlackUserGroups *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"slack_user_groups,omitempty"`
	SlackUsers *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"slack_users,omitempty"`
	TaskType            *SendSlackBlocksTaskParamsTaskType `json:"task_type,omitempty"`
	UpdateParentMessage *bool                              `json:"update_parent_message,omitempty"`
}

// SendSlackBlocksTaskParamsTaskType defines model for SendSlackBlocksTaskParams.TaskType.
type SendSlackBlocksTaskParamsTaskType string

// SendSlackMessageTaskParams defines model for send_slack_message_task_params.
type SendSlackMessageTaskParams struct {
	Actionables                   *[]SendSlackMessageTaskParamsActionables `json:"actionables,omitempty"`
	BroadcastThreadReplyToChannel *bool                                    `json:"broadcast_thread_reply_to_channel,omitempty"`
	Channels                      *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channels,omitempty"`

	// A hex color ex. #FFFFFF
	Color *string `json:"color,omitempty"`

	// A hash where [id] is the task id of the parent task that sent a message, and [name] is the name of the parent task
	ParentMessageThreadTask *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_message_thread_task,omitempty"`
	PinToChannel    *bool `json:"pin_to_channel,omitempty"`
	SendAsEphemeral *bool `json:"send_as_ephemeral,omitempty"`
	SlackUserGroups *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"slack_user_groups,omitempty"`
	SlackUsers *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"slack_users,omitempty"`
	TaskType *SendSlackMessageTaskParamsTaskType `json:"task_type,omitempty"`

	// The message text
	Text                string `json:"text"`
	UpdateParentMessage *bool  `json:"update_parent_message,omitempty"`
}

// SendSlackMessageTaskParamsActionables defines model for SendSlackMessageTaskParams.Actionables.
type SendSlackMessageTaskParamsActionables string

// SendSlackMessageTaskParamsTaskType defines model for SendSlackMessageTaskParams.TaskType.
type SendSlackMessageTaskParamsTaskType string

// SendSmsTaskParams defines model for send_sms_task_params.
type SendSmsTaskParams struct {
	// The SMS message
	Content string `json:"content"`

	// The name
	Name         string                     `json:"name"`
	PhoneNumbers []string                   `json:"phone_numbers"`
	TaskType     *SendSmsTaskParamsTaskType `json:"task_type,omitempty"`
}

// SendSmsTaskParamsTaskType defines model for SendSmsTaskParams.TaskType.
type SendSmsTaskParamsTaskType string

// SendWhatsappMessageTaskParams defines model for send_whatsapp_message_task_params.
type SendWhatsappMessageTaskParams struct {
	// The WhatsApp message
	Content string `json:"content"`

	// The name
	Name         string                                 `json:"name"`
	PhoneNumbers []string                               `json:"phone_numbers"`
	TaskType     *SendWhatsappMessageTaskParamsTaskType `json:"task_type,omitempty"`
}

// SendWhatsappMessageTaskParamsTaskType defines model for SendWhatsappMessageTaskParams.TaskType.
type SendWhatsappMessageTaskParamsTaskType string

// Service defines model for service.
type Service struct {
	// The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
	BackstageId *string `json:"backstage_id"`

	// The hex color of the service
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the service
	Description *string `json:"description"`

	// Environments associated with this service
	EnvironmentIds *[]string `json:"environment_ids"`

	// The GitHub repository branch associated to this service. eg: main
	GithubRepositoryBranch *string `json:"github_repository_branch"`

	// The GitHub repository name associated to this service. eg: rootlyhq/my-service
	GithubRepositoryName *string `json:"github_repository_name"`

	// The Gitlab repository branch associated to this service. eg: main
	GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

	// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
	GitlabRepositoryName *string `json:"gitlab_repository_name"`

	// The name of the service
	Name string `json:"name"`

	// Emails attached to the service
	NotifyEmails *[]string `json:"notify_emails"`

	// The Opsgenie service id associated to this service
	OpsgenieId *string `json:"opsgenie_id"`

	// Owner Teams associated with this service
	OwnersGroupIds *[]string `json:"owners_group_ids"`

	// Owner Users associated with this service
	OwnersUserIds *[]int `json:"owners_user_ids"`

	// The PagerDuty service id associated to this service
	PagerdutyId *string `json:"pagerduty_id"`

	// Position of the service
	Position *int `json:"position"`

	// The public description of the service
	PublicDescription *string `json:"public_description"`

	// Services dependent on this service
	ServiceIds *[]string `json:"service_ids"`

	// Slack Aliases associated with this service
	SlackAliases *[]struct {
		// Slack alias ID
		Id string `json:"id"`

		// Slack alias name
		Name string `json:"name"`
	} `json:"slack_aliases"`

	// Slack Channels associated with this service
	SlackChannels *[]struct {
		// Slack channel ID
		Id string `json:"id"`

		// Slack channel name
		Name string `json:"name"`
	} `json:"slack_channels"`

	// The slug of the service
	Slug *string `json:"slug,omitempty"`

	// The status of the service
	Status *ServiceStatus `json:"status,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The status of the service
type ServiceStatus string

// ServiceList defines model for service_list.
type ServiceList struct {
	Data []struct {
		Attributes struct {
			// The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
			BackstageId *string `json:"backstage_id"`

			// The hex color of the service
			Color *string `json:"color"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the service
			Description *string `json:"description"`

			// Environments associated with this service
			EnvironmentIds *[]string `json:"environment_ids"`

			// The GitHub repository branch associated to this service. eg: main
			GithubRepositoryBranch *string `json:"github_repository_branch"`

			// The GitHub repository name associated to this service. eg: rootlyhq/my-service
			GithubRepositoryName *string `json:"github_repository_name"`

			// The Gitlab repository branch associated to this service. eg: main
			GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

			// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
			GitlabRepositoryName *string `json:"gitlab_repository_name"`

			// The name of the service
			Name string `json:"name"`

			// Emails attached to the service
			NotifyEmails *[]string `json:"notify_emails"`

			// The Opsgenie service id associated to this service
			OpsgenieId *string `json:"opsgenie_id"`

			// Owner Teams associated with this service
			OwnersGroupIds *[]string `json:"owners_group_ids"`

			// Owner Users associated with this service
			OwnersUserIds *[]int `json:"owners_user_ids"`

			// The PagerDuty service id associated to this service
			PagerdutyId *string `json:"pagerduty_id"`

			// Position of the service
			Position *int `json:"position"`

			// The public description of the service
			PublicDescription *string `json:"public_description"`

			// Services dependent on this service
			ServiceIds *[]string `json:"service_ids"`

			// Slack Aliases associated with this service
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this service
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`

			// The slug of the service
			Slug *string `json:"slug,omitempty"`

			// The status of the service
			Status *ServiceListDataAttributesStatus `json:"status,omitempty"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the service
		Id   string              `json:"id"`
		Type ServiceListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The status of the service
type ServiceListDataAttributesStatus string

// ServiceListDataType defines model for ServiceList.Data.Type.
type ServiceListDataType string

// ServiceResponse defines model for service_response.
type ServiceResponse struct {
	Data struct {
		Attributes struct {
			// The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
			BackstageId *string `json:"backstage_id"`

			// The hex color of the service
			Color *string `json:"color"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the service
			Description *string `json:"description"`

			// Environments associated with this service
			EnvironmentIds *[]string `json:"environment_ids"`

			// The GitHub repository branch associated to this service. eg: main
			GithubRepositoryBranch *string `json:"github_repository_branch"`

			// The GitHub repository name associated to this service. eg: rootlyhq/my-service
			GithubRepositoryName *string `json:"github_repository_name"`

			// The Gitlab repository branch associated to this service. eg: main
			GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

			// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
			GitlabRepositoryName *string `json:"gitlab_repository_name"`

			// The name of the service
			Name string `json:"name"`

			// Emails attached to the service
			NotifyEmails *[]string `json:"notify_emails"`

			// The Opsgenie service id associated to this service
			OpsgenieId *string `json:"opsgenie_id"`

			// Owner Teams associated with this service
			OwnersGroupIds *[]string `json:"owners_group_ids"`

			// Owner Users associated with this service
			OwnersUserIds *[]int `json:"owners_user_ids"`

			// The PagerDuty service id associated to this service
			PagerdutyId *string `json:"pagerduty_id"`

			// Position of the service
			Position *int `json:"position"`

			// The public description of the service
			PublicDescription *string `json:"public_description"`

			// Services dependent on this service
			ServiceIds *[]string `json:"service_ids"`

			// Slack Aliases associated with this service
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this service
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`

			// The slug of the service
			Slug *string `json:"slug,omitempty"`

			// The status of the service
			Status *ServiceResponseDataAttributesStatus `json:"status,omitempty"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the service
		Id   string                  `json:"id"`
		Type ServiceResponseDataType `json:"type"`
	} `json:"data"`
}

// The status of the service
type ServiceResponseDataAttributesStatus string

// ServiceResponseDataType defines model for ServiceResponse.Data.Type.
type ServiceResponseDataType string

// Severity defines model for severity.
type Severity struct {
	// The hex color of the severity
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the severity
	Description *string `json:"description"`

	// The name of the severity
	Name string `json:"name"`

	// Emails to attach to the severity
	NotifyEmails *[]string `json:"notify_emails"`

	// Position of the severity
	Position *int `json:"position"`

	// The severity of the severity
	Severity *SeveritySeverity `json:"severity,omitempty"`

	// Slack Aliases associated with this severity
	SlackAliases *[]struct {
		// Slack alias ID
		Id string `json:"id"`

		// Slack alias name
		Name string `json:"name"`
	} `json:"slack_aliases"`

	// Slack Channels associated with this severity
	SlackChannels *[]struct {
		// Slack channel ID
		Id string `json:"id"`

		// Slack channel name
		Name string `json:"name"`
	} `json:"slack_channels"`

	// The slug of the severity
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The severity of the severity
type SeveritySeverity string

// SeverityList defines model for severity_list.
type SeverityList struct {
	Data []struct {
		Attributes struct {
			// The hex color of the severity
			Color *string `json:"color"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the severity
			Description *string `json:"description"`

			// The name of the severity
			Name string `json:"name"`

			// Emails to attach to the severity
			NotifyEmails *[]string `json:"notify_emails"`

			// Position of the severity
			Position *int `json:"position"`

			// The severity of the severity
			Severity *SeverityListDataAttributesSeverity `json:"severity,omitempty"`

			// Slack Aliases associated with this severity
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this severity
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`

			// The slug of the severity
			Slug *string `json:"slug,omitempty"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the severity
		Id   string               `json:"id"`
		Type SeverityListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The severity of the severity
type SeverityListDataAttributesSeverity string

// SeverityListDataType defines model for SeverityList.Data.Type.
type SeverityListDataType string

// SeverityResponse defines model for severity_response.
type SeverityResponse struct {
	Data struct {
		Attributes struct {
			// The hex color of the severity
			Color *string `json:"color"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the severity
			Description *string `json:"description"`

			// The name of the severity
			Name string `json:"name"`

			// Emails to attach to the severity
			NotifyEmails *[]string `json:"notify_emails"`

			// Position of the severity
			Position *int `json:"position"`

			// The severity of the severity
			Severity *SeverityResponseDataAttributesSeverity `json:"severity,omitempty"`

			// Slack Aliases associated with this severity
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this severity
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`

			// The slug of the severity
			Slug *string `json:"slug,omitempty"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the severity
		Id   string                   `json:"id"`
		Type SeverityResponseDataType `json:"type"`
	} `json:"data"`
}

// The severity of the severity
type SeverityResponseDataAttributesSeverity string

// SeverityResponseDataType defines model for SeverityResponse.Data.Type.
type SeverityResponseDataType string

// SimpleTriggerParams defines model for simple_trigger_params.
type SimpleTriggerParams struct {
	TriggerType SimpleTriggerParamsTriggerType `json:"trigger_type"`
	Triggers    *[]SimpleTriggerParamsTriggers `json:"triggers,omitempty"`
}

// SimpleTriggerParamsTriggerType defines model for SimpleTriggerParams.TriggerType.
type SimpleTriggerParamsTriggerType string

// Actions that trigger the workflow
type SimpleTriggerParamsTriggers string

// SnapshotDatadogGraphTaskParams defines model for snapshot_datadog_graph_task_params.
type SnapshotDatadogGraphTaskParams struct {
	Dashboards *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"dashboards,omitempty"`
	MetricQueries *[]string `json:"metric_queries,omitempty"`

	// in format '1 minute', '30 days', '3 months', etc
	PastDuration           string `json:"past_duration"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *SnapshotDatadogGraphTaskParamsTaskType `json:"task_type,omitempty"`
}

// SnapshotDatadogGraphTaskParamsTaskType defines model for SnapshotDatadogGraphTaskParams.TaskType.
type SnapshotDatadogGraphTaskParamsTaskType string

// SnapshotGrafanaDashboardTaskParams defines model for snapshot_grafana_dashboard_task_params.
type SnapshotGrafanaDashboardTaskParams struct {
	Dashboards []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"dashboards"`
	PostToIncidentTimeline *bool `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *SnapshotGrafanaDashboardTaskParamsTaskType `json:"task_type,omitempty"`
}

// SnapshotGrafanaDashboardTaskParamsTaskType defines model for SnapshotGrafanaDashboardTaskParams.TaskType.
type SnapshotGrafanaDashboardTaskParamsTaskType string

// SnapshotLookerLookTaskParams defines model for snapshot_looker_look_task_params.
type SnapshotLookerLookTaskParams struct {
	Dashboards []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"dashboards"`
	PostToIncidentTimeline *bool `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *SnapshotLookerLookTaskParamsTaskType `json:"task_type,omitempty"`
}

// SnapshotLookerLookTaskParamsTaskType defines model for SnapshotLookerLookTaskParams.TaskType.
type SnapshotLookerLookTaskParamsTaskType string

// SnapshotNewRelicGraphTaskParams defines model for snapshot_new_relic_graph_task_params.
type SnapshotNewRelicGraphTaskParams struct {
	MetricQuery            string                                    `json:"metric_query"`
	MetricType             SnapshotNewRelicGraphTaskParamsMetricType `json:"metric_type"`
	PostToIncidentTimeline *bool                                     `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *SnapshotNewRelicGraphTaskParamsTaskType `json:"task_type,omitempty"`
}

// SnapshotNewRelicGraphTaskParamsMetricType defines model for SnapshotNewRelicGraphTaskParams.MetricType.
type SnapshotNewRelicGraphTaskParamsMetricType string

// SnapshotNewRelicGraphTaskParamsTaskType defines model for SnapshotNewRelicGraphTaskParams.TaskType.
type SnapshotNewRelicGraphTaskParamsTaskType string

// StatusPage defines model for status_page.
type StatusPage struct {
	// Allow search engines to include your public status page in search results
	AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

	// Enable authentication
	AuthenticationEnabled *bool `json:"authentication_enabled"`

	// Authentication password
	AuthenticationPassword *string `json:"authentication_password"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the status page
	Description *string `json:"description"`

	// Enabled / Disable the status page
	Enabled *bool `json:"enabled"`

	// Message showing when at least one component is not operational
	FailureMessage *string `json:"failure_message"`

	// The color of the footer. Eg. "#1F2F41"
	FooterColor *string `json:"footer_color"`

	// Functionalities attached to the status page
	FunctionalityIds *[]string `json:"functionality_ids,omitempty"`

	// Google Analytics tracking ID
	GaTrackingId *string `json:"ga_tracking_id"`

	// The color of the header. Eg. "#0061F2"
	HeaderColor *string `json:"header_color"`

	// Make the status page accessible to the public
	Public *bool `json:"public"`

	// The public description of the status page
	PublicDescription *string `json:"public_description"`

	// The public title of the status page
	PublicTitle *string `json:"public_title"`

	// Services attached to the status page
	ServiceIds *[]string `json:"service_ids,omitempty"`

	// Show uptime
	ShowUptime *bool `json:"show_uptime"`

	// Show uptime over x days
	ShowUptimeLastDays *StatusPageShowUptimeLastDays `json:"show_uptime_last_days"`

	// Message showing when all components are operational
	SuccessMessage *string `json:"success_message"`

	// Status Page Timezone
	TimeZone *StatusPageTimeZone `json:"time_zone"`

	// The title of the status page
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// Website Privacy URL
	WebsitePrivacyUrl *string `json:"website_privacy_url"`

	// Website Support URL
	WebsiteSupportUrl *string `json:"website_support_url"`

	// Website URL
	WebsiteUrl *string `json:"website_url"`
}

// Show uptime over x days
type StatusPageShowUptimeLastDays int

// Status Page Timezone
type StatusPageTimeZone string

// StatusPageList defines model for status_page_list.
type StatusPageList struct {
	Data []struct {
		Attributes struct {
			// Allow search engines to include your public status page in search results
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// Enable authentication
			AuthenticationEnabled *bool `json:"authentication_enabled"`

			// Authentication password
			AuthenticationPassword *string `json:"authentication_password"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the status page
			Description *string `json:"description"`

			// Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// Message showing when at least one component is not operational
			FailureMessage *string `json:"failure_message"`

			// The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// Functionalities attached to the status page
			FunctionalityIds *[]string `json:"functionality_ids,omitempty"`

			// Google Analytics tracking ID
			GaTrackingId *string `json:"ga_tracking_id"`

			// The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Make the status page accessible to the public
			Public *bool `json:"public"`

			// The public description of the status page
			PublicDescription *string `json:"public_description"`

			// The public title of the status page
			PublicTitle *string `json:"public_title"`

			// Services attached to the status page
			ServiceIds *[]string `json:"service_ids,omitempty"`

			// Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// Show uptime over x days
			ShowUptimeLastDays *StatusPageListDataAttributesShowUptimeLastDays `json:"show_uptime_last_days"`

			// Message showing when all components are operational
			SuccessMessage *string `json:"success_message"`

			// Status Page Timezone
			TimeZone *StatusPageListDataAttributesTimeZone `json:"time_zone"`

			// The title of the status page
			Title string `json:"title"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`

			// Website Privacy URL
			WebsitePrivacyUrl *string `json:"website_privacy_url"`

			// Website Support URL
			WebsiteSupportUrl *string `json:"website_support_url"`

			// Website URL
			WebsiteUrl *string `json:"website_url"`
		} `json:"attributes"`

		// Unique ID of the status page
		Id   string                 `json:"id"`
		Type StatusPageListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// Show uptime over x days
type StatusPageListDataAttributesShowUptimeLastDays int

// Status Page Timezone
type StatusPageListDataAttributesTimeZone string

// StatusPageListDataType defines model for StatusPageList.Data.Type.
type StatusPageListDataType string

// StatusPageResponse defines model for status_page_response.
type StatusPageResponse struct {
	Data struct {
		Attributes struct {
			// Allow search engines to include your public status page in search results
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// Enable authentication
			AuthenticationEnabled *bool `json:"authentication_enabled"`

			// Authentication password
			AuthenticationPassword *string `json:"authentication_password"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the status page
			Description *string `json:"description"`

			// Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// Message showing when at least one component is not operational
			FailureMessage *string `json:"failure_message"`

			// The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// Functionalities attached to the status page
			FunctionalityIds *[]string `json:"functionality_ids,omitempty"`

			// Google Analytics tracking ID
			GaTrackingId *string `json:"ga_tracking_id"`

			// The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Make the status page accessible to the public
			Public *bool `json:"public"`

			// The public description of the status page
			PublicDescription *string `json:"public_description"`

			// The public title of the status page
			PublicTitle *string `json:"public_title"`

			// Services attached to the status page
			ServiceIds *[]string `json:"service_ids,omitempty"`

			// Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// Show uptime over x days
			ShowUptimeLastDays *StatusPageResponseDataAttributesShowUptimeLastDays `json:"show_uptime_last_days"`

			// Message showing when all components are operational
			SuccessMessage *string `json:"success_message"`

			// Status Page Timezone
			TimeZone *StatusPageResponseDataAttributesTimeZone `json:"time_zone"`

			// The title of the status page
			Title string `json:"title"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`

			// Website Privacy URL
			WebsitePrivacyUrl *string `json:"website_privacy_url"`

			// Website Support URL
			WebsiteSupportUrl *string `json:"website_support_url"`

			// Website URL
			WebsiteUrl *string `json:"website_url"`
		} `json:"attributes"`

		// Unique ID of the status page
		Id   string                     `json:"id"`
		Type StatusPageResponseDataType `json:"type"`
	} `json:"data"`
}

// Show uptime over x days
type StatusPageResponseDataAttributesShowUptimeLastDays int

// Status Page Timezone
type StatusPageResponseDataAttributesTimeZone string

// StatusPageResponseDataType defines model for StatusPageResponse.Data.Type.
type StatusPageResponseDataType string

// StatusPageTemplate defines model for status_page_template.
type StatusPageTemplate struct {
	// Description of the event the template will populate
	Body string `json:"body"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Enable / Disable the status page template
	Enabled *bool `json:"enabled"`

	// The kind of the status page template
	Kind *StatusPageTemplateKind `json:"kind,omitempty"`

	// Position of the workflow task
	Position *float32 `json:"position,omitempty"`

	// Controls if incident subscribers should be notified
	ShouldNotifySubscribers *bool  `json:"should_notify_subscribers"`
	StatusPageId            string `json:"status_page_id"`

	// Title of the template
	Title string `json:"title"`

	// Status of the event the template will populate
	UpdateStatus *string `json:"update_status"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The kind of the status page template
type StatusPageTemplateKind string

// StatusPageTemplateList defines model for status_page_template_list.
type StatusPageTemplateList struct {
	Data []struct {
		Attributes struct {
			// Description of the event the template will populate
			Body string `json:"body"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// Enable / Disable the status page template
			Enabled *bool `json:"enabled"`

			// The kind of the status page template
			Kind *StatusPageTemplateListDataAttributesKind `json:"kind,omitempty"`

			// Position of the workflow task
			Position *float32 `json:"position,omitempty"`

			// Controls if incident subscribers should be notified
			ShouldNotifySubscribers *bool  `json:"should_notify_subscribers"`
			StatusPageId            string `json:"status_page_id"`

			// Title of the template
			Title string `json:"title"`

			// Status of the event the template will populate
			UpdateStatus *string `json:"update_status"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the template
		Id   string                         `json:"id"`
		Type StatusPageTemplateListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The kind of the status page template
type StatusPageTemplateListDataAttributesKind string

// StatusPageTemplateListDataType defines model for StatusPageTemplateList.Data.Type.
type StatusPageTemplateListDataType string

// StatusPageTemplateResponse defines model for status_page_template_response.
type StatusPageTemplateResponse struct {
	Data struct {
		Attributes struct {
			// Description of the event the template will populate
			Body string `json:"body"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// Enable / Disable the status page template
			Enabled *bool `json:"enabled"`

			// The kind of the status page template
			Kind *StatusPageTemplateResponseDataAttributesKind `json:"kind,omitempty"`

			// Position of the workflow task
			Position *float32 `json:"position,omitempty"`

			// Controls if incident subscribers should be notified
			ShouldNotifySubscribers *bool  `json:"should_notify_subscribers"`
			StatusPageId            string `json:"status_page_id"`

			// Title of the template
			Title string `json:"title"`

			// Status of the event the template will populate
			UpdateStatus *string `json:"update_status"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the status page template
		Id   string                             `json:"id"`
		Type StatusPageTemplateResponseDataType `json:"type"`
	} `json:"data"`
}

// The kind of the status page template
type StatusPageTemplateResponseDataAttributesKind string

// StatusPageTemplateResponseDataType defines model for StatusPageTemplateResponse.Data.Type.
type StatusPageTemplateResponseDataType string

// Team defines model for team.
type Team struct {
	// The hex color of the team
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the team
	Description *string `json:"description"`

	// The name of the team
	Name string `json:"name"`

	// Emails to attach to the team
	NotifyEmails *[]string `json:"notify_emails"`

	// The Opsgenie group id associated to this team
	OpsgenieId *string `json:"opsgenie_id"`

	// The PagerDuty group id associated to this team
	PagerdutyId *string `json:"pagerduty_id"`

	// The PagerTree group id associated to this team
	PagertreeId *string `json:"pagertree_id"`

	// Position of the team
	Position *int `json:"position"`

	// Slack Aliases associated with this service
	SlackAliases *[]struct {
		// Slack alias ID
		Id string `json:"id"`

		// Slack alias name
		Name string `json:"name"`
	} `json:"slack_aliases"`

	// Slack Channels associated with this service
	SlackChannels *[]struct {
		// Slack channel ID
		Id string `json:"id"`

		// Slack channel name
		Name string `json:"name"`
	} `json:"slack_channels"`
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The User ID's members of this team
	UserIds *[]int `json:"user_ids"`

	// The VictorOps group id associated to this team
	VictorOpsId *string `json:"victor_ops_id"`
}

// TeamList defines model for team_list.
type TeamList struct {
	Data []struct {
		Attributes struct {
			// The hex color of the team
			Color *string `json:"color"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the team
			Description *string `json:"description"`

			// The name of the team
			Name string `json:"name"`

			// Emails to attach to the team
			NotifyEmails *[]string `json:"notify_emails"`

			// The Opsgenie group id associated to this team
			OpsgenieId *string `json:"opsgenie_id"`

			// The PagerDuty group id associated to this team
			PagerdutyId *string `json:"pagerduty_id"`

			// The PagerTree group id associated to this team
			PagertreeId *string `json:"pagertree_id"`

			// Position of the team
			Position *int `json:"position"`

			// Slack Aliases associated with this service
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this service
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
			Slug *string `json:"slug,omitempty"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`

			// The User ID's members of this team
			UserIds *[]int `json:"user_ids"`

			// The VictorOps group id associated to this team
			VictorOpsId *string `json:"victor_ops_id"`
		} `json:"attributes"`

		// Unique ID of the team
		Id   string           `json:"id"`
		Type TeamListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// TeamListDataType defines model for TeamList.Data.Type.
type TeamListDataType string

// TeamResponse defines model for team_response.
type TeamResponse struct {
	Data struct {
		Attributes struct {
			// The hex color of the team
			Color *string `json:"color"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the team
			Description *string `json:"description"`

			// The name of the team
			Name string `json:"name"`

			// Emails to attach to the team
			NotifyEmails *[]string `json:"notify_emails"`

			// The Opsgenie group id associated to this team
			OpsgenieId *string `json:"opsgenie_id"`

			// The PagerDuty group id associated to this team
			PagerdutyId *string `json:"pagerduty_id"`

			// The PagerTree group id associated to this team
			PagertreeId *string `json:"pagertree_id"`

			// Position of the team
			Position *int `json:"position"`

			// Slack Aliases associated with this service
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this service
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
			Slug *string `json:"slug,omitempty"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`

			// The User ID's members of this team
			UserIds *[]int `json:"user_ids"`

			// The VictorOps group id associated to this team
			VictorOpsId *string `json:"victor_ops_id"`
		} `json:"attributes"`

		// Unique ID of the team
		Id   string               `json:"id"`
		Type TeamResponseDataType `json:"type"`
	} `json:"data"`
}

// TeamResponseDataType defines model for TeamResponse.Data.Type.
type TeamResponseDataType string

// TriggerWorkflowTaskParams defines model for trigger_workflow_task_params.
type TriggerWorkflowTaskParams struct {
	CheckWorkflowConditions *bool                         `json:"check_workflow_conditions,omitempty"`
	Kind                    TriggerWorkflowTaskParamsKind `json:"kind"`
	Resource                struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"resource"`
	TaskType *TriggerWorkflowTaskParamsTaskType `json:"task_type,omitempty"`
	Workflow struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"workflow"`
}

// TriggerWorkflowTaskParamsKind defines model for TriggerWorkflowTaskParams.Kind.
type TriggerWorkflowTaskParamsKind string

// TriggerWorkflowTaskParamsTaskType defines model for TriggerWorkflowTaskParams.TaskType.
type TriggerWorkflowTaskParamsTaskType string

// TweetTwitterMessageTaskParams defines model for tweet_twitter_message_task_params.
type TweetTwitterMessageTaskParams struct {
	Message  string                                 `json:"message"`
	TaskType *TweetTwitterMessageTaskParamsTaskType `json:"task_type,omitempty"`
}

// TweetTwitterMessageTaskParamsTaskType defines model for TweetTwitterMessageTaskParams.TaskType.
type TweetTwitterMessageTaskParamsTaskType string

// UnassignRoleFromUser defines model for unassign_role_from_user.
type UnassignRoleFromUser struct {
	Data struct {
		Attributes struct {
			// ID of the incident role
			IncidentRoleId *string `json:"incident_role_id,omitempty"`

			// ID of user you wish to remove as assigned user from this incident
			UserId *string `json:"user_id,omitempty"`
		} `json:"attributes"`
		Type UnassignRoleFromUserDataType `json:"type"`
	} `json:"data"`
}

// UnassignRoleFromUserDataType defines model for UnassignRoleFromUser.Data.Type.
type UnassignRoleFromUserDataType string

// UpdateActionItemTaskParams defines model for update_action_item_task_params.
type UpdateActionItemTaskParams struct {
	//  The user this action item is assigned to
	AssignedToUser *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"assigned_to_user,omitempty"`

	// [DEPRECATED] Use assigned_to_user attribute instead. The user id this action item is assigned to
	AssignedToUserId *string `json:"assigned_to_user_id,omitempty"`

	// Attribute of the action item to match against
	AttributeToQueryBy UpdateActionItemTaskParamsAttributeToQueryBy `json:"attribute_to_query_by"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The action item description
	Description            *string   `json:"description,omitempty"`
	GroupIds               *[]string `json:"group_ids"`
	PostToIncidentTimeline *bool     `json:"post_to_incident_timeline,omitempty"`

	// The action item priority
	Priority *UpdateActionItemTaskParamsPriority `json:"priority,omitempty"`

	// Value that attribute_to_query_by to uses to match against
	QueryValue string `json:"query_value"`

	// The action item status
	Status *UpdateActionItemTaskParamsStatus `json:"status,omitempty"`

	// Brief description of the action item
	Summary  *string                             `json:"summary,omitempty"`
	TaskType *UpdateActionItemTaskParamsTaskType `json:"task_type,omitempty"`
}

// Attribute of the action item to match against
type UpdateActionItemTaskParamsAttributeToQueryBy string

// The action item priority
type UpdateActionItemTaskParamsPriority string

// The action item status
type UpdateActionItemTaskParamsStatus string

// UpdateActionItemTaskParamsTaskType defines model for UpdateActionItemTaskParams.TaskType.
type UpdateActionItemTaskParamsTaskType string

// UpdateAirtableTableRecordTaskParams defines model for update_airtable_table_record_task_params.
type UpdateAirtableTableRecordTaskParams struct {
	// The base key
	BaseKey string `json:"base_key"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The record id
	RecordId string `json:"record_id"`

	// The table name
	TableName string                                       `json:"table_name"`
	TaskType  *UpdateAirtableTableRecordTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateAirtableTableRecordTaskParamsTaskType defines model for UpdateAirtableTableRecordTaskParams.TaskType.
type UpdateAirtableTableRecordTaskParamsTaskType string

// UpdateAsanaTaskTaskParams defines model for update_asana_task_task_params.
type UpdateAsanaTaskTaskParams struct {
	// The assigned user's email
	AssignUserEmail *string `json:"assign_user_email,omitempty"`
	Completion      struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string                                       `json:"custom_fields_mapping"`
	DependencyDirection *UpdateAsanaTaskTaskParamsDependencyDirection `json:"dependency_direction,omitempty"`

	// Dependent task ids. Supports liquid syntax
	DependentTaskIds *[]string `json:"dependent_task_ids"`

	// The due date
	DueDate *string `json:"due_date,omitempty"`
	Notes   *string `json:"notes,omitempty"`

	// The task id
	TaskId   string                             `json:"task_id"`
	TaskType *UpdateAsanaTaskTaskParamsTaskType `json:"task_type,omitempty"`

	// The task title
	Title *string `json:"title,omitempty"`
}

// UpdateAsanaTaskTaskParamsDependencyDirection defines model for UpdateAsanaTaskTaskParams.DependencyDirection.
type UpdateAsanaTaskTaskParamsDependencyDirection string

// UpdateAsanaTaskTaskParamsTaskType defines model for UpdateAsanaTaskTaskParams.TaskType.
type UpdateAsanaTaskTaskParamsTaskType string

// UpdateAuthorization defines model for update_authorization.
type UpdateAuthorization struct {
	Data struct {
		Attributes struct {
			Permissions *[]UpdateAuthorizationDataAttributesPermissions `json:"permissions,omitempty"`
		} `json:"attributes"`
		Type UpdateAuthorizationDataType `json:"type"`
	} `json:"data"`
}

// UpdateAuthorizationDataAttributesPermissions defines model for UpdateAuthorization.Data.Attributes.Permissions.
type UpdateAuthorizationDataAttributesPermissions string

// UpdateAuthorizationDataType defines model for UpdateAuthorization.Data.Type.
type UpdateAuthorizationDataType string

// UpdateCause defines model for update_cause.
type UpdateCause struct {
	Data struct {
		Attributes struct {
			// The description of the cause
			Description *string `json:"description"`

			// The name of the cause
			Name *string `json:"name,omitempty"`

			// Position of the cause
			Position *int `json:"position"`
		} `json:"attributes"`
		Type UpdateCauseDataType `json:"type"`
	} `json:"data"`
}

// UpdateCauseDataType defines model for UpdateCause.Data.Type.
type UpdateCauseDataType string

// UpdateClickupTaskTaskParams defines model for update_clickup_task_task_params.
type UpdateClickupTaskTaskParams struct {
	// Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The task description
	Description *string `json:"description,omitempty"`

	// The due date
	DueDate *string `json:"due_date,omitempty"`

	// The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The task tags
	Tags *string `json:"tags,omitempty"`

	// The task id
	TaskId string `json:"task_id"`

	// Additional ClickUp task attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON
	TaskPayload *string                              `json:"task_payload"`
	TaskType    *UpdateClickupTaskTaskParamsTaskType `json:"task_type,omitempty"`

	// The task title
	Title *string `json:"title,omitempty"`
}

// UpdateClickupTaskTaskParamsTaskType defines model for UpdateClickupTaskTaskParams.TaskType.
type UpdateClickupTaskTaskParamsTaskType string

// UpdateCustomField defines model for update_custom_field.
type UpdateCustomField struct {
	Data struct {
		Attributes struct {
			// The default value for text field kinds
			Default *string `json:"default"`

			// The description of the custom_field
			Description *string `json:"description"`

			// The name of the custom_field
			Label *string `json:"label,omitempty"`

			// The position of the custom_field
			Position *float32                                   `json:"position,omitempty"`
			Required *[]UpdateCustomFieldDataAttributesRequired `json:"required"`
			Shown    *[]UpdateCustomFieldDataAttributesShown    `json:"shown,omitempty"`

			// The slug of the custom_field
			Slug *string `json:"slug,omitempty"`
		} `json:"attributes"`
		Type UpdateCustomFieldDataType `json:"type"`
	} `json:"data"`
}

// Where the custom_field is required
type UpdateCustomFieldDataAttributesRequired string

// Where the custom_field is shown
type UpdateCustomFieldDataAttributesShown string

// UpdateCustomFieldDataType defines model for UpdateCustomField.Data.Type.
type UpdateCustomFieldDataType string

// UpdateCustomFieldOption defines model for update_custom_field_option.
type UpdateCustomFieldOption struct {
	Data struct {
		Attributes struct {
			// The hex color of the custom_field_option
			Color   *string `json:"color,omitempty"`
			Default *bool   `json:"default,omitempty"`

			// The position of the custom_field_option
			Position *float32 `json:"position,omitempty"`

			// The value of the custom_field_option
			Value *string `json:"value,omitempty"`
		} `json:"attributes"`
		Type UpdateCustomFieldOptionDataType `json:"type"`
	} `json:"data"`
}

// UpdateCustomFieldOptionDataType defines model for UpdateCustomFieldOption.Data.Type.
type UpdateCustomFieldOptionDataType string

// UpdateDashboard defines model for update_dashboard.
type UpdateDashboard struct {
	Data struct {
		Attributes *struct {
			// Whether the dashboard auto-updates the UI with new data.
			AutoRefresh *bool `json:"auto_refresh,omitempty"`

			// The hex color of the dashboard
			Color *UpdateDashboardDataAttributesColor `json:"color"`

			// The description of the dashboard
			Description *string `json:"description"`

			// The emoji icon of the dashboard
			Icon *string `json:"icon,omitempty"`

			// The name of the dashboard
			Name *string `json:"name,omitempty"`

			// The owner type of the dashboard
			Owner *UpdateDashboardDataAttributesOwner `json:"owner,omitempty"`

			// The grouping period for dashboard panel data
			Period *UpdateDashboardDataAttributesPeriod `json:"period"`

			// Whether the dashboard is public
			Public *bool `json:"public,omitempty"`

			// The date range for dashboard panel data
			Range *string `json:"range"`
		} `json:"attributes,omitempty"`
		Type *UpdateDashboardDataType `json:"type,omitempty"`
	} `json:"data"`
}

// The hex color of the dashboard
type UpdateDashboardDataAttributesColor string

// The owner type of the dashboard
type UpdateDashboardDataAttributesOwner string

// The grouping period for dashboard panel data
type UpdateDashboardDataAttributesPeriod string

// UpdateDashboardDataType defines model for UpdateDashboard.Data.Type.
type UpdateDashboardDataType string

// UpdateEnvironment defines model for update_environment.
type UpdateEnvironment struct {
	Data struct {
		Attributes struct {
			// The hex color of the environment
			Color *string `json:"color"`

			// The description of the environment
			Description *string `json:"description"`

			// The name of the environment
			Name *string `json:"name,omitempty"`

			// Emails to attach to the environment
			NotifyEmails *[]string `json:"notify_emails"`

			// Position of the environment
			Position *int `json:"position"`

			// Slack Aliases associated with this environment
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this environment
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type UpdateEnvironmentDataType `json:"type"`
	} `json:"data"`
}

// UpdateEnvironmentDataType defines model for UpdateEnvironment.Data.Type.
type UpdateEnvironmentDataType string

// UpdateFormField defines model for update_form_field.
type UpdateFormField struct {
	Data struct {
		Attributes struct {
			DefaultValues *[]string `json:"default_values,omitempty"`

			// The description of the form field
			Description *string `json:"description"`

			// Whether the form field is enabled
			Enabled *bool `json:"enabled,omitempty"`

			// The input kind of the form field
			InputKind *UpdateFormFieldDataAttributesInputKind `json:"input_kind,omitempty"`

			// The kind of the form field
			Kind *UpdateFormFieldDataAttributesKind `json:"kind,omitempty"`

			// The name of the form field
			Name     *string                                  `json:"name,omitempty"`
			Required *[]UpdateFormFieldDataAttributesRequired `json:"required,omitempty"`

			// Whether the form field is shown on the incident details panel
			ShowOnIncidentDetails *bool                                 `json:"show_on_incident_details,omitempty"`
			Shown                 *[]UpdateFormFieldDataAttributesShown `json:"shown,omitempty"`
		} `json:"attributes"`
		Type UpdateFormFieldDataType `json:"type"`
	} `json:"data"`
}

// The input kind of the form field
type UpdateFormFieldDataAttributesInputKind string

// The kind of the form field
type UpdateFormFieldDataAttributesKind string

// Where the form field is required
type UpdateFormFieldDataAttributesRequired string

// Where the form field is shown
type UpdateFormFieldDataAttributesShown string

// UpdateFormFieldDataType defines model for UpdateFormField.Data.Type.
type UpdateFormFieldDataType string

// UpdateFormFieldOption defines model for update_form_field_option.
type UpdateFormFieldOption struct {
	Data struct {
		Attributes struct {
			// The hex color of the form_field_option
			Color   *string `json:"color,omitempty"`
			Default *bool   `json:"default,omitempty"`

			// The position of the form_field_option
			Position *float32 `json:"position,omitempty"`

			// The value of the form_field_option
			Value *string `json:"value,omitempty"`
		} `json:"attributes"`
		Type UpdateFormFieldOptionDataType `json:"type"`
	} `json:"data"`
}

// UpdateFormFieldOptionDataType defines model for UpdateFormFieldOption.Data.Type.
type UpdateFormFieldOptionDataType string

// UpdateFormFieldPosition defines model for update_form_field_position.
type UpdateFormFieldPosition struct {
	Data struct {
		Attributes struct {
			// The form for the position
			Form *UpdateFormFieldPositionDataAttributesForm `json:"form,omitempty"`

			// The ID of the form field.
			FormFieldId *string `json:"form_field_id,omitempty"`

			// The position of the form_field_position
			Position *float32 `json:"position,omitempty"`
		} `json:"attributes"`
		Type UpdateFormFieldPositionDataType `json:"type"`
	} `json:"data"`
}

// The form for the position
type UpdateFormFieldPositionDataAttributesForm string

// UpdateFormFieldPositionDataType defines model for UpdateFormFieldPosition.Data.Type.
type UpdateFormFieldPositionDataType string

// UpdateFunctionality defines model for update_functionality.
type UpdateFunctionality struct {
	Data struct {
		Attributes struct {
			// The hex color of the functionality
			Color *string `json:"color"`

			// The description of the functionality
			Description *string `json:"description"`

			// Environments associated with this functionality
			EnvironmentIds *[]string `json:"environment_ids"`

			// The name of the functionality
			Name *string `json:"name,omitempty"`

			// Emails to attach to the functionality
			NotifyEmails *[]string `json:"notify_emails"`

			// Owner Teams associated with this functionality
			OwnersGroupIds *[]string `json:"owners_group_ids"`

			// Owner Users associated with this service
			OwnersUserIds *[]int `json:"owners_user_ids"`

			// Position of the functionality
			Position *int `json:"position"`

			// The public description of the functionality
			PublicDescription *string `json:"public_description"`

			// Services associated with this functionality
			ServiceIds *[]string `json:"service_ids"`

			// Slack Aliases associated with this service
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this service
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`

			// The status of the functionality
			Status *UpdateFunctionalityDataAttributesStatus `json:"status,omitempty"`
		} `json:"attributes"`
		Type UpdateFunctionalityDataType `json:"type"`
	} `json:"data"`
}

// The status of the functionality
type UpdateFunctionalityDataAttributesStatus string

// UpdateFunctionalityDataType defines model for UpdateFunctionality.Data.Type.
type UpdateFunctionalityDataType string

// UpdateGithubIssueTaskParams defines model for update_github_issue_task_params.
type UpdateGithubIssueTaskParams struct {
	// The issue body
	Body       *string `json:"body,omitempty"`
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// The issue id
	IssueId  string                               `json:"issue_id"`
	TaskType *UpdateGithubIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title
	Title *string `json:"title,omitempty"`
}

// UpdateGithubIssueTaskParamsTaskType defines model for UpdateGithubIssueTaskParams.TaskType.
type UpdateGithubIssueTaskParamsTaskType string

// UpdateGoogleCalendarEventTaskParams defines model for update_google_calendar_event_task_params.
type UpdateGoogleCalendarEventTaskParams struct {
	// Days to adjust meeting by
	AdjustmentDays *float32 `json:"adjustment_days,omitempty"`

	// Emails of attendees
	Attendees               *[]string `json:"attendees,omitempty"`
	CanGuestsInviteOthers   *bool     `json:"can_guests_invite_others,omitempty"`
	CanGuestsModifyEvent    *bool     `json:"can_guests_modify_event,omitempty"`
	CanGuestsSeeOtherGuests *bool     `json:"can_guests_see_other_guests,omitempty"`

	// Sets the video conference type attached to the meeting
	ConferenceSolutionKey *UpdateGoogleCalendarEventTaskParamsConferenceSolutionKey `json:"conference_solution_key"`

	// The event description
	Description *string `json:"description,omitempty"`

	// The event ID
	EventId string `json:"event_id"`

	// Meeting duration in format like '1 hour', '30 minutes'
	MeetingDuration        *string `json:"meeting_duration,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	ReplaceAttendees *bool `json:"replace_attendees,omitempty"`

	// Send an email to the attendees notifying them of the event
	SendUpdates *bool `json:"send_updates,omitempty"`

	// The event summary
	Summary  *string                                      `json:"summary,omitempty"`
	TaskType *UpdateGoogleCalendarEventTaskParamsTaskType `json:"task_type,omitempty"`

	// Time of meeting in format HH:MM
	TimeOfMeeting *string `json:"time_of_meeting,omitempty"`
}

// Sets the video conference type attached to the meeting
type UpdateGoogleCalendarEventTaskParamsConferenceSolutionKey string

// UpdateGoogleCalendarEventTaskParamsTaskType defines model for UpdateGoogleCalendarEventTaskParams.TaskType.
type UpdateGoogleCalendarEventTaskParamsTaskType string

// UpdateGoogleDocsPageTaskParams defines model for update_google_docs_page_task_params.
type UpdateGoogleDocsPageTaskParams struct {
	// The Google Doc content
	Content *string `json:"content,omitempty"`

	// The Google Doc file ID
	FileId string `json:"file_id"`

	// Retrospective template to use when updating page, if desired
	PostMortemTemplateId *string                                 `json:"post_mortem_template_id,omitempty"`
	TaskType             *UpdateGoogleDocsPageTaskParamsTaskType `json:"task_type,omitempty"`

	// The Google Doc file ID to use as a template.
	TemplateId *string `json:"template_id,omitempty"`

	// The Google Doc title
	Title *string `json:"title,omitempty"`
}

// UpdateGoogleDocsPageTaskParamsTaskType defines model for UpdateGoogleDocsPageTaskParams.TaskType.
type UpdateGoogleDocsPageTaskParamsTaskType string

// UpdateIncident defines model for update_incident.
type UpdateIncident struct {
	Data struct {
		Attributes struct {
			// Date of acknowledgment
			AcknowledgedAt *string `json:"acknowledged_at"`

			// Date of cancellation
			CancelledAt *string `json:"cancelled_at"`

			// The Cause ID's to attach to the incident
			CauseIds *[]string `json:"cause_ids"`

			// Date of detection
			DetectedAt *string `json:"detected_at"`

			// The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// Date of triage
			InTriageAt *string `json:"in_triage_at"`

			// The Incident Type ID's to attach to the incident
			IncidentTypeIds *[]string `json:"incident_type_ids"`

			// The kind of the incident
			Kind *UpdateIncidentDataAttributesKind `json:"kind"`

			// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// ID of parent incident
			ParentIncidentId *string `json:"parent_incident_id"`

			// Convert the incident as private. Once an incident is updated as private it cannot be undone
			Private *bool `json:"private"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// Date of when the maintenance begins
			ScheduledFor *string `json:"scheduled_for"`

			// Date of when the maintenance ends
			ScheduledUntil *string `json:"scheduled_until"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID to attach to the incident
			SeverityId *string `json:"severity_id"`

			// Slack channel id
			SlackChannelId *string `json:"slack_channel_id"`

			// Slack channel name
			SlackChannelName *string `json:"slack_channel_name"`

			// Slack channel url
			SlackChannelUrl *string `json:"slack_channel_url"`

			// Date of start
			StartedAt *string `json:"started_at"`

			// The summary of the incident
			Summary *string `json:"summary"`

			// The title of the incident
			Title *string `json:"title"`
		} `json:"attributes"`
		Type UpdateIncidentDataType `json:"type"`
	} `json:"data"`
}

// The kind of the incident
type UpdateIncidentDataAttributesKind string

// UpdateIncidentDataType defines model for UpdateIncident.Data.Type.
type UpdateIncidentDataType string

// UpdateIncidentActionItem defines model for update_incident_action_item.
type UpdateIncidentActionItem struct {
	Data struct {
		Attributes struct {
			// The description of the action item
			Description *string `json:"description"`

			// The due date of the action item
			DueDate *string `json:"due_date"`

			// The kind of the action item
			Kind *UpdateIncidentActionItemDataAttributesKind `json:"kind,omitempty"`

			// The priority of the action item
			Priority *UpdateIncidentActionItemDataAttributesPriority `json:"priority,omitempty"`

			// The status of the action item
			Status *UpdateIncidentActionItemDataAttributesStatus `json:"status,omitempty"`

			// The summary of the action item
			Summary *string `json:"summary,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentActionItemDataType `json:"type"`
	} `json:"data"`
}

// The kind of the action item
type UpdateIncidentActionItemDataAttributesKind string

// The priority of the action item
type UpdateIncidentActionItemDataAttributesPriority string

// The status of the action item
type UpdateIncidentActionItemDataAttributesStatus string

// UpdateIncidentActionItemDataType defines model for UpdateIncidentActionItem.Data.Type.
type UpdateIncidentActionItemDataType string

// UpdateIncidentCustomFieldSelection defines model for update_incident_custom_field_selection.
type UpdateIncidentCustomFieldSelection struct {
	Data struct {
		Attributes struct {
			SelectedOptionIds *[]float32 `json:"selected_option_ids,omitempty"`

			// The selected value for text kind custom fields
			Value *string `json:"value"`
		} `json:"attributes"`
		Type UpdateIncidentCustomFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentCustomFieldSelectionDataType defines model for UpdateIncidentCustomFieldSelection.Data.Type.
type UpdateIncidentCustomFieldSelectionDataType string

// UpdateIncidentEvent defines model for update_incident_event.
type UpdateIncidentEvent struct {
	Data struct {
		Attributes struct {
			// The summary of the incident event
			Event *string `json:"event,omitempty"`

			// The visibility of the incident action item
			Visibility *UpdateIncidentEventDataAttributesVisibility `json:"visibility,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentEventDataType `json:"type"`
	} `json:"data"`
}

// The visibility of the incident action item
type UpdateIncidentEventDataAttributesVisibility string

// UpdateIncidentEventDataType defines model for UpdateIncidentEvent.Data.Type.
type UpdateIncidentEventDataType string

// UpdateIncidentEventFunctionality defines model for update_incident_event_functionality.
type UpdateIncidentEventFunctionality struct {
	Data struct {
		Attributes struct {
			// The status of the affected functionality
			Status UpdateIncidentEventFunctionalityDataAttributesStatus `json:"status"`
		} `json:"attributes"`
		Type UpdateIncidentEventFunctionalityDataType `json:"type"`
	} `json:"data"`
}

// The status of the affected functionality
type UpdateIncidentEventFunctionalityDataAttributesStatus string

// UpdateIncidentEventFunctionalityDataType defines model for UpdateIncidentEventFunctionality.Data.Type.
type UpdateIncidentEventFunctionalityDataType string

// UpdateIncidentEventService defines model for update_incident_event_service.
type UpdateIncidentEventService struct {
	Data struct {
		Attributes struct {
			// The status of the affected service
			Status UpdateIncidentEventServiceDataAttributesStatus `json:"status"`
		} `json:"attributes"`
		Type UpdateIncidentEventServiceDataType `json:"type"`
	} `json:"data"`
}

// The status of the affected service
type UpdateIncidentEventServiceDataAttributesStatus string

// UpdateIncidentEventServiceDataType defines model for UpdateIncidentEventService.Data.Type.
type UpdateIncidentEventServiceDataType string

// UpdateIncidentFeedback defines model for update_incident_feedback.
type UpdateIncidentFeedback struct {
	Data struct {
		Attributes struct {
			// Is the feedback anonymous?
			Anonymous *bool `json:"anonymous,omitempty"`

			// The feedback of the incident feedback
			Feedback *string `json:"feedback,omitempty"`

			// The rating of the incident feedback
			Rating *UpdateIncidentFeedbackDataAttributesRating `json:"rating,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentFeedbackDataType `json:"type"`
	} `json:"data"`
}

// The rating of the incident feedback
type UpdateIncidentFeedbackDataAttributesRating int

// UpdateIncidentFeedbackDataType defines model for UpdateIncidentFeedback.Data.Type.
type UpdateIncidentFeedbackDataType string

// UpdateIncidentFormFieldSelection defines model for update_incident_form_field_selection.
type UpdateIncidentFormFieldSelection struct {
	Data struct {
		Attributes struct {
			SelectedOptionIds *[]string  `json:"selected_option_ids,omitempty"`
			SelectedUserIds   *[]float32 `json:"selected_user_ids,omitempty"`

			// The selected value for text kind custom fields
			Value *string `json:"value"`
		} `json:"attributes"`
		Type UpdateIncidentFormFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentFormFieldSelectionDataType defines model for UpdateIncidentFormFieldSelection.Data.Type.
type UpdateIncidentFormFieldSelectionDataType string

// UpdateIncidentPermissionSet defines model for update_incident_permission_set.
type UpdateIncidentPermissionSet struct {
	Data struct {
		Attributes struct {
			// The incident permission set description.
			Description *string `json:"description"`

			// The incident permission set name.
			Name                       *string                                                                `json:"name,omitempty"`
			PrivateIncidentPermissions *[]UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissions `json:"private_incident_permissions,omitempty"`
			PublicIncidentPermissions  *[]UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissions  `json:"public_incident_permissions,omitempty"`

			// The incident permission set slug.
			Slug *string `json:"slug,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentPermissionSetDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissions defines model for UpdateIncidentPermissionSet.Data.Attributes.PrivateIncidentPermissions.
type UpdateIncidentPermissionSetDataAttributesPrivateIncidentPermissions string

// UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissions defines model for UpdateIncidentPermissionSet.Data.Attributes.PublicIncidentPermissions.
type UpdateIncidentPermissionSetDataAttributesPublicIncidentPermissions string

// UpdateIncidentPermissionSetDataType defines model for UpdateIncidentPermissionSet.Data.Type.
type UpdateIncidentPermissionSetDataType string

// UpdateIncidentPermissionSetBoolean defines model for update_incident_permission_set_boolean.
type UpdateIncidentPermissionSetBoolean struct {
	Data struct {
		Attributes struct {
			Enabled *bool                                                 `json:"enabled,omitempty"`
			Kind    *UpdateIncidentPermissionSetBooleanDataAttributesKind `json:"kind,omitempty"`
			Private *bool                                                 `json:"private,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentPermissionSetBooleanDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentPermissionSetBooleanDataAttributesKind defines model for UpdateIncidentPermissionSetBoolean.Data.Attributes.Kind.
type UpdateIncidentPermissionSetBooleanDataAttributesKind string

// UpdateIncidentPermissionSetBooleanDataType defines model for UpdateIncidentPermissionSetBoolean.Data.Type.
type UpdateIncidentPermissionSetBooleanDataType string

// UpdateIncidentPermissionSetResource defines model for update_incident_permission_set_resource.
type UpdateIncidentPermissionSetResource struct {
	Data struct {
		Attributes struct {
			Kind         *UpdateIncidentPermissionSetResourceDataAttributesKind `json:"kind,omitempty"`
			Private      *bool                                                  `json:"private,omitempty"`
			ResourceId   *string                                                `json:"resource_id"`
			ResourceType *string                                                `json:"resource_type"`
		} `json:"attributes"`
		Type UpdateIncidentPermissionSetResourceDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentPermissionSetResourceDataAttributesKind defines model for UpdateIncidentPermissionSetResource.Data.Attributes.Kind.
type UpdateIncidentPermissionSetResourceDataAttributesKind string

// UpdateIncidentPermissionSetResourceDataType defines model for UpdateIncidentPermissionSetResource.Data.Type.
type UpdateIncidentPermissionSetResourceDataType string

// UpdateIncidentPostMortem defines model for update_incident_post_mortem.
type UpdateIncidentPostMortem struct {
	Data struct {
		Attributes struct {
			// The Cause ID's to attach to the incident retrospective
			CauseIds *[]string `json:"cause_ids"`

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// Show action items (follow-ups) in the incident retrospective
			ShowActionItems *bool `json:"show_action_items,omitempty"`

			// Show alerts attached to the incident
			ShowAlertsAttached *bool `json:"show_alerts_attached,omitempty"`

			// Show services impacted of the incident retrospective
			ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

			// Show groups impacted of the incident retrospective
			ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

			// Show functionalities impacted of the incident retrospective
			ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

			// Show events timeline of the incident retrospective
			ShowTimeline *bool `json:"show_timeline,omitempty"`

			// Show action items in the timeline of the incident retrospective
			ShowTimelineActionItems *bool `json:"show_timeline_action_items,omitempty"`

			// Show workflow events in the timeline of the incident retrospective
			ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

			// Show tasks in the timeline of the incident retrospective
			ShowTimelineTasks *bool `json:"show_timeline_tasks,omitempty"`

			// Show trail events in the timeline of the incident retrospective
			ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

			// Date of started at
			StartedAt *string `json:"started_at"`

			// The status of the incident retrospective
			Status *UpdateIncidentPostMortemDataAttributesStatus `json:"status,omitempty"`

			// The title of the incident retrospective
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentPostMortemDataType `json:"type"`
	} `json:"data"`
}

// The status of the incident retrospective
type UpdateIncidentPostMortemDataAttributesStatus string

// UpdateIncidentPostMortemDataType defines model for UpdateIncidentPostMortem.Data.Type.
type UpdateIncidentPostMortemDataType string

// UpdateIncidentPostmortemTaskParams defines model for update_incident_postmortem_task_params.
type UpdateIncidentPostmortemTaskParams struct {
	// UUID of the retrospective that needs to be updated
	PostmortemId string                                      `json:"postmortem_id"`
	Status       *string                                     `json:"status"`
	TaskType     *UpdateIncidentPostmortemTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title *string `json:"title"`
}

// UpdateIncidentPostmortemTaskParamsTaskType defines model for UpdateIncidentPostmortemTaskParams.TaskType.
type UpdateIncidentPostmortemTaskParamsTaskType string

// UpdateIncidentRole defines model for update_incident_role.
type UpdateIncidentRole struct {
	Data struct {
		Attributes struct {
			AllowMultiUserAssignment *bool `json:"allow_multi_user_assignment,omitempty"`

			// The description of the incident role
			Description *string `json:"description"`
			Enabled     *bool   `json:"enabled,omitempty"`

			// The name of the incident role
			Name     *string `json:"name,omitempty"`
			Optional *bool   `json:"optional,omitempty"`

			// Position of the incident role
			Position *int `json:"position"`

			// The summary of the incident role
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type UpdateIncidentRoleDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentRoleDataType defines model for UpdateIncidentRole.Data.Type.
type UpdateIncidentRoleDataType string

// UpdateIncidentRoleTask defines model for update_incident_role_task.
type UpdateIncidentRoleTask struct {
	Data struct {
		Attributes struct {
			// The description of the incident task
			Description *string `json:"description"`

			// The priority of the incident task
			Priority *UpdateIncidentRoleTaskDataAttributesPriority `json:"priority,omitempty"`

			// The task of the incident task
			Task *string `json:"task,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentRoleTaskDataType `json:"type"`
	} `json:"data"`
}

// The priority of the incident task
type UpdateIncidentRoleTaskDataAttributesPriority string

// UpdateIncidentRoleTaskDataType defines model for UpdateIncidentRoleTask.Data.Type.
type UpdateIncidentRoleTaskDataType string

// UpdateIncidentStatusPageEvent defines model for update_incident_status_page_event.
type UpdateIncidentStatusPageEvent struct {
	Data struct {
		Attributes struct {
			// The summary of the incident event
			Event *string `json:"event,omitempty"`

			// Notify all status pages subscribers
			NotifySubscribers *bool `json:"notify_subscribers"`

			// For StatusPage.io integrated pages auto publishes a tweet for your update
			ShouldTweet *bool `json:"should_tweet"`

			// The status of the incident event
			Status *UpdateIncidentStatusPageEventDataAttributesStatus `json:"status,omitempty"`

			// Unique ID of the status page you wish to post the event to
			StatusPageId *string `json:"status_page_id,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentStatusPageEventDataType `json:"type"`
	} `json:"data"`
}

// The status of the incident event
type UpdateIncidentStatusPageEventDataAttributesStatus string

// UpdateIncidentStatusPageEventDataType defines model for UpdateIncidentStatusPageEvent.Data.Type.
type UpdateIncidentStatusPageEventDataType string

// UpdateIncidentTaskParams defines model for update_incident_task_params.
type UpdateIncidentTaskParams struct {
	AcknowledgedAt     *string                                     `json:"acknowledged_at"`
	AttributeToQueryBy *UpdateIncidentTaskParamsAttributeToQueryBy `json:"attribute_to_query_by,omitempty"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string   `json:"custom_fields_mapping"`
	DetectedAt          *string   `json:"detected_at"`
	EnvironmentIds      *[]string `json:"environment_ids"`
	FunctionalityIds    *[]string `json:"functionality_ids"`
	GroupIds            *[]string `json:"group_ids"`

	// The incident id to update or id of any attribute on the incident
	IncidentId      string    `json:"incident_id"`
	IncidentTypeIds *[]string `json:"incident_type_ids"`
	MitigatedAt     *string   `json:"mitigated_at"`
	Private         *bool     `json:"private,omitempty"`
	ResolvedAt      *string   `json:"resolved_at"`
	ServiceIds      *[]string `json:"service_ids"`
	SeverityId      *string   `json:"severity_id"`
	StartedAt       *string   `json:"started_at"`
	Status          *string   `json:"status"`

	// The incident summary
	Summary  *string                           `json:"summary"`
	TaskType *UpdateIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title *string `json:"title"`
}

// UpdateIncidentTaskParamsAttributeToQueryBy defines model for UpdateIncidentTaskParams.AttributeToQueryBy.
type UpdateIncidentTaskParamsAttributeToQueryBy string

// UpdateIncidentTaskParamsTaskType defines model for UpdateIncidentTaskParams.TaskType.
type UpdateIncidentTaskParamsTaskType string

// UpdateIncidentType defines model for update_incident_type.
type UpdateIncidentType struct {
	Data struct {
		Attributes struct {
			// The hex color of the incident type
			Color *string `json:"color"`

			// The description of the incident type
			Description *string `json:"description"`

			// The name of the incident type
			Name *string `json:"name,omitempty"`

			// Emails to attach to the incident type
			NotifyEmails *[]string `json:"notify_emails"`

			// Position of the incident type
			Position *int `json:"position"`

			// Slack Aliases associated with this incident type
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this incident type
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type UpdateIncidentTypeDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentTypeDataType defines model for UpdateIncidentType.Data.Type.
type UpdateIncidentTypeDataType string

// UpdateJiraIssueTaskParams defines model for update_jira_issue_task_params.
type UpdateJiraIssueTaskParams struct {
	// The assigned user's email
	AssignUserEmail *string `json:"assign_user_email,omitempty"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The issue description
	Description *string `json:"description,omitempty"`

	// The due date
	DueDate *string `json:"due_date,omitempty"`

	// The issue id
	IssueId string `json:"issue_id"`

	// The issue labels
	Labels *string `json:"labels,omitempty"`

	// The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The project key
	ProjectKey string `json:"project_key"`

	// The reporter user's email
	ReporterUserEmail *string `json:"reporter_user_email,omitempty"`

	// The status id and display name
	Status *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"status,omitempty"`
	TaskType *UpdateJiraIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title
	Title *string `json:"title,omitempty"`

	// Update payload. Can contain liquid markup and need to be valid JSON
	UpdatePayload *string `json:"update_payload"`
}

// UpdateJiraIssueTaskParamsTaskType defines model for UpdateJiraIssueTaskParams.TaskType.
type UpdateJiraIssueTaskParamsTaskType string

// UpdateLinearIssueTaskParams defines model for update_linear_issue_task_params.
type UpdateLinearIssueTaskParams struct {
	// The assigned user's email
	AssignUserEmail *string `json:"assign_user_email,omitempty"`

	// The issue description
	Description *string `json:"description,omitempty"`

	// The issue id
	IssueId string `json:"issue_id"`
	Labels  *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"labels,omitempty"`

	// The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The project id and display name
	Project *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"project,omitempty"`

	// The state id and display name
	State *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"state,omitempty"`
	TaskType *UpdateLinearIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title
	Title *string `json:"title,omitempty"`
}

// UpdateLinearIssueTaskParamsTaskType defines model for UpdateLinearIssueTaskParams.TaskType.
type UpdateLinearIssueTaskParamsTaskType string

// UpdateNotionPageTaskParams defines model for update_notion_page_task_params.
type UpdateNotionPageTaskParams struct {
	// The Notion page ID
	FileId string `json:"file_id"`

	// Retrospective template to use when creating page task, if desired
	PostMortemTemplateId   *string                             `json:"post_mortem_template_id,omitempty"`
	ShowActionItemsAsTable *bool                               `json:"show_action_items_as_table,omitempty"`
	ShowTimelineAsTable    *bool                               `json:"show_timeline_as_table,omitempty"`
	TaskType               *UpdateNotionPageTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateNotionPageTaskParamsTaskType defines model for UpdateNotionPageTaskParams.TaskType.
type UpdateNotionPageTaskParamsTaskType string

// UpdateOpsgenieAlertTaskParams defines model for update_opsgenie_alert_task_params.
type UpdateOpsgenieAlertTaskParams struct {
	// Opsgenie Alert ID
	AlertId    string `json:"alert_id"`
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// Description field of the alert that is generally used to provide a detailed information about the alert
	Description *string `json:"description,omitempty"`

	// Message of the alert
	Message  *string                                `json:"message,omitempty"`
	Priority UpdateOpsgenieAlertTaskParamsPriority  `json:"priority"`
	TaskType *UpdateOpsgenieAlertTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateOpsgenieAlertTaskParamsPriority defines model for UpdateOpsgenieAlertTaskParams.Priority.
type UpdateOpsgenieAlertTaskParamsPriority string

// UpdateOpsgenieAlertTaskParamsTaskType defines model for UpdateOpsgenieAlertTaskParams.TaskType.
type UpdateOpsgenieAlertTaskParamsTaskType string

// UpdateOpsgenieIncidentTaskParams defines model for update_opsgenie_incident_task_params.
type UpdateOpsgenieIncidentTaskParams struct {
	// Description field of the alert that is generally used to provide a detailed information about the alert
	Description *string `json:"description,omitempty"`

	// Message of the alert
	Message *string `json:"message,omitempty"`

	// The Opsgenie incident ID, this can also be a Rootly incident variable ex. {{ incident.opsgenie_incident_id }}
	OpsgenieIncidentId string                                    `json:"opsgenie_incident_id"`
	Priority           *UpdateOpsgenieIncidentTaskParamsPriority `json:"priority,omitempty"`
	Status             *UpdateOpsgenieIncidentTaskParamsStatus   `json:"status,omitempty"`
	TaskType           *UpdateOpsgenieIncidentTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateOpsgenieIncidentTaskParamsPriority defines model for UpdateOpsgenieIncidentTaskParams.Priority.
type UpdateOpsgenieIncidentTaskParamsPriority string

// UpdateOpsgenieIncidentTaskParamsStatus defines model for UpdateOpsgenieIncidentTaskParams.Status.
type UpdateOpsgenieIncidentTaskParamsStatus string

// UpdateOpsgenieIncidentTaskParamsTaskType defines model for UpdateOpsgenieIncidentTaskParams.TaskType.
type UpdateOpsgenieIncidentTaskParamsTaskType string

// UpdatePagerdutyIncidentTaskParams defines model for update_pagerduty_incident_task_params.
type UpdatePagerdutyIncidentTaskParams struct {
	// Escalation level of policy attached to incident
	EscalationLevel *float32 `json:"escalation_level,omitempty"`

	// Pagerduty incident id
	PagerdutyIncidentId string `json:"pagerduty_incident_id"`

	// A message outlining the incident's resolution in Pagerduty
	Resolution *string                                    `json:"resolution,omitempty"`
	Status     *UpdatePagerdutyIncidentTaskParamsStatus   `json:"status,omitempty"`
	TaskType   *UpdatePagerdutyIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// Title to update to
	Title *string `json:"title,omitempty"`

	// Pagerduty incident urgency, selecting auto will let Rootly auto map our incident severity
	Urgency *UpdatePagerdutyIncidentTaskParamsUrgency `json:"urgency,omitempty"`
}

// UpdatePagerdutyIncidentTaskParamsStatus defines model for UpdatePagerdutyIncidentTaskParams.Status.
type UpdatePagerdutyIncidentTaskParamsStatus string

// UpdatePagerdutyIncidentTaskParamsTaskType defines model for UpdatePagerdutyIncidentTaskParams.TaskType.
type UpdatePagerdutyIncidentTaskParamsTaskType string

// Pagerduty incident urgency, selecting auto will let Rootly auto map our incident severity
type UpdatePagerdutyIncidentTaskParamsUrgency string

// UpdatePagertreeAlertTaskParams defines model for update_pagertree_alert_task_params.
type UpdatePagertreeAlertTaskParams struct {
	// Description of alert as text
	Description *string `json:"description,omitempty"`

	// Setting to true makes an alert a Pagertree incident
	Incident *bool `json:"incident,omitempty"`

	// The prefix ID of the Pagertree alert
	PagertreeAlertId *string                                 `json:"pagertree_alert_id,omitempty"`
	Severity         *UpdatePagertreeAlertTaskParamsSeverity `json:"severity,omitempty"`
	TaskType         *UpdatePagertreeAlertTaskParamsTaskType `json:"task_type,omitempty"`
	Teams            *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"teams,omitempty"`

	// Title of alert as text
	Title   *string                                `json:"title,omitempty"`
	Urgency *UpdatePagertreeAlertTaskParamsUrgency `json:"urgency,omitempty"`
	Users   *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"users,omitempty"`
}

// UpdatePagertreeAlertTaskParamsSeverity defines model for UpdatePagertreeAlertTaskParams.Severity.
type UpdatePagertreeAlertTaskParamsSeverity string

// UpdatePagertreeAlertTaskParamsTaskType defines model for UpdatePagertreeAlertTaskParams.TaskType.
type UpdatePagertreeAlertTaskParamsTaskType string

// UpdatePagertreeAlertTaskParamsUrgency defines model for UpdatePagertreeAlertTaskParams.Urgency.
type UpdatePagertreeAlertTaskParamsUrgency string

// UpdatePlaybook defines model for update_playbook.
type UpdatePlaybook struct {
	Data struct {
		Attributes struct {
			// The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// The external url of the playbook
			ExternalUrl *string `json:"external_url"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// The Incident Type ID's to attach to the incident
			IncidentTypeIds *[]string `json:"incident_type_ids"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID's to attach to the incident
			SeverityIds *[]string `json:"severity_ids"`

			// The summary of the playbook
			Summary *string `json:"summary"`

			// The title of the playbook
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdatePlaybookDataType `json:"type"`
	} `json:"data"`
}

// UpdatePlaybookDataType defines model for UpdatePlaybook.Data.Type.
type UpdatePlaybookDataType string

// UpdatePlaybookTask defines model for update_playbook_task.
type UpdatePlaybookTask struct {
	Data struct {
		Attributes struct {
			// The description of the task
			Description *string `json:"description"`

			// The position of the task
			Position *int `json:"position"`

			// The task of the task
			Task *string `json:"task,omitempty"`
		} `json:"attributes"`
		Type UpdatePlaybookTaskDataType `json:"type"`
	} `json:"data"`
}

// UpdatePlaybookTaskDataType defines model for UpdatePlaybookTask.Data.Type.
type UpdatePlaybookTaskDataType string

// UpdatePostMortemTemplate defines model for update_post_mortem_template.
type UpdatePostMortemTemplate struct {
	Data struct {
		Attributes struct {
			// The postmortem template. Liquid syntax is supported
			Content *string `json:"content,omitempty"`

			// Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// The format of the input
			Format *UpdatePostMortemTemplateDataAttributesFormat `json:"format"`

			// The name of the postmortem template
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdatePostMortemTemplateDataType `json:"type"`
	} `json:"data"`
}

// The format of the input
type UpdatePostMortemTemplateDataAttributesFormat string

// UpdatePostMortemTemplateDataType defines model for UpdatePostMortemTemplate.Data.Type.
type UpdatePostMortemTemplateDataType string

// UpdatePulse defines model for update_pulse.
type UpdatePulse struct {
	Data struct {
		Attributes struct {
			// Additional data
			Data *map[string]interface{} `json:"data"`

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {
				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`
			Refs *[]struct {
				// Key of the ref
				Key string `json:"key"`

				// Value of the ref
				Value string `json:"value"`
			} `json:"refs,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// The source of the pulse (eg: k8s)
			Source *string `json:"source"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary *string `json:"summary,omitempty"`
		} `json:"attributes"`
		Type *UpdatePulseDataType `json:"type,omitempty"`
	} `json:"data"`
}

// UpdatePulseDataType defines model for UpdatePulse.Data.Type.
type UpdatePulseDataType string

// UpdateRetrospectiveStep defines model for update_retrospective_step.
type UpdateRetrospectiveStep struct {
	Data struct {
		Attributes struct {
			// The description of the step
			Description *string `json:"description"`

			// Due date in days
			DueAfterDays *int `json:"due_after_days"`

			// Users assigned to the selected incident role will be the default owners for this step
			IncidentRoleId *string `json:"incident_role_id"`

			// Position of the step
			Position *int `json:"position"`

			// Is the step skippable?
			Skippable *bool `json:"skippable,omitempty"`

			// The name of the step
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdateRetrospectiveStepDataType `json:"type"`
	} `json:"data"`
}

// UpdateRetrospectiveStepDataType defines model for UpdateRetrospectiveStep.Data.Type.
type UpdateRetrospectiveStepDataType string

// UpdateRole defines model for update_role.
type UpdateRole struct {
	Data struct {
		Attributes struct {
			ApiKeysPermissions           *[]UpdateRoleDataAttributesApiKeysPermissions           `json:"api_keys_permissions,omitempty"`
			AuditsPermissions            *[]UpdateRoleDataAttributesAuditsPermissions            `json:"audits_permissions,omitempty"`
			BillingPermissions           *[]UpdateRoleDataAttributesBillingPermissions           `json:"billing_permissions,omitempty"`
			EnvironmentsPermissions      *[]UpdateRoleDataAttributesEnvironmentsPermissions      `json:"environments_permissions,omitempty"`
			FormFieldsPermissions        *[]UpdateRoleDataAttributesFormFieldsPermissions        `json:"form_fields_permissions,omitempty"`
			FunctionalitiesPermissions   *[]UpdateRoleDataAttributesFunctionalitiesPermissions   `json:"functionalities_permissions,omitempty"`
			GroupsPermissions            *[]UpdateRoleDataAttributesGroupsPermissions            `json:"groups_permissions,omitempty"`
			IncidentCausesPermissions    *[]UpdateRoleDataAttributesIncidentCausesPermissions    `json:"incident_causes_permissions,omitempty"`
			IncidentFeedbacksPermissions *[]UpdateRoleDataAttributesIncidentFeedbacksPermissions `json:"incident_feedbacks_permissions,omitempty"`

			// Associated incident permissions set.
			IncidentPermissionSetId        *string                                                   `json:"incident_permission_set_id"`
			IncidentPostMortemsPermissions *[]UpdateRoleDataAttributesIncidentPostMortemsPermissions `json:"incident_post_mortems_permissions,omitempty"`
			IncidentRolesPermissions       *[]UpdateRoleDataAttributesIncidentRolesPermissions       `json:"incident_roles_permissions,omitempty"`
			IncidentTypesPermissions       *[]UpdateRoleDataAttributesIncidentTypesPermissions       `json:"incident_types_permissions,omitempty"`
			IncidentsPermissions           *[]UpdateRoleDataAttributesIncidentsPermissions           `json:"incidents_permissions,omitempty"`
			InvitationsPermissions         *[]UpdateRoleDataAttributesInvitationsPermissions         `json:"invitations_permissions,omitempty"`

			// The role name.
			Name                        *string                                                `json:"name,omitempty"`
			PlaybooksPermissions        *[]UpdateRoleDataAttributesPlaybooksPermissions        `json:"playbooks_permissions,omitempty"`
			PrivateIncidentsPermissions *[]UpdateRoleDataAttributesPrivateIncidentsPermissions `json:"private_incidents_permissions,omitempty"`
			RetrospectivePermissions    *[]UpdateRoleDataAttributesRetrospectivePermissions    `json:"retrospective_permissions,omitempty"`
			RolesPermissions            *[]UpdateRoleDataAttributesRolesPermissions            `json:"roles_permissions,omitempty"`
			SecretsPermissions          *[]UpdateRoleDataAttributesSecretsPermissions          `json:"secrets_permissions,omitempty"`
			ServicesPermissions         *[]UpdateRoleDataAttributesServicesPermissions         `json:"services_permissions,omitempty"`
			SeveritiesPermissions       *[]UpdateRoleDataAttributesSeveritiesPermissions       `json:"severities_permissions,omitempty"`

			// The role slug.
			Slug                   *string                                           `json:"slug,omitempty"`
			StatusPagesPermissions *[]UpdateRoleDataAttributesStatusPagesPermissions `json:"status_pages_permissions,omitempty"`
			WebhooksPermissions    *[]UpdateRoleDataAttributesWebhooksPermissions    `json:"webhooks_permissions,omitempty"`
			WorkflowsPermissions   *[]UpdateRoleDataAttributesWorkflowsPermissions   `json:"workflows_permissions,omitempty"`
		} `json:"attributes"`
		Type UpdateRoleDataType `json:"type"`
	} `json:"data"`
}

// UpdateRoleDataAttributesApiKeysPermissions defines model for UpdateRole.Data.Attributes.ApiKeysPermissions.
type UpdateRoleDataAttributesApiKeysPermissions string

// UpdateRoleDataAttributesAuditsPermissions defines model for UpdateRole.Data.Attributes.AuditsPermissions.
type UpdateRoleDataAttributesAuditsPermissions string

// UpdateRoleDataAttributesBillingPermissions defines model for UpdateRole.Data.Attributes.BillingPermissions.
type UpdateRoleDataAttributesBillingPermissions string

// UpdateRoleDataAttributesEnvironmentsPermissions defines model for UpdateRole.Data.Attributes.EnvironmentsPermissions.
type UpdateRoleDataAttributesEnvironmentsPermissions string

// UpdateRoleDataAttributesFormFieldsPermissions defines model for UpdateRole.Data.Attributes.FormFieldsPermissions.
type UpdateRoleDataAttributesFormFieldsPermissions string

// UpdateRoleDataAttributesFunctionalitiesPermissions defines model for UpdateRole.Data.Attributes.FunctionalitiesPermissions.
type UpdateRoleDataAttributesFunctionalitiesPermissions string

// UpdateRoleDataAttributesGroupsPermissions defines model for UpdateRole.Data.Attributes.GroupsPermissions.
type UpdateRoleDataAttributesGroupsPermissions string

// UpdateRoleDataAttributesIncidentCausesPermissions defines model for UpdateRole.Data.Attributes.IncidentCausesPermissions.
type UpdateRoleDataAttributesIncidentCausesPermissions string

// UpdateRoleDataAttributesIncidentFeedbacksPermissions defines model for UpdateRole.Data.Attributes.IncidentFeedbacksPermissions.
type UpdateRoleDataAttributesIncidentFeedbacksPermissions string

// UpdateRoleDataAttributesIncidentPostMortemsPermissions defines model for UpdateRole.Data.Attributes.IncidentPostMortemsPermissions.
type UpdateRoleDataAttributesIncidentPostMortemsPermissions string

// UpdateRoleDataAttributesIncidentRolesPermissions defines model for UpdateRole.Data.Attributes.IncidentRolesPermissions.
type UpdateRoleDataAttributesIncidentRolesPermissions string

// UpdateRoleDataAttributesIncidentTypesPermissions defines model for UpdateRole.Data.Attributes.IncidentTypesPermissions.
type UpdateRoleDataAttributesIncidentTypesPermissions string

// UpdateRoleDataAttributesIncidentsPermissions defines model for UpdateRole.Data.Attributes.IncidentsPermissions.
type UpdateRoleDataAttributesIncidentsPermissions string

// UpdateRoleDataAttributesInvitationsPermissions defines model for UpdateRole.Data.Attributes.InvitationsPermissions.
type UpdateRoleDataAttributesInvitationsPermissions string

// UpdateRoleDataAttributesPlaybooksPermissions defines model for UpdateRole.Data.Attributes.PlaybooksPermissions.
type UpdateRoleDataAttributesPlaybooksPermissions string

// UpdateRoleDataAttributesPrivateIncidentsPermissions defines model for UpdateRole.Data.Attributes.PrivateIncidentsPermissions.
type UpdateRoleDataAttributesPrivateIncidentsPermissions string

// UpdateRoleDataAttributesRetrospectivePermissions defines model for UpdateRole.Data.Attributes.RetrospectivePermissions.
type UpdateRoleDataAttributesRetrospectivePermissions string

// UpdateRoleDataAttributesRolesPermissions defines model for UpdateRole.Data.Attributes.RolesPermissions.
type UpdateRoleDataAttributesRolesPermissions string

// UpdateRoleDataAttributesSecretsPermissions defines model for UpdateRole.Data.Attributes.SecretsPermissions.
type UpdateRoleDataAttributesSecretsPermissions string

// UpdateRoleDataAttributesServicesPermissions defines model for UpdateRole.Data.Attributes.ServicesPermissions.
type UpdateRoleDataAttributesServicesPermissions string

// UpdateRoleDataAttributesSeveritiesPermissions defines model for UpdateRole.Data.Attributes.SeveritiesPermissions.
type UpdateRoleDataAttributesSeveritiesPermissions string

// UpdateRoleDataAttributesStatusPagesPermissions defines model for UpdateRole.Data.Attributes.StatusPagesPermissions.
type UpdateRoleDataAttributesStatusPagesPermissions string

// UpdateRoleDataAttributesWebhooksPermissions defines model for UpdateRole.Data.Attributes.WebhooksPermissions.
type UpdateRoleDataAttributesWebhooksPermissions string

// UpdateRoleDataAttributesWorkflowsPermissions defines model for UpdateRole.Data.Attributes.WorkflowsPermissions.
type UpdateRoleDataAttributesWorkflowsPermissions string

// UpdateRoleDataType defines model for UpdateRole.Data.Type.
type UpdateRoleDataType string

// UpdateSecret defines model for update_secret.
type UpdateSecret struct {
	Data struct {
		Attributes struct {
			// The HashiCorp Vault secret mount path
			HashicorpVaultMount *string `json:"hashicorp_vault_mount"`

			// The HashiCorp Vault secret path
			HashicorpVaultPath *string `json:"hashicorp_vault_path"`

			// The HashiCorp Vault secret version
			HashicorpVaultVersion *int `json:"hashicorp_vault_version"`

			// The name of the secret
			Name string `json:"name"`

			// The secret
			Secret *string `json:"secret,omitempty"`
		} `json:"attributes"`
		Type UpdateSecretDataType `json:"type"`
	} `json:"data"`
}

// UpdateSecretDataType defines model for UpdateSecret.Data.Type.
type UpdateSecretDataType string

// UpdateService defines model for update_service.
type UpdateService struct {
	Data struct {
		Attributes struct {
			// The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
			BackstageId *string `json:"backstage_id"`

			// The hex color of the service
			Color *string `json:"color"`

			// The description of the service
			Description *string `json:"description"`

			// Environments associated with this service
			EnvironmentIds *[]string `json:"environment_ids"`

			// The GitHub repository branch associated to this service. eg: main
			GithubRepositoryBranch *string `json:"github_repository_branch"`

			// The GitHub repository name associated to this service. eg: rootlyhq/my-service
			GithubRepositoryName *string `json:"github_repository_name"`

			// The Gitlab repository branch associated to this service. eg: main
			GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

			// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
			GitlabRepositoryName *string `json:"gitlab_repository_name"`

			// The name of the service
			Name *string `json:"name,omitempty"`

			// Emails to attach to the service
			NotifyEmails *[]string `json:"notify_emails"`

			// The Opsgenie service id associated to this service
			OpsgenieId *string `json:"opsgenie_id"`

			// Owner Teams associated with this service
			OwnersGroupIds *[]string `json:"owners_group_ids"`

			// Owner Users associated with this service
			OwnersUserIds *[]int `json:"owners_user_ids"`

			// The PagerDuty service id associated to this service
			PagerdutyId *string `json:"pagerduty_id"`

			// Position of the service
			Position *int `json:"position"`

			// The public description of the service
			PublicDescription *string `json:"public_description"`

			// Services dependent on this service
			ServiceIds *[]string `json:"service_ids"`

			// Slack Aliases associated with this service
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this service
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`

			// The status of the service
			Status *UpdateServiceDataAttributesStatus `json:"status,omitempty"`
		} `json:"attributes"`
		Type UpdateServiceDataType `json:"type"`
	} `json:"data"`
}

// The status of the service
type UpdateServiceDataAttributesStatus string

// UpdateServiceDataType defines model for UpdateService.Data.Type.
type UpdateServiceDataType string

// UpdateServiceNowIncidentTaskParams defines model for update_service_now_incident_task_params.
type UpdateServiceNowIncidentTaskParams struct {
	// The completion id and display name
	Completion *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion,omitempty"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The incident description
	Description *string `json:"description,omitempty"`

	// The incident id
	IncidentId string `json:"incident_id"`

	// The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`
	TaskType *UpdateServiceNowIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title *string `json:"title,omitempty"`
}

// UpdateServiceNowIncidentTaskParamsTaskType defines model for UpdateServiceNowIncidentTaskParams.TaskType.
type UpdateServiceNowIncidentTaskParamsTaskType string

// UpdateSeverity defines model for update_severity.
type UpdateSeverity struct {
	Data struct {
		Attributes struct {
			// The hex color of the severity
			Color *string `json:"color"`

			// The description of the severity
			Description *string `json:"description"`

			// The name of the severity
			Name *string `json:"name,omitempty"`

			// Emails to attach to the severity
			NotifyEmails *[]string `json:"notify_emails"`

			// Position of the severity
			Position *int `json:"position"`

			// The severity of the severity
			Severity *UpdateSeverityDataAttributesSeverity `json:"severity,omitempty"`

			// Slack Aliases associated with this severity
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this severity
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`
		} `json:"attributes"`
		Type UpdateSeverityDataType `json:"type"`
	} `json:"data"`
}

// The severity of the severity
type UpdateSeverityDataAttributesSeverity string

// UpdateSeverityDataType defines model for UpdateSeverity.Data.Type.
type UpdateSeverityDataType string

// UpdateShortcutStoryTaskParams defines model for update_shortcut_story_task_params.
type UpdateShortcutStoryTaskParams struct {
	// The archivation id and display name
	Archivation struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"archivation"`

	// The incident description
	Description *string `json:"description,omitempty"`

	// The due date
	DueDate *string `json:"due_date,omitempty"`

	// The story labels
	Labels *string `json:"labels,omitempty"`

	// The story id
	StoryId  string                                 `json:"story_id"`
	TaskType *UpdateShortcutStoryTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title *string `json:"title,omitempty"`
}

// UpdateShortcutStoryTaskParamsTaskType defines model for UpdateShortcutStoryTaskParams.TaskType.
type UpdateShortcutStoryTaskParamsTaskType string

// UpdateShortcutTaskTaskParams defines model for update_shortcut_task_task_params.
type UpdateShortcutTaskTaskParams struct {
	// The completion id and display name
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// The task description
	Description *string `json:"description,omitempty"`

	// The parent story
	ParentStoryId string `json:"parent_story_id"`

	// The task id
	TaskId   string                                `json:"task_id"`
	TaskType *UpdateShortcutTaskTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateShortcutTaskTaskParamsTaskType defines model for UpdateShortcutTaskTaskParams.TaskType.
type UpdateShortcutTaskTaskParamsTaskType string

// UpdateSlackChannelTopicTaskParams defines model for update_slack_channel_topic_task_params.
type UpdateSlackChannelTopicTaskParams struct {
	Channel struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channel"`
	TaskType *UpdateSlackChannelTopicTaskParamsTaskType `json:"task_type,omitempty"`
	Topic    string                                     `json:"topic"`
}

// UpdateSlackChannelTopicTaskParamsTaskType defines model for UpdateSlackChannelTopicTaskParams.TaskType.
type UpdateSlackChannelTopicTaskParamsTaskType string

// UpdateStatusPage defines model for update_status_page.
type UpdateStatusPage struct {
	Data struct {
		Attributes struct {
			// Allow search engines to include your public status page in search results
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// Enable authentication
			AuthenticationEnabled *bool `json:"authentication_enabled"`

			// Authentication password
			AuthenticationPassword *string `json:"authentication_password"`

			// The description of the status page
			Description *string `json:"description"`

			// Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// Message showing when at least one component is not operational
			FailureMessage *string `json:"failure_message"`

			// The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// Functionalities attached to the status page
			FunctionalityIds *[]string `json:"functionality_ids,omitempty"`

			// Google Analytics tracking ID
			GaTrackingId *string `json:"ga_tracking_id"`

			// The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Make the status page accessible to the public
			Public *bool `json:"public"`

			// The public description of the status page
			PublicDescription *string `json:"public_description"`

			// The public title of the status page
			PublicTitle *string `json:"public_title"`

			// Services attached to the status page
			ServiceIds *[]string `json:"service_ids,omitempty"`

			// Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// Show uptime over x days
			ShowUptimeLastDays *UpdateStatusPageDataAttributesShowUptimeLastDays `json:"show_uptime_last_days"`

			// Message showing when all components are operational
			SuccessMessage *string `json:"success_message"`

			// Status Page Timezone
			TimeZone *UpdateStatusPageDataAttributesTimeZone `json:"time_zone"`

			// The title of the status page
			Title *string `json:"title,omitempty"`

			// Website Privacy URL
			WebsitePrivacyUrl *string `json:"website_privacy_url"`

			// Website Support URL
			WebsiteSupportUrl *string `json:"website_support_url"`

			// Website URL
			WebsiteUrl *string `json:"website_url"`
		} `json:"attributes"`
		Type UpdateStatusPageDataType `json:"type"`
	} `json:"data"`
}

// Show uptime over x days
type UpdateStatusPageDataAttributesShowUptimeLastDays int

// Status Page Timezone
type UpdateStatusPageDataAttributesTimeZone string

// UpdateStatusPageDataType defines model for UpdateStatusPage.Data.Type.
type UpdateStatusPageDataType string

// UpdateStatusTaskParams defines model for update_status_task_params.
type UpdateStatusTaskParams struct {
	// In format '1 hour', '1 day', etc
	InactivityTimeout *string                         `json:"inactivity_timeout,omitempty"`
	Status            UpdateStatusTaskParamsStatus    `json:"status"`
	TaskType          *UpdateStatusTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateStatusTaskParamsStatus defines model for UpdateStatusTaskParams.Status.
type UpdateStatusTaskParamsStatus string

// UpdateStatusTaskParamsTaskType defines model for UpdateStatusTaskParams.TaskType.
type UpdateStatusTaskParamsTaskType string

// UpdateTeam defines model for update_team.
type UpdateTeam struct {
	Data struct {
		Attributes struct {
			// The hex color of the team
			Color *string `json:"color"`

			// The description of the team
			Description *string `json:"description"`

			// The name of the team
			Name *string `json:"name,omitempty"`

			// Emails to attach to the team
			NotifyEmails *[]string `json:"notify_emails"`

			// The Opsgenie group id associated to this team
			OpsgenieId *string `json:"opsgenie_id"`

			// The PagerDuty group id associated to this team
			PagerdutyId *string `json:"pagerduty_id"`

			// The PagerTree group id associated to this team
			PagertreeId *string `json:"pagertree_id"`

			// Position of the team
			Position *int `json:"position"`

			// Slack Aliases associated with this service
			SlackAliases *[]struct {
				// Slack alias ID
				Id string `json:"id"`

				// Slack alias name
				Name string `json:"name"`
			} `json:"slack_aliases"`

			// Slack Channels associated with this service
			SlackChannels *[]struct {
				// Slack channel ID
				Id string `json:"id"`

				// Slack channel name
				Name string `json:"name"`
			} `json:"slack_channels"`

			// The User ID's members of this team
			UserIds *[]int `json:"user_ids"`

			// The VictorOps group id associated to this team
			VictorOpsId *string `json:"victor_ops_id"`
		} `json:"attributes"`
		Type UpdateTeamDataType `json:"type"`
	} `json:"data"`
}

// UpdateTeamDataType defines model for UpdateTeam.Data.Type.
type UpdateTeamDataType string

// UpdateTrelloCardTaskParams defines model for update_trello_card_task_params.
type UpdateTrelloCardTaskParams struct {
	// The archivation id and display name
	Archivation struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"archivation"`

	// The board id and display name
	Board *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"board,omitempty"`

	// The card id
	CardId string `json:"card_id"`

	// The card description
	Description *string `json:"description,omitempty"`

	// The due date
	DueDate *string `json:"due_date,omitempty"`
	Labels  *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"labels,omitempty"`

	// The list id and display name
	List *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"list,omitempty"`
	TaskType *UpdateTrelloCardTaskParamsTaskType `json:"task_type,omitempty"`

	// The card title
	Title *string `json:"title,omitempty"`
}

// UpdateTrelloCardTaskParamsTaskType defines model for UpdateTrelloCardTaskParams.TaskType.
type UpdateTrelloCardTaskParamsTaskType string

// UpdateVictorOpsIncidentTaskParams defines model for update_victor_ops_incident_task_params.
type UpdateVictorOpsIncidentTaskParams struct {
	// Resolution message
	ResolutionMessage *string                                    `json:"resolution_message,omitempty"`
	Status            UpdateVictorOpsIncidentTaskParamsStatus    `json:"status"`
	TaskType          *UpdateVictorOpsIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// The victor_ops incident ID, this can also be a Rootly incident variable ex. {{ incident.victor_ops_incident_id }}
	VictorOpsIncidentId string `json:"victor_ops_incident_id"`
}

// UpdateVictorOpsIncidentTaskParamsStatus defines model for UpdateVictorOpsIncidentTaskParams.Status.
type UpdateVictorOpsIncidentTaskParamsStatus string

// UpdateVictorOpsIncidentTaskParamsTaskType defines model for UpdateVictorOpsIncidentTaskParams.TaskType.
type UpdateVictorOpsIncidentTaskParamsTaskType string

// UpdateWebhooksEndpoint defines model for update_webhooks_endpoint.
type UpdateWebhooksEndpoint struct {
	Data struct {
		Attributes struct {
			Enabled    *bool                                             `json:"enabled,omitempty"`
			EventTypes *[]UpdateWebhooksEndpointDataAttributesEventTypes `json:"event_types,omitempty"`

			// The name of the endpoint
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdateWebhooksEndpointDataType `json:"type"`
	} `json:"data"`
}

// UpdateWebhooksEndpointDataAttributesEventTypes defines model for UpdateWebhooksEndpoint.Data.Attributes.EventTypes.
type UpdateWebhooksEndpointDataAttributesEventTypes string

// UpdateWebhooksEndpointDataType defines model for UpdateWebhooksEndpoint.Data.Type.
type UpdateWebhooksEndpointDataType string

// UpdateWorkflow defines model for update_workflow.
type UpdateWorkflow struct {
	Data struct {
		Attributes struct {
			CauseIds *[]string `json:"cause_ids,omitempty"`

			// Workflow command
			Command *string `json:"command"`

			// This will notify you back when the workflow is starting
			CommandFeedbackEnabled *bool `json:"command_feedback_enabled"`

			// The description of the workflow
			Description      *string   `json:"description"`
			Enabled          *bool     `json:"enabled,omitempty"`
			EnvironmentIds   *[]string `json:"environment_ids,omitempty"`
			FunctionalityIds *[]string `json:"functionality_ids,omitempty"`
			GroupIds         *[]string `json:"group_ids,omitempty"`
			IncidentRoleIds  *[]string `json:"incident_role_ids,omitempty"`
			IncidentTypeIds  *[]string `json:"incident_type_ids,omitempty"`

			// The title of the workflow
			Name *string `json:"name,omitempty"`

			// The order which the workflow should run with other workflows.
			Position *float32 `json:"position,omitempty"`

			// Repeat workflow every duration
			RepeatEveryDuration *string   `json:"repeat_every_duration"`
			ServiceIds          *[]string `json:"service_ids,omitempty"`
			SeverityIds         *[]string `json:"severity_ids,omitempty"`

			// The slug of the workflow
			Slug          *string      `json:"slug,omitempty"`
			TriggerParams *interface{} `json:"trigger_params,omitempty"`

			// Wait this duration before executing
			Wait *string `json:"wait"`

			// The group this workflow belongs to.
			WorkflowGroupId *string `json:"workflow_group_id,omitempty"`
		} `json:"attributes"`
		Type UpdateWorkflowDataType `json:"type"`
	} `json:"data"`
}

// UpdateWorkflowDataType defines model for UpdateWorkflow.Data.Type.
type UpdateWorkflowDataType string

// UpdateWorkflowCustomFieldSelection defines model for update_workflow_custom_field_selection.
type UpdateWorkflowCustomFieldSelection struct {
	Data struct {
		Attributes struct {
			// The trigger condition
			IncidentCondition *UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition `json:"incident_condition,omitempty"`
			SelectedOptionIds *[]float32                                                         `json:"selected_option_ids,omitempty"`
			Values            *[]string                                                          `json:"values,omitempty"`
		} `json:"attributes"`
		Type UpdateWorkflowCustomFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// The trigger condition
type UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition string

// UpdateWorkflowCustomFieldSelectionDataType defines model for UpdateWorkflowCustomFieldSelection.Data.Type.
type UpdateWorkflowCustomFieldSelectionDataType string

// UpdateWorkflowFormFieldCondition defines model for update_workflow_form_field_condition.
type UpdateWorkflowFormFieldCondition struct {
	Data struct {
		Attributes struct {
			// The trigger condition
			IncidentCondition *UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition `json:"incident_condition,omitempty"`
			SelectedOptionIds *[]string                                                        `json:"selected_option_ids,omitempty"`
			SelectedUserIds   *[]float32                                                       `json:"selected_user_ids,omitempty"`
			Values            *[]string                                                        `json:"values,omitempty"`
		} `json:"attributes"`
		Type UpdateWorkflowFormFieldConditionDataType `json:"type"`
	} `json:"data"`
}

// The trigger condition
type UpdateWorkflowFormFieldConditionDataAttributesIncidentCondition string

// UpdateWorkflowFormFieldConditionDataType defines model for UpdateWorkflowFormFieldCondition.Data.Type.
type UpdateWorkflowFormFieldConditionDataType string

// UpdateWorkflowGroup defines model for update_workflow_group.
type UpdateWorkflowGroup struct {
	Data struct {
		Attributes struct {
			// Whether the group is expanded or collapsed.
			Expanded *bool `json:"expanded,omitempty"`

			// The kind of the workflow group
			Kind *UpdateWorkflowGroupDataAttributesKind `json:"kind,omitempty"`

			// The name of the workflow group.
			Name *string `json:"name,omitempty"`

			// The position of the workflow group
			Position *float32 `json:"position,omitempty"`
		} `json:"attributes"`
		Type UpdateWorkflowGroupDataType `json:"type"`
	} `json:"data"`
}

// The kind of the workflow group
type UpdateWorkflowGroupDataAttributesKind string

// UpdateWorkflowGroupDataType defines model for UpdateWorkflowGroup.Data.Type.
type UpdateWorkflowGroupDataType string

// UpdateWorkflowTask defines model for update_workflow_task.
type UpdateWorkflowTask struct {
	Data struct {
		Attributes struct {
			// Enable/disable workflow task
			Enabled *bool `json:"enabled,omitempty"`

			// Name of the workflow task
			Name *string `json:"name,omitempty"`

			// The position of the workflow task
			Position *float32 `json:"position,omitempty"`

			// Skip workflow task if any failures
			SkipOnFailure *bool        `json:"skip_on_failure,omitempty"`
			TaskParams    *interface{} `json:"task_params,omitempty"`
		} `json:"attributes"`
		Type UpdateWorkflowTaskDataType `json:"type"`
	} `json:"data"`
}

// UpdateWorkflowTaskDataType defines model for UpdateWorkflowTask.Data.Type.
type UpdateWorkflowTaskDataType string

// UpdateZendeskTicketTaskParams defines model for update_zendesk_ticket_task_params.
type UpdateZendeskTicketTaskParams struct {
	// The completion id and display name
	Completion *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion,omitempty"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The priority id and display name
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The ticket subject
	Subject *string `json:"subject,omitempty"`

	// The ticket tags
	Tags     *string                                `json:"tags,omitempty"`
	TaskType *UpdateZendeskTicketTaskParamsTaskType `json:"task_type,omitempty"`

	// The ticket id
	TicketId string `json:"ticket_id"`

	// Additional Zendesk ticket attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON
	TicketPayload *string `json:"ticket_payload"`
}

// UpdateZendeskTicketTaskParamsTaskType defines model for UpdateZendeskTicketTaskParams.TaskType.
type UpdateZendeskTicketTaskParamsTaskType string

// UptimeChartResponse defines model for uptime_chart_response.
type UptimeChartResponse = map[string]interface{}

// User defines model for user.
type User struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The email of the user
	Email string `json:"email"`

	// The full name of the user
	FullName *string `json:"full_name"`

	// The full name with team of the user
	FullNameWithTeam *string `json:"full_name_with_team"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// UserList defines model for user_list.
type UserList struct {
	Data []struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The email of the user
			Email string `json:"email"`

			// The full name of the user
			FullName *string `json:"full_name"`

			// The full name with team of the user
			FullNameWithTeam *string `json:"full_name_with_team"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the user
		Id   string           `json:"id"`
		Type UserListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// UserListDataType defines model for UserList.Data.Type.
type UserListDataType string

// UserResponse defines model for user_response.
type UserResponse struct {
	Data struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// The email of the user
			Email string `json:"email"`

			// The full name of the user
			FullName *string `json:"full_name"`

			// The full name with team of the user
			FullNameWithTeam *string `json:"full_name_with_team"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the user
		Id   string               `json:"id"`
		Type UserResponseDataType `json:"type"`
	} `json:"data"`
}

// UserResponseDataType defines model for UserResponse.Data.Type.
type UserResponseDataType string

// WebhooksDelivery defines model for webhooks_delivery.
type WebhooksDelivery struct {
	// Date of creation
	CreatedAt   string  `json:"created_at"`
	DeliveredAt *string `json:"delivered_at"`
	EndpointId  string  `json:"endpoint_id"`
	Payload     string  `json:"payload"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// WebhooksDeliveryList defines model for webhooks_delivery_list.
type WebhooksDeliveryList struct {
	Data []struct {
		Attributes struct {
			// Date of creation
			CreatedAt   string  `json:"created_at"`
			DeliveredAt *string `json:"delivered_at"`
			EndpointId  string  `json:"endpoint_id"`
			Payload     string  `json:"payload"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the webhooks_delivery
		Id   string                       `json:"id"`
		Type WebhooksDeliveryListDataType `json:"type"`
	} `json:"data"`
	Links *struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links,omitempty"`
}

// WebhooksDeliveryListDataType defines model for WebhooksDeliveryList.Data.Type.
type WebhooksDeliveryListDataType string

// WebhooksDeliveryResponse defines model for webhooks_delivery_response.
type WebhooksDeliveryResponse struct {
	Data struct {
		Attributes struct {
			// Date of creation
			CreatedAt   string  `json:"created_at"`
			DeliveredAt *string `json:"delivered_at"`
			EndpointId  string  `json:"endpoint_id"`
			Payload     string  `json:"payload"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`
		} `json:"attributes"`

		// Unique ID of the webhooks_delivery
		Id   string                           `json:"id"`
		Type WebhooksDeliveryResponseDataType `json:"type"`
	} `json:"data"`
}

// WebhooksDeliveryResponseDataType defines model for WebhooksDeliveryResponse.Data.Type.
type WebhooksDeliveryResponseDataType string

// WebhooksEndpoint defines model for webhooks_endpoint.
type WebhooksEndpoint struct {
	// Date of creation
	CreatedAt  string                       `json:"created_at"`
	Enabled    bool                         `json:"enabled"`
	EventTypes []WebhooksEndpointEventTypes `json:"event_types"`

	// The name of the endpoint
	Name string `json:"name"`

	// The webhook signing secret used to verify webhook requests.
	Secret string `json:"secret"`

	// The slug of the endpoint
	Slug string `json:"slug"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The URL of the endpoint.
	Url string `json:"url"`
}

// WebhooksEndpointEventTypes defines model for WebhooksEndpoint.EventTypes.
type WebhooksEndpointEventTypes string

// WebhooksEndpointList defines model for webhooks_endpoint_list.
type WebhooksEndpointList struct {
	Data []struct {
		Attributes struct {
			// Date of creation
			CreatedAt  string                                         `json:"created_at"`
			Enabled    bool                                           `json:"enabled"`
			EventTypes []WebhooksEndpointListDataAttributesEventTypes `json:"event_types"`

			// The name of the endpoint
			Name string `json:"name"`

			// The webhook signing secret used to verify webhook requests.
			Secret string `json:"secret"`

			// The slug of the endpoint
			Slug string `json:"slug"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`

			// The URL of the endpoint.
			Url string `json:"url"`
		} `json:"attributes"`

		// Unique ID of the webhooks_endpoint
		Id   string                       `json:"id"`
		Type WebhooksEndpointListDataType `json:"type"`
	} `json:"data"`
	Links *struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links,omitempty"`
}

// WebhooksEndpointListDataAttributesEventTypes defines model for WebhooksEndpointList.Data.Attributes.EventTypes.
type WebhooksEndpointListDataAttributesEventTypes string

// WebhooksEndpointListDataType defines model for WebhooksEndpointList.Data.Type.
type WebhooksEndpointListDataType string

// WebhooksEndpointResponse defines model for webhooks_endpoint_response.
type WebhooksEndpointResponse struct {
	Data struct {
		Attributes struct {
			// Date of creation
			CreatedAt  string                                             `json:"created_at"`
			Enabled    bool                                               `json:"enabled"`
			EventTypes []WebhooksEndpointResponseDataAttributesEventTypes `json:"event_types"`

			// The name of the endpoint
			Name string `json:"name"`

			// The webhook signing secret used to verify webhook requests.
			Secret string `json:"secret"`

			// The slug of the endpoint
			Slug string `json:"slug"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`

			// The URL of the endpoint.
			Url string `json:"url"`
		} `json:"attributes"`

		// Unique ID of the webhooks_endpoint
		Id   string                           `json:"id"`
		Type WebhooksEndpointResponseDataType `json:"type"`
	} `json:"data"`
}

// WebhooksEndpointResponseDataAttributesEventTypes defines model for WebhooksEndpointResponse.Data.Attributes.EventTypes.
type WebhooksEndpointResponseDataAttributesEventTypes string

// WebhooksEndpointResponseDataType defines model for WebhooksEndpointResponse.Data.Type.
type WebhooksEndpointResponseDataType string

// Workflow defines model for workflow.
type Workflow struct {
	CauseIds *[]string `json:"cause_ids,omitempty"`

	// Workflow command
	Command *string `json:"command"`

	// This will notify you back when the workflow is starting
	CommandFeedbackEnabled *bool `json:"command_feedback_enabled"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the workflow
	Description      *string   `json:"description"`
	Enabled          *bool     `json:"enabled,omitempty"`
	EnvironmentIds   *[]string `json:"environment_ids,omitempty"`
	FunctionalityIds *[]string `json:"functionality_ids,omitempty"`
	GroupIds         *[]string `json:"group_ids,omitempty"`
	IncidentRoleIds  *[]string `json:"incident_role_ids,omitempty"`
	IncidentTypeIds  *[]string `json:"incident_type_ids,omitempty"`

	// The title of the workflow
	Name string `json:"name"`

	// The order which the workflow should run with other workflows.
	Position *float32 `json:"position,omitempty"`

	// Repeat workflow every duration
	RepeatEveryDuration *string             `json:"repeat_every_duration"`
	RepeatOn            *[]WorkflowRepeatOn `json:"repeat_on"`
	ServiceIds          *[]string           `json:"service_ids,omitempty"`
	SeverityIds         *[]string           `json:"severity_ids,omitempty"`

	// The slug of the workflow
	Slug          *string      `json:"slug,omitempty"`
	TriggerParams *interface{} `json:"trigger_params,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// Wait this duration before executing
	Wait *string `json:"wait"`

	// The group this workflow belongs to.
	WorkflowGroupId *string `json:"workflow_group_id,omitempty"`
}

// Repeat on weekdays
type WorkflowRepeatOn string

// WorkflowCustomFieldSelection defines model for workflow_custom_field_selection.
type WorkflowCustomFieldSelection struct {
	// The custom field for this selection
	CustomFieldId float32 `json:"custom_field_id"`

	// The trigger condition
	IncidentCondition WorkflowCustomFieldSelectionIncidentCondition `json:"incident_condition"`
	SelectedOptionIds []float32                                     `json:"selected_option_ids"`
	Values            *[]string                                     `json:"values,omitempty"`

	// The workflow for this selection
	WorkflowId string `json:"workflow_id"`
}

// The trigger condition
type WorkflowCustomFieldSelectionIncidentCondition string

// WorkflowCustomFieldSelectionList defines model for workflow_custom_field_selection_list.
type WorkflowCustomFieldSelectionList struct {
	Data []struct {
		Attributes struct {
			// The custom field for this selection
			CustomFieldId float32 `json:"custom_field_id"`

			// The trigger condition
			IncidentCondition WorkflowCustomFieldSelectionListDataAttributesIncidentCondition `json:"incident_condition"`
			SelectedOptionIds []float32                                                       `json:"selected_option_ids"`
			Values            *[]string                                                       `json:"values,omitempty"`

			// The workflow for this selection
			WorkflowId string `json:"workflow_id"`
		} `json:"attributes"`

		// Unique ID of the workflow_custom_field_selection
		Id   string                                   `json:"id"`
		Type WorkflowCustomFieldSelectionListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The trigger condition
type WorkflowCustomFieldSelectionListDataAttributesIncidentCondition string

// WorkflowCustomFieldSelectionListDataType defines model for WorkflowCustomFieldSelectionList.Data.Type.
type WorkflowCustomFieldSelectionListDataType string

// WorkflowCustomFieldSelectionResponse defines model for workflow_custom_field_selection_response.
type WorkflowCustomFieldSelectionResponse struct {
	Data struct {
		Attributes struct {
			// The custom field for this selection
			CustomFieldId float32 `json:"custom_field_id"`

			// The trigger condition
			IncidentCondition WorkflowCustomFieldSelectionResponseDataAttributesIncidentCondition `json:"incident_condition"`
			SelectedOptionIds []float32                                                           `json:"selected_option_ids"`
			Values            *[]string                                                           `json:"values,omitempty"`

			// The workflow for this selection
			WorkflowId string `json:"workflow_id"`
		} `json:"attributes"`

		// Unique ID of the workflow_custom_field_selection
		Id   string                                       `json:"id"`
		Type WorkflowCustomFieldSelectionResponseDataType `json:"type"`
	} `json:"data"`
}

// The trigger condition
type WorkflowCustomFieldSelectionResponseDataAttributesIncidentCondition string

// WorkflowCustomFieldSelectionResponseDataType defines model for WorkflowCustomFieldSelectionResponse.Data.Type.
type WorkflowCustomFieldSelectionResponseDataType string

// WorkflowFormFieldCondition defines model for workflow_form_field_condition.
type WorkflowFormFieldCondition struct {
	// The custom field for this condition
	FormFieldId string `json:"form_field_id"`

	// The trigger condition
	IncidentCondition WorkflowFormFieldConditionIncidentCondition `json:"incident_condition"`
	SelectedOptionIds []string                                    `json:"selected_option_ids"`
	SelectedUserIds   []float32                                   `json:"selected_user_ids"`
	Values            *[]string                                   `json:"values,omitempty"`

	// The workflow for this condition
	WorkflowId string `json:"workflow_id"`
}

// The trigger condition
type WorkflowFormFieldConditionIncidentCondition string

// WorkflowFormFieldConditionList defines model for workflow_form_field_condition_list.
type WorkflowFormFieldConditionList struct {
	Data []struct {
		Attributes struct {
			// The custom field for this condition
			FormFieldId string `json:"form_field_id"`

			// The trigger condition
			IncidentCondition WorkflowFormFieldConditionListDataAttributesIncidentCondition `json:"incident_condition"`
			SelectedOptionIds []string                                                      `json:"selected_option_ids"`
			SelectedUserIds   []float32                                                     `json:"selected_user_ids"`
			Values            *[]string                                                     `json:"values,omitempty"`

			// The workflow for this condition
			WorkflowId string `json:"workflow_id"`
		} `json:"attributes"`

		// Unique ID of the workflow_form_field_condition
		Id   string                                 `json:"id"`
		Type WorkflowFormFieldConditionListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The trigger condition
type WorkflowFormFieldConditionListDataAttributesIncidentCondition string

// WorkflowFormFieldConditionListDataType defines model for WorkflowFormFieldConditionList.Data.Type.
type WorkflowFormFieldConditionListDataType string

// WorkflowFormFieldConditionResponse defines model for workflow_form_field_condition_response.
type WorkflowFormFieldConditionResponse struct {
	Data struct {
		Attributes struct {
			// The custom field for this condition
			FormFieldId string `json:"form_field_id"`

			// The trigger condition
			IncidentCondition WorkflowFormFieldConditionResponseDataAttributesIncidentCondition `json:"incident_condition"`
			SelectedOptionIds []string                                                          `json:"selected_option_ids"`
			SelectedUserIds   []float32                                                         `json:"selected_user_ids"`
			Values            *[]string                                                         `json:"values,omitempty"`

			// The workflow for this condition
			WorkflowId string `json:"workflow_id"`
		} `json:"attributes"`

		// Unique ID of the workflow_form_field_condition
		Id   string                                     `json:"id"`
		Type WorkflowFormFieldConditionResponseDataType `json:"type"`
	} `json:"data"`
}

// The trigger condition
type WorkflowFormFieldConditionResponseDataAttributesIncidentCondition string

// WorkflowFormFieldConditionResponseDataType defines model for WorkflowFormFieldConditionResponse.Data.Type.
type WorkflowFormFieldConditionResponseDataType string

// WorkflowGroup defines model for workflow_group.
type WorkflowGroup struct {
	// Whether the group is expanded or collapsed.
	Expanded *bool `json:"expanded,omitempty"`

	// The kind of the workflow group
	Kind WorkflowGroupKind `json:"kind"`

	// The name of the workflow group.
	Name string `json:"name"`

	// The position of the workflow group
	Position float32 `json:"position"`

	// The slug of the workflow group.
	Slug *string `json:"slug,omitempty"`
}

// The kind of the workflow group
type WorkflowGroupKind string

// WorkflowGroupList defines model for workflow_group_list.
type WorkflowGroupList struct {
	Data []struct {
		Attributes struct {
			// Whether the group is expanded or collapsed.
			Expanded *bool `json:"expanded,omitempty"`

			// The kind of the workflow group
			Kind WorkflowGroupListDataAttributesKind `json:"kind"`

			// The name of the workflow group.
			Name string `json:"name"`

			// The position of the workflow group
			Position float32 `json:"position"`

			// The slug of the workflow group.
			Slug *string `json:"slug,omitempty"`
		} `json:"attributes"`

		// Unique ID of the workflow group
		Id   string                    `json:"id"`
		Type WorkflowGroupListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// The kind of the workflow group
type WorkflowGroupListDataAttributesKind string

// WorkflowGroupListDataType defines model for WorkflowGroupList.Data.Type.
type WorkflowGroupListDataType string

// WorkflowGroupResponse defines model for workflow_group_response.
type WorkflowGroupResponse struct {
	Data struct {
		Attributes struct {
			// Whether the group is expanded or collapsed.
			Expanded *bool `json:"expanded,omitempty"`

			// The kind of the workflow group
			Kind WorkflowGroupResponseDataAttributesKind `json:"kind"`

			// The name of the workflow group.
			Name string `json:"name"`

			// The position of the workflow group
			Position float32 `json:"position"`

			// The slug of the workflow group.
			Slug *string `json:"slug,omitempty"`
		} `json:"attributes"`

		// Unique ID of the workflow group
		Id   string                        `json:"id"`
		Type WorkflowGroupResponseDataType `json:"type"`
	} `json:"data"`
}

// The kind of the workflow group
type WorkflowGroupResponseDataAttributesKind string

// WorkflowGroupResponseDataType defines model for WorkflowGroupResponse.Data.Type.
type WorkflowGroupResponseDataType string

// WorkflowList defines model for workflow_list.
type WorkflowList struct {
	Data []struct {
		Attributes struct {
			CauseIds *[]string `json:"cause_ids,omitempty"`

			// Workflow command
			Command *string `json:"command"`

			// This will notify you back when the workflow is starting
			CommandFeedbackEnabled *bool `json:"command_feedback_enabled"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the workflow
			Description      *string   `json:"description"`
			Enabled          *bool     `json:"enabled,omitempty"`
			EnvironmentIds   *[]string `json:"environment_ids,omitempty"`
			FunctionalityIds *[]string `json:"functionality_ids,omitempty"`
			GroupIds         *[]string `json:"group_ids,omitempty"`
			IncidentRoleIds  *[]string `json:"incident_role_ids,omitempty"`
			IncidentTypeIds  *[]string `json:"incident_type_ids,omitempty"`

			// The title of the workflow
			Name string `json:"name"`

			// The order which the workflow should run with other workflows.
			Position *float32 `json:"position,omitempty"`

			// Repeat workflow every duration
			RepeatEveryDuration *string                               `json:"repeat_every_duration"`
			RepeatOn            *[]WorkflowListDataAttributesRepeatOn `json:"repeat_on"`
			ServiceIds          *[]string                             `json:"service_ids,omitempty"`
			SeverityIds         *[]string                             `json:"severity_ids,omitempty"`

			// The slug of the workflow
			Slug          *string      `json:"slug,omitempty"`
			TriggerParams *interface{} `json:"trigger_params,omitempty"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`

			// Wait this duration before executing
			Wait *string `json:"wait"`

			// The group this workflow belongs to.
			WorkflowGroupId *string `json:"workflow_group_id,omitempty"`
		} `json:"attributes"`

		// Unique ID of the workflow
		Id   string               `json:"id"`
		Type WorkflowListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// Repeat on weekdays
type WorkflowListDataAttributesRepeatOn string

// WorkflowListDataType defines model for WorkflowList.Data.Type.
type WorkflowListDataType string

// WorkflowResponse defines model for workflow_response.
type WorkflowResponse struct {
	Data struct {
		Attributes struct {
			CauseIds *[]string `json:"cause_ids,omitempty"`

			// Workflow command
			Command *string `json:"command"`

			// This will notify you back when the workflow is starting
			CommandFeedbackEnabled *bool `json:"command_feedback_enabled"`

			// Date of creation
			CreatedAt string `json:"created_at"`

			// The description of the workflow
			Description      *string   `json:"description"`
			Enabled          *bool     `json:"enabled,omitempty"`
			EnvironmentIds   *[]string `json:"environment_ids,omitempty"`
			FunctionalityIds *[]string `json:"functionality_ids,omitempty"`
			GroupIds         *[]string `json:"group_ids,omitempty"`
			IncidentRoleIds  *[]string `json:"incident_role_ids,omitempty"`
			IncidentTypeIds  *[]string `json:"incident_type_ids,omitempty"`

			// The title of the workflow
			Name string `json:"name"`

			// The order which the workflow should run with other workflows.
			Position *float32 `json:"position,omitempty"`

			// Repeat workflow every duration
			RepeatEveryDuration *string                                   `json:"repeat_every_duration"`
			RepeatOn            *[]WorkflowResponseDataAttributesRepeatOn `json:"repeat_on"`
			ServiceIds          *[]string                                 `json:"service_ids,omitempty"`
			SeverityIds         *[]string                                 `json:"severity_ids,omitempty"`

			// The slug of the workflow
			Slug          *string      `json:"slug,omitempty"`
			TriggerParams *interface{} `json:"trigger_params,omitempty"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`

			// Wait this duration before executing
			Wait *string `json:"wait"`

			// The group this workflow belongs to.
			WorkflowGroupId *string `json:"workflow_group_id,omitempty"`
		} `json:"attributes"`

		// Unique ID of the workflow
		Id   string                   `json:"id"`
		Type WorkflowResponseDataType `json:"type"`
	} `json:"data"`
}

// Repeat on weekdays
type WorkflowResponseDataAttributesRepeatOn string

// WorkflowResponseDataType defines model for WorkflowResponse.Data.Type.
type WorkflowResponseDataType string

// WorkflowRun defines model for workflow_run.
type WorkflowRun struct {
	ActionItemId  *string                `json:"action_item_id"`
	AlertId       *string                `json:"alert_id"`
	CanceledAt    *string                `json:"canceled_at"`
	CompletedAt   *string                `json:"completed_at"`
	FailedAt      *string                `json:"failed_at"`
	IncidentId    *string                `json:"incident_id"`
	PostMortemId  *string                `json:"post_mortem_id"`
	PulseId       *string                `json:"pulse_id"`
	StartedAt     *string                `json:"started_at"`
	Status        WorkflowRunStatus      `json:"status"`
	StatusMessage *string                `json:"status_message"`
	TriggeredBy   WorkflowRunTriggeredBy `json:"triggered_by"`
	WorkflowId    string                 `json:"workflow_id"`
}

// WorkflowRunStatus defines model for WorkflowRun.Status.
type WorkflowRunStatus string

// WorkflowRunTriggeredBy defines model for WorkflowRun.TriggeredBy.
type WorkflowRunTriggeredBy string

// WorkflowRunResponse defines model for workflow_run_response.
type WorkflowRunResponse struct {
	Data struct {
		Attributes struct {
			ActionItemId  *string                                      `json:"action_item_id"`
			AlertId       *string                                      `json:"alert_id"`
			CanceledAt    *string                                      `json:"canceled_at"`
			CompletedAt   *string                                      `json:"completed_at"`
			FailedAt      *string                                      `json:"failed_at"`
			IncidentId    *string                                      `json:"incident_id"`
			PostMortemId  *string                                      `json:"post_mortem_id"`
			PulseId       *string                                      `json:"pulse_id"`
			StartedAt     *string                                      `json:"started_at"`
			Status        WorkflowRunResponseDataAttributesStatus      `json:"status"`
			StatusMessage *string                                      `json:"status_message"`
			TriggeredBy   WorkflowRunResponseDataAttributesTriggeredBy `json:"triggered_by"`
			WorkflowId    string                                       `json:"workflow_id"`
		} `json:"attributes"`

		// Unique ID of the workflow run
		Id   string                      `json:"id"`
		Type WorkflowRunResponseDataType `json:"type"`
	} `json:"data"`
}

// WorkflowRunResponseDataAttributesStatus defines model for WorkflowRunResponse.Data.Attributes.Status.
type WorkflowRunResponseDataAttributesStatus string

// WorkflowRunResponseDataAttributesTriggeredBy defines model for WorkflowRunResponse.Data.Attributes.TriggeredBy.
type WorkflowRunResponseDataAttributesTriggeredBy string

// WorkflowRunResponseDataType defines model for WorkflowRunResponse.Data.Type.
type WorkflowRunResponseDataType string

// WorkflowRunsList defines model for workflow_runs_list.
type WorkflowRunsList struct {
	Data []struct {
		Attributes struct {
			ActionItemId  *string                                   `json:"action_item_id"`
			AlertId       *string                                   `json:"alert_id"`
			CanceledAt    *string                                   `json:"canceled_at"`
			CompletedAt   *string                                   `json:"completed_at"`
			FailedAt      *string                                   `json:"failed_at"`
			IncidentId    *string                                   `json:"incident_id"`
			PostMortemId  *string                                   `json:"post_mortem_id"`
			PulseId       *string                                   `json:"pulse_id"`
			StartedAt     *string                                   `json:"started_at"`
			Status        WorkflowRunsListDataAttributesStatus      `json:"status"`
			StatusMessage *string                                   `json:"status_message"`
			TriggeredBy   WorkflowRunsListDataAttributesTriggeredBy `json:"triggered_by"`
			WorkflowId    string                                    `json:"workflow_id"`
		} `json:"attributes"`

		// Unique ID of the workflow run
		Id   string                   `json:"id"`
		Type WorkflowRunsListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// WorkflowRunsListDataAttributesStatus defines model for WorkflowRunsList.Data.Attributes.Status.
type WorkflowRunsListDataAttributesStatus string

// WorkflowRunsListDataAttributesTriggeredBy defines model for WorkflowRunsList.Data.Attributes.TriggeredBy.
type WorkflowRunsListDataAttributesTriggeredBy string

// WorkflowRunsListDataType defines model for WorkflowRunsList.Data.Type.
type WorkflowRunsListDataType string

// WorkflowTask defines model for workflow_task.
type WorkflowTask struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// Enable/disable workflow task
	Enabled bool `json:"enabled"`

	// Name of the workflow task
	Name *string `json:"name,omitempty"`

	// The position of the workflow task
	Position float32 `json:"position"`

	// Skip workflow task if any failures
	SkipOnFailure bool        `json:"skip_on_failure"`
	TaskParams    interface{} `json:"task_params"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The ID of the parent workflow
	WorkflowId string `json:"workflow_id"`
}

// WorkflowTaskList defines model for workflow_task_list.
type WorkflowTaskList struct {
	Data []struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// Enable/disable workflow task
			Enabled bool `json:"enabled"`

			// Name of the workflow task
			Name *string `json:"name,omitempty"`

			// The position of the workflow task
			Position float32 `json:"position"`

			// Skip workflow task if any failures
			SkipOnFailure bool        `json:"skip_on_failure"`
			TaskParams    interface{} `json:"task_params"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`

			// The ID of the parent workflow
			WorkflowId string `json:"workflow_id"`
		} `json:"attributes"`

		// Unique ID of the workflow task
		Id   string                   `json:"id"`
		Type WorkflowTaskListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		First string  `json:"first"`
		Last  string  `json:"last"`
		Next  *string `json:"next"`
		Prev  *string `json:"prev"`
		Self  string  `json:"self"`
	} `json:"links"`
}

// WorkflowTaskListDataType defines model for WorkflowTaskList.Data.Type.
type WorkflowTaskListDataType string

// WorkflowTaskResponse defines model for workflow_task_response.
type WorkflowTaskResponse struct {
	Data struct {
		Attributes struct {
			// Date of creation
			CreatedAt string `json:"created_at"`

			// Enable/disable workflow task
			Enabled bool `json:"enabled"`

			// Name of the workflow task
			Name *string `json:"name,omitempty"`

			// The position of the workflow task
			Position float32 `json:"position"`

			// Skip workflow task if any failures
			SkipOnFailure bool        `json:"skip_on_failure"`
			TaskParams    interface{} `json:"task_params"`

			// Date of last update
			UpdatedAt string `json:"updated_at"`

			// The ID of the parent workflow
			WorkflowId string `json:"workflow_id"`
		} `json:"attributes"`

		// Unique ID of the workflow task
		Id   string                       `json:"id"`
		Type WorkflowTaskResponseDataType `json:"type"`
	} `json:"data"`
}

// WorkflowTaskResponseDataType defines model for WorkflowTaskResponse.Data.Type.
type WorkflowTaskResponseDataType string

// ListAllIncidentActionItemsParams defines parameters for ListAllIncidentActionItems.
type ListAllIncidentActionItemsParams struct {
	Include                    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber                 *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize                   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterKind                 *string `form:"filter[kind],omitempty" json:"filter[kind],omitempty"`
	FilterPriority             *string `form:"filter[priority],omitempty" json:"filter[priority],omitempty"`
	FilterStatus               *string `form:"filter[status],omitempty" json:"filter[status],omitempty"`
	FilterIncidentStatus       *string `form:"filter[incident_status],omitempty" json:"filter[incident_status],omitempty"`
	FilterIncidentCreatedAtGt  *string `form:"filter[incident_created_at][gt],omitempty" json:"filter[incident_created_at][gt],omitempty"`
	FilterIncidentCreatedAtGte *string `form:"filter[incident_created_at][gte],omitempty" json:"filter[incident_created_at][gte],omitempty"`
	FilterIncidentCreatedAtLt  *string `form:"filter[incident_created_at][lt],omitempty" json:"filter[incident_created_at][lt],omitempty"`
	FilterIncidentCreatedAtLte *string `form:"filter[incident_created_at][lte],omitempty" json:"filter[incident_created_at][lte],omitempty"`
	FilterDueDateGt            *string `form:"filter[due_date][gt],omitempty" json:"filter[due_date][gt],omitempty"`
	FilterDueDateGte           *string `form:"filter[due_date][gte],omitempty" json:"filter[due_date][gte],omitempty"`
	FilterDueDateLt            *string `form:"filter[due_date][lt],omitempty" json:"filter[due_date][lt],omitempty"`
	FilterDueDateLte           *string `form:"filter[due_date][lte],omitempty" json:"filter[due_date][lte],omitempty"`
	FilterCreatedAtGt          *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte         *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt          *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte         *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort                       *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListAlertsParams defines parameters for ListAlerts.
type ListAlertsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListAuditsParams defines parameters for ListAudits.
type ListAuditsParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	FilterUserId       *string `form:"filter[user_id],omitempty" json:"filter[user_id],omitempty"`
	FilterItemType     *string `form:"filter[item_type],omitempty" json:"filter[item_type],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListAuthorizationsParams defines parameters for ListAuthorizations.
type ListAuthorizationsParams struct {
	Include                *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber             *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize               *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterAuthorizableId   *string `form:"filter[authorizable_id],omitempty" json:"filter[authorizable_id],omitempty"`
	FilterAuthorizableType *string `form:"filter[authorizable_type],omitempty" json:"filter[authorizable_type],omitempty"`
	FilterGranteeId        *string `form:"filter[grantee_id],omitempty" json:"filter[grantee_id],omitempty"`
	FilterGranteeType      *string `form:"filter[grantee_type],omitempty" json:"filter[grantee_type],omitempty"`
	FilterCreatedAtGt      *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte     *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt      *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte     *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort                   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListCausesParams defines parameters for ListCauses.
type ListCausesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
}

// ListCustomFieldsParams defines parameters for ListCustomFields.
type ListCustomFieldsParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterLabel        *string `form:"filter[label],omitempty" json:"filter[label],omitempty"`
	FilterKind         *string `form:"filter[kind],omitempty" json:"filter[kind],omitempty"`
	FilterEnabled      *bool   `form:"filter[enabled],omitempty" json:"filter[enabled],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
}

// ListCustomFieldOptionsParams defines parameters for ListCustomFieldOptions.
type ListCustomFieldOptionsParams struct {
	Include     *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber  *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize    *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterValue *string `form:"filter[value],omitempty" json:"filter[value],omitempty"`
	FilterColor *string `form:"filter[color],omitempty" json:"filter[color],omitempty"`
}

// GetDashboardPanelParams defines parameters for GetDashboardPanel.
type GetDashboardPanelParams struct {
	// Date range for panel data, ISO8601 timestamps separated by the word 'to'. Ex: '2022-06-19T11:28:46.029Z to 2022-07-18T21:58:46.029Z'.
	Range *string `form:"range,omitempty" json:"range,omitempty"`

	// The time period to group data by. Accepts 'day', 'week', and 'month'
	Period *string `form:"period,omitempty" json:"period,omitempty"`

	// The time zone to use for period
	TimeZone *string `form:"time_zone,omitempty" json:"time_zone,omitempty"`
}

// ListDashboardsParams defines parameters for ListDashboards.
type ListDashboardsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListDashboardPanelsParams defines parameters for ListDashboardPanels.
type ListDashboardPanelsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListEnvironmentsParams defines parameters for ListEnvironments.
type ListEnvironmentsParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterColor        *string `form:"filter[color],omitempty" json:"filter[color],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListIncidentEventFunctionalitiesParams defines parameters for ListIncidentEventFunctionalities.
type ListIncidentEventFunctionalitiesParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListIncidentEventServicesParams defines parameters for ListIncidentEventServices.
type ListIncidentEventServicesParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListFormFieldsParams defines parameters for ListFormFields.
type ListFormFieldsParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterKind         *string `form:"filter[kind],omitempty" json:"filter[kind],omitempty"`
	FilterEnabled      *bool   `form:"filter[enabled],omitempty" json:"filter[enabled],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
}

// ListFormFieldOptionsParams defines parameters for ListFormFieldOptions.
type ListFormFieldOptionsParams struct {
	Include     *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber  *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize    *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterValue *string `form:"filter[value],omitempty" json:"filter[value],omitempty"`
	FilterColor *string `form:"filter[color],omitempty" json:"filter[color],omitempty"`
}

// ListFormFieldPositionsParams defines parameters for ListFormFieldPositions.
type ListFormFieldPositionsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterForm *string `form:"filter[form],omitempty" json:"filter[form],omitempty"`
}

// ListFunctionalitiesParams defines parameters for ListFunctionalities.
type ListFunctionalitiesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetFunctionalityIncidentsChartParams defines parameters for GetFunctionalityIncidentsChart.
type GetFunctionalityIncidentsChartParams struct {
	Period string `form:"period" json:"period"`
}

// GetFunctionalityUptimeChartParams defines parameters for GetFunctionalityUptimeChart.
type GetFunctionalityUptimeChartParams struct {
	Period *string `form:"period,omitempty" json:"period,omitempty"`
}

// ListIncidentPermissionSetsParams defines parameters for ListIncidentPermissionSets.
type ListIncidentPermissionSetsParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListIncidentPermissionSetBooleansParams defines parameters for ListIncidentPermissionSetBooleans.
type ListIncidentPermissionSetBooleansParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterKind         *string `form:"filter[kind],omitempty" json:"filter[kind],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListIncidentPermissionSetResourcesParams defines parameters for ListIncidentPermissionSetResources.
type ListIncidentPermissionSetResourcesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterKind         *string `form:"filter[kind],omitempty" json:"filter[kind],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListIncidentRolesParams defines parameters for ListIncidentRoles.
type ListIncidentRolesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterEnabled      *bool   `form:"filter[enabled],omitempty" json:"filter[enabled],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListIncidentRoleTasksParams defines parameters for ListIncidentRoleTasks.
type ListIncidentRoleTasksParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListIncidentTypesParams defines parameters for ListIncidentTypes.
type ListIncidentTypesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterColor        *string `form:"filter[color],omitempty" json:"filter[color],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListIncidentsParams defines parameters for ListIncidents.
type ListIncidentsParams struct {
	Include                            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber                         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize                           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch                       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterKind                         *string `form:"filter[kind],omitempty" json:"filter[kind],omitempty"`
	FilterStatus                       *string `form:"filter[status],omitempty" json:"filter[status],omitempty"`
	FilterUserId                       *int    `form:"filter[user_id],omitempty" json:"filter[user_id],omitempty"`
	FilterSeverity                     *string `form:"filter[severity],omitempty" json:"filter[severity],omitempty"`
	FilterSeverityId                   *string `form:"filter[severity_id],omitempty" json:"filter[severity_id],omitempty"`
	FilterLabels                       *string `form:"filter[labels],omitempty" json:"filter[labels],omitempty"`
	FilterTypes                        *string `form:"filter[types],omitempty" json:"filter[types],omitempty"`
	FilterTypeIds                      *string `form:"filter[type_ids],omitempty" json:"filter[type_ids],omitempty"`
	FilterEnvironments                 *string `form:"filter[environments],omitempty" json:"filter[environments],omitempty"`
	FilterEnvironmentIds               *string `form:"filter[environment_ids],omitempty" json:"filter[environment_ids],omitempty"`
	FilterFunctionalities              *string `form:"filter[functionalities],omitempty" json:"filter[functionalities],omitempty"`
	FilterFunctionalityIds             *string `form:"filter[functionality_ids],omitempty" json:"filter[functionality_ids],omitempty"`
	FilterServices                     *string `form:"filter[services],omitempty" json:"filter[services],omitempty"`
	FilterServiceIds                   *string `form:"filter[service_ids],omitempty" json:"filter[service_ids],omitempty"`
	FilterTeams                        *string `form:"filter[teams],omitempty" json:"filter[teams],omitempty"`
	FilterTeamIds                      *string `form:"filter[team_ids],omitempty" json:"filter[team_ids],omitempty"`
	FilterCause                        *string `form:"filter[cause],omitempty" json:"filter[cause],omitempty"`
	FilterCauseIds                     *string `form:"filter[cause_ids],omitempty" json:"filter[cause_ids],omitempty"`
	FilterCustomFieldSelectedOptionIds *string `form:"filter[custom_field_selected_option_ids],omitempty" json:"filter[custom_field_selected_option_ids],omitempty"`
	FilterCreatedAtGt                  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte                 *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt                  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte                 *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	FilterUpdatedAtGt                  *string `form:"filter[updated_at][gt],omitempty" json:"filter[updated_at][gt],omitempty"`
	FilterUpdatedAtGte                 *string `form:"filter[updated_at][gte],omitempty" json:"filter[updated_at][gte],omitempty"`
	FilterUpdatedAtLt                  *string `form:"filter[updated_at][lt],omitempty" json:"filter[updated_at][lt],omitempty"`
	FilterUpdatedAtLte                 *string `form:"filter[updated_at][lte],omitempty" json:"filter[updated_at][lte],omitempty"`
	FilterStartedAtGt                  *string `form:"filter[started_at][gt],omitempty" json:"filter[started_at][gt],omitempty"`
	FilterStartedAtGte                 *string `form:"filter[started_at][gte],omitempty" json:"filter[started_at][gte],omitempty"`
	FilterStartedAtLt                  *string `form:"filter[started_at][lt],omitempty" json:"filter[started_at][lt],omitempty"`
	FilterStartedAtLte                 *string `form:"filter[started_at][lte],omitempty" json:"filter[started_at][lte],omitempty"`
	FilterDetectedAtGt                 *string `form:"filter[detected_at][gt],omitempty" json:"filter[detected_at][gt],omitempty"`
	FilterDetectedAtGte                *string `form:"filter[detected_at][gte],omitempty" json:"filter[detected_at][gte],omitempty"`
	FilterDetectedAtLt                 *string `form:"filter[detected_at][lt],omitempty" json:"filter[detected_at][lt],omitempty"`
	FilterDetectedAtLte                *string `form:"filter[detected_at][lte],omitempty" json:"filter[detected_at][lte],omitempty"`
	FilterAcknowledgedAtGt             *string `form:"filter[acknowledged_at][gt],omitempty" json:"filter[acknowledged_at][gt],omitempty"`
	FilterAcknowledgedAtGte            *string `form:"filter[acknowledged_at][gte],omitempty" json:"filter[acknowledged_at][gte],omitempty"`
	FilterAcknowledgedAtLt             *string `form:"filter[acknowledged_at][lt],omitempty" json:"filter[acknowledged_at][lt],omitempty"`
	FilterAcknowledgedAtLte            *string `form:"filter[acknowledged_at][lte],omitempty" json:"filter[acknowledged_at][lte],omitempty"`
	FilterMitigatedAtGt                *string `form:"filter[mitigated_at][gt],omitempty" json:"filter[mitigated_at][gt],omitempty"`
	FilterMitigatedAtGte               *string `form:"filter[mitigated_at][gte],omitempty" json:"filter[mitigated_at][gte],omitempty"`
	FilterMitigatedAtLt                *string `form:"filter[mitigated_at][lt],omitempty" json:"filter[mitigated_at][lt],omitempty"`
	FilterMitigatedAtLte               *string `form:"filter[mitigated_at][lte],omitempty" json:"filter[mitigated_at][lte],omitempty"`
	FilterResolvedAtGt                 *string `form:"filter[resolved_at][gt],omitempty" json:"filter[resolved_at][gt],omitempty"`
	FilterResolvedAtGte                *string `form:"filter[resolved_at][gte],omitempty" json:"filter[resolved_at][gte],omitempty"`
	FilterResolvedAtLt                 *string `form:"filter[resolved_at][lt],omitempty" json:"filter[resolved_at][lt],omitempty"`
	FilterResolvedAtLte                *string `form:"filter[resolved_at][lte],omitempty" json:"filter[resolved_at][lte],omitempty"`
	FilterInTriageAtGt                 *string `form:"filter[in_triage_at][gt],omitempty" json:"filter[in_triage_at][gt],omitempty"`
	FilterInTriageAtGte                *string `form:"filter[in_triage_at][gte],omitempty" json:"filter[in_triage_at][gte],omitempty"`
	FilterInTriageAtLt                 *string `form:"filter[in_triage_at][lt],omitempty" json:"filter[in_triage_at][lt],omitempty"`
	FilterInTriageAtLte                *string `form:"filter[in_triage_at][lte],omitempty" json:"filter[in_triage_at][lte],omitempty"`
	Sort                               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListIncidentActionItemsParams defines parameters for ListIncidentActionItems.
type ListIncidentActionItemsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListIncidentAlertsParams defines parameters for ListIncidentAlerts.
type ListIncidentAlertsParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	FilterSource       *string `form:"filter[source],omitempty" json:"filter[source],omitempty"`
	FilterServices     *string `form:"filter[services],omitempty" json:"filter[services],omitempty"`
	FilterEnvironments *string `form:"filter[environments],omitempty" json:"filter[environments],omitempty"`
	FilterLabels       *string `form:"filter[labels],omitempty" json:"filter[labels],omitempty"`
	FilterStartedAtGt  *string `form:"filter[started_at][gt],omitempty" json:"filter[started_at][gt],omitempty"`
	FilterStartedAtGte *string `form:"filter[started_at][gte],omitempty" json:"filter[started_at][gte],omitempty"`
	FilterStartedAtLt  *string `form:"filter[started_at][lt],omitempty" json:"filter[started_at][lt],omitempty"`
	FilterStartedAtLte *string `form:"filter[started_at][lte],omitempty" json:"filter[started_at][lte],omitempty"`
	FilterEndedAtGt    *string `form:"filter[ended_at][gt],omitempty" json:"filter[ended_at][gt],omitempty"`
	FilterEndedAtGte   *string `form:"filter[ended_at][gte],omitempty" json:"filter[ended_at][gte],omitempty"`
	FilterEndedAtLt    *string `form:"filter[ended_at][lt],omitempty" json:"filter[ended_at][lt],omitempty"`
	FilterEndedAtLte   *string `form:"filter[ended_at][lte],omitempty" json:"filter[ended_at][lte],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListIncidentCustomFieldSelectionsParams defines parameters for ListIncidentCustomFieldSelections.
type ListIncidentCustomFieldSelectionsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListIncidentEventsParams defines parameters for ListIncidentEvents.
type ListIncidentEventsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListIncidentFeedbacksParams defines parameters for ListIncidentFeedbacks.
type ListIncidentFeedbacksParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListIncidentFormFieldSelectionsParams defines parameters for ListIncidentFormFieldSelections.
type ListIncidentFormFieldSelectionsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListIncidentStatusPagesParams defines parameters for ListIncidentStatusPages.
type ListIncidentStatusPagesParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListPlaybooksParams defines parameters for ListPlaybooks.
type ListPlaybooksParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListPlaybookTasksParams defines parameters for ListPlaybookTasks.
type ListPlaybookTasksParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListPostmortemTemplatesParams defines parameters for ListPostmortemTemplates.
type ListPostmortemTemplatesParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListIncidentPostMortemsParams defines parameters for ListIncidentPostMortems.
type ListIncidentPostMortemsParams struct {
	Include               *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber            *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize              *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch          *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterStatus          *string `form:"filter[status],omitempty" json:"filter[status],omitempty"`
	FilterSeverity        *string `form:"filter[severity],omitempty" json:"filter[severity],omitempty"`
	FilterType            *string `form:"filter[type],omitempty" json:"filter[type],omitempty"`
	FilterUserId          *int    `form:"filter[user_id],omitempty" json:"filter[user_id],omitempty"`
	FilterEnvironments    *string `form:"filter[environments],omitempty" json:"filter[environments],omitempty"`
	FilterFunctionalities *string `form:"filter[functionalities],omitempty" json:"filter[functionalities],omitempty"`
	FilterServices        *string `form:"filter[services],omitempty" json:"filter[services],omitempty"`
	FilterTeams           *string `form:"filter[teams],omitempty" json:"filter[teams],omitempty"`
	FilterCreatedAtGt     *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte    *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt     *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte    *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	FilterStartedAtGt     *string `form:"filter[started_at][gt],omitempty" json:"filter[started_at][gt],omitempty"`
	FilterStartedAtGte    *string `form:"filter[started_at][gte],omitempty" json:"filter[started_at][gte],omitempty"`
	FilterStartedAtLt     *string `form:"filter[started_at][lt],omitempty" json:"filter[started_at][lt],omitempty"`
	FilterStartedAtLte    *string `form:"filter[started_at][lte],omitempty" json:"filter[started_at][lte],omitempty"`
	FilterMitigatedAtGt   *string `form:"filter[mitigated_at][gt],omitempty" json:"filter[mitigated_at][gt],omitempty"`
	FilterMitigatedAtGte  *string `form:"filter[mitigated_at][gte],omitempty" json:"filter[mitigated_at][gte],omitempty"`
	FilterMitigatedAtLt   *string `form:"filter[mitigated_at][lt],omitempty" json:"filter[mitigated_at][lt],omitempty"`
	FilterMitigatedAtLte  *string `form:"filter[mitigated_at][lte],omitempty" json:"filter[mitigated_at][lte],omitempty"`
	FilterResolvedAtGt    *string `form:"filter[resolved_at][gt],omitempty" json:"filter[resolved_at][gt],omitempty"`
	FilterResolvedAtGte   *string `form:"filter[resolved_at][gte],omitempty" json:"filter[resolved_at][gte],omitempty"`
	FilterResolvedAtLt    *string `form:"filter[resolved_at][lt],omitempty" json:"filter[resolved_at][lt],omitempty"`
	FilterResolvedAtLte   *string `form:"filter[resolved_at][lte],omitempty" json:"filter[resolved_at][lte],omitempty"`
	Sort                  *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListPulsesParams defines parameters for ListPulses.
type ListPulsesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	FilterSource       *string `form:"filter[source],omitempty" json:"filter[source],omitempty"`
	FilterServices     *string `form:"filter[services],omitempty" json:"filter[services],omitempty"`
	FilterEnvironments *string `form:"filter[environments],omitempty" json:"filter[environments],omitempty"`
	FilterLabels       *string `form:"filter[labels],omitempty" json:"filter[labels],omitempty"`
	FilterRefs         *string `form:"filter[refs],omitempty" json:"filter[refs],omitempty"`
	FilterStartedAtGt  *string `form:"filter[started_at][gt],omitempty" json:"filter[started_at][gt],omitempty"`
	FilterStartedAtGte *string `form:"filter[started_at][gte],omitempty" json:"filter[started_at][gte],omitempty"`
	FilterStartedAtLt  *string `form:"filter[started_at][lt],omitempty" json:"filter[started_at][lt],omitempty"`
	FilterStartedAtLte *string `form:"filter[started_at][lte],omitempty" json:"filter[started_at][lte],omitempty"`
	FilterEndedAtGt    *string `form:"filter[ended_at][gt],omitempty" json:"filter[ended_at][gt],omitempty"`
	FilterEndedAtGte   *string `form:"filter[ended_at][gte],omitempty" json:"filter[ended_at][gte],omitempty"`
	FilterEndedAtLt    *string `form:"filter[ended_at][lt],omitempty" json:"filter[ended_at][lt],omitempty"`
	FilterEndedAtLte   *string `form:"filter[ended_at][lte],omitempty" json:"filter[ended_at][lte],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListRetrospectiveStepsParams defines parameters for ListRetrospectiveSteps.
type ListRetrospectiveStepsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	Sort       *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListRolesParams defines parameters for ListRoles.
type ListRolesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListSecretsParams defines parameters for ListSecrets.
type ListSecretsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListServicesParams defines parameters for ListServices.
type ListServicesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterBackstageId  *string `form:"filter[backstage_id],omitempty" json:"filter[backstage_id],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetServiceIncidentsChartParams defines parameters for GetServiceIncidentsChart.
type GetServiceIncidentsChartParams struct {
	Period string `form:"period" json:"period"`
}

// GetServiceUptimeChartParams defines parameters for GetServiceUptimeChart.
type GetServiceUptimeChartParams struct {
	Period *string `form:"period,omitempty" json:"period,omitempty"`
}

// ListSeveritiesParams defines parameters for ListSeverities.
type ListSeveritiesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterSeverity     *string `form:"filter[severity],omitempty" json:"filter[severity],omitempty"`
	FilterColor        *string `form:"filter[color],omitempty" json:"filter[color],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListStatusPagesParams defines parameters for ListStatusPages.
type ListStatusPagesParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListStatusPageTemplatesParams defines parameters for ListStatusPageTemplates.
type ListStatusPageTemplatesParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListTeamsParams defines parameters for ListTeams.
type ListTeamsParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterColor        *string `form:"filter[color],omitempty" json:"filter[color],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListUsersParams defines parameters for ListUsers.
type ListUsersParams struct {
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterEmail        *string `form:"filter[email],omitempty" json:"filter[email],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
	Sort               *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListWebhooksEndpointsParams defines parameters for ListWebhooksEndpoints.
type ListWebhooksEndpointsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSlug *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterName *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
}

// ListWebhooksDeliveriesParams defines parameters for ListWebhooksDeliveries.
type ListWebhooksDeliveriesParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListWorkflowGroupsParams defines parameters for ListWorkflowGroups.
type ListWorkflowGroupsParams struct {
	Include        *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber     *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize       *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch   *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterName     *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterSlug     *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterKind     *string `form:"filter[kind],omitempty" json:"filter[kind],omitempty"`
	FilterExpanded *bool   `form:"filter[expanded],omitempty" json:"filter[expanded],omitempty"`
	FilterPosition *int    `form:"filter[position],omitempty" json:"filter[position],omitempty"`
}

// ListWorkflowsParams defines parameters for ListWorkflows.
type ListWorkflowsParams struct {
	Include            *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber         *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize           *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch       *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterName         *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterSlug         *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
	FilterCreatedAtGt  *string `form:"filter[created_at][gt],omitempty" json:"filter[created_at][gt],omitempty"`
	FilterCreatedAtGte *string `form:"filter[created_at][gte],omitempty" json:"filter[created_at][gte],omitempty"`
	FilterCreatedAtLt  *string `form:"filter[created_at][lt],omitempty" json:"filter[created_at][lt],omitempty"`
	FilterCreatedAtLte *string `form:"filter[created_at][lte],omitempty" json:"filter[created_at][lte],omitempty"`
}

// ListWorkflowCustomFieldSelectionsParams defines parameters for ListWorkflowCustomFieldSelections.
type ListWorkflowCustomFieldSelectionsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListWorkflowFormFieldConditionsParams defines parameters for ListWorkflowFormFieldConditions.
type ListWorkflowFormFieldConditionsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListWorkflowRunsParams defines parameters for ListWorkflowRuns.
type ListWorkflowRunsParams struct {
	Include    *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize   *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// ListWorkflowTasksParams defines parameters for ListWorkflowTasks.
type ListWorkflowTasksParams struct {
	Include      *string `form:"include,omitempty" json:"include,omitempty"`
	PageNumber   *int    `form:"page[number],omitempty" json:"page[number],omitempty"`
	PageSize     *int    `form:"page[size],omitempty" json:"page[size],omitempty"`
	FilterSearch *string `form:"filter[search],omitempty" json:"filter[search],omitempty"`
	FilterName   *string `form:"filter[name],omitempty" json:"filter[name],omitempty"`
	FilterSlug   *string `form:"filter[slug],omitempty" json:"filter[slug],omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListAllIncidentActionItems request
	ListAllIncidentActionItems(ctx context.Context, params *ListAllIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentActionItem request
	DeleteIncidentActionItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentActionItems request
	GetIncidentActionItems(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentActionItem request with any body
	UpdateIncidentActionItemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAlerts request
	ListAlerts(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAlert request with any body
	CreateAlertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlert request
	GetAlert(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAudits request
	ListAudits(ctx context.Context, params *ListAuditsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAuthorizations request
	ListAuthorizations(ctx context.Context, params *ListAuthorizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAuthorization request with any body
	CreateAuthorizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAuthorization request
	DeleteAuthorization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthorization request
	GetAuthorization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAuthorization request with any body
	UpdateAuthorizationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCauses request
	ListCauses(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCause request with any body
	CreateCauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCause request
	DeleteCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCause request
	GetCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCause request with any body
	UpdateCauseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomFieldOption request
	DeleteCustomFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomFieldOption request
	GetCustomFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomFieldOption request with any body
	UpdateCustomFieldOptionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCustomFields request
	ListCustomFields(ctx context.Context, params *ListCustomFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomField request with any body
	CreateCustomFieldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCustomFieldOptions request
	ListCustomFieldOptions(ctx context.Context, customFieldId string, params *ListCustomFieldOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomFieldOption request with any body
	CreateCustomFieldOptionWithBody(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomField request
	DeleteCustomField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomField request
	GetCustomField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomField request with any body
	UpdateCustomFieldWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDashboardPanel request
	DeleteDashboardPanel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardPanel request
	GetDashboardPanel(ctx context.Context, id string, params *GetDashboardPanelParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDashboardPanel request with any body
	UpdateDashboardPanelWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DuplicateDashboardPanel request
	DuplicateDashboardPanel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDashboards request
	ListDashboards(ctx context.Context, params *ListDashboardsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDashboard request with any body
	CreateDashboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDashboardPanels request
	ListDashboardPanels(ctx context.Context, dashboardId string, params *ListDashboardPanelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDashboardPanel request with any body
	CreateDashboardPanelWithBody(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDashboard request
	DeleteDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboard request
	GetDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDashboard request with any body
	UpdateDashboardWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DuplicateDashboard request
	DuplicateDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetDefaultDashboard request
	SetDefaultDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEnvironments request
	ListEnvironments(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironment request with any body
	CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironment request
	DeleteEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEnvironment request with any body
	UpdateEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentEvent request
	DeleteIncidentEvent(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentEvents request
	GetIncidentEvents(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentEvent request with any body
	UpdateIncidentEventWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentEventFunctionalities request
	ListIncidentEventFunctionalities(ctx context.Context, incidentEventId string, params *ListIncidentEventFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentEventFunctionality request with any body
	CreateIncidentEventFunctionalityWithBody(ctx context.Context, incidentEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentEventServices request
	ListIncidentEventServices(ctx context.Context, incidentEventId string, params *ListIncidentEventServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentEventService request with any body
	CreateIncidentEventServiceWithBody(ctx context.Context, incidentEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentFeedbacks request
	GetIncidentFeedbacks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentFeedback request with any body
	UpdateIncidentFeedbackWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFormFieldOption request
	DeleteFormFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFormFieldOption request
	GetFormFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFormFieldOption request with any body
	UpdateFormFieldOptionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFormFieldPosition request
	DeleteFormFieldPosition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFormFieldPosition request
	GetFormFieldPosition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFormFieldPosition request with any body
	UpdateFormFieldPositionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFormFields request
	ListFormFields(ctx context.Context, params *ListFormFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFormField request with any body
	CreateFormFieldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFormFieldOptions request
	ListFormFieldOptions(ctx context.Context, formFieldId string, params *ListFormFieldOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFormFieldOption request with any body
	CreateFormFieldOptionWithBody(ctx context.Context, formFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFormFieldPositions request
	ListFormFieldPositions(ctx context.Context, formFieldId string, params *ListFormFieldPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFormFieldPosition request with any body
	CreateFormFieldPositionWithBody(ctx context.Context, formFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFormField request
	DeleteFormField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFormField request
	GetFormField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFormField request with any body
	UpdateFormFieldWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFunctionalities request
	ListFunctionalities(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFunctionality request with any body
	CreateFunctionalityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFunctionality request
	DeleteFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionality request
	GetFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFunctionality request with any body
	UpdateFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionalityIncidentsChart request
	GetFunctionalityIncidentsChart(ctx context.Context, id string, params *GetFunctionalityIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionalityUptimeChart request
	GetFunctionalityUptimeChart(ctx context.Context, id string, params *GetFunctionalityUptimeChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentCustomFieldSelection request
	DeleteIncidentCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentCustomFieldSelection request
	GetIncidentCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentCustomFieldSelection request with any body
	UpdateIncidentCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentEventFunctionality request
	DeleteIncidentEventFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentEventFunctionalities request
	GetIncidentEventFunctionalities(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentEventFunctionality request with any body
	UpdateIncidentEventFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentEventService request
	DeleteIncidentEventService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentEventServices request
	GetIncidentEventServices(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentEventService request with any body
	UpdateIncidentEventServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentFormFieldSelection request
	DeleteIncidentFormFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentFormFieldSelection request
	GetIncidentFormFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentFormFieldSelection request with any body
	UpdateIncidentFormFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentPermissionSetBoolean request
	DeleteIncidentPermissionSetBoolean(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentPermissionSetBoolean request
	GetIncidentPermissionSetBoolean(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentPermissionSetBoolean request with any body
	UpdateIncidentPermissionSetBooleanWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentPermissionSetResource request
	DeleteIncidentPermissionSetResource(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentPermissionSetResource request
	GetIncidentPermissionSetResource(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentPermissionSetResource request with any body
	UpdateIncidentPermissionSetResourceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentPermissionSets request
	ListIncidentPermissionSets(ctx context.Context, params *ListIncidentPermissionSetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentPermissionSet request with any body
	CreateIncidentPermissionSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentPermissionSet request
	DeleteIncidentPermissionSet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentPermissionSet request
	GetIncidentPermissionSet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentPermissionSet request with any body
	UpdateIncidentPermissionSetWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentPermissionSetBooleans request
	ListIncidentPermissionSetBooleans(ctx context.Context, incidentPermissionSetId string, params *ListIncidentPermissionSetBooleansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentPermissionSetBoolean request with any body
	CreateIncidentPermissionSetBooleanWithBody(ctx context.Context, incidentPermissionSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentPermissionSetResources request
	ListIncidentPermissionSetResources(ctx context.Context, incidentPermissionSetId string, params *ListIncidentPermissionSetResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentPermissionSetResource request with any body
	CreateIncidentPermissionSetResourceWithBody(ctx context.Context, incidentPermissionSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentRoleTask request
	DeleteIncidentRoleTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentRoleTask request
	GetIncidentRoleTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentRoleTask request with any body
	UpdateIncidentRoleTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentRoles request
	ListIncidentRoles(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentRole request with any body
	CreateIncidentRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentRole request
	DeleteIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentRole request
	GetIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentRole request with any body
	UpdateIncidentRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentRoleTasks request
	ListIncidentRoleTasks(ctx context.Context, incidentRoleId string, params *ListIncidentRoleTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentRoleTask request with any body
	CreateIncidentRoleTaskWithBody(ctx context.Context, incidentRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentTypes request
	ListIncidentTypes(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentType request with any body
	CreateIncidentTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentType request
	DeleteIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentType request
	GetIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentType request with any body
	UpdateIncidentTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidents request
	ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncident request with any body
	CreateIncidentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncident request
	DeleteIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncident request
	GetIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncident request with any body
	UpdateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddSubscribersToIncident request with any body
	AddSubscribersToIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssignUserToIncident request with any body
	AssignUserToIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelIncident request with any body
	CancelIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarkAsDuplicateIncident request with any body
	MarkAsDuplicateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TriageIncident request with any body
	TriageIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MitigateIncident request with any body
	MitigateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveSubscribersToIncident request with any body
	RemoveSubscribersToIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResolveIncident request with any body
	ResolveIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestartIncident request with any body
	RestartIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveAssignedUserFromIncident request with any body
	RemoveAssignedUserFromIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentActionItems request
	ListIncidentActionItems(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentActionItem request with any body
	CreateIncidentActionItemWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentAlerts request
	ListIncidentAlerts(ctx context.Context, incidentId string, params *ListIncidentAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AttachAlert request with any body
	AttachAlertWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentCustomFieldSelections request
	ListIncidentCustomFieldSelections(ctx context.Context, incidentId string, params *ListIncidentCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentCustomFieldSelection request with any body
	CreateIncidentCustomFieldSelectionWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentEvents request
	ListIncidentEvents(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentEvent request with any body
	CreateIncidentEventWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentFeedbacks request
	ListIncidentFeedbacks(ctx context.Context, incidentId string, params *ListIncidentFeedbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentFeedback request with any body
	CreateIncidentFeedbackWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentFormFieldSelections request
	ListIncidentFormFieldSelections(ctx context.Context, incidentId string, params *ListIncidentFormFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentFormFieldSelection request with any body
	CreateIncidentFormFieldSelectionWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentStatusPages request
	ListIncidentStatusPages(ctx context.Context, incidentId string, params *ListIncidentStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentStatusPage request with any body
	CreateIncidentStatusPageWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIpRanges request
	GetIpRanges(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlaybookTask request
	DeletePlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaybookTask request
	GetPlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlaybookTask request with any body
	UpdatePlaybookTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlaybooks request
	ListPlaybooks(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlaybook request with any body
	CreatePlaybookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlaybook request
	DeletePlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaybook request
	GetPlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlaybook request with any body
	UpdatePlaybookWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlaybookTasks request
	ListPlaybookTasks(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlaybookTask request with any body
	CreatePlaybookTaskWithBody(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPostmortemTemplates request
	ListPostmortemTemplates(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePostmortemTemplate request with any body
	CreatePostmortemTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePostmortemTemplate request
	DeletePostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostmortemTemplate request
	GetPostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePostmortemTemplate request with any body
	UpdatePostmortemTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentPostMortems request
	ListIncidentPostMortems(ctx context.Context, params *ListIncidentPostMortemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentPostmortem request
	ListIncidentPostmortem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentPostmortem request with any body
	UpdateIncidentPostmortemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPulses request
	ListPulses(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePulse request with any body
	CreatePulseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPulse request
	GetPulse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePulse request with any body
	UpdatePulseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRetrospectiveSteps request
	ListRetrospectiveSteps(ctx context.Context, params *ListRetrospectiveStepsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRetrospectiveStep request with any body
	CreateRetrospectiveStepWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRetrospectiveStep request
	DeleteRetrospectiveStep(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRetrospectiveStep request
	GetRetrospectiveStep(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRetrospectiveStep request with any body
	UpdateRetrospectiveStepWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRoles request
	ListRoles(ctx context.Context, params *ListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRole request with any body
	CreateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRole request
	DeleteRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRole request
	GetRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRole request with any body
	UpdateRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSecrets request
	ListSecrets(ctx context.Context, params *ListSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSecret request with any body
	CreateSecretWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSecret request
	DeleteSecret(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecret request
	GetSecret(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSecret request with any body
	UpdateSecretWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServices request
	ListServices(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateService request with any body
	CreateServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteService request
	DeleteService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetService request
	GetService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateService request with any body
	UpdateServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceIncidentsChart request
	GetServiceIncidentsChart(ctx context.Context, id string, params *GetServiceIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceUptimeChart request
	GetServiceUptimeChart(ctx context.Context, id string, params *GetServiceUptimeChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSeverities request
	ListSeverities(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSeverity request with any body
	CreateSeverityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSeverity request
	DeleteSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeverity request
	GetSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSeverity request with any body
	UpdateSeverityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentStatusPage request
	DeleteIncidentStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentStatusPages request
	GetIncidentStatusPages(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentStatusPage request with any body
	UpdateIncidentStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListStatusPages request
	ListStatusPages(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStatusPage request with any body
	CreateStatusPageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStatusPage request
	DeleteStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusPage request
	GetStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStatusPage request with any body
	UpdateStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListStatusPageTemplates request
	ListStatusPageTemplates(ctx context.Context, statusPageId string, params *ListStatusPageTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStatusPageTemplate request with any body
	CreateStatusPageTemplateWithBody(ctx context.Context, statusPageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTeams request
	ListTeams(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeam request with any body
	CreateTeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeam request
	DeleteTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeam request
	GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeam request with any body
	UpdateTeamWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStatusPageTemplate request
	DeleteStatusPageTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusPageTemplate request
	GetStatusPageTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStatusPageTemplate request with any body
	UpdateStatusPageTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsers request
	ListUsers(ctx context.Context, params *ListUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCurrentUser request
	GetCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request
	DeleteUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebhooksDelivery request
	GetWebhooksDelivery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeliverWebhooksDelivery request
	DeliverWebhooksDelivery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWebhooksEndpoints request
	ListWebhooksEndpoints(ctx context.Context, params *ListWebhooksEndpointsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWebhooksEndpoint request with any body
	CreateWebhooksEndpointWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWebhooksDeliveries request
	ListWebhooksDeliveries(ctx context.Context, endpointId string, params *ListWebhooksDeliveriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWebhooksEndpoint request
	DeleteWebhooksEndpoint(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebhooksEndpoint request
	GetWebhooksEndpoint(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWebhooksEndpoint request with any body
	UpdateWebhooksEndpointWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflowCustomFieldSelection request
	DeleteWorkflowCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowCustomFieldSelection request
	GetWorkflowCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkflowCustomFieldSelection request with any body
	UpdateWorkflowCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflowFormFieldCondition request
	DeleteWorkflowFormFieldCondition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowFormFieldCondition request
	GetWorkflowFormFieldCondition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkflowFormFieldCondition request with any body
	UpdateWorkflowFormFieldConditionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflowGroups request
	ListWorkflowGroups(ctx context.Context, params *ListWorkflowGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflowGroup request with any body
	CreateWorkflowGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflowGroup request
	DeleteWorkflowGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowGroup request
	GetWorkflowGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkflowGroup request with any body
	UpdateWorkflowGroupWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflowTask request
	DeleteWorkflowTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowTask request
	GetWorkflowTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkflowTask request with any body
	UpdateWorkflowTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflows request
	ListWorkflows(ctx context.Context, params *ListWorkflowsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflow request with any body
	CreateWorkflowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflow request
	DeleteWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflow request
	GetWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkflow request with any body
	UpdateWorkflowWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflowCustomFieldSelections request
	ListWorkflowCustomFieldSelections(ctx context.Context, workflowId string, params *ListWorkflowCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflowCustomFieldSelection request with any body
	CreateWorkflowCustomFieldSelectionWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflowFormFieldConditions request
	ListWorkflowFormFieldConditions(ctx context.Context, workflowId string, params *ListWorkflowFormFieldConditionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflowFormFieldCondition request with any body
	CreateWorkflowFormFieldConditionWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflowRuns request
	ListWorkflowRuns(ctx context.Context, workflowId string, params *ListWorkflowRunsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflowRun request with any body
	CreateWorkflowRunWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflowTasks request
	ListWorkflowTasks(ctx context.Context, workflowId string, params *ListWorkflowTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflowTask request with any body
	CreateWorkflowTaskWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListAllIncidentActionItems(ctx context.Context, params *ListAllIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAllIncidentActionItemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentActionItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentActionItemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentActionItems(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentActionItemsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentActionItemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentActionItemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAlerts(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAlertsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAlertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAlertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlert(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAudits(ctx context.Context, params *ListAuditsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAuditsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAuthorizations(ctx context.Context, params *ListAuthorizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAuthorizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthorizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthorizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthorization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthorizationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthorization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthorizationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAuthorizationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAuthorizationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCauses(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCausesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCauseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCauseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCauseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCauseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCauseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomFieldOptionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomFieldOptionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomFieldOptionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomFieldOptionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomFields(ctx context.Context, params *ListCustomFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomFieldsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomFieldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomFieldRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomFieldOptions(ctx context.Context, customFieldId string, params *ListCustomFieldOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomFieldOptionsRequest(c.Server, customFieldId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomFieldOptionWithBody(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomFieldOptionRequestWithBody(c.Server, customFieldId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomFieldRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomFieldRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomFieldWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomFieldRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDashboardPanel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDashboardPanelRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardPanel(ctx context.Context, id string, params *GetDashboardPanelParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardPanelRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDashboardPanelWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDashboardPanelRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DuplicateDashboardPanel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDuplicateDashboardPanelRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDashboards(ctx context.Context, params *ListDashboardsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDashboardsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDashboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDashboardRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDashboardPanels(ctx context.Context, dashboardId string, params *ListDashboardPanelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDashboardPanelsRequest(c.Server, dashboardId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDashboardPanelWithBody(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDashboardPanelRequestWithBody(c.Server, dashboardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDashboardRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDashboardWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDashboardRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DuplicateDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDuplicateDashboardRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetDefaultDashboard(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetDefaultDashboardRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEnvironments(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEnvironmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentEvent(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentEventRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentEvents(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentEventsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentEventWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentEventRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentEventFunctionalities(ctx context.Context, incidentEventId string, params *ListIncidentEventFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentEventFunctionalitiesRequest(c.Server, incidentEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentEventFunctionalityWithBody(ctx context.Context, incidentEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentEventFunctionalityRequestWithBody(c.Server, incidentEventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentEventServices(ctx context.Context, incidentEventId string, params *ListIncidentEventServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentEventServicesRequest(c.Server, incidentEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentEventServiceWithBody(ctx context.Context, incidentEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentEventServiceRequestWithBody(c.Server, incidentEventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentFeedbacks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentFeedbacksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentFeedbackWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentFeedbackRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFormFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFormFieldOptionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFormFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFormFieldOptionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFormFieldOptionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFormFieldOptionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFormFieldPosition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFormFieldPositionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFormFieldPosition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFormFieldPositionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFormFieldPositionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFormFieldPositionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFormFields(ctx context.Context, params *ListFormFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFormFieldsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFormFieldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFormFieldRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFormFieldOptions(ctx context.Context, formFieldId string, params *ListFormFieldOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFormFieldOptionsRequest(c.Server, formFieldId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFormFieldOptionWithBody(ctx context.Context, formFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFormFieldOptionRequestWithBody(c.Server, formFieldId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFormFieldPositions(ctx context.Context, formFieldId string, params *ListFormFieldPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFormFieldPositionsRequest(c.Server, formFieldId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFormFieldPositionWithBody(ctx context.Context, formFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFormFieldPositionRequestWithBody(c.Server, formFieldId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFormField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFormFieldRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFormField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFormFieldRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFormFieldWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFormFieldRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFunctionalities(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFunctionalitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFunctionalityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFunctionalityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFunctionalityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionalityIncidentsChart(ctx context.Context, id string, params *GetFunctionalityIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalityIncidentsChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionalityUptimeChart(ctx context.Context, id string, params *GetFunctionalityUptimeChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalityUptimeChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentCustomFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentCustomFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentCustomFieldSelectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentEventFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentEventFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentEventFunctionalities(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentEventFunctionalitiesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentEventFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentEventFunctionalityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentEventService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentEventServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentEventServices(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentEventServicesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentEventServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentEventServiceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentFormFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentFormFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentFormFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentFormFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentFormFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentFormFieldSelectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentPermissionSetBoolean(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentPermissionSetBooleanRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentPermissionSetBoolean(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentPermissionSetBooleanRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentPermissionSetBooleanWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentPermissionSetBooleanRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentPermissionSetResource(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentPermissionSetResourceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentPermissionSetResource(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentPermissionSetResourceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentPermissionSetResourceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentPermissionSetResourceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentPermissionSets(ctx context.Context, params *ListIncidentPermissionSetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentPermissionSetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentPermissionSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentPermissionSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentPermissionSet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentPermissionSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentPermissionSet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentPermissionSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentPermissionSetWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentPermissionSetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentPermissionSetBooleans(ctx context.Context, incidentPermissionSetId string, params *ListIncidentPermissionSetBooleansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentPermissionSetBooleansRequest(c.Server, incidentPermissionSetId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentPermissionSetBooleanWithBody(ctx context.Context, incidentPermissionSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentPermissionSetBooleanRequestWithBody(c.Server, incidentPermissionSetId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentPermissionSetResources(ctx context.Context, incidentPermissionSetId string, params *ListIncidentPermissionSetResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentPermissionSetResourcesRequest(c.Server, incidentPermissionSetId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentPermissionSetResourceWithBody(ctx context.Context, incidentPermissionSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentPermissionSetResourceRequestWithBody(c.Server, incidentPermissionSetId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentRoleTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRoleTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentRoleTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRoleTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentRoleTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRoleTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentRoles(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRoleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentRoleTasks(ctx context.Context, incidentRoleId string, params *ListIncidentRoleTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentRoleTasksRequest(c.Server, incidentRoleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentRoleTaskWithBody(ctx context.Context, incidentRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRoleTaskRequestWithBody(c.Server, incidentRoleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentTypes(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentTypeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddSubscribersToIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddSubscribersToIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignUserToIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignUserToIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarkAsDuplicateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarkAsDuplicateIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TriageIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTriageIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MitigateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMitigateIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveSubscribersToIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveSubscribersToIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolveIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResolveIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestartIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestartIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveAssignedUserFromIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveAssignedUserFromIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentActionItems(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentActionItemsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentActionItemWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentActionItemRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentAlerts(ctx context.Context, incidentId string, params *ListIncidentAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentAlertsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachAlertWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachAlertRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentCustomFieldSelections(ctx context.Context, incidentId string, params *ListIncidentCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentCustomFieldSelectionsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentCustomFieldSelectionWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentCustomFieldSelectionRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentEvents(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentEventsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentEventWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentEventRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentFeedbacks(ctx context.Context, incidentId string, params *ListIncidentFeedbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentFeedbacksRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentFeedbackWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentFeedbackRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentFormFieldSelections(ctx context.Context, incidentId string, params *ListIncidentFormFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentFormFieldSelectionsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentFormFieldSelectionWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentFormFieldSelectionRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentStatusPages(ctx context.Context, incidentId string, params *ListIncidentStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentStatusPagesRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentStatusPageWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentStatusPageRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIpRanges(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIpRangesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaybookTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaybookTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlaybookTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaybooks(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlaybooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaybookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaybookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaybookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlaybookRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaybookTasks(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlaybookTasksRequest(c.Server, playbookId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookTaskWithBody(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaybookTaskRequestWithBody(c.Server, playbookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPostmortemTemplates(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPostmortemTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePostmortemTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePostmortemTemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePostmortemTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostmortemTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePostmortemTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePostmortemTemplateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentPostMortems(ctx context.Context, params *ListIncidentPostMortemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentPostMortemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentPostmortem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentPostmortemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentPostmortemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentPostmortemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPulses(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPulsesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePulseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePulseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPulse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPulseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePulseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePulseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRetrospectiveSteps(ctx context.Context, params *ListRetrospectiveStepsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRetrospectiveStepsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRetrospectiveStepWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRetrospectiveStepRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRetrospectiveStep(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRetrospectiveStepRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRetrospectiveStep(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRetrospectiveStepRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRetrospectiveStepWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRetrospectiveStepRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRoles(ctx context.Context, params *ListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSecrets(ctx context.Context, params *ListSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSecretsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSecretWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSecretRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSecret(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSecretRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecret(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecretRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSecretWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSecretRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServices(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceIncidentsChart(ctx context.Context, id string, params *GetServiceIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceIncidentsChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceUptimeChart(ctx context.Context, id string, params *GetServiceUptimeChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceUptimeChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSeverities(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSeveritiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSeverityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSeverityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSeverityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeverityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSeverityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSeverityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentStatusPages(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentStatusPagesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentStatusPageRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListStatusPages(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListStatusPagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStatusPageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStatusPageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStatusPageRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListStatusPageTemplates(ctx context.Context, statusPageId string, params *ListStatusPageTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListStatusPageTemplatesRequest(c.Server, statusPageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStatusPageTemplateWithBody(ctx context.Context, statusPageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStatusPageTemplateRequestWithBody(c.Server, statusPageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTeams(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTeamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStatusPageTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStatusPageTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusPageTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusPageTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStatusPageTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStatusPageTemplateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsers(ctx context.Context, params *ListUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCurrentUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhooksDelivery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebhooksDeliveryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeliverWebhooksDelivery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeliverWebhooksDeliveryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWebhooksEndpoints(ctx context.Context, params *ListWebhooksEndpointsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWebhooksEndpointsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhooksEndpointWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWebhooksEndpointRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWebhooksDeliveries(ctx context.Context, endpointId string, params *ListWebhooksDeliveriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWebhooksDeliveriesRequest(c.Server, endpointId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWebhooksEndpoint(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWebhooksEndpointRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhooksEndpoint(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebhooksEndpointRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWebhooksEndpointWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWebhooksEndpointRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflowCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowCustomFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowCustomFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowCustomFieldSelectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflowFormFieldCondition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowFormFieldConditionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowFormFieldCondition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowFormFieldConditionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowFormFieldConditionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowFormFieldConditionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflowGroups(ctx context.Context, params *ListWorkflowGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflowGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowGroupWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowGroupRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflowTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflows(ctx context.Context, params *ListWorkflowsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflowCustomFieldSelections(ctx context.Context, workflowId string, params *ListWorkflowCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowCustomFieldSelectionsRequest(c.Server, workflowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowCustomFieldSelectionWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowCustomFieldSelectionRequestWithBody(c.Server, workflowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflowFormFieldConditions(ctx context.Context, workflowId string, params *ListWorkflowFormFieldConditionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowFormFieldConditionsRequest(c.Server, workflowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowFormFieldConditionWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowFormFieldConditionRequestWithBody(c.Server, workflowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflowRuns(ctx context.Context, workflowId string, params *ListWorkflowRunsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowRunsRequest(c.Server, workflowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowRunWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowRunRequestWithBody(c.Server, workflowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflowTasks(ctx context.Context, workflowId string, params *ListWorkflowTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowTasksRequest(c.Server, workflowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowTaskWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowTaskRequestWithBody(c.Server, workflowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListAllIncidentActionItemsRequest generates requests for ListAllIncidentActionItems
func NewListAllIncidentActionItemsRequest(server string, params *ListAllIncidentActionItemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterKind != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[kind]", runtime.ParamLocationQuery, *params.FilterKind); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterPriority != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[priority]", runtime.ParamLocationQuery, *params.FilterPriority); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[status]", runtime.ParamLocationQuery, *params.FilterStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterIncidentStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[incident_status]", runtime.ParamLocationQuery, *params.FilterIncidentStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterIncidentCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[incident_created_at][gt]", runtime.ParamLocationQuery, *params.FilterIncidentCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterIncidentCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[incident_created_at][gte]", runtime.ParamLocationQuery, *params.FilterIncidentCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterIncidentCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[incident_created_at][lt]", runtime.ParamLocationQuery, *params.FilterIncidentCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterIncidentCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[incident_created_at][lte]", runtime.ParamLocationQuery, *params.FilterIncidentCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterDueDateGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[due_date][gt]", runtime.ParamLocationQuery, *params.FilterDueDateGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterDueDateGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[due_date][gte]", runtime.ParamLocationQuery, *params.FilterDueDateGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterDueDateLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[due_date][lt]", runtime.ParamLocationQuery, *params.FilterDueDateLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterDueDateLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[due_date][lte]", runtime.ParamLocationQuery, *params.FilterDueDateLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIncidentActionItemRequest generates requests for DeleteIncidentActionItem
func NewDeleteIncidentActionItemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentActionItemsRequest generates requests for GetIncidentActionItems
func NewGetIncidentActionItemsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentActionItemRequestWithBody generates requests for UpdateIncidentActionItem with any type of body
func NewUpdateIncidentActionItemRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAlertsRequest generates requests for ListAlerts
func NewListAlertsRequest(server string, params *ListAlertsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAlertRequestWithBody generates requests for CreateAlert with any type of body
func NewCreateAlertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertRequest generates requests for GetAlert
func NewGetAlertRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAuditsRequest generates requests for ListAudits
func NewListAuditsRequest(server string, params *ListAuditsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/audits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterUserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[user_id]", runtime.ParamLocationQuery, *params.FilterUserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterItemType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[item_type]", runtime.ParamLocationQuery, *params.FilterItemType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAuthorizationsRequest generates requests for ListAuthorizations
func NewListAuthorizationsRequest(server string, params *ListAuthorizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/authorizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterAuthorizableId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[authorizable_id]", runtime.ParamLocationQuery, *params.FilterAuthorizableId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterAuthorizableType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[authorizable_type]", runtime.ParamLocationQuery, *params.FilterAuthorizableType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterGranteeId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[grantee_id]", runtime.ParamLocationQuery, *params.FilterGranteeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterGranteeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[grantee_type]", runtime.ParamLocationQuery, *params.FilterGranteeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAuthorizationRequestWithBody generates requests for CreateAuthorization with any type of body
func NewCreateAuthorizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/authorizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAuthorizationRequest generates requests for DeleteAuthorization
func NewDeleteAuthorizationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/authorizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthorizationRequest generates requests for GetAuthorization
func NewGetAuthorizationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/authorizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAuthorizationRequestWithBody generates requests for UpdateAuthorization with any type of body
func NewUpdateAuthorizationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/authorizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCausesRequest generates requests for ListCauses
func NewListCausesRequest(server string, params *ListCausesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCauseRequestWithBody generates requests for CreateCause with any type of body
func NewCreateCauseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCauseRequest generates requests for DeleteCause
func NewDeleteCauseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCauseRequest generates requests for GetCause
func NewGetCauseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCauseRequestWithBody generates requests for UpdateCause with any type of body
func NewUpdateCauseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomFieldOptionRequest generates requests for DeleteCustomFieldOption
func NewDeleteCustomFieldOptionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomFieldOptionRequest generates requests for GetCustomFieldOption
func NewGetCustomFieldOptionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCustomFieldOptionRequestWithBody generates requests for UpdateCustomFieldOption with any type of body
func NewUpdateCustomFieldOptionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCustomFieldsRequest generates requests for ListCustomFields
func NewListCustomFieldsRequest(server string, params *ListCustomFieldsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterLabel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[label]", runtime.ParamLocationQuery, *params.FilterLabel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterKind != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[kind]", runtime.ParamLocationQuery, *params.FilterKind); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[enabled]", runtime.ParamLocationQuery, *params.FilterEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCustomFieldRequestWithBody generates requests for CreateCustomField with any type of body
func NewCreateCustomFieldRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCustomFieldOptionsRequest generates requests for ListCustomFieldOptions
func NewListCustomFieldOptionsRequest(server string, customFieldId string, params *ListCustomFieldOptionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_field_id", runtime.ParamLocationPath, customFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s/options", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterValue != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[value]", runtime.ParamLocationQuery, *params.FilterValue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterColor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[color]", runtime.ParamLocationQuery, *params.FilterColor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCustomFieldOptionRequestWithBody generates requests for CreateCustomFieldOption with any type of body
func NewCreateCustomFieldOptionRequestWithBody(server string, customFieldId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_field_id", runtime.ParamLocationPath, customFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s/options", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomFieldRequest generates requests for DeleteCustomField
func NewDeleteCustomFieldRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomFieldRequest generates requests for GetCustomField
func NewGetCustomFieldRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCustomFieldRequestWithBody generates requests for UpdateCustomField with any type of body
func NewUpdateCustomFieldRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDashboardPanelRequest generates requests for DeleteDashboardPanel
func NewDeleteDashboardPanelRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboard_panels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardPanelRequest generates requests for GetDashboardPanel
func NewGetDashboardPanelRequest(server string, id string, params *GetDashboardPanelParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboard_panels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Range != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "range", runtime.ParamLocationQuery, *params.Range); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Period != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TimeZone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_zone", runtime.ParamLocationQuery, *params.TimeZone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDashboardPanelRequestWithBody generates requests for UpdateDashboardPanel with any type of body
func NewUpdateDashboardPanelRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboard_panels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDuplicateDashboardPanelRequest generates requests for DuplicateDashboardPanel
func NewDuplicateDashboardPanelRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboard_panels/%s/duplicate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDashboardsRequest generates requests for ListDashboards
func NewListDashboardsRequest(server string, params *ListDashboardsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDashboardRequestWithBody generates requests for CreateDashboard with any type of body
func NewCreateDashboardRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDashboardPanelsRequest generates requests for ListDashboardPanels
func NewListDashboardPanelsRequest(server string, dashboardId string, params *ListDashboardPanelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboard_id", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s/panels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDashboardPanelRequestWithBody generates requests for CreateDashboardPanel with any type of body
func NewCreateDashboardPanelRequestWithBody(server string, dashboardId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboard_id", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s/panels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDashboardRequest generates requests for DeleteDashboard
func NewDeleteDashboardRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardRequest generates requests for GetDashboard
func NewGetDashboardRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDashboardRequestWithBody generates requests for UpdateDashboard with any type of body
func NewUpdateDashboardRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDuplicateDashboardRequest generates requests for DuplicateDashboard
func NewDuplicateDashboardRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s/duplicate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetDefaultDashboardRequest generates requests for SetDefaultDashboard
func NewSetDefaultDashboardRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/%s/set_default", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListEnvironmentsRequest generates requests for ListEnvironments
func NewListEnvironmentsRequest(server string, params *ListEnvironmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterColor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[color]", runtime.ParamLocationQuery, *params.FilterColor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentRequestWithBody generates requests for CreateEnvironment with any type of body
func NewCreateEnvironmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentRequest generates requests for DeleteEnvironment
func NewDeleteEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEnvironmentRequestWithBody generates requests for UpdateEnvironment with any type of body
func NewUpdateEnvironmentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentEventRequest generates requests for DeleteIncidentEvent
func NewDeleteIncidentEventRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentEventsRequest generates requests for GetIncidentEvents
func NewGetIncidentEventsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentEventRequestWithBody generates requests for UpdateIncidentEvent with any type of body
func NewUpdateIncidentEventRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentEventFunctionalitiesRequest generates requests for ListIncidentEventFunctionalities
func NewListIncidentEventFunctionalitiesRequest(server string, incidentEventId string, params *ListIncidentEventFunctionalitiesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_event_id", runtime.ParamLocationPath, incidentEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s/functionalities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentEventFunctionalityRequestWithBody generates requests for CreateIncidentEventFunctionality with any type of body
func NewCreateIncidentEventFunctionalityRequestWithBody(server string, incidentEventId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_event_id", runtime.ParamLocationPath, incidentEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s/functionalities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentEventServicesRequest generates requests for ListIncidentEventServices
func NewListIncidentEventServicesRequest(server string, incidentEventId string, params *ListIncidentEventServicesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_event_id", runtime.ParamLocationPath, incidentEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s/services", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentEventServiceRequestWithBody generates requests for CreateIncidentEventService with any type of body
func NewCreateIncidentEventServiceRequestWithBody(server string, incidentEventId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_event_id", runtime.ParamLocationPath, incidentEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s/services", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIncidentFeedbacksRequest generates requests for GetIncidentFeedbacks
func NewGetIncidentFeedbacksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/feedbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentFeedbackRequestWithBody generates requests for UpdateIncidentFeedback with any type of body
func NewUpdateIncidentFeedbackRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/feedbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFormFieldOptionRequest generates requests for DeleteFormFieldOption
func NewDeleteFormFieldOptionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFormFieldOptionRequest generates requests for GetFormFieldOption
func NewGetFormFieldOptionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFormFieldOptionRequestWithBody generates requests for UpdateFormFieldOption with any type of body
func NewUpdateFormFieldOptionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFormFieldPositionRequest generates requests for DeleteFormFieldPosition
func NewDeleteFormFieldPositionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_field_positions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFormFieldPositionRequest generates requests for GetFormFieldPosition
func NewGetFormFieldPositionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_field_positions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFormFieldPositionRequestWithBody generates requests for UpdateFormFieldPosition with any type of body
func NewUpdateFormFieldPositionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_field_positions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFormFieldsRequest generates requests for ListFormFields
func NewListFormFieldsRequest(server string, params *ListFormFieldsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterKind != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[kind]", runtime.ParamLocationQuery, *params.FilterKind); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[enabled]", runtime.ParamLocationQuery, *params.FilterEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFormFieldRequestWithBody generates requests for CreateFormField with any type of body
func NewCreateFormFieldRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFormFieldOptionsRequest generates requests for ListFormFieldOptions
func NewListFormFieldOptionsRequest(server string, formFieldId string, params *ListFormFieldOptionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "form_field_id", runtime.ParamLocationPath, formFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_fields/%s/options", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterValue != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[value]", runtime.ParamLocationQuery, *params.FilterValue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterColor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[color]", runtime.ParamLocationQuery, *params.FilterColor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFormFieldOptionRequestWithBody generates requests for CreateFormFieldOption with any type of body
func NewCreateFormFieldOptionRequestWithBody(server string, formFieldId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "form_field_id", runtime.ParamLocationPath, formFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_fields/%s/options", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFormFieldPositionsRequest generates requests for ListFormFieldPositions
func NewListFormFieldPositionsRequest(server string, formFieldId string, params *ListFormFieldPositionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "form_field_id", runtime.ParamLocationPath, formFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_fields/%s/positions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterForm != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[form]", runtime.ParamLocationQuery, *params.FilterForm); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFormFieldPositionRequestWithBody generates requests for CreateFormFieldPosition with any type of body
func NewCreateFormFieldPositionRequestWithBody(server string, formFieldId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "form_field_id", runtime.ParamLocationPath, formFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_fields/%s/positions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFormFieldRequest generates requests for DeleteFormField
func NewDeleteFormFieldRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFormFieldRequest generates requests for GetFormField
func NewGetFormFieldRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFormFieldRequestWithBody generates requests for UpdateFormField with any type of body
func NewUpdateFormFieldRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/form_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFunctionalitiesRequest generates requests for ListFunctionalities
func NewListFunctionalitiesRequest(server string, params *ListFunctionalitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFunctionalityRequestWithBody generates requests for CreateFunctionality with any type of body
func NewCreateFunctionalityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFunctionalityRequest generates requests for DeleteFunctionality
func NewDeleteFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionalityRequest generates requests for GetFunctionality
func NewGetFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFunctionalityRequestWithBody generates requests for UpdateFunctionality with any type of body
func NewUpdateFunctionalityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFunctionalityIncidentsChartRequest generates requests for GetFunctionalityIncidentsChart
func NewGetFunctionalityIncidentsChartRequest(server string, id string, params *GetFunctionalityIncidentsChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s/incidents_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionalityUptimeChartRequest generates requests for GetFunctionalityUptimeChart
func NewGetFunctionalityUptimeChartRequest(server string, id string, params *GetFunctionalityUptimeChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s/uptime_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Period != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIncidentCustomFieldSelectionRequest generates requests for DeleteIncidentCustomFieldSelection
func NewDeleteIncidentCustomFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentCustomFieldSelectionRequest generates requests for GetIncidentCustomFieldSelection
func NewGetIncidentCustomFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentCustomFieldSelectionRequestWithBody generates requests for UpdateIncidentCustomFieldSelection with any type of body
func NewUpdateIncidentCustomFieldSelectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentEventFunctionalityRequest generates requests for DeleteIncidentEventFunctionality
func NewDeleteIncidentEventFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_event_functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentEventFunctionalitiesRequest generates requests for GetIncidentEventFunctionalities
func NewGetIncidentEventFunctionalitiesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_event_functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentEventFunctionalityRequestWithBody generates requests for UpdateIncidentEventFunctionality with any type of body
func NewUpdateIncidentEventFunctionalityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_event_functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentEventServiceRequest generates requests for DeleteIncidentEventService
func NewDeleteIncidentEventServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_event_services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentEventServicesRequest generates requests for GetIncidentEventServices
func NewGetIncidentEventServicesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_event_services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentEventServiceRequestWithBody generates requests for UpdateIncidentEventService with any type of body
func NewUpdateIncidentEventServiceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_event_services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentFormFieldSelectionRequest generates requests for DeleteIncidentFormFieldSelection
func NewDeleteIncidentFormFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_form_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentFormFieldSelectionRequest generates requests for GetIncidentFormFieldSelection
func NewGetIncidentFormFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_form_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentFormFieldSelectionRequestWithBody generates requests for UpdateIncidentFormFieldSelection with any type of body
func NewUpdateIncidentFormFieldSelectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_form_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentPermissionSetBooleanRequest generates requests for DeleteIncidentPermissionSetBoolean
func NewDeleteIncidentPermissionSetBooleanRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_set_booleans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentPermissionSetBooleanRequest generates requests for GetIncidentPermissionSetBoolean
func NewGetIncidentPermissionSetBooleanRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_set_booleans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentPermissionSetBooleanRequestWithBody generates requests for UpdateIncidentPermissionSetBoolean with any type of body
func NewUpdateIncidentPermissionSetBooleanRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_set_booleans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentPermissionSetResourceRequest generates requests for DeleteIncidentPermissionSetResource
func NewDeleteIncidentPermissionSetResourceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_set_resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentPermissionSetResourceRequest generates requests for GetIncidentPermissionSetResource
func NewGetIncidentPermissionSetResourceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_set_resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentPermissionSetResourceRequestWithBody generates requests for UpdateIncidentPermissionSetResource with any type of body
func NewUpdateIncidentPermissionSetResourceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_set_resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentPermissionSetsRequest generates requests for ListIncidentPermissionSets
func NewListIncidentPermissionSetsRequest(server string, params *ListIncidentPermissionSetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_sets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentPermissionSetRequestWithBody generates requests for CreateIncidentPermissionSet with any type of body
func NewCreateIncidentPermissionSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_sets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentPermissionSetRequest generates requests for DeleteIncidentPermissionSet
func NewDeleteIncidentPermissionSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_sets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentPermissionSetRequest generates requests for GetIncidentPermissionSet
func NewGetIncidentPermissionSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_sets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentPermissionSetRequestWithBody generates requests for UpdateIncidentPermissionSet with any type of body
func NewUpdateIncidentPermissionSetRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_sets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentPermissionSetBooleansRequest generates requests for ListIncidentPermissionSetBooleans
func NewListIncidentPermissionSetBooleansRequest(server string, incidentPermissionSetId string, params *ListIncidentPermissionSetBooleansParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_permission_set_id", runtime.ParamLocationPath, incidentPermissionSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_sets/%s/booleans", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterKind != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[kind]", runtime.ParamLocationQuery, *params.FilterKind); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentPermissionSetBooleanRequestWithBody generates requests for CreateIncidentPermissionSetBoolean with any type of body
func NewCreateIncidentPermissionSetBooleanRequestWithBody(server string, incidentPermissionSetId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_permission_set_id", runtime.ParamLocationPath, incidentPermissionSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_sets/%s/booleans", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentPermissionSetResourcesRequest generates requests for ListIncidentPermissionSetResources
func NewListIncidentPermissionSetResourcesRequest(server string, incidentPermissionSetId string, params *ListIncidentPermissionSetResourcesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_permission_set_id", runtime.ParamLocationPath, incidentPermissionSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_sets/%s/resources", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterKind != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[kind]", runtime.ParamLocationQuery, *params.FilterKind); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentPermissionSetResourceRequestWithBody generates requests for CreateIncidentPermissionSetResource with any type of body
func NewCreateIncidentPermissionSetResourceRequestWithBody(server string, incidentPermissionSetId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_permission_set_id", runtime.ParamLocationPath, incidentPermissionSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_permission_sets/%s/resources", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRoleTaskRequest generates requests for DeleteIncidentRoleTask
func NewDeleteIncidentRoleTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_role_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRoleTaskRequest generates requests for GetIncidentRoleTask
func NewGetIncidentRoleTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_role_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRoleTaskRequestWithBody generates requests for UpdateIncidentRoleTask with any type of body
func NewUpdateIncidentRoleTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_role_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentRolesRequest generates requests for ListIncidentRoles
func NewListIncidentRolesRequest(server string, params *ListIncidentRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[enabled]", runtime.ParamLocationQuery, *params.FilterEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRoleRequestWithBody generates requests for CreateIncidentRole with any type of body
func NewCreateIncidentRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRoleRequest generates requests for DeleteIncidentRole
func NewDeleteIncidentRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRoleRequest generates requests for GetIncidentRole
func NewGetIncidentRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRoleRequestWithBody generates requests for UpdateIncidentRole with any type of body
func NewUpdateIncidentRoleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentRoleTasksRequest generates requests for ListIncidentRoleTasks
func NewListIncidentRoleTasksRequest(server string, incidentRoleId string, params *ListIncidentRoleTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_role_id", runtime.ParamLocationPath, incidentRoleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s/incident_role_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRoleTaskRequestWithBody generates requests for CreateIncidentRoleTask with any type of body
func NewCreateIncidentRoleTaskRequestWithBody(server string, incidentRoleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_role_id", runtime.ParamLocationPath, incidentRoleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s/incident_role_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentTypesRequest generates requests for ListIncidentTypes
func NewListIncidentTypesRequest(server string, params *ListIncidentTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterColor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[color]", runtime.ParamLocationQuery, *params.FilterColor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentTypeRequestWithBody generates requests for CreateIncidentType with any type of body
func NewCreateIncidentTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentTypeRequest generates requests for DeleteIncidentType
func NewDeleteIncidentTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentTypeRequest generates requests for GetIncidentType
func NewGetIncidentTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentTypeRequestWithBody generates requests for UpdateIncidentType with any type of body
func NewUpdateIncidentTypeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentsRequest generates requests for ListIncidents
func NewListIncidentsRequest(server string, params *ListIncidentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterKind != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[kind]", runtime.ParamLocationQuery, *params.FilterKind); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[status]", runtime.ParamLocationQuery, *params.FilterStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterUserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[user_id]", runtime.ParamLocationQuery, *params.FilterUserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSeverity != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[severity]", runtime.ParamLocationQuery, *params.FilterSeverity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSeverityId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[severity_id]", runtime.ParamLocationQuery, *params.FilterSeverityId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterLabels != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[labels]", runtime.ParamLocationQuery, *params.FilterLabels); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterTypes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[types]", runtime.ParamLocationQuery, *params.FilterTypes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterTypeIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[type_ids]", runtime.ParamLocationQuery, *params.FilterTypeIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEnvironments != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[environments]", runtime.ParamLocationQuery, *params.FilterEnvironments); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEnvironmentIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[environment_ids]", runtime.ParamLocationQuery, *params.FilterEnvironmentIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterFunctionalities != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[functionalities]", runtime.ParamLocationQuery, *params.FilterFunctionalities); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterFunctionalityIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[functionality_ids]", runtime.ParamLocationQuery, *params.FilterFunctionalityIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterServices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[services]", runtime.ParamLocationQuery, *params.FilterServices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterServiceIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[service_ids]", runtime.ParamLocationQuery, *params.FilterServiceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterTeams != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[teams]", runtime.ParamLocationQuery, *params.FilterTeams); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterTeamIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[team_ids]", runtime.ParamLocationQuery, *params.FilterTeamIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCause != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[cause]", runtime.ParamLocationQuery, *params.FilterCause); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCauseIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[cause_ids]", runtime.ParamLocationQuery, *params.FilterCauseIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCustomFieldSelectedOptionIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[custom_field_selected_option_ids]", runtime.ParamLocationQuery, *params.FilterCustomFieldSelectedOptionIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterUpdatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[updated_at][gt]", runtime.ParamLocationQuery, *params.FilterUpdatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterUpdatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[updated_at][gte]", runtime.ParamLocationQuery, *params.FilterUpdatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterUpdatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[updated_at][lt]", runtime.ParamLocationQuery, *params.FilterUpdatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterUpdatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[updated_at][lte]", runtime.ParamLocationQuery, *params.FilterUpdatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStartedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][gt]", runtime.ParamLocationQuery, *params.FilterStartedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStartedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][gte]", runtime.ParamLocationQuery, *params.FilterStartedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStartedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][lt]", runtime.ParamLocationQuery, *params.FilterStartedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStartedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][lte]", runtime.ParamLocationQuery, *params.FilterStartedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterDetectedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[detected_at][gt]", runtime.ParamLocationQuery, *params.FilterDetectedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterDetectedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[detected_at][gte]", runtime.ParamLocationQuery, *params.FilterDetectedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterDetectedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[detected_at][lt]", runtime.ParamLocationQuery, *params.FilterDetectedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterDetectedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[detected_at][lte]", runtime.ParamLocationQuery, *params.FilterDetectedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterAcknowledgedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[acknowledged_at][gt]", runtime.ParamLocationQuery, *params.FilterAcknowledgedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterAcknowledgedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[acknowledged_at][gte]", runtime.ParamLocationQuery, *params.FilterAcknowledgedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterAcknowledgedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[acknowledged_at][lt]", runtime.ParamLocationQuery, *params.FilterAcknowledgedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterAcknowledgedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[acknowledged_at][lte]", runtime.ParamLocationQuery, *params.FilterAcknowledgedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterMitigatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[mitigated_at][gt]", runtime.ParamLocationQuery, *params.FilterMitigatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterMitigatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[mitigated_at][gte]", runtime.ParamLocationQuery, *params.FilterMitigatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterMitigatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[mitigated_at][lt]", runtime.ParamLocationQuery, *params.FilterMitigatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterMitigatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[mitigated_at][lte]", runtime.ParamLocationQuery, *params.FilterMitigatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterResolvedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[resolved_at][gt]", runtime.ParamLocationQuery, *params.FilterResolvedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterResolvedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[resolved_at][gte]", runtime.ParamLocationQuery, *params.FilterResolvedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterResolvedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[resolved_at][lt]", runtime.ParamLocationQuery, *params.FilterResolvedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterResolvedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[resolved_at][lte]", runtime.ParamLocationQuery, *params.FilterResolvedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterInTriageAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[in_triage_at][gt]", runtime.ParamLocationQuery, *params.FilterInTriageAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterInTriageAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[in_triage_at][gte]", runtime.ParamLocationQuery, *params.FilterInTriageAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterInTriageAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[in_triage_at][lt]", runtime.ParamLocationQuery, *params.FilterInTriageAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterInTriageAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[in_triage_at][lte]", runtime.ParamLocationQuery, *params.FilterInTriageAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRequestWithBody generates requests for CreateIncident with any type of body
func NewCreateIncidentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRequest generates requests for DeleteIncident
func NewDeleteIncidentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRequest generates requests for GetIncident
func NewGetIncidentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRequestWithBody generates requests for UpdateIncident with any type of body
func NewUpdateIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddSubscribersToIncidentRequestWithBody generates requests for AddSubscribersToIncident with any type of body
func NewAddSubscribersToIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/add_subscribers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAssignUserToIncidentRequestWithBody generates requests for AssignUserToIncident with any type of body
func NewAssignUserToIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/assign_role_to_user", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelIncidentRequestWithBody generates requests for CancelIncident with any type of body
func NewCancelIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMarkAsDuplicateIncidentRequestWithBody generates requests for MarkAsDuplicateIncident with any type of body
func NewMarkAsDuplicateIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/duplicate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTriageIncidentRequestWithBody generates requests for TriageIncident with any type of body
func NewTriageIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/in_triage", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMitigateIncidentRequestWithBody generates requests for MitigateIncident with any type of body
func NewMitigateIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/mitigate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveSubscribersToIncidentRequestWithBody generates requests for RemoveSubscribersToIncident with any type of body
func NewRemoveSubscribersToIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/remove_subscribers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResolveIncidentRequestWithBody generates requests for ResolveIncident with any type of body
func NewResolveIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/resolve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRestartIncidentRequestWithBody generates requests for RestartIncident with any type of body
func NewRestartIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/restart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveAssignedUserFromIncidentRequestWithBody generates requests for RemoveAssignedUserFromIncident with any type of body
func NewRemoveAssignedUserFromIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/unassign_role_from_user", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentActionItemsRequest generates requests for ListIncidentActionItems
func NewListIncidentActionItemsRequest(server string, incidentId string, params *ListIncidentActionItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/action_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentActionItemRequestWithBody generates requests for CreateIncidentActionItem with any type of body
func NewCreateIncidentActionItemRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/action_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentAlertsRequest generates requests for ListIncidentAlerts
func NewListIncidentAlertsRequest(server string, incidentId string, params *ListIncidentAlertsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/alerts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSource != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[source]", runtime.ParamLocationQuery, *params.FilterSource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterServices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[services]", runtime.ParamLocationQuery, *params.FilterServices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEnvironments != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[environments]", runtime.ParamLocationQuery, *params.FilterEnvironments); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterLabels != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[labels]", runtime.ParamLocationQuery, *params.FilterLabels); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStartedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][gt]", runtime.ParamLocationQuery, *params.FilterStartedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStartedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][gte]", runtime.ParamLocationQuery, *params.FilterStartedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStartedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][lt]", runtime.ParamLocationQuery, *params.FilterStartedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStartedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][lte]", runtime.ParamLocationQuery, *params.FilterStartedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEndedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[ended_at][gt]", runtime.ParamLocationQuery, *params.FilterEndedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEndedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[ended_at][gte]", runtime.ParamLocationQuery, *params.FilterEndedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEndedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[ended_at][lt]", runtime.ParamLocationQuery, *params.FilterEndedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEndedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[ended_at][lte]", runtime.ParamLocationQuery, *params.FilterEndedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAttachAlertRequestWithBody generates requests for AttachAlert with any type of body
func NewAttachAlertRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/alerts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentCustomFieldSelectionsRequest generates requests for ListIncidentCustomFieldSelections
func NewListIncidentCustomFieldSelectionsRequest(server string, incidentId string, params *ListIncidentCustomFieldSelectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/custom_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentCustomFieldSelectionRequestWithBody generates requests for CreateIncidentCustomFieldSelection with any type of body
func NewCreateIncidentCustomFieldSelectionRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/custom_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentEventsRequest generates requests for ListIncidentEvents
func NewListIncidentEventsRequest(server string, incidentId string, params *ListIncidentEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentEventRequestWithBody generates requests for CreateIncidentEvent with any type of body
func NewCreateIncidentEventRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentFeedbacksRequest generates requests for ListIncidentFeedbacks
func NewListIncidentFeedbacksRequest(server string, incidentId string, params *ListIncidentFeedbacksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/feedbacks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentFeedbackRequestWithBody generates requests for CreateIncidentFeedback with any type of body
func NewCreateIncidentFeedbackRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/feedbacks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentFormFieldSelectionsRequest generates requests for ListIncidentFormFieldSelections
func NewListIncidentFormFieldSelectionsRequest(server string, incidentId string, params *ListIncidentFormFieldSelectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/form_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentFormFieldSelectionRequestWithBody generates requests for CreateIncidentFormFieldSelection with any type of body
func NewCreateIncidentFormFieldSelectionRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/form_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentStatusPagesRequest generates requests for ListIncidentStatusPages
func NewListIncidentStatusPagesRequest(server string, incidentId string, params *ListIncidentStatusPagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/status-page-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentStatusPageRequestWithBody generates requests for CreateIncidentStatusPage with any type of body
func NewCreateIncidentStatusPageRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/status-page-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIpRangesRequest generates requests for GetIpRanges
func NewGetIpRangesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ip_ranges")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePlaybookTaskRequest generates requests for DeletePlaybookTask
func NewDeletePlaybookTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaybookTaskRequest generates requests for GetPlaybookTask
func NewGetPlaybookTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlaybookTaskRequestWithBody generates requests for UpdatePlaybookTask with any type of body
func NewUpdatePlaybookTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlaybooksRequest generates requests for ListPlaybooks
func NewListPlaybooksRequest(server string, params *ListPlaybooksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaybookRequestWithBody generates requests for CreatePlaybook with any type of body
func NewCreatePlaybookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaybookRequest generates requests for DeletePlaybook
func NewDeletePlaybookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaybookRequest generates requests for GetPlaybook
func NewGetPlaybookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlaybookRequestWithBody generates requests for UpdatePlaybook with any type of body
func NewUpdatePlaybookRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlaybookTasksRequest generates requests for ListPlaybookTasks
func NewListPlaybookTasksRequest(server string, playbookId string, params *ListPlaybookTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, playbookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s/playbook_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaybookTaskRequestWithBody generates requests for CreatePlaybookTask with any type of body
func NewCreatePlaybookTaskRequestWithBody(server string, playbookId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, playbookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s/playbook_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPostmortemTemplatesRequest generates requests for ListPostmortemTemplates
func NewListPostmortemTemplatesRequest(server string, params *ListPostmortemTemplatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePostmortemTemplateRequestWithBody generates requests for CreatePostmortemTemplate with any type of body
func NewCreatePostmortemTemplateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePostmortemTemplateRequest generates requests for DeletePostmortemTemplate
func NewDeletePostmortemTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostmortemTemplateRequest generates requests for GetPostmortemTemplate
func NewGetPostmortemTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePostmortemTemplateRequestWithBody generates requests for UpdatePostmortemTemplate with any type of body
func NewUpdatePostmortemTemplateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentPostMortemsRequest generates requests for ListIncidentPostMortems
func NewListIncidentPostMortemsRequest(server string, params *ListIncidentPostMortemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[status]", runtime.ParamLocationQuery, *params.FilterStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSeverity != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[severity]", runtime.ParamLocationQuery, *params.FilterSeverity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[type]", runtime.ParamLocationQuery, *params.FilterType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterUserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[user_id]", runtime.ParamLocationQuery, *params.FilterUserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEnvironments != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[environments]", runtime.ParamLocationQuery, *params.FilterEnvironments); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterFunctionalities != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[functionalities]", runtime.ParamLocationQuery, *params.FilterFunctionalities); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterServices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[services]", runtime.ParamLocationQuery, *params.FilterServices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterTeams != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[teams]", runtime.ParamLocationQuery, *params.FilterTeams); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStartedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][gt]", runtime.ParamLocationQuery, *params.FilterStartedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStartedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][gte]", runtime.ParamLocationQuery, *params.FilterStartedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStartedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][lt]", runtime.ParamLocationQuery, *params.FilterStartedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStartedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][lte]", runtime.ParamLocationQuery, *params.FilterStartedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterMitigatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[mitigated_at][gt]", runtime.ParamLocationQuery, *params.FilterMitigatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterMitigatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[mitigated_at][gte]", runtime.ParamLocationQuery, *params.FilterMitigatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterMitigatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[mitigated_at][lt]", runtime.ParamLocationQuery, *params.FilterMitigatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterMitigatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[mitigated_at][lte]", runtime.ParamLocationQuery, *params.FilterMitigatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterResolvedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[resolved_at][gt]", runtime.ParamLocationQuery, *params.FilterResolvedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterResolvedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[resolved_at][gte]", runtime.ParamLocationQuery, *params.FilterResolvedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterResolvedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[resolved_at][lt]", runtime.ParamLocationQuery, *params.FilterResolvedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterResolvedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[resolved_at][lte]", runtime.ParamLocationQuery, *params.FilterResolvedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListIncidentPostmortemRequest generates requests for ListIncidentPostmortem
func NewListIncidentPostmortemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentPostmortemRequestWithBody generates requests for UpdateIncidentPostmortem with any type of body
func NewUpdateIncidentPostmortemRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPulsesRequest generates requests for ListPulses
func NewListPulsesRequest(server string, params *ListPulsesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSource != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[source]", runtime.ParamLocationQuery, *params.FilterSource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterServices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[services]", runtime.ParamLocationQuery, *params.FilterServices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEnvironments != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[environments]", runtime.ParamLocationQuery, *params.FilterEnvironments); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterLabels != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[labels]", runtime.ParamLocationQuery, *params.FilterLabels); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterRefs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[refs]", runtime.ParamLocationQuery, *params.FilterRefs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStartedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][gt]", runtime.ParamLocationQuery, *params.FilterStartedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStartedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][gte]", runtime.ParamLocationQuery, *params.FilterStartedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStartedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][lt]", runtime.ParamLocationQuery, *params.FilterStartedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStartedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[started_at][lte]", runtime.ParamLocationQuery, *params.FilterStartedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEndedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[ended_at][gt]", runtime.ParamLocationQuery, *params.FilterEndedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEndedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[ended_at][gte]", runtime.ParamLocationQuery, *params.FilterEndedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEndedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[ended_at][lt]", runtime.ParamLocationQuery, *params.FilterEndedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEndedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[ended_at][lte]", runtime.ParamLocationQuery, *params.FilterEndedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePulseRequestWithBody generates requests for CreatePulse with any type of body
func NewCreatePulseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPulseRequest generates requests for GetPulse
func NewGetPulseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePulseRequestWithBody generates requests for UpdatePulse with any type of body
func NewUpdatePulseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRetrospectiveStepsRequest generates requests for ListRetrospectiveSteps
func NewListRetrospectiveStepsRequest(server string, params *ListRetrospectiveStepsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_steps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRetrospectiveStepRequestWithBody generates requests for CreateRetrospectiveStep with any type of body
func NewCreateRetrospectiveStepRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_steps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRetrospectiveStepRequest generates requests for DeleteRetrospectiveStep
func NewDeleteRetrospectiveStepRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_steps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRetrospectiveStepRequest generates requests for GetRetrospectiveStep
func NewGetRetrospectiveStepRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_steps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRetrospectiveStepRequestWithBody generates requests for UpdateRetrospectiveStep with any type of body
func NewUpdateRetrospectiveStepRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retrospective_steps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRolesRequest generates requests for ListRoles
func NewListRolesRequest(server string, params *ListRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRoleRequestWithBody generates requests for CreateRole with any type of body
func NewCreateRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRoleRequest generates requests for DeleteRole
func NewDeleteRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRoleRequest generates requests for GetRole
func NewGetRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRoleRequestWithBody generates requests for UpdateRole with any type of body
func NewUpdateRoleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSecretsRequest generates requests for ListSecrets
func NewListSecretsRequest(server string, params *ListSecretsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSecretRequestWithBody generates requests for CreateSecret with any type of body
func NewCreateSecretRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSecretRequest generates requests for DeleteSecret
func NewDeleteSecretRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/secrets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSecretRequest generates requests for GetSecret
func NewGetSecretRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/secrets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSecretRequestWithBody generates requests for UpdateSecret with any type of body
func NewUpdateSecretRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/secrets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListServicesRequest generates requests for ListServices
func NewListServicesRequest(server string, params *ListServicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterBackstageId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[backstage_id]", runtime.ParamLocationQuery, *params.FilterBackstageId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServiceRequestWithBody generates requests for CreateService with any type of body
func NewCreateServiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceRequest generates requests for DeleteService
func NewDeleteServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceRequest generates requests for GetService
func NewGetServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateServiceRequestWithBody generates requests for UpdateService with any type of body
func NewUpdateServiceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceIncidentsChartRequest generates requests for GetServiceIncidentsChart
func NewGetServiceIncidentsChartRequest(server string, id string, params *GetServiceIncidentsChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s/incidents_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceUptimeChartRequest generates requests for GetServiceUptimeChart
func NewGetServiceUptimeChartRequest(server string, id string, params *GetServiceUptimeChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s/uptime_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Period != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSeveritiesRequest generates requests for ListSeverities
func NewListSeveritiesRequest(server string, params *ListSeveritiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSeverity != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[severity]", runtime.ParamLocationQuery, *params.FilterSeverity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterColor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[color]", runtime.ParamLocationQuery, *params.FilterColor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSeverityRequestWithBody generates requests for CreateSeverity with any type of body
func NewCreateSeverityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSeverityRequest generates requests for DeleteSeverity
func NewDeleteSeverityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeverityRequest generates requests for GetSeverity
func NewGetSeverityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSeverityRequestWithBody generates requests for UpdateSeverity with any type of body
func NewUpdateSeverityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentStatusPageRequest generates requests for DeleteIncidentStatusPage
func NewDeleteIncidentStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-page-events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentStatusPagesRequest generates requests for GetIncidentStatusPages
func NewGetIncidentStatusPagesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-page-events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentStatusPageRequestWithBody generates requests for UpdateIncidentStatusPage with any type of body
func NewUpdateIncidentStatusPageRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-page-events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListStatusPagesRequest generates requests for ListStatusPages
func NewListStatusPagesRequest(server string, params *ListStatusPagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStatusPageRequestWithBody generates requests for CreateStatusPage with any type of body
func NewCreateStatusPageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStatusPageRequest generates requests for DeleteStatusPage
func NewDeleteStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusPageRequest generates requests for GetStatusPage
func NewGetStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateStatusPageRequestWithBody generates requests for UpdateStatusPage with any type of body
func NewUpdateStatusPageRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListStatusPageTemplatesRequest generates requests for ListStatusPageTemplates
func NewListStatusPageTemplatesRequest(server string, statusPageId string, params *ListStatusPageTemplatesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "status_page_id", runtime.ParamLocationPath, statusPageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s/templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStatusPageTemplateRequestWithBody generates requests for CreateStatusPageTemplate with any type of body
func NewCreateStatusPageTemplateRequestWithBody(server string, statusPageId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "status_page_id", runtime.ParamLocationPath, statusPageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s/templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTeamsRequest generates requests for ListTeams
func NewListTeamsRequest(server string, params *ListTeamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterColor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[color]", runtime.ParamLocationQuery, *params.FilterColor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamRequestWithBody generates requests for CreateTeam with any type of body
func NewCreateTeamRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamRequest generates requests for DeleteTeam
func NewDeleteTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamRequest generates requests for GetTeam
func NewGetTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamRequestWithBody generates requests for UpdateTeam with any type of body
func NewUpdateTeamRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStatusPageTemplateRequest generates requests for DeleteStatusPageTemplate
func NewDeleteStatusPageTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusPageTemplateRequest generates requests for GetStatusPageTemplate
func NewGetStatusPageTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateStatusPageTemplateRequestWithBody generates requests for UpdateStatusPageTemplate with any type of body
func NewUpdateStatusPageTemplateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListUsersRequest generates requests for ListUsers
func NewListUsersRequest(server string, params *ListUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEmail != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[email]", runtime.ParamLocationQuery, *params.FilterEmail); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCurrentUserRequest generates requests for GetCurrentUser
func NewGetCurrentUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserRequest generates requests for DeleteUser
func NewDeleteUserRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWebhooksDeliveryRequest generates requests for GetWebhooksDelivery
func NewGetWebhooksDeliveryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/webhooks/deliveries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeliverWebhooksDeliveryRequest generates requests for DeliverWebhooksDelivery
func NewDeliverWebhooksDeliveryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/webhooks/deliveries/%s/deliver", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListWebhooksEndpointsRequest generates requests for ListWebhooksEndpoints
func NewListWebhooksEndpointsRequest(server string, params *ListWebhooksEndpointsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/webhooks/endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWebhooksEndpointRequestWithBody generates requests for CreateWebhooksEndpoint with any type of body
func NewCreateWebhooksEndpointRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/webhooks/endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWebhooksDeliveriesRequest generates requests for ListWebhooksDeliveries
func NewListWebhooksDeliveriesRequest(server string, endpointId string, params *ListWebhooksDeliveriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpoint_id", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/webhooks/endpoints/%s/deliveries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteWebhooksEndpointRequest generates requests for DeleteWebhooksEndpoint
func NewDeleteWebhooksEndpointRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/webhooks/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWebhooksEndpointRequest generates requests for GetWebhooksEndpoint
func NewGetWebhooksEndpointRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/webhooks/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWebhooksEndpointRequestWithBody generates requests for UpdateWebhooksEndpoint with any type of body
func NewUpdateWebhooksEndpointRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/webhooks/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkflowCustomFieldSelectionRequest generates requests for DeleteWorkflowCustomFieldSelection
func NewDeleteWorkflowCustomFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowCustomFieldSelectionRequest generates requests for GetWorkflowCustomFieldSelection
func NewGetWorkflowCustomFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkflowCustomFieldSelectionRequestWithBody generates requests for UpdateWorkflowCustomFieldSelection with any type of body
func NewUpdateWorkflowCustomFieldSelectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkflowFormFieldConditionRequest generates requests for DeleteWorkflowFormFieldCondition
func NewDeleteWorkflowFormFieldConditionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_form_field_conditions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowFormFieldConditionRequest generates requests for GetWorkflowFormFieldCondition
func NewGetWorkflowFormFieldConditionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_form_field_conditions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkflowFormFieldConditionRequestWithBody generates requests for UpdateWorkflowFormFieldCondition with any type of body
func NewUpdateWorkflowFormFieldConditionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_form_field_conditions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowGroupsRequest generates requests for ListWorkflowGroups
func NewListWorkflowGroupsRequest(server string, params *ListWorkflowGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterKind != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[kind]", runtime.ParamLocationQuery, *params.FilterKind); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterExpanded != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[expanded]", runtime.ParamLocationQuery, *params.FilterExpanded); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterPosition != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[position]", runtime.ParamLocationQuery, *params.FilterPosition); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowGroupRequestWithBody generates requests for CreateWorkflowGroup with any type of body
func NewCreateWorkflowGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkflowGroupRequest generates requests for DeleteWorkflowGroup
func NewDeleteWorkflowGroupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowGroupRequest generates requests for GetWorkflowGroup
func NewGetWorkflowGroupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkflowGroupRequestWithBody generates requests for UpdateWorkflowGroup with any type of body
func NewUpdateWorkflowGroupRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkflowTaskRequest generates requests for DeleteWorkflowTask
func NewDeleteWorkflowTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowTaskRequest generates requests for GetWorkflowTask
func NewGetWorkflowTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkflowTaskRequestWithBody generates requests for UpdateWorkflowTask with any type of body
func NewUpdateWorkflowTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowsRequest generates requests for ListWorkflows
func NewListWorkflowsRequest(server string, params *ListWorkflowsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gt]", runtime.ParamLocationQuery, *params.FilterCreatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][gte]", runtime.ParamLocationQuery, *params.FilterCreatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lt]", runtime.ParamLocationQuery, *params.FilterCreatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCreatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[created_at][lte]", runtime.ParamLocationQuery, *params.FilterCreatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowRequestWithBody generates requests for CreateWorkflow with any type of body
func NewCreateWorkflowRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkflowRequest generates requests for DeleteWorkflow
func NewDeleteWorkflowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowRequest generates requests for GetWorkflow
func NewGetWorkflowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkflowRequestWithBody generates requests for UpdateWorkflow with any type of body
func NewUpdateWorkflowRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowCustomFieldSelectionsRequest generates requests for ListWorkflowCustomFieldSelections
func NewListWorkflowCustomFieldSelectionsRequest(server string, workflowId string, params *ListWorkflowCustomFieldSelectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/custom_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowCustomFieldSelectionRequestWithBody generates requests for CreateWorkflowCustomFieldSelection with any type of body
func NewCreateWorkflowCustomFieldSelectionRequestWithBody(server string, workflowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/custom_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowFormFieldConditionsRequest generates requests for ListWorkflowFormFieldConditions
func NewListWorkflowFormFieldConditionsRequest(server string, workflowId string, params *ListWorkflowFormFieldConditionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/form_field_conditions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowFormFieldConditionRequestWithBody generates requests for CreateWorkflowFormFieldCondition with any type of body
func NewCreateWorkflowFormFieldConditionRequestWithBody(server string, workflowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/form_field_conditions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowRunsRequest generates requests for ListWorkflowRuns
func NewListWorkflowRunsRequest(server string, workflowId string, params *ListWorkflowRunsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/workflow_runs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowRunRequestWithBody generates requests for CreateWorkflowRun with any type of body
func NewCreateWorkflowRunRequestWithBody(server string, workflowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/workflow_runs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowTasksRequest generates requests for ListWorkflowTasks
func NewListWorkflowTasksRequest(server string, workflowId string, params *ListWorkflowTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/workflow_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowTaskRequestWithBody generates requests for CreateWorkflowTask with any type of body
func NewCreateWorkflowTaskRequestWithBody(server string, workflowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/workflow_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListAllIncidentActionItems request
	ListAllIncidentActionItemsWithResponse(ctx context.Context, params *ListAllIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*ListAllIncidentActionItemsResponse, error)

	// DeleteIncidentActionItem request
	DeleteIncidentActionItemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentActionItemResponse, error)

	// GetIncidentActionItems request
	GetIncidentActionItemsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentActionItemsResponse, error)

	// UpdateIncidentActionItem request with any body
	UpdateIncidentActionItemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentActionItemResponse, error)

	// ListAlerts request
	ListAlertsWithResponse(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*ListAlertsResponse, error)

	// CreateAlert request with any body
	CreateAlertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlertResponse, error)

	// GetAlert request
	GetAlertWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertResponse, error)

	// ListAudits request
	ListAuditsWithResponse(ctx context.Context, params *ListAuditsParams, reqEditors ...RequestEditorFn) (*ListAuditsResponse, error)

	// ListAuthorizations request
	ListAuthorizationsWithResponse(ctx context.Context, params *ListAuthorizationsParams, reqEditors ...RequestEditorFn) (*ListAuthorizationsResponse, error)

	// CreateAuthorization request with any body
	CreateAuthorizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthorizationResponse, error)

	// DeleteAuthorization request
	DeleteAuthorizationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAuthorizationResponse, error)

	// GetAuthorization request
	GetAuthorizationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAuthorizationResponse, error)

	// UpdateAuthorization request with any body
	UpdateAuthorizationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAuthorizationResponse, error)

	// ListCauses request
	ListCausesWithResponse(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*ListCausesResponse, error)

	// CreateCause request with any body
	CreateCauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCauseResponse, error)

	// DeleteCause request
	DeleteCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCauseResponse, error)

	// GetCause request
	GetCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCauseResponse, error)

	// UpdateCause request with any body
	UpdateCauseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCauseResponse, error)

	// DeleteCustomFieldOption request
	DeleteCustomFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldOptionResponse, error)

	// GetCustomFieldOption request
	GetCustomFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomFieldOptionResponse, error)

	// UpdateCustomFieldOption request with any body
	UpdateCustomFieldOptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldOptionResponse, error)

	// ListCustomFields request
	ListCustomFieldsWithResponse(ctx context.Context, params *ListCustomFieldsParams, reqEditors ...RequestEditorFn) (*ListCustomFieldsResponse, error)

	// CreateCustomField request with any body
	CreateCustomFieldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldResponse, error)

	// ListCustomFieldOptions request
	ListCustomFieldOptionsWithResponse(ctx context.Context, customFieldId string, params *ListCustomFieldOptionsParams, reqEditors ...RequestEditorFn) (*ListCustomFieldOptionsResponse, error)

	// CreateCustomFieldOption request with any body
	CreateCustomFieldOptionWithBodyWithResponse(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldOptionResponse, error)

	// DeleteCustomField request
	DeleteCustomFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldResponse, error)

	// GetCustomField request
	GetCustomFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomFieldResponse, error)

	// UpdateCustomField request with any body
	UpdateCustomFieldWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldResponse, error)

	// DeleteDashboardPanel request
	DeleteDashboardPanelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDashboardPanelResponse, error)

	// GetDashboardPanel request
	GetDashboardPanelWithResponse(ctx context.Context, id string, params *GetDashboardPanelParams, reqEditors ...RequestEditorFn) (*GetDashboardPanelResponse, error)

	// UpdateDashboardPanel request with any body
	UpdateDashboardPanelWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDashboardPanelResponse, error)

	// DuplicateDashboardPanel request
	DuplicateDashboardPanelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DuplicateDashboardPanelResponse, error)

	// ListDashboards request
	ListDashboardsWithResponse(ctx context.Context, params *ListDashboardsParams, reqEditors ...RequestEditorFn) (*ListDashboardsResponse, error)

	// CreateDashboard request with any body
	CreateDashboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDashboardResponse, error)

	// ListDashboardPanels request
	ListDashboardPanelsWithResponse(ctx context.Context, dashboardId string, params *ListDashboardPanelsParams, reqEditors ...RequestEditorFn) (*ListDashboardPanelsResponse, error)

	// CreateDashboardPanel request with any body
	CreateDashboardPanelWithBodyWithResponse(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDashboardPanelResponse, error)

	// DeleteDashboard request
	DeleteDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDashboardResponse, error)

	// GetDashboard request
	GetDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetDashboardResponse, error)

	// UpdateDashboard request with any body
	UpdateDashboardWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDashboardResponse, error)

	// DuplicateDashboard request
	DuplicateDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DuplicateDashboardResponse, error)

	// SetDefaultDashboard request
	SetDefaultDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SetDefaultDashboardResponse, error)

	// ListEnvironments request
	ListEnvironmentsWithResponse(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error)

	// CreateEnvironment request with any body
	CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	// DeleteEnvironment request
	DeleteEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error)

	// GetEnvironment request
	GetEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// UpdateEnvironment request with any body
	UpdateEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error)

	// DeleteIncidentEvent request
	DeleteIncidentEventWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventResponse, error)

	// GetIncidentEvents request
	GetIncidentEventsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventsResponse, error)

	// UpdateIncidentEvent request with any body
	UpdateIncidentEventWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventResponse, error)

	// ListIncidentEventFunctionalities request
	ListIncidentEventFunctionalitiesWithResponse(ctx context.Context, incidentEventId string, params *ListIncidentEventFunctionalitiesParams, reqEditors ...RequestEditorFn) (*ListIncidentEventFunctionalitiesResponse, error)

	// CreateIncidentEventFunctionality request with any body
	CreateIncidentEventFunctionalityWithBodyWithResponse(ctx context.Context, incidentEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventFunctionalityResponse, error)

	// ListIncidentEventServices request
	ListIncidentEventServicesWithResponse(ctx context.Context, incidentEventId string, params *ListIncidentEventServicesParams, reqEditors ...RequestEditorFn) (*ListIncidentEventServicesResponse, error)

	// CreateIncidentEventService request with any body
	CreateIncidentEventServiceWithBodyWithResponse(ctx context.Context, incidentEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventServiceResponse, error)

	// GetIncidentFeedbacks request
	GetIncidentFeedbacksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentFeedbacksResponse, error)

	// UpdateIncidentFeedback request with any body
	UpdateIncidentFeedbackWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentFeedbackResponse, error)

	// DeleteFormFieldOption request
	DeleteFormFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFormFieldOptionResponse, error)

	// GetFormFieldOption request
	GetFormFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFormFieldOptionResponse, error)

	// UpdateFormFieldOption request with any body
	UpdateFormFieldOptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFormFieldOptionResponse, error)

	// DeleteFormFieldPosition request
	DeleteFormFieldPositionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFormFieldPositionResponse, error)

	// GetFormFieldPosition request
	GetFormFieldPositionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFormFieldPositionResponse, error)

	// UpdateFormFieldPosition request with any body
	UpdateFormFieldPositionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFormFieldPositionResponse, error)

	// ListFormFields request
	ListFormFieldsWithResponse(ctx context.Context, params *ListFormFieldsParams, reqEditors ...RequestEditorFn) (*ListFormFieldsResponse, error)

	// CreateFormField request with any body
	CreateFormFieldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFormFieldResponse, error)

	// ListFormFieldOptions request
	ListFormFieldOptionsWithResponse(ctx context.Context, formFieldId string, params *ListFormFieldOptionsParams, reqEditors ...RequestEditorFn) (*ListFormFieldOptionsResponse, error)

	// CreateFormFieldOption request with any body
	CreateFormFieldOptionWithBodyWithResponse(ctx context.Context, formFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFormFieldOptionResponse, error)

	// ListFormFieldPositions request
	ListFormFieldPositionsWithResponse(ctx context.Context, formFieldId string, params *ListFormFieldPositionsParams, reqEditors ...RequestEditorFn) (*ListFormFieldPositionsResponse, error)

	// CreateFormFieldPosition request with any body
	CreateFormFieldPositionWithBodyWithResponse(ctx context.Context, formFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFormFieldPositionResponse, error)

	// DeleteFormField request
	DeleteFormFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFormFieldResponse, error)

	// GetFormField request
	GetFormFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFormFieldResponse, error)

	// UpdateFormField request with any body
	UpdateFormFieldWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFormFieldResponse, error)

	// ListFunctionalities request
	ListFunctionalitiesWithResponse(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*ListFunctionalitiesResponse, error)

	// CreateFunctionality request with any body
	CreateFunctionalityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFunctionalityResponse, error)

	// DeleteFunctionality request
	DeleteFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFunctionalityResponse, error)

	// GetFunctionality request
	GetFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFunctionalityResponse, error)

	// UpdateFunctionality request with any body
	UpdateFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFunctionalityResponse, error)

	// GetFunctionalityIncidentsChart request
	GetFunctionalityIncidentsChartWithResponse(ctx context.Context, id string, params *GetFunctionalityIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetFunctionalityIncidentsChartResponse, error)

	// GetFunctionalityUptimeChart request
	GetFunctionalityUptimeChartWithResponse(ctx context.Context, id string, params *GetFunctionalityUptimeChartParams, reqEditors ...RequestEditorFn) (*GetFunctionalityUptimeChartResponse, error)

	// DeleteIncidentCustomFieldSelection request
	DeleteIncidentCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentCustomFieldSelectionResponse, error)

	// GetIncidentCustomFieldSelection request
	GetIncidentCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentCustomFieldSelectionResponse, error)

	// UpdateIncidentCustomFieldSelection request with any body
	UpdateIncidentCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentCustomFieldSelectionResponse, error)

	// DeleteIncidentEventFunctionality request
	DeleteIncidentEventFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventFunctionalityResponse, error)

	// GetIncidentEventFunctionalities request
	GetIncidentEventFunctionalitiesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventFunctionalitiesResponse, error)

	// UpdateIncidentEventFunctionality request with any body
	UpdateIncidentEventFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventFunctionalityResponse, error)

	// DeleteIncidentEventService request
	DeleteIncidentEventServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventServiceResponse, error)

	// GetIncidentEventServices request
	GetIncidentEventServicesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventServicesResponse, error)

	// UpdateIncidentEventService request with any body
	UpdateIncidentEventServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventServiceResponse, error)

	// DeleteIncidentFormFieldSelection request
	DeleteIncidentFormFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentFormFieldSelectionResponse, error)

	// GetIncidentFormFieldSelection request
	GetIncidentFormFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentFormFieldSelectionResponse, error)

	// UpdateIncidentFormFieldSelection request with any body
	UpdateIncidentFormFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentFormFieldSelectionResponse, error)

	// DeleteIncidentPermissionSetBoolean request
	DeleteIncidentPermissionSetBooleanWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentPermissionSetBooleanResponse, error)

	// GetIncidentPermissionSetBoolean request
	GetIncidentPermissionSetBooleanWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentPermissionSetBooleanResponse, error)

	// UpdateIncidentPermissionSetBoolean request with any body
	UpdateIncidentPermissionSetBooleanWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPermissionSetBooleanResponse, error)

	// DeleteIncidentPermissionSetResource request
	DeleteIncidentPermissionSetResourceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentPermissionSetResourceResponse, error)

	// GetIncidentPermissionSetResource request
	GetIncidentPermissionSetResourceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentPermissionSetResourceResponse, error)

	// UpdateIncidentPermissionSetResource request with any body
	UpdateIncidentPermissionSetResourceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPermissionSetResourceResponse, error)

	// ListIncidentPermissionSets request
	ListIncidentPermissionSetsWithResponse(ctx context.Context, params *ListIncidentPermissionSetsParams, reqEditors ...RequestEditorFn) (*ListIncidentPermissionSetsResponse, error)

	// CreateIncidentPermissionSet request with any body
	CreateIncidentPermissionSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentPermissionSetResponse, error)

	// DeleteIncidentPermissionSet request
	DeleteIncidentPermissionSetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentPermissionSetResponse, error)

	// GetIncidentPermissionSet request
	GetIncidentPermissionSetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentPermissionSetResponse, error)

	// UpdateIncidentPermissionSet request with any body
	UpdateIncidentPermissionSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPermissionSetResponse, error)

	// ListIncidentPermissionSetBooleans request
	ListIncidentPermissionSetBooleansWithResponse(ctx context.Context, incidentPermissionSetId string, params *ListIncidentPermissionSetBooleansParams, reqEditors ...RequestEditorFn) (*ListIncidentPermissionSetBooleansResponse, error)

	// CreateIncidentPermissionSetBoolean request with any body
	CreateIncidentPermissionSetBooleanWithBodyWithResponse(ctx context.Context, incidentPermissionSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentPermissionSetBooleanResponse, error)

	// ListIncidentPermissionSetResources request
	ListIncidentPermissionSetResourcesWithResponse(ctx context.Context, incidentPermissionSetId string, params *ListIncidentPermissionSetResourcesParams, reqEditors ...RequestEditorFn) (*ListIncidentPermissionSetResourcesResponse, error)

	// CreateIncidentPermissionSetResource request with any body
	CreateIncidentPermissionSetResourceWithBodyWithResponse(ctx context.Context, incidentPermissionSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentPermissionSetResourceResponse, error)

	// DeleteIncidentRoleTask request
	DeleteIncidentRoleTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleTaskResponse, error)

	// GetIncidentRoleTask request
	GetIncidentRoleTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleTaskResponse, error)

	// UpdateIncidentRoleTask request with any body
	UpdateIncidentRoleTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleTaskResponse, error)

	// ListIncidentRoles request
	ListIncidentRolesWithResponse(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*ListIncidentRolesResponse, error)

	// CreateIncidentRole request with any body
	CreateIncidentRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleResponse, error)

	// DeleteIncidentRole request
	DeleteIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleResponse, error)

	// GetIncidentRole request
	GetIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleResponse, error)

	// UpdateIncidentRole request with any body
	UpdateIncidentRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleResponse, error)

	// ListIncidentRoleTasks request
	ListIncidentRoleTasksWithResponse(ctx context.Context, incidentRoleId string, params *ListIncidentRoleTasksParams, reqEditors ...RequestEditorFn) (*ListIncidentRoleTasksResponse, error)

	// CreateIncidentRoleTask request with any body
	CreateIncidentRoleTaskWithBodyWithResponse(ctx context.Context, incidentRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleTaskResponse, error)

	// ListIncidentTypes request
	ListIncidentTypesWithResponse(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*ListIncidentTypesResponse, error)

	// CreateIncidentType request with any body
	CreateIncidentTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTypeResponse, error)

	// DeleteIncidentType request
	DeleteIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTypeResponse, error)

	// GetIncidentType request
	GetIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTypeResponse, error)

	// UpdateIncidentType request with any body
	UpdateIncidentTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTypeResponse, error)

	// ListIncidents request
	ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*ListIncidentsResponse, error)

	// CreateIncident request with any body
	CreateIncidentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error)

	// DeleteIncident request
	DeleteIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentResponse, error)

	// GetIncident request
	GetIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentResponse, error)

	// UpdateIncident request with any body
	UpdateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentResponse, error)

	// AddSubscribersToIncident request with any body
	AddSubscribersToIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddSubscribersToIncidentResponse, error)

	// AssignUserToIncident request with any body
	AssignUserToIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignUserToIncidentResponse, error)

	// CancelIncident request with any body
	CancelIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelIncidentResponse, error)

	// MarkAsDuplicateIncident request with any body
	MarkAsDuplicateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarkAsDuplicateIncidentResponse, error)

	// TriageIncident request with any body
	TriageIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TriageIncidentResponse, error)

	// MitigateIncident request with any body
	MitigateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MitigateIncidentResponse, error)

	// RemoveSubscribersToIncident request with any body
	RemoveSubscribersToIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveSubscribersToIncidentResponse, error)

	// ResolveIncident request with any body
	ResolveIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error)

	// RestartIncident request with any body
	RestartIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RestartIncidentResponse, error)

	// RemoveAssignedUserFromIncident request with any body
	RemoveAssignedUserFromIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveAssignedUserFromIncidentResponse, error)

	// ListIncidentActionItems request
	ListIncidentActionItemsWithResponse(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*ListIncidentActionItemsResponse, error)

	// CreateIncidentActionItem request with any body
	CreateIncidentActionItemWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentActionItemResponse, error)

	// ListIncidentAlerts request
	ListIncidentAlertsWithResponse(ctx context.Context, incidentId string, params *ListIncidentAlertsParams, reqEditors ...RequestEditorFn) (*ListIncidentAlertsResponse, error)

	// AttachAlert request with any body
	AttachAlertWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachAlertResponse, error)

	// ListIncidentCustomFieldSelections request
	ListIncidentCustomFieldSelectionsWithResponse(ctx context.Context, incidentId string, params *ListIncidentCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListIncidentCustomFieldSelectionsResponse, error)

	// CreateIncidentCustomFieldSelection request with any body
	CreateIncidentCustomFieldSelectionWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentCustomFieldSelectionResponse, error)

	// ListIncidentEvents request
	ListIncidentEventsWithResponse(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*ListIncidentEventsResponse, error)

	// CreateIncidentEvent request with any body
	CreateIncidentEventWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventResponse, error)

	// ListIncidentFeedbacks request
	ListIncidentFeedbacksWithResponse(ctx context.Context, incidentId string, params *ListIncidentFeedbacksParams, reqEditors ...RequestEditorFn) (*ListIncidentFeedbacksResponse, error)

	// CreateIncidentFeedback request with any body
	CreateIncidentFeedbackWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentFeedbackResponse, error)

	// ListIncidentFormFieldSelections request
	ListIncidentFormFieldSelectionsWithResponse(ctx context.Context, incidentId string, params *ListIncidentFormFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListIncidentFormFieldSelectionsResponse, error)

	// CreateIncidentFormFieldSelection request with any body
	CreateIncidentFormFieldSelectionWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentFormFieldSelectionResponse, error)

	// ListIncidentStatusPages request
	ListIncidentStatusPagesWithResponse(ctx context.Context, incidentId string, params *ListIncidentStatusPagesParams, reqEditors ...RequestEditorFn) (*ListIncidentStatusPagesResponse, error)

	// CreateIncidentStatusPage request with any body
	CreateIncidentStatusPageWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentStatusPageResponse, error)

	// GetIpRanges request
	GetIpRangesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIpRangesResponse, error)

	// DeletePlaybookTask request
	DeletePlaybookTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookTaskResponse, error)

	// GetPlaybookTask request
	GetPlaybookTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookTaskResponse, error)

	// UpdatePlaybookTask request with any body
	UpdatePlaybookTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookTaskResponse, error)

	// ListPlaybooks request
	ListPlaybooksWithResponse(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*ListPlaybooksResponse, error)

	// CreatePlaybook request with any body
	CreatePlaybookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookResponse, error)

	// DeletePlaybook request
	DeletePlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookResponse, error)

	// GetPlaybook request
	GetPlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookResponse, error)

	// UpdatePlaybook request with any body
	UpdatePlaybookWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookResponse, error)

	// ListPlaybookTasks request
	ListPlaybookTasksWithResponse(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*ListPlaybookTasksResponse, error)

	// CreatePlaybookTask request with any body
	CreatePlaybookTaskWithBodyWithResponse(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookTaskResponse, error)

	// ListPostmortemTemplates request
	ListPostmortemTemplatesWithResponse(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*ListPostmortemTemplatesResponse, error)

	// CreatePostmortemTemplate request with any body
	CreatePostmortemTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostmortemTemplateResponse, error)

	// DeletePostmortemTemplate request
	DeletePostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePostmortemTemplateResponse, error)

	// GetPostmortemTemplate request
	GetPostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPostmortemTemplateResponse, error)

	// UpdatePostmortemTemplate request with any body
	UpdatePostmortemTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostmortemTemplateResponse, error)

	// ListIncidentPostMortems request
	ListIncidentPostMortemsWithResponse(ctx context.Context, params *ListIncidentPostMortemsParams, reqEditors ...RequestEditorFn) (*ListIncidentPostMortemsResponse, error)

	// ListIncidentPostmortem request
	ListIncidentPostmortemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ListIncidentPostmortemResponse, error)

	// UpdateIncidentPostmortem request with any body
	UpdateIncidentPostmortemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPostmortemResponse, error)

	// ListPulses request
	ListPulsesWithResponse(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*ListPulsesResponse, error)

	// CreatePulse request with any body
	CreatePulseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePulseResponse, error)

	// GetPulse request
	GetPulseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPulseResponse, error)

	// UpdatePulse request with any body
	UpdatePulseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePulseResponse, error)

	// ListRetrospectiveSteps request
	ListRetrospectiveStepsWithResponse(ctx context.Context, params *ListRetrospectiveStepsParams, reqEditors ...RequestEditorFn) (*ListRetrospectiveStepsResponse, error)

	// CreateRetrospectiveStep request with any body
	CreateRetrospectiveStepWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRetrospectiveStepResponse, error)

	// DeleteRetrospectiveStep request
	DeleteRetrospectiveStepWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteRetrospectiveStepResponse, error)

	// GetRetrospectiveStep request
	GetRetrospectiveStepWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetRetrospectiveStepResponse, error)

	// UpdateRetrospectiveStep request with any body
	UpdateRetrospectiveStepWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveStepResponse, error)

	// ListRoles request
	ListRolesWithResponse(ctx context.Context, params *ListRolesParams, reqEditors ...RequestEditorFn) (*ListRolesResponse, error)

	// CreateRole request with any body
	CreateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error)

	// DeleteRole request
	DeleteRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteRoleResponse, error)

	// GetRole request
	GetRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetRoleResponse, error)

	// UpdateRole request with any body
	UpdateRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error)

	// ListSecrets request
	ListSecretsWithResponse(ctx context.Context, params *ListSecretsParams, reqEditors ...RequestEditorFn) (*ListSecretsResponse, error)

	// CreateSecret request with any body
	CreateSecretWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSecretResponse, error)

	// DeleteSecret request
	DeleteSecretWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSecretResponse, error)

	// GetSecret request
	GetSecretWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSecretResponse, error)

	// UpdateSecret request with any body
	UpdateSecretWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSecretResponse, error)

	// ListServices request
	ListServicesWithResponse(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error)

	// CreateService request with any body
	CreateServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error)

	// DeleteService request
	DeleteServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceResponse, error)

	// GetService request
	GetServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceResponse, error)

	// UpdateService request with any body
	UpdateServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error)

	// GetServiceIncidentsChart request
	GetServiceIncidentsChartWithResponse(ctx context.Context, id string, params *GetServiceIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetServiceIncidentsChartResponse, error)

	// GetServiceUptimeChart request
	GetServiceUptimeChartWithResponse(ctx context.Context, id string, params *GetServiceUptimeChartParams, reqEditors ...RequestEditorFn) (*GetServiceUptimeChartResponse, error)

	// ListSeverities request
	ListSeveritiesWithResponse(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*ListSeveritiesResponse, error)

	// CreateSeverity request with any body
	CreateSeverityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSeverityResponse, error)

	// DeleteSeverity request
	DeleteSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSeverityResponse, error)

	// GetSeverity request
	GetSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSeverityResponse, error)

	// UpdateSeverity request with any body
	UpdateSeverityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSeverityResponse, error)

	// DeleteIncidentStatusPage request
	DeleteIncidentStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentStatusPageResponse, error)

	// GetIncidentStatusPages request
	GetIncidentStatusPagesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentStatusPagesResponse, error)

	// UpdateIncidentStatusPage request with any body
	UpdateIncidentStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentStatusPageResponse, error)

	// ListStatusPages request
	ListStatusPagesWithResponse(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*ListStatusPagesResponse, error)

	// CreateStatusPage request with any body
	CreateStatusPageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStatusPageResponse, error)

	// DeleteStatusPage request
	DeleteStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStatusPageResponse, error)

	// GetStatusPage request
	GetStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStatusPageResponse, error)

	// UpdateStatusPage request with any body
	UpdateStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStatusPageResponse, error)

	// ListStatusPageTemplates request
	ListStatusPageTemplatesWithResponse(ctx context.Context, statusPageId string, params *ListStatusPageTemplatesParams, reqEditors ...RequestEditorFn) (*ListStatusPageTemplatesResponse, error)

	// CreateStatusPageTemplate request with any body
	CreateStatusPageTemplateWithBodyWithResponse(ctx context.Context, statusPageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStatusPageTemplateResponse, error)

	// ListTeams request
	ListTeamsWithResponse(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*ListTeamsResponse, error)

	// CreateTeam request with any body
	CreateTeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	// DeleteTeam request
	DeleteTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error)

	// GetTeam request
	GetTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error)

	// UpdateTeam request with any body
	UpdateTeamWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)

	// DeleteStatusPageTemplate request
	DeleteStatusPageTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStatusPageTemplateResponse, error)

	// GetStatusPageTemplate request
	GetStatusPageTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStatusPageTemplateResponse, error)

	// UpdateStatusPageTemplate request with any body
	UpdateStatusPageTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStatusPageTemplateResponse, error)

	// ListUsers request
	ListUsersWithResponse(ctx context.Context, params *ListUsersParams, reqEditors ...RequestEditorFn) (*ListUsersResponse, error)

	// GetCurrentUser request
	GetCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrentUserResponse, error)

	// DeleteUser request
	DeleteUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// GetUser request
	GetUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// GetWebhooksDelivery request
	GetWebhooksDeliveryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWebhooksDeliveryResponse, error)

	// DeliverWebhooksDelivery request
	DeliverWebhooksDeliveryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeliverWebhooksDeliveryResponse, error)

	// ListWebhooksEndpoints request
	ListWebhooksEndpointsWithResponse(ctx context.Context, params *ListWebhooksEndpointsParams, reqEditors ...RequestEditorFn) (*ListWebhooksEndpointsResponse, error)

	// CreateWebhooksEndpoint request with any body
	CreateWebhooksEndpointWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWebhooksEndpointResponse, error)

	// ListWebhooksDeliveries request
	ListWebhooksDeliveriesWithResponse(ctx context.Context, endpointId string, params *ListWebhooksDeliveriesParams, reqEditors ...RequestEditorFn) (*ListWebhooksDeliveriesResponse, error)

	// DeleteWebhooksEndpoint request
	DeleteWebhooksEndpointWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWebhooksEndpointResponse, error)

	// GetWebhooksEndpoint request
	GetWebhooksEndpointWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWebhooksEndpointResponse, error)

	// UpdateWebhooksEndpoint request with any body
	UpdateWebhooksEndpointWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWebhooksEndpointResponse, error)

	// DeleteWorkflowCustomFieldSelection request
	DeleteWorkflowCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowCustomFieldSelectionResponse, error)

	// GetWorkflowCustomFieldSelection request
	GetWorkflowCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowCustomFieldSelectionResponse, error)

	// UpdateWorkflowCustomFieldSelection request with any body
	UpdateWorkflowCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowCustomFieldSelectionResponse, error)

	// DeleteWorkflowFormFieldCondition request
	DeleteWorkflowFormFieldConditionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowFormFieldConditionResponse, error)

	// GetWorkflowFormFieldCondition request
	GetWorkflowFormFieldConditionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowFormFieldConditionResponse, error)

	// UpdateWorkflowFormFieldCondition request with any body
	UpdateWorkflowFormFieldConditionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowFormFieldConditionResponse, error)

	// ListWorkflowGroups request
	ListWorkflowGroupsWithResponse(ctx context.Context, params *ListWorkflowGroupsParams, reqEditors ...RequestEditorFn) (*ListWorkflowGroupsResponse, error)

	// CreateWorkflowGroup request with any body
	CreateWorkflowGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowGroupResponse, error)

	// DeleteWorkflowGroup request
	DeleteWorkflowGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowGroupResponse, error)

	// GetWorkflowGroup request
	GetWorkflowGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowGroupResponse, error)

	// UpdateWorkflowGroup request with any body
	UpdateWorkflowGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowGroupResponse, error)

	// DeleteWorkflowTask request
	DeleteWorkflowTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowTaskResponse, error)

	// GetWorkflowTask request
	GetWorkflowTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowTaskResponse, error)

	// UpdateWorkflowTask request with any body
	UpdateWorkflowTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowTaskResponse, error)

	// ListWorkflows request
	ListWorkflowsWithResponse(ctx context.Context, params *ListWorkflowsParams, reqEditors ...RequestEditorFn) (*ListWorkflowsResponse, error)

	// CreateWorkflow request with any body
	CreateWorkflowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowResponse, error)

	// DeleteWorkflow request
	DeleteWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowResponse, error)

	// GetWorkflow request
	GetWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowResponse, error)

	// UpdateWorkflow request with any body
	UpdateWorkflowWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowResponse, error)

	// ListWorkflowCustomFieldSelections request
	ListWorkflowCustomFieldSelectionsWithResponse(ctx context.Context, workflowId string, params *ListWorkflowCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListWorkflowCustomFieldSelectionsResponse, error)

	// CreateWorkflowCustomFieldSelection request with any body
	CreateWorkflowCustomFieldSelectionWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowCustomFieldSelectionResponse, error)

	// ListWorkflowFormFieldConditions request
	ListWorkflowFormFieldConditionsWithResponse(ctx context.Context, workflowId string, params *ListWorkflowFormFieldConditionsParams, reqEditors ...RequestEditorFn) (*ListWorkflowFormFieldConditionsResponse, error)

	// CreateWorkflowFormFieldCondition request with any body
	CreateWorkflowFormFieldConditionWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowFormFieldConditionResponse, error)

	// ListWorkflowRuns request
	ListWorkflowRunsWithResponse(ctx context.Context, workflowId string, params *ListWorkflowRunsParams, reqEditors ...RequestEditorFn) (*ListWorkflowRunsResponse, error)

	// CreateWorkflowRun request with any body
	CreateWorkflowRunWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowRunResponse, error)

	// ListWorkflowTasks request
	ListWorkflowTasksWithResponse(ctx context.Context, workflowId string, params *ListWorkflowTasksParams, reqEditors ...RequestEditorFn) (*ListWorkflowTasksResponse, error)

	// CreateWorkflowTask request with any body
	CreateWorkflowTaskWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowTaskResponse, error)
}

type ListAllIncidentActionItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListAllIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAllIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentActionItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAuditsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListAuditsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAuditsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAuthorizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListAuthorizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAuthorizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAuthorizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateAuthorizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthorizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAuthorizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAuthorizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthorizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthorizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAuthorizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthorizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAuthorizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateAuthorizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAuthorizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCausesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListCausesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCausesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomFieldOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCustomFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomFieldOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCustomFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomFieldOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCustomFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCustomFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListCustomFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCustomFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCustomFieldOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListCustomFieldOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCustomFieldOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomFieldOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCustomFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDashboardPanelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDashboardPanelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDashboardPanelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardPanelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDashboardPanelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardPanelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDashboardPanelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateDashboardPanelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDashboardPanelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DuplicateDashboardPanelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DuplicateDashboardPanelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DuplicateDashboardPanelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDashboardsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListDashboardsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDashboardsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDashboardPanelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListDashboardPanelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDashboardPanelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDashboardPanelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateDashboardPanelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDashboardPanelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DuplicateDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DuplicateDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DuplicateDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetDefaultDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SetDefaultDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetDefaultDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentEventFunctionalitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentEventFunctionalitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentEventFunctionalitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentEventFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentEventFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentEventFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentEventServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentEventServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentEventServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentEventServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentEventServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentEventServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentFeedbacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentFeedbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentFeedbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFormFieldOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFormFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFormFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFormFieldOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFormFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFormFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFormFieldOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateFormFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFormFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFormFieldPositionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFormFieldPositionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFormFieldPositionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFormFieldPositionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFormFieldPositionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFormFieldPositionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFormFieldPositionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateFormFieldPositionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFormFieldPositionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFormFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListFormFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFormFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFormFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateFormFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFormFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFormFieldOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListFormFieldOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFormFieldOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFormFieldOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateFormFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFormFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFormFieldPositionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListFormFieldPositionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFormFieldPositionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFormFieldPositionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateFormFieldPositionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFormFieldPositionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFormFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFormFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFormFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFormFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFormFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFormFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFormFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateFormFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFormFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFunctionalitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListFunctionalitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFunctionalitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalityIncidentsChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFunctionalityIncidentsChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalityIncidentsChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalityUptimeChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFunctionalityUptimeChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalityUptimeChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentEventFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentEventFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentEventFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentEventFunctionalitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentEventFunctionalitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentEventFunctionalitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentEventFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentEventFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentEventFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentEventServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentEventServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentEventServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentEventServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentEventServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentEventServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentEventServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentEventServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentEventServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentFormFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentFormFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentFormFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentFormFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentFormFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentFormFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentFormFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentFormFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentFormFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentPermissionSetBooleanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentPermissionSetBooleanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentPermissionSetBooleanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentPermissionSetBooleanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentPermissionSetBooleanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentPermissionSetBooleanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentPermissionSetBooleanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentPermissionSetBooleanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentPermissionSetBooleanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentPermissionSetResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentPermissionSetResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentPermissionSetResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentPermissionSetResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentPermissionSetResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentPermissionSetResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentPermissionSetResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentPermissionSetResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentPermissionSetResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentPermissionSetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentPermissionSetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentPermissionSetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentPermissionSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentPermissionSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentPermissionSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentPermissionSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentPermissionSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentPermissionSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentPermissionSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentPermissionSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentPermissionSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentPermissionSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentPermissionSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentPermissionSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentPermissionSetBooleansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentPermissionSetBooleansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentPermissionSetBooleansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentPermissionSetBooleanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentPermissionSetBooleanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentPermissionSetBooleanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentPermissionSetResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentPermissionSetResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentPermissionSetResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentPermissionSetResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentPermissionSetResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentPermissionSetResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentRoleTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentRoleTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentRoleTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentRoleTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentRoleTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentRoleTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentRoleTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentRoleTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentRoleTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentRoleTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentRoleTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentRoleTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentRoleTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentRoleTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentRoleTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddSubscribersToIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddSubscribersToIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddSubscribersToIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssignUserToIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AssignUserToIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignUserToIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CancelIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarkAsDuplicateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MarkAsDuplicateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarkAsDuplicateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TriageIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TriageIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TriageIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MitigateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MitigateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MitigateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveSubscribersToIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveSubscribersToIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveSubscribersToIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResolveIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResolveIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResolveIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestartIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RestartIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestartIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveAssignedUserFromIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveAssignedUserFromIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveAssignedUserFromIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentActionItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttachAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AttachAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttachAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentCustomFieldSelectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentCustomFieldSelectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentCustomFieldSelectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentFeedbacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentFeedbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentFeedbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentFormFieldSelectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentFormFieldSelectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentFormFieldSelectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentFormFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentFormFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentFormFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentStatusPagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentStatusPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentStatusPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIpRangesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIpRangesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIpRangesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlaybooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPlaybooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlaybooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlaybookTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPlaybookTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlaybookTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPostmortemTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPostmortemTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPostmortemTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentPostMortemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentPostMortemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentPostMortemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentPostmortemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentPostmortemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentPostmortemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentPostmortemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentPostmortemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentPostmortemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPulsesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPulsesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPulsesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRetrospectiveStepsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListRetrospectiveStepsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRetrospectiveStepsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRetrospectiveStepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateRetrospectiveStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRetrospectiveStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRetrospectiveStepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRetrospectiveStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRetrospectiveStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRetrospectiveStepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRetrospectiveStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRetrospectiveStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRetrospectiveStepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateRetrospectiveStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRetrospectiveStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceIncidentsChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceIncidentsChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceIncidentsChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceUptimeChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceUptimeChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceUptimeChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSeveritiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListSeveritiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSeveritiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentStatusPagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentStatusPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentStatusPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStatusPagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListStatusPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStatusPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStatusPageTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListStatusPageTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStatusPageTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStatusPageTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateStatusPageTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStatusPageTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStatusPageTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStatusPageTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStatusPageTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusPageTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatusPageTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusPageTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStatusPageTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateStatusPageTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStatusPageTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCurrentUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCurrentUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCurrentUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhooksDeliveryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWebhooksDeliveryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhooksDeliveryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeliverWebhooksDeliveryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeliverWebhooksDeliveryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeliverWebhooksDeliveryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWebhooksEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListWebhooksEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWebhooksEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWebhooksEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateWebhooksEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWebhooksEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWebhooksDeliveriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListWebhooksDeliveriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWebhooksDeliveriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWebhooksEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWebhooksEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWebhooksEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhooksEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWebhooksEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhooksEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWebhooksEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateWebhooksEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWebhooksEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWorkflowCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkflowCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateWorkflowCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkflowCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowFormFieldConditionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowFormFieldConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowFormFieldConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowFormFieldConditionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWorkflowFormFieldConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowFormFieldConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkflowFormFieldConditionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateWorkflowFormFieldConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkflowFormFieldConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListWorkflowGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWorkflowGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkflowGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateWorkflowGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkflowGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWorkflowTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkflowTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateWorkflowTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkflowTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListWorkflowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowCustomFieldSelectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListWorkflowCustomFieldSelectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowCustomFieldSelectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowFormFieldConditionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListWorkflowFormFieldConditionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowFormFieldConditionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowFormFieldConditionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowFormFieldConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowFormFieldConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowRunsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListWorkflowRunsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowRunsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListWorkflowTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListAllIncidentActionItemsWithResponse request returning *ListAllIncidentActionItemsResponse
func (c *ClientWithResponses) ListAllIncidentActionItemsWithResponse(ctx context.Context, params *ListAllIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*ListAllIncidentActionItemsResponse, error) {
	rsp, err := c.ListAllIncidentActionItems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAllIncidentActionItemsResponse(rsp)
}

// DeleteIncidentActionItemWithResponse request returning *DeleteIncidentActionItemResponse
func (c *ClientWithResponses) DeleteIncidentActionItemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentActionItemResponse, error) {
	rsp, err := c.DeleteIncidentActionItem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentActionItemResponse(rsp)
}

// GetIncidentActionItemsWithResponse request returning *GetIncidentActionItemsResponse
func (c *ClientWithResponses) GetIncidentActionItemsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentActionItemsResponse, error) {
	rsp, err := c.GetIncidentActionItems(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentActionItemsResponse(rsp)
}

// UpdateIncidentActionItemWithBodyWithResponse request with arbitrary body returning *UpdateIncidentActionItemResponse
func (c *ClientWithResponses) UpdateIncidentActionItemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentActionItemResponse, error) {
	rsp, err := c.UpdateIncidentActionItemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentActionItemResponse(rsp)
}

// ListAlertsWithResponse request returning *ListAlertsResponse
func (c *ClientWithResponses) ListAlertsWithResponse(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*ListAlertsResponse, error) {
	rsp, err := c.ListAlerts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAlertsResponse(rsp)
}

// CreateAlertWithBodyWithResponse request with arbitrary body returning *CreateAlertResponse
func (c *ClientWithResponses) CreateAlertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlertResponse, error) {
	rsp, err := c.CreateAlertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAlertResponse(rsp)
}

// GetAlertWithResponse request returning *GetAlertResponse
func (c *ClientWithResponses) GetAlertWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertResponse, error) {
	rsp, err := c.GetAlert(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertResponse(rsp)
}

// ListAuditsWithResponse request returning *ListAuditsResponse
func (c *ClientWithResponses) ListAuditsWithResponse(ctx context.Context, params *ListAuditsParams, reqEditors ...RequestEditorFn) (*ListAuditsResponse, error) {
	rsp, err := c.ListAudits(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAuditsResponse(rsp)
}

// ListAuthorizationsWithResponse request returning *ListAuthorizationsResponse
func (c *ClientWithResponses) ListAuthorizationsWithResponse(ctx context.Context, params *ListAuthorizationsParams, reqEditors ...RequestEditorFn) (*ListAuthorizationsResponse, error) {
	rsp, err := c.ListAuthorizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAuthorizationsResponse(rsp)
}

// CreateAuthorizationWithBodyWithResponse request with arbitrary body returning *CreateAuthorizationResponse
func (c *ClientWithResponses) CreateAuthorizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthorizationResponse, error) {
	rsp, err := c.CreateAuthorizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthorizationResponse(rsp)
}

// DeleteAuthorizationWithResponse request returning *DeleteAuthorizationResponse
func (c *ClientWithResponses) DeleteAuthorizationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAuthorizationResponse, error) {
	rsp, err := c.DeleteAuthorization(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthorizationResponse(rsp)
}

// GetAuthorizationWithResponse request returning *GetAuthorizationResponse
func (c *ClientWithResponses) GetAuthorizationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAuthorizationResponse, error) {
	rsp, err := c.GetAuthorization(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthorizationResponse(rsp)
}

// UpdateAuthorizationWithBodyWithResponse request with arbitrary body returning *UpdateAuthorizationResponse
func (c *ClientWithResponses) UpdateAuthorizationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAuthorizationResponse, error) {
	rsp, err := c.UpdateAuthorizationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAuthorizationResponse(rsp)
}

// ListCausesWithResponse request returning *ListCausesResponse
func (c *ClientWithResponses) ListCausesWithResponse(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*ListCausesResponse, error) {
	rsp, err := c.ListCauses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCausesResponse(rsp)
}

// CreateCauseWithBodyWithResponse request with arbitrary body returning *CreateCauseResponse
func (c *ClientWithResponses) CreateCauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCauseResponse, error) {
	rsp, err := c.CreateCauseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCauseResponse(rsp)
}

// DeleteCauseWithResponse request returning *DeleteCauseResponse
func (c *ClientWithResponses) DeleteCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCauseResponse, error) {
	rsp, err := c.DeleteCause(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCauseResponse(rsp)
}

// GetCauseWithResponse request returning *GetCauseResponse
func (c *ClientWithResponses) GetCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCauseResponse, error) {
	rsp, err := c.GetCause(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCauseResponse(rsp)
}

// UpdateCauseWithBodyWithResponse request with arbitrary body returning *UpdateCauseResponse
func (c *ClientWithResponses) UpdateCauseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCauseResponse, error) {
	rsp, err := c.UpdateCauseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCauseResponse(rsp)
}

// DeleteCustomFieldOptionWithResponse request returning *DeleteCustomFieldOptionResponse
func (c *ClientWithResponses) DeleteCustomFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldOptionResponse, error) {
	rsp, err := c.DeleteCustomFieldOption(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomFieldOptionResponse(rsp)
}

// GetCustomFieldOptionWithResponse request returning *GetCustomFieldOptionResponse
func (c *ClientWithResponses) GetCustomFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomFieldOptionResponse, error) {
	rsp, err := c.GetCustomFieldOption(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomFieldOptionResponse(rsp)
}

// UpdateCustomFieldOptionWithBodyWithResponse request with arbitrary body returning *UpdateCustomFieldOptionResponse
func (c *ClientWithResponses) UpdateCustomFieldOptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldOptionResponse, error) {
	rsp, err := c.UpdateCustomFieldOptionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomFieldOptionResponse(rsp)
}

// ListCustomFieldsWithResponse request returning *ListCustomFieldsResponse
func (c *ClientWithResponses) ListCustomFieldsWithResponse(ctx context.Context, params *ListCustomFieldsParams, reqEditors ...RequestEditorFn) (*ListCustomFieldsResponse, error) {
	rsp, err := c.ListCustomFields(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomFieldsResponse(rsp)
}

// CreateCustomFieldWithBodyWithResponse request with arbitrary body returning *CreateCustomFieldResponse
func (c *ClientWithResponses) CreateCustomFieldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldResponse, error) {
	rsp, err := c.CreateCustomFieldWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomFieldResponse(rsp)
}

// ListCustomFieldOptionsWithResponse request returning *ListCustomFieldOptionsResponse
func (c *ClientWithResponses) ListCustomFieldOptionsWithResponse(ctx context.Context, customFieldId string, params *ListCustomFieldOptionsParams, reqEditors ...RequestEditorFn) (*ListCustomFieldOptionsResponse, error) {
	rsp, err := c.ListCustomFieldOptions(ctx, customFieldId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomFieldOptionsResponse(rsp)
}

// CreateCustomFieldOptionWithBodyWithResponse request with arbitrary body returning *CreateCustomFieldOptionResponse
func (c *ClientWithResponses) CreateCustomFieldOptionWithBodyWithResponse(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldOptionResponse, error) {
	rsp, err := c.CreateCustomFieldOptionWithBody(ctx, customFieldId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomFieldOptionResponse(rsp)
}

// DeleteCustomFieldWithResponse request returning *DeleteCustomFieldResponse
func (c *ClientWithResponses) DeleteCustomFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldResponse, error) {
	rsp, err := c.DeleteCustomField(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomFieldResponse(rsp)
}

// GetCustomFieldWithResponse request returning *GetCustomFieldResponse
func (c *ClientWithResponses) GetCustomFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomFieldResponse, error) {
	rsp, err := c.GetCustomField(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomFieldResponse(rsp)
}

// UpdateCustomFieldWithBodyWithResponse request with arbitrary body returning *UpdateCustomFieldResponse
func (c *ClientWithResponses) UpdateCustomFieldWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldResponse, error) {
	rsp, err := c.UpdateCustomFieldWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomFieldResponse(rsp)
}

// DeleteDashboardPanelWithResponse request returning *DeleteDashboardPanelResponse
func (c *ClientWithResponses) DeleteDashboardPanelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDashboardPanelResponse, error) {
	rsp, err := c.DeleteDashboardPanel(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDashboardPanelResponse(rsp)
}

// GetDashboardPanelWithResponse request returning *GetDashboardPanelResponse
func (c *ClientWithResponses) GetDashboardPanelWithResponse(ctx context.Context, id string, params *GetDashboardPanelParams, reqEditors ...RequestEditorFn) (*GetDashboardPanelResponse, error) {
	rsp, err := c.GetDashboardPanel(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardPanelResponse(rsp)
}

// UpdateDashboardPanelWithBodyWithResponse request with arbitrary body returning *UpdateDashboardPanelResponse
func (c *ClientWithResponses) UpdateDashboardPanelWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDashboardPanelResponse, error) {
	rsp, err := c.UpdateDashboardPanelWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDashboardPanelResponse(rsp)
}

// DuplicateDashboardPanelWithResponse request returning *DuplicateDashboardPanelResponse
func (c *ClientWithResponses) DuplicateDashboardPanelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DuplicateDashboardPanelResponse, error) {
	rsp, err := c.DuplicateDashboardPanel(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDuplicateDashboardPanelResponse(rsp)
}

// ListDashboardsWithResponse request returning *ListDashboardsResponse
func (c *ClientWithResponses) ListDashboardsWithResponse(ctx context.Context, params *ListDashboardsParams, reqEditors ...RequestEditorFn) (*ListDashboardsResponse, error) {
	rsp, err := c.ListDashboards(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDashboardsResponse(rsp)
}

// CreateDashboardWithBodyWithResponse request with arbitrary body returning *CreateDashboardResponse
func (c *ClientWithResponses) CreateDashboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDashboardResponse, error) {
	rsp, err := c.CreateDashboardWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDashboardResponse(rsp)
}

// ListDashboardPanelsWithResponse request returning *ListDashboardPanelsResponse
func (c *ClientWithResponses) ListDashboardPanelsWithResponse(ctx context.Context, dashboardId string, params *ListDashboardPanelsParams, reqEditors ...RequestEditorFn) (*ListDashboardPanelsResponse, error) {
	rsp, err := c.ListDashboardPanels(ctx, dashboardId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDashboardPanelsResponse(rsp)
}

// CreateDashboardPanelWithBodyWithResponse request with arbitrary body returning *CreateDashboardPanelResponse
func (c *ClientWithResponses) CreateDashboardPanelWithBodyWithResponse(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDashboardPanelResponse, error) {
	rsp, err := c.CreateDashboardPanelWithBody(ctx, dashboardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDashboardPanelResponse(rsp)
}

// DeleteDashboardWithResponse request returning *DeleteDashboardResponse
func (c *ClientWithResponses) DeleteDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDashboardResponse, error) {
	rsp, err := c.DeleteDashboard(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDashboardResponse(rsp)
}

// GetDashboardWithResponse request returning *GetDashboardResponse
func (c *ClientWithResponses) GetDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetDashboardResponse, error) {
	rsp, err := c.GetDashboard(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardResponse(rsp)
}

// UpdateDashboardWithBodyWithResponse request with arbitrary body returning *UpdateDashboardResponse
func (c *ClientWithResponses) UpdateDashboardWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDashboardResponse, error) {
	rsp, err := c.UpdateDashboardWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDashboardResponse(rsp)
}

// DuplicateDashboardWithResponse request returning *DuplicateDashboardResponse
func (c *ClientWithResponses) DuplicateDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DuplicateDashboardResponse, error) {
	rsp, err := c.DuplicateDashboard(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDuplicateDashboardResponse(rsp)
}

// SetDefaultDashboardWithResponse request returning *SetDefaultDashboardResponse
func (c *ClientWithResponses) SetDefaultDashboardWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SetDefaultDashboardResponse, error) {
	rsp, err := c.SetDefaultDashboard(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetDefaultDashboardResponse(rsp)
}

// ListEnvironmentsWithResponse request returning *ListEnvironmentsResponse
func (c *ClientWithResponses) ListEnvironmentsWithResponse(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error) {
	rsp, err := c.ListEnvironments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEnvironmentsResponse(rsp)
}

// CreateEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentResponse
func (c *ClientWithResponses) CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

// DeleteEnvironmentWithResponse request returning *DeleteEnvironmentResponse
func (c *ClientWithResponses) DeleteEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error) {
	rsp, err := c.DeleteEnvironment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// UpdateEnvironmentWithBodyWithResponse request with arbitrary body returning *UpdateEnvironmentResponse
func (c *ClientWithResponses) UpdateEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error) {
	rsp, err := c.UpdateEnvironmentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentResponse(rsp)
}

// DeleteIncidentEventWithResponse request returning *DeleteIncidentEventResponse
func (c *ClientWithResponses) DeleteIncidentEventWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventResponse, error) {
	rsp, err := c.DeleteIncidentEvent(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentEventResponse(rsp)
}

// GetIncidentEventsWithResponse request returning *GetIncidentEventsResponse
func (c *ClientWithResponses) GetIncidentEventsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventsResponse, error) {
	rsp, err := c.GetIncidentEvents(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentEventsResponse(rsp)
}

// UpdateIncidentEventWithBodyWithResponse request with arbitrary body returning *UpdateIncidentEventResponse
func (c *ClientWithResponses) UpdateIncidentEventWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventResponse, error) {
	rsp, err := c.UpdateIncidentEventWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentEventResponse(rsp)
}

// ListIncidentEventFunctionalitiesWithResponse request returning *ListIncidentEventFunctionalitiesResponse
func (c *ClientWithResponses) ListIncidentEventFunctionalitiesWithResponse(ctx context.Context, incidentEventId string, params *ListIncidentEventFunctionalitiesParams, reqEditors ...RequestEditorFn) (*ListIncidentEventFunctionalitiesResponse, error) {
	rsp, err := c.ListIncidentEventFunctionalities(ctx, incidentEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentEventFunctionalitiesResponse(rsp)
}

// CreateIncidentEventFunctionalityWithBodyWithResponse request with arbitrary body returning *CreateIncidentEventFunctionalityResponse
func (c *ClientWithResponses) CreateIncidentEventFunctionalityWithBodyWithResponse(ctx context.Context, incidentEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventFunctionalityResponse, error) {
	rsp, err := c.CreateIncidentEventFunctionalityWithBody(ctx, incidentEventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentEventFunctionalityResponse(rsp)
}

// ListIncidentEventServicesWithResponse request returning *ListIncidentEventServicesResponse
func (c *ClientWithResponses) ListIncidentEventServicesWithResponse(ctx context.Context, incidentEventId string, params *ListIncidentEventServicesParams, reqEditors ...RequestEditorFn) (*ListIncidentEventServicesResponse, error) {
	rsp, err := c.ListIncidentEventServices(ctx, incidentEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentEventServicesResponse(rsp)
}

// CreateIncidentEventServiceWithBodyWithResponse request with arbitrary body returning *CreateIncidentEventServiceResponse
func (c *ClientWithResponses) CreateIncidentEventServiceWithBodyWithResponse(ctx context.Context, incidentEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventServiceResponse, error) {
	rsp, err := c.CreateIncidentEventServiceWithBody(ctx, incidentEventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentEventServiceResponse(rsp)
}

// GetIncidentFeedbacksWithResponse request returning *GetIncidentFeedbacksResponse
func (c *ClientWithResponses) GetIncidentFeedbacksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentFeedbacksResponse, error) {
	rsp, err := c.GetIncidentFeedbacks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentFeedbacksResponse(rsp)
}

// UpdateIncidentFeedbackWithBodyWithResponse request with arbitrary body returning *UpdateIncidentFeedbackResponse
func (c *ClientWithResponses) UpdateIncidentFeedbackWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentFeedbackResponse, error) {
	rsp, err := c.UpdateIncidentFeedbackWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentFeedbackResponse(rsp)
}

// DeleteFormFieldOptionWithResponse request returning *DeleteFormFieldOptionResponse
func (c *ClientWithResponses) DeleteFormFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFormFieldOptionResponse, error) {
	rsp, err := c.DeleteFormFieldOption(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFormFieldOptionResponse(rsp)
}

// GetFormFieldOptionWithResponse request returning *GetFormFieldOptionResponse
func (c *ClientWithResponses) GetFormFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFormFieldOptionResponse, error) {
	rsp, err := c.GetFormFieldOption(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFormFieldOptionResponse(rsp)
}

// UpdateFormFieldOptionWithBodyWithResponse request with arbitrary body returning *UpdateFormFieldOptionResponse
func (c *ClientWithResponses) UpdateFormFieldOptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFormFieldOptionResponse, error) {
	rsp, err := c.UpdateFormFieldOptionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFormFieldOptionResponse(rsp)
}

// DeleteFormFieldPositionWithResponse request returning *DeleteFormFieldPositionResponse
func (c *ClientWithResponses) DeleteFormFieldPositionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFormFieldPositionResponse, error) {
	rsp, err := c.DeleteFormFieldPosition(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFormFieldPositionResponse(rsp)
}

// GetFormFieldPositionWithResponse request returning *GetFormFieldPositionResponse
func (c *ClientWithResponses) GetFormFieldPositionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFormFieldPositionResponse, error) {
	rsp, err := c.GetFormFieldPosition(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFormFieldPositionResponse(rsp)
}

// UpdateFormFieldPositionWithBodyWithResponse request with arbitrary body returning *UpdateFormFieldPositionResponse
func (c *ClientWithResponses) UpdateFormFieldPositionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFormFieldPositionResponse, error) {
	rsp, err := c.UpdateFormFieldPositionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFormFieldPositionResponse(rsp)
}

// ListFormFieldsWithResponse request returning *ListFormFieldsResponse
func (c *ClientWithResponses) ListFormFieldsWithResponse(ctx context.Context, params *ListFormFieldsParams, reqEditors ...RequestEditorFn) (*ListFormFieldsResponse, error) {
	rsp, err := c.ListFormFields(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFormFieldsResponse(rsp)
}

// CreateFormFieldWithBodyWithResponse request with arbitrary body returning *CreateFormFieldResponse
func (c *ClientWithResponses) CreateFormFieldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFormFieldResponse, error) {
	rsp, err := c.CreateFormFieldWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFormFieldResponse(rsp)
}

// ListFormFieldOptionsWithResponse request returning *ListFormFieldOptionsResponse
func (c *ClientWithResponses) ListFormFieldOptionsWithResponse(ctx context.Context, formFieldId string, params *ListFormFieldOptionsParams, reqEditors ...RequestEditorFn) (*ListFormFieldOptionsResponse, error) {
	rsp, err := c.ListFormFieldOptions(ctx, formFieldId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFormFieldOptionsResponse(rsp)
}

// CreateFormFieldOptionWithBodyWithResponse request with arbitrary body returning *CreateFormFieldOptionResponse
func (c *ClientWithResponses) CreateFormFieldOptionWithBodyWithResponse(ctx context.Context, formFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFormFieldOptionResponse, error) {
	rsp, err := c.CreateFormFieldOptionWithBody(ctx, formFieldId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFormFieldOptionResponse(rsp)
}

// ListFormFieldPositionsWithResponse request returning *ListFormFieldPositionsResponse
func (c *ClientWithResponses) ListFormFieldPositionsWithResponse(ctx context.Context, formFieldId string, params *ListFormFieldPositionsParams, reqEditors ...RequestEditorFn) (*ListFormFieldPositionsResponse, error) {
	rsp, err := c.ListFormFieldPositions(ctx, formFieldId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFormFieldPositionsResponse(rsp)
}

// CreateFormFieldPositionWithBodyWithResponse request with arbitrary body returning *CreateFormFieldPositionResponse
func (c *ClientWithResponses) CreateFormFieldPositionWithBodyWithResponse(ctx context.Context, formFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFormFieldPositionResponse, error) {
	rsp, err := c.CreateFormFieldPositionWithBody(ctx, formFieldId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFormFieldPositionResponse(rsp)
}

// DeleteFormFieldWithResponse request returning *DeleteFormFieldResponse
func (c *ClientWithResponses) DeleteFormFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFormFieldResponse, error) {
	rsp, err := c.DeleteFormField(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFormFieldResponse(rsp)
}

// GetFormFieldWithResponse request returning *GetFormFieldResponse
func (c *ClientWithResponses) GetFormFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFormFieldResponse, error) {
	rsp, err := c.GetFormField(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFormFieldResponse(rsp)
}

// UpdateFormFieldWithBodyWithResponse request with arbitrary body returning *UpdateFormFieldResponse
func (c *ClientWithResponses) UpdateFormFieldWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFormFieldResponse, error) {
	rsp, err := c.UpdateFormFieldWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFormFieldResponse(rsp)
}

// ListFunctionalitiesWithResponse request returning *ListFunctionalitiesResponse
func (c *ClientWithResponses) ListFunctionalitiesWithResponse(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*ListFunctionalitiesResponse, error) {
	rsp, err := c.ListFunctionalities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFunctionalitiesResponse(rsp)
}

// CreateFunctionalityWithBodyWithResponse request with arbitrary body returning *CreateFunctionalityResponse
func (c *ClientWithResponses) CreateFunctionalityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFunctionalityResponse, error) {
	rsp, err := c.CreateFunctionalityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFunctionalityResponse(rsp)
}

// DeleteFunctionalityWithResponse request returning *DeleteFunctionalityResponse
func (c *ClientWithResponses) DeleteFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFunctionalityResponse, error) {
	rsp, err := c.DeleteFunctionality(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFunctionalityResponse(rsp)
}

// GetFunctionalityWithResponse request returning *GetFunctionalityResponse
func (c *ClientWithResponses) GetFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFunctionalityResponse, error) {
	rsp, err := c.GetFunctionality(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalityResponse(rsp)
}

// UpdateFunctionalityWithBodyWithResponse request with arbitrary body returning *UpdateFunctionalityResponse
func (c *ClientWithResponses) UpdateFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFunctionalityResponse, error) {
	rsp, err := c.UpdateFunctionalityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFunctionalityResponse(rsp)
}

// GetFunctionalityIncidentsChartWithResponse request returning *GetFunctionalityIncidentsChartResponse
func (c *ClientWithResponses) GetFunctionalityIncidentsChartWithResponse(ctx context.Context, id string, params *GetFunctionalityIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetFunctionalityIncidentsChartResponse, error) {
	rsp, err := c.GetFunctionalityIncidentsChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalityIncidentsChartResponse(rsp)
}

// GetFunctionalityUptimeChartWithResponse request returning *GetFunctionalityUptimeChartResponse
func (c *ClientWithResponses) GetFunctionalityUptimeChartWithResponse(ctx context.Context, id string, params *GetFunctionalityUptimeChartParams, reqEditors ...RequestEditorFn) (*GetFunctionalityUptimeChartResponse, error) {
	rsp, err := c.GetFunctionalityUptimeChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalityUptimeChartResponse(rsp)
}

// DeleteIncidentCustomFieldSelectionWithResponse request returning *DeleteIncidentCustomFieldSelectionResponse
func (c *ClientWithResponses) DeleteIncidentCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.DeleteIncidentCustomFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentCustomFieldSelectionResponse(rsp)
}

// GetIncidentCustomFieldSelectionWithResponse request returning *GetIncidentCustomFieldSelectionResponse
func (c *ClientWithResponses) GetIncidentCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.GetIncidentCustomFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentCustomFieldSelectionResponse(rsp)
}

// UpdateIncidentCustomFieldSelectionWithBodyWithResponse request with arbitrary body returning *UpdateIncidentCustomFieldSelectionResponse
func (c *ClientWithResponses) UpdateIncidentCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.UpdateIncidentCustomFieldSelectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentCustomFieldSelectionResponse(rsp)
}

// DeleteIncidentEventFunctionalityWithResponse request returning *DeleteIncidentEventFunctionalityResponse
func (c *ClientWithResponses) DeleteIncidentEventFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventFunctionalityResponse, error) {
	rsp, err := c.DeleteIncidentEventFunctionality(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentEventFunctionalityResponse(rsp)
}

// GetIncidentEventFunctionalitiesWithResponse request returning *GetIncidentEventFunctionalitiesResponse
func (c *ClientWithResponses) GetIncidentEventFunctionalitiesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventFunctionalitiesResponse, error) {
	rsp, err := c.GetIncidentEventFunctionalities(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentEventFunctionalitiesResponse(rsp)
}

// UpdateIncidentEventFunctionalityWithBodyWithResponse request with arbitrary body returning *UpdateIncidentEventFunctionalityResponse
func (c *ClientWithResponses) UpdateIncidentEventFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventFunctionalityResponse, error) {
	rsp, err := c.UpdateIncidentEventFunctionalityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentEventFunctionalityResponse(rsp)
}

// DeleteIncidentEventServiceWithResponse request returning *DeleteIncidentEventServiceResponse
func (c *ClientWithResponses) DeleteIncidentEventServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventServiceResponse, error) {
	rsp, err := c.DeleteIncidentEventService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentEventServiceResponse(rsp)
}

// GetIncidentEventServicesWithResponse request returning *GetIncidentEventServicesResponse
func (c *ClientWithResponses) GetIncidentEventServicesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventServicesResponse, error) {
	rsp, err := c.GetIncidentEventServices(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentEventServicesResponse(rsp)
}

// UpdateIncidentEventServiceWithBodyWithResponse request with arbitrary body returning *UpdateIncidentEventServiceResponse
func (c *ClientWithResponses) UpdateIncidentEventServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventServiceResponse, error) {
	rsp, err := c.UpdateIncidentEventServiceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentEventServiceResponse(rsp)
}

// DeleteIncidentFormFieldSelectionWithResponse request returning *DeleteIncidentFormFieldSelectionResponse
func (c *ClientWithResponses) DeleteIncidentFormFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentFormFieldSelectionResponse, error) {
	rsp, err := c.DeleteIncidentFormFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentFormFieldSelectionResponse(rsp)
}

// GetIncidentFormFieldSelectionWithResponse request returning *GetIncidentFormFieldSelectionResponse
func (c *ClientWithResponses) GetIncidentFormFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentFormFieldSelectionResponse, error) {
	rsp, err := c.GetIncidentFormFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentFormFieldSelectionResponse(rsp)
}

// UpdateIncidentFormFieldSelectionWithBodyWithResponse request with arbitrary body returning *UpdateIncidentFormFieldSelectionResponse
func (c *ClientWithResponses) UpdateIncidentFormFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentFormFieldSelectionResponse, error) {
	rsp, err := c.UpdateIncidentFormFieldSelectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentFormFieldSelectionResponse(rsp)
}

// DeleteIncidentPermissionSetBooleanWithResponse request returning *DeleteIncidentPermissionSetBooleanResponse
func (c *ClientWithResponses) DeleteIncidentPermissionSetBooleanWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentPermissionSetBooleanResponse, error) {
	rsp, err := c.DeleteIncidentPermissionSetBoolean(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentPermissionSetBooleanResponse(rsp)
}

// GetIncidentPermissionSetBooleanWithResponse request returning *GetIncidentPermissionSetBooleanResponse
func (c *ClientWithResponses) GetIncidentPermissionSetBooleanWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentPermissionSetBooleanResponse, error) {
	rsp, err := c.GetIncidentPermissionSetBoolean(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentPermissionSetBooleanResponse(rsp)
}

// UpdateIncidentPermissionSetBooleanWithBodyWithResponse request with arbitrary body returning *UpdateIncidentPermissionSetBooleanResponse
func (c *ClientWithResponses) UpdateIncidentPermissionSetBooleanWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPermissionSetBooleanResponse, error) {
	rsp, err := c.UpdateIncidentPermissionSetBooleanWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentPermissionSetBooleanResponse(rsp)
}

// DeleteIncidentPermissionSetResourceWithResponse request returning *DeleteIncidentPermissionSetResourceResponse
func (c *ClientWithResponses) DeleteIncidentPermissionSetResourceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentPermissionSetResourceResponse, error) {
	rsp, err := c.DeleteIncidentPermissionSetResource(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentPermissionSetResourceResponse(rsp)
}

// GetIncidentPermissionSetResourceWithResponse request returning *GetIncidentPermissionSetResourceResponse
func (c *ClientWithResponses) GetIncidentPermissionSetResourceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentPermissionSetResourceResponse, error) {
	rsp, err := c.GetIncidentPermissionSetResource(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentPermissionSetResourceResponse(rsp)
}

// UpdateIncidentPermissionSetResourceWithBodyWithResponse request with arbitrary body returning *UpdateIncidentPermissionSetResourceResponse
func (c *ClientWithResponses) UpdateIncidentPermissionSetResourceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPermissionSetResourceResponse, error) {
	rsp, err := c.UpdateIncidentPermissionSetResourceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentPermissionSetResourceResponse(rsp)
}

// ListIncidentPermissionSetsWithResponse request returning *ListIncidentPermissionSetsResponse
func (c *ClientWithResponses) ListIncidentPermissionSetsWithResponse(ctx context.Context, params *ListIncidentPermissionSetsParams, reqEditors ...RequestEditorFn) (*ListIncidentPermissionSetsResponse, error) {
	rsp, err := c.ListIncidentPermissionSets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentPermissionSetsResponse(rsp)
}

// CreateIncidentPermissionSetWithBodyWithResponse request with arbitrary body returning *CreateIncidentPermissionSetResponse
func (c *ClientWithResponses) CreateIncidentPermissionSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentPermissionSetResponse, error) {
	rsp, err := c.CreateIncidentPermissionSetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentPermissionSetResponse(rsp)
}

// DeleteIncidentPermissionSetWithResponse request returning *DeleteIncidentPermissionSetResponse
func (c *ClientWithResponses) DeleteIncidentPermissionSetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentPermissionSetResponse, error) {
	rsp, err := c.DeleteIncidentPermissionSet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentPermissionSetResponse(rsp)
}

// GetIncidentPermissionSetWithResponse request returning *GetIncidentPermissionSetResponse
func (c *ClientWithResponses) GetIncidentPermissionSetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentPermissionSetResponse, error) {
	rsp, err := c.GetIncidentPermissionSet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentPermissionSetResponse(rsp)
}

// UpdateIncidentPermissionSetWithBodyWithResponse request with arbitrary body returning *UpdateIncidentPermissionSetResponse
func (c *ClientWithResponses) UpdateIncidentPermissionSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPermissionSetResponse, error) {
	rsp, err := c.UpdateIncidentPermissionSetWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentPermissionSetResponse(rsp)
}

// ListIncidentPermissionSetBooleansWithResponse request returning *ListIncidentPermissionSetBooleansResponse
func (c *ClientWithResponses) ListIncidentPermissionSetBooleansWithResponse(ctx context.Context, incidentPermissionSetId string, params *ListIncidentPermissionSetBooleansParams, reqEditors ...RequestEditorFn) (*ListIncidentPermissionSetBooleansResponse, error) {
	rsp, err := c.ListIncidentPermissionSetBooleans(ctx, incidentPermissionSetId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentPermissionSetBooleansResponse(rsp)
}

// CreateIncidentPermissionSetBooleanWithBodyWithResponse request with arbitrary body returning *CreateIncidentPermissionSetBooleanResponse
func (c *ClientWithResponses) CreateIncidentPermissionSetBooleanWithBodyWithResponse(ctx context.Context, incidentPermissionSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentPermissionSetBooleanResponse, error) {
	rsp, err := c.CreateIncidentPermissionSetBooleanWithBody(ctx, incidentPermissionSetId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentPermissionSetBooleanResponse(rsp)
}

// ListIncidentPermissionSetResourcesWithResponse request returning *ListIncidentPermissionSetResourcesResponse
func (c *ClientWithResponses) ListIncidentPermissionSetResourcesWithResponse(ctx context.Context, incidentPermissionSetId string, params *ListIncidentPermissionSetResourcesParams, reqEditors ...RequestEditorFn) (*ListIncidentPermissionSetResourcesResponse, error) {
	rsp, err := c.ListIncidentPermissionSetResources(ctx, incidentPermissionSetId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentPermissionSetResourcesResponse(rsp)
}

// CreateIncidentPermissionSetResourceWithBodyWithResponse request with arbitrary body returning *CreateIncidentPermissionSetResourceResponse
func (c *ClientWithResponses) CreateIncidentPermissionSetResourceWithBodyWithResponse(ctx context.Context, incidentPermissionSetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentPermissionSetResourceResponse, error) {
	rsp, err := c.CreateIncidentPermissionSetResourceWithBody(ctx, incidentPermissionSetId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentPermissionSetResourceResponse(rsp)
}

// DeleteIncidentRoleTaskWithResponse request returning *DeleteIncidentRoleTaskResponse
func (c *ClientWithResponses) DeleteIncidentRoleTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleTaskResponse, error) {
	rsp, err := c.DeleteIncidentRoleTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentRoleTaskResponse(rsp)
}

// GetIncidentRoleTaskWithResponse request returning *GetIncidentRoleTaskResponse
func (c *ClientWithResponses) GetIncidentRoleTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleTaskResponse, error) {
	rsp, err := c.GetIncidentRoleTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentRoleTaskResponse(rsp)
}

// UpdateIncidentRoleTaskWithBodyWithResponse request with arbitrary body returning *UpdateIncidentRoleTaskResponse
func (c *ClientWithResponses) UpdateIncidentRoleTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleTaskResponse, error) {
	rsp, err := c.UpdateIncidentRoleTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentRoleTaskResponse(rsp)
}

// ListIncidentRolesWithResponse request returning *ListIncidentRolesResponse
func (c *ClientWithResponses) ListIncidentRolesWithResponse(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*ListIncidentRolesResponse, error) {
	rsp, err := c.ListIncidentRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentRolesResponse(rsp)
}

// CreateIncidentRoleWithBodyWithResponse request with arbitrary body returning *CreateIncidentRoleResponse
func (c *ClientWithResponses) CreateIncidentRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleResponse, error) {
	rsp, err := c.CreateIncidentRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentRoleResponse(rsp)
}

// DeleteIncidentRoleWithResponse request returning *DeleteIncidentRoleResponse
func (c *ClientWithResponses) DeleteIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleResponse, error) {
	rsp, err := c.DeleteIncidentRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentRoleResponse(rsp)
}

// GetIncidentRoleWithResponse request returning *GetIncidentRoleResponse
func (c *ClientWithResponses) GetIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleResponse, error) {
	rsp, err := c.GetIncidentRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentRoleResponse(rsp)
}

// UpdateIncidentRoleWithBodyWithResponse request with arbitrary body returning *UpdateIncidentRoleResponse
func (c *ClientWithResponses) UpdateIncidentRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleResponse, error) {
	rsp, err := c.UpdateIncidentRoleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentRoleResponse(rsp)
}

// ListIncidentRoleTasksWithResponse request returning *ListIncidentRoleTasksResponse
func (c *ClientWithResponses) ListIncidentRoleTasksWithResponse(ctx context.Context, incidentRoleId string, params *ListIncidentRoleTasksParams, reqEditors ...RequestEditorFn) (*ListIncidentRoleTasksResponse, error) {
	rsp, err := c.ListIncidentRoleTasks(ctx, incidentRoleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentRoleTasksResponse(rsp)
}

// CreateIncidentRoleTaskWithBodyWithResponse request with arbitrary body returning *CreateIncidentRoleTaskResponse
func (c *ClientWithResponses) CreateIncidentRoleTaskWithBodyWithResponse(ctx context.Context, incidentRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleTaskResponse, error) {
	rsp, err := c.CreateIncidentRoleTaskWithBody(ctx, incidentRoleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentRoleTaskResponse(rsp)
}

// ListIncidentTypesWithResponse request returning *ListIncidentTypesResponse
func (c *ClientWithResponses) ListIncidentTypesWithResponse(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*ListIncidentTypesResponse, error) {
	rsp, err := c.ListIncidentTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentTypesResponse(rsp)
}

// CreateIncidentTypeWithBodyWithResponse request with arbitrary body returning *CreateIncidentTypeResponse
func (c *ClientWithResponses) CreateIncidentTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTypeResponse, error) {
	rsp, err := c.CreateIncidentTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentTypeResponse(rsp)
}

// DeleteIncidentTypeWithResponse request returning *DeleteIncidentTypeResponse
func (c *ClientWithResponses) DeleteIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTypeResponse, error) {
	rsp, err := c.DeleteIncidentType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentTypeResponse(rsp)
}

// GetIncidentTypeWithResponse request returning *GetIncidentTypeResponse
func (c *ClientWithResponses) GetIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTypeResponse, error) {
	rsp, err := c.GetIncidentType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentTypeResponse(rsp)
}

// UpdateIncidentTypeWithBodyWithResponse request with arbitrary body returning *UpdateIncidentTypeResponse
func (c *ClientWithResponses) UpdateIncidentTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTypeResponse, error) {
	rsp, err := c.UpdateIncidentTypeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentTypeResponse(rsp)
}

// ListIncidentsWithResponse request returning *ListIncidentsResponse
func (c *ClientWithResponses) ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*ListIncidentsResponse, error) {
	rsp, err := c.ListIncidents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentsResponse(rsp)
}

// CreateIncidentWithBodyWithResponse request with arbitrary body returning *CreateIncidentResponse
func (c *ClientWithResponses) CreateIncidentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error) {
	rsp, err := c.CreateIncidentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentResponse(rsp)
}

// DeleteIncidentWithResponse request returning *DeleteIncidentResponse
func (c *ClientWithResponses) DeleteIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentResponse, error) {
	rsp, err := c.DeleteIncident(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentResponse(rsp)
}

// GetIncidentWithResponse request returning *GetIncidentResponse
func (c *ClientWithResponses) GetIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentResponse, error) {
	rsp, err := c.GetIncident(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentResponse(rsp)
}

// UpdateIncidentWithBodyWithResponse request with arbitrary body returning *UpdateIncidentResponse
func (c *ClientWithResponses) UpdateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentResponse, error) {
	rsp, err := c.UpdateIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentResponse(rsp)
}

// AddSubscribersToIncidentWithBodyWithResponse request with arbitrary body returning *AddSubscribersToIncidentResponse
func (c *ClientWithResponses) AddSubscribersToIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddSubscribersToIncidentResponse, error) {
	rsp, err := c.AddSubscribersToIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddSubscribersToIncidentResponse(rsp)
}

// AssignUserToIncidentWithBodyWithResponse request with arbitrary body returning *AssignUserToIncidentResponse
func (c *ClientWithResponses) AssignUserToIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignUserToIncidentResponse, error) {
	rsp, err := c.AssignUserToIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignUserToIncidentResponse(rsp)
}

// CancelIncidentWithBodyWithResponse request with arbitrary body returning *CancelIncidentResponse
func (c *ClientWithResponses) CancelIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelIncidentResponse, error) {
	rsp, err := c.CancelIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelIncidentResponse(rsp)
}

// MarkAsDuplicateIncidentWithBodyWithResponse request with arbitrary body returning *MarkAsDuplicateIncidentResponse
func (c *ClientWithResponses) MarkAsDuplicateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarkAsDuplicateIncidentResponse, error) {
	rsp, err := c.MarkAsDuplicateIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarkAsDuplicateIncidentResponse(rsp)
}

// TriageIncidentWithBodyWithResponse request with arbitrary body returning *TriageIncidentResponse
func (c *ClientWithResponses) TriageIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TriageIncidentResponse, error) {
	rsp, err := c.TriageIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTriageIncidentResponse(rsp)
}

// MitigateIncidentWithBodyWithResponse request with arbitrary body returning *MitigateIncidentResponse
func (c *ClientWithResponses) MitigateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MitigateIncidentResponse, error) {
	rsp, err := c.MitigateIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMitigateIncidentResponse(rsp)
}

// RemoveSubscribersToIncidentWithBodyWithResponse request with arbitrary body returning *RemoveSubscribersToIncidentResponse
func (c *ClientWithResponses) RemoveSubscribersToIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveSubscribersToIncidentResponse, error) {
	rsp, err := c.RemoveSubscribersToIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveSubscribersToIncidentResponse(rsp)
}

// ResolveIncidentWithBodyWithResponse request with arbitrary body returning *ResolveIncidentResponse
func (c *ClientWithResponses) ResolveIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error) {
	rsp, err := c.ResolveIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolveIncidentResponse(rsp)
}

// RestartIncidentWithBodyWithResponse request with arbitrary body returning *RestartIncidentResponse
func (c *ClientWithResponses) RestartIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RestartIncidentResponse, error) {
	rsp, err := c.RestartIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestartIncidentResponse(rsp)
}

// RemoveAssignedUserFromIncidentWithBodyWithResponse request with arbitrary body returning *RemoveAssignedUserFromIncidentResponse
func (c *ClientWithResponses) RemoveAssignedUserFromIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveAssignedUserFromIncidentResponse, error) {
	rsp, err := c.RemoveAssignedUserFromIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveAssignedUserFromIncidentResponse(rsp)
}

// ListIncidentActionItemsWithResponse request returning *ListIncidentActionItemsResponse
func (c *ClientWithResponses) ListIncidentActionItemsWithResponse(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*ListIncidentActionItemsResponse, error) {
	rsp, err := c.ListIncidentActionItems(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentActionItemsResponse(rsp)
}

// CreateIncidentActionItemWithBodyWithResponse request with arbitrary body returning *CreateIncidentActionItemResponse
func (c *ClientWithResponses) CreateIncidentActionItemWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentActionItemResponse, error) {
	rsp, err := c.CreateIncidentActionItemWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentActionItemResponse(rsp)
}

// ListIncidentAlertsWithResponse request returning *ListIncidentAlertsResponse
func (c *ClientWithResponses) ListIncidentAlertsWithResponse(ctx context.Context, incidentId string, params *ListIncidentAlertsParams, reqEditors ...RequestEditorFn) (*ListIncidentAlertsResponse, error) {
	rsp, err := c.ListIncidentAlerts(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentAlertsResponse(rsp)
}

// AttachAlertWithBodyWithResponse request with arbitrary body returning *AttachAlertResponse
func (c *ClientWithResponses) AttachAlertWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachAlertResponse, error) {
	rsp, err := c.AttachAlertWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachAlertResponse(rsp)
}

// ListIncidentCustomFieldSelectionsWithResponse request returning *ListIncidentCustomFieldSelectionsResponse
func (c *ClientWithResponses) ListIncidentCustomFieldSelectionsWithResponse(ctx context.Context, incidentId string, params *ListIncidentCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListIncidentCustomFieldSelectionsResponse, error) {
	rsp, err := c.ListIncidentCustomFieldSelections(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentCustomFieldSelectionsResponse(rsp)
}

// CreateIncidentCustomFieldSelectionWithBodyWithResponse request with arbitrary body returning *CreateIncidentCustomFieldSelectionResponse
func (c *ClientWithResponses) CreateIncidentCustomFieldSelectionWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.CreateIncidentCustomFieldSelectionWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentCustomFieldSelectionResponse(rsp)
}

// ListIncidentEventsWithResponse request returning *ListIncidentEventsResponse
func (c *ClientWithResponses) ListIncidentEventsWithResponse(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*ListIncidentEventsResponse, error) {
	rsp, err := c.ListIncidentEvents(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentEventsResponse(rsp)
}

// CreateIncidentEventWithBodyWithResponse request with arbitrary body returning *CreateIncidentEventResponse
func (c *ClientWithResponses) CreateIncidentEventWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventResponse, error) {
	rsp, err := c.CreateIncidentEventWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentEventResponse(rsp)
}

// ListIncidentFeedbacksWithResponse request returning *ListIncidentFeedbacksResponse
func (c *ClientWithResponses) ListIncidentFeedbacksWithResponse(ctx context.Context, incidentId string, params *ListIncidentFeedbacksParams, reqEditors ...RequestEditorFn) (*ListIncidentFeedbacksResponse, error) {
	rsp, err := c.ListIncidentFeedbacks(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentFeedbacksResponse(rsp)
}

// CreateIncidentFeedbackWithBodyWithResponse request with arbitrary body returning *CreateIncidentFeedbackResponse
func (c *ClientWithResponses) CreateIncidentFeedbackWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentFeedbackResponse, error) {
	rsp, err := c.CreateIncidentFeedbackWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentFeedbackResponse(rsp)
}

// ListIncidentFormFieldSelectionsWithResponse request returning *ListIncidentFormFieldSelectionsResponse
func (c *ClientWithResponses) ListIncidentFormFieldSelectionsWithResponse(ctx context.Context, incidentId string, params *ListIncidentFormFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListIncidentFormFieldSelectionsResponse, error) {
	rsp, err := c.ListIncidentFormFieldSelections(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentFormFieldSelectionsResponse(rsp)
}

// CreateIncidentFormFieldSelectionWithBodyWithResponse request with arbitrary body returning *CreateIncidentFormFieldSelectionResponse
func (c *ClientWithResponses) CreateIncidentFormFieldSelectionWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentFormFieldSelectionResponse, error) {
	rsp, err := c.CreateIncidentFormFieldSelectionWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentFormFieldSelectionResponse(rsp)
}

// ListIncidentStatusPagesWithResponse request returning *ListIncidentStatusPagesResponse
func (c *ClientWithResponses) ListIncidentStatusPagesWithResponse(ctx context.Context, incidentId string, params *ListIncidentStatusPagesParams, reqEditors ...RequestEditorFn) (*ListIncidentStatusPagesResponse, error) {
	rsp, err := c.ListIncidentStatusPages(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentStatusPagesResponse(rsp)
}

// CreateIncidentStatusPageWithBodyWithResponse request with arbitrary body returning *CreateIncidentStatusPageResponse
func (c *ClientWithResponses) CreateIncidentStatusPageWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentStatusPageResponse, error) {
	rsp, err := c.CreateIncidentStatusPageWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentStatusPageResponse(rsp)
}

// GetIpRangesWithResponse request returning *GetIpRangesResponse
func (c *ClientWithResponses) GetIpRangesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIpRangesResponse, error) {
	rsp, err := c.GetIpRanges(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIpRangesResponse(rsp)
}

// DeletePlaybookTaskWithResponse request returning *DeletePlaybookTaskResponse
func (c *ClientWithResponses) DeletePlaybookTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookTaskResponse, error) {
	rsp, err := c.DeletePlaybookTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaybookTaskResponse(rsp)
}

// GetPlaybookTaskWithResponse request returning *GetPlaybookTaskResponse
func (c *ClientWithResponses) GetPlaybookTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookTaskResponse, error) {
	rsp, err := c.GetPlaybookTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaybookTaskResponse(rsp)
}

// UpdatePlaybookTaskWithBodyWithResponse request with arbitrary body returning *UpdatePlaybookTaskResponse
func (c *ClientWithResponses) UpdatePlaybookTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookTaskResponse, error) {
	rsp, err := c.UpdatePlaybookTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookTaskResponse(rsp)
}

// ListPlaybooksWithResponse request returning *ListPlaybooksResponse
func (c *ClientWithResponses) ListPlaybooksWithResponse(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*ListPlaybooksResponse, error) {
	rsp, err := c.ListPlaybooks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlaybooksResponse(rsp)
}

// CreatePlaybookWithBodyWithResponse request with arbitrary body returning *CreatePlaybookResponse
func (c *ClientWithResponses) CreatePlaybookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookResponse, error) {
	rsp, err := c.CreatePlaybookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookResponse(rsp)
}

// DeletePlaybookWithResponse request returning *DeletePlaybookResponse
func (c *ClientWithResponses) DeletePlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookResponse, error) {
	rsp, err := c.DeletePlaybook(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaybookResponse(rsp)
}

// GetPlaybookWithResponse request returning *GetPlaybookResponse
func (c *ClientWithResponses) GetPlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookResponse, error) {
	rsp, err := c.GetPlaybook(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaybookResponse(rsp)
}

// UpdatePlaybookWithBodyWithResponse request with arbitrary body returning *UpdatePlaybookResponse
func (c *ClientWithResponses) UpdatePlaybookWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookResponse, error) {
	rsp, err := c.UpdatePlaybookWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookResponse(rsp)
}

// ListPlaybookTasksWithResponse request returning *ListPlaybookTasksResponse
func (c *ClientWithResponses) ListPlaybookTasksWithResponse(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*ListPlaybookTasksResponse, error) {
	rsp, err := c.ListPlaybookTasks(ctx, playbookId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlaybookTasksResponse(rsp)
}

// CreatePlaybookTaskWithBodyWithResponse request with arbitrary body returning *CreatePlaybookTaskResponse
func (c *ClientWithResponses) CreatePlaybookTaskWithBodyWithResponse(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookTaskResponse, error) {
	rsp, err := c.CreatePlaybookTaskWithBody(ctx, playbookId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookTaskResponse(rsp)
}

// ListPostmortemTemplatesWithResponse request returning *ListPostmortemTemplatesResponse
func (c *ClientWithResponses) ListPostmortemTemplatesWithResponse(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*ListPostmortemTemplatesResponse, error) {
	rsp, err := c.ListPostmortemTemplates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPostmortemTemplatesResponse(rsp)
}

// CreatePostmortemTemplateWithBodyWithResponse request with arbitrary body returning *CreatePostmortemTemplateResponse
func (c *ClientWithResponses) CreatePostmortemTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostmortemTemplateResponse, error) {
	rsp, err := c.CreatePostmortemTemplateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePostmortemTemplateResponse(rsp)
}

// DeletePostmortemTemplateWithResponse request returning *DeletePostmortemTemplateResponse
func (c *ClientWithResponses) DeletePostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePostmortemTemplateResponse, error) {
	rsp, err := c.DeletePostmortemTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePostmortemTemplateResponse(rsp)
}

// GetPostmortemTemplateWithResponse request returning *GetPostmortemTemplateResponse
func (c *ClientWithResponses) GetPostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPostmortemTemplateResponse, error) {
	rsp, err := c.GetPostmortemTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostmortemTemplateResponse(rsp)
}

// UpdatePostmortemTemplateWithBodyWithResponse request with arbitrary body returning *UpdatePostmortemTemplateResponse
func (c *ClientWithResponses) UpdatePostmortemTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostmortemTemplateResponse, error) {
	rsp, err := c.UpdatePostmortemTemplateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePostmortemTemplateResponse(rsp)
}

// ListIncidentPostMortemsWithResponse request returning *ListIncidentPostMortemsResponse
func (c *ClientWithResponses) ListIncidentPostMortemsWithResponse(ctx context.Context, params *ListIncidentPostMortemsParams, reqEditors ...RequestEditorFn) (*ListIncidentPostMortemsResponse, error) {
	rsp, err := c.ListIncidentPostMortems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentPostMortemsResponse(rsp)
}

// ListIncidentPostmortemWithResponse request returning *ListIncidentPostmortemResponse
func (c *ClientWithResponses) ListIncidentPostmortemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ListIncidentPostmortemResponse, error) {
	rsp, err := c.ListIncidentPostmortem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentPostmortemResponse(rsp)
}

// UpdateIncidentPostmortemWithBodyWithResponse request with arbitrary body returning *UpdateIncidentPostmortemResponse
func (c *ClientWithResponses) UpdateIncidentPostmortemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPostmortemResponse, error) {
	rsp, err := c.UpdateIncidentPostmortemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentPostmortemResponse(rsp)
}

// ListPulsesWithResponse request returning *ListPulsesResponse
func (c *ClientWithResponses) ListPulsesWithResponse(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*ListPulsesResponse, error) {
	rsp, err := c.ListPulses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPulsesResponse(rsp)
}

// CreatePulseWithBodyWithResponse request with arbitrary body returning *CreatePulseResponse
func (c *ClientWithResponses) CreatePulseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePulseResponse, error) {
	rsp, err := c.CreatePulseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePulseResponse(rsp)
}

// GetPulseWithResponse request returning *GetPulseResponse
func (c *ClientWithResponses) GetPulseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPulseResponse, error) {
	rsp, err := c.GetPulse(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPulseResponse(rsp)
}

// UpdatePulseWithBodyWithResponse request with arbitrary body returning *UpdatePulseResponse
func (c *ClientWithResponses) UpdatePulseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePulseResponse, error) {
	rsp, err := c.UpdatePulseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePulseResponse(rsp)
}

// ListRetrospectiveStepsWithResponse request returning *ListRetrospectiveStepsResponse
func (c *ClientWithResponses) ListRetrospectiveStepsWithResponse(ctx context.Context, params *ListRetrospectiveStepsParams, reqEditors ...RequestEditorFn) (*ListRetrospectiveStepsResponse, error) {
	rsp, err := c.ListRetrospectiveSteps(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRetrospectiveStepsResponse(rsp)
}

// CreateRetrospectiveStepWithBodyWithResponse request with arbitrary body returning *CreateRetrospectiveStepResponse
func (c *ClientWithResponses) CreateRetrospectiveStepWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRetrospectiveStepResponse, error) {
	rsp, err := c.CreateRetrospectiveStepWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRetrospectiveStepResponse(rsp)
}

// DeleteRetrospectiveStepWithResponse request returning *DeleteRetrospectiveStepResponse
func (c *ClientWithResponses) DeleteRetrospectiveStepWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteRetrospectiveStepResponse, error) {
	rsp, err := c.DeleteRetrospectiveStep(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRetrospectiveStepResponse(rsp)
}

// GetRetrospectiveStepWithResponse request returning *GetRetrospectiveStepResponse
func (c *ClientWithResponses) GetRetrospectiveStepWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetRetrospectiveStepResponse, error) {
	rsp, err := c.GetRetrospectiveStep(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRetrospectiveStepResponse(rsp)
}

// UpdateRetrospectiveStepWithBodyWithResponse request with arbitrary body returning *UpdateRetrospectiveStepResponse
func (c *ClientWithResponses) UpdateRetrospectiveStepWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRetrospectiveStepResponse, error) {
	rsp, err := c.UpdateRetrospectiveStepWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRetrospectiveStepResponse(rsp)
}

// ListRolesWithResponse request returning *ListRolesResponse
func (c *ClientWithResponses) ListRolesWithResponse(ctx context.Context, params *ListRolesParams, reqEditors ...RequestEditorFn) (*ListRolesResponse, error) {
	rsp, err := c.ListRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRolesResponse(rsp)
}

// CreateRoleWithBodyWithResponse request with arbitrary body returning *CreateRoleResponse
func (c *ClientWithResponses) CreateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error) {
	rsp, err := c.CreateRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResponse(rsp)
}

// DeleteRoleWithResponse request returning *DeleteRoleResponse
func (c *ClientWithResponses) DeleteRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteRoleResponse, error) {
	rsp, err := c.DeleteRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoleResponse(rsp)
}

// GetRoleWithResponse request returning *GetRoleResponse
func (c *ClientWithResponses) GetRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetRoleResponse, error) {
	rsp, err := c.GetRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoleResponse(rsp)
}

// UpdateRoleWithBodyWithResponse request with arbitrary body returning *UpdateRoleResponse
func (c *ClientWithResponses) UpdateRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error) {
	rsp, err := c.UpdateRoleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleResponse(rsp)
}

// ListSecretsWithResponse request returning *ListSecretsResponse
func (c *ClientWithResponses) ListSecretsWithResponse(ctx context.Context, params *ListSecretsParams, reqEditors ...RequestEditorFn) (*ListSecretsResponse, error) {
	rsp, err := c.ListSecrets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSecretsResponse(rsp)
}

// CreateSecretWithBodyWithResponse request with arbitrary body returning *CreateSecretResponse
func (c *ClientWithResponses) CreateSecretWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSecretResponse, error) {
	rsp, err := c.CreateSecretWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSecretResponse(rsp)
}

// DeleteSecretWithResponse request returning *DeleteSecretResponse
func (c *ClientWithResponses) DeleteSecretWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSecretResponse, error) {
	rsp, err := c.DeleteSecret(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSecretResponse(rsp)
}

// GetSecretWithResponse request returning *GetSecretResponse
func (c *ClientWithResponses) GetSecretWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSecretResponse, error) {
	rsp, err := c.GetSecret(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecretResponse(rsp)
}

// UpdateSecretWithBodyWithResponse request with arbitrary body returning *UpdateSecretResponse
func (c *ClientWithResponses) UpdateSecretWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSecretResponse, error) {
	rsp, err := c.UpdateSecretWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSecretResponse(rsp)
}

// ListServicesWithResponse request returning *ListServicesResponse
func (c *ClientWithResponses) ListServicesWithResponse(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error) {
	rsp, err := c.ListServices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServicesResponse(rsp)
}

// CreateServiceWithBodyWithResponse request with arbitrary body returning *CreateServiceResponse
func (c *ClientWithResponses) CreateServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error) {
	rsp, err := c.CreateServiceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceResponse(rsp)
}

// DeleteServiceWithResponse request returning *DeleteServiceResponse
func (c *ClientWithResponses) DeleteServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceResponse, error) {
	rsp, err := c.DeleteService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceResponse(rsp)
}

// GetServiceWithResponse request returning *GetServiceResponse
func (c *ClientWithResponses) GetServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceResponse, error) {
	rsp, err := c.GetService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceResponse(rsp)
}

// UpdateServiceWithBodyWithResponse request with arbitrary body returning *UpdateServiceResponse
func (c *ClientWithResponses) UpdateServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error) {
	rsp, err := c.UpdateServiceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceResponse(rsp)
}

// GetServiceIncidentsChartWithResponse request returning *GetServiceIncidentsChartResponse
func (c *ClientWithResponses) GetServiceIncidentsChartWithResponse(ctx context.Context, id string, params *GetServiceIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetServiceIncidentsChartResponse, error) {
	rsp, err := c.GetServiceIncidentsChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceIncidentsChartResponse(rsp)
}

// GetServiceUptimeChartWithResponse request returning *GetServiceUptimeChartResponse
func (c *ClientWithResponses) GetServiceUptimeChartWithResponse(ctx context.Context, id string, params *GetServiceUptimeChartParams, reqEditors ...RequestEditorFn) (*GetServiceUptimeChartResponse, error) {
	rsp, err := c.GetServiceUptimeChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceUptimeChartResponse(rsp)
}

// ListSeveritiesWithResponse request returning *ListSeveritiesResponse
func (c *ClientWithResponses) ListSeveritiesWithResponse(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*ListSeveritiesResponse, error) {
	rsp, err := c.ListSeverities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSeveritiesResponse(rsp)
}

// CreateSeverityWithBodyWithResponse request with arbitrary body returning *CreateSeverityResponse
func (c *ClientWithResponses) CreateSeverityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSeverityResponse, error) {
	rsp, err := c.CreateSeverityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSeverityResponse(rsp)
}

// DeleteSeverityWithResponse request returning *DeleteSeverityResponse
func (c *ClientWithResponses) DeleteSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSeverityResponse, error) {
	rsp, err := c.DeleteSeverity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSeverityResponse(rsp)
}

// GetSeverityWithResponse request returning *GetSeverityResponse
func (c *ClientWithResponses) GetSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSeverityResponse, error) {
	rsp, err := c.GetSeverity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeverityResponse(rsp)
}

// UpdateSeverityWithBodyWithResponse request with arbitrary body returning *UpdateSeverityResponse
func (c *ClientWithResponses) UpdateSeverityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSeverityResponse, error) {
	rsp, err := c.UpdateSeverityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSeverityResponse(rsp)
}

// DeleteIncidentStatusPageWithResponse request returning *DeleteIncidentStatusPageResponse
func (c *ClientWithResponses) DeleteIncidentStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentStatusPageResponse, error) {
	rsp, err := c.DeleteIncidentStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentStatusPageResponse(rsp)
}

// GetIncidentStatusPagesWithResponse request returning *GetIncidentStatusPagesResponse
func (c *ClientWithResponses) GetIncidentStatusPagesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentStatusPagesResponse, error) {
	rsp, err := c.GetIncidentStatusPages(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentStatusPagesResponse(rsp)
}

// UpdateIncidentStatusPageWithBodyWithResponse request with arbitrary body returning *UpdateIncidentStatusPageResponse
func (c *ClientWithResponses) UpdateIncidentStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentStatusPageResponse, error) {
	rsp, err := c.UpdateIncidentStatusPageWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentStatusPageResponse(rsp)
}

// ListStatusPagesWithResponse request returning *ListStatusPagesResponse
func (c *ClientWithResponses) ListStatusPagesWithResponse(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*ListStatusPagesResponse, error) {
	rsp, err := c.ListStatusPages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListStatusPagesResponse(rsp)
}

// CreateStatusPageWithBodyWithResponse request with arbitrary body returning *CreateStatusPageResponse
func (c *ClientWithResponses) CreateStatusPageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStatusPageResponse, error) {
	rsp, err := c.CreateStatusPageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStatusPageResponse(rsp)
}

// DeleteStatusPageWithResponse request returning *DeleteStatusPageResponse
func (c *ClientWithResponses) DeleteStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStatusPageResponse, error) {
	rsp, err := c.DeleteStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStatusPageResponse(rsp)
}

// GetStatusPageWithResponse request returning *GetStatusPageResponse
func (c *ClientWithResponses) GetStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStatusPageResponse, error) {
	rsp, err := c.GetStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusPageResponse(rsp)
}

// UpdateStatusPageWithBodyWithResponse request with arbitrary body returning *UpdateStatusPageResponse
func (c *ClientWithResponses) UpdateStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStatusPageResponse, error) {
	rsp, err := c.UpdateStatusPageWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStatusPageResponse(rsp)
}

// ListStatusPageTemplatesWithResponse request returning *ListStatusPageTemplatesResponse
func (c *ClientWithResponses) ListStatusPageTemplatesWithResponse(ctx context.Context, statusPageId string, params *ListStatusPageTemplatesParams, reqEditors ...RequestEditorFn) (*ListStatusPageTemplatesResponse, error) {
	rsp, err := c.ListStatusPageTemplates(ctx, statusPageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListStatusPageTemplatesResponse(rsp)
}

// CreateStatusPageTemplateWithBodyWithResponse request with arbitrary body returning *CreateStatusPageTemplateResponse
func (c *ClientWithResponses) CreateStatusPageTemplateWithBodyWithResponse(ctx context.Context, statusPageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStatusPageTemplateResponse, error) {
	rsp, err := c.CreateStatusPageTemplateWithBody(ctx, statusPageId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStatusPageTemplateResponse(rsp)
}

// ListTeamsWithResponse request returning *ListTeamsResponse
func (c *ClientWithResponses) ListTeamsWithResponse(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*ListTeamsResponse, error) {
	rsp, err := c.ListTeams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTeamsResponse(rsp)
}

// CreateTeamWithBodyWithResponse request with arbitrary body returning *CreateTeamResponse
func (c *ClientWithResponses) CreateTeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeamWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

// DeleteTeamWithResponse request returning *DeleteTeamResponse
func (c *ClientWithResponses) DeleteTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error) {
	rsp, err := c.DeleteTeam(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamResponse(rsp)
}

// GetTeamWithResponse request returning *GetTeamResponse
func (c *ClientWithResponses) GetTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error) {
	rsp, err := c.GetTeam(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamResponse(rsp)
}

// UpdateTeamWithBodyWithResponse request with arbitrary body returning *UpdateTeamResponse
func (c *ClientWithResponses) UpdateTeamWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeamWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

// DeleteStatusPageTemplateWithResponse request returning *DeleteStatusPageTemplateResponse
func (c *ClientWithResponses) DeleteStatusPageTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStatusPageTemplateResponse, error) {
	rsp, err := c.DeleteStatusPageTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStatusPageTemplateResponse(rsp)
}

// GetStatusPageTemplateWithResponse request returning *GetStatusPageTemplateResponse
func (c *ClientWithResponses) GetStatusPageTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStatusPageTemplateResponse, error) {
	rsp, err := c.GetStatusPageTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusPageTemplateResponse(rsp)
}

// UpdateStatusPageTemplateWithBodyWithResponse request with arbitrary body returning *UpdateStatusPageTemplateResponse
func (c *ClientWithResponses) UpdateStatusPageTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStatusPageTemplateResponse, error) {
	rsp, err := c.UpdateStatusPageTemplateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStatusPageTemplateResponse(rsp)
}

// ListUsersWithResponse request returning *ListUsersResponse
func (c *ClientWithResponses) ListUsersWithResponse(ctx context.Context, params *ListUsersParams, reqEditors ...RequestEditorFn) (*ListUsersResponse, error) {
	rsp, err := c.ListUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsersResponse(rsp)
}

// GetCurrentUserWithResponse request returning *GetCurrentUserResponse
func (c *ClientWithResponses) GetCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrentUserResponse, error) {
	rsp, err := c.GetCurrentUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCurrentUserResponse(rsp)
}

// DeleteUserWithResponse request returning *DeleteUserResponse
func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// GetWebhooksDeliveryWithResponse request returning *GetWebhooksDeliveryResponse
func (c *ClientWithResponses) GetWebhooksDeliveryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWebhooksDeliveryResponse, error) {
	rsp, err := c.GetWebhooksDelivery(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhooksDeliveryResponse(rsp)
}

// DeliverWebhooksDeliveryWithResponse request returning *DeliverWebhooksDeliveryResponse
func (c *ClientWithResponses) DeliverWebhooksDeliveryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeliverWebhooksDeliveryResponse, error) {
	rsp, err := c.DeliverWebhooksDelivery(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeliverWebhooksDeliveryResponse(rsp)
}

// ListWebhooksEndpointsWithResponse request returning *ListWebhooksEndpointsResponse
func (c *ClientWithResponses) ListWebhooksEndpointsWithResponse(ctx context.Context, params *ListWebhooksEndpointsParams, reqEditors ...RequestEditorFn) (*ListWebhooksEndpointsResponse, error) {
	rsp, err := c.ListWebhooksEndpoints(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWebhooksEndpointsResponse(rsp)
}

// CreateWebhooksEndpointWithBodyWithResponse request with arbitrary body returning *CreateWebhooksEndpointResponse
func (c *ClientWithResponses) CreateWebhooksEndpointWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWebhooksEndpointResponse, error) {
	rsp, err := c.CreateWebhooksEndpointWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhooksEndpointResponse(rsp)
}

// ListWebhooksDeliveriesWithResponse request returning *ListWebhooksDeliveriesResponse
func (c *ClientWithResponses) ListWebhooksDeliveriesWithResponse(ctx context.Context, endpointId string, params *ListWebhooksDeliveriesParams, reqEditors ...RequestEditorFn) (*ListWebhooksDeliveriesResponse, error) {
	rsp, err := c.ListWebhooksDeliveries(ctx, endpointId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWebhooksDeliveriesResponse(rsp)
}

// DeleteWebhooksEndpointWithResponse request returning *DeleteWebhooksEndpointResponse
func (c *ClientWithResponses) DeleteWebhooksEndpointWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWebhooksEndpointResponse, error) {
	rsp, err := c.DeleteWebhooksEndpoint(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWebhooksEndpointResponse(rsp)
}

// GetWebhooksEndpointWithResponse request returning *GetWebhooksEndpointResponse
func (c *ClientWithResponses) GetWebhooksEndpointWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWebhooksEndpointResponse, error) {
	rsp, err := c.GetWebhooksEndpoint(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhooksEndpointResponse(rsp)
}

// UpdateWebhooksEndpointWithBodyWithResponse request with arbitrary body returning *UpdateWebhooksEndpointResponse
func (c *ClientWithResponses) UpdateWebhooksEndpointWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWebhooksEndpointResponse, error) {
	rsp, err := c.UpdateWebhooksEndpointWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWebhooksEndpointResponse(rsp)
}

// DeleteWorkflowCustomFieldSelectionWithResponse request returning *DeleteWorkflowCustomFieldSelectionResponse
func (c *ClientWithResponses) DeleteWorkflowCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.DeleteWorkflowCustomFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowCustomFieldSelectionResponse(rsp)
}

// GetWorkflowCustomFieldSelectionWithResponse request returning *GetWorkflowCustomFieldSelectionResponse
func (c *ClientWithResponses) GetWorkflowCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.GetWorkflowCustomFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowCustomFieldSelectionResponse(rsp)
}

// UpdateWorkflowCustomFieldSelectionWithBodyWithResponse request with arbitrary body returning *UpdateWorkflowCustomFieldSelectionResponse
func (c *ClientWithResponses) UpdateWorkflowCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.UpdateWorkflowCustomFieldSelectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowCustomFieldSelectionResponse(rsp)
}

// DeleteWorkflowFormFieldConditionWithResponse request returning *DeleteWorkflowFormFieldConditionResponse
func (c *ClientWithResponses) DeleteWorkflowFormFieldConditionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowFormFieldConditionResponse, error) {
	rsp, err := c.DeleteWorkflowFormFieldCondition(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowFormFieldConditionResponse(rsp)
}

// GetWorkflowFormFieldConditionWithResponse request returning *GetWorkflowFormFieldConditionResponse
func (c *ClientWithResponses) GetWorkflowFormFieldConditionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowFormFieldConditionResponse, error) {
	rsp, err := c.GetWorkflowFormFieldCondition(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowFormFieldConditionResponse(rsp)
}

// UpdateWorkflowFormFieldConditionWithBodyWithResponse request with arbitrary body returning *UpdateWorkflowFormFieldConditionResponse
func (c *ClientWithResponses) UpdateWorkflowFormFieldConditionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowFormFieldConditionResponse, error) {
	rsp, err := c.UpdateWorkflowFormFieldConditionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowFormFieldConditionResponse(rsp)
}

// ListWorkflowGroupsWithResponse request returning *ListWorkflowGroupsResponse
func (c *ClientWithResponses) ListWorkflowGroupsWithResponse(ctx context.Context, params *ListWorkflowGroupsParams, reqEditors ...RequestEditorFn) (*ListWorkflowGroupsResponse, error) {
	rsp, err := c.ListWorkflowGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowGroupsResponse(rsp)
}

// CreateWorkflowGroupWithBodyWithResponse request with arbitrary body returning *CreateWorkflowGroupResponse
func (c *ClientWithResponses) CreateWorkflowGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowGroupResponse, error) {
	rsp, err := c.CreateWorkflowGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowGroupResponse(rsp)
}

// DeleteWorkflowGroupWithResponse request returning *DeleteWorkflowGroupResponse
func (c *ClientWithResponses) DeleteWorkflowGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowGroupResponse, error) {
	rsp, err := c.DeleteWorkflowGroup(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowGroupResponse(rsp)
}

// GetWorkflowGroupWithResponse request returning *GetWorkflowGroupResponse
func (c *ClientWithResponses) GetWorkflowGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowGroupResponse, error) {
	rsp, err := c.GetWorkflowGroup(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowGroupResponse(rsp)
}

// UpdateWorkflowGroupWithBodyWithResponse request with arbitrary body returning *UpdateWorkflowGroupResponse
func (c *ClientWithResponses) UpdateWorkflowGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowGroupResponse, error) {
	rsp, err := c.UpdateWorkflowGroupWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowGroupResponse(rsp)
}

// DeleteWorkflowTaskWithResponse request returning *DeleteWorkflowTaskResponse
func (c *ClientWithResponses) DeleteWorkflowTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowTaskResponse, error) {
	rsp, err := c.DeleteWorkflowTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowTaskResponse(rsp)
}

// GetWorkflowTaskWithResponse request returning *GetWorkflowTaskResponse
func (c *ClientWithResponses) GetWorkflowTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowTaskResponse, error) {
	rsp, err := c.GetWorkflowTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowTaskResponse(rsp)
}

// UpdateWorkflowTaskWithBodyWithResponse request with arbitrary body returning *UpdateWorkflowTaskResponse
func (c *ClientWithResponses) UpdateWorkflowTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowTaskResponse, error) {
	rsp, err := c.UpdateWorkflowTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowTaskResponse(rsp)
}

// ListWorkflowsWithResponse request returning *ListWorkflowsResponse
func (c *ClientWithResponses) ListWorkflowsWithResponse(ctx context.Context, params *ListWorkflowsParams, reqEditors ...RequestEditorFn) (*ListWorkflowsResponse, error) {
	rsp, err := c.ListWorkflows(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowsResponse(rsp)
}

// CreateWorkflowWithBodyWithResponse request with arbitrary body returning *CreateWorkflowResponse
func (c *ClientWithResponses) CreateWorkflowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowResponse, error) {
	rsp, err := c.CreateWorkflowWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowResponse(rsp)
}

// DeleteWorkflowWithResponse request returning *DeleteWorkflowResponse
func (c *ClientWithResponses) DeleteWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowResponse, error) {
	rsp, err := c.DeleteWorkflow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowResponse(rsp)
}

// GetWorkflowWithResponse request returning *GetWorkflowResponse
func (c *ClientWithResponses) GetWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowResponse, error) {
	rsp, err := c.GetWorkflow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowResponse(rsp)
}

// UpdateWorkflowWithBodyWithResponse request with arbitrary body returning *UpdateWorkflowResponse
func (c *ClientWithResponses) UpdateWorkflowWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowResponse, error) {
	rsp, err := c.UpdateWorkflowWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowResponse(rsp)
}

// ListWorkflowCustomFieldSelectionsWithResponse request returning *ListWorkflowCustomFieldSelectionsResponse
func (c *ClientWithResponses) ListWorkflowCustomFieldSelectionsWithResponse(ctx context.Context, workflowId string, params *ListWorkflowCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListWorkflowCustomFieldSelectionsResponse, error) {
	rsp, err := c.ListWorkflowCustomFieldSelections(ctx, workflowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowCustomFieldSelectionsResponse(rsp)
}

// CreateWorkflowCustomFieldSelectionWithBodyWithResponse request with arbitrary body returning *CreateWorkflowCustomFieldSelectionResponse
func (c *ClientWithResponses) CreateWorkflowCustomFieldSelectionWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.CreateWorkflowCustomFieldSelectionWithBody(ctx, workflowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowCustomFieldSelectionResponse(rsp)
}

// ListWorkflowFormFieldConditionsWithResponse request returning *ListWorkflowFormFieldConditionsResponse
func (c *ClientWithResponses) ListWorkflowFormFieldConditionsWithResponse(ctx context.Context, workflowId string, params *ListWorkflowFormFieldConditionsParams, reqEditors ...RequestEditorFn) (*ListWorkflowFormFieldConditionsResponse, error) {
	rsp, err := c.ListWorkflowFormFieldConditions(ctx, workflowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowFormFieldConditionsResponse(rsp)
}

// CreateWorkflowFormFieldConditionWithBodyWithResponse request with arbitrary body returning *CreateWorkflowFormFieldConditionResponse
func (c *ClientWithResponses) CreateWorkflowFormFieldConditionWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowFormFieldConditionResponse, error) {
	rsp, err := c.CreateWorkflowFormFieldConditionWithBody(ctx, workflowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowFormFieldConditionResponse(rsp)
}

// ListWorkflowRunsWithResponse request returning *ListWorkflowRunsResponse
func (c *ClientWithResponses) ListWorkflowRunsWithResponse(ctx context.Context, workflowId string, params *ListWorkflowRunsParams, reqEditors ...RequestEditorFn) (*ListWorkflowRunsResponse, error) {
	rsp, err := c.ListWorkflowRuns(ctx, workflowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowRunsResponse(rsp)
}

// CreateWorkflowRunWithBodyWithResponse request with arbitrary body returning *CreateWorkflowRunResponse
func (c *ClientWithResponses) CreateWorkflowRunWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowRunResponse, error) {
	rsp, err := c.CreateWorkflowRunWithBody(ctx, workflowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowRunResponse(rsp)
}

// ListWorkflowTasksWithResponse request returning *ListWorkflowTasksResponse
func (c *ClientWithResponses) ListWorkflowTasksWithResponse(ctx context.Context, workflowId string, params *ListWorkflowTasksParams, reqEditors ...RequestEditorFn) (*ListWorkflowTasksResponse, error) {
	rsp, err := c.ListWorkflowTasks(ctx, workflowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowTasksResponse(rsp)
}

// CreateWorkflowTaskWithBodyWithResponse request with arbitrary body returning *CreateWorkflowTaskResponse
func (c *ClientWithResponses) CreateWorkflowTaskWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowTaskResponse, error) {
	rsp, err := c.CreateWorkflowTaskWithBody(ctx, workflowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowTaskResponse(rsp)
}

// ParseListAllIncidentActionItemsResponse parses an HTTP response from a ListAllIncidentActionItemsWithResponse call
func ParseListAllIncidentActionItemsResponse(rsp *http.Response) (*ListAllIncidentActionItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAllIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentActionItemResponse parses an HTTP response from a DeleteIncidentActionItemWithResponse call
func ParseDeleteIncidentActionItemResponse(rsp *http.Response) (*DeleteIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentActionItemsResponse parses an HTTP response from a GetIncidentActionItemsWithResponse call
func ParseGetIncidentActionItemsResponse(rsp *http.Response) (*GetIncidentActionItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentActionItemResponse parses an HTTP response from a UpdateIncidentActionItemWithResponse call
func ParseUpdateIncidentActionItemResponse(rsp *http.Response) (*UpdateIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListAlertsResponse parses an HTTP response from a ListAlertsWithResponse call
func ParseListAlertsResponse(rsp *http.Response) (*ListAlertsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateAlertResponse parses an HTTP response from a CreateAlertWithResponse call
func ParseCreateAlertResponse(rsp *http.Response) (*CreateAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAlertResponse parses an HTTP response from a GetAlertWithResponse call
func ParseGetAlertResponse(rsp *http.Response) (*GetAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListAuditsResponse parses an HTTP response from a ListAuditsWithResponse call
func ParseListAuditsResponse(rsp *http.Response) (*ListAuditsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAuditsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListAuthorizationsResponse parses an HTTP response from a ListAuthorizationsWithResponse call
func ParseListAuthorizationsResponse(rsp *http.Response) (*ListAuthorizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAuthorizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateAuthorizationResponse parses an HTTP response from a CreateAuthorizationWithResponse call
func ParseCreateAuthorizationResponse(rsp *http.Response) (*CreateAuthorizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAuthorizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAuthorizationResponse parses an HTTP response from a DeleteAuthorizationWithResponse call
func ParseDeleteAuthorizationResponse(rsp *http.Response) (*DeleteAuthorizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthorizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthorizationResponse parses an HTTP response from a GetAuthorizationWithResponse call
func ParseGetAuthorizationResponse(rsp *http.Response) (*GetAuthorizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthorizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateAuthorizationResponse parses an HTTP response from a UpdateAuthorizationWithResponse call
func ParseUpdateAuthorizationResponse(rsp *http.Response) (*UpdateAuthorizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAuthorizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListCausesResponse parses an HTTP response from a ListCausesWithResponse call
func ParseListCausesResponse(rsp *http.Response) (*ListCausesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCausesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateCauseResponse parses an HTTP response from a CreateCauseWithResponse call
func ParseCreateCauseResponse(rsp *http.Response) (*CreateCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCauseResponse parses an HTTP response from a DeleteCauseWithResponse call
func ParseDeleteCauseResponse(rsp *http.Response) (*DeleteCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCauseResponse parses an HTTP response from a GetCauseWithResponse call
func ParseGetCauseResponse(rsp *http.Response) (*GetCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateCauseResponse parses an HTTP response from a UpdateCauseWithResponse call
func ParseUpdateCauseResponse(rsp *http.Response) (*UpdateCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCustomFieldOptionResponse parses an HTTP response from a DeleteCustomFieldOptionWithResponse call
func ParseDeleteCustomFieldOptionResponse(rsp *http.Response) (*DeleteCustomFieldOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCustomFieldOptionResponse parses an HTTP response from a GetCustomFieldOptionWithResponse call
func ParseGetCustomFieldOptionResponse(rsp *http.Response) (*GetCustomFieldOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateCustomFieldOptionResponse parses an HTTP response from a UpdateCustomFieldOptionWithResponse call
func ParseUpdateCustomFieldOptionResponse(rsp *http.Response) (*UpdateCustomFieldOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListCustomFieldsResponse parses an HTTP response from a ListCustomFieldsWithResponse call
func ParseListCustomFieldsResponse(rsp *http.Response) (*ListCustomFieldsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCustomFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateCustomFieldResponse parses an HTTP response from a CreateCustomFieldWithResponse call
func ParseCreateCustomFieldResponse(rsp *http.Response) (*CreateCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListCustomFieldOptionsResponse parses an HTTP response from a ListCustomFieldOptionsWithResponse call
func ParseListCustomFieldOptionsResponse(rsp *http.Response) (*ListCustomFieldOptionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCustomFieldOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateCustomFieldOptionResponse parses an HTTP response from a CreateCustomFieldOptionWithResponse call
func ParseCreateCustomFieldOptionResponse(rsp *http.Response) (*CreateCustomFieldOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCustomFieldResponse parses an HTTP response from a DeleteCustomFieldWithResponse call
func ParseDeleteCustomFieldResponse(rsp *http.Response) (*DeleteCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCustomFieldResponse parses an HTTP response from a GetCustomFieldWithResponse call
func ParseGetCustomFieldResponse(rsp *http.Response) (*GetCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateCustomFieldResponse parses an HTTP response from a UpdateCustomFieldWithResponse call
func ParseUpdateCustomFieldResponse(rsp *http.Response) (*UpdateCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteDashboardPanelResponse parses an HTTP response from a DeleteDashboardPanelWithResponse call
func ParseDeleteDashboardPanelResponse(rsp *http.Response) (*DeleteDashboardPanelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDashboardPanelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDashboardPanelResponse parses an HTTP response from a GetDashboardPanelWithResponse call
func ParseGetDashboardPanelResponse(rsp *http.Response) (*GetDashboardPanelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardPanelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateDashboardPanelResponse parses an HTTP response from a UpdateDashboardPanelWithResponse call
func ParseUpdateDashboardPanelResponse(rsp *http.Response) (*UpdateDashboardPanelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDashboardPanelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDuplicateDashboardPanelResponse parses an HTTP response from a DuplicateDashboardPanelWithResponse call
func ParseDuplicateDashboardPanelResponse(rsp *http.Response) (*DuplicateDashboardPanelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DuplicateDashboardPanelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListDashboardsResponse parses an HTTP response from a ListDashboardsWithResponse call
func ParseListDashboardsResponse(rsp *http.Response) (*ListDashboardsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDashboardsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateDashboardResponse parses an HTTP response from a CreateDashboardWithResponse call
func ParseCreateDashboardResponse(rsp *http.Response) (*CreateDashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListDashboardPanelsResponse parses an HTTP response from a ListDashboardPanelsWithResponse call
func ParseListDashboardPanelsResponse(rsp *http.Response) (*ListDashboardPanelsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDashboardPanelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateDashboardPanelResponse parses an HTTP response from a CreateDashboardPanelWithResponse call
func ParseCreateDashboardPanelResponse(rsp *http.Response) (*CreateDashboardPanelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDashboardPanelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteDashboardResponse parses an HTTP response from a DeleteDashboardWithResponse call
func ParseDeleteDashboardResponse(rsp *http.Response) (*DeleteDashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDashboardResponse parses an HTTP response from a GetDashboardWithResponse call
func ParseGetDashboardResponse(rsp *http.Response) (*GetDashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateDashboardResponse parses an HTTP response from a UpdateDashboardWithResponse call
func ParseUpdateDashboardResponse(rsp *http.Response) (*UpdateDashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDuplicateDashboardResponse parses an HTTP response from a DuplicateDashboardWithResponse call
func ParseDuplicateDashboardResponse(rsp *http.Response) (*DuplicateDashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DuplicateDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSetDefaultDashboardResponse parses an HTTP response from a SetDefaultDashboardWithResponse call
func ParseSetDefaultDashboardResponse(rsp *http.Response) (*SetDefaultDashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetDefaultDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListEnvironmentsResponse parses an HTTP response from a ListEnvironmentsWithResponse call
func ParseListEnvironmentsResponse(rsp *http.Response) (*ListEnvironmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateEnvironmentResponse parses an HTTP response from a CreateEnvironmentWithResponse call
func ParseCreateEnvironmentResponse(rsp *http.Response) (*CreateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteEnvironmentResponse parses an HTTP response from a DeleteEnvironmentWithResponse call
func ParseDeleteEnvironmentResponse(rsp *http.Response) (*DeleteEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateEnvironmentResponse parses an HTTP response from a UpdateEnvironmentWithResponse call
func ParseUpdateEnvironmentResponse(rsp *http.Response) (*UpdateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentEventResponse parses an HTTP response from a DeleteIncidentEventWithResponse call
func ParseDeleteIncidentEventResponse(rsp *http.Response) (*DeleteIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentEventsResponse parses an HTTP response from a GetIncidentEventsWithResponse call
func ParseGetIncidentEventsResponse(rsp *http.Response) (*GetIncidentEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentEventResponse parses an HTTP response from a UpdateIncidentEventWithResponse call
func ParseUpdateIncidentEventResponse(rsp *http.Response) (*UpdateIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentEventFunctionalitiesResponse parses an HTTP response from a ListIncidentEventFunctionalitiesWithResponse call
func ParseListIncidentEventFunctionalitiesResponse(rsp *http.Response) (*ListIncidentEventFunctionalitiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentEventFunctionalitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentEventFunctionalityResponse parses an HTTP response from a CreateIncidentEventFunctionalityWithResponse call
func ParseCreateIncidentEventFunctionalityResponse(rsp *http.Response) (*CreateIncidentEventFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentEventFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentEventServicesResponse parses an HTTP response from a ListIncidentEventServicesWithResponse call
func ParseListIncidentEventServicesResponse(rsp *http.Response) (*ListIncidentEventServicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentEventServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentEventServiceResponse parses an HTTP response from a CreateIncidentEventServiceWithResponse call
func ParseCreateIncidentEventServiceResponse(rsp *http.Response) (*CreateIncidentEventServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentEventServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentFeedbacksResponse parses an HTTP response from a GetIncidentFeedbacksWithResponse call
func ParseGetIncidentFeedbacksResponse(rsp *http.Response) (*GetIncidentFeedbacksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentFeedbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentFeedbackResponse parses an HTTP response from a UpdateIncidentFeedbackWithResponse call
func ParseUpdateIncidentFeedbackResponse(rsp *http.Response) (*UpdateIncidentFeedbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteFormFieldOptionResponse parses an HTTP response from a DeleteFormFieldOptionWithResponse call
func ParseDeleteFormFieldOptionResponse(rsp *http.Response) (*DeleteFormFieldOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFormFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFormFieldOptionResponse parses an HTTP response from a GetFormFieldOptionWithResponse call
func ParseGetFormFieldOptionResponse(rsp *http.Response) (*GetFormFieldOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFormFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateFormFieldOptionResponse parses an HTTP response from a UpdateFormFieldOptionWithResponse call
func ParseUpdateFormFieldOptionResponse(rsp *http.Response) (*UpdateFormFieldOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFormFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteFormFieldPositionResponse parses an HTTP response from a DeleteFormFieldPositionWithResponse call
func ParseDeleteFormFieldPositionResponse(rsp *http.Response) (*DeleteFormFieldPositionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFormFieldPositionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFormFieldPositionResponse parses an HTTP response from a GetFormFieldPositionWithResponse call
func ParseGetFormFieldPositionResponse(rsp *http.Response) (*GetFormFieldPositionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFormFieldPositionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateFormFieldPositionResponse parses an HTTP response from a UpdateFormFieldPositionWithResponse call
func ParseUpdateFormFieldPositionResponse(rsp *http.Response) (*UpdateFormFieldPositionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFormFieldPositionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListFormFieldsResponse parses an HTTP response from a ListFormFieldsWithResponse call
func ParseListFormFieldsResponse(rsp *http.Response) (*ListFormFieldsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFormFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateFormFieldResponse parses an HTTP response from a CreateFormFieldWithResponse call
func ParseCreateFormFieldResponse(rsp *http.Response) (*CreateFormFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFormFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListFormFieldOptionsResponse parses an HTTP response from a ListFormFieldOptionsWithResponse call
func ParseListFormFieldOptionsResponse(rsp *http.Response) (*ListFormFieldOptionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFormFieldOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateFormFieldOptionResponse parses an HTTP response from a CreateFormFieldOptionWithResponse call
func ParseCreateFormFieldOptionResponse(rsp *http.Response) (*CreateFormFieldOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFormFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListFormFieldPositionsResponse parses an HTTP response from a ListFormFieldPositionsWithResponse call
func ParseListFormFieldPositionsResponse(rsp *http.Response) (*ListFormFieldPositionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFormFieldPositionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateFormFieldPositionResponse parses an HTTP response from a CreateFormFieldPositionWithResponse call
func ParseCreateFormFieldPositionResponse(rsp *http.Response) (*CreateFormFieldPositionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFormFieldPositionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteFormFieldResponse parses an HTTP response from a DeleteFormFieldWithResponse call
func ParseDeleteFormFieldResponse(rsp *http.Response) (*DeleteFormFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFormFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFormFieldResponse parses an HTTP response from a GetFormFieldWithResponse call
func ParseGetFormFieldResponse(rsp *http.Response) (*GetFormFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFormFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateFormFieldResponse parses an HTTP response from a UpdateFormFieldWithResponse call
func ParseUpdateFormFieldResponse(rsp *http.Response) (*UpdateFormFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFormFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListFunctionalitiesResponse parses an HTTP response from a ListFunctionalitiesWithResponse call
func ParseListFunctionalitiesResponse(rsp *http.Response) (*ListFunctionalitiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFunctionalitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateFunctionalityResponse parses an HTTP response from a CreateFunctionalityWithResponse call
func ParseCreateFunctionalityResponse(rsp *http.Response) (*CreateFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteFunctionalityResponse parses an HTTP response from a DeleteFunctionalityWithResponse call
func ParseDeleteFunctionalityResponse(rsp *http.Response) (*DeleteFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFunctionalityResponse parses an HTTP response from a GetFunctionalityWithResponse call
func ParseGetFunctionalityResponse(rsp *http.Response) (*GetFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateFunctionalityResponse parses an HTTP response from a UpdateFunctionalityWithResponse call
func ParseUpdateFunctionalityResponse(rsp *http.Response) (*UpdateFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFunctionalityIncidentsChartResponse parses an HTTP response from a GetFunctionalityIncidentsChartWithResponse call
func ParseGetFunctionalityIncidentsChartResponse(rsp *http.Response) (*GetFunctionalityIncidentsChartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalityIncidentsChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFunctionalityUptimeChartResponse parses an HTTP response from a GetFunctionalityUptimeChartWithResponse call
func ParseGetFunctionalityUptimeChartResponse(rsp *http.Response) (*GetFunctionalityUptimeChartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalityUptimeChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentCustomFieldSelectionResponse parses an HTTP response from a DeleteIncidentCustomFieldSelectionWithResponse call
func ParseDeleteIncidentCustomFieldSelectionResponse(rsp *http.Response) (*DeleteIncidentCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentCustomFieldSelectionResponse parses an HTTP response from a GetIncidentCustomFieldSelectionWithResponse call
func ParseGetIncidentCustomFieldSelectionResponse(rsp *http.Response) (*GetIncidentCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentCustomFieldSelectionResponse parses an HTTP response from a UpdateIncidentCustomFieldSelectionWithResponse call
func ParseUpdateIncidentCustomFieldSelectionResponse(rsp *http.Response) (*UpdateIncidentCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentEventFunctionalityResponse parses an HTTP response from a DeleteIncidentEventFunctionalityWithResponse call
func ParseDeleteIncidentEventFunctionalityResponse(rsp *http.Response) (*DeleteIncidentEventFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentEventFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentEventFunctionalitiesResponse parses an HTTP response from a GetIncidentEventFunctionalitiesWithResponse call
func ParseGetIncidentEventFunctionalitiesResponse(rsp *http.Response) (*GetIncidentEventFunctionalitiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentEventFunctionalitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentEventFunctionalityResponse parses an HTTP response from a UpdateIncidentEventFunctionalityWithResponse call
func ParseUpdateIncidentEventFunctionalityResponse(rsp *http.Response) (*UpdateIncidentEventFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentEventFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentEventServiceResponse parses an HTTP response from a DeleteIncidentEventServiceWithResponse call
func ParseDeleteIncidentEventServiceResponse(rsp *http.Response) (*DeleteIncidentEventServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentEventServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentEventServicesResponse parses an HTTP response from a GetIncidentEventServicesWithResponse call
func ParseGetIncidentEventServicesResponse(rsp *http.Response) (*GetIncidentEventServicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentEventServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentEventServiceResponse parses an HTTP response from a UpdateIncidentEventServiceWithResponse call
func ParseUpdateIncidentEventServiceResponse(rsp *http.Response) (*UpdateIncidentEventServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentEventServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentFormFieldSelectionResponse parses an HTTP response from a DeleteIncidentFormFieldSelectionWithResponse call
func ParseDeleteIncidentFormFieldSelectionResponse(rsp *http.Response) (*DeleteIncidentFormFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentFormFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentFormFieldSelectionResponse parses an HTTP response from a GetIncidentFormFieldSelectionWithResponse call
func ParseGetIncidentFormFieldSelectionResponse(rsp *http.Response) (*GetIncidentFormFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentFormFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentFormFieldSelectionResponse parses an HTTP response from a UpdateIncidentFormFieldSelectionWithResponse call
func ParseUpdateIncidentFormFieldSelectionResponse(rsp *http.Response) (*UpdateIncidentFormFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentFormFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentPermissionSetBooleanResponse parses an HTTP response from a DeleteIncidentPermissionSetBooleanWithResponse call
func ParseDeleteIncidentPermissionSetBooleanResponse(rsp *http.Response) (*DeleteIncidentPermissionSetBooleanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentPermissionSetBooleanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentPermissionSetBooleanResponse parses an HTTP response from a GetIncidentPermissionSetBooleanWithResponse call
func ParseGetIncidentPermissionSetBooleanResponse(rsp *http.Response) (*GetIncidentPermissionSetBooleanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentPermissionSetBooleanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentPermissionSetBooleanResponse parses an HTTP response from a UpdateIncidentPermissionSetBooleanWithResponse call
func ParseUpdateIncidentPermissionSetBooleanResponse(rsp *http.Response) (*UpdateIncidentPermissionSetBooleanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentPermissionSetBooleanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentPermissionSetResourceResponse parses an HTTP response from a DeleteIncidentPermissionSetResourceWithResponse call
func ParseDeleteIncidentPermissionSetResourceResponse(rsp *http.Response) (*DeleteIncidentPermissionSetResourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentPermissionSetResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentPermissionSetResourceResponse parses an HTTP response from a GetIncidentPermissionSetResourceWithResponse call
func ParseGetIncidentPermissionSetResourceResponse(rsp *http.Response) (*GetIncidentPermissionSetResourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentPermissionSetResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentPermissionSetResourceResponse parses an HTTP response from a UpdateIncidentPermissionSetResourceWithResponse call
func ParseUpdateIncidentPermissionSetResourceResponse(rsp *http.Response) (*UpdateIncidentPermissionSetResourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentPermissionSetResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentPermissionSetsResponse parses an HTTP response from a ListIncidentPermissionSetsWithResponse call
func ParseListIncidentPermissionSetsResponse(rsp *http.Response) (*ListIncidentPermissionSetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentPermissionSetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentPermissionSetResponse parses an HTTP response from a CreateIncidentPermissionSetWithResponse call
func ParseCreateIncidentPermissionSetResponse(rsp *http.Response) (*CreateIncidentPermissionSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentPermissionSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentPermissionSetResponse parses an HTTP response from a DeleteIncidentPermissionSetWithResponse call
func ParseDeleteIncidentPermissionSetResponse(rsp *http.Response) (*DeleteIncidentPermissionSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentPermissionSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentPermissionSetResponse parses an HTTP response from a GetIncidentPermissionSetWithResponse call
func ParseGetIncidentPermissionSetResponse(rsp *http.Response) (*GetIncidentPermissionSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentPermissionSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentPermissionSetResponse parses an HTTP response from a UpdateIncidentPermissionSetWithResponse call
func ParseUpdateIncidentPermissionSetResponse(rsp *http.Response) (*UpdateIncidentPermissionSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentPermissionSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentPermissionSetBooleansResponse parses an HTTP response from a ListIncidentPermissionSetBooleansWithResponse call
func ParseListIncidentPermissionSetBooleansResponse(rsp *http.Response) (*ListIncidentPermissionSetBooleansResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentPermissionSetBooleansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentPermissionSetBooleanResponse parses an HTTP response from a CreateIncidentPermissionSetBooleanWithResponse call
func ParseCreateIncidentPermissionSetBooleanResponse(rsp *http.Response) (*CreateIncidentPermissionSetBooleanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentPermissionSetBooleanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentPermissionSetResourcesResponse parses an HTTP response from a ListIncidentPermissionSetResourcesWithResponse call
func ParseListIncidentPermissionSetResourcesResponse(rsp *http.Response) (*ListIncidentPermissionSetResourcesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentPermissionSetResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentPermissionSetResourceResponse parses an HTTP response from a CreateIncidentPermissionSetResourceWithResponse call
func ParseCreateIncidentPermissionSetResourceResponse(rsp *http.Response) (*CreateIncidentPermissionSetResourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentPermissionSetResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentRoleTaskResponse parses an HTTP response from a DeleteIncidentRoleTaskWithResponse call
func ParseDeleteIncidentRoleTaskResponse(rsp *http.Response) (*DeleteIncidentRoleTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentRoleTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentRoleTaskResponse parses an HTTP response from a GetIncidentRoleTaskWithResponse call
func ParseGetIncidentRoleTaskResponse(rsp *http.Response) (*GetIncidentRoleTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentRoleTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentRoleTaskResponse parses an HTTP response from a UpdateIncidentRoleTaskWithResponse call
func ParseUpdateIncidentRoleTaskResponse(rsp *http.Response) (*UpdateIncidentRoleTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentRoleTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentRolesResponse parses an HTTP response from a ListIncidentRolesWithResponse call
func ParseListIncidentRolesResponse(rsp *http.Response) (*ListIncidentRolesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentRoleResponse parses an HTTP response from a CreateIncidentRoleWithResponse call
func ParseCreateIncidentRoleResponse(rsp *http.Response) (*CreateIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentRoleResponse parses an HTTP response from a DeleteIncidentRoleWithResponse call
func ParseDeleteIncidentRoleResponse(rsp *http.Response) (*DeleteIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentRoleResponse parses an HTTP response from a GetIncidentRoleWithResponse call
func ParseGetIncidentRoleResponse(rsp *http.Response) (*GetIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentRoleResponse parses an HTTP response from a UpdateIncidentRoleWithResponse call
func ParseUpdateIncidentRoleResponse(rsp *http.Response) (*UpdateIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentRoleTasksResponse parses an HTTP response from a ListIncidentRoleTasksWithResponse call
func ParseListIncidentRoleTasksResponse(rsp *http.Response) (*ListIncidentRoleTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentRoleTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentRoleTaskResponse parses an HTTP response from a CreateIncidentRoleTaskWithResponse call
func ParseCreateIncidentRoleTaskResponse(rsp *http.Response) (*CreateIncidentRoleTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentRoleTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentTypesResponse parses an HTTP response from a ListIncidentTypesWithResponse call
func ParseListIncidentTypesResponse(rsp *http.Response) (*ListIncidentTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentTypeResponse parses an HTTP response from a CreateIncidentTypeWithResponse call
func ParseCreateIncidentTypeResponse(rsp *http.Response) (*CreateIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentTypeResponse parses an HTTP response from a DeleteIncidentTypeWithResponse call
func ParseDeleteIncidentTypeResponse(rsp *http.Response) (*DeleteIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentTypeResponse parses an HTTP response from a GetIncidentTypeWithResponse call
func ParseGetIncidentTypeResponse(rsp *http.Response) (*GetIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentTypeResponse parses an HTTP response from a UpdateIncidentTypeWithResponse call
func ParseUpdateIncidentTypeResponse(rsp *http.Response) (*UpdateIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentsResponse parses an HTTP response from a ListIncidentsWithResponse call
func ParseListIncidentsResponse(rsp *http.Response) (*ListIncidentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentResponse parses an HTTP response from a CreateIncidentWithResponse call
func ParseCreateIncidentResponse(rsp *http.Response) (*CreateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentResponse parses an HTTP response from a DeleteIncidentWithResponse call
func ParseDeleteIncidentResponse(rsp *http.Response) (*DeleteIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentResponse parses an HTTP response from a GetIncidentWithResponse call
func ParseGetIncidentResponse(rsp *http.Response) (*GetIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentResponse parses an HTTP response from a UpdateIncidentWithResponse call
func ParseUpdateIncidentResponse(rsp *http.Response) (*UpdateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddSubscribersToIncidentResponse parses an HTTP response from a AddSubscribersToIncidentWithResponse call
func ParseAddSubscribersToIncidentResponse(rsp *http.Response) (*AddSubscribersToIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddSubscribersToIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAssignUserToIncidentResponse parses an HTTP response from a AssignUserToIncidentWithResponse call
func ParseAssignUserToIncidentResponse(rsp *http.Response) (*AssignUserToIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssignUserToIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCancelIncidentResponse parses an HTTP response from a CancelIncidentWithResponse call
func ParseCancelIncidentResponse(rsp *http.Response) (*CancelIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMarkAsDuplicateIncidentResponse parses an HTTP response from a MarkAsDuplicateIncidentWithResponse call
func ParseMarkAsDuplicateIncidentResponse(rsp *http.Response) (*MarkAsDuplicateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarkAsDuplicateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTriageIncidentResponse parses an HTTP response from a TriageIncidentWithResponse call
func ParseTriageIncidentResponse(rsp *http.Response) (*TriageIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TriageIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMitigateIncidentResponse parses an HTTP response from a MitigateIncidentWithResponse call
func ParseMitigateIncidentResponse(rsp *http.Response) (*MitigateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MitigateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRemoveSubscribersToIncidentResponse parses an HTTP response from a RemoveSubscribersToIncidentWithResponse call
func ParseRemoveSubscribersToIncidentResponse(rsp *http.Response) (*RemoveSubscribersToIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveSubscribersToIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResolveIncidentResponse parses an HTTP response from a ResolveIncidentWithResponse call
func ParseResolveIncidentResponse(rsp *http.Response) (*ResolveIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResolveIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRestartIncidentResponse parses an HTTP response from a RestartIncidentWithResponse call
func ParseRestartIncidentResponse(rsp *http.Response) (*RestartIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestartIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRemoveAssignedUserFromIncidentResponse parses an HTTP response from a RemoveAssignedUserFromIncidentWithResponse call
func ParseRemoveAssignedUserFromIncidentResponse(rsp *http.Response) (*RemoveAssignedUserFromIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveAssignedUserFromIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentActionItemsResponse parses an HTTP response from a ListIncidentActionItemsWithResponse call
func ParseListIncidentActionItemsResponse(rsp *http.Response) (*ListIncidentActionItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentActionItemResponse parses an HTTP response from a CreateIncidentActionItemWithResponse call
func ParseCreateIncidentActionItemResponse(rsp *http.Response) (*CreateIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentAlertsResponse parses an HTTP response from a ListIncidentAlertsWithResponse call
func ParseListIncidentAlertsResponse(rsp *http.Response) (*ListIncidentAlertsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAttachAlertResponse parses an HTTP response from a AttachAlertWithResponse call
func ParseAttachAlertResponse(rsp *http.Response) (*AttachAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AttachAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentCustomFieldSelectionsResponse parses an HTTP response from a ListIncidentCustomFieldSelectionsWithResponse call
func ParseListIncidentCustomFieldSelectionsResponse(rsp *http.Response) (*ListIncidentCustomFieldSelectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentCustomFieldSelectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentCustomFieldSelectionResponse parses an HTTP response from a CreateIncidentCustomFieldSelectionWithResponse call
func ParseCreateIncidentCustomFieldSelectionResponse(rsp *http.Response) (*CreateIncidentCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentEventsResponse parses an HTTP response from a ListIncidentEventsWithResponse call
func ParseListIncidentEventsResponse(rsp *http.Response) (*ListIncidentEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentEventResponse parses an HTTP response from a CreateIncidentEventWithResponse call
func ParseCreateIncidentEventResponse(rsp *http.Response) (*CreateIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentFeedbacksResponse parses an HTTP response from a ListIncidentFeedbacksWithResponse call
func ParseListIncidentFeedbacksResponse(rsp *http.Response) (*ListIncidentFeedbacksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentFeedbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentFeedbackResponse parses an HTTP response from a CreateIncidentFeedbackWithResponse call
func ParseCreateIncidentFeedbackResponse(rsp *http.Response) (*CreateIncidentFeedbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentFormFieldSelectionsResponse parses an HTTP response from a ListIncidentFormFieldSelectionsWithResponse call
func ParseListIncidentFormFieldSelectionsResponse(rsp *http.Response) (*ListIncidentFormFieldSelectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentFormFieldSelectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentFormFieldSelectionResponse parses an HTTP response from a CreateIncidentFormFieldSelectionWithResponse call
func ParseCreateIncidentFormFieldSelectionResponse(rsp *http.Response) (*CreateIncidentFormFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentFormFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentStatusPagesResponse parses an HTTP response from a ListIncidentStatusPagesWithResponse call
func ParseListIncidentStatusPagesResponse(rsp *http.Response) (*ListIncidentStatusPagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentStatusPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentStatusPageResponse parses an HTTP response from a CreateIncidentStatusPageWithResponse call
func ParseCreateIncidentStatusPageResponse(rsp *http.Response) (*CreateIncidentStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIpRangesResponse parses an HTTP response from a GetIpRangesWithResponse call
func ParseGetIpRangesResponse(rsp *http.Response) (*GetIpRangesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIpRangesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePlaybookTaskResponse parses an HTTP response from a DeletePlaybookTaskWithResponse call
func ParseDeletePlaybookTaskResponse(rsp *http.Response) (*DeletePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlaybookTaskResponse parses an HTTP response from a GetPlaybookTaskWithResponse call
func ParseGetPlaybookTaskResponse(rsp *http.Response) (*GetPlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePlaybookTaskResponse parses an HTTP response from a UpdatePlaybookTaskWithResponse call
func ParseUpdatePlaybookTaskResponse(rsp *http.Response) (*UpdatePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPlaybooksResponse parses an HTTP response from a ListPlaybooksWithResponse call
func ParseListPlaybooksResponse(rsp *http.Response) (*ListPlaybooksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPlaybooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreatePlaybookResponse parses an HTTP response from a CreatePlaybookWithResponse call
func ParseCreatePlaybookResponse(rsp *http.Response) (*CreatePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePlaybookResponse parses an HTTP response from a DeletePlaybookWithResponse call
func ParseDeletePlaybookResponse(rsp *http.Response) (*DeletePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlaybookResponse parses an HTTP response from a GetPlaybookWithResponse call
func ParseGetPlaybookResponse(rsp *http.Response) (*GetPlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePlaybookResponse parses an HTTP response from a UpdatePlaybookWithResponse call
func ParseUpdatePlaybookResponse(rsp *http.Response) (*UpdatePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPlaybookTasksResponse parses an HTTP response from a ListPlaybookTasksWithResponse call
func ParseListPlaybookTasksResponse(rsp *http.Response) (*ListPlaybookTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPlaybookTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreatePlaybookTaskResponse parses an HTTP response from a CreatePlaybookTaskWithResponse call
func ParseCreatePlaybookTaskResponse(rsp *http.Response) (*CreatePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPostmortemTemplatesResponse parses an HTTP response from a ListPostmortemTemplatesWithResponse call
func ParseListPostmortemTemplatesResponse(rsp *http.Response) (*ListPostmortemTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPostmortemTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreatePostmortemTemplateResponse parses an HTTP response from a CreatePostmortemTemplateWithResponse call
func ParseCreatePostmortemTemplateResponse(rsp *http.Response) (*CreatePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePostmortemTemplateResponse parses an HTTP response from a DeletePostmortemTemplateWithResponse call
func ParseDeletePostmortemTemplateResponse(rsp *http.Response) (*DeletePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPostmortemTemplateResponse parses an HTTP response from a GetPostmortemTemplateWithResponse call
func ParseGetPostmortemTemplateResponse(rsp *http.Response) (*GetPostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePostmortemTemplateResponse parses an HTTP response from a UpdatePostmortemTemplateWithResponse call
func ParseUpdatePostmortemTemplateResponse(rsp *http.Response) (*UpdatePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentPostMortemsResponse parses an HTTP response from a ListIncidentPostMortemsWithResponse call
func ParseListIncidentPostMortemsResponse(rsp *http.Response) (*ListIncidentPostMortemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentPostMortemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentPostmortemResponse parses an HTTP response from a ListIncidentPostmortemWithResponse call
func ParseListIncidentPostmortemResponse(rsp *http.Response) (*ListIncidentPostmortemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentPostmortemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentPostmortemResponse parses an HTTP response from a UpdateIncidentPostmortemWithResponse call
func ParseUpdateIncidentPostmortemResponse(rsp *http.Response) (*UpdateIncidentPostmortemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentPostmortemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPulsesResponse parses an HTTP response from a ListPulsesWithResponse call
func ParseListPulsesResponse(rsp *http.Response) (*ListPulsesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPulsesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreatePulseResponse parses an HTTP response from a CreatePulseWithResponse call
func ParseCreatePulseResponse(rsp *http.Response) (*CreatePulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPulseResponse parses an HTTP response from a GetPulseWithResponse call
func ParseGetPulseResponse(rsp *http.Response) (*GetPulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePulseResponse parses an HTTP response from a UpdatePulseWithResponse call
func ParseUpdatePulseResponse(rsp *http.Response) (*UpdatePulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListRetrospectiveStepsResponse parses an HTTP response from a ListRetrospectiveStepsWithResponse call
func ParseListRetrospectiveStepsResponse(rsp *http.Response) (*ListRetrospectiveStepsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRetrospectiveStepsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateRetrospectiveStepResponse parses an HTTP response from a CreateRetrospectiveStepWithResponse call
func ParseCreateRetrospectiveStepResponse(rsp *http.Response) (*CreateRetrospectiveStepResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRetrospectiveStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRetrospectiveStepResponse parses an HTTP response from a DeleteRetrospectiveStepWithResponse call
func ParseDeleteRetrospectiveStepResponse(rsp *http.Response) (*DeleteRetrospectiveStepResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRetrospectiveStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRetrospectiveStepResponse parses an HTTP response from a GetRetrospectiveStepWithResponse call
func ParseGetRetrospectiveStepResponse(rsp *http.Response) (*GetRetrospectiveStepResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRetrospectiveStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateRetrospectiveStepResponse parses an HTTP response from a UpdateRetrospectiveStepWithResponse call
func ParseUpdateRetrospectiveStepResponse(rsp *http.Response) (*UpdateRetrospectiveStepResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRetrospectiveStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListRolesResponse parses an HTTP response from a ListRolesWithResponse call
func ParseListRolesResponse(rsp *http.Response) (*ListRolesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateRoleResponse parses an HTTP response from a CreateRoleWithResponse call
func ParseCreateRoleResponse(rsp *http.Response) (*CreateRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRoleResponse parses an HTTP response from a DeleteRoleWithResponse call
func ParseDeleteRoleResponse(rsp *http.Response) (*DeleteRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRoleResponse parses an HTTP response from a GetRoleWithResponse call
func ParseGetRoleResponse(rsp *http.Response) (*GetRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateRoleResponse parses an HTTP response from a UpdateRoleWithResponse call
func ParseUpdateRoleResponse(rsp *http.Response) (*UpdateRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListSecretsResponse parses an HTTP response from a ListSecretsWithResponse call
func ParseListSecretsResponse(rsp *http.Response) (*ListSecretsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateSecretResponse parses an HTTP response from a CreateSecretWithResponse call
func ParseCreateSecretResponse(rsp *http.Response) (*CreateSecretResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSecretResponse parses an HTTP response from a DeleteSecretWithResponse call
func ParseDeleteSecretResponse(rsp *http.Response) (*DeleteSecretResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSecretResponse parses an HTTP response from a GetSecretWithResponse call
func ParseGetSecretResponse(rsp *http.Response) (*GetSecretResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateSecretResponse parses an HTTP response from a UpdateSecretWithResponse call
func ParseUpdateSecretResponse(rsp *http.Response) (*UpdateSecretResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListServicesResponse parses an HTTP response from a ListServicesWithResponse call
func ParseListServicesResponse(rsp *http.Response) (*ListServicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateServiceResponse parses an HTTP response from a CreateServiceWithResponse call
func ParseCreateServiceResponse(rsp *http.Response) (*CreateServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteServiceResponse parses an HTTP response from a DeleteServiceWithResponse call
func ParseDeleteServiceResponse(rsp *http.Response) (*DeleteServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceResponse parses an HTTP response from a GetServiceWithResponse call
func ParseGetServiceResponse(rsp *http.Response) (*GetServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateServiceResponse parses an HTTP response from a UpdateServiceWithResponse call
func ParseUpdateServiceResponse(rsp *http.Response) (*UpdateServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceIncidentsChartResponse parses an HTTP response from a GetServiceIncidentsChartWithResponse call
func ParseGetServiceIncidentsChartResponse(rsp *http.Response) (*GetServiceIncidentsChartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceIncidentsChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceUptimeChartResponse parses an HTTP response from a GetServiceUptimeChartWithResponse call
func ParseGetServiceUptimeChartResponse(rsp *http.Response) (*GetServiceUptimeChartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceUptimeChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListSeveritiesResponse parses an HTTP response from a ListSeveritiesWithResponse call
func ParseListSeveritiesResponse(rsp *http.Response) (*ListSeveritiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSeveritiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateSeverityResponse parses an HTTP response from a CreateSeverityWithResponse call
func ParseCreateSeverityResponse(rsp *http.Response) (*CreateSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSeverityResponse parses an HTTP response from a DeleteSeverityWithResponse call
func ParseDeleteSeverityResponse(rsp *http.Response) (*DeleteSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSeverityResponse parses an HTTP response from a GetSeverityWithResponse call
func ParseGetSeverityResponse(rsp *http.Response) (*GetSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateSeverityResponse parses an HTTP response from a UpdateSeverityWithResponse call
func ParseUpdateSeverityResponse(rsp *http.Response) (*UpdateSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentStatusPageResponse parses an HTTP response from a DeleteIncidentStatusPageWithResponse call
func ParseDeleteIncidentStatusPageResponse(rsp *http.Response) (*DeleteIncidentStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentStatusPagesResponse parses an HTTP response from a GetIncidentStatusPagesWithResponse call
func ParseGetIncidentStatusPagesResponse(rsp *http.Response) (*GetIncidentStatusPagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentStatusPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentStatusPageResponse parses an HTTP response from a UpdateIncidentStatusPageWithResponse call
func ParseUpdateIncidentStatusPageResponse(rsp *http.Response) (*UpdateIncidentStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListStatusPagesResponse parses an HTTP response from a ListStatusPagesWithResponse call
func ParseListStatusPagesResponse(rsp *http.Response) (*ListStatusPagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListStatusPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateStatusPageResponse parses an HTTP response from a CreateStatusPageWithResponse call
func ParseCreateStatusPageResponse(rsp *http.Response) (*CreateStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteStatusPageResponse parses an HTTP response from a DeleteStatusPageWithResponse call
func ParseDeleteStatusPageResponse(rsp *http.Response) (*DeleteStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStatusPageResponse parses an HTTP response from a GetStatusPageWithResponse call
func ParseGetStatusPageResponse(rsp *http.Response) (*GetStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateStatusPageResponse parses an HTTP response from a UpdateStatusPageWithResponse call
func ParseUpdateStatusPageResponse(rsp *http.Response) (*UpdateStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListStatusPageTemplatesResponse parses an HTTP response from a ListStatusPageTemplatesWithResponse call
func ParseListStatusPageTemplatesResponse(rsp *http.Response) (*ListStatusPageTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListStatusPageTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateStatusPageTemplateResponse parses an HTTP response from a CreateStatusPageTemplateWithResponse call
func ParseCreateStatusPageTemplateResponse(rsp *http.Response) (*CreateStatusPageTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStatusPageTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListTeamsResponse parses an HTTP response from a ListTeamsWithResponse call
func ParseListTeamsResponse(rsp *http.Response) (*ListTeamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateTeamResponse parses an HTTP response from a CreateTeamWithResponse call
func ParseCreateTeamResponse(rsp *http.Response) (*CreateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteTeamResponse parses an HTTP response from a DeleteTeamWithResponse call
func ParseDeleteTeamResponse(rsp *http.Response) (*DeleteTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTeamResponse parses an HTTP response from a GetTeamWithResponse call
func ParseGetTeamResponse(rsp *http.Response) (*GetTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateTeamResponse parses an HTTP response from a UpdateTeamWithResponse call
func ParseUpdateTeamResponse(rsp *http.Response) (*UpdateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteStatusPageTemplateResponse parses an HTTP response from a DeleteStatusPageTemplateWithResponse call
func ParseDeleteStatusPageTemplateResponse(rsp *http.Response) (*DeleteStatusPageTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStatusPageTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStatusPageTemplateResponse parses an HTTP response from a GetStatusPageTemplateWithResponse call
func ParseGetStatusPageTemplateResponse(rsp *http.Response) (*GetStatusPageTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusPageTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateStatusPageTemplateResponse parses an HTTP response from a UpdateStatusPageTemplateWithResponse call
func ParseUpdateStatusPageTemplateResponse(rsp *http.Response) (*UpdateStatusPageTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateStatusPageTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListUsersResponse parses an HTTP response from a ListUsersWithResponse call
func ParseListUsersResponse(rsp *http.Response) (*ListUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCurrentUserResponse parses an HTTP response from a GetCurrentUserWithResponse call
func ParseGetCurrentUserResponse(rsp *http.Response) (*GetCurrentUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCurrentUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWebhooksDeliveryResponse parses an HTTP response from a GetWebhooksDeliveryWithResponse call
func ParseGetWebhooksDeliveryResponse(rsp *http.Response) (*GetWebhooksDeliveryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWebhooksDeliveryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeliverWebhooksDeliveryResponse parses an HTTP response from a DeliverWebhooksDeliveryWithResponse call
func ParseDeliverWebhooksDeliveryResponse(rsp *http.Response) (*DeliverWebhooksDeliveryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeliverWebhooksDeliveryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListWebhooksEndpointsResponse parses an HTTP response from a ListWebhooksEndpointsWithResponse call
func ParseListWebhooksEndpointsResponse(rsp *http.Response) (*ListWebhooksEndpointsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWebhooksEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateWebhooksEndpointResponse parses an HTTP response from a CreateWebhooksEndpointWithResponse call
func ParseCreateWebhooksEndpointResponse(rsp *http.Response) (*CreateWebhooksEndpointResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWebhooksEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListWebhooksDeliveriesResponse parses an HTTP response from a ListWebhooksDeliveriesWithResponse call
func ParseListWebhooksDeliveriesResponse(rsp *http.Response) (*ListWebhooksDeliveriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWebhooksDeliveriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteWebhooksEndpointResponse parses an HTTP response from a DeleteWebhooksEndpointWithResponse call
func ParseDeleteWebhooksEndpointResponse(rsp *http.Response) (*DeleteWebhooksEndpointResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWebhooksEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWebhooksEndpointResponse parses an HTTP response from a GetWebhooksEndpointWithResponse call
func ParseGetWebhooksEndpointResponse(rsp *http.Response) (*GetWebhooksEndpointResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWebhooksEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateWebhooksEndpointResponse parses an HTTP response from a UpdateWebhooksEndpointWithResponse call
func ParseUpdateWebhooksEndpointResponse(rsp *http.Response) (*UpdateWebhooksEndpointResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWebhooksEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteWorkflowCustomFieldSelectionResponse parses an HTTP response from a DeleteWorkflowCustomFieldSelectionWithResponse call
func ParseDeleteWorkflowCustomFieldSelectionResponse(rsp *http.Response) (*DeleteWorkflowCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWorkflowCustomFieldSelectionResponse parses an HTTP response from a GetWorkflowCustomFieldSelectionWithResponse call
func ParseGetWorkflowCustomFieldSelectionResponse(rsp *http.Response) (*GetWorkflowCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateWorkflowCustomFieldSelectionResponse parses an HTTP response from a UpdateWorkflowCustomFieldSelectionWithResponse call
func ParseUpdateWorkflowCustomFieldSelectionResponse(rsp *http.Response) (*UpdateWorkflowCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkflowCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteWorkflowFormFieldConditionResponse parses an HTTP response from a DeleteWorkflowFormFieldConditionWithResponse call
func ParseDeleteWorkflowFormFieldConditionResponse(rsp *http.Response) (*DeleteWorkflowFormFieldConditionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowFormFieldConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWorkflowFormFieldConditionResponse parses an HTTP response from a GetWorkflowFormFieldConditionWithResponse call
func ParseGetWorkflowFormFieldConditionResponse(rsp *http.Response) (*GetWorkflowFormFieldConditionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowFormFieldConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateWorkflowFormFieldConditionResponse parses an HTTP response from a UpdateWorkflowFormFieldConditionWithResponse call
func ParseUpdateWorkflowFormFieldConditionResponse(rsp *http.Response) (*UpdateWorkflowFormFieldConditionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkflowFormFieldConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListWorkflowGroupsResponse parses an HTTP response from a ListWorkflowGroupsWithResponse call
func ParseListWorkflowGroupsResponse(rsp *http.Response) (*ListWorkflowGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateWorkflowGroupResponse parses an HTTP response from a CreateWorkflowGroupWithResponse call
func ParseCreateWorkflowGroupResponse(rsp *http.Response) (*CreateWorkflowGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteWorkflowGroupResponse parses an HTTP response from a DeleteWorkflowGroupWithResponse call
func ParseDeleteWorkflowGroupResponse(rsp *http.Response) (*DeleteWorkflowGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWorkflowGroupResponse parses an HTTP response from a GetWorkflowGroupWithResponse call
func ParseGetWorkflowGroupResponse(rsp *http.Response) (*GetWorkflowGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateWorkflowGroupResponse parses an HTTP response from a UpdateWorkflowGroupWithResponse call
func ParseUpdateWorkflowGroupResponse(rsp *http.Response) (*UpdateWorkflowGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkflowGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteWorkflowTaskResponse parses an HTTP response from a DeleteWorkflowTaskWithResponse call
func ParseDeleteWorkflowTaskResponse(rsp *http.Response) (*DeleteWorkflowTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWorkflowTaskResponse parses an HTTP response from a GetWorkflowTaskWithResponse call
func ParseGetWorkflowTaskResponse(rsp *http.Response) (*GetWorkflowTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateWorkflowTaskResponse parses an HTTP response from a UpdateWorkflowTaskWithResponse call
func ParseUpdateWorkflowTaskResponse(rsp *http.Response) (*UpdateWorkflowTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkflowTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListWorkflowsResponse parses an HTTP response from a ListWorkflowsWithResponse call
func ParseListWorkflowsResponse(rsp *http.Response) (*ListWorkflowsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateWorkflowResponse parses an HTTP response from a CreateWorkflowWithResponse call
func ParseCreateWorkflowResponse(rsp *http.Response) (*CreateWorkflowResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteWorkflowResponse parses an HTTP response from a DeleteWorkflowWithResponse call
func ParseDeleteWorkflowResponse(rsp *http.Response) (*DeleteWorkflowResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWorkflowResponse parses an HTTP response from a GetWorkflowWithResponse call
func ParseGetWorkflowResponse(rsp *http.Response) (*GetWorkflowResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateWorkflowResponse parses an HTTP response from a UpdateWorkflowWithResponse call
func ParseUpdateWorkflowResponse(rsp *http.Response) (*UpdateWorkflowResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListWorkflowCustomFieldSelectionsResponse parses an HTTP response from a ListWorkflowCustomFieldSelectionsWithResponse call
func ParseListWorkflowCustomFieldSelectionsResponse(rsp *http.Response) (*ListWorkflowCustomFieldSelectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowCustomFieldSelectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateWorkflowCustomFieldSelectionResponse parses an HTTP response from a CreateWorkflowCustomFieldSelectionWithResponse call
func ParseCreateWorkflowCustomFieldSelectionResponse(rsp *http.Response) (*CreateWorkflowCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListWorkflowFormFieldConditionsResponse parses an HTTP response from a ListWorkflowFormFieldConditionsWithResponse call
func ParseListWorkflowFormFieldConditionsResponse(rsp *http.Response) (*ListWorkflowFormFieldConditionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowFormFieldConditionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateWorkflowFormFieldConditionResponse parses an HTTP response from a CreateWorkflowFormFieldConditionWithResponse call
func ParseCreateWorkflowFormFieldConditionResponse(rsp *http.Response) (*CreateWorkflowFormFieldConditionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowFormFieldConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListWorkflowRunsResponse parses an HTTP response from a ListWorkflowRunsWithResponse call
func ParseListWorkflowRunsResponse(rsp *http.Response) (*ListWorkflowRunsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowRunsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateWorkflowRunResponse parses an HTTP response from a CreateWorkflowRunWithResponse call
func ParseCreateWorkflowRunResponse(rsp *http.Response) (*CreateWorkflowRunResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListWorkflowTasksResponse parses an HTTP response from a ListWorkflowTasksWithResponse call
func ParseListWorkflowTasksResponse(rsp *http.Response) (*ListWorkflowTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateWorkflowTaskResponse parses an HTTP response from a CreateWorkflowTaskWithResponse call
func ParseCreateWorkflowTaskResponse(rsp *http.Response) (*CreateWorkflowTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
